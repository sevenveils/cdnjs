{"version":3,"sources":["webpack://Tone/webpack/universalModuleDefinition","webpack://Tone/webpack/bootstrap","webpack://Tone/./Tone/core/util/Defaults.ts","webpack://Tone/./Tone/core/util/TypeCheck.ts","webpack://Tone/./Tone/core/util/Interface.ts","webpack://Tone/./Tone/core/Global.ts","webpack://Tone/./Tone/core/context/ToneAudioNode.ts","webpack://Tone/./Tone/core/util/Timeline.ts","webpack://Tone/./Tone/core/Tone.ts","webpack://Tone/./Tone/core/context/ToneWithContext.ts","webpack://Tone/./Tone/core/context/Param.ts","webpack://Tone/./Tone/core/type/Time.ts","webpack://Tone/./Tone/core/context/Gain.ts","webpack://Tone/./Tone/core/Connect.ts","webpack://Tone/./Tone/core/util/StateTimeline.ts","webpack://Tone/./Tone/core/type/TransportTime.ts","webpack://Tone/./Tone/core/type/Conversions.ts","webpack://Tone/./Tone/core/util/Emitter.ts","webpack://Tone/./Tone/core/type/Ticks.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffer.ts","webpack://Tone/./Tone/core/context/ContextInitialization.ts","webpack://Tone/./Tone/core/context/Context.ts","webpack://Tone/./Tone/source/oscillator/OscillatorNode.ts","webpack://Tone/./Tone/source/OneShotSource.ts","webpack://Tone/./Tone/source/buffer/BufferSource.ts","webpack://Tone/./Tone/source/Source.ts","webpack://Tone/./Tone/core/clock/TransportEvent.ts","webpack://Tone/./Tone/component/channel/Volume.ts","webpack://Tone/./Tone/core/util/IntervalTimeline.ts","webpack://Tone/./Tone/core/clock/Clock.ts","webpack://Tone/./Tone/core/type/Frequency.ts","webpack://Tone/./Tone/version.ts","webpack://Tone/./Tone/signal/Signal.ts","webpack://Tone/./Tone/source/oscillator/Oscillator.ts","webpack://Tone/./Tone/source/Noise.ts","webpack://Tone/./Tone/source/index.ts","webpack://Tone/./Tone/core/clock/TransportRepeatEvent.ts","webpack://Tone/./Tone/core/clock/Transport.ts","webpack://Tone/./Tone/core/context/Destination.ts","webpack://Tone/./Tone/core/util/Draw.ts","webpack://Tone/./Tone/core/clock/TickSignal.ts","webpack://Tone/./Tone/core/clock/TickSource.ts","webpack://Tone/./Tone/core/context/Delay.ts","webpack://Tone/./Tone/core/context/OfflineContext.ts","webpack://Tone/./Tone/core/type/TypeBase.ts","webpack://Tone/./Tone/core/index.ts","webpack://Tone/./Tone/core/context/AudioContext.ts","webpack://Tone/./Tone/core/clock/Ticker.ts","webpack://Tone/./Tone/index.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","TypeCheck_1","deepMerge","target","sources","_i","arguments","length","source","shift","isObject","key","assign","_a","_b","apply","concat","optionsFromArguments","defaults","argsArray","keys","opts","args","Array","from","isDefined","getDefaultsFromInstance","instance","constructor","getDefaults","defaultArg","given","fallback","isUndef","arg","isString","isFunction","isNumber","toString","isBoolean","isArray","isNote","test","readOnly","forEach","str","writable","noOp","globalContext","version_1","Context_1","setContext","context","initialize","window","TONE_CONTEXT","getContext","Context","start","resume","TONE_SILENCE_LOGGING","prefix","version","printString","console","log","Defaults_1","ToneWithContext_1","ToneAudioNode","_super","_this","options","numberOfInputs","numberOfOutputs","__extends","ToneWithContext","channelCount","channelCountMode","channelInterpretation","createInsOuts","input","createGain","output","_setChannelProperties","_internalChannels","node","_getChannelProperties","props","connect","destination","outputNum","inputNum","toDestination","toMaster","disconnect","chain","nodes","connectSeries","fan","dispose","AudioNode","first","reduce","prev","current","srcNode","dstNode","outputNumber","inputNumber","AudioParam","assert","dst","e","Tone_1","Timeline","_timeline","memory","Infinity","add","event","Reflect","has","time","valueOf","index","_search","splice","diff","remove","indexOf","param","peek","getAfter","getBefore","len","cancel","after","slice","cancelBefore","previousEvent","beginning","end","midPoint","Math","floor","event_1","nextEvent","_iterate","callback","lowerBound","upperBound","forEachBefore","forEachAfter","forEachBetween","startTime","endTime","forEachFrom","forEachAtTime","Tone","debug","statement","error","Error","Global_1","Frequency_1","Time_1","TransportTime_1","defaultContext","now","currentTime","lookAhead","immediate","sampleRate","toSeconds","TimeClass","toFrequency","freq","FrequencyClass","toTicks","TransportTimeClass","attribute","member","set","Conversions_1","Timeline_1","Param","overridden","_minOutput","_param","_events","_initialValue","units","convert","setValueAtTime","getValueAtTime","_fromType","cancelScheduledValues","minValue","maxValue","_is","type","val","dbToGain","min","max","_toType","gainToDb","numericValue","computedTime","before","beforeValue","previous","_linearInterpolate","_exponentialInterpolate","previousVal","constant","_exponentialApproach","setRampPoint","currentVal","cancelAndHoldAtTime","linearRampToValueAtTime","exponentialRampToValueAtTime","exponentialRampTo","rampTime","linearRampTo","targetRampTo","exponentialApproachValueAtTime","timeConstant","setTargetAtTime","setValueCurveAtTime","values","duration","scaling","startingValue","segTime","valueAtTime","sampleTime","rampTo","t0","v0","v1","t","exp","t1","pow","_getExpressions","defaultUnit","method","capture","_now","regexp","quantize","quantTo","_secondsToUnits","transport","nextSubdivision","subdiv","percent","subdivision","round","toNotation","testNotations","power","push","closest","closestSeconds","notation","notationSeconds","abs","toBarsBeatsSixteenths","quarterTime","_beatsToUnits","quarters","parseFloat","toFixed","measures","_getTimeSignature","sixteenths","sixteenthString","join","_getPPQ","toMidi","ftom","TypeBaseClass","Time","Param_1","Interface_1","ToneAudioNode_1","Gain","_gainNode","gain","StateTimeline","initial","_initial","state","setStateAtTime","getLastState","getNextState","event_2","seconds","TransportTime","equalPowerScale","piFactor","PI","sin","db","LN10","intervalToFrequencyRatio","interval","A4","getA4","setA4","frequency","log2","Emitter","on","split","eventName","once","boundCallback","off","eventList","emit","mixin","constr","getOwnPropertyDescriptor","undefined","TicksClass","defaultUnits","ticks","beats","_getBpm","_ticksToUnits","Ticks","ToneAudioBuffer","onload","reverse","url","AudioBuffer","load","catch","onerror","_buffer","buffer","loaded","_reversed","_reverse","promise","downloads","audioBuffer","sent","e_1","fromArray","array","isMultidimensional","channels","createBuffer","multiChannelArray","copyToChannel","toMono","chanNum","toArray","outputArray","Float32Array","numChannels_1","numberOfChannels","channel","channelArray","map","sample","getChannelData","ret","startSamples","endSamples","replacementArray","rev","fromUrl","matches","match","extensions","extension","extensions_1","ext","supportsType","replace","fetch","baseUrl","response","ok","arrayBuffer","decodeAudioData","document","createElement","canPlayType","notifyNewContext","onContextInit","cb","initializeContext","ctx","Ticker_1","Emitter_1","AudioContext_1","ContextInitialization_1","_constants","Map","_timeouts","_timeoutIds","_initialized","_context","_latencyHint","latencyHint","_ticker","Ticker","bind","clockSource","updateInterval","_timeoutLoop","addEventListener","getAudioContext","createAnalyser","createOscillator","createBufferSource","createBiquadFilter","createChannelMerger","createChannelSplitter","createConstantSource","createConvolver","createDelay","maxDelayTime","createDynamicsCompressor","createIIRFilter","feedforward","feedback","createPanner","createPeriodicWave","real","imag","constraints","createStereoPanner","createWaveShaper","audioData","listener","_transport","_destination","hint","lookAheadValue","AudioContext","Promise","resolve","close","getConstant","arr","loop","firstEvent","setTimeout","fn","timeout","id","clearTimeout","Connect_1","OneShotSource_1","ToneOscillatorNode","_oscillator","detune","OneShotSource","_startGain","_stopSource","stop","setPeriodicWave","periodicWave","Gain_1","onended","_startTime","_stopTime","_timeout","_fadeIn","_fadeOut","_curve","getStateAtTime","fadeInTime","_stopGain","cancelStop","fadeOutTime","ToneAudioBuffer_1","ToneBufferSource","_source","_sourceStarted","_sourceStopped","playbackRate","loopStart","loopEnd","curve","fadeIn","fadeOut","offset","computedDur","additionalTail","Volume_1","StateTimeline_1","Source","Volume","_volume","volume","_state","_synced","_scheduled","_syncedStart","_syncedStop","mute","restart","sched","schedule","_start","_stop","sync","stateEvent","startOffset","getSecondsAtTime","unsync","clear","TransportEvent","_eventId","_once","invoke","_unmutedVolume","IntervalTimeline","_root","_length","IntervalNode","insert","updateHeight","updateMax","_rebalance","parent","results","search","results_1","_removeNode","_setRoot","_replaceNodeInParent","replacement","isLeftChild","left","right","temp","getBalance","_rotateLeft","pivotNode","_rotateRight","balance","low","allNodes_1","traverse","searchAfter","high","_left","_right","height","point","TickSource_1","Clock","_lastUpdate","_boundLoop","_loop","_tickSource","TickSource","pause","ceil","getTicksAtTime","setTicksAtTime","nextTickTime","when","currentTick","getTimeOfTick","forEachTickBetween","Conversions_2","midi","_defaultUnits","mtof","note","pitch","octave","noteNumber","noteToScaleIndex","toLowerCase","parseInt","tr","q","total","transpose","harmonize","intervals","toNote","scaleIndexToNote","_noArg","_frequencyToUnits","cbb","c#","cx","dbb","d#","dx","ebb","eb","e#","ex","fbb","fb","f","f#","fx","gbb","gb","g","g#","gx","abb","ab","a","a#","ax","bbb","bb","b","b#","bx","Frequency","Signal","override","_constantSource","Signal_1","Source_1","OscillatorNode_1","Oscillator","_partials","partials","_partialCount","partialCount","_phase","phase","_type","baseType","oscillator","_wave","syncFrequency","syncSignal","unsyncFrequency","unsyncSignal","isBasicType","_getRealImaginary","partial","exec","periodicWaveSize","fftSize","TypeError","cos","_inverseFFT","sum","_getInitialValue","twoPi","BufferSource_1","Noise","_playbackRate","_noiseBuffers","rate","random","_noiseCache","brown","pink","white","channelNum","lastOut","b0","b1","b2","b3","b4","b5","b6","Noise_1","Oscillator_1","Ticks_1","TransportEvent_1","TransportRepeatEvent","_currentId","_nextId","_nextTick","_boundRestart","_restart","_interval","_createEvents","scheduleOnce","IntervalTimeline_1","Clock_1","TransportRepeatEvent_1","Transport","_loopStart","_loopEnd","_scheduledEvents","_repeatedEvents","_syncedSignals","_swingAmount","_ppq","ppq","_clock","_processTick","_bindClockEvents","bpm","multiplier","_timeSignature","timeSignature","_swingTicks","swing","swingSubdivision","tickTime","progress","amount","_addEvent","scheduleRepeat","eventId","item","timeline","computedAfter","offsetTicks","toggle","timeSig","startPosition","endPosition","setLoopPoints","timeToTicks","remainingTicks","signal","ratio","computedFreq","PPQ","ratioSignal","syncedSignal","Destination","rawContext","unshift","Draw","expiration","anticipation","_boundDrawLoop","_drawLoop","_animationFrame","requestAnimationFrame","cancelAnimationFrame","TickSignal","_sig","_multiplier","computedValue","prevEvent","segments","rampVal","ticksUntilTime","_getTicksUntilEvent","computedVal","segmentDur","val0","val1","onTheLineEvent","getDurationOfTicks","tick","delta","k","sqrt","sol1","ticksToTime","computedDuration","startTicks","TickSignal_1","_tickOffset","stopEvent","tmpEvent","lastState","elapsedTicks","periodStartTime","offsetEvent","elapsedSeconds","absoluteTicks","computedStartTime","computedEndTime","lastStateEvent","maxStartTime","Delay","maxDelay","delayTime","_delayNode","OfflineContext","OfflineAudioContext","_currentTime","_duration","render","startRendering","_val","_units","_expressions","fromType","hz","dot","scalar","number","samples","trim","typeName","quantity","expr","matching","toSamples","toMilliseconds","OfflineContext_1","Delay_1","Draw_1","Destination_1","Transport_1","setAudioContext","TONE_AUDIO_CONTEXT","_callback","_updateInterval","_createClock","_createWorker","blob","Blob","blobUrl","URL","createObjectURL","worker","Worker","onmessage","_worker","_createTimeout","_disposeClock","terminate","postMessage","__export","Global_2"],"mappings":"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","file":"Tone.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Tone\"] = factory();\n\telse\n\t\troot[\"Tone\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 47);\n","// import { BaseToneOptions } from \"../Tone\";\nimport { isDefined, isObject, isUndef } from \"./TypeCheck\";\n\ntype BaseToneOptions = import(\"../Tone\").BaseToneOptions;\n\n/**\n * Recursively merge an object\n * @param target the object to merge into\n * @param sources the source objects to merge\n */\nexport function deepMerge<T>(target: T, ...sources: T[]): T {\n\tif (!sources.length) { return target; }\n\tconst source = sources.shift();\n\n\tif (isObject(target) && isObject(source)) {\n\t\tfor (const key in source) {\n\t\t\tif (isObject(source[key])) {\n\t\t\t\tif (!target[key]) { Object.assign(target, { [key]: {} }); }\n\t\t\t\tdeepMerge(target[key], source[key] as any);\n\t\t\t} else {\n\t\t\t\tObject.assign(target, { [key]: source[key] as any });\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Convert an args array into an object.\n */\nexport function optionsFromArguments<T>(defaults: T, argsArray: IArguments, keys: string[] = []): T {\n\tconst opts: any = {};\n\tconst args = Array.from(argsArray);\n\tif (args.length === 1 && isObject(args[0])) {\n\t\tdeepMerge(opts, args[0]);\n\t} else {\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tif (isDefined(args[i])) {\n\t\t\t\topts[keys[i]] = args[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn deepMerge(defaults, opts);\n}\n\n/**\n * Return this instances default values by calling Constructor.getDefaults()\n */\nexport function getDefaultsFromInstance<T>(instance: T): BaseToneOptions {\n\ttype ToneClass = {\n\t\tconstructor: ToneClass;\n\t\tgetDefaults: () => BaseToneOptions;\n\t} & T;\n\n\treturn (instance as ToneClass).constructor.getDefaults();\n}\n\n/**\n * Returns the fallback if the given object is undefined.\n * Take an array of arguments and return a formatted options object.\n */\nexport function defaultArg<T>(given: T, fallback: T): T {\n\tif (isUndef(given)) {\n\t\treturn fallback;\n\t} else {\n\t\treturn given;\n\t}\n}\n","/**\n *  Test if the arg is undefined\n */\nexport function isUndef(arg: any): arg is undefined {\n\treturn typeof arg === \"undefined\";\n}\n\n/**\n *  Test if the arg is not undefined\n */\nexport function isDefined<T>(arg: T | undefined): arg is T {\n\treturn !isUndef(arg);\n}\n\n/**\n *  Test if the arg is a function\n */\nexport function isFunction(arg: any): arg is (a: any) => any {\n\treturn typeof arg === \"function\";\n}\n\n/**\n *  Test if the argument is a number.\n */\nexport function isNumber(arg: any): arg is number {\n\treturn (typeof arg === \"number\");\n}\n\n/**\n *  Test if the given argument is an object literal (i.e. `{}`);\n */\nexport function isObject(arg: any): arg is object {\n\treturn (Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object);\n}\n\n/**\n *  Test if the argument is a boolean.\n */\nexport function isBoolean(arg: any): arg is boolean {\n\treturn (typeof arg === \"boolean\");\n}\n\n/**\n *  Test if the argument is an Array\n */\nexport function isArray(arg: any): arg is any[] {\n\treturn (Array.isArray(arg));\n}\n\n/**\n *  Test if the argument is a string.\n */\nexport function isString(arg: any): arg is string {\n\treturn (typeof arg === \"string\");\n}\n\n/**\n *  Test if the argument is in the form of a note in scientific pitch notation.\n *  e.g. \"C4\"\n */\nexport function isNote(arg: any): arg is Note {\n\treturn isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}\n","import { isArray } from \"./TypeCheck\";\n\n// return an interface which excludes certain keys\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n *  Make the property not writable using `defineProperty`. Internal use only.\n */\nexport function readOnly(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => readOnly(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\tenumerable: true,\n\t\t\twritable: false,\n\t\t});\n\t}\n}\n\n/**\n *  Make an attribute writeable. Internal use only.\n */\nexport function writable(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => writable(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\twritable: true,\n\t\t});\n\t}\n}\n\nexport const noOp: (...args: any[]) => any = () => {\n\t// no op!\n};\n","import { version } from \"../version\";\nimport { Context } from \"./context/Context\";\n\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext: Context;\n\n// @ts-ignore\nglobalContext = window.TONE_CONTEXT;\n\n/**\n * Returns the default system-wide AudioContext\n */\nexport function getContext(): Context {\n\tif (!globalContext) {\n\t\tsetContext(new Context());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n */\nexport function setContext(context: Context): void {\n\tglobalContext = context;\n\tcontext.initialize();\n\t// @ts-ignore\n\twindow.TONE_CONTEXT = context;\n}\n\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * document.querySelector('#playbutton').addEventListener('click', () => Tone.start())\n */\nexport function start(): Promise <void> {\n\treturn globalContext.resume();\n}\n\n/**\n * Log Tone.js + version in the console.\n */\nif (!this.TONE_SILENCE_LOGGING) {\n\tlet prefix = \"v\";\n\t// @ts-ignore\n\tif (version === \"dev\") {\n\t\tprefix = \"\";\n\t}\n\tconst printString = ` * Tone.js ${prefix}${version} * `;\n\t// tslint:disable-next-line: no-console\n\tconsole.log(`%c${printString}`, \"background: #000; color: #fff\");\n}\n","import { optionsFromArguments } from \"../util/Defaults\";\nimport { isArray, isDefined, isNumber } from \"../util/TypeCheck\";\nimport { Param } from \"./Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\n\nexport type InputNode = ToneAudioNode | AudioNode | AudioParam | Param<Unit>;\nexport type OutputNode = ToneAudioNode | AudioNode;\n\nexport interface ChannelProperties {\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n * The possible options for this node\n */\nexport interface ToneAudioNodeOptions extends ToneWithContextOptions {\n\tnumberOfInputs: number;\n\tnumberOfOutputs: number;\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n *  ToneAudioNode is the base class for classes which process audio.\n */\nexport abstract class ToneAudioNode<Options extends ToneAudioNodeOptions = ToneAudioNodeOptions>\nextends ToneWithContext<Options> {\n\n\tabstract name = \"AudioNode\";\n\n\t/**\n\t * The input node or nodes. If the object is a source,\n\t * it does not have any input and this.input is undefined.\n\t */\n\tabstract input: InputNode | InputNode[] | undefined;\n\n\t/**\n\t * The output nodes. If the object is a sink,\n\t * it does not have any output and this.output is undefined.\n\t */\n\tabstract output: OutputNode | OutputNode[] | undefined;\n\n\t/**\n\t *  The number of inputs feeding into the AudioNode.\n\t *  For source nodes, this will be 0.\n\t */\n\treadonly numberOfInputs: number;\n\n\t/**\n\t *  The number of outputs of the AudioNode.\n\t */\n\treadonly numberOfOutputs: number;\n\n\t/**\n\t * List all of the node that must be set to match the ChannelProperties\n\t */\n\tprotected abstract _internalChannels: OutputNode[];\n\n\tstatic getDefaults(): ToneAudioNodeOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tchannelCount: 2,\n\t\t\tchannelCountMode: \"max\" as ChannelCountMode,\n\t\t\tchannelInterpretation: \"speakers\" as ChannelInterpretation,\n\t\t\tnumberOfInputs: 0,\n\t\t\tnumberOfOutputs: 0,\n\t\t});\n\t}\n\n\tconstructor(options: Partial<ToneAudioNodeOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(ToneAudioNode.getDefaults(), arguments, [\"context\"]));\n\n\t\tconst options = optionsFromArguments(ToneAudioNode.getDefaults(), arguments, [\"context\"]);\n\n\t\tthis.numberOfInputs = options.numberOfInputs;\n\t\tthis.numberOfOutputs = options.numberOfInputs;\n\t}\n\n\tprotected createInsOuts(numberOfInputs: number = 0, numberOfOutputs: number = 0): void {\n\t\tif (numberOfInputs === 1) {\n\t\t\tthis.input = this.context.createGain();\n\t\t} else if (numberOfInputs > 1) {\n\t\t\tthis.input = [];\n\t\t\tfor (let i = 0; i < numberOfInputs; i++) {\n\t\t\t\tthis.input[i] = this.context.createGain();\n\t\t\t}\n\t\t}\n\n\t\tif (numberOfOutputs === 1) {\n\t\t\tthis.output = this.context.createGain();\n\t\t} else if (numberOfOutputs > 1) {\n\t\t\tthis.output = [];\n\t\t\tfor (let o = 0; o < numberOfOutputs; o++) {\n\t\t\t\tthis.output[o] = this.context.createGain();\n\t\t\t}\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// AUDIO PROPERTIES\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Set the audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t * @param options\n\t */\n\tprivate _setChannelProperties(options: ChannelProperties): void {\n\t\tif (this._internalChannels.length) {\n\t\t\tthis._internalChannels.forEach(node => {\n\t\t\t\tnode.channelCount = options.channelCount;\n\t\t\t\tnode.channelCountMode = options.channelCountMode;\n\t\t\t\tnode.channelInterpretation = options.channelInterpretation;\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Get the current audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t */\n\tprivate _getChannelProperties(): ChannelProperties {\n\t\tif (this._internalChannels.length) {\n\t\t\tconst node = this._internalChannels[0];\n\t\t\treturn {\n\t\t\t\tchannelCount: node.channelCount,\n\t\t\t\tchannelCountMode: node.channelCountMode,\n\t\t\t\tchannelInterpretation: node.channelInterpretation,\n\t\t\t};\n\t\t} else {\n\t\t\t// return the defaults\n\t\t\treturn {\n\t\t\t\tchannelCount: 2,\n\t\t\t\tchannelCountMode: \"max\",\n\t\t\t\tchannelInterpretation: \"speakers\",\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t *  channelCount is the number of channels used when up-mixing and down-mixing\n\t *  connections to any inputs to the node. The default value is 2 except for\n\t *  specific nodes where its value is specially determined.\n\t */\n\tget channelCount(): number {\n\t\treturn this._getChannelProperties().channelCount;\n\t}\n\tset channelCount(channelCount: number) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCount }));\n\t}\n\n\t/**\n\t *  channelCountMode determines how channels will be counted when up-mixing and\n\t *  down-mixing connections to any inputs to the node.\n\t *  The default value is \"max\". This attribute has no effect for nodes with no inputs.\n\t */\n\tget channelCountMode(): ChannelCountMode {\n\t\treturn this._getChannelProperties().channelCountMode;\n\t}\n\tset channelCountMode(channelCountMode: ChannelCountMode) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCountMode }));\n\t}\n\n\t/**\n\t *  channelInterpretation determines how individual channels will be treated\n\t *  when up-mixing and down-mixing connections to any inputs to the node.\n\t *  The default value is \"speakers\".\n\t */\n\tget channelInterpretation(): ChannelInterpretation {\n\t\treturn this._getChannelProperties().channelInterpretation;\n\t}\n\tset channelInterpretation(channelInterpretation: ChannelInterpretation) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelInterpretation }));\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONNECTIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n\t * @param unit The output to connect to\n\t * @param outputNum The output to connect from\n\t * @param inputNum The input to connect to\n\t */\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t */\n\ttoDestination(): this {\n\t\tthis.connect(this.context.destination);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t * alias for {@link toDestination}\n\t */\n\ttoMaster(): this {\n\t\treturn this.toDestination();\n\t}\n\n\t/**\n\t *  disconnect the output\n\t *  @param output Either the output index to disconnect if the output is an array, or the node to disconnect from.\n\t */\n\tdisconnect(destination?: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tdisconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Connect the output of this node to the rest of the nodes in series.\n\t *  @param nodes\n\t *  @example\n\t *  //connect a node to an effect, panVol and then to the master output\n\t *  node.chain(effect, panVol, Tone.Destination);\n\t */\n\tchain(...nodes: InputNode[]): this {\n\t\tconnectSeries(this, ...nodes);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  connect the output of this node to the rest of the nodes in parallel.\n\t *  @param nodes\n\t *  @returns this\n\t */\n\tfan(...nodes: InputNode[]): this {\n\t\tnodes.forEach(node => this.connect(node));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Dispose and disconnect\n\t */\n\tdispose(): this {\n\t\tif (isDefined(this.input)) {\n\t\t\tif (isArray(this.input)) {\n\t\t\t\tthis.input.forEach(input => {\n\t\t\t\t\tif (input instanceof ToneAudioNode) {\n\t\t\t\t\t\tinput.dispose();\n\t\t\t\t\t} else if (input instanceof AudioNode) {\n\t\t\t\t\t\tinput.disconnect();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (this.input instanceof AudioNode) {\n\t\t\t\t\tthis.input.disconnect();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (isDefined(this.output)) {\n\t\t\tif (isArray(this.output)) {\n\t\t\t\tthis.output.forEach(output => {\n\t\t\t\t\tif (output instanceof ToneAudioNode) {\n\t\t\t\t\t\toutput.dispose();\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutput.disconnect();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.output.disconnect();\n\t\t\t}\n\t\t}\n\t\tthis._internalChannels = [];\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// CONNECTIONS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n *  connect together all of the arguments in series\n *  @param nodes\n */\nexport function connectSeries(...nodes: InputNode[]): void {\n\tconst first = nodes.shift();\n\tnodes.reduce((prev, current) => {\n\t\tif (prev instanceof ToneAudioNode) {\n\t\t\tprev.connect(current);\n\t\t} else if (prev instanceof AudioNode) {\n\t\t\tconnect(prev, current);\n\t\t}\n\t\treturn current;\n\t}, first);\n}\n\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function connect(srcNode: OutputNode, dstNode: InputNode, outputNumber = 0, inputNumber = 0): void {\n\n\t// resolve the input of the dstNode\n\twhile (!(dstNode instanceof AudioNode || dstNode instanceof AudioParam)) {\n\t\tif (isArray(dstNode.input)) {\n\t\t\tthis.assert(dstNode.input.length < inputNumber, \"the output number is greater than the number of outputs\");\n\t\t\tdstNode = dstNode.input[inputNumber];\n\t\t} else if (isDefined(dstNode.input)) {\n\t\t\tdstNode = dstNode.input;\n\t\t}\n\t\tinputNumber = 0;\n\t}\n\n\tif (srcNode instanceof ToneAudioNode) {\n\t\tif (isArray(srcNode.output)) {\n\t\t\tthis.assert(srcNode.output.length < outputNumber, \"the output number is greater than the number of outputs\");\n\t\t\tsrcNode = srcNode.output[outputNumber];\n\t\t} else if (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t\toutputNumber = 0;\n\t}\n\n\t// make the connection\n\tif (dstNode instanceof AudioParam) {\n\t\tsrcNode.connect(dstNode, outputNumber);\n\t} else {\n\t\tsrcNode.connect(dstNode, outputNumber, inputNumber);\n\t}\n}\n\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function disconnect(\n\tsrcNode: OutputNode,\n\tdstNode?: InputNode,\n\toutputNumber = 0,\n\tinputNumber = 0,\n): void {\n\n\t// resolve the destination node\n\tif (isDefined(dstNode)) {\n\t\twhile (dstNode instanceof ToneAudioNode) {\n\t\t\tif (isArray(dstNode.input)) {\n\t\t\t\tif (isNumber(inputNumber)) {\n\t\t\t\t\tthis.assert(dstNode.input.length < inputNumber, \"the input number is greater than the number of inputs\");\n\t\t\t\t\tdstNode = dstNode.input[inputNumber];\n\t\t\t\t} else {\n\t\t\t\t\t// disconnect from all of the nodes\n\t\t\t\t\t// since we don't know which one was connected\n\t\t\t\t\tdstNode.input.forEach(dst => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// catch errors from disconnecting from nodes that are not connected\n\t\t\t\t\t\t\tdisconnect(srcNode, dst, outputNumber);\n\t\t\t\t\t\t\t// tslint:disable-next-line: no-empty\n\t\t\t\t\t\t} catch (e) { }\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tinputNumber = 0;\n\t\t\t} else if (dstNode.input) {\n\t\t\t\tdstNode = dstNode.input;\n\t\t\t}\n\t\t}\n\t}\n\n\t// resolve the src node\n\twhile (!(srcNode instanceof AudioNode)) {\n\t\tif (isArray(srcNode.output)) {\n\t\t\tthis.assert(srcNode.output.length < outputNumber, \"the output number is greater than the number of outputs\");\n\t\t\tsrcNode = srcNode.output[outputNumber];\n\t\t} else if (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t\toutputNumber = 0;\n\t}\n\n\tif (dstNode instanceof AudioParam) {\n\t\tsrcNode.disconnect(dstNode, outputNumber);\n\t} else if (dstNode instanceof AudioNode) {\n\t\tsrcNode.disconnect(dstNode, outputNumber, inputNumber);\n\t} else {\n\t\tsrcNode.disconnect();\n\t}\n}\n","import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"./Defaults\";\n\ntype TimelineSearchParam = \"ticks\" | \"time\";\n\n/**\n * The options object for Timeline\n */\ninterface TimelineOptions {\n\tmemory: number;\n}\n\n/**\n * An event must have a time number\n */\nexport interface TimelineEvent {\n\ttime: number;\n}\n\n/**\n *  @class A Timeline class for scheduling and maintaining state\n *         along a timeline. All events must have a \"time\" property.\n *         Internally, events are stored in time order for fast\n *         retrieval.\n *  @param memory The number of previous events that are retained.\n */\nexport class Timeline<GenericEvent extends TimelineEvent> extends Tone {\n\n\tname = \"Timeline\";\n\n\t/**\n\t *  The memory of the timeline, i.e.\n\t *  how many events in the past it will retain\n\t */\n\tmemory: number;\n\n\t/**\n\t * The array of scheduled timeline events\n\t */\n\tprotected _timeline: GenericEvent[] = [];\n\n\tconstructor(options?: Partial<TimelineOptions>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(memory?: number);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Timeline.getDefaults(), arguments, [\"memory\"]);\n\n\t\tthis.memory = options.memory;\n\t}\n\n\tstatic getDefaults(): TimelineOptions {\n\t\treturn {\n\t\t\tmemory: Infinity,\n\t\t};\n\t}\n\n\t/**\n\t *  The number of items in the timeline.\n\t */\n\tget length(): number {\n\t\treturn this._timeline.length;\n\t}\n\n\t/**\n\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t *  @param event  The event object to insert into the timeline.\n\t */\n\tadd(event: GenericEvent): Timeline<GenericEvent> {\n\t\t// the event needs to have a time attribute\n\t\tthis.assert(Reflect.has(event, \"time\"), \"Timeline: events must have a time attribute\");\n\t\tevent.time = event.time.valueOf();\n\t\tconst index = this._search(event.time);\n\t\tthis._timeline.splice(index + 1, 0, event);\n\t\t// if the length is more than the memory, remove the previous ones\n\t\tif (this.length > this.memory) {\n\t\t\tconst diff = this.length - this.memory;\n\t\t\tthis._timeline.splice(0, diff);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  {Object}  event  The event object to remove from the list.\n\t *  @returns {Timeline} this\n\t */\n\tremove(event: GenericEvent): Timeline<GenericEvent> {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index !== -1) {\n\t\t\tthis._timeline.splice(index, 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the nearest event whose time is less than or equal to the given time.\n\t *  @param  time  The time to query.\n\t */\n\tget(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index !== -1) {\n\t\t\treturn this._timeline[index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Return the first event in the timeline without removing it\n\t *  @returns {Object} The first event object\n\t */\n\tpeek(): GenericEvent | undefined {\n\t\treturn this._timeline[0];\n\t}\n\n\t/**\n\t *  Return the first event in the timeline and remove it\n\t */\n\tshift(): GenericEvent | undefined {\n\t\treturn this._timeline.shift();\n\t}\n\n\t/**\n\t *  Get the event which is scheduled after the given time.\n\t *  @param  time  The time to query.\n\t */\n\tgetAfter(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index + 1 < this._timeline.length) {\n\t\t\treturn this._timeline[index + 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Get the event before the event at the given time.\n\t *  @param  time  The time to query.\n\t */\n\tgetBefore(time: number): GenericEvent | null {\n\t\tconst len = this._timeline.length;\n\t\t// if it's after the last item, return the last item\n\t\tif (len > 0 && this._timeline[len - 1].time < time) {\n\t\t\treturn this._timeline[len - 1];\n\t\t}\n\t\tconst index = this._search(time);\n\t\tif (index - 1 >= 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Cancel events at and after the given time\n\t *  @param  time  The time to query.\n\t */\n\tcancel(after: number): Timeline<GenericEvent> {\n\t\tif (this._timeline.length > 1) {\n\t\t\tlet index = this._search(after);\n\t\t\tif (index >= 0) {\n\t\t\t\tif (this._timeline[index].time === after) {\n\t\t\t\t\t// get the first item with that time\n\t\t\t\t\tfor (let i = index; i >= 0; i--) {\n\t\t\t\t\t\tif (this._timeline[i].time === after) {\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index);\n\t\t\t\t} else {\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t} else if (this._timeline.length === 1) {\n\t\t\t// the first item's time\n\t\t\tif (this._timeline[0].time >= after) {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel events before or equal to the given time.\n\t *  @param  {Number}  time  The time to cancel before.\n\t *  @returns {Timeline} this\n\t */\n\tcancelBefore(time): Timeline<GenericEvent> {\n\t\tconst index = this._search(time);\n\t\tif (index >= 0) {\n\t\t\tthis._timeline = this._timeline.slice(index + 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the previous event if there is one. null otherwise\n\t * @param  {Object} event The event to find the previous one of\n\t * @return {Object}       The event right before the given event\n\t */\n\tpreviousEvent(event): GenericEvent | null {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index > 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Does a binary search on the timeline array and returns the\n\t *  nearest event index whose time is after or equal to the given time.\n\t *  If a time is searched before the first index in the timeline, -1 is returned.\n\t *  If the time is after the end, the index of the last item is returned.\n\t *  @param  time\n\t */\n\tprotected _search(time: number, param: TimelineSearchParam = \"time\"): number {\n\t\tif (this._timeline.length === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet beginning = 0;\n\t\tconst len = this._timeline.length;\n\t\tlet end = len;\n\t\tif (len > 0 && this._timeline[len - 1][param] <= time) {\n\t\t\treturn len - 1;\n\t\t}\n\t\twhile (beginning < end) {\n\t\t\t// calculate the midpoint for roughly equal partition\n\t\t\tlet midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\t\tconst event = this._timeline[midPoint];\n\t\t\tconst nextEvent = this._timeline[midPoint + 1];\n\t\t\tif (event[param] === time) {\n\t\t\t\t// choose the last one that has the same time\n\t\t\t\tfor (let i = midPoint; i < this._timeline.length; i++) {\n\t\t\t\t\tconst testEvent = this._timeline[i];\n\t\t\t\t\tif (testEvent[param] === time) {\n\t\t\t\t\t\tmidPoint = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[param] < time && nextEvent[param] > time) {\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[param] > time) {\n\t\t\t\t// search lower\n\t\t\t\tend = midPoint;\n\t\t\t} else {\n\t\t\t\t// search upper\n\t\t\t\tbeginning = midPoint + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t *  Internal iterator. Applies extra safety checks for\n\t *  removing items from the array.\n\t */\n\tprivate _iterate(\n\t\tcallback: (event: GenericEvent) => void,\n\t\tlowerBound = 0, upperBound = this._timeline.length - 1,\n\t): void {\n\t\tthis._timeline.slice(lowerBound, upperBound + 1).forEach(callback);\n\t}\n\n\t/**\n\t *  Iterate over everything in the array\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\tthis._iterate(callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at or before the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachBefore(time, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array after the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAfter(time, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst lowerBound = this._search(time);\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array between the startTime and endTime.\n\t *  The timerange is inclusive of the startTime, but exclusive of the endTime.\n\t *  range = [startTime, endTime).\n\t *  @param  startTime The time to check if items are before\n\t *  @param  endTime The end of the test interval.\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachBetween(startTime: number, endTime: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\tlet lowerBound = this._search(startTime);\n\t\tlet upperBound = this._search(endTime);\n\t\tif (lowerBound !== -1 && upperBound !== -1) {\n\t\t\tif (this._timeline[lowerBound].time !== startTime) {\n\t\t\t\tlowerBound += 1;\n\t\t\t}\n\t\t\t// exclusive of the end time\n\t\t\tif (this._timeline[upperBound].time === endTime) {\n\t\t\t\tupperBound -= 1;\n\t\t\t}\n\t\t\tthis._iterate(callback, lowerBound, upperBound);\n\t\t} else if (lowerBound === -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at or after the given time. Similar to\n\t *  forEachAfter, but includes the item(s) at the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tlet lowerBound = this._search(time);\n\t\t// work backwards until the event time is less than time\n\t\twhile (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t\t\tlowerBound--;\n\t\t}\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at the given time\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(event => {\n\t\t\t\tif (event.time === time) {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t}, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tthis._timeline = [];\n\t\treturn this;\n\t}\n}\n","/**\n *  Tone.js\n *  @author Yotam Mann\n *  @license http://opensource.org/licenses/MIT MIT License\n *  @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\n// import { getContext } from \"./Global\";\nimport \"./type/Units\";\n\n///////////////////////////////////////////////////////////////////////////\n// \tTONE\n///////////////////////////////////////////////////////////////////////////\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseToneOptions {}\n\n/**\n *  @class  Tone is the base class of all other classes.\n *  @constructor\n */\nexport abstract class Tone {\n\n\t/**\n\t * The version number semver\n\t */\n\tstatic version: string = version;\n\n\t/**\n\t * The name of the class\n\t */\n\tprotected abstract name: string;\n\n\t/**\n\t *  disconnect and dispose.\n\t */\n\tabstract dispose(): this;\n\n\t/**\n\t * Takes a partial options an returns the completed options by filling in the defaults\n\t */\n\tstatic getDefaults(): BaseToneOptions {\n\t\treturn {};\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDEBUGGING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Set this debug flag to log all events that happen in this class.\n\t */\n\tprotected debug: boolean = false;\n\n\t/**\n\t * Prints the outputs to the console log for debugging purposes.\n\t * Prints the contents only if either the object has a property\n\t * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n\t * is set to the name of the class.\n\t * @param args\n\t *  @example\n\t * //prints all logs originating from Tone.OscillatorNode\n\t * Tone.global.TONE_DEBUG_CLASS = \"OscillatorNode\"\n\t */\n\tprotected log(...args): void {\n\t\t// if the object is either set to debug = true\n\t\t// or if there is a string on the Tone.global.with the class name\n\t\t// if (this.debug || this.toString() === global.TONE_DEBUG_CLASS) {\n\t\t// \targs.unshift(this.toString() + \":\");\n\t\t// \t// eslint-disable-next-line no-console\n\t\t// \tconsole.log(...args);\n\t\t// }\n\t}\n\n\t/**\n\t *  Assert that the statement is true, otherwise invoke the error.\n\t *  @param {Boolean} statement\n\t *  @param {String} error The message which is passed into an Error\n\t *  @private\n\t */\n\tprotected assert(statement: boolean, error: string): void {\n\t\tif (!statement) {\n\t\t\tthrow new Error(error);\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDEFAULTS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  If the `given` parameter is undefined, use the `fallback`.\n\t *  If both `given` and `fallback` are object literals, it will\n\t *  return a deep copy which includes all of the parameters from both\n\t *  objects. If a parameter is undefined in given, it will return\n\t *  the fallback property.\n\t *  <br><br>\n\t *  WARNING: if object is self referential, it will go into an an\n\t *  infinite recursive loop.\n\t *  @memberOf Tone\n\t *  @param  {*} given\n\t *  @param  {*} fallback\n\t *  @return {*}\n\t */\n\t// static defaultArg(given, fallback) {\n\t\t// if (isObject(given) && isObject(fallback)) {\n\t\t// \tconst ret = {};\n\t\t// \t// make a deep copy of the given object\n\t\t// \tfor (const givenProp in given) {\n\t\t// \t\tret[givenProp] = Tone.defaultArg(fallback[givenProp], given[givenProp]);\n\t\t// \t}\n\t\t// \tfor (const fallbackProp in fallback) {\n\t\t// \t\tret[fallbackProp] = Tone.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t\t// \t}\n\t\t// \treturn ret;\n\t\t// } else {\n\t\t// \treturn isUndef(given) ? fallback : given;\n\t\t// }\n\t// }\n\n\t// protected options(argsArray: IArguments, keys: string[]): object {\n\t// \tlet options: any = {};\n\t// \tconst args = Array.from(argsArray);\n\t// \tif (args[0] instanceof BaseAudioContext) {\n\t// \t\toptions.context = args.shift();\n\t// \t}\n\t// \tif (args.length === 1 && isObject(args[0])) {\n\t// \t\toptions = Object.assign(options, args[0]);\n\t// \t} else {\n\t// \t\tfor (let i = 0; i < keys.length; i++) {\n\t// \t\t\tif (isDefined(args[i])) {\n\t// \t\t\t\toptions[keys[i]] = args[i];\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \treturn deepMerge(this.getDefaults(), options);\n\t// }\n\n\t/**\n\t * Convert the class to a string\n\t * @example\n\t * const osc = new Oscillator()\n\t * osc.toString() // \"Oscillator\"\n\t */\n\ttoString(): string {\n\t\treturn this.name;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tSTATIC\n\t///////////////////////////////////////////////////////////////////////////\n\n\t// static get context(): import(\"./context/Context\").Context {\n\t// \treturn getContext();\n\t// }\n\n\t// static now(): Seconds {\n\t// \treturn Tone.context.now();\n\t// }\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport \"../type/Units\";\nimport { getDefaultsFromInstance, optionsFromArguments } from \"../util/Defaults\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { Context } from \"./Context\";\n\n/**\n * A unit which process audio\n */\nexport interface ToneWithContextOptions {\n\tcontext: Context;\n}\n\n/**\n * The Base class for all nodes that have an AudioContext.\n */\nexport abstract class ToneWithContext<Options extends ToneWithContextOptions> extends Tone {\n\n\t/**\n\t * The context belonging to the node.\n\t */\n\treadonly context: Context;\n\n\t/**\n\t * The default context to use if no AudioContext is passed in to the constructor\n\t */\n\treadonly defaultContext?: Context;\n\n\tconstructor(context?: Context | Partial<ToneWithContextOptions>) {\n\t\tconst options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n\t\tsuper();\n\t\tif (this.defaultContext) {\n\t\t\tthis.context = this.defaultContext;\n\t\t} else {\n\t\t\tthis.context = options.context;\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneWithContextOptions {\n\t\treturn {\n\t\t\tcontext: getContext(),\n\t\t};\n\t}\n\n\t/**\n\t * Return the current time of the Context clock plus the lookAhead.\n\t */\n\tnow(): Seconds {\n\t\treturn this.context.currentTime + this.context.lookAhead;\n\t}\n\n\t/**\n\t * Return the current time of the Context clock without any lookAhead.\n\t */\n\timmediate(): Seconds {\n\t\treturn this.context.currentTime;\n\t}\n\n\t/**\n\t * The duration in seconds of one sample.\n\t */\n\tget sampleTime(): Seconds {\n\t\treturn 1 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * The number of seconds of 1 processing block (128 samples)\n\t */\n\tget blockTime(): Seconds {\n\t\treturn 128 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * Convert the incoming time to seconds\n\t */\n\ttoSeconds(time: Time): Seconds {\n\t\treturn new TimeClass(this.context, time).toSeconds();\n\t}\n\n\t/**\n\t * Convert the input to a frequency number\n\t */\n\ttoFrequency(freq: Frequency): Hertz {\n\t\treturn new FrequencyClass(this.context, freq).toFrequency();\n\t}\n\n\t/**\n\t * Convert the input time into ticks\n\t */\n\ttoTicks(time: Time): Ticks {\n\t\treturn new TransportTimeClass(this.context, time).toTicks();\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tGET/SET\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Get the object's attributes. Given no arguments get\n\t * will return all available object properties and their corresponding\n\t * values. Pass in a single attribute to retrieve or an array\n\t * of attributes. The attribute strings can also include a \".\"\n\t * to access deeper properties.\n\t * @param params the parameters to get, otherwise will return all available.\n\t * @example\n\t * osc.get();\n\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t * @example\n\t * osc.get(\"type\");\n\t * //returns { \"type\" : \"sine\"}\n\t * @example\n\t * //use dot notation to access deep properties\n\t * synth.get([\"envelope.attack\", \"envelope.release\"]);\n\t * //returns {\"envelope\" : {\"attack\" : 0.2, \"release\" : 0.4}}\n\t */\n\tget(): Options {\n\t\tconst defaults = getDefaultsFromInstance(this) as Options;\n\t\tObject.keys(defaults).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute)) {\n\t\t\t\tconst member = this[attribute];\n\t\t\t\tif (isDefined(member) && isDefined(member.value)) {\n\t\t\t\t\tdefaults[attribute] = member.value;\n\t\t\t\t} else if (member instanceof ToneWithContext) {\n\t\t\t\t\tdefaults[attribute] = member.get();\n\t\t\t\t} else {\n\t\t\t\t\tdefaults[attribute] = member;\n\t\t\t\t}\n\t\t\t}\n\n\t\t});\n\t\treturn defaults;\n\t}\n\n\t/**\n\t * Set the parameters at once. Either pass in an\n\t * object mapping parameters to values, or to set a\n\t * single parameter, by passing in a string and value.\n\t * The last argument is an optional ramp time which\n\t * will ramp any signal values to their destination value\n\t * over the duration of the rampTime.\n\t * @param  params\n\t * @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : \"highpass\"\n\t * });\n\t */\n\tset(props: Partial<Options>): this {\n\t\tObject.keys(props).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute)) {\n\t\t\t\tif (isDefined(this[attribute]) && isDefined(this[attribute].value)) {\n\t\t\t\t\tthis[attribute].value = props[attribute];\n\t\t\t\t} else if (this[attribute] instanceof ToneWithContext) {\n\t\t\t\t\tthis[attribute].set(props[attribute]);\n\t\t\t\t} else {\n\t\t\t\t\tthis[attribute] = props[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n","import { AbstractParam } from \"../context/AbstractParam\";\nimport { dbToGain, gainToDb } from \"../type/Conversions\";\nimport \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\n\nexport interface ParamOptions extends ToneWithContextOptions {\n\tunits: UnitName;\n\tvalue?: any;\n\tparam: AudioParam;\n\tconvert: boolean;\n}\n\n/**\n * the possible automation types\n */\ntype AutomationType = \"linear\" | \"exponential\" | \"setValue\" | \"setTarget\" | \"cancel\";\n\n/**\n * The events on the automation\n */\nexport interface AutomationEvent {\n\ttype: AutomationType;\n\ttime: number;\n\tvalue: number;\n\tconstant?: number;\n}\n\n/**\n *  Param wraps the native Web Audio's AudioParam to provide\n * additional unit conversion functionality. It also\n * serves as a base-class for classes which have a single,\n * automatable parameter.\n */\nexport class Param<Type extends Unit = number>\nextends ToneWithContext<ParamOptions>\nimplements AbstractParam<Type> {\n\n\tname = \"Param\";\n\n\tstatic getDefaults(): ParamOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t} as ParamOptions);\n\t}\n\n\t/**\n\t * The input connection\n\t */\n\treadonly input: AudioParam;\n\treadonly units: UnitName;\n\tconvert: boolean;\n\toverridden: boolean = false;\n\n\t/**\n\t * The timeline which tracks all of the automations.\n\t */\n\tprotected _events: Timeline<AutomationEvent>;\n\n\t/**\n\t *  The native parameter to control\n\t */\n\tprotected _param: AudioParam;\n\n\t/**\n\t *  The default value before anything is assigned\n\t */\n\tprotected _initialValue: number;\n\n\t/**\n\t *  The minimum output value\n\t */\n\tprivate _minOutput = 1e-5;\n\n\tconstructor(param: AudioParam, units?: Unit, convert?: boolean);\n\tconstructor(options: Partial<ParamOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]));\n\n\t\tconst options = optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]);\n\n\t\tthis.assert(isDefined(options.param) && options.param instanceof AudioParam, \"param must be an AudioParam\");\n\n\t\t// initialize\n\t\tthis._param = this.input = options.param;\n\t\tthis._events = new Timeline<AutomationEvent>(1000);\n\t\tthis._initialValue = this._param.value;\n\t\tthis.units = options.units;\n\t\tthis.convert = options.convert;\n\n\t\t// if the value is defined, set it immediately\n\t\tif (isDefined(options.value)) {\n\t\t\tthis.setValueAtTime(options.value, 0);\n\t\t}\n\t}\n\n\tget value(): Type {\n\t\tconst now = this.now();\n\t\treturn this.getValueAtTime(now);\n\t}\n\tset value(value: Type) {\n\t\tthis._initialValue = this._fromType(value);\n\t\tthis.cancelScheduledValues(this.now());\n\t\tthis.setValueAtTime(value, this.now());\n\t}\n\n\tget minValue(): number {\n\t\tif (this.units === \"time\" || this.units === \"frequency\" ||\n\t\t\tthis.units === \"normalRange\" || this.units === \"positive\" ||\n\t\t\tthis.units === \"transportTime\" || this.units === \"ticks\" ||\n\t\t\tthis.units === \"bpm\" || this.units === \"hertz\" || this.units === \"samples\") {\n\t\t\treturn 0;\n\t\t} else if (this.units === \"audioRange\") {\n\t\t\treturn -1;\n\t\t} else if (this.units === \"decibels\") {\n\t\t\treturn -Infinity;\n\t\t} else {\n\t\t\treturn this._param.minValue;\n\t\t}\n\t}\n\n\tget maxValue(): number {\n\t\tif (this.units === \"normalRange\" ||\n\t\t\tthis.units === \"audioRange\") {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn this._param.maxValue;\n\t\t}\n\t}\n\n\t/**\n\t * Type guard based on the unit name\n\t */\n\tprivate _is<T>(arg: any, type: UnitName): arg is T {\n\t\treturn this.units === type;\n\t}\n\n\t/**\n\t *  Convert the given value from the type specified by Param.units\n\t *  into the destination value (such as Gain or Frequency).\n\t */\n\tprotected _fromType(val: Type): number {\n\t\tif (this.convert && !this.overridden) {\n\t\t\tif (this._is<Time>(val, \"time\")) {\n\t\t\t\treturn this.toSeconds(val);\n\t\t\t} else if (this._is<Decibels>(val, \"decibels\")) {\n\t\t\t\treturn dbToGain(val);\n\t\t\t} else if (this._is<Frequency>(val, \"frequency\")) {\n\t\t\t\treturn this.toFrequency(val);\n\t\t\t} else if (this._is<NormalRange>(val, \"normalRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, 0), 1);\n\t\t\t} else if (this._is<AudioRange>(val, \"audioRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, -1), 1);\n\t\t\t} else if (this._is<Positive>(val, \"positive\")) {\n\t\t\t\treturn Math.max(val, 0);\n\t\t\t} else if (this._is<number>(val, \"number\")) {\n\t\t\t\treturn val;\n\t\t\t} else {\n\t\t\t\treturn val as number;\n\t\t\t}\n\t\t} else {\n\t\t\treturn val as number;\n\t\t}\n\t}\n\n\t/**\n\t * Convert the parameters value into the units specified by Param.units.\n\t */\n\tprotected _toType(val: number): Type {\n\t\tif (this.convert && this.units === \"decibels\") {\n\t\t\treturn gainToDb(val) as Type;\n\t\t} else {\n\t\t\treturn val as Type;\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// ABSTRACT PARAM INTERFACE\n\t// all docs are generated from ParamInterface.ts\n\t///////////////////////////////////////////////////////////////////////////\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tconst numericValue = this._fromType(value);\n\t\tthis._events.add({\n\t\t\ttime,\n\t\t\ttype: \"setValue\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(\"setValue\", value, time);\n\t\tthis._param.setValueAtTime(numericValue, time);\n\t\treturn this;\n\t}\n\n\tgetValueAtTime(time: Time): Type {\n\t\tconst computedTime = Math.max(this.toSeconds(time), 0);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tconst before = this._events.get(computedTime);\n\t\tlet value = this._initialValue;\n\t\t// if it was set by\n\t\tif (before === null) {\n\t\t\tvalue = this._initialValue;\n\t\t} else if (before.type === \"setTarget\" && (after === null || after.type === \"setValue\")) {\n\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\tlet previousVal;\n\t\t\tif (previous === null) {\n\t\t\t\tpreviousVal = this._initialValue;\n\t\t\t} else {\n\t\t\t\tpreviousVal = previous.value;\n\t\t\t}\n\t\t\tif (isDefined(before.constant)) {\n\t\t\t\tvalue = this._exponentialApproach(before.time, previousVal, before.value, before.constant, computedTime);\n\t\t\t}\n\t\t} else if (after === null) {\n\t\t\tvalue = before.value;\n\t\t} else if (after.type === \"linear\" || after.type === \"exponential\") {\n\t\t\tlet beforeValue = before.value;\n\t\t\tif (before.type === \"setTarget\") {\n\t\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\t\tif (previous === null) {\n\t\t\t\t\tbeforeValue = this._initialValue;\n\t\t\t\t} else {\n\t\t\t\t\tbeforeValue = previous.value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (after.type === \"linear\") {\n\t\t\t\tvalue = this._linearInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t} else {\n\t\t\t\tvalue = this._exponentialInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = before.value;\n\t\t}\n\t\treturn this._toType(value);\n\t}\n\n\tsetRampPoint(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tlet currentVal = this.getValueAtTime(time);\n\t\tthis.cancelAndHoldAtTime(time);\n\t\tif (this._fromType(currentVal) === 0) {\n\t\t\tcurrentVal = this._toType(this._minOutput);\n\t\t}\n\t\tthis.setValueAtTime(currentVal, time);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: Type, endTime: Time): this {\n\t\tconst numericValue = this._fromType(value);\n\t\tendTime = this.toSeconds(endTime);\n\t\tthis._events.add({\n\t\t\ttime: endTime,\n\t\t\ttype: \"linear\",\n\t\t\tvalue : numericValue,\n\t\t});\n\t\tthis.log(\"linear\", value, endTime);\n\t\tthis._param.linearRampToValueAtTime(numericValue, endTime);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: Type, endTime: Time): this {\n\t\tlet numericValue = this._fromType(value);\n\t\tnumericValue = Math.max(this._minOutput, numericValue);\n\t\tendTime = this.toSeconds(endTime);\n\t\t// store the event\n\t\tthis._events.add({\n\t\t\ttime: endTime,\n\t\t\ttype: \"exponential\",\n\t\t\tvalue : numericValue,\n\t\t});\n\t\tthis.log(\"exponential\", value, endTime);\n\t\tthis._param.exponentialRampToValueAtTime(numericValue, endTime);\n\t\treturn this;\n\t}\n\n\texponentialRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\tlinearRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\ttargetRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialApproachValueAtTime(value, startTime, rampTime);\n\t\treturn this;\n\t}\n\n\texponentialApproachValueAtTime(value: Type, time: Time, rampTime: Time): this {\n\t\tconst timeConstant = Math.log(this.toSeconds(rampTime) + 1) / Math.log(200);\n\t\ttime = this.toSeconds(time);\n\t\treturn this.setTargetAtTime(value, time, timeConstant);\n\t}\n\n\tsetTargetAtTime(value: Type, startTime: Time, timeConstant: Positive): this {\n\t\tconst numericValue = this._fromType(value);\n\t\t// The value will never be able to approach without timeConstant > 0.\n\t\tthis.assert(timeConstant > 0, \"timeConstant must be greater than 0\");\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis._events.add({\n\t\t\tconstant: timeConstant,\n\t\t\ttime: startTime,\n\t\t\ttype: \"setTarget\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(\"setTarget\", value, startTime, timeConstant);\n\t\tthis._param.setTargetAtTime(numericValue, startTime, timeConstant);\n\t\treturn this;\n\t}\n\n\tsetValueCurveAtTime(values: Type[], startTime: Time, duration: Time, scaling: number = 1): this {\n\t\tduration = this.toSeconds(duration);\n\t\tstartTime = this.toSeconds(startTime);\n\t\tconst startingValue = this._fromType(values[0]) * scaling;\n\t\tthis.setValueAtTime(this._toType(startingValue), startTime);\n\t\tconst segTime = duration / (values.length - 1);\n\t\tfor (let i = 1; i < values.length; i++) {\n\t\t\tconst numericValue = this._fromType(values[i]) * scaling;\n\t\t\tthis.linearRampToValueAtTime(this._toType(numericValue), startTime + i * segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tcancelScheduledValues(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._events.cancel(time);\n\t\tthis._param.cancelScheduledValues(time);\n\t\tthis.log(\"cancel\", time);\n\t\treturn this;\n\t}\n\n\tcancelAndHoldAtTime(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tconst valueAtTime = this._fromType(this.getValueAtTime(time));\n\t\tthis.log(\"cancelAndHoldAtTime\", time, \"value=\" + valueAtTime);\n\n\t\t// remove the schedule events\n\t\tthis._param.cancelScheduledValues(time);\n\n\t\t// if there is an event at the given time\n\t\t// and that even is not a \"set\"\n\t\tconst before = this._events.get(time);\n\t\tconst after = this._events.getAfter(time);\n\t\tif (before && before.time === time) {\n\t\t\t// remove everything after\n\t\t\tif (after) {\n\t\t\t\tthis._events.cancel(after.time);\n\t\t\t} else {\n\t\t\t\tthis._events.cancel(time + this.sampleTime);\n\t\t\t}\n\t\t} else if (after) {\n\t\t\t// cancel the next event(s)\n\t\t\tthis._events.cancel(after.time);\n\t\t\tif (after.type === \"linear\") {\n\t\t\t\tthis.linearRampToValueAtTime(this._toType(valueAtTime), time);\n\t\t\t} else if (after.type === \"exponential\") {\n\t\t\t\tthis.exponentialRampToValueAtTime(this._toType(valueAtTime), time);\n\t\t\t}\n\t\t}\n\n\t\t// set the value at the given time\n\t\tthis._events.add({\n\t\t\ttime,\n\t\t\ttype: \"setValue\",\n\t\t\tvalue: valueAtTime,\n\t\t});\n\t\tthis._param.setValueAtTime(valueAtTime, time);\n\t\treturn this;\n\t}\n\n\trampTo(value: Type, rampTime: Time = 0.1, startTime?: Time): this {\n\t\tif (this.units === \"frequency\" || this.units === \"bpm\" || this.units === \"decibels\") {\n\t\t\tthis.exponentialRampTo(value, rampTime, startTime);\n\t\t} else {\n\t\t\tthis.linearRampTo(value, rampTime, startTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tthis._events.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tAUTOMATION CURVE CALCULATIONS\n\t// \tMIT License, copyright (c) 2014 Jordan Santell\n\t///////////////////////////////////////////////////////////////////////////\n\n\t// Calculates the the value along the curve produced by setTargetAtTime\n\tprotected _exponentialApproach(t0: number, v0: number, v1: number, timeConstant: number, t: number): number {\n\t\treturn v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t}\n\n\t// Calculates the the value along the curve produced by linearRampToValueAtTime\n\tprotected _linearInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t}\n\n\t// Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\tprotected _exponentialInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { ftom } from \"./Conversions\";\nimport { TypeBaseClass, TypeBaseExpression, TypeBaseUnits } from \"./TypeBase\";\n\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * var t = Time(\"4n\");//a quarter note\n */\nexport class TimeClass<Type extends Seconds | Ticks = Seconds> extends TypeBaseClass<Type> {\n\n\tname = \"Time\";\n\n\tprotected _getExpressions(defaultUnit): TypeBaseExpression<Type> {\n\t\treturn Object.assign(super._getExpressions(defaultUnit), {\n\t\t\tnow: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\treturn this._now() + new TimeClass(this.context, capture).valueOf() as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^\\+(.+)/,\n\t\t\t},\n\t\t\tquantize: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\tconst quantTo = new TimeClass(this.context, capture).valueOf();\n\t\t\t\t\treturn this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));\n\t\t\t\t},\n\t\t\t\tregexp: /^@(.+)/,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Quantize the time by the given subdivision. Optionally add a\n\t * percentage which will move the time value towards the ideal\n\t * quantized value by that percentage.\n\t * @param  val    The subdivision to quantize to\n\t * @param  percent  Move the time value towards the quantized value by a percentage.\n\t * @example\n\t * Time(21).quantize(2) //returns 22\n\t * Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t */\n\tquantize(subdiv: number | string | TimeObject, percent = 1): Type {\n\t\tconst subdivision = new TimeClass(this.context, subdiv).valueOf();\n\t\tconst value = this.valueOf();\n\t\tconst multiple = Math.round(value / subdivision);\n\t\tconst ideal = multiple * subdivision;\n\t\tconst diff = ideal - value;\n\t\treturn value + diff * percent as Type;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\t/**\n\t *  Convert a Time to Notation. The notation values are will be the\n\t *  closest representation between 1m to 128th note.\n\t *  @return {Notation}\n\t *  @example\n\t * //if the Transport is at 120bpm:\n\t * Time(2).toNotation();//returns \"1m\"\n\t */\n\ttoNotation(): Subdivision {\n\t\tconst time = this.toSeconds();\n\t\tconst testNotations: Subdivision[] = [\"1m\"];\n\t\tfor (let power = 1; power < 9; power++) {\n\t\t\tconst subdiv = Math.pow(2, power);\n\t\t\ttestNotations.push(subdiv + \"n.\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"n\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"t\" as Subdivision);\n\t\t}\n\t\ttestNotations.push(\"0\");\n\t\t// find the closets notation representation\n\t\tlet closest = testNotations[0];\n\t\tlet closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n\t\ttestNotations.forEach(notation => {\n\t\t\tconst notationSeconds = new TimeClass(this.context, notation).toSeconds();\n\t\t\tif (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n\t\t\t\tclosest = notation;\n\t\t\t\tclosestSeconds = notationSeconds;\n\t\t\t}\n\t\t});\n\t\treturn closest;\n\t}\n\n\t/**\n\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t */\n\ttoBarsBeatsSixteenths(): BarsBeatsSixteenths {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tlet quarters = this.valueOf() / quarterTime;\n\t\tquarters = parseFloat(quarters.toFixed(4));\n\t\tconst measures = Math.floor(quarters / this._getTimeSignature());\n\t\tlet sixteenths = (quarters % 1) * 4;\n\t\tquarters = Math.floor(quarters) % this._getTimeSignature();\n\t\tconst sixteenthString = sixteenths.toString();\n\t\tif (sixteenthString.length > 3) {\n\t\t\t// the additional parseFloat removes insignificant trailing zeroes\n\t\t\tsixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n\t\t}\n\t\tconst progress = [measures, quarters, sixteenths];\n\t\treturn progress.join(\":\");\n\t}\n\n\t/**\n\t *  Return the time in ticks.\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.round(quarters * this._getPPQ());\n\t}\n\n\t/**\n\t *  Return the time in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t *  Return the value as a midi note.\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.toFrequency());\n\t}\n\n\tprotected _now(): Type {\n\t\treturn this.context.now() as Type;\n\t}\n}\n\nexport function Time(value?: Time, units?: TypeBaseUnits): TimeClass {\n\treturn new TimeClass(getContext(), value, units);\n}\n","import { Param } from \"../context/Param\";\nimport \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface GainOptions extends ToneAudioNodeOptions {\n\tgain: number;\n\tunits: UnitName;\n\tconvert: boolean;\n}\n\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @param  gain The initial gain of the GainNode\n * @param units The units of the gain parameter.\n */\nexport class Gain<Type extends Unit = GainFactor> extends ToneAudioNode<GainOptions> {\n\n\tname = \"Gain\";\n\n\t/**\n\t *  The gain parameter of the gain node.\n\t */\n\treadonly gain: Param<Type>;\n\n\t/**\n\t * The wrapped GainNode.\n\t */\n\tprivate _gainNode: GainNode = this.context.createGain();\n\n\t// input = output\n\treadonly input: GainNode = this._gainNode;\n\treadonly output: GainNode = this._gainNode;\n\n\t/**\n\t * Add all of the gain nodes\n\t */\n\tprotected _internalChannels: AudioNode[] = [this._gainNode];\n\n\tconstructor(gain?: GainFactor, units?: Unit);\n\tconstructor(options?: Partial<GainOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n\t\tconst options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n\n\t\tthis.gain = new Param({\n\t\t\tcontext : this.context,\n\t\t\tconvert : options.convert,\n\t\t\tparam : this._gainNode.gain,\n\t\t\tunits : options.units,\n\t\t\tvalue : options.gain,\n\t\t});\n\t\treadOnly(this, \"gain\");\n\t}\n\n\tstatic getDefaults(): GainOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert : true,\n\t\t\tgain : 1,\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tunits : \"gain\" as UnitName,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","export { connect, disconnect, connectSeries } from \"./context/ToneAudioNode\";\n","// import \"../type/Type\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\n\nexport type PlaybackState = \"started\" | \"stopped\" | \"paused\";\n\nexport interface StateTimelineEvent extends TimelineEvent {\n\tstate: PlaybackState;\n\tduration?: Seconds;\n\toffset?: Seconds;\n}\n\n/**\n *  A Timeline State. Provides the methods: `setStateAtTime(\"state\", time)` and `getValueAtTime(time)`\n *  @param initial The initial state of the StateTimeline.  Defaults to `undefined`\n */\nexport class StateTimeline extends Timeline<StateTimelineEvent> {\n\n\t/**\n\t *  The initial state\n\t */\n\tprivate _initial: PlaybackState;\n\n\tconstructor(initial: PlaybackState = \"stopped\") {\n\t\tsuper();\n\t\tthis._initial = initial;\n\t}\n\n\t/**\n\t *  Returns the scheduled state scheduled before or at\n\t *  the given time.\n\t *  @param  time  The time to query.\n\t *  @return  The name of the state input in setStateAtTime.\n\t */\n\tgetValueAtTime(time: Seconds): PlaybackState {\n\t\tconst event = this.get(time);\n\t\tif (event !== null) {\n\t\t\treturn event.state;\n\t\t} else {\n\t\t\treturn this._initial;\n\t\t}\n\t}\n\n\t/**\n\t *  Add a state to the timeline.\n\t *  @param  state The name of the state to set.\n\t *  @param  time  The time to query.\n\t */\n\tsetStateAtTime(state: PlaybackState, time: Seconds): this {\n\t\t// all state changes need to be >= the previous state time\n\t\t// TODO throw error if time < the previous event time\n\t\tthis.add({\n\t\t\tstate,\n\t\t\ttime,\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Return the event before the time with the given state\n\t *  @param  state The state to look for\n\t *  @param  time  When to check before\n\t *  @return  The event with the given state before the time\n\t */\n\tgetLastState(state: PlaybackState, time: number): StateTimelineEvent | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tfor (let i = index; i >= 0; i--) {\n\t\t\tconst event = this._timeline[i];\n\t\t\tif (event.state === state) {\n\t\t\t\treturn event;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Return the event after the time with the given state\n\t *  @param  state The state to look for\n\t *  @param  time  When to check from\n\t *  @return  The event with the given state after the time\n\t */\n\tgetNextState(state: PlaybackState, time: number): StateTimelineEvent | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tif (index !== -1) {\n\t\t\tfor (let i = index; i < this._timeline.length; i++) {\n\t\t\t\tconst event = this._timeline[i];\n\t\t\t\tif (event.state === state) {\n\t\t\t\t\treturn event;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import { Context } from \"../context/Context\";\nimport { getContext } from \"../Global\";\nimport { TimeClass } from \"./Time\";\nimport { TypeBaseUnits } from \"./TypeBase\";\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n */\nexport class TransportTimeClass<Type extends Seconds | Ticks = Seconds> extends TimeClass<Type> {\n\n\tname = \"TransportTime\";\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected _now(): Type {\n\t\treturn this.context.transport.seconds as Type;\n\t}\n}\n\nexport function TransportTime(value: Time, units?: TypeBaseUnits): TransportTimeClass {\n\treturn new TransportTimeClass(getContext(), value, units);\n}\n","import \"./Units\";\n\n/**\n *  Equal power gain scale. Good for cross-fading.\n *  @param  percent (0-1)\n */\nexport function equalPowerScale(percent: NormalRange): number {\n\tconst piFactor = 0.5 * Math.PI;\n\treturn Math.sin(percent * piFactor);\n}\n\n/**\n *  Convert decibels into gain.\n */\nexport function dbToGain(db: Decibels): GainFactor {\n\treturn Math.pow(10, db / 20);\n}\n\n/**\n *  Convert gain to decibels.\n */\nexport function gainToDb(gain: GainFactor): Decibels {\n\treturn 20 * (Math.log(gain) / Math.LN10);\n}\n\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * tone.intervalToFrequencyRatio(0); // 1\n * tone.intervalToFrequencyRatio(12); // 2\n * tone.intervalToFrequencyRatio(-12); // 0.5\n */\nexport function intervalToFrequencyRatio(interval: Interval): number {\n\treturn Math.pow(2, (interval / 12));\n}\n\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\nlet A4: Hertz = 440;\n\nexport function getA4(): Hertz {\n\treturn A4;\n}\n\nexport function setA4(freq: Hertz): void {\n\tA4 = freq;\n}\n\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * Frequency.ftom(440); // returns 69\n */\nexport function ftom(frequency: Hertz): MidiNote {\n\treturn 69 + Math.round(12 * Math.log2(frequency / A4));\n}\n","import { Tone } from \"../Tone\";\nimport { isUndef } from \"./TypeCheck\";\n\nexport interface EmitterEventObject {\n\t[event: string]: Array<(...args: any[]) => void>;\n}\n\n/**\n * Emitter gives classes which extend it\n * the ability to listen for and emit events.\n * Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n * MIT (c) 2011 Jerome Etienne.\n */\nexport class Emitter<EventType extends string = string> extends Tone {\n\n\tname = \"Emitter\";\n\n\t/**\n\t * Private container for the events\n\t */\n\tprivate _events?: EmitterEventObject;\n\n\t/**\n\t *  Bind a callback to a specific event.\n\t *  @param  event     The name of the event to listen for.\n\t *  @param  callback  The callback to invoke when the event is emitted\n\t */\n\ton(event: EventType, callback: (...args: any[]) => void): this {\n\t\t// split the event\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (!this._events.hasOwnProperty(eventName)) {\n\t\t\t\tthis._events[eventName] = [];\n\t\t\t}\n\t\t\tthis._events[eventName].push(callback);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Bind a callback which is only invoked once\n\t *  @param  event     The name of the event to listen for.\n\t *  @param  callback  The callback to invoke when the event is emitted\n\t */\n\tonce(event: EventType, callback: (...args: any[]) => void): this {\n\t\tconst boundCallback = (...args: any[])  => {\n\t\t\t// invoke the callback\n\t\t\tcallback(...args);\n\t\t\t// remove the event\n\t\t\tthis.off(event, boundCallback);\n\t\t};\n\t\tthis.on(event, boundCallback);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove the event listener.\n\t *  @param  event     The event to stop listening to.\n\t *  @param  callback  The callback which was bound to the event with Emitter.on.\n\t *                    If no callback is given, all callbacks events are removed.\n\t */\n\toff(event: EventType, callback?: (...args: any[]) => void): this {\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tif (isUndef(callback)) {\n\t\t\t\t\tthis._events[event] = [];\n\t\t\t\t} else {\n\t\t\t\t\tconst eventList = this._events[event];\n\t\t\t\t\tfor (let i = 0; i < eventList.length; i++) {\n\t\t\t\t\t\tif (eventList[i] === callback) {\n\t\t\t\t\t\t\teventList.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Invoke all of the callbacks bound to the event\n\t *  with any arguments passed in.\n\t *  @param  event  The name of the event.\n\t *  @param args The arguments to pass to the functions listening.\n\t */\n\temit(event, ...args: any[]): this {\n\t\tif (this._events) {\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tconst eventList = this._events[event].slice(0);\n\t\t\t\tfor (let i = 0, len = eventList.length; i < len; i++) {\n\t\t\t\t\teventList[i].apply(this, args);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Add Emitter functions (on/off/emit) to the object\n\t */\n\tstatic mixin(constr: any): void {\n\t\t// instance._events = {};\n\t\t[\"on\", \"once\", \"off\", \"emit\"].forEach(name => {\n\t\t\tconst property = Object.getOwnPropertyDescriptor(Emitter.prototype, name) as PropertyDescriptor;\n\t\t\tObject.defineProperty(constr.prototype, name, property);\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tthis._events = undefined;\n\t\treturn this;\n\t}\n}\n","import { Context } from \"../context/Context\";\nimport { getContext } from \"../Global\";\nimport { TransportTimeClass } from \"./TransportTime\";\nimport { TypeBaseUnits } from \"./TypeBase\";\n\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * const t = Ticks(\"4n\"); //a quarter note as ticks\n */\nexport class TicksClass extends TransportTimeClass<Ticks> {\n\n\tname = \"Ticks\";\n\n\treadonly defaultUnits: TypeBaseUnits = \"i\";\n\n\t/**\n\t * Get the current time in the given units\n\t */\n\tprotected _now(): Ticks {\n\t\treturn this.context.transport.ticks;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Ticks {\n\t\treturn this._getPPQ() * beats;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Ticks {\n\t\treturn Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Ticks {\n\t\treturn ticks;\n\t}\n\n\t/**\n\t *  Return the time in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\treturn this.valueOf() as Ticks;\n\t}\n\n\t/**\n\t *  Return the time in seconds\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn (this.valueOf() / this._getPPQ()) * (60 / this._getBpm());\n\t}\n}\n\nexport function Ticks(value: Time, units?: TypeBaseUnits): TicksClass {\n\treturn new TicksClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck\";\n\ninterface ToneAudioBufferOptions {\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n\treverse: boolean;\n\tonload: (buffer?: ToneAudioBuffer) => void;\n\tonerror: (error: Error) => void;\n}\n\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n *\n * Aside from load callbacks from individual buffers, ToneAudioBuffer\n * provides events which keep track of the loading progress\n * of _all_ of the buffers. These are ToneAudioBuffer.on(\"load\" / \"progress\" / \"error\")\n *\n * @param url The url to load, or the audio buffer to set.\n * @param onload A callback which is invoked after the buffer is loaded.\n *                            It's recommended to use `ToneAudioBuffer.on('load', callback)` instead\n *                            since it will give you a callback when _all_ buffers are loaded.\n * @param onerror The callback to invoke if there is an error\n * @example\n * var buffer = new ToneAudioBuffer(\"path/to/sound.mp3\", function(){\n * \t//the buffer is now available.\n * \tvar buff = buffer.get();\n * });\n * @example\n * //can load provide fallback extension types if the first type is not supported.\n * var buffer = new ToneAudioBuffer(\"path/to/sound.[mp3|ogg|wav]\");\n */\nexport class ToneAudioBuffer extends Tone {\n\n\tname = \"ToneAudioBuffer\";\n\n\t/**\n\t *  stores the loaded AudioBuffer\n\t */\n\tprivate _buffer?: AudioBuffer;\n\n\t/**\n\t *  indicates if the buffer should be reversed or not\n\t */\n\tprivate _reversed!: boolean;\n\n\t/**\n\t * Callback when the buffer is loaded.\n\t */\n\tonload: (buffer: ToneAudioBuffer) => void = noOp;\n\n\tconstructor(options?: Partial<ToneAudioBufferOptions>);\n\tconstructor(\n\t\turl?: string | ToneAudioBuffer | AudioBuffer,\n\t\tonload?: (buffer: ToneAudioBuffer) => void,\n\t\tonerror?: (error: Error) => void,\n\t);\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tconst options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, [\"url\", \"onload\", \"onerror\"]);\n\n\t\tthis.reverse = options.reverse;\n\t\tthis.onload = options.onload;\n\n\t\tif (options.url && options.url instanceof AudioBuffer || options.url instanceof ToneAudioBuffer) {\n\t\t\tthis.set(options.url);\n\t\t} else if (isString(options.url)) {\n\t\t\t// initiate the download\n\t\t\tthis.load(options.url).catch(options.onerror);\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneAudioBufferOptions {\n\t\treturn {\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\treverse: false,\n\t\t};\n\t}\n\n\t/**\n\t * The sample rate of the AudioBuffer\n\t */\n\tget sampleRate(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.sampleRate;\n\t\t} else {\n\t\t\treturn getContext().sampleRate;\n\t\t}\n\t}\n\n\t/**\n\t *  Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n\t */\n\tset(buffer: AudioBuffer | ToneAudioBuffer): this {\n\t\tif (buffer instanceof ToneAudioBuffer) {\n\t\t\t// if it's loaded, set it\n\t\t\tif (buffer.loaded) {\n\t\t\t\tthis._buffer = buffer.get();\n\t\t\t} else {\n\t\t\t\t// otherwise when it's loaded, invoke it's callback\n\t\t\t\tbuffer.onload = () => {\n\t\t\t\t\tthis.set(buffer);\n\t\t\t\t\tthis.onload(this);\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tthis._buffer = buffer;\n\t\t}\n\t\t// reverse it initially\n\t\tif (this._reversed) {\n\t\t\tthis._reverse();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The audio buffer stored in the object.\n\t */\n\tget(): AudioBuffer | undefined {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t *  Makes an fetch request for the selected url then decodes the file as an audio buffer.\n\t * \tInvokes the callback once the audio buffer loads.\n\t *  @param url The url of the buffer to load. filetype support depends on the browser.\n\t *  @returns A Promise which resolves with this ToneAudioBuffer\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tconst promise = ToneAudioBuffer.load(url);\n\t\tToneAudioBuffer.downloads.push(promise);\n\t\ttry {\n\t\t\tconst audioBuffer = await promise;\n\t\t\tthis.set(audioBuffer);\n\t\t\t// invoke the onload method\n\t\t\tthis.onload(this);\n\t\t} catch (e) {\n\t\t\t// remove the failed file before throwing error\n\t\t\tconst index = ToneAudioBuffer.downloads.indexOf(promise);\n\t\t\tToneAudioBuffer.downloads.splice(index, 1);\n\t\t\tthrow e;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tthis._buffer = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the audio buffer from the array.\n\t * To create a multichannel AudioBuffer, pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t */\n\tfromArray(array: Float32Array | Float32Array[]): this {\n\t\tconst isMultidimensional = isArray(array) && array[0].length > 0;\n\t\tconst channels = isMultidimensional ? array.length : 1;\n\t\tconst len = isMultidimensional ? (array[0] as Float32Array).length : array.length;\n\t\tconst context = getContext();\n\t\tconst buffer = context.createBuffer(channels, len, context.sampleRate);\n\t\tconst multiChannelArray: Float32Array[] = !isMultidimensional && channels === 1 ?\n\t\t\t[array as Float32Array] : array as Float32Array[];\n\n\t\tfor (let c = 0; c < channels; c++) {\n\t\t\tbuffer.copyToChannel(multiChannelArray[c], c);\n\t\t}\n\t\tthis._buffer = buffer;\n\t\treturn this;\n\t}\n\n\t/**\n\t * \tSums multiple channels into 1 channel\n\t *  @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoMono(chanNum?: number): this {\n\t\tif (isNumber(chanNum)) {\n\t\t\tthis.fromArray(this.toArray(chanNum));\n\t\t} else {\n\t\t\tlet outputArray = new Float32Array(this.length as number);\n\t\t\tconst numChannels = this.numberOfChannels;\n\t\t\tfor (let channel = 0; channel < numChannels; channel++) {\n\t\t\t\tconst channelArray = this.toArray(channel) as Float32Array;\n\t\t\t\tfor (let i = 0; i < channelArray.length; i++) {\n\t\t\t\t\toutputArray[i] += channelArray[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// divide by the number of channels\n\t\t\toutputArray = outputArray.map(sample => sample / numChannels);\n\t\t\tthis.fromArray(outputArray);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * \tGet the buffer as an array. Single channel buffers will return a 1-dimensional\n\t * \tFloat32Array, and multichannel buffers will return multidimensional arrays.\n\t *  @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoArray(channel?: number): Float32Array | Float32Array[] {\n\t\tif (isNumber(channel)) {\n\t\t\treturn this.getChannelData(channel);\n\t\t} else if (this.numberOfChannels === 1) {\n\t\t\treturn this.toArray(0);\n\t\t} else {\n\t\t\tconst ret: Float32Array[] = [];\n\t\t\tfor (let c = 0; c < this.numberOfChannels; c++) {\n\t\t\t\tret[c] = this.getChannelData(c);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t/**\n\t *  Returns the Float32Array representing the PCM audio data for the specific channel.\n\t *  @param  channel  The channel number to return\n\t *  @return The audio as a TypedArray\n\t */\n\tgetChannelData(channel: number): Float32Array {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.getChannelData(channel);\n\t\t} else {\n\t\t\treturn new Float32Array(0);\n\t\t}\n\t}\n\n\t/**\n\t *  Cut a subsection of the array and return a buffer of the\n\t *  subsection. Does not modify the original buffer\n\t *  @param start The time to start the slice\n\t *  @param end The end time to slice. If none is given will default to the end of the buffer\n\t */\n\tslice(start: Seconds, end: Seconds = this.duration): ToneAudioBuffer {\n\t\tconst startSamples = Math.floor(start * this.sampleRate);\n\t\tconst endSamples = Math.floor(end * this.sampleRate);\n\t\tconst replacementArray: Float32Array[] = [];\n\t\tfor (let i = 0; i < this.numberOfChannels; i++) {\n\t\t\treplacementArray[i] = this.toArray(i).slice(startSamples, endSamples) as Float32Array;\n\t\t}\n\t\tconst retBuffer = new ToneAudioBuffer().fromArray(replacementArray);\n\t\treturn retBuffer;\n\t}\n\n\t/**\n\t *  Reverse the buffer.\n\t */\n\tprivate _reverse(): this {\n\t\tif (this.loaded) {\n\t\t\tfor (let i = 0; i < this.numberOfChannels; i++) {\n\t\t\t\tArray.prototype.reverse.call(this.getChannelData(i));\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffer is loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this.length > 0;\n\t}\n\n\t/**\n\t * The duration of the buffer in seconds.\n\t */\n\tget duration(): Seconds {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.duration;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The length of the buffer in samples\n\t */\n\tget length(): Samples {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n\t */\n\tget numberOfChannels(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.numberOfChannels;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tget reverse(): boolean {\n\t\treturn this._reversed;\n\t}\n\tset reverse(rev: boolean) {\n\t\tif (this._reversed !== rev) {\n\t\t\tthis._reversed = rev;\n\t\t\tthis._reverse();\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// STATIC METHODS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  A path which is prefixed before every url.\n\t */\n\tstatic baseUrl = \"\";\n\n\t/**\n\t *  Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n\t *  pass in a multidimensional array.\n\t *  @param array The array to fill the audio buffer\n\t *  @return A ToneAudioBuffer created from the array\n\t */\n\tstatic fromArray(array: Float32Array | Float32Array[]): ToneAudioBuffer {\n\t\treturn (new ToneAudioBuffer()).fromArray(array);\n\t}\n\n\t/**\n\t * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n\t * @param  url The url to load.\n\t * @return A promise which resolves to a ToneAudioBuffer\n\t */\n\tstatic async fromUrl(url: string): Promise<ToneAudioBuffer> {\n\t\tconst buffer = new ToneAudioBuffer();\n\t\treturn await buffer.load(url);\n\t}\n\n\t/**\n\t * All of the downloads\n\t */\n\tstatic downloads: Array<Promise<AudioBuffer>> = [];\n\n\t/**\n\t *  Loads a url using fetch and returns the AudioBuffer.\n\t */\n\tstatic async load(url: string): Promise<AudioBuffer> {\n\n\t\t// test if the url contains multiple extensions\n\t\tconst matches = url.match(/\\[(.+\\|?)+\\]$/);\n\t\tif (matches) {\n\t\t\tconst extensions = matches[1].split(\"|\");\n\t\t\tlet extension = extensions[0];\n\t\t\tfor (const ext of extensions) {\n\t\t\t\tif (ToneAudioBuffer.supportsType(ext)) {\n\t\t\t\t\textension = ext;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\turl = url.replace(matches[0], extension);\n\t\t}\n\n\t\tconst response = await fetch(ToneAudioBuffer.baseUrl + url);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`could not load url: ${url}`);\n\t\t}\n\t\tconst arrayBuffer = await response.arrayBuffer();\n\n\t\tconst audioBuffer = await getContext().decodeAudioData(arrayBuffer);\n\n\t\treturn audioBuffer;\n\t}\n\n\t/**\n\t *  Checks a url's extension to see if the current browser can play that file type.\n\t *  @param url The url/extension to test\n\t *  @return If the file extension can be played\n\t *  @static\n\t *  @example\n\t * ToneAudioBuffer.supportsType(\"wav\"); //returns true\n\t * ToneAudioBuffer.supportsType(\"path/to/file.wav\"); //returns true\n\t */\n\tstatic supportsType(url: string): boolean {\n\t\tconst extensions = url.split(\".\");\n\t\tconst extension = extensions[extensions.length - 1];\n\t\tconst response = document.createElement(\"audio\").canPlayType(\"audio/\" + extension);\n\t\treturn response !== \"\";\n\t}\n\n\t/**\n\t *  Returns a Promise which resolves when all of the buffers have loaded\n\t */\n\tstatic async loaded(): Promise<void> {\n\t\tfor (const promise of ToneAudioBuffer.downloads) {\n\t\t\tawait promise;\n\t\t}\n\t}\n}\n","///////////////////////////////////////////////////////////////////////////\n// INITIALIZING NEW CONTEXT\n///////////////////////////////////////////////////////////////////////////\n\ntype Context = import(\"./Context\").Context;\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to setup a new Context\n */\nexport function onContextInit(cb: (ctx: Context) => void): void {\n\tnotifyNewContext.push(cb);\n}\n\nexport function initializeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyNewContext.forEach(cb => cb(ctx));\n}\n","import { Ticker, TickerClockSource } from \"../clock/Ticker\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { Omit } from \"../util/Interface\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isString } from \"../util/TypeCheck\";\nimport { getAudioContext } from \"./AudioContext\";\nimport { initializeContext } from \"./ContextInitialization\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Destination = import(\"./Destination\").Destination;\n\nexport type ContextLatencyHint = AudioContextLatencyCategory | \"fastest\";\n\n// these are either not used in Tone.js or deprecated and not implemented.\nexport type ExcludedFromBaseAudioContext = \"createScriptProcessor\" | \"onstatechange\" | \"addEventListener\"\n\t| \"removeEventListener\" | \"listener\" | \"dispatchEvent\" | \"audioWorklet\" | \"destination\";\n\n// the subset of the BaseAudioContext which Tone.Context implements.\nexport type BaseAudioContextSubset = Omit<BaseAudioContext, ExcludedFromBaseAudioContext>;\n\nexport interface ContextOptions {\n\tclockSource: TickerClockSource;\n\tlatencyHint: ContextLatencyHint;\n\tlookAhead: Seconds;\n\tupdateInterval: Seconds;\n\tcontext: BaseAudioContext;\n}\n\nexport interface ContextTimeoutEvent {\n\tcallback: (...args: any[]) => void;\n\tid: number;\n\ttime: Seconds;\n}\n\n/**\n * Wrapper around the native AudioContext.\n */\nexport class Context extends Emitter<\"statechange\" | \"tick\"> implements BaseAudioContextSubset {\n\n\tname = \"Context\";\n\n\t/**\n\t * The amount of time into the future events are scheduled. Giving Web Audio\n\t * a short amount of time into the future to schedule events can reduce clicks and\n\t * improve performance. This value can be set to 0 to get the lowest latency.\n\t */\n\tlookAhead: Seconds;\n\n\t/**\n\t * private reference to the BaseAudioContext\n\t */\n\tprotected readonly _context: BaseAudioContext;\n\n\t/**\n\t * A reliable callback method\n\t */\n\tprivate readonly _ticker: Ticker;\n\n\t/**\n\t *  The default latency hint\n\t */\n\tprivate _latencyHint: ContextLatencyHint | Seconds;\n\n\t/**\n\t *  An object containing all of the constants AudioBufferSourceNodes\n\t */\n\tprivate _constants = new Map<number, AudioBufferSourceNode>();\n\n\t/**\n\t *  All of the setTimeout events.\n\t */\n\tprivate _timeouts: Timeline<ContextTimeoutEvent> = new Timeline();\n\n\t/**\n\t *  The timeout id counter\n\t */\n\tprivate _timeoutIds = 0;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _transport!: Transport;\n\n\t/**\n\t * A reference the Destination singleton belonging to this context\n\t */\n\tprivate _destination!: Destination;\n\n\t/**\n\t * Private indicator if the context has been initialized\n\t */\n\tprivate _initialized: boolean = false;\n\n\tconstructor(context?: BaseAudioContext);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<ContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Context.getDefaults(), arguments, [\"context\"]);\n\n\t\tthis._context = options.context;\n\n\t\tthis._latencyHint = options.latencyHint;\n\t\tthis.lookAhead = options.lookAhead;\n\n\t\tthis._ticker = new Ticker(this.emit.bind(this, \"tick\"), options.clockSource, options.updateInterval);\n\t\tthis.on(\"tick\", this._timeoutLoop.bind(this));\n\n\t\t// fwd events from the context\n\t\tthis._context.addEventListener(\"statechange\", () => {\n\t\t\tthis.emit(\"statechange\", this.state);\n\t\t});\n\t}\n\n\tstatic getDefaults(): ContextOptions {\n\t\treturn {\n\t\t\tclockSource: \"worker\",\n\t\t\tcontext: getAudioContext(),\n\t\t\tlatencyHint: \"interactive\",\n\t\t\tlookAhead: 0.1,\n\t\t\tupdateInterval: 0.03,\n\t\t};\n\t}\n\n\t/**\n\t * Finish setting up the context. **You usually do not need to do this manually.**\n\t */\n\tinitialize(): this {\n\t\tif (!this._initialized) {\n\t\t\t// add any additional modules\n\t\t\tinitializeContext(this);\n\t\t\tthis._initialized = true;\n\t\t}\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// BASE AUDIO CONTEXT METHODS\n\t///////////////////////////////////////////////////////////////////////\n\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn this._context.createAnalyser();\n\t}\n\tcreateOscillator(): OscillatorNode {\n\t\treturn this._context.createOscillator();\n\t}\n\tcreateBufferSource(): AudioBufferSourceNode {\n\t\treturn this._context.createBufferSource();\n\t}\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn this._context.createBiquadFilter();\n\t}\n\tcreateBuffer(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer {\n\t\treturn this._context.createBuffer(numberOfChannels, length, sampleRate);\n\t}\n\tcreateChannelMerger(numberOfInputs?: number | undefined): ChannelMergerNode {\n\t\treturn this._context.createChannelMerger(numberOfInputs);\n\t}\n\tcreateChannelSplitter(numberOfOutputs?: number | undefined): ChannelSplitterNode {\n\t\treturn this._context.createChannelSplitter(numberOfOutputs);\n\t}\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn this._context.createConstantSource();\n\t}\n\tcreateConvolver(): ConvolverNode {\n\t\treturn this._context.createConvolver();\n\t}\n\tcreateDelay(maxDelayTime?: number | undefined): DelayNode {\n\t\treturn this._context.createDelay(maxDelayTime);\n\t}\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn this._context.createDynamicsCompressor();\n\t}\n\tcreateGain(): GainNode {\n\t\treturn this._context.createGain();\n\t}\n\tcreateIIRFilter(feedforward: number[], feedback: number[]): IIRFilterNode {\n\t\treturn this._context.createIIRFilter(feedforward, feedback);\n\t}\n\tcreatePanner(): PannerNode {\n\t\treturn this._context.createPanner();\n\t}\n\tcreatePeriodicWave(\n\t\treal: number[] | Float32Array,\n\t\timag: number[] | Float32Array,\n\t\tconstraints?: PeriodicWaveConstraints | undefined,\n\t): PeriodicWave {\n\t\treturn this._context.createPeriodicWave(real, imag, constraints);\n\t}\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn this._context.createStereoPanner();\n\t}\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn this._context.createWaveShaper();\n\t}\n\tdecodeAudioData(audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn this._context.decodeAudioData(audioData);\n\t}\n\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget state(): AudioContextState {\n\t\treturn this._context.state;\n\t}\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget sampleRate(): number {\n\t\treturn this._context.sampleRate;\n\t}\n\t/**\n\t *  The listener\n\t */\n\tget listener(): AudioListener {\n\t\treturn this._context.listener;\n\t}\n\n\t/**\n\t *  There is only one Transport per Context. It is created on initialization.\n\t */\n\tget transport(): Transport {\n\t\tthis.assert(this._initialized, \"The context must be initialized before being used by invoking context.initialize()\");\n\t\treturn this._transport;\n\t}\n\tset transport(t: Transport) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._transport = t;\n\t}\n\n\t/**\n\t *  A reference to the Context's destination node.\n\t */\n\tget destination(): Destination {\n\t\tthis.assert(this._initialized, \"The context must be initialized before being used by invoking context.initialize()\");\n\t\treturn this._destination;\n\t}\n\tset destination(d: Destination) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._destination = d;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// TICKER\n\t///////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  How often the interval callback is invoked.\n\t *  This number corresponds to how responsive the scheduling\n\t *  can be. context.updateInterval + context.lookAhead gives you the\n\t *  total latency between scheduling an event and hearing it.\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._ticker.updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._ticker.updateInterval = interval;\n\t}\n\n\t/**\n\t *  What the source of the clock is, either \"worker\" (default),\n\t *  \"timeout\", or \"offline\" (none).\n\t */\n\tget clockSource(): TickerClockSource {\n\t\treturn this._ticker.type;\n\t}\n\tset clockSource(type: TickerClockSource) {\n\t\tthis._ticker.type = type;\n\t}\n\n\t/**\n\t * The type of playback, which affects tradeoffs between audio\n\t * output latency and responsiveness.\n\t * In addition to setting the value in seconds, the latencyHint also\n\t * accepts the strings \"interactive\" (prioritizes low latency),\n\t * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t * latency and performance), and \"fastest\" (lowest latency, might glitch more often).\n\t * @example\n\t * //set the lookAhead to 0.3 seconds\n\t * Tone.context.latencyHint = 0.3;\n\t */\n\tget latencyHint(): ContextLatencyHint | Seconds {\n\t\treturn this._latencyHint;\n\t}\n\tset latencyHint(hint: ContextLatencyHint | Seconds) {\n\t\tlet lookAheadValue = 0;\n\t\tthis._latencyHint = hint;\n\t\tif (isString(hint)) {\n\t\t\tswitch (hint) {\n\t\t\t\tcase \"interactive\":\n\t\t\t\t\tlookAheadValue = 0.1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"playback\":\n\t\t\t\t\tlookAheadValue = 0.8;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"balanced\":\n\t\t\t\t\tlookAheadValue = 0.25;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"fastest\":\n\t\t\t\t\tlookAheadValue = 0.01;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.lookAhead = lookAheadValue;\n\t\tthis.updateInterval = lookAheadValue / 3;\n\t}\n\n\t/**\n\t *  The unwrapped AudioContext.\n\t */\n\tget rawContext(): BaseAudioContext {\n\t\treturn this._context;\n\t}\n\n\t/**\n\t * The current audio context time plus a short {@link lookAhead}.\n\t */\n\tnow(): Seconds {\n\t\treturn this._context.currentTime + this.lookAhead;\n\t}\n\n\t/**\n\t *  Starts the audio context from a suspended state. This is required\n\t *  to initially start the AudioContext.\n\t */\n\tresume(): Promise<void> {\n\t\tif (this._context.state === \"suspended\" && this._context instanceof AudioContext) {\n\t\t\treturn this._context.resume();\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t *  Promise which is invoked when the context is running.\n\t *  Tries to resume the context if it's not started.\n\t */\n\tasync close(): Promise<Context> {\n\t\tif (this._context instanceof AudioContext) {\n\t\t\tawait this._context.close();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Generate a looped buffer at some constant value.\n\t */\n\tgetConstant(val: number): AudioBufferSourceNode {\n\t\tif (this._constants.has(val)) {\n\t\t\treturn this._constants.get(val) as AudioBufferSourceNode;\n\t\t} else {\n\t\t\tconst buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t\t\tconst arr = buffer.getChannelData(0);\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = val;\n\t\t\t}\n\t\t\tconst constant = this._context.createBufferSource();\n\t\t\tconstant.channelCount = 1;\n\t\t\tconstant.channelCountMode = \"explicit\";\n\t\t\tconstant.buffer = buffer;\n\t\t\tconstant.loop = true;\n\t\t\tconstant.start(0);\n\t\t\tthis._constants.set(val, constant);\n\t\t\treturn constant;\n\t\t}\n\t}\n\n\t/**\n\t *  Clean up. Also closes the audio context.\n\t */\n\tdispose(): this {\n\t\tthis._ticker.dispose();\n\t\tthis._timeouts.dispose();\n\t\tObject.keys(this._constants).map(val => this._constants[val].disconnect());\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// TIMEOUTS\n\t///////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The private loop which keeps track of the context scheduled timeouts\n\t *  Is invoked from the clock source\n\t */\n\tprivate _timeoutLoop(): void  {\n\t\tconst now = this.now();\n\t\tlet firstEvent = this._timeouts.peek();\n\t\twhile (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n\t\t\t// invoke the callback\n\t\t\tfirstEvent.callback();\n\t\t\t// shift the first event off\n\t\t\tthis._timeouts.shift();\n\t\t\t// get the next one\n\t\t\tfirstEvent = this._timeouts.peek();\n\t\t}\n\t}\n\n\t/**\n\t *  A setTimeout which is guarented by the clock source.\n\t *  Also runs in the offline context.\n\t *  @param  fn       The callback to invoke\n\t *  @param  timeout  The timeout in seconds\n\t *  @returns ID to use when invoking Context.clearTimeout\n\t */\n\tsetTimeout(fn: (...args: any[]) => void, timeout: Seconds): number {\n\t\tthis._timeoutIds++;\n\t\tconst now = this.now();\n\t\tthis._timeouts.add({\n\t\t\tcallback : fn,\n\t\t\tid : this._timeoutIds,\n\t\t\ttime : now + timeout,\n\t\t});\n\t\treturn this._timeoutIds;\n\t}\n\n\t/**\n\t *  Clears a previously scheduled timeout with Tone.context.setTimeout\n\t *  @param  id  The ID returned from setTimeout\n\t */\n\tclearTimeout(id: number): Context {\n\t\tthis._timeouts.forEach(event => {\n\t\t\tif (event.id === id) {\n\t\t\t\tthis._timeouts.remove(event);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource, OneShotSourceOptions } from \"../OneShotSource\";\n\ninterface ToneOscillatorNodeOptions extends OneShotSourceOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\ttype: OscillatorType;\n}\n\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[Tone.Oscillator](Oscillator) is better for most use-cases***\n *  @extends {Tone.AudioNode}\n *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n *  @param  {Function}  onload  The callback to invoke when the\n *                               buffer is done playing.\n */\nexport class ToneOscillatorNode extends OneShotSource<ToneOscillatorNodeOptions> {\n\n\tname = \"ToneOscillatorNode\";\n\n\t/**\n\t *  The oscillator\n\t */\n\tprivate _oscillator = this.context.createOscillator();\n\tprotected _internalChannels = [this._gainNode, this._oscillator];\n\n\t/**\n\t *  The frequency of the oscillator\n\t */\n\treadonly frequency: Param<\"frequency\">;\n\n\t/**\n\t *  The detune of the oscillator\n\t */\n\treadonly detune: Param<\"cents\">;\n\n\tconstructor(options?: Partial<ToneOscillatorNodeOptions>);\n\tconstructor(\n\t\tfrequency: Frequency,\n\t\ttype: OscillatorType,\n\t);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tconnect(this._oscillator, this._gainNode);\n\n\t\tthis.type = options.type;\n\n\t\tthis.frequency = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._oscillator.frequency,\n\t\t\tunits : \"frequency\",\n\t\t\tvalue : this.toFrequency(options.frequency),\n\t\t});\n\n\t\tthis.detune = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._oscillator.detune,\n\t\t\tunits : \"cents\",\n\t\t\tvalue : options.detune,\n\t\t});\n\t}\n\n\tstatic getDefaults(): ToneOscillatorNodeOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\ttype: \"sine\" as OscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * Start the oscillator node at the given time\n\t * @param  time When to start the oscillator\n\t */\n\tstart(time?: Time): this {\n\t\tthis.log(\"start\", time);\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._startGain(computedTime);\n\t\tthis._oscillator.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\t/**\n\t * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n\t * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n\t */\n\tsetPeriodicWave(periodicWave: PeriodicWave): this {\n\t\tthis._oscillator.setPeriodicWave(periodicWave);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n\t */\n\tget type(): OscillatorType {\n\t\treturn this._oscillator.type;\n\t}\n\tset type(type: OscillatorType) {\n\t\tthis._oscillator.type = type;\n\t}\n\n\t/**\n\t *  Clean up.\n\t *  @return  {OscillatorNode}  this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { Tone } from \"Tone/core/Tone\";\nimport { PlaybackState } from \"Tone/core/util/StateTimeline\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { noOp } from \"../core/util/Interface\";\n\nexport interface OneShotSourceOptions extends ToneAudioNodeOptions {\n\tonended: () => void;\n}\n\nexport abstract class OneShotSource<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The callback to invoke after the\n\t *  source is done playing.\n\t */\n\tonended: () => void = noOp;\n\n\t/**\n\t * Sources do not have input nodes\n\t */\n\tinput: undefined;\n\n\t/**\n\t *  The start time\n\t */\n\tprotected _startTime: number = -1;\n\n\t/**\n\t *  The stop time\n\t */\n\tprotected _stopTime: number = -1;\n\n\t/**\n\t * The id of the timeout\n\t */\n\tprivate _timeout: number = -1;\n\n\t/**\n\t * The public output node\n\t */\n\toutput: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain : 0,\n\t});\n\n\t/**\n\t *  The output gain node.\n\t */\n\tprotected _gainNode = this.output;\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time = 0;\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time = 0;\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tprotected _curve: \"linear\" | \"exponential\" = \"linear\";\n\n\tstatic getDefaults(): OneShotSourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tonended : noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Stop the source node\n\t */\n\tprotected abstract _stopSource(time: Seconds): void;\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the node\n\t */\n\tprotected abstract start(time?: Time): this;\n\t/**\n\t * Start the source at the given time\n\t * @param  time When to start the source\n\t */\n\tprotected _startGain(time: Seconds, gain: GainFactor = 1): this {\n\t\tthis.assert(this._startTime === -1, \"Source cannot be started more than once\");\n\t\t// apply a fade in envelope\n\t\tconst fadeInTime = this.toSeconds(this._fadeIn);\n\n\t\t// record the start time\n\t\tthis._startTime = time + fadeInTime;\n\t\tthis._startTime = Math.max(this._startTime, this.context.currentTime);\n\n\t\t// schedule the envelope\n\t\tif (fadeInTime > 0) {\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._gainNode.gain.setValueAtTime(gain, time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source node at the given time.\n\t * @param time When to stop the source\n\t */\n\tstop(time?: Time): this {\n\t\tthis._stopGain(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source at the given time\n\t * @param  time When to stop the source\n\t */\n\tprotected _stopGain(time: Seconds): this {\n\t\tthis.assert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n\t\t// cancel the previous stop\n\t\tthis.cancelStop();\n\n\t\t// the fadeOut time\n\t\tconst fadeOutTime = this.toSeconds(this._fadeOut);\n\n\t\t// schedule the stop callback\n\t\tthis._stopTime = this.toSeconds(time) + fadeOutTime;\n\t\tthis._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\t\tif (fadeOutTime > 0) {\n\t\t\t// start the fade out curve at the given time\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// stop any ongoing ramps, and set the value to 0\n\t\t\tthis._gainNode.gain.cancelAndHoldAtTime(time);\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t}\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._timeout = this.context.setTimeout(() => {\n\t\t\tthis._stopSource(this.now());\n\t\t\tthis.onended();\n\t\t\t// disconnect when it's ended, to free up for garbage collection\n\t\t\tsetTimeout(() => this._gainNode.disconnect(), 100);\n\t\t}, this._stopTime - this.context.currentTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the playback state at the given time\n\t */\n\tgetStateAtTime = function(time: Time): PlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._startTime !== -1 && computedTime >= this._startTime &&\n\t\t\t(this._stopTime === -1 || computedTime <= this._stopTime)) {\n\t\t\treturn \"started\";\n\t\t} else {\n\t\t\treturn \"stopped\";\n\t\t}\n\t};\n\n\t/**\n\t * Get the playback state at the current time\n\t */\n\tget state(): PlaybackState {\n\t\treturn this.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t *  Cancel a scheduled stop event\n\t */\n\tcancelStop(): this {\n\t\tthis.assert(this._startTime !== -1, \"Source is not started\");\n\t\t// cancel the stop envelope\n\t\tthis._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._stopTime = -1;\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { OneShotSource, OneShotSourceOptions } from \"../OneShotSource\";\n\ninterface ToneBufferSourceOptions extends OneShotSourceOptions {\n\tbuffer: ToneAudioBuffer;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tloop: boolean;\n\tonload: () => void;\n}\n\n/**\n *  @class Wrapper around the native BufferSourceNode.\n *  @extends {Tone.AudioNode}\n *  @param  buffer   The buffer to play\n *  @param  onended  The callback to invoke when the buffer is done playing.\n */\nexport class ToneBufferSource extends OneShotSource<ToneBufferSourceOptions> {\n\n\tname = \"ToneBufferSource\";\n\n\t/**\n\t *  The oscillator\n\t */\n\tprivate _source = this.context.createBufferSource();\n\tprotected _internalChannels = [this._gainNode, this._source];\n\n\t/**\n\t *  The frequency of the oscillator\n\t */\n\treadonly playbackRate: Param<Positive>;\n\n\t/**\n\t * The private instance of the buffer object\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * indicators if the source has started/stopped\n\t */\n\tprivate _sourceStarted: boolean = false;\n\tprivate _sourceStopped: boolean = false;\n\n\tconstructor(options?: Partial<ToneBufferSourceOptions>);\n\tconstructor(buffer?: ToneAudioBuffer | AudioBuffer | string, onload?: () => void);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]));\n\t\tconst options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]);\n\n\t\tconnect(this._source, this._gainNode);\n\t\tthis._source.onended = this._stopSource.bind(this);\n\n\t\t/**\n\t\t *  The playbackRate of the buffer\n\t\t */\n\t\tthis.playbackRate = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._source.playbackRate,\n\t\t\tunits : \"positive\",\n\t\t\tvalue : options.playbackRate,\n\t\t});\n\n\t\t// set some values initially\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis._buffer = new ToneAudioBuffer(options.buffer, options.onload);\n\t}\n\n\tstatic getDefaults(): ToneBufferSourceOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tbuffer: new ToneAudioBuffer(),\n\t\t\tcurve: \"linear\",\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tloop: false,\n\t\t\tloopEnd : 0,\n\t\t\tloopStart : 0,\n\t\t\tonload: noOp,\n\t\t\tplaybackRate : 1,\n\t\t});\n\t}\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(t: Time) {\n\t\tthis._fadeIn = t;\n\t}\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(t: Time) {\n\t\tthis._fadeOut = t;\n\t}\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tget curve(): \"linear\" | \"exponential\" {\n\t\treturn this._curve;\n\t}\n\tset curve(t: \"linear\" | \"exponential\") {\n\t\tthis._curve = t;\n\t}\n\n\t/**\n\t *  Start the buffer\n\t *  @param  time When the player should start.\n\t *  @param  offset The offset from the beginning of the sample to start at.\n\t *  @param  duration How long the sample should play. If no duration\n\t *                   is given, it will default to the full length\n\t *                   of the sample (minus any offset)\n\t *  @param  gain  The gain to play the buffer back at.\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time, gain: GainFactor = 1): this {\n\t\tthis.assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n\t\ttime = this.toSeconds(time);\n\n\t\t// apply the gain envelope\n\t\tthis._startGain(time, gain);\n\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this.loop) {\n\t\t\toffset = defaultArg(offset, this.loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\t\toffset = this.toSeconds(offset);\n\t\t// make sure the offset is not less than 0\n\t\toffset = Math.max(offset, 0);\n\n\t\t// start the buffer source\n\t\tif (this.loop) {\n\t\t\t// modify the offset if it's greater than the loop time\n\t\t\tconst loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\t\tconst loopStart = this.toSeconds(this.loopStart);\n\t\t\tconst loopDuration = loopEnd - loopStart;\n\t\t\t// move the offset back\n\t\t\tif (offset >= loopEnd) {\n\t\t\t\toffset = ((offset - loopStart) % loopDuration) + loopStart;\n\t\t\t}\n\t\t}\n\n\t\t// this.buffer.loaded would have return false if the AudioBuffer was undefined\n\t\tthis._source.buffer = this.buffer.get() as AudioBuffer;\n\t\tthis._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\tif (offset < this.buffer.duration) {\n\t\t\tthis._sourceStarted = true;\n\t\t\tthis._source.start(time, offset);\n\t\t}\n\n\t\t// if a duration is given, schedule a stop\n\t\tif (isDefined(duration)) {\n\t\t\tlet computedDur = this.toSeconds(duration);\n\t\t\t// make sure it's never negative\n\t\t\tcomputedDur = Math.max(computedDur, 0);\n\t\t\tthis.stop(time + computedDur);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(): void {\n\t\tif (!this._sourceStopped) {\n\t\t\tthis._sourceStopped = true;\n\t\t\t// allow additional time for the exponential curve to fully decay\n\t\t\tconst additionalTail = this._curve === \"exponential\" ? this.toSeconds(this._fadeOut) * 2 : 0;\n\t\t\tif (this._sourceStarted && this._stopTime !== -1) {\n\t\t\t\tthis._source.stop(this._stopTime + additionalTail);\n\t\t\t}\n\n\t\t\tthis.onended();\n\t\t\t// remove the onended callback\n\t\t\tthis.onended = noOp;\n\n\t\t\t// dispose the source after it's come to a stop\n\t\t\tsetTimeout(() => {\n\t\t\t\t// if it hasn't already been disposed\n\t\t\t\tif (this._source) {\n\t\t\t\t\tthis._source.disconnect();\n\t\t\t\t\tthis._gainNode.disconnect();\n\t\t\t\t}\n\t\t\t}, additionalTail * 1000 + 100);\n\t\t}\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._source.loopStart;\n\t}\n\tset loopStart(loopStart: Time) {\n\t\tthis._source.loopStart = this.toSeconds(loopStart);\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._source.loopEnd;\n\t}\n\tset loopEnd(loopEnd: Time) {\n\t\tthis._source.loopEnd = this.toSeconds(loopEnd);\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t * @memberOf ToneBufferSource#\n\t * @type {Tone.Buffer}\n\t * @name buffer\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer: ToneAudioBuffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._source.loop;\n\t}\n\tset loop(loop: boolean) {\n\t\tthis._source.loop = loop;\n\t\tif (this._sourceStarted) {\n\t\t\tthis.cancelStop();\n\t\t}\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._source.onended = null;\n\t\tthis._source.disconnect();\n\t\tthis._buffer.dispose();\n\t\tthis.playbackRate.dispose();\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../component/channel/Volume\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp, readOnly } from \"../core/util/Interface\";\nimport { PlaybackState, StateTimeline, StateTimelineEvent } from \"../core/util/StateTimeline\";\nimport { isUndef } from \"../core/util/TypeCheck\";\n\nexport interface SourceOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  @class  Base class for sources. Sources have start/stop methods\n *          and the ability to be synced to the\n *          start/stop of this.context.transport.\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n *  @example\n * //Multiple state change events can be chained together,\n * //but must be set in the correct order and with ascending times\n *\n * // OK\n * state.start().stop(\"+0.2\");\n * // AND\n * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n *\n * // BAD\n * state.stop(\"+0.2\").start();\n * // OR\n * state.start(\"+0.3\").stop(\"+0.2\");\n *\n */\nexport abstract class Source<Options extends SourceOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The output volume node\n\t *  @type  {Tone.Volume}\n\t *  @private\n\t */\n\tprivate _volume: Volume = new Volume({\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * The output note\n\t */\n\toutput = this._volume;\n\tprotected _internalChannels = [this.output];\n\n\t/**\n\t * There is no input\n\t */\n\tinput = undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * source.volume.value = -6;\n\t */\n\tvolume = this._volume.volume;\n\n\t/**\n\t * \tKeep track of the scheduled state.\n\t *  @type {Tone.StateTimeline}\n\t *  @private\n\t */\n\tprotected _state: StateTimeline = new StateTimeline(\"stopped\");\n\n\t/**\n\t *  The synced `start` callback function from the transport\n\t *  @type {Function}\n\t *  @private\n\t */\n\tprivate _synced = false;\n\n\t/**\n\t *  Keep track of all of the scheduled event ids\n\t */\n\tprivate _scheduled: number[] = [];\n\n\t/**\n\t * Placeholder functions for syncing/unsyncing to transport\n\t */\n\tprivate _syncedStart: (time: Seconds, offset: Seconds) => void = noOp;\n\tprivate _syncedStop: (time: Seconds) => void = noOp;\n\n\tconstructor(options: Partial<SourceOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n\n\t\treadOnly(this, \"volume\");\n\t\tthis._state.memory = 100;\n\t\tthis.volume.value = options.volume;\n\t\t// set mute initially\n\t\tthis.mute = options.mute;\n\n\t}\n\n\tstatic getDefaults(): SourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t */\n\tget state(): PlaybackState {\n\t\tif (this._synced) {\n\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\treturn this._state.getValueAtTime(this.context.transport.seconds);\n\t\t\t} else {\n\t\t\t\treturn \"stopped\";\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._state.getValueAtTime(this.now());\n\t\t}\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute: boolean) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t// overwrite these functions\n\tprotected abstract _start(time: Time, offset?: Time, duration?: Time): void;\n\tprotected abstract _stop(time: Time): void;\n\tabstract restart(time: Time, offset?: Time, duration?: Time): this;\n\n\t/**\n\t *  Start the source at the specified time. If no time is given,\n\t *  start the source now.\n\t *  @param  {Time} [time=now] When the source should be started.\n\t *  @returns {Source} this\n\t *  @example\n\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tif (isUndef(time) && this._synced) {\n\t\t\ttime = this.context.transport.seconds;\n\t\t} else {\n\t\t\ttime = this.toSeconds(time);\n\t\t\ttime = Math.max(time, this.context.currentTime);\n\t\t}\n\t\t// if it's started, stop it and restart it\n\t\tif (this._state.getValueAtTime(time) === \"started\") {\n\t\t\tthis._state.cancel(time);\n\t\t\tthis._state.setStateAtTime(\"started\", time);\n\t\t\tthis.restart(time, offset, duration);\n\t\t} else {\n\t\t\tthis._state.setStateAtTime(\"started\", time);\n\t\t\tif (this._synced) {\n\t\t\t\t// add the offset time to the event\n\t\t\t\tconst event = this._state.get(time);\n\t\t\t\tif (event) {\n\t\t\t\t\tevent.offset = this.toSeconds(defaultArg(offset, 0));\n\t\t\t\t\tevent.duration = this.toSeconds(duration);\n\t\t\t\t}\n\t\t\t\tconst sched = this.context.transport.schedule(t => {\n\t\t\t\t\tthis._start(t, offset, duration);\n\t\t\t\t}, time);\n\t\t\t\tthis._scheduled.push(sched);\n\n\t\t\t\t// if it's already started\n\t\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\t\tthis._syncedStart(this.now(), this.context.transport.seconds);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._start.apply(this, arguments);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the source at the specified time. If no time is given,\n\t *  stop the source now.\n\t *  @param  {Time} [time=now] When the source should be stopped.\n\t *  @returns {Source} this\n\t *  @example\n\t * source.stop(); // stops the source immediately\n\t */\n\tstop(time?: Time): this {\n\t\tif (isUndef(time) && this._synced) {\n\t\t\ttime = this.context.transport.seconds;\n\t\t} else {\n\t\t\ttime = this.toSeconds(time);\n\t\t\ttime = Math.max(time, this.context.currentTime);\n\t\t}\n\t\tif (!this._synced) {\n\t\t\tthis._stop.apply(this, arguments);\n\t\t} else {\n\t\t\tconst sched = this.context.transport.schedule(this._stop.bind(this), time);\n\t\t\tthis._scheduled.push(sched);\n\t\t}\n\t\tthis._state.cancel(time);\n\t\tthis._state.setStateAtTime(\"stopped\", time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Sync the source to the Transport so that all subsequent\n\t *  calls to `start` and `stop` are synced to the TransportTime\n\t *  instead of the AudioContext time.\n\t *\n\t * @example\n\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * source.sync().start(0).stop(0.3);\n\t * //start the transport.\n\t * this.context.transport.start();\n\t *\n\t * @example\n\t * //start the transport with an offset and the sync'ed sources\n\t * //will start in the correct position\n\t * source.sync().start(0.1);\n\t * //the source will be invoked with an offset of 0.4 = (0.5 - 0.1)\n\t * this.context.transport.start(\"+0.5\", 0.5);\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncedStart = (time, offset) => {\n\t\t\t\tif (offset > 0) {\n\t\t\t\t\t// get the playback state at that time\n\t\t\t\t\tconst stateEvent = this._state.get(offset);\n\t\t\t\t\t// listen for start events which may occur in the middle of the sync'ed time\n\t\t\t\t\tif (stateEvent && stateEvent.state === \"started\" && stateEvent.time !== offset) {\n\t\t\t\t\t\t// get the offset\n\t\t\t\t\t\tconst startOffset = offset - this.toSeconds(stateEvent.time);\n\t\t\t\t\t\tlet duration;\n\t\t\t\t\t\tif (stateEvent.duration) {\n\t\t\t\t\t\t\tduration = this.toSeconds(stateEvent.duration) - startOffset;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._syncedStop = time => {\n\t\t\t\tconst seconds = this.context.transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));\n\t\t\t\tif (this._state.getValueAtTime(seconds) === \"started\") {\n\t\t\t\t\tthis._stop(time);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.context.transport.on(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"loopStart\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"loopEnd\", this._syncedStop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsync the source to the Transport. See Source.sync\n\t */\n\tunsync(): this {\n\t\tif (this._synced) {\n\t\t\tthis.context.transport.off(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"loopEnd\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.off(\"loopStart\", this._syncedStart);\n\t\t}\n\t\tthis._synced = false;\n\t\t// clear all of the scheduled ids\n\t\tthis._scheduled.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduled = [];\n\t\tthis._state.cancel(0);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tthis.unsync();\n\t\tthis._volume.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n","import { noOp } from \"../util/Interface\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\nexport interface TransportEventOptions {\n\tcallback: (time: number) => void;\n\tonce: boolean;\n\ttime: Ticks;\n}\n\n/**\n * TransportEvent is an internal class used by (Tone.Transport)[Transport]\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n * @param Transport The transport object which the event belongs to\n */\nexport class TransportEvent {\n\n\t/**\n\t * Reference to the Transport that created it\n\t */\n\tprotected transport: Transport;\n\n\t/**\n\t * The unique id of the event\n\t */\n\tid: number = TransportEvent._eventId++;\n\n\t/**\n\t * The time the event starts\n\t */\n\ttime: Ticks;\n\n\t/**\n\t * The callback to invoke\n\t */\n\tprivate callback?: (time: Seconds) => void;\n\n\t/**\n\t * If the event should be removed after being invoked.\n\t */\n\tprivate _once: boolean;\n\n\tconstructor(transport: Transport, opts: Partial<TransportEventOptions>) {\n\n\t\tconst options: TransportEventOptions = Object.assign(TransportEvent.getDefaults(), opts);\n\n\t\tthis.transport = transport;\n\t\tthis.callback = options.callback;\n\t\tthis._once = options.once;\n\t\tthis.time = options.time;\n\t}\n\n\tstatic getDefaults(): TransportEventOptions {\n\t\treturn {\n\t\t\tcallback: noOp,\n\t\t\tonce: false,\n\t\t\ttime: 0,\n\t\t};\n\t}\n\n\t/**\n\t * Current ID counter\n\t */\n\tprivate static _eventId: number = 0;\n\n\t/**\n\t * Invoke the event callback.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\tif (this.callback) {\n\t\t\tthis.callback(time);\n\t\t\tif (this._once) {\n\t\t\t\tthis.transport.clear(this.id);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tthis.callback = undefined;\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface VolumeOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  @class Volume is a simple volume node, useful for creating a volume fader.\n *\n *  @extends {Tone.AudioNode}\n *  @constructor\n *  @param {Decibels} [volume=0] the initial volume\n *  @example\n * var vol = new Volume(-12);\n * instrument.chain(vol, Tone.Master);\n */\nexport class Volume extends ToneAudioNode<VolumeOptions> {\n\n\tname = \"Volume\";\n\n\t/**\n\t * the output node\n\t */\n\toutput: Gain<Decibels> = new Gain({\n\t\tcontext: this.context,\n\t\tunits: \"decibels\",\n\t});\n\tprotected _internalChannels = [this.output];\n\n\t/**\n\t * Input and output are the same\n\t */\n\tinput = this.output;\n\n\t/**\n\t * The unmuted volume\n\t */\n\tprivate _unmutedVolume: Decibels;\n\n\t/**\n\t *  The volume control in decibels.\n\t */\n\tvolume: Param<Decibels> = this.output.gain;\n\n\tconstructor(options?: Decibels | Partial<VolumeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n\n\t\tthis.volume.value = options.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis._unmutedVolume = options.volume;\n\n\t\t// set the mute initially\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): VolumeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * volume.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.volume.value === -Infinity;\n\t}\n\tset mute(mute: boolean) {\n\t\tif (!this.mute && mute) {\n\t\t\tthis._unmutedVolume = this.volume.value;\n\t\t\t// maybe it should ramp here?\n\t\t\tthis.volume.value = -Infinity;\n\t\t} else if (this.mute && !mute) {\n\t\t\tthis.volume.value = this._unmutedVolume;\n\t\t}\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tthis.input.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n","import { Tone } from \"../Tone\";\nimport { isDefined } from \"./TypeCheck\";\n\n/**\n * An IntervalTimeline event must have a time and duration\n */\nexport interface IntervalTimelineEvent {\n\ttime: number;\n\tduration: number;\n\t[propName: string]: any;\n}\n\n/**\n * Similar to Tone.Timeline, but all events represent\n * intervals with both \"time\" and \"duration\" times. The\n * events are placed in a tree structure optimized\n * for querying an intersection point with the timeline\n * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n * to represent the data.\n */\nexport class IntervalTimeline extends Tone {\n\n\tname = \"IntervalTimeline\";\n\n\t/**\n\t *  The root node of the inteval tree\n\t */\n\tprivate _root: IntervalNode | null = null;\n\n\t/**\n\t *  Keep track of the length of the timeline.\n\t */\n\tprivate _length: number = 0;\n\n\t/**\n\t *  The event to add to the timeline. All events must\n\t *  have a time and duration value\n\t *  @param  event  The event to add to the timeline\n\t */\n\tadd(event: IntervalTimelineEvent): this {\n\t\tthis.assert(isDefined(event.time), \"Events must have a time property\");\n\t\tthis.assert(isDefined(event.duration), \"Events must have a duration parameter\");\n\n\t\tevent.time = event.time.valueOf();\n\t\tlet node: IntervalNode | null = new IntervalNode(event.time, event.time + event.duration, event);\n\t\tif (this._root === null) {\n\t\t\tthis._root = node;\n\t\t} else {\n\t\t\tthis._root.insert(node);\n\t\t}\n\t\tthis._length++;\n\t\t// Restructure tree to be balanced\n\t\twhile (node !== null) {\n\t\t\tnode.updateHeight();\n\t\t\tnode.updateMax();\n\t\t\tthis._rebalance(node);\n\t\t\tnode = node.parent;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  event  The event to remove from the timeline\n\t */\n\tremove(event: IntervalTimelineEvent): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(event.time, results);\n\t\t\tfor (const node of results) {\n\t\t\t\tif (node.event === event) {\n\t\t\t\t\tthis._removeNode(node);\n\t\t\t\t\tthis._length--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The number of items in the timeline.\n\t *  @readOnly\n\t */\n\tget length(): number {\n\t\treturn this._length;\n\t}\n\n\t/**\n\t *  Remove events whose time time is after the given time\n\t *  @param  time  The time to query.\n\t */\n\tcancel(after: number): this {\n\t\tthis.forEachFrom(after, event => this.remove(event));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Set the root node as the given node\n\t */\n\tprivate _setRoot(node: IntervalNode | null): void {\n\t\tthis._root = node;\n\t\tif (this._root !== null) {\n\t\t\tthis._root.parent = null;\n\t\t}\n\t}\n\n\t/**\n\t *  Replace the references to the node in the node's parent\n\t *  with the replacement node.\n\t */\n\tprivate _replaceNodeInParent(node: IntervalNode, replacement: IntervalNode | null): void {\n\t\tif (node.parent !== null) {\n\t\t\tif (node.isLeftChild()) {\n\t\t\t\tnode.parent.left = replacement;\n\t\t\t} else {\n\t\t\t\tnode.parent.right = replacement;\n\t\t\t}\n\t\t\tthis._rebalance(node.parent);\n\t\t} else {\n\t\t\tthis._setRoot(replacement);\n\t\t}\n\t}\n\n\t/**\n\t *  Remove the node from the tree and replace it with\n\t *  a successor which follows the schema.\n\t */\n\tprivate _removeNode(node): void {\n\t\tif (node.left === null && node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, null);\n\t\t} else if (node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, node.left);\n\t\t} else if (node.left === null) {\n\t\t\tthis._replaceNodeInParent(node, node.right);\n\t\t} else {\n\t\t\tconst balance = node.getBalance();\n\t\t\tlet replacement: IntervalNode;\n\t\t\tlet temp: IntervalNode | null = null;\n\t\t\tif (balance > 0) {\n\t\t\t\tif (node.left.right === null) {\n\t\t\t\t\treplacement = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\ttemp = replacement;\n\t\t\t\t} else {\n\t\t\t\t\treplacement = node.left.right;\n\t\t\t\t\twhile (replacement.right !== null) {\n\t\t\t\t\t\treplacement = replacement.right;\n\t\t\t\t\t}\n\t\t\t\t\tif (replacement.parent) {\n\t\t\t\t\t\treplacement.parent.right = replacement.left;\n\t\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (node.right.left === null) {\n\t\t\t\treplacement = node.right;\n\t\t\t\treplacement.left = node.left;\n\t\t\t\ttemp = replacement;\n\t\t\t} else {\n\t\t\t\treplacement = node.right.left;\n\t\t\t\twhile (replacement.left !== null) {\n\t\t\t\t\treplacement = replacement.left;\n\t\t\t\t}\n\t\t\t\tif (replacement.parent) {\n\t\t\t\t\treplacement.parent.left = replacement.right;\n\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (node.parent !== null) {\n\t\t\t\tif (node.isLeftChild()) {\n\t\t\t\t\tnode.parent.left = replacement;\n\t\t\t\t} else {\n\t\t\t\t\tnode.parent.right = replacement;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._setRoot(replacement);\n\t\t\t}\n\t\t\tif (temp) {\n\t\t\t\tthis._rebalance(temp);\n\t\t\t}\n\t\t}\n\t\tnode.dispose();\n\t}\n\n\t/**\n\t *  Rotate the tree to the left\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\t_rotateLeft(node): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.right the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.right;\n\t\tnode.right = pivotNode.left;\n\t\tpivotNode.left = node;\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t *  Rotate the tree to the right\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\t_rotateRight(node): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.left the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.left;\n\t\tnode.left = pivotNode.right;\n\t\tpivotNode.right = node;\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t *  Balance the BST\n\t */\n\tprivate _rebalance(node: IntervalNode): void {\n\t\tconst balance = node.getBalance();\n\t\tif (balance > 1 && node.left) {\n\t\t\tif (node.left.getBalance() < 0) {\n\t\t\t\tthis._rotateLeft(node.left);\n\t\t\t} else {\n\t\t\t\tthis._rotateRight(node);\n\t\t\t}\n\t\t} else if (balance < -1 && node.right) {\n\t\t\tif (node.right.getBalance() > 0) {\n\t\t\t\tthis._rotateRight(node.right);\n\t\t\t} else {\n\t\t\t\tthis._rotateLeft(node);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Get an event whose time and duration span the give time. Will\n\t *  return the match whose \"time\" value is closest to the given time.\n\t *  @return  The event which spans the desired time\n\t */\n\tget(time: number): IntervalTimelineEvent | null {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tif (results.length > 0) {\n\t\t\t\tlet max = results[0];\n\t\t\t\tfor (let i = 1; i < results.length; i++) {\n\t\t\t\t\tif (results[i].low > max.low) {\n\t\t\t\t\t\tmax = results[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn max.event;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t *  Iterate over everything in the timeline.\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: IntervalTimelineEvent) => void): this {\n\t\tif (this._root !== null) {\n\t\t\tconst allNodes: IntervalNode[] = [];\n\t\t\tthis._root.traverse(node => allNodes.push(node));\n\t\t\tallNodes.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array in which the given time\n\t *  overlaps with the time and duration time of the event.\n\t *  @param  time The time to check if items are overlapping\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: IntervalTimelineEvent) => void): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array in which the time is greater\n\t *  than or equal to the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time, callback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.searchAfter(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tif (this._root !== null) {\n\t\t\tthis._root.traverse(node => node.dispose());\n\t\t}\n\t\tthis._root = null;\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tINTERVAL NODE HELPER\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Represents a node in the binary search tree, with the addition\n *  of a \"high\" value which keeps track of the highest value of\n *  its children.\n *  References:\n *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n *  @param low\n *  @param high\n */\n// tslint:disable-next-line: max-classes-per-file\nclass IntervalNode {\n\n\t// the event container\n\tevent: IntervalTimelineEvent | null;\n\t// the low value\n\tlow: number;\n\t// the high value\n\thigh: number;\n\t// the high value for this and all child nodes\n\tmax: number;\n\t// the nodes to the left\n\tprivate _left: IntervalNode | null = null;\n\t// the nodes to the right\n\tprivate _right: IntervalNode | null = null;\n\t// the parent node\n\tparent: IntervalNode | null = null;\n\t// the number of child nodes\n\theight: number = 0;\n\n\tconstructor(low, high, event) {\n\t\tthis.event = event;\n\t\t// the low value\n\t\tthis.low = low;\n\t\t// the high value\n\t\tthis.high = high;\n\t\t// the high value for this and all child nodes\n\t\tthis.max = this.high;\n\t}\n\n\t/**\n\t *  Insert a node into the correct spot in the tree\n\t */\n\tinsert(node: IntervalNode): void {\n\t\tif (node.low <= this.low) {\n\t\t\tif (this.left === null) {\n\t\t\t\tthis.left = node;\n\t\t\t} else {\n\t\t\t\tthis.left.insert(node);\n\t\t\t}\n\t\t} else if (this.right === null) {\n\t\t\tthis.right = node;\n\t\t} else {\n\t\t\tthis.right.insert(node);\n\t\t}\n\t}\n\n\t/**\n\t *  Search the tree for nodes which overlap\n\t *  with the given point\n\t *  @param  point  The point to query\n\t *  @param  results  The array to put the results\n\t */\n\tsearch(point: number, results: IntervalNode[]): void {\n\t\t// If p is to the right of the rightmost point of any interval\n\t\t// in this node and all children, there won't be any matches.\n\t\tif (point > this.max) {\n\t\t\treturn;\n\t\t}\n\t\t// Search left children\n\t\tif (this.left !== null) {\n\t\t\tthis.left.search(point, results);\n\t\t}\n\t\t// Check this node\n\t\tif (this.low <= point && this.high > point) {\n\t\t\tresults.push(this);\n\t\t}\n\t\t// If p is to the left of the time of this interval,\n\t\t// then it can't be in any child to the right.\n\t\tif (this.low > point) {\n\t\t\treturn;\n\t\t}\n\t\t// Search right children\n\t\tif (this.right !== null) {\n\t\t\tthis.right.search(point, results);\n\t\t}\n\t}\n\n\t/**\n\t *  Search the tree for nodes which are less\n\t *  than the given point\n\t *  @param  point  The point to query\n\t *  @param  results  The array to put the results\n\t */\n\tsearchAfter(point: number, results: IntervalNode[]): void {\n\t\t// Check this node\n\t\tif (this.low >= point) {\n\t\t\tresults.push(this);\n\t\t\tif (this.left !== null) {\n\t\t\t\tthis.left.searchAfter(point, results);\n\t\t\t}\n\t\t}\n\t\t// search the right side\n\t\tif (this.right !== null) {\n\t\t\tthis.right.searchAfter(point, results);\n\t\t}\n\t}\n\n\t/**\n\t *  Invoke the callback on this element and both it's branches\n\t *  @param  {Function}  callback\n\t */\n\ttraverse(callback: (self: IntervalNode) => void): void {\n\t\tcallback(this);\n\t\tif (this.left !== null) {\n\t\t\tthis.left.traverse(callback);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.right.traverse(callback);\n\t\t}\n\t}\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tupdateHeight(): void {\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tthis.height = Math.max(this.left.height, this.right.height) + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tthis.height = this.right.height + 1;\n\t\t} else if (this.left !== null) {\n\t\t\tthis.height = this.left.height + 1;\n\t\t} else {\n\t\t\tthis.height = 0;\n\t\t}\n\t}\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tupdateMax(): void {\n\t\tthis.max = this.high;\n\t\tif (this.left !== null) {\n\t\t\tthis.max = Math.max(this.max, this.left.max);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.max = Math.max(this.max, this.right.max);\n\t\t}\n\t}\n\n\t/**\n\t *  The balance is how the leafs are distributed on the node\n\t *  @return  Negative numbers are balanced to the right\n\t */\n\tgetBalance(): number {\n\t\tlet balance = 0;\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tbalance = this.left.height - this.right.height;\n\t\t} else if (this.left !== null) {\n\t\t\tbalance = this.left.height + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tbalance = -(this.right.height + 1);\n\t\t}\n\t\treturn balance;\n\t}\n\n\t/**\n\t *  @returns true if this node is the left child of its parent\n\t */\n\tisLeftChild(): boolean {\n\t\treturn this.parent !== null && this.parent.left === this;\n\t}\n\n\t/**\n\t *  get/set the left node\n\t */\n\tget left(): IntervalNode | null {\n\t\treturn this._left;\n\t}\n\n\tset left(node: IntervalNode | null) {\n\t\tthis._left = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t *  get/set the right node\n\t */\n\tget right(): IntervalNode | null {\n\t\treturn this._right;\n\t}\n\n\tset right(node: IntervalNode | null) {\n\t\tthis._right = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t *  null out references.\n\t */\n\tdispose(): void {\n\t\tthis.parent = null;\n\t\tthis._left = null;\n\t\tthis._right = null;\n\t\tthis.event = null;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter, EmitterEventObject } from \"../util/Emitter\";\nimport { noOp, readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline } from \"../util/StateTimeline\";\nimport { TickSignal } from \"./TickSignal\";\nimport { TickSource } from \"./TickSource\";\n\ntype ClockCallback = (time: Time, ticks?: Ticks) => void;\n\ninterface ClockOptions extends ToneWithContextOptions {\n\tfrequency: number;\n\tcallback: ClockCallback;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ntype ClockEvent = \"start\" | \"stop\" | \"pause\";\n\n/**\n * A sample accurate clock which provides a callback at the given rate.\n * While the callback is not sample-accurate (it is still susceptible to\n * loose JS timing), the time passed in as the argument to the callback\n * is precise. For most applications, it is better to use Tone.Transport\n * instead of the Clock by itself since you can synchronize multiple callbacks.\n *\n * @param callback The callback to be invoked with the time of the audio event\n * @param frequency The rate of the callback\n * @example\n * //the callback will be invoked approximately once a second\n * //and will print the time exactly once a second apart.\n * const clock = new Clock(time => {\n * \tconsole.log(time);\n * }, 1);\n */\nexport class Clock<Type extends BPM | Hertz = Hertz>\nextends ToneWithContext<ClockOptions> implements Emitter<ClockEvent> {\n\n\tname = \"Clock\";\n\n\t/**\n\t *  The callback function to invoke at the scheduled tick.\n\t */\n\tcallback: ClockCallback = noOp;\n\n\t/**\n\t *  The tick counter\n\t */\n\tprivate _tickSource: TickSource<Type>;\n\n\t/**\n\t *  The last time the loop callback was invoked\n\t */\n\tprivate _lastUpdate: number = 0;\n\n\t/**\n\t *  Keep track of the playback state\n\t */\n\tprivate _state: StateTimeline = new StateTimeline(\"stopped\");\n\n\t/**\n\t * Context bound reference to the _loop method\n\t * This is necessary to remove the event in the end.\n\t */\n\tprivate _boundLoop: () => void = this._loop.bind(this);\n\n\t/**\n\t *  The rate the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<Type>;\n\n\tconstructor(options: Partial<ClockOptions>);\n\tconstructor(callback?: ClockCallback, frequency?: Frequency);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]));\n\t\tconst options = optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]);\n\n\t\tthis.callback = options.callback;\n\t\tthis._tickSource = new TickSource({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tunits: options.units,\n\t\t});\n\t\tthis._lastUpdate = 0;\n\t\tthis.frequency = this._tickSource.frequency;\n\t\treadOnly(this, \"frequency\");\n\n\t\t// add an initial state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\n\t\t// bind a callback to the worker thread\n\t\tthis.context.on(\"tick\", this._boundLoop);\n\t}\n\n\tstatic getDefaults(): ClockOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback: noOp as ClockCallback,\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\",\n\t\t}) as ClockOptions;\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  time    The time the clock should start\n\t *  @param offset  Where the tick counter starts counting from.\n\t */\n\tstart(time?: Time, offset?: Ticks): this {\n\t\t// make sure the context is started\n\t\tthis.context.resume();\n\t\t// start the loop\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis._tickSource.start(computedTime, offset);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"start\", computedTime, offset);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t *  @param time The time when the clock should stop.\n\t *  @returns {Clock} this\n\t *  @example\n\t * clock.stop();\n\t */\n\tstop(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis._tickSource.stop(computedTime);\n\t\tif (computedTime < this._lastUpdate) {\n\t\t\tthis.emit(\"stop\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param time The time when the clock should stop.\n\t */\n\tpause(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t\tthis._tickSource.pause(computedTime);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"pause\", computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The number of times the callback was invoked. Starts counting at 0\n\t *  and increments after the callback was invoked.\n\t */\n\tget ticks(): Ticks {\n\t\treturn Math.ceil(this.getTicksAtTime(this.now()));\n\t}\n\tset ticks(t: Ticks) {\n\t\tthis._tickSource.ticks = t;\n\t}\n\n\t/**\n\t *  The time since ticks=0 that the Clock has been running. Accounts for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._tickSource.seconds;\n\t}\n\tset seconds(s: Seconds) {\n\t\tthis._tickSource.seconds = s;\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._tickSource.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\tthis._tickSource.setTicksAtTime(ticks, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\treturn this._tickSource.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the next tick\n\t * @param  ticks The tick number.\n\t */\n\tnextTickTime(offset: Ticks, when: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst currentTick = this.getTicksAtTime(computedTime);\n\t\treturn this._tickSource.getTimeOfTick(currentTick + offset, computedTime);\n\t}\n\n\t/**\n\t *  The scheduling loop.\n\t */\n\tprivate _loop(): void {\n\n\t\tconst startTime = this._lastUpdate;\n\t\tconst endTime = this.now();\n\t\tthis._lastUpdate = endTime;\n\n\t\tif (startTime !== endTime) {\n\t\t\t// the state change events\n\t\t\tthis._state.forEachBetween(startTime, endTime, e => {\n\t\t\t\tswitch (e.state) {\n\t\t\t\t\tcase \"started\" :\n\t\t\t\t\t\tconst offset = this._tickSource.getTicksAtTime(e.time);\n\t\t\t\t\t\tthis.emit(\"start\", e.time, offset);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"stopped\" :\n\t\t\t\t\t\tif (e.time !== 0) {\n\t\t\t\t\t\t\tthis.emit(\"stop\", e.time);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"paused\" :\n\t\t\t\t\t\tthis.emit(\"pause\", e.time);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t\t// the tick callbacks\n\t\t\tthis._tickSource.forEachTickBetween(startTime, endTime, (time, ticks) => {\n\t\t\t\tthis.callback(time, ticks);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Returns the scheduled state at the given time.\n\t * @param  time  The time to query.\n\t * @return  The name of the state input in setStateAtTime.\n\t * @example\n\t * clock.start(\"+0.1\");\n\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tgetStateAtTime(time: Time): PlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(computedTime);\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tthis.context.off(\"tick\", this._boundLoop);\n\t\tthis._tickSource.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t///////////////////////////////////////////////////////////////////////\n\n\ton!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\tonce!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\toff!: (event: ClockEvent, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Clock);\n","import { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio } from \"./Conversions\";\nimport { ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\nimport { TypeBaseExpression } from \"./TypeBase\";\n\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `eval` method.\n * @example\n * Frequency(\"C3\") // 261\n * Frequency(38, \"midi\") //\n * Frequency(\"C3\").transpose(4);\n */\nexport class FrequencyClass extends TimeClass<Hertz> {\n\n\tname = \"Frequency\";\n\n\treadonly defaultUnits = \"hz\";\n\n\t/**\n\t * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n\t * to generate all the other pitch values from notes. A4's values in Hertz.\n\t */\n\tstatic get A4(): Hertz {\n\t\treturn getA4();\n\t}\n\tstatic set A4(freq: Hertz) {\n\t\tsetA4(freq);\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tAUGMENT BASE EXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\tprotected _getExpressions(defaultUnit): TypeBaseExpression<Hertz> {\n\t\treturn Object.assign({}, super._getExpressions(defaultUnit), {\n\t\t\tmidi : {\n\t\t\t\tregexp : /^(\\d+(?:\\.\\d+)?midi)/,\n\t\t\t\tmethod(value): number {\n\t\t\t\t\tif (this._defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(value);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tnote : {\n\t\t\t\tregexp : /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t\t\t\tmethod(pitch, octave): number {\n\t\t\t\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\t\t\t\tconst noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\t\t\t\t\tif (this._defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn noteNumber;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(noteNumber);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\ttr : {\n\t\t\t\tregexp : /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t\t\tmethod(m, q, s): number {\n\t\t\t\t\tlet total = 1;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total;\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tEXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Transposes the frequency by the given number of semitones.\n\t *  @return  A new transposed frequency\n\t *  @example\n\t * Frequency(\"A4\").transpose(3); //\"C5\"\n\t */\n\ttranspose(interval: Interval): FrequencyClass {\n\t\treturn new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n\t}\n\n\t/**\n\t *  Takes an array of semitone intervals and returns\n\t *  an array of frequencies transposed by those intervals.\n\t *  @return  Returns an array of Frequencies\n\t *  @example\n\t * Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t */\n\tharmonize(intervals: Interval[]): FrequencyClass[] {\n\t\treturn intervals.map(interval => {\n\t\t\treturn this.transpose(interval);\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Return the value of the frequency as a MIDI note\n\t *  @return  {MIDI}\n\t *  @example\n\t * Frequency(\"C4\").toMidi(); //60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn FrequencyClass.ftom(this.valueOf());\n\t}\n\n\t/**\n\t *  Return the value of the frequency in Scientific Pitch Notation\n\t *  @return  {Note}\n\t *  @example\n\t * Frequency(69, \"midi\").toNote(); //\"A4\"\n\t */\n\ttoNote(): Note {\n\t\tconst freq = this.toFrequency();\n\t\tconst log = Math.log2(freq / FrequencyClass.A4);\n\t\tlet noteNumber = Math.round(12 * log) + 57;\n\t\tconst octave = Math.floor(noteNumber / 12);\n\t\tif (octave < 0) {\n\t\t\tnoteNumber += -12 * octave;\n\t\t}\n\t\tconst noteName = scaleIndexToNote[noteNumber % 12];\n\t\treturn noteName + octave.toString();\n\t}\n\n\t/**\n\t *  Return the duration of one cycle in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn 1 / super.toSeconds();\n\t}\n\n\t/**\n\t *  Return the duration of one cycle in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.floor(quarters * this._getPPQ());\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS HELPERS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  With no arguments, return 0\n\t */\n\tprotected _noArg(): Hertz {\n\t\treturn 0;\n\t}\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Hertz {\n\t\treturn freq;\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Hertz {\n\t\treturn 1 / ((ticks * 60) / (this._getBpm() * this._getPPQ()));\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Hertz {\n\t\treturn 1 / super._beatsToUnits(beats);\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Hertz {\n\t\treturn 1 / seconds;\n\t}\n\n\t/**\n\t * Convert a MIDI note to frequency value.\n\t * @param  midi The midi number to convert.\n\t * @return The corresponding frequency value\n\t * @example\n\t * FrequencyClass.mtof(69); // returns 440\n\t */\n\tstatic mtof(midi: MidiNote): Hertz {\n\t\treturn FrequencyClass.A4 * Math.pow(2, (midi - 69) / 12);\n\t}\n\n\t/**\n\t * Convert a frequency value to a MIDI note.\n\t * @param frequency The value to frequency value to convert.\n\t * @example\n\t * Frequency.ftom(440); // returns 69\n\t */\n\tstatic ftom(frequency: Hertz): MidiNote {\n\t\treturn ftom(frequency);\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tFREQUENCY CONVERSIONS\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Note to scale index\n *  @type  {Object}\n *  @private\n */\nconst noteToScaleIndex = {\n\t// tslint:disable-next-line\n\t\"cbb\" : -2, \"cb\" : -1, \"c\" : 0, \"c#\" : 1, \"cx\" : 2,\n\t\"dbb\" : 0, \"db\" : 1, \"d\" : 2, \"d#\" : 3, \"dx\" : 4,\n\t\"ebb\" : 2, \"eb\" : 3, \"e\" : 4, \"e#\" : 5, \"ex\" : 6,\n\t\"fbb\" : 3, \"fb\" : 4, \"f\" : 5, \"f#\" : 6, \"fx\" : 7,\n\t\"gbb\" : 5, \"gb\" : 6, \"g\" : 7, \"g#\" : 8, \"gx\" : 9,\n\t\"abb\" : 7, \"ab\" : 8, \"a\" : 9, \"a#\" : 10, \"ax\" : 11,\n\t\"bbb\" : 9, \"bb\" : 10, \"b\" : 11, \"b#\" : 12, \"bx\" : 13,\n};\n\n/**\n *  scale index to note (sharps)\n *  @type  {Array}\n *  @private\n */\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\nexport function Frequency(value, units?): FrequencyClass {\n\treturn new FrequencyClass(getContext(), value, units);\n}\n","export const version = \"14.0.4\";\n","import { AbstractParam } from \"../core/context/AbstractParam\";\nimport { Param } from \"../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\n\nexport interface SignalOptions<Type> extends ToneAudioNodeOptions {\n\tvalue: Type;\n\tunits: UnitName;\n\tconvert: boolean;\n}\n\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *  @param value Initial value of the signal\n *  @param units unit The units the signal is in.\n * @example\n * const signal = new Tone.Signal(10);\n */\nexport class Signal<Type extends Unit = number> extends ToneAudioNode<SignalOptions<any>>\nimplements AbstractParam<Type> {\n\n\tname = \"Signal\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection.\n\t */\n\treadonly override: boolean = true;\n\n\t/**\n\t * The constant source node which generates the signal\n\t */\n\tprivate _constantSource: ConstantSourceNode = this.context.createConstantSource();\n\treadonly output: OutputNode = this._constantSource;\n\tprotected _param: Param<Type>;\n\treadonly input: InputNode;\n\tprotected _internalChannels = [this._constantSource];\n\n\tconstructor(value?: Type, units?: UnitName);\n\tconstructor(options?: Partial<SignalOptions<Type>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n\n\t\tconst options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]) as SignalOptions<Type>;\n\n\t\tthis._constantSource.start(0);\n\t\tthis.input = this._param = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._constantSource.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.value,\n\t\t});\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannelCount: 1,\n\t\t\tchannelCountMode: \"explicit\",\n\t\t\tchannelInterpretation: \"discrete\",\n\t\t\tconvert: true,\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tunits: \"number\" as UnitName,\n\t\t\tvalue: 0,\n\t\t}) as SignalOptions<any>;\n\t}\n\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tif (destination instanceof Param || destination instanceof AudioParam ||\n\t\t\t(destination instanceof Signal && destination.override)) {\n\t\t\t// cancel changes\n\t\t\tdestination.cancelScheduledValues(0);\n\t\t\t// reset the value\n\t\t\tdestination.setValueAtTime(0, 0);\n\t\t\t// mark the value as overridden\n\t\t\tif (destination instanceof Signal) {\n\t\t\t\tdestination.overridden = true;\n\t\t\t}\n\t\t}\n\t\tsuper.connect(destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// ABSTRACT PARAM INTERFACE\n\t// just a proxy for the ConstantSourceNode's offset AudioParam\n\t// all docs are generated from AbstractParam.ts\n\t///////////////////////////////////////////////////////////////////////////\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.setValueAtTime(value, time);\n\t\treturn this;\n\t}\n\tgetValueAtTime(time: Time): Type {\n\t\treturn this._param.getValueAtTime(time);\n\t}\n\tsetRampPoint(time: Time): this {\n\t\tthis._param.setRampPoint(time);\n\t\treturn this;\n\t}\n\tlinearRampToValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.linearRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampToValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.exponentialRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.exponentialRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\tlinearRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.linearRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\ttargetRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.targetRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\texponentialApproachValueAtTime(value: Type, time: Time, rampTime: Time): this {\n\t\tthis._param.exponentialApproachValueAtTime(value, time, rampTime);\n\t\treturn this;\n\t}\n\tsetTargetAtTime(value: Type, startTime: Time, timeConstant: number): this {\n\t\tthis._param.setTargetAtTime(value, startTime, timeConstant);\n\t\treturn this;\n\t}\n\tsetValueCurveAtTime(values: Type[], startTime: Time, duration: Time, scaling?: number): this {\n\t\tthis._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\t\treturn this;\n\t}\n\tcancelScheduledValues(time: Time): this {\n\t\tthis._param.cancelScheduledValues(time);\n\t\treturn this;\n\t}\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tthis._param.cancelAndHoldAtTime(time);\n\t\treturn this;\n\t}\n\trampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.rampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\n\tget value(): Type {\n\t\treturn this._param.value;\n\t}\n\tset value(value: Type) {\n\t\tthis._param.value = value;\n\t}\n\n\tget convert(): boolean {\n\t\treturn this._param.convert;\n\t}\n\tset convert(convert: boolean) {\n\t\tthis._param.convert = convert;\n\t}\n\n\tget units(): UnitName {\n\t\treturn this._param.units;\n\t}\n\n\tget overridden(): boolean {\n\t\treturn this._param.overridden;\n\t}\n\tset overridden(overridden: boolean) {\n\t\tthis._param.overridden = overridden;\n\t}\n\n\tget maxValue(): number {\n\t\treturn this._param.maxValue;\n\t}\n\tget minValue(): number {\n\t\treturn this._param.minValue;\n\t}\n}\n","import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source, SourceOptions } from \"../Source\";\nimport { ToneOscillatorNode } from \"./OscillatorNode\";\n\nexport type ToneOscillatorType = OscillatorType | string;\n\nexport interface ToneOscillatorOptions extends SourceOptions {\n\ttype: ToneOscillatorType;\n\tfrequency: Frequency;\n\tdetune: Cents;\n\tphase: Degrees;\n\tpartials: number[];\n\tpartialCount: number;\n}\n\n/**\n * All Oscillators share this interface\n */\nexport interface OscillatorInterface {\n\tpartials: number[];\n\tpartialCount: number;\n\tphase: Degrees;\n\tfrequency: Signal<Frequency>;\n\tdetune: Signal<Cents>;\n\ttype: ToneOscillatorType;\n\tbaseType: OscillatorType | \"pulse\" | \"pwm\";\n}\n\n/**\n *  Oscillator supports a number of features including\n *  phase rotation, multiple oscillator types (see Oscillator.type),\n *  and Transport syncing (see Oscillator.syncFrequency).\n *\n *  @param frequency Starting frequency\n *  @param type The oscillator type. Read more about type below.\n *  @example\n * //make and start a 440hz sine tone\n * var osc = new Oscillator(440, \"sine\").toMaster().start();\n */\nexport class Oscillator extends Source<ToneOscillatorOptions> implements OscillatorInterface {\n\n\tname = \"Oscillator\";\n\n\t/**\n\t *  the main oscillator\n\t */\n\tprivate _oscillator: ToneOscillatorNode | null = null;\n\n\t/**\n\t *  The frequency control.\n\t */\n\tfrequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune control signal.\n\t */\n\tdetune: Signal<Cents>;\n\n\t/**\n\t *  the periodic wave\n\t */\n\tprivate _wave?: PeriodicWave;\n\n\t/**\n\t *  The partials of the oscillator\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t *  The number of partials to limit or extend the periodic wave by\n\t */\n\tprivate _partialCount: number;\n\n\t/**\n\t *  the phase of the oscillator between 0 - 360\n\t */\n\tprivate _phase: Radians;\n\n\t/**\n\t *  the type of the oscillator\n\t *  @type {string}\n\t *  @private\n\t */\n\tprivate _type;\n\n\tconstructor(options?: Partial<ToneOscillatorOptions>)\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal<Frequency>({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\tthis.detune = new Signal<Cents>({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, \"detune\");\n\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\t\tthis._phase = options.phase;\n\t\tthis._type = options.type;\n\n\t\tif (options.partialCount && options.type !== \"custom\") {\n\t\t\tthis._type = this.baseType + options.partialCount.toString();\n\t\t}\n\t\tthis.phase = this._phase;\n\t}\n\n\tstatic getDefaults(): ToneOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tpartialCount: 0,\n\t\t\tpartials: [],\n\t\t\tphase: 0,\n\t\t\ttype: \"sine\",\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time?: Time): void {\n\t\tthis.log(\"start\", time);\n\t\t// new oscillator with previous values\n\t\tconst oscillator = new ToneOscillatorNode({\n\t\t\tcontext: this.context,\n\t\t});\n\t\tthis._oscillator = oscillator;\n\t\tif (this._wave) {\n\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t} else {\n\t\t\tthis._oscillator.type = this._type;\n\t\t}\n\t\t// connect the control signal to the oscillator frequency & detune\n\t\tthis._oscillator.connect(this.output);\n\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\tthis.detune.connect(this._oscillator.detune);\n\n\t\t// disconnect onended\n\t\toscillator.onended = () => {\n\t\t\t// defer the callback for the offline context rendering\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.frequency.disconnect(oscillator.frequency);\n\t\t\t\tthis.detune.disconnect(oscillator.detune);\n\t\t\t}, 100);\n\t\t};\n\n\t\t// start the oscillator\n\t\ttime = this.toSeconds(time);\n\t\tthis._oscillator.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tthis.log(\"stop\", time);\n\t\tif (this._oscillator) {\n\t\t\ttime = this.toSeconds(time);\n\t\t\tthis._oscillator.stop(time);\n\t\t}\n\t}\n\n\t/**\n\t * Restart the oscillator. Does not stop the oscillator, but instead\n\t * just cancels any scheduled 'stop' from being invoked.\n\t */\n\trestart(time?: Time): this {\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.cancelStop();\n\t\t}\n\t\tthis._state.cancel(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t *  will also affect the oscillators frequency.\n\t *  @example\n\t * Tone.Transport.bpm.value = 120;\n\t * osc.frequency.value = 440;\n\t * //the ration between the bpm and the frequency will be maintained\n\t * osc.syncFrequency();\n\t * Tone.Transport.bpm.value = 240;\n\t * // the frequency of the oscillator is doubled to 880\n\t */\n\tsyncFrequency(): this {\n\t\tthis.context.transport.syncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsync the oscillator's frequency from the Transport.\n\t *  See Oscillator.syncFrequency\n\t */\n\tunsyncFrequency(): this {\n\t\tthis.context.transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/* tslint:disable */\n\t/**\n\t * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\n\t * setting the first x number of partials of the oscillator. For example: \"sine4\" would\n\t * set be the first 4 partials of the sine wave and \"triangle8\" would set the first\n\t * 8 partials of the triangle wave.\n\t * <br><br>\n\t * Uses PeriodicWave internally even for native types so that it can set the phase.\n\t * PeriodicWave equations are from the\n\t * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).\n\t *\n\t * @memberOf Oscillator#\n\t * @type {string}\n\t * @name type\n\t * @example\n\t * //set it to a square wave\n\t * osc.type = \"square\";\n\t * @example\n\t * //set the first 6 partials of a sawtooth wave\n\t * osc.type = \"sawtooth6\";\n\t */\n\t/* tslint:enable */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tconst isBasicType = [\"sine\", \"square\", \"sawtooth\", \"triangle\"].indexOf(type) !== -1;\n\t\tif (this._phase === 0 && isBasicType) {\n\t\t\tthis._wave = undefined;\n\t\t\tthis._partialCount = 0;\n\t\t\t// just go with the basic approach\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\t// already tested that it's a basic type\n\t\t\t\tthis._oscillator.type = type as OscillatorType;\n\t\t\t}\n\t\t} else {\n\t\t\tconst [real, imag] = this._getRealImaginary(type, this._phase);\n\t\t\tconst periodicWave = this.context.createPeriodicWave(real, imag);\n\t\t\tthis._wave = periodicWave;\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t}\n\t\t}\n\t\tthis._type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._type.replace(this.partialCount, \"\");\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tif (this.partialCount && this._type !== \"custom\" && baseType !== \"custom\") {\n\t\t\tthis.type = baseType + this.partialCount;\n\t\t} else {\n\t\t\tthis.type = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t * @example\n\t * osc.type = 'sine'\n\t * osc.partialCount = 3\n\t * //is equivalent to\n\t * osc.type = 'sine3'\n\t */\n\tget partialCount(): number {\n\t\treturn this._partialCount;\n\t}\n\tset partialCount(p: number) {\n\t\tlet type = this._type;\n\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(this._type);\n\t\tif (partial) {\n\t\t\ttype = partial[1];\n\t\t}\n\t\tif (this._type !== \"custom\") {\n\t\t\tif (p === 0) {\n\t\t\t\tthis.type = type;\n\t\t\t} else {\n\t\t\t\tthis.type = type + p.toString();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Get the object's attributes. Given no arguments get\n\t *  will return all available object properties and their corresponding\n\t *  values.\n\t */\n\tget(): ToneOscillatorOptions {\n\t\tconst values = super.get();\n\t\tif (values.type !== \"custom\") {\n\t\t\tdelete values.partials;\n\t\t}\n\t\treturn values;\n\t}\n\n\t/**\n\t *  Returns the real and imaginary components based\n\t *  on the oscillator type.\n\t *  @returns [real: Float32Array, imaginary: Float32Array]\n\t *  @private\n\t */\n\tprivate _getRealImaginary(type: ToneOscillatorType, phase: Radians): Float32Array[] {\n\t\tconst fftSize = 4096;\n\t\tlet periodicWaveSize = fftSize / 2;\n\n\t\tconst real = new Float32Array(periodicWaveSize);\n\t\tconst imag = new Float32Array(periodicWaveSize);\n\n\t\tlet partialCount = 1;\n\t\tif (type === \"custom\") {\n\t\t\tpartialCount = this._partials.length + 1;\n\t\t\tthis._partialCount = this._partials.length;\n\t\t\tperiodicWaveSize = partialCount;\n\t\t} else {\n\t\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t\t\tif (partial) {\n\t\t\t\tpartialCount = parseInt(partial[2], 10) + 1;\n\t\t\t\tthis._partialCount = parseInt(partial[2], 10);\n\t\t\t\ttype = partial[1];\n\t\t\t\tpartialCount = Math.max(partialCount, 2);\n\t\t\t\tperiodicWaveSize = partialCount;\n\t\t\t} else {\n\t\t\t\tthis._partialCount = 0;\n\t\t\t}\n\t\t\tthis._partials = [];\n\t\t}\n\n\t\t// tslint:disable: no-bitwise\n\t\tfor (let n = 1; n < periodicWaveSize; ++n) {\n\t\t\tconst piFactor = 2 / (n * Math.PI);\n\t\t\tlet b;\n\t\t\tswitch (type) {\n\t\t\t\tcase \"sine\":\n\t\t\t\t\tb = (n <= partialCount) ? 1 : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"square\":\n\t\t\t\t\tb = (n & 1) ? 2 * piFactor : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"sawtooth\":\n\t\t\t\t\tb = piFactor * ((n & 1) ? 1 : -1);\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"triangle\":\n\t\t\t\t\tif (n & 1) {\n\t\t\t\t\t\tb = 2 * (piFactor * piFactor) * ((((n - 1) >> 1) & 1) ? -1 : 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t}\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"custom\":\n\t\t\t\t\tb = this._partials[n - 1];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new TypeError(\"Oscillator: invalid type: \" + type);\n\t\t\t}\n\t\t\tif (b !== 0) {\n\t\t\t\treal[n] = -b * Math.sin(phase * n);\n\t\t\t\timag[n] = b * Math.cos(phase * n);\n\t\t\t} else {\n\t\t\t\treal[n] = 0;\n\t\t\t\timag[n] = 0;\n\t\t\t}\n\t\t}\n\t\treturn [real, imag];\n\t}\n\n\t/**\n\t *  Compute the inverse FFT for a given phase.\n\t */\n\tprivate _inverseFFT(real: Float32Array, imag: Float32Array, phase: Radians): number {\n\t\tlet sum = 0;\n\t\tconst len = real.length;\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tsum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t *  Returns the initial value of the oscillator.\n\t */\n\tprotected _getInitialValue(): AudioRange {\n\t\tconst [real, imag] = this._getRealImaginary(this._type, 0);\n\t\tlet maxValue = 0;\n\t\tconst twoPi = Math.PI * 2;\n\t\t// check for peaks in 8 places\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\tmaxValue = Math.max(this._inverseFFT(real, imag, (i / 8) * twoPi), maxValue);\n\t\t}\n\t\treturn -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t}\n\n\t/**\n\t * The partials of the waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tthis.type = \"custom\";\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t * @example\n\t * osc.phase = 180; //flips the phase of the oscillator\n\t */\n\tget phase(): Degrees {\n\t\treturn this._phase * (180 / Math.PI);\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase * Math.PI / 180;\n\t\t// reset the type\n\t\tthis.type = this._type;\n\t}\n\n\t/**\n\t *  Dispose and disconnect.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._oscillator !== null) {\n\t\t\tthis._oscillator.dispose();\n\t\t}\n\t\tthis._wave = undefined;\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Source, SourceOptions } from \"../source/Source\";\nimport { ToneBufferSource } from \"./buffer/BufferSource\";\n\ntype NoiseType = \"white\" | \"brown\" | \"pink\";\n\ninterface NoiseOptions extends SourceOptions {\n\ttype: NoiseType;\n\tplaybackRate: Positive;\n}\n\n/**\n * Noise is a noise generator. It uses looped noise buffers to save on performance.\n * Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n *\n * @param type the noise type (white|pink|brown)\n * @example\n * //initialize the noise and start\n * var noise = new Noise(\"pink\").start();\n *\n * //make an autofilter to shape the noise\n * var autoFilter = new Tone.AutoFilter({\n * \t\"frequency\" : \"8m\",\n * \t\"min\" : 800,\n * \t\"max\" : 15000\n * }).connect(Tone.Master);\n *\n * //connect the noise\n * noise.connect(autoFilter);\n * //start the autofilter LFO\n * autoFilter.start()\n */\nexport class Noise extends Source<NoiseOptions> {\n\n\tname = \"Noise\";\n\n\t/**\n\t * Private reference to the source\n\t */\n\tprivate _source: ToneBufferSource | null = null;\n\n\t/**\n\t * private reference to the type\n\t */\n\tprivate _type!: NoiseType;\n\n\t/**\n\t *  The playback rate of the noise. Affects\n\t *  the \"frequency\" of the noise.\n\t */\n\tprivate _playbackRate: Positive;\n\n\tconstructor(options?: NoiseType | Partial<NoiseOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]));\n\t\tconst options = optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]);\n\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.type = options.type;\n\t}\n\n\tstatic getDefaults(): NoiseOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tplaybackRate: 1,\n\t\t\ttype: \"white\" as NoiseType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n\t * @example\n\t * noise.type = \"white\";\n\t */\n\tget type(): NoiseType {\n\t\treturn this._type;\n\t}\n\tset type(type: NoiseType) {\n\t\tthis.assert(type in _noiseBuffers, \"Noise: invalid type: \" + type);\n\t\tif (this._type !== type) {\n\t\t\tthis._type = type;\n\t\t\t// if it's playing, stop and restart it\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tconst now = this.now();\n\t\t\t\tthis._stop(now);\n\t\t\t\tthis._start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  The playback rate of the noise. Affects\n\t *  the \"frequency\" of the noise.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate: Positive) {\n\t\tthis._playbackRate = rate;\n\t\tif (this._source) {\n\t\t\tthis._source.playbackRate.value = rate;\n\t\t}\n\t}\n\n\t/**\n\t *  internal start method\n\t */\n\tprotected _start(time: Time): void {\n\t\tconst buffer = _noiseBuffers[this._type];\n\t\tthis._source = new ToneBufferSource(buffer).connect(this.output);\n\t\tthis._source.loop = true;\n\t\tthis._source.playbackRate.value = this._playbackRate;\n\t\tthis._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t}\n\n\t/**\n\t *  internal stop method\n\t *\n\t *  @param {Time} time\n\t *  @private\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tif (this._source) {\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._source = null;\n\t\t}\n\t}\n\n\t/**\n\t * Restarts the noise.\n\t * @param  time When to restart the noise.\n\t */\n\trestart(time?: Time): this {\n\t\t// TODO could be optimized by cancelling the buffer source 'stop'\n\t\t// stop and restart\n\t\tthis._stop(time);\n\t\tthis._start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._source) {\n\t\t\tthis._source.disconnect();\n\t\t}\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// THE NOISE BUFFERS\n///////////////////////////////////////////////////////////////////////////\n\n// Noise buffer stats\nconst BUFFER_LENGTH = 44100 * 5;\nconst NUM_CHANNELS = 2;\n\n/**\n * The cached noise buffers\n */\ninterface NoiseCache {\n\t[key: string]: ToneAudioBuffer | null;\n}\n\n/**\n * Cache the noise buffers\n */\nconst _noiseCache: NoiseCache = {\n\tbrown: null,\n\tpink: null,\n\twhite: null,\n};\n\n/**\n * The noise arrays. Generated on initialization.\n * borrowed heavily from https://github.com/zacharydenton/noise.js\n * (c) 2013 Zach Denton (MIT)\n */\nconst _noiseBuffers = {\n\tget brown(): ToneAudioBuffer {\n\t\tif (!_noiseCache.brown) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet lastOut = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tchannel[i] = (lastOut + (0.02 * white)) / 1.02;\n\t\t\t\t\tlastOut = channel[i];\n\t\t\t\t\tchannel[i] *= 3.5; // (roughly) compensate for gain\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.brown = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.brown;\n\t},\n\n\tget pink(): ToneAudioBuffer {\n\t\tif (!_noiseCache.pink) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\t// tslint:disable-next-line: one-variable-per-declaration\n\t\t\t\tlet b0, b1, b2, b3, b4, b5, b6;\n\t\t\t\tb0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tb0 = 0.99886 * b0 + white * 0.0555179;\n\t\t\t\t\tb1 = 0.99332 * b1 + white * 0.0750759;\n\t\t\t\t\tb2 = 0.96900 * b2 + white * 0.1538520;\n\t\t\t\t\tb3 = 0.86650 * b3 + white * 0.3104856;\n\t\t\t\t\tb4 = 0.55000 * b4 + white * 0.5329522;\n\t\t\t\t\tb5 = -0.7616 * b5 - white * 0.0168980;\n\t\t\t\t\tchannel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t\t\t\t\tchannel[i] *= 0.11; // (roughly) compensate for gain\n\t\t\t\t\tb6 = white * 0.115926;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.pink = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.pink;\n\t},\n\n\tget white(): ToneAudioBuffer {\n\t\tif (!_noiseCache.white) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tchannel[i] = Math.random() * 2 - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.white = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.white;\n\t},\n};\n","export { Noise } from \"./Noise\";\nexport { Oscillator } from \"./oscillator/Oscillator\";\nexport { ToneOscillatorNode } from \"./oscillator/OscillatorNode\";\nexport { ToneBufferSource } from \"./buffer/BufferSource\";\n","import { Context } from \"../context/Context\";\nimport { Ticks, TicksClass } from \"../type/Ticks\";\nimport { TransportEvent, TransportEventOptions } from \"./TransportEvent\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\ninterface TransportRepeatEventOptions extends TransportEventOptions {\n\tinterval: Ticks;\n\tduration: Ticks;\n}\n\n/**\n * TransportRepeatEvent is an internal class used by Tone.Transport\n * to schedule repeat events. This class should not be instantiated directly.\n */\nexport class TransportRepeatEvent extends TransportEvent {\n\n\t/**\n\t * When the event should stop repeating\n\t */\n\tprivate duration: Ticks;\n\n\t/**\n\t * The interval of the repeated event\n\t */\n\tprivate _interval: Ticks;\n\n\t/**\n\t * The ID of the current timeline event\n\t */\n\tprivate _currentId: number = -1;\n\n\t/**\n\t * The ID of the next timeline event\n\t */\n\tprivate _nextId: number = -1;\n\n\t/**\n\t * The time of the next event\n\t */\n\tprivate _nextTick = this.time;\n\n\t/**\n\t * a reference to the bound start method\n\t */\n\tprivate _boundRestart = this._restart.bind(this);\n\n\t/**\n\t * The audio context belonging to this event\n\t */\n\tprotected context: Context;\n\n\tconstructor(transport: Transport, opts: Partial<TransportRepeatEventOptions>) {\n\n\t\tsuper(transport, opts);\n\n\t\tconst options = Object.assign(TransportRepeatEvent.getDefaults(), opts);\n\n\t\tthis.duration = Ticks(options.duration).valueOf();\n\t\tthis._interval = Ticks(options.interval).valueOf();\n\t\tthis._nextTick = options.time;\n\t\tthis.transport.on(\"start\", this._boundRestart);\n\t\tthis.transport.on(\"loopStart\", this._boundRestart);\n\t\tthis.context = this.transport.context;\n\t\tthis._restart();\n\t}\n\n\tstatic getDefaults(): TransportRepeatEventOptions {\n\t\treturn Object.assign({}, TransportEvent.getDefaults(), {\n\t\t\tduration: Infinity,\n\t\t\tinterval: 1,\n\t\t\tonce: false,\n\t\t});\n\t}\n\n\t/**\n\t * Invoke the callback. Returns the tick time which\n\t * the next event should be scheduled at.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\t// create more events if necessary\n\t\tthis._createEvents(time);\n\t\t// call the super class\n\t\tsuper.invoke(time);\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _createEvents(time: Seconds): void {\n\t\t// schedule the next event\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n\t\t\tthis._nextTick += this._interval;\n\t\t\tthis._currentId = this._nextId;\n\t\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\t}\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _restart(time?: Time): void {\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis._nextTick = this.time;\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks > this.time) {\n\t\t\tthis._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n\t\t}\n\t\tthis._currentId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\tthis._nextTick += this._interval;\n\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis.transport.off(\"start\", this._boundRestart);\n\t\tthis.transport.off(\"loopStart\", this._boundRestart);\n\t\treturn this;\n\t}\n}\n","import { Time, TimeClass } from \"../../core/type/Time\";\nimport { PlaybackState } from \"../../core/util/StateTimeline\";\nimport { Signal } from \"../../signal/Signal\";\nimport { onContextInit } from \"../context/ContextInitialization\";\nimport { Gain } from \"../context/Gain\";\nimport { Param } from \"../context/Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { readOnly, writable } from \"../util/Interface\";\nimport { IntervalTimeline } from \"../util/IntervalTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isArray, isDefined } from \"../util/TypeCheck\";\nimport { Clock } from \"./Clock\";\nimport { TransportEvent } from \"./TransportEvent\";\nimport { TransportRepeatEvent } from \"./TransportRepeatEvent\";\n\ninterface TransportOptions extends ToneWithContextOptions {\n\tbpm: BPM;\n\tswing: NormalRange;\n\tswingSubdivision: Subdivision;\n\ttimeSignature: number;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tppq: number;\n}\n\ntype TransportEventNames = \"start\" | \"stop\" | \"pause\" | \"loop\" | \"loopEnd\" | \"loopStart\";\n\ninterface SyncedSignalEvent {\n\tsignal: Signal;\n\tinitial: number;\n\tratio: Gain;\n}\n\ntype TransportCallback = (time: Seconds) => void;\n\n/**\n * Transport for timing musical events.\n * Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n * Transport timing events pass in the exact time of the scheduled event\n * in the argument of the callback function. Pass that time value to the object\n * you're scheduling. <br><br>\n * A single transport is created for you when the library is initialized.\n * <br><br>\n * The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n * called with the time of that event as the argument.\n *\n * @example\n * //repeated event every 8th note\n * Transport.scheduleRepeat(function(time){\n * \t//do something with the time\n * }, \"8n\");\n * @example\n * //schedule an event on the 16th measure\n * Transport.schedule(function(time){\n * \t//do something with the time\n * }, \"16:0:0\");\n */\nexport class Transport extends ToneWithContext<TransportOptions> implements Emitter<TransportEventNames> {\n\n\tname = \"Transport\";\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tLOOPING\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * \tIf the transport loops or not.\n\t */\n\tloop: boolean = false;\n\n\t/**\n\t * \tThe loop start position in ticks\n\t */\n\tprivate _loopStart: Ticks = 0;\n\n\t/**\n\t * \tThe loop end position in ticks\n\t */\n\tprivate _loopEnd: Ticks = 0;\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tCLOCK/TEMPO\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Pulses per quarter is the number of ticks per quarter note.\n\t */\n\tprivate _ppq: number;\n\n\t/**\n\t *  watches the main oscillator for timing ticks\n\t *  initially starts at 120bpm\n\t */\n\tprivate _clock: Clock<BPM>;\n\n\t/**\n\t * The Beats Per Minute of the Transport.\n\t * @example\n\t * Transport.bpm.value = 80;\n\t * //ramp the bpm to 120 over 10 seconds\n\t * Transport.bpm.rampTo(120, 10);\n\t */\n\tbpm: Param<BPM>;\n\n\t/**\n\t *  The time signature, or more accurately the numerator\n\t *  of the time signature over a denominator of 4.\n\t */\n\tprivate _timeSignature: number;\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tTIMELINE EVENTS\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  All the events in an object to keep track by ID\n\t */\n\tprivate _scheduledEvents = {};\n\n\t/**\n\t * \tThe scheduled events.\n\t */\n\tprivate _timeline: Timeline<TransportEvent> = new Timeline();\n\n\t/**\n\t *  Repeated events\n\t */\n\tprivate _repeatedEvents: IntervalTimeline = new IntervalTimeline();\n\n\t/**\n\t *  All of the synced Signals\n\t */\n\tprivate _syncedSignals: SyncedSignalEvent[] = [];\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tSWING\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The subdivision of the swing\n\t */\n\tprivate _swingTicks: Ticks;\n\n\t/**\n\t *  The swing amount\n\t */\n\tprivate _swingAmount: NormalRange = 0;\n\n\tconstructor(options?: Partial<TransportOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Transport.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Transport.getDefaults(), arguments);\n\n\t\t// CLOCK/TEMPO\n\t\tthis._ppq = options.ppq;\n\t\tthis._clock = new Clock({\n\t\t\tcallback : this._processTick.bind(this),\n\t\t\tcontext: this.context,\n\t\t\tfrequency : 0,\n\t\t\tunits: \"bpm\",\n\t\t});\n\t\tthis._bindClockEvents();\n\t\tthis.bpm = this._clock.frequency;\n\t\tthis._clock.frequency.multiplier = options.ppq;\n\t\tthis.bpm.value = options.bpm;\n\t\treadOnly(this, \"bpm\");\n\t\tthis._timeSignature = options.timeSignature;\n\n\t\t// SWING\n\t\tthis._swingTicks = options.ppq / 2; // 8n\n\t}\n\n\tstatic getDefaults(): TransportOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tbpm: 120,\n\t\t\tloopEnd: \"4m\" as Subdivision,\n\t\t\tloopStart: 0,\n\t\t\tppq: 192,\n\t\t\tswing: 0,\n\t\t\tswingSubdivision: \"8n\" as Subdivision,\n\t\t\ttimeSignature: 4,\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tTICKS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  called on every tick\n\t *  @param  tickTime clock relative tick time\n\t *  @private\n\t */\n\tprivate _processTick(tickTime: Seconds, ticks: Ticks): void {\n\t\t// handle swing\n\t\tif (this._swingAmount > 0 &&\n\t\t\tticks % this._ppq !== 0 && // not on a downbeat\n\t\t\tticks % (this._swingTicks * 2) !== 0) {\n\t\t\t// add some swing\n\t\t\tconst progress = (ticks % (this._swingTicks * 2)) / (this._swingTicks * 2);\n\t\t\tconst amount = Math.sin((progress) * Math.PI) * this._swingAmount;\n\t\t\ttickTime += new TicksClass(this.context, this._swingTicks * 2 / 3).toSeconds() * amount;\n\t\t}\n\t\t// do the loop test\n\t\tif (this.loop) {\n\t\t\tif (ticks >= this._loopEnd) {\n\t\t\t\tthis.emit(\"loopEnd\", tickTime);\n\t\t\t\tthis._clock.setTicksAtTime(this._loopStart, tickTime);\n\t\t\t\tticks = this._loopStart;\n\t\t\t\tthis.emit(\"loopStart\", tickTime, this._clock.getSecondsAtTime(tickTime));\n\t\t\t\tthis.emit(\"loop\", tickTime);\n\t\t\t}\n\t\t}\n\t\t// invoke the timeline events scheduled on this tick\n\t\tthis._timeline.forEachAtTime(ticks, event => event.invoke(tickTime));\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSCHEDULABLE EVENTS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Schedule an event along the timeline.\n\t * @param callback The callback to be invoked at the time.\n\t * @param time The time to invoke the callback at.\n\t * @return The id of the event which can be used for canceling the event.\n\t * @example\n\t * //trigger the callback when the Transport reaches the desired time\n\t * Transport.schedule(function(time){\n\t * \tenvelope.triggerAttack(time);\n\t * }, \"128i\");\n\t */\n\tschedule(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\ttime : new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Schedule a repeated event along the timeline. The event will fire\n\t * at the `interval` starting at the `startTime` and for the specified\n\t * `duration`.\n\t * @param  callback   The callback to invoke.\n\t * @param  interval   The duration between successive callbacks. Must be a positive number.\n\t * @param  startTime  When along the timeline the events should start being invoked.\n\t * @param  duration How long the event should repeat.\n\t * @return  The ID of the scheduled event. Use this to cancel the event.\n\t * @example\n\t * //a callback invoked every eighth note after the first measure\n\t * Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t */\n\tscheduleRepeat(\n\t\tcallback: TransportCallback,\n\t\tinterval: Time,\n\t\tstartTime?: TransportTime | TransportTimeClass,\n\t\tduration: Time = Infinity,\n\t): number {\n\t\tconst event = new TransportRepeatEvent(this, {\n\t\t\tcallback,\n\t\t\tduration : new TimeClass(this.context, duration).toTicks(),\n\t\t\tinterval: new TimeClass(this.context, interval).toTicks(),\n\t\t\ttime : new TransportTimeClass(this.context, startTime).toTicks(),\n\t\t});\n\t\t// kick it off if the Transport is started\n\t\t// @ts-ignore\n\t\treturn this._addEvent(event, this._repeatedEvents);\n\t}\n\n\t/**\n\t *  Schedule an event that will be removed after it is invoked.\n\t *  @param callback The callback to invoke once.\n\t *  @param time The time the callback should be invoked.\n\t *  @returns The ID of the scheduled event.\n\t */\n\tscheduleOnce(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\tonce : true,\n\t\t\ttime : new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Clear the passed in event id from the timeline\n\t * @param eventId The id of the event.\n\t */\n\tclear(eventId: number): this {\n\t\tif (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t\t\tconst item = this._scheduledEvents[eventId.toString()];\n\t\t\titem.timeline.remove(item.event);\n\t\t\titem.event.dispose();\n\t\t\tdelete this._scheduledEvents[eventId.toString()];\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an event to the correct timeline. Keep track of the\n\t * timeline it was added to.\n\t * @returns the event id which was just added\n\t */\n\tprivate _addEvent(event: TransportEvent, timeline: Timeline<TransportEvent>): number {\n\t\tthis._scheduledEvents[event.id.toString()] = {\n\t\t\tevent,\n\t\t\ttimeline,\n\t\t};\n\t\ttimeline.add(event);\n\t\treturn event.id;\n\t}\n\n\t/**\n\t * Remove scheduled events from the timeline after\n\t * the given time. Repeated events will be removed\n\t * if their startTime is after the given time\n\t * @param after Clear all events after this time.\n\t */\n\tcancel(after: TransportTime = 0): this {\n\t\tconst computedAfter = this.toTicks(after);\n\t\tthis._timeline.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\tthis._repeatedEvents.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSTART/STOP/PAUSE\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Bind start/stop/pause events from the clock and emit them.\n\t */\n\tprivate _bindClockEvents(): void {\n\t\tthis._clock.on(\"start\", (time, offset) => {\n\t\t\toffset = new TicksClass(this.context, offset).toSeconds();\n\t\t\tthis.emit(\"start\", time, offset);\n\t\t});\n\n\t\tthis._clock.on(\"stop\", (time) => {\n\t\t\tthis.emit(\"stop\", time);\n\t\t});\n\n\t\tthis._clock.on(\"pause\", (time) => {\n\t\t\tthis.emit(\"pause\", time);\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._clock.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the transport and all sources synced to the transport.\n\t * @param  time The time when the transport should start.\n\t * @param  offset The timeline offset to start the transport.\n\t * @example\n\t * //start the transport in one second starting at beginning of the 5th measure.\n\t * Transport.start(\"+1\", \"4:0:0\");\n\t */\n\tstart(time?: Time, offset?: TransportTime): this {\n\t\tlet offsetTicks;\n\t\tif (isDefined(offset)) {\n\t\t\toffsetTicks = this.toTicks(offset);\n\t\t}\n\t\t// start the clock\n\t\tthis._clock.start(time, offsetTicks);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the transport and all sources synced to the transport.\n\t * @param time The time when the transport should stop.\n\t * @example\n\t * Transport.stop();\n\t */\n\tstop(time?: Time): this {\n\t\tthis._clock.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the transport and all sources synced to the transport.\n\t */\n\tpause(time?: Time): this {\n\t\tthis._clock.pause(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Toggle the current state of the transport. If it is\n\t * started, it will stop it, otherwise it will start the Transport.\n\t * @param  time The time of the event\n\t */\n\ttoggle(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tif (this._clock.getStateAtTime(time) !== \"started\") {\n\t\t\tthis.start(time);\n\t\t} else {\n\t\t\tthis.stop(time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSETTERS/GETTERS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * The time signature as just the numerator over 4.\n\t * For example 4/4 would be just 4 and 6/8 would be 3.\n\t * @example\n\t * //common time\n\t * Transport.timeSignature = 4;\n\t * // 7/8\n\t * Transport.timeSignature = [7, 8];\n\t * //this will be reduced to a single number\n\t * Transport.timeSignature; //returns 3.5\n\t */\n\tget timeSignature(): TimeSignature {\n\t\treturn this._timeSignature;\n\t}\n\tset timeSignature(timeSig: TimeSignature) {\n\t\tif (isArray(timeSig)) {\n\t\t\ttimeSig = (timeSig[0] / timeSig[1]) * 4;\n\t\t}\n\t\tthis._timeSignature = timeSig;\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the starting position of the loop.\n\t */\n\tget loopStart(): Time {\n\t\treturn Time(this._loopStart, \"i\").toSeconds();\n\t}\n\tset loopStart(startPosition: Time) {\n\t\tthis._loopStart = this.toTicks(startPosition);\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the ending position of the loop.\n\t */\n\tget loopEnd(): Time {\n\t\treturn Time(this._loopEnd, \"i\").toSeconds();\n\t}\n\tset loopEnd(endPosition: Time) {\n\t\tthis._loopEnd = this.toTicks(endPosition);\n\t}\n\n\t/**\n\t * Set the loop start and stop at the same time.\n\t * @example\n\t * //loop over the first measure\n\t * Transport.setLoopPoints(0, \"1m\");\n\t * Transport.loop = true;\n\t */\n\tsetLoopPoints(startPosition: TransportTime, endPosition: TransportTime): this {\n\t\tthis.loopStart = startPosition;\n\t\tthis.loopEnd = endPosition;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The swing value. Between 0-1 where 1 equal to the note + half the subdivision.\n\t */\n\tget swing(): NormalRange {\n\t\treturn this._swingAmount;\n\t}\n\tset swing(amount: NormalRange) {\n\t\t// scale the values to a normal range\n\t\tthis._swingAmount = amount;\n\t}\n\n\t/**\n\t * Set the subdivision which the swing will be applied to.\n\t * The default value is an 8th note. Value must be less\n\t * than a quarter note.\n\t */\n\tget swingSubdivision(): Subdivision {\n\t\treturn new TicksClass(this.context, this._swingTicks).toNotation();\n\t}\n\tset swingSubdivision(subdivision: Subdivision) {\n\t\tthis._swingTicks = this.toTicks(subdivision);\n\t}\n\n\t/**\n\t *  The Transport's position in Bars:Beats:Sixteenths.\n\t *  Setting the value will jump to that position right away.\n\t */\n\tget position(): BarsBeatsSixteenths | Time {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\treturn new TicksClass(this.context, ticks).toBarsBeatsSixteenths();\n\t}\n\tset position(progress: Time) {\n\t\tconst ticks = this.toTicks(progress);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t *  The Transport's position in seconds\n\t *  Setting the value will jump to that position right away.\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._clock.seconds;\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.frequency.timeToTicks(s, now);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t *  The Transport's loop position as a normalized value. Always\n\t *  returns 0 if the transport if loop is not true.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this.loop) {\n\t\t\tconst now = this.now();\n\t\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\t\treturn (ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t *  The transports current tick position.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this._clock.ticks;\n\t}\n\tset ticks(t: Ticks) {\n\t\tif (this._clock.ticks !== t) {\n\t\t\tconst now = this.now();\n\t\t\t// stop everything synced to the transport\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis.emit(\"stop\", now);\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t\t// restart it with the new time\n\t\t\t\tthis.emit(\"start\", now, this.seconds);\n\t\t\t} else {\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\treturn Math.round(this._clock.getTicksAtTime(time));\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._clock.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t *  Pulses Per Quarter note. This is the smallest resolution\n\t *  the Transport timing supports. This should be set once\n\t *  on initialization and not set again. Changing this value\n\t *  after other objects have been created can cause problems.\n\t */\n\tget PPQ(): number {\n\t\treturn this._clock.frequency.multiplier;\n\t}\n\tset PPQ(ppq: number) {\n\t\tthis._clock.frequency.multiplier = ppq;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSYNCING\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Returns the time aligned to the next subdivision\n\t * of the Transport. If the Transport is not started,\n\t * it will return 0.\n\t * Note: this will not work precisely during tempo ramps.\n\t * @param  subdivision  The subdivision to quantize to\n\t * @return  The context time of the next subdivision.\n\t * @example\n\t * Transport.start(); //the transport must be started\n\t * Transport.nextSubdivision(\"4n\");\n\t */\n\tnextSubdivision(subdivision?: Time): Seconds {\n\t\tsubdivision = this.toTicks(subdivision);\n\t\tif (this.state !== \"started\") {\n\t\t\t// if the transport's not started, return 0\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tconst now = this.now();\n\t\t\t// the remainder of the current ticks and the subdivision\n\t\t\tconst transportPos = this.getTicksAtTime(now);\n\t\t\tconst remainingTicks = subdivision - transportPos % subdivision;\n\t\t\treturn this._clock.nextTickTime(remainingTicks, now);\n\t\t}\n\t}\n\n\t/**\n\t *  Attaches the signal to the tempo control signal so that\n\t *  any changes in the tempo will change the signal in the same\n\t *  ratio.\n\t *\n\t *  @param signal\n\t *  @param ratio Optionally pass in the ratio between the two signals.\n\t * \t\t\t\tOtherwise it will be computed based on their current values.\n\t */\n\tsyncSignal(signal: Signal<any>, ratio?: number): this {\n\t\tif (!ratio) {\n\t\t\t// get the sync ratio\n\t\t\tconst now = this.now();\n\t\t\tif (signal.getValueAtTime(now) !== 0) {\n\t\t\t\tconst bpm = this.bpm.getValueAtTime(now);\n\t\t\t\tconst computedFreq = 1 / (60 / bpm / this.PPQ);\n\t\t\t\tratio = signal.getValueAtTime(now) / computedFreq;\n\t\t\t} else {\n\t\t\t\tratio = 0;\n\t\t\t}\n\t\t}\n\t\tconst ratioSignal = new Gain(ratio);\n\t\t// @ts-ignore\n\t\tthis.bpm.connect(ratioSignal);\n\t\t// @ts-ignore\n\t\tratioSignal.connect(signal._param);\n\t\tthis._syncedSignals.push({\n\t\t\tinitial : signal.value,\n\t\t\tratio : ratioSignal,\n\t\t\tsignal,\n\t\t});\n\t\tsignal.value = 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsyncs a previously synced signal from the transport's control.\n\t *  See Transport.syncSignal.\n\t */\n\tunsyncSignal(signal: Signal<any>): this {\n\t\tfor (let i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t\t\tconst syncedSignal = this._syncedSignals[i];\n\t\t\tif (syncedSignal.signal === signal) {\n\t\t\t\tsyncedSignal.ratio.dispose();\n\t\t\t\tsyncedSignal.signal.value = syncedSignal.initial;\n\t\t\t\tthis._syncedSignals.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tthis._clock.dispose();\n\t\twritable(this, \"bpm\");\n\t\tthis._timeline.dispose();\n\t\tthis._repeatedEvents.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t///////////////////////////////////////////////////////////////////////\n\n\ton!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\tonce!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\toff!: (event: TransportEventNames, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Transport);\n\n///////////////////////////////////////////////////////////////////////////////\n// \tINITIALIZATION\n///////////////////////////////////////////////////////////////////////////////\n\nonContextInit(context => {\n\tcontext.transport = new Transport({ context });\n});\n","import { Volume } from \"../../component/channel/Volume\";\nimport { connectSeries } from \"../Connect\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { Param } from \"./Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface DestinationOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  A single master output which is connected to the\n *  AudioDestinationNode (aka your speakers).\n *  It provides useful conveniences such as the ability\n *  to set the volume and mute the entire application.\n *  It also gives you the ability to apply master effects to your application.\n *\n *  @example\n * //the audio will go from the oscillator to the speakers\n * oscillator.connect(Destination);\n * //a convenience for connecting to the master output is also provided:\n * oscillator.toMaster();\n * //the above two examples are equivalent.\n */\nexport class Destination extends ToneAudioNode<DestinationOptions> {\n\n\tname = \"Destination\";\n\n\tinput: Volume = new Volume({ context: this.context });\n\toutput: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The volume of the master output.\n\t */\n\tvolume: Param<Decibels> = this.input.volume;\n\t_internalChannels = [this.input, this.output];\n\n\tconstructor(options: Partial<DestinationOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Destination.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Destination.getDefaults(), arguments);\n\n\t\tconnectSeries(this.input, this.output, this.context.rawContext.destination);\n\n\t\tthis.volume.value = options.volume;\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): DestinationOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * Destination.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.input.mute;\n\t}\n\n\tset mute(mute: boolean) {\n\t\tthis.input.mute = mute;\n\t}\n\n\t/**\n\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t *  chained in the master effects chain.\n\t *  @param nodes All arguments will be connected in a row and the Master will be routed through it.\n\t *  @return  {Destination}  this\n\t *  @example\n\t * //some overall compression to keep the levels in check\n\t * var masterCompressor = new Tone.Compressor({\n\t * \t\"threshold\" : -6,\n\t * \t\"ratio\" : 3,\n\t * \t\"attack\" : 0.5,\n\t * \t\"release\" : 0.1\n\t * });\n\t * //give a little boost to the lows\n\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t * //route everything through the filter\n\t * //and compressor before going to the speakers\n\t * Destination.chain(lowBump, masterCompressor);\n\t */\n\tchain(...args: Array<AudioNode | ToneAudioNode>): this {\n\t\tthis.input.disconnect();\n\t\targs.unshift(this.input);\n\t\targs.push(this.output);\n\t\tconnectSeries(...args);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tINITIALIZATION\n///////////////////////////////////////////////////////////////////////////\n\nonContextInit(context => {\n\tcontext.destination = new Destination({ context });\n});\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\n\ninterface DrawEvent extends TimelineEvent {\n\tcallback: () => void;\n}\n\n/**\n * Draw is useful for synchronizing visuals and audio events.\n * Callbacks from Tone.Transport or any of the Tone.Event classes\n * always happen _before_ the scheduled time and are not synchronized\n * to the animation frame so they are not good for triggering tightly\n * synchronized visuals and sound. Draw makes it easy to schedule\n * callbacks using the AudioContext time and uses requestAnimationFrame.\n * @example\n * Tone.Transport.schedule(function(time){\n * \t//use the time argument to schedule a callback with Draw\n * \tDraw.schedule(function(){\n * \t\t//do drawing or DOM manipulation here\n * \t}, time)\n * }, \"+0.5\")\n */\nexport class Draw extends ToneWithContext<ToneWithContextOptions> {\n\n\tname = \"Draw\";\n\n\t/**\n\t *  The duration after which events are not invoked.\n\t */\n\texpiration: Seconds = 0.25;\n\n\t/**\n\t *  The amount of time before the scheduled time\n\t *  that the callback can be invoked. Default is\n\t *  half the time of an animation frame (0.008 seconds).\n\t */\n\tanticipation: Seconds = 0.008;\n\n\t/**\n\t *  All of the events.\n\t */\n\tprivate _events: Timeline<DrawEvent> = new Timeline();\n\n\t/**\n\t *  The draw loop\n\t */\n\tprivate _boundDrawLoop = this._drawLoop.bind(this);\n\n\t/**\n\t * The animation frame id\n\t */\n\tprivate _animationFrame: number = -1;\n\n\t/**\n\t *  Schedule a function at the given time to be invoked\n\t *  on the nearest animation frame.\n\t *  @param  callback  Callback is invoked at the given time.\n\t *  @param  time      The time relative to the AudioContext time to invoke the callback.\n\t */\n\tschedule(callback: () => void, time: Time): this {\n\t\tthis._events.add({\n\t\t\tcallback,\n\t\t\ttime : this.toSeconds(time),\n\t\t});\n\t\t// start the draw loop on the first event\n\t\tif (this._events.length === 1) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel events scheduled after the given time\n\t *  @param  after  Time after which scheduled events will be removed from the scheduling timeline.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._events.cancel(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The draw loop\n\t */\n\tprivate _drawLoop(): void {\n\t\tconst now = this.context.currentTime;\n\t\twhile (this._events.length && (this._events.peek() as DrawEvent).time - this.anticipation <= now) {\n\t\t\tconst event = this._events.shift();\n\t\t\tif (event && now - event.time <= this.expiration) {\n\t\t\t\tevent.callback();\n\t\t\t}\n\t\t}\n\t\tif (this._events.length > 0) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tthis._events.dispose();\n\t\tcancelAnimationFrame(this._animationFrame);\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../Connect\";\nimport { AutomationEvent, Param, ParamOptions } from \"../context/Param\";\nimport { getContext } from \"../Global\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isUndef } from \"../util/TypeCheck\";\n\ninterface TickAutomationEvent extends AutomationEvent {\n\tticks: number;\n}\n\ninterface TickSignalOptions extends ParamOptions {\n\tvalue: Hertz | BPM;\n\tmultiplier: number;\n}\n\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n *\n * @param value The initial value of the signal\n */\nexport class TickSignal<Type extends Hertz | BPM> extends Param<Type> {\n\n\tname = \"TickSignal\";\n\n\tprotected _events: Timeline<TickAutomationEvent> = new Timeline(Infinity);\n\n\tprivate _sig: ConstantSourceNode = this.context.createConstantSource();\n\n\tprotected _param = this._sig.offset;\n\n\tprivate _multiplier: number = 1;\n\n\tconstructor(options: Partial<TickSignalOptions>);\n\tconstructor(value?: number);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis._sig = this.context.createConstantSource();\n\t\tthis._sig.start(0);\n\t\tthis._param = this._sig.offset;\n\n\t\t// set the multiplier\n\t\tthis.multiplier = options.multiplier;\n\n\t\t// clear the ticks from the beginning\n\t\tthis.cancelScheduledValues(0);\n\t\t// set an initial event\n\t\tthis._events.add({\n\t\t\tticks: 0,\n\t\t\ttime : 0,\n\t\t\ttype : \"setValue\",\n\t\t\tvalue: this._fromType(options.value as Type),\n\t\t});\n\t\tthis.setValueAtTime(options.value as Type, 0);\n\t}\n\n\tstatic getDefaults(): TickSignalOptions {\n\t\treturn Object.assign(Param.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tparam: getContext().createConstantSource().offset,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tsetTargetAtTime(value: Type, time: Time, constant: number): this {\n\t\t// approximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tthis.setRampPoint(time);\n\t\tconst computedValue = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\tconst segments = Math.round(Math.max(1 / constant, 1));\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = constant * i + time;\n\t\t\tconst rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.setValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.linearRampToValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: Type, time: Time): this {\n\t\t// aproximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tconst computedVal = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\t// approx 10 segments per second\n\t\tconst segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n\t\tconst segmentDur = ((time - prevEvent.time) / segments);\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = segmentDur * i + prevEvent.time;\n\t\t\tconst rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tprivate _getTicksUntilEvent(event: TickAutomationEvent | null, time: number): Ticks {\n\t\tif (event === null) {\n\t\t\tevent = {\n\t\t\t\tticks : 0,\n\t\t\t\ttime : 0,\n\t\t\t\ttype: \"setValue\",\n\t\t\t\tvalue: 0,\n\t\t\t};\n\t\t} else if (isUndef(event.ticks)) {\n\t\t\tconst previousEvent = this._events.previousEvent(event);\n\t\t\tevent.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n\t\t}\n\t\tconst val0 = this._fromType(this.getValueAtTime(event.time));\n\t\tlet val1 = this._fromType(this.getValueAtTime(time));\n\t\t// if it's right on the line, take the previous value\n\t\tconst onTheLineEvent = this._events.get(time);\n\t\tif (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === \"setValue\") {\n\t\t\tval1 = this._fromType(this.getValueAtTime(time - this.sampleTime));\n\t\t}\n\t\treturn 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst event = this._events.get(computedTime);\n\t\treturn Math.max(this._getTicksUntilEvent(event, computedTime), 0);\n\t}\n\n\t/**\n\t * Return the elapsed time of the number of ticks from the given time\n\t * @param ticks The number of ticks to calculate\n\t * @param  time The time to get the next tick from\n\t * @return The duration of the number of ticks from the given time in seconds\n\t */\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst currentTick = this.getTicksAtTime(time);\n\t\treturn this.getTimeOfTick(currentTick + ticks) - computedTime;\n\t}\n\n\t/**\n\t * Given a tick, returns the time that tick occurs at.\n\t * @return The time that the tick occurs.\n\t */\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\tconst before = this._events.get(tick, \"ticks\");\n\t\tconst after = this._events.getAfter(tick, \"ticks\");\n\t\tif (before && before.ticks === tick) {\n\t\t\treturn before.time;\n\t\t} else if (before && after &&\n\t\t\tafter.type === \"linear\" &&\n\t\t\tbefore.value !== after.value) {\n\t\t\tconst val0 = this._fromType(this.getValueAtTime(before.time));\n\t\t\tconst val1 = this._fromType(this.getValueAtTime(after.time));\n\t\t\tconst delta = (val1 - val0) / (after.time - before.time);\n\t\t\tconst k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n\t\t\tconst sol1 = (-val0 + k) / delta;\n\t\t\tconst sol2 = (-val0 - k) / delta;\n\t\t\treturn (sol1 > 0 ? sol1 : sol2) + before.time;\n\t\t} else if (before) {\n\t\t\tif (before.value === 0) {\n\t\t\t\treturn Infinity;\n\t\t\t} else {\n\t\t\t\treturn before.time + (tick - before.ticks) / before.value;\n\t\t\t}\n\t\t} else {\n\t\t\treturn tick / this._initialValue;\n\t\t}\n\t}\n\n\t/**\n\t * Convert some number of ticks their the duration in seconds accounting\n\t * for any automation curves starting at the given time.\n\t * @param  ticks The number of ticks to convert to seconds.\n\t * @param  when  When along the automation timeline to convert the ticks.\n\t * @return The duration in seconds of the ticks.\n\t */\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this.getDurationOfTicks(ticks, when);\n\t}\n\n\t/**\n\t * The inverse of [ticksToTime](#tickstotime). Convert a duration in\n\t * seconds to the corresponding number of ticks accounting for any\n\t * automation curves starting at the given time.\n\t * @param  duration The time interval to convert to ticks.\n\t * @param  when When along the automation timeline to convert the ticks.\n\t * @return The duration in ticks.\n\t */\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tconst startTicks = this.getTicksAtTime(computedTime);\n\t\tconst endTicks = this.getTicksAtTime(computedTime + computedDuration);\n\t\treturn endTicks - startTicks;\n\t}\n\n\t/**\n\t * Convert from the type when the unit value is BPM\n\t */\n\tprotected _fromType(val: Type): number {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn 1 / (60 / val / this.multiplier);\n\t\t} else {\n\t\t\treturn super._fromType(val);\n\t\t}\n\t}\n\n\t/**\n\t * Special case of type conversion where the units === \"bpm\"\n\t */\n\tprotected _toType(val: number): Type {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn (val / this.multiplier) * 60 as Type;\n\t\t} else {\n\t\t\treturn super._toType(val);\n\t\t}\n\t}\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\t// get and reset the current value with the new multipler\n\t\t// might be necessary to clear all the previous values\n\t\tconst currentVal = this.value;\n\t\tthis._multiplier = m;\n\t\tthis.value = currentVal;\n\t}\n\n\t/**\n\t * Connect the output signal\n\t */\n\tconnect(dstNode, outputNumber = 0, inputNumber = 0): this {\n\t\tconnect(this._sig, dstNode, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline, StateTimelineEvent } from \"../util/StateTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { TickSignal } from \"./TickSignal\";\n\ninterface TickSourceOptions extends ToneWithContextOptions {\n\tfrequency: Frequency;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ninterface TickSourceOffsetEvent {\n\tticks: number;\n\ttime: number;\n\tseconds: number;\n}\n\n/**\n *  Uses [TickSignal](TickSignal) to track elapsed ticks with complex automation curves.\n *\n *  @param frequency The initial frequency that the signal ticks at\n */\nexport class TickSource<Type extends BPM | Hertz> extends ToneWithContext<TickSourceOptions> {\n\n\tname = \"TickSource\";\n\n\t/**\n\t *  The frequency the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<Type>;\n\n\t/**\n\t *  The state timeline\n\t */\n\tprivate _state: StateTimeline = new StateTimeline();\n\n\t/**\n\t * The offset values of the ticks\n\t */\n\tprivate _tickOffset: Timeline<TickSourceOffsetEvent> = new Timeline();\n\n\tconstructor(frequency?: Frequency);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<TickSourceOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis.frequency = new TickSignal({\n\t\t\tcontext: this.context,\n\t\t\tunits: options.units,\n\t\t\tvalue: this.toFrequency(options.frequency),\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\t// set the inital state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\t\t// add the first event\n\t\tthis.setTicksAtTime(0, 0);\n\t}\n\n\tstatic getDefaults(): TickSourceOptions {\n\t\treturn Object.assign({\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\",\n\t\t}, ToneWithContext.getDefaults()) as TickSourceOptions;\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  time    The time the clock should start\n\t *  @param offset The number of ticks to start the source at\n\t */\n\tstart(time: Time, offset?: Ticks): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (isDefined(offset)) {\n\t\t\t\tthis.setTicksAtTime(offset, computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the clock. Stopping the clock resets the tick counter to 0.\n\t * @param time The time when the clock should stop.\n\t */\n\tstop(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// cancel the previous stop\n\t\tif (this._state.getValueAtTime(computedTime) === \"stopped\") {\n\t\t\tconst event = this._state.get(computedTime);\n\t\t\tif (event && event.time > 0) {\n\t\t\t\tthis._tickOffset.cancel(event.time);\n\t\t\t\tthis._state.cancel(event.time);\n\t\t\t}\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis.setTicksAtTime(0, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param time The time when the clock should stop.\n\t */\n\tpause(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel start/stop/pause and setTickAtTime events scheduled after the given time.\n\t *  @param time When to clear the events after\n\t */\n\tcancel(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._state.cancel(time);\n\t\tthis._tickOffset.cancel(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the elapsed ticks at the given time\n\t * @param  time  When to get the tick value\n\t * @return The number of ticks\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", computedTime) as StateTimelineEvent;\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state: \"paused\", time: computedTime};\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedTicks = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, computedTime + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedTicks = offsetEvent.ticks;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedTicks;\n\t}\n\n\t/**\n\t *  The number of times the callback was invoked. Starts counting at 0\n\t *  and increments after the callback was invoked. Returns -1 when stopped.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this.getTicksAtTime(this.now());\n\t}\n\n\tset ticks(t: Ticks) {\n\t\tthis.setTicksAtTime(t, this.now());\n\t}\n\n\t/**\n\t *  The time since ticks=0 that the TickSource has been running. Accounts\n\t *  for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this.getSecondsAtTime(this.now());\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this.frequency.timeToTicks(s, now);\n\t\tthis.setTicksAtTime(ticks, now);\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\ttime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", time) as StateTimelineEvent;\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state : \"paused\", time };\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedSeconds = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, time + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedSeconds = offsetEvent.seconds;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedSeconds += e.time - periodStartTime;\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedSeconds;\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._tickOffset.cancel(time);\n\t\tthis._tickOffset.add({\n\t\t\tseconds : this.frequency.getDurationOfTicks(ticks, time),\n\t\t\tticks,\n\t\t\ttime,\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Returns the scheduled state at the given time.\n\t *  @param  time  The time to query.\n\t *  @example\n\t * source.start(\"+0.1\");\n\t * source.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tgetStateAtTime(time): PlaybackState {\n\t\ttime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the given tick. The second argument\n\t * is when to test before. Since ticks can be set (with setTicksAtTime)\n\t * there may be multiple times for a given tick value.\n\t * @param  ticks The tick number.\n\t * @param  before When to measure the tick value from.\n\t * @return The time of the tick\n\t */\n\tgetTimeOfTick(tick: Ticks, before = this.now()): Seconds {\n\t\tconst offset = this._tickOffset.get(before) as TickSourceOffsetEvent;\n\t\tconst event = this._state.get(before) as StateTimelineEvent;\n\t\tconst startTime = Math.max(offset.time, event.time);\n\t\tconst absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;\n\t\treturn this.frequency.getTimeOfTick(absoluteTicks);\n\t}\n\n\t/**\n\t *  Invoke the callback event at all scheduled ticks between the\n\t *  start time and the end time\n\t *  @param  startTime  The beginning of the search range\n\t *  @param  endTime    The end of the search range\n\t *  @param  callback   The callback to invoke with each tick\n\t */\n\tforEachTickBetween(startTime: Time, endTime: Time, callback: (when: Seconds, ticks: Ticks) => void): this {\n\t\tconst computedStartTime = this.toSeconds(startTime);\n\t\tconst computedEndTime = this.toSeconds(endTime);\n\t\t// only iterate through the sections where it is \"started\"\n\t\tlet lastStateEvent = this._state.get(computedStartTime);\n\t\tthis._state.forEachBetween(computedStartTime, computedEndTime, event => {\n\t\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && event.state !== \"started\") {\n\t\t\t\tthis.forEachTickBetween(Math.max(lastStateEvent.time, computedStartTime), event.time - this.sampleTime, callback);\n\t\t\t}\n\t\t\tlastStateEvent = event;\n\t\t});\n\n\t\tlet error = null;\n\n\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && this._state) {\n\t\t\tconst maxStartTime = Math.max(lastStateEvent.time, computedStartTime);\n\t\t\t// figure out the difference between the frequency ticks and the\n\t\t\tconst startTicks = this.frequency.getTicksAtTime(maxStartTime);\n\t\t\tconst ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);\n\t\t\tconst diff = startTicks - ticksAtStart;\n\t\t\tlet offset = diff % 1;\n\t\t\tif (offset !== 0) {\n\t\t\t\toffset = 1 - offset;\n\t\t\t}\n\t\t\tlet nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);\n\t\t\twhile (nextTickTime < computedEndTime && this._state) {\n\t\t\t\ttry {\n\t\t\t\t\tcallback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\terror = e;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this._state) {\n\t\t\t\t\tnextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tthis._state.dispose();\n\t\tthis._tickOffset.dispose();\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n","import { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\nexport interface DelayOptions extends ToneAudioNodeOptions {\n\tdelayTime: number;\n\tmaxDelay: number;\n}\n\n/**\n *  Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n *  @param delayTime The delay applied to the incoming signal.\n *  @param maxDelay The maximum delay time.\n */\nexport class Delay extends ToneAudioNode<DelayOptions> {\n\n\tname = \"Delay\";\n\n\t/**\n\t * The maximum delay time. This cannot be changed after\n\t * the value is passed into the constructor.\n\t */\n\treadonly maxDelay: Time;\n\n\t/**\n\t *  The amount of time the incoming signal is delayed.\n\t */\n\treadonly delayTime: Param<Time>;\n\n\t/**\n\t * Private reference to the internal DelayNode\n\t */\n\tprivate _delayNode: DelayNode;\n\treadonly input: DelayNode;\n\treadonly output: DelayNode;\n\n\t/**\n\t * The internal channels for channel routing changes\n\t */\n\tprotected _internalChannels: AudioNode[];\n\n\tconstructor(options?: Partial<DelayOptions>)\n\tconstructor(delayTime?: Time, maxDelay?: Time)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]));\n\n\t\tconst options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n\n\t\tthis.maxDelay = Math.max(this.toSeconds(options.maxDelay), this.toSeconds(options.delayTime));\n\n\t\tthis._delayNode = this.input = this.output = this.context.createDelay(options.maxDelay);\n\t\tthis._internalChannels = [this._delayNode];\n\n\t\tthis.delayTime = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._delayNode.delayTime,\n\t\t\tunits : \"time\",\n\t\t\tvalue : options.delayTime,\n\t\t});\n\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): DelayOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdelayTime : 0,\n\t\t\tmaxDelay: 1,\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.disconnect();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { Context } from \"../context/Context\";\n\n/**\n *  Wrapper around the OfflineAudioContext\n *  @param  channels  The number of channels to render\n *  @param  duration  The duration to render in samples\n *  @param sampleRate the sample rate to render at\n */\nexport class OfflineContext extends Context {\n\n\tname = \"OfflineContext\";\n\n\t/**\n\t *  A private reference to the duration\n\t */\n\tprivate readonly _duration: Seconds;\n\n\t/**\n\t *  An artificial clock source\n\t */\n\tprivate _currentTime: Seconds = 0;\n\n\t/**\n\t * Private reference to the OfflineAudioContext.\n\t */\n\tprotected _context!: OfflineAudioContext;\n\n\tconstructor(channels: number | OfflineAudioContext, duration: Seconds, sampleRate: number) {\n\n\t\tsuper({\n\t\t\tclockSource: \"offline\",\n\t\t\tcontext: channels instanceof OfflineAudioContext ?\n\t\t\t\tchannels : new OfflineAudioContext(channels, duration * sampleRate, sampleRate),\n\t\t\tlookAhead: 0,\n\t\t\tupdateInterval: channels instanceof OfflineAudioContext ?\n\t\t\t\t\t128 / channels.sampleRate : 128 / sampleRate,\n\t\t});\n\n\t\tthis._duration = channels instanceof OfflineAudioContext ?\n\t\t\tchannels.length / channels.sampleRate : duration;\n\t}\n\n\t/**\n\t *  Override the now method to point to the internal clock time\n\t */\n\tnow(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t * Same as this.now()\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t *  Render the output of the OfflineContext\n\t */\n\trender(): Promise<AudioBuffer> {\n\t\twhile (this._duration - this._currentTime >= 0) {\n\t\t\t// invoke all the callbacks on that time\n\t\t\tthis.emit(\"tick\");\n\t\t\t// increment the clock in 5ms chunks\n\t\t\tthis._currentTime += 0.005;\n\t\t}\n\n\t\treturn this._context.startRendering();\n\t}\n\n\t/**\n\t *  Close the context\n\t */\n\tclose(): Promise<OfflineContext> {\n\t\treturn Promise.resolve(this);\n\t}\n}\n","import { Tone } from \"../../core/Tone\";\nimport { Context } from \"../context/Context\";\nimport { getContext } from \"../Global\";\nimport { isDefined, isObject , isString, isUndef } from \"../util/TypeCheck\";\n\ninterface TypeBaseClassOptions {\n\tvalue?: TypeBaseClassValue;\n\tunits?: TypeBaseUnits;\n\tcontext: Context;\n}\n\ntype TypeBaseClassValue = string | number | TimeObject | TypeBaseClass<any>;\n\n/**\n * TypeBase is a flexible encoding of time which can be evaluated to and from a string.\n * @param  val    The time value as a number, string or object\n * @param  units  Unit values\n * @example\n * new TypeBase(4, \"n\")\n * new TypeBase(2, \"t\")\n * new TypeBase(\"2t\")\n * new TypeBase({\"2t\" : 2})\n * new TypeBase(\"2t\") + new TypeBase(\"4n\");\n */\nexport abstract class TypeBaseClass<Type extends Seconds | Hertz | Ticks> extends Tone {\n\n\treadonly context: Context;\n\n\t/**\n\t * The value of the units\n\t */\n\tprotected _val?: TypeBaseClassValue;\n\n\t/**\n\t * The units of time\n\t */\n\tprotected _units?: TypeBaseUnits;\n\n\t/**\n\t * All of the conversion expressions\n\t */\n\tprotected _expressions: TypeBaseExpression<Type>;\n\n\t/**\n\t * The default units\n\t */\n\treadonly defaultUnits: TypeBaseUnits = \"s\";\n\n\tconstructor(context: Context, value?: TypeBaseClassValue, units?: TypeBaseUnits) {\n\t\tsuper();\n\n\t\tthis._val = value;\n\t\tthis._units = units;\n\t\tthis.context = context;\n\n\t\tthis._expressions = this._getExpressions(this.defaultUnits);\n\n\t\tif (value instanceof TypeBaseClass) {\n\t\t\tthis.fromType(value);\n\t\t}\n\t}\n\n\tstatic getDefaults(): TypeBaseClassOptions {\n\t\treturn {\n\t\t\tcontext : getContext(),\n\t\t};\n\t}\n\n\t/**\n\t * All of the time encoding expressions\n\t */\n\tprotected _getExpressions(defaultUnit: TypeBaseUnits): TypeBaseExpression<Type> {\n\t\treturn {\n\t\t\thz: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._frequencyToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)hz$/i,\n\t\t\t},\n\t\t\ti: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._ticksToUnits(parseInt(value, 10));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)i$/i,\n\t\t\t},\n\t\t\tm: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)m$/i,\n\t\t\t},\n\t\t\tn: {\n\t\t\t\tmethod: (value, dot) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\tconst scalar = dot === \".\" ? 1.5 : 1;\n\t\t\t\t\tif (numericValue === 1) {\n\t\t\t\t\t\treturn this._beatsToUnits(this._getTimeSignature()) * scalar as Type;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this._beatsToUnits(4 / numericValue) * scalar as Type;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)n(\\.?)$/i,\n\t\t\t},\n\t\t\tnumber: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._expressions[defaultUnit].method.call(this, value);\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)$/,\n\t\t\t},\n\t\t\ts: {\n\t\t\t\tmethod: (value): Type => {\n\t\t\t\t\treturn this._secondsToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)s$/,\n\t\t\t},\n\t\t\tsamples: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn parseInt(value, 10) / this.context.sampleRate as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)samples$/,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\treturn this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)t$/i,\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tmethod: (m, q, s) => {\n\t\t\t\t\tlet total = 0;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n\t\t\t},\n\t\t};\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tVALUE OF\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Evaluate the time value. Returns the time in seconds.\n\t */\n\tvalueOf(): Type {\n\t\tif (isUndef(this._val)) {\n\t\t\treturn this._noArg();\n\t\t} else if (isString(this._val) && isUndef(this._units)) {\n\t\t\tfor (const units in this._expressions) {\n\t\t\t\tif (this._expressions[units].regexp.test(this._val.trim())) {\n\t\t\t\t\tthis._units = units as TypeBaseUnits;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isObject(this._val)) {\n\t\t\tlet total = 0;\n\t\t\tfor (const typeName in this._val) {\n\t\t\t\tif (isDefined(this._val[typeName])) {\n\t\t\t\t\tconst quantity = this._val[typeName];\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst time = (new this.constructor(this.context, typeName)).valueOf() * quantity;\n\t\t\t\t\ttotal += time;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn total as Type;\n\t\t}\n\t\tif (isDefined(this._units)) {\n\t\t\tconst expr = this._expressions[this._units];\n\t\t\tconst matching = this._val.toString().trim().match(expr.regexp);\n\t\t\tif (matching) {\n\t\t\t\treturn expr.method.apply(this, matching.slice(1));\n\t\t\t} else {\n\t\t\t\treturn expr.method.call(this, this._val);\n\t\t\t}\n\t\t} else if (isString(this._val)) {\n\t\t\treturn parseFloat(this._val) as Type;\n\t\t} else {\n\t\t\treturn this._val as Type;\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn 1 / freq as Type;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn (60 / this._getBpm()) * beats as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn seconds as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t *  @private\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn (ticks * (this._beatsToUnits(1)) / this._getPPQ()) as Type;\n\t}\n\n\t/**\n\t *  With no arguments, return 'now'\n\t */\n\tprotected _noArg(): Type {\n\t\treturn this._now();\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tTEMPO CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Return the bpm\n\t */\n\tprotected _getBpm(): BPM {\n\t\treturn this.context.transport.bpm.value;\n\t}\n\n\t/**\n\t * Return the timeSignature\n\t */\n\tprotected _getTimeSignature(): number {\n\t\treturn this.context.transport.timeSignature as number;\n\t}\n\n\t/**\n\t * Return the PPQ or 192 if Transport is not available\n\t */\n\tprotected _getPPQ(): number {\n\t\treturn this.context.transport.PPQ;\n\t}\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected abstract _now(): Type;\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tCONVERSION INTERFACE\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Coerce a time type into this units type.\n\t * @param type Any time type units\n\t */\n\tfromType(type: TypeBaseClass<any>): void {\n\t\tthis._units = undefined;\n\t\tswitch (this.defaultUnits) {\n\t\t\tcase \"s\":\n\t\t\t\tthis._val = type.toSeconds();\n\t\t\t\tbreak;\n\t\t\tcase \"i\":\n\t\t\t\tthis._val = type.toTicks();\n\t\t\t\tbreak;\n\t\t\tcase \"hz\":\n\t\t\t\tthis._val = type.toFrequency();\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t *  Return the value in seconds\n\t */\n\tabstract toSeconds(): Seconds;\n\n\t/**\n\t *  Return the value as a Midi note\n\t */\n\tabstract toMidi(): MidiNote;\n\n\t/**\n\t *  Return the value in hertz\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn 1 / this.toSeconds();\n\t}\n\n\t/**\n\t *  Return the time in samples\n\t */\n\ttoSamples(): Samples {\n\t\treturn this.toSeconds() * this.context.sampleRate;\n\t}\n\n\t/**\n\t *  Return the time in milliseconds.\n\t */\n\ttoMilliseconds(): Milliseconds {\n\t\treturn this.toSeconds() * 1000;\n\t}\n\n\t/**\n\t * Convert the value into ticks\n\t */\n\ttoTicks(): Ticks {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\treturn this;\n\t}\n}\n/**\n * The units that the TypeBase can accept. extended by other classes\n */\nexport type TypeBaseUnits = \"s\" | \"n\" | \"t\" | \"m\" | \"i\" | \"hz\" | \"tr\" | \"samples\" | \"number\";\n\n/**\n * The format of the type conversion expressions\n */\nexport type TypeBaseExpression<T> = {\n\t[key in TypeBaseUnits]: {\n\t\tregexp: RegExp;\n\t\tmethod: (value: string, ...args: string[]) => T;\n\t};\n};\n","export { Gain } from \"./context/Gain\";\nexport { Context } from \"./context/Context\";\nexport { OfflineContext } from \"./context/OfflineContext\";\nexport { ToneAudioBuffer } from \"./context/ToneAudioBuffer\";\nexport { Delay } from \"./context/Delay\";\nexport { Clock } from \"./clock/Clock\";\nexport { Frequency } from \"./type/Frequency\";\nexport { Time } from \"./type/Time\";\nexport { Ticks } from \"./type/Ticks\";\nexport { TransportTime } from \"./type/TransportTime\";\nexport { Draw } from \"./util/Draw\";\nexport { StateTimeline } from \"./util/StateTimeline\";\nexport { IntervalTimeline } from \"./util/IntervalTimeline\";\nexport { Timeline } from \"./util/Timeline\";\nexport { Emitter } from \"./util/Emitter\";\nexport { Tone } from \"./Tone\";\nexport { Destination } from \"./context/Destination\";\nexport { Transport } from \"./clock/Transport\";\n","/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext: BaseAudioContext;\n\n// @ts-ignore\nglobalContext = window.TONE_AUDIO_CONTEXT;\n\n/**\n * Returns the default system-wide AudioContext\n */\nexport function getAudioContext(): BaseAudioContext {\n\tif (!globalContext) {\n\t\tsetAudioContext(new AudioContext());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n */\nexport function setAudioContext(context: BaseAudioContext): void {\n\tglobalContext = context;\n\t// @ts-ignore\n\twindow.TONE_AUDIO_CONTEXT = globalContext;\n}\n","\nexport type TickerClockSource = \"worker\" | \"timeout\" | \"offline\";\n\n/**\n * A class which provides a reliable callback using either\n * a Web Worker, or if that isn't supported, falls back to setTimeout.\n */\nexport class Ticker {\n\n\t/**\n\t * Either \"worker\" or \"timeout\" or \"offline\"\n\t */\n\tprivate _type: TickerClockSource;\n\n\t/**\n\t * The update interval of the worker\n\t */\n\tprivate _updateInterval: Seconds;\n\n\t/**\n\t * The callback to invoke at regular intervals\n\t */\n\tprivate _callback: () => void;\n\n\t/**\n\t * track the callback interval\n\t */\n\tprivate _timeout!: number;\n\n\t/**\n\t * private reference to the worker\n\t */\n\tprivate _worker!: Worker;\n\n\tconstructor(callback: () => void, type: TickerClockSource, updateInterval: Seconds) {\n\n\t\tthis._callback = callback;\n\t\tthis._type = type;\n\t\tthis._updateInterval = updateInterval;\n\n\t\t// create the clock source for the first time\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t *  Generate a web worker\n\t */\n\tprivate _createWorker(): void {\n\n\t\tconst blob = new Blob([\n\t\t\t// the initial timeout time\n\t\t\t`var timeoutTime =  ${(this._updateInterval * 1000).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();`,\n\t\t]);\n\t\tconst blobUrl = window.URL.createObjectURL(blob);\n\t\tconst worker = new Worker(blobUrl);\n\n\t\tworker.onmessage = this._callback.bind(this);\n\n\t\tthis._worker = worker;\n\t}\n\n\t/**\n\t * Create a timeout loop\n\t */\n\tprivate _createTimeout(): void {\n\t\tthis._timeout = window.setTimeout(()  => {\n\t\t\tthis._createTimeout();\n\t\t\tthis._callback();\n\t\t}, this._updateInterval * 1000);\n\t}\n\n\t/**\n\t * Create the clock source.\n\t */\n\tprivate _createClock(): void {\n\t\tif (this._type === \"worker\") {\n\t\t\ttry {\n\t\t\t\tthis._createWorker();\n\t\t\t} catch (e) {\n\t\t\t\t// workers not supported, fallback to timeout\n\t\t\t\tthis._type = \"timeout\";\n\t\t\t\tthis._createClock();\n\t\t\t}\n\t\t} else if (this._type === \"timeout\") {\n\t\t\tthis._createTimeout();\n\t\t}\n\t}\n\n\t/**\n\t * Clean up the current clock source\n\t */\n\tprivate _disposeClock(): void {\n\t\tif (this._timeout) {\n\t\t\tclearTimeout(this._timeout);\n\t\t\tthis._timeout = 0;\n\t\t}\n\t\tif (this._worker) {\n\t\t\tthis._worker.terminate();\n\t\t\tthis._worker.onmessage = null;\n\t\t}\n\t}\n\n\t/**\n\t * The rate in seconds the ticker will update\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._updateInterval = Math.max(interval, 128 / 44100);\n\t\tif (this._type === \"worker\") {\n\t\t\tthis._worker.postMessage(Math.max(interval * 1000, 1));\n\t\t}\n\t}\n\n\t/**\n\t * The type of the ticker, either a worker or a timeout\n\t */\n\tget type(): TickerClockSource {\n\t\treturn this._type;\n\t}\n\tset type(type: TickerClockSource) {\n\t\tthis._disposeClock();\n\t\tthis._type = type;\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): void {\n\t\tthis._disposeClock();\n\t}\n}\n","export { getContext, setContext } from \"./core/Global\";\nexport * from \"./core/index\";\nexport * from \"./source/index\";\n\nimport { getContext } from \"./core/Global\";\n/**\n *  The current audio context time\n */\nexport function now(): Seconds {\n\treturn getContext().now();\n}\n"],"sourceRoot":""}