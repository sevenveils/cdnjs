{"version":3,"sources":["webpack://Tone/webpack/universalModuleDefinition","webpack://Tone/webpack/bootstrap","webpack://Tone/./Tone/core/util/Defaults.ts","webpack://Tone/./Tone/core/util/Interface.ts","webpack://Tone/./Tone/core/util/TypeCheck.ts","webpack://Tone/./Tone/core/context/ToneAudioNode.ts","webpack://Tone/./Tone/core/context/Gain.ts","webpack://Tone/./Tone/signal/Signal.ts","webpack://Tone/./Tone/source/Source.ts","webpack://Tone/./Tone/core/Global.ts","webpack://Tone/./Tone/core/util/Timeline.ts","webpack://Tone/./Tone/core/Tone.ts","webpack://Tone/./Tone/source/oscillator/Oscillator.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffer.ts","webpack://Tone/./Tone/core/context/ToneWithContext.ts","webpack://Tone/./Tone/core/type/Ticks.ts","webpack://Tone/./Tone/core/util/StateTimeline.ts","webpack://Tone/./Tone/core/context/Param.ts","webpack://Tone/./Tone/core/type/TransportTime.ts","webpack://Tone/./Tone/core/type/Time.ts","webpack://Tone/./Tone/core/type/Conversions.ts","webpack://Tone/./Tone/source/buffer/BufferSource.ts","webpack://Tone/./Tone/component/channel/Volume.ts","webpack://Tone/./Tone/core/Connect.ts","webpack://Tone/./Tone/core/type/Frequency.ts","webpack://Tone/./Tone/core/util/Emitter.ts","webpack://Tone/./Tone/event/ToneEvent.ts","webpack://Tone/./Tone/component/envelope/Envelope.ts","webpack://Tone/./Tone/source/oscillator/PulseOscillator.ts","webpack://Tone/./Tone/signal/Multiply.ts","webpack://Tone/./Tone/signal/WaveShaper.ts","webpack://Tone/./Tone/signal/SignalOperator.ts","webpack://Tone/./Tone/core/context/ContextInitialization.ts","webpack://Tone/./Tone/core/context/Context.ts","webpack://Tone/./Tone/component/filter/Filter.ts","webpack://Tone/./Tone/component/channel/CrossFade.ts","webpack://Tone/./Tone/effect/Effect.ts","webpack://Tone/./Tone/event/Part.ts","webpack://Tone/./Tone/instrument/Instrument.ts","webpack://Tone/./Tone/component/envelope/AmplitudeEnvelope.ts","webpack://Tone/./Tone/source/oscillator/OmniOscillator.ts","webpack://Tone/./Tone/source/oscillator/PWMOscillator.ts","webpack://Tone/./Tone/source/oscillator/FatOscillator.ts","webpack://Tone/./Tone/source/oscillator/FMOscillator.ts","webpack://Tone/./Tone/source/oscillator/AMOscillator.ts","webpack://Tone/./Tone/source/oscillator/OscillatorNode.ts","webpack://Tone/./Tone/source/OneShotSource.ts","webpack://Tone/./Tone/core/clock/TransportEvent.ts","webpack://Tone/./Tone/core/clock/Transport.ts","webpack://Tone/./Tone/core/util/IntervalTimeline.ts","webpack://Tone/./Tone/core/clock/Clock.ts","webpack://Tone/./Tone/core/context/Delay.ts","webpack://Tone/./Tone/core/context/OfflineContext.ts","webpack://Tone/./Tone/version.ts","webpack://Tone/./Tone/component/channel/MultibandSplit.ts","webpack://Tone/./Tone/component/filter/EQ3.ts","webpack://Tone/./Tone/component/channel/Merge.ts","webpack://Tone/./Tone/component/analysis/Analyser.ts","webpack://Tone/./Tone/component/index.ts","webpack://Tone/./Tone/effect/Convolver.ts","webpack://Tone/./Tone/signal/GainToAudio.ts","webpack://Tone/./Tone/effect/FeedbackEffect.ts","webpack://Tone/./Tone/effect/FeedbackDelay.ts","webpack://Tone/./Tone/effect/index.ts","webpack://Tone/./Tone/event/Sequence.ts","webpack://Tone/./Tone/event/index.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffers.ts","webpack://Tone/./Tone/instrument/Sampler.ts","webpack://Tone/./Tone/instrument/Monophonic.ts","webpack://Tone/./Tone/instrument/Synth.ts","webpack://Tone/./Tone/instrument/index.ts","webpack://Tone/./Tone/source/buffer/Player.ts","webpack://Tone/./Tone/signal/AudioToGain.ts","webpack://Tone/./Tone/source/Noise.ts","webpack://Tone/./Tone/source/index.ts","webpack://Tone/./Tone/core/clock/TransportRepeatEvent.ts","webpack://Tone/./Tone/core/context/Destination.ts","webpack://Tone/./Tone/core/util/Draw.ts","webpack://Tone/./Tone/core/clock/TickSignal.ts","webpack://Tone/./Tone/core/clock/TickSource.ts","webpack://Tone/./Tone/core/context/Offline.ts","webpack://Tone/./Tone/core/type/TimeBase.ts","webpack://Tone/./Tone/core/index.ts","webpack://Tone/./Tone/core/context/AudioContext.ts","webpack://Tone/(webpack)/buildin/global.js","webpack://Tone/./Tone/core/clock/Ticker.ts","webpack://Tone/./Tone/index.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","TypeCheck_1","deepMerge","target","sources","_i","arguments","length","source","shift","isObject","key","assign","_a","_b","apply","concat","optionsFromArguments","defaults","argsArray","keys","objKey","opts","args","Array","from","Reflect","has","some","splice","indexOf","isDefined","getDefaultsFromInstance","instance","constructor","getDefaults","defaultArg","given","fallback","isUndef","omitFromObject","obj","omit","forEach","prop","readOnly","isArray","str","writable","noOp","arg","isString","isFunction","isNumber","toString","isBoolean","isNote","test","ToneWithContext_1","ToneAudioNode","_super","options","_this","numberOfInputs","numberOfOutputs","__extends","ToneWithContext","channelCount","channelCountMode","channelInterpretation","createInsOuts","_setChannelProperties","_internalChannels","node","_getChannelProperties","props","connect","destination","outputNum","inputNum","toDestination","context","toMaster","console","warn","disconnect","chain","nodes","connectSeries","fan","dispose","input","AudioNode","output","first","reduce","prev","current","srcNode","dstNode","outputNumber","inputNumber","AudioParam","Param_1","Defaults_1","Interface_1","ToneAudioNode_1","Gain","_gainNode","createGain","gain","Param","convert","param","units","ToneAudioNode_2","Signal","override","_constantSource","createConstantSource","start","_param","offset","connectSignal","setValueAtTime","time","getValueAtTime","setRampPoint","linearRampToValueAtTime","exponentialRampToValueAtTime","exponentialRampTo","rampTime","startTime","linearRampTo","targetRampTo","exponentialApproachValueAtTime","setTargetAtTime","timeConstant","setValueCurveAtTime","values","duration","scaling","cancelScheduledValues","cancelAndHoldAtTime","rampTo","overridden","maxValue","minValue","signal","Volume_1","StateTimeline_1","Source","_volume","Volume","undefined","volume","_state","StateTimeline","_synced","_scheduled","_syncedStart","_syncedStop","memory","mute","transport","state","seconds","now","toSeconds","cancel","setStateAtTime","restart","event_1","sched","schedule","t","_start","push","stop","_stop","bind","sync","stateEvent","startOffset","getSecondsAtTime","Math","max","sampleTime","on","unsync","off","id","clear","globalContext","version_1","Context_1","setContext","initialize","window","TONE_CONTEXT","getContext","Context","resume","TONE_SILENCE_LOGGING","prefix","version","printString","log","Tone_1","Timeline","_timeline","Infinity","add","event","assert","valueOf","index","_search","diff","remove","peek","getAfter","getBefore","len","after","slice","cancelBefore","previousEvent","beginning","end","midPoint","floor","nextEvent","_iterate","callback","lowerBound","upperBound","forEachBefore","forEachAfter","forEachBetween","endTime","forEachFrom","forEachAtTime","Tone","debug","_wasDisposed","global","TONE_DEBUG_CLASS","unshift","statement","error","Error","Signal_1","Source_1","OscillatorNode_1","Oscillator","_oscillator","frequency","detune","_partials","partials","_partialCount","partialCount","_phase","phase","_type","type","baseType","oscillator","ToneOscillatorNode","_wave","setPeriodicWave","cancelStop","syncFrequency","syncSignal","unsyncFrequency","unsyncSignal","isBasicType","_getRealImaginary","real","imag","periodicWave","createPeriodicWave","replace","partial","exec","periodicWaveSize","fftSize","Float32Array","parseInt","piFactor","PI","b","TypeError","sin","cos","_inverseFFT","sum","_getInitialValue","twoPi","Global_1","ToneAudioBuffer","onload","reverse","url","AudioBuffer","set","load","catch","onerror","_buffer","sampleRate","buffer","loaded","_reversed","_reverse","promise","downloads","audioBuffer","sent","e_1","fromArray","array","isMultidimensional","channels","createBuffer","multiChannelArray","copyToChannel","toMono","chanNum","toArray","outputArray","numChannels_1","numberOfChannels","channel","channelArray","map","sample","getChannelData","ret","startSamples","endSamples","retBuffer","copyFromChannel","subarray","rev","fromUrl","matches","match","extensions","split","extension","extensions_1","ext","supportsType","fetch","baseUrl","response","ok","arrayBuffer","decodeAudioData","document","createElement","canPlayType","Frequency_1","Time_1","TransportTime_1","defaultContext","currentTime","lookAhead","immediate","TimeClass","toFrequency","freq","FrequencyClass","toTicks","TransportTimeClass","attribute","member","TicksClass","defaultUnits","_now","ticks","_beatsToUnits","beats","_getPPQ","_secondsToUnits","_getBpm","_ticksToUnits","Ticks","initial","_initial","getLastState","getNextState","event_2","Conversions_1","Timeline_1","_minOutput","_events","_initialValue","_fromType","_is","val","dbToGain","min","_toType","gainToDb","computedTime","numericValue","isFinite","JSON","stringify","before","beforeValue","previous","_linearInterpolate","_exponentialInterpolate","previousVal","constant","_exponentialApproach","currentVal","startingValue","segTime","valueAtTime","t0","v0","v1","exp","t1","pow","TransportTime","_getExpressions","method","capture","regexp","quantize","quantTo","nextSubdivision","subdiv","percent","subdivision","round","toNotation","testNotations","power","closest","closestSeconds","notation","notationSeconds","abs","toBarsBeatsSixteenths","quarterTime","quarters","parseFloat","toFixed","measures","_getTimeSignature","sixteenths","sixteenthString","join","toMidi","ftom","TimeBaseClass","Time","equalPowerScale","db","LN10","intervalToFrequencyRatio","interval","A4","getA4","setA4","log2","mtof","midi","Connect_1","ToneAudioBuffer_1","OneShotSource_1","ToneBufferSource","_source","createBufferSource","_sourceStarted","_sourceStopped","onended","_stopSource","playbackRate","loop","loopStart","loopEnd","OneShotSource","_fadeIn","_fadeOut","_curve","_startGain","computedDur","_onended","Gain_1","_unmutedVolume","Conversions_2","note","pitch","octave","noteNumber","noteToScaleIndex","toLowerCase","tr","q","total","transpose","harmonize","intervals","toNote","scaleIndexToNote","_noArg","_frequencyToUnits","cbb","cb","c#","cx","dbb","d#","dx","ebb","eb","e","e#","ex","fbb","fb","f","f#","fx","gbb","gb","g","g#","gx","abb","ab","a","a#","ax","bbb","bb","b#","bx","Frequency","Emitter","eventName","once","boundCallback","eventList","emit","mixin","constr","getOwnPropertyDescriptor","Ticks_1","ToneEvent","_startOffset","_loop","_loopStart","_loopEnd","_playbackRate","_probability","probability","_humanize","humanize","_rescheduleEvents","startTick","_getLoopDuration","scheduleRepeat","_tick","prob","variation","reschedulTime","getTicksAtTime","random","rate","lastEvent","loopDuration","Envelope","_sig","attack","decay","sustain","release","attackCurve","releaseCurve","decayCurve","_getCurve","curve","direction","curveName","EnvelopeCurves","_setCurve","curveDef","_attackCurve","_releaseCurve","_decayCurve","triggerAttack","velocity","currentValue","decayValue","decayStart","triggerRelease","triggerAttackRelease","k","cosineCurve","rippleCurve","curveLen","sineWave","stairsCurve","ceil","sineCurve","bounceCurve","invertCurve","out","j","bounce","In","Out","cosine","exponential","linear","ripple","sine","step","WaveShaper_1","Oscillator_1","PulseOscillator","width","_widthGate","_sawtooth","_thresh","WaveShaper","mapping","Multiply","_mult","factor","_shaper","createWaveShaper","setMap","normalized","oversample","oversampling","isOverSampleType","includes","SignalOperator","notifyNewContext","onContextInit","initializeContext","ctx","notifyCloseContext","onContextClose","closeContext","Ticker_1","Emitter_1","AudioContext_1","ContextInitialization_1","_constants","Map","_timeouts","_timeoutIds","_initialized","_context","_latencyHint","latencyHint","_ticker","Ticker","clockSource","updateInterval","_timeoutLoop","addEventListener","getAudioContext","createAnalyser","createOscillator","createBiquadFilter","createChannelMerger","createChannelSplitter","createConvolver","createDelay","maxDelayTime","createDynamicsCompressor","createIIRFilter","feedforward","feedback","createPanner","constraints","createStereoPanner","audioData","listener","_transport","_destination","hint","lookAheadValue","AudioContext","Promise","resolve","close","getConstant","arr","firstEvent","setTimeout","fn","timeout","clearTimeout","Filter","_filters","Q","rolloff","filter","_rolloff","rolloffNum","possibilities","cascadingCount","count","getFrequencyResponse","totalResponse","freqValues","magValues","phaseValues","filterClone","GainToAudio_1","CrossFade","_panner","_split","_g2a","GainToAudio","fade","pan","CrossFade_1","Effect","_dryWet","wet","effectSend","effectReturn","connectEffect","effect","ToneEvent_1","Part","Set","events","computedOffset_1","_forEach","_startNote","at","timeInTicks","tickTime","iterator","result","next","done","_restartEvent","delete","_setAll","attr","_testLoopBoundries","size","Instrument","_scheduledEvents","_original_triggerAttack","_original_triggerRelease","_syncMethod","timePosition","originalMethod","computedDuration","AmplitudeEnvelope","AMOscillator_1","FatOscillator_1","FMOscillator_1","PulseOscillator_1","PWMOscillator_1","OmniOscillatorSourceMap","am","AMOscillator","fat","FatOscillator","fm","FMOscillator","pulse","pwm","PWMOscillator","OmniOscillator","_sourceType","substr","_createNewOscillator","_getOscType","oscType","oscConstructor","oldOsc_1","blockTime","sType","osc","sourceType","spread","modulationType","mType","modulationIndex","harmonicity","modulationFrequency","Multiply_1","_pulse","_modulator","_scale","_oscillators","_spread","start_1","step_1","_carrier","_modulationNode","AudioToGain_1","_modulationScale","AudioToGain","_startTime","_stopTime","_timeout","getStateAtTime","fadeIn","fadeOut","fadeInTime","_stopGain","fadeOutTime","additionalTail","TransportEvent","_eventId","_once","invoke","IntervalTimeline_1","Clock_1","TransportEvent_1","TransportRepeatEvent_1","Transport","_repeatedEvents","IntervalTimeline","_syncedSignals","_swingAmount","_ppq","ppq","_clock","Clock","_processTick","_bindClockEvents","bpm","multiplier","_timeSignature","timeSignature","_swingTicks","swing","swingSubdivision","progress","amount","setTicksAtTime","_addEvent","TransportRepeatEvent","scheduleOnce","eventId","item","timeline","computedAfter","offsetTicks","pause","toggle","timeSig","startPosition","endPosition","setLoopPoints","timeToTicks","remainingTicks","nextTickTime","ratio","computedFreq","PPQ","ratioSignal","syncedSignal","_root","_length","IntervalNode","insert","updateHeight","updateMax","_rebalance","parent","results","search","results_1","_removeNode","_setRoot","_replaceNodeInParent","replacement","isLeftChild","left","right","temp","getBalance","_rotateLeft","pivotNode","_rotateRight","balance","low","allNodes_1","traverse","searchAfter","high","_left","_right","height","point","TickSource_1","_lastUpdate","_boundLoop","_tickSource","TickSource","when","currentTick","getTimeOfTick","forEachTickBetween","Delay","maxDelayInSeconds","maxDelay","delayTime","_delayNode","OfflineContext","OfflineAudioContext","_currentTime","_duration","render","startRendering","Filter_1","MultibandSplit","_lowMidFilter","mid","lowFrequency","highFrequency","MultibandSplit_1","EQ3","_multibandSplit","_lowGain","_midGain","_highGain","Merge","_merger","Analyser","_analyser","smoothing","getValue","getFloatFrequencyData","getFloatTimeDomainData","frequencyBinCount","smoothingTimeConstant","Analyser_1","Merge_1","AmplitudeEnvelope_1","Envelope_1","EQ3_1","Effect_1","Convolver","_convolver","normalize","buff","norm","SignalOperator_1","_norm","x","FeedbackEffect","_feedbackGain","Delay_1","FeedbackEffect_1","FeedbackDelay","FeedbackDelay_1","Convolver_1","Part_1","Sequence","_part","_seqCallback","_eventsArray","_subdivision","_createSequence","_eventsUpdated","_indexTime","Proxy","_rescheduleSequence","sequence","eventOffset","Sequence_1","ToneAudioBuffers","_buffers","_loadingCount","urls","_bufferLoaded","every","ToneAudioBuffers_1","Instrument_1","BufferSource_1","Sampler","_activeSources","urlMap","_findClosest","notes","difference","closestNote","releaseAll","Monophonic","portamento","_triggerEnvelopeAttack","setNote","_triggerEnvelopeRelease","getLevelAtTime","envelope","computedFrequency","portTime","OmniOscillator_1","Monophonic_1","Synth","computedAttack","computedDecay","Synth_1","Sampler_1","Player","_onload","autostart","_onSourceEnd","implicitEnd","seek","comptuedOffset","stopEvent","Noise","_noiseBuffers","_noiseCache","brown","pink","white","channelNum","lastOut","b0","b1","b2","b3","b4","b5","b6","Noise_1","Player_1","_currentId","_nextId","_nextTick","_boundRestart","_restart","_interval","_createEvents","Destination","rawContext","Draw","expiration","anticipation","_boundDrawLoop","_drawLoop","_animationFrame","requestAnimationFrame","cancelAnimationFrame","TickSignal","_multiplier","computedValue","prevEvent","segments","rampVal","ticksUntilTime","_getTicksUntilEvent","computedVal","segmentDur","val0","val1","onTheLineEvent","getDurationOfTicks","tick","delta","sqrt","sol1","ticksToTime","startTicks","TickSignal_1","_tickOffset","tmpEvent","lastState","elapsedTicks","periodStartTime","offsetEvent","elapsedSeconds","absoluteTicks","computedStartTime","computedEndTime","lastStateEvent","maxStartTime","OfflineContext_1","Offline","originalContext","_val","_units","_expressions","hz","dot","scalar","number","samples","fromType","trim","typeName","quantity","expr","matching","toSamples","toMilliseconds","Offline_1","Draw_1","Destination_1","Transport_1","setAudioContext","TONE_AUDIO_CONTEXT","Function","eval","_callback","_updateInterval","_createClock","_createWorker","blob","Blob","blobUrl","URL","createObjectURL","worker","Worker","onmessage","_worker","_createTimeout","_disposeClock","terminate","postMessage","__export","Global_2"],"mappings":"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","file":"Tone.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Tone\"] = factory();\n\telse\n\t\troot[\"Tone\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 85);\n","// import { BaseToneOptions } from \"../Tone\";\nimport { isDefined, isObject, isUndef } from \"./TypeCheck\";\n\ntype BaseToneOptions = import(\"../Tone\").BaseToneOptions;\n\n/**\n * Recursively merge an object\n * @param target the object to merge into\n * @param sources the source objects to merge\n */\nexport function deepMerge<T>(target: T, ...sources: T[]): T {\n\tif (!sources.length) { return target; }\n\tconst source = sources.shift();\n\n\tif (isObject(target) && isObject(source)) {\n\t\tfor (const key in source) {\n\t\t\t// values with the key 'value' are an exception\n\t\t\t// they don't get deep merged\n\t\t\tif (key === \"value\") {\n\t\t\t\ttarget[key] = source[key];\n\t\t\t} else if (isObject(source[key])) {\n\t\t\t\tif (!target[key]) { Object.assign(target, { [key]: {} }); }\n\t\t\t\tdeepMerge(target[key], source[key] as any);\n\t\t\t} else {\n\t\t\t\tObject.assign(target, { [key]: source[key] as any });\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Convert an args array into an object.\n */\nexport function optionsFromArguments<T extends object>(\n\tdefaults: T,\n\targsArray: IArguments,\n\tkeys: string[] = [],\n\tobjKey?: string,\n): T {\n\tconst opts: any = {};\n\tconst args = Array.from(argsArray);\n\t// if the first argument is an object and has an object key\n\tif (isObject(args[0]) && objKey && !Reflect.has(args[0], objKey)) {\n\t\t// if it's not part of the defaults\n\t\tconst partOfDefaults = Object.keys(args[0]).some(key => Reflect.has(defaults, key));\n\t\tif (!partOfDefaults) {\n\t\t\t// merge that key\n\t\t\tdeepMerge(opts, {[objKey] : args[0]});\n\t\t\t// remove the obj key from the keys\n\t\t\tkeys.splice(keys.indexOf(objKey), 1);\n\t\t\t// shift the first argument off\n\t\t\targs.shift();\n\t\t}\n\t}\n\tif (args.length === 1 && isObject(args[0])) {\n\t\tdeepMerge(opts, args[0]);\n\t} else {\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tif (isDefined(args[i])) {\n\t\t\t\topts[keys[i]] = args[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn deepMerge(defaults, opts);\n}\n\n/**\n * Return this instances default values by calling Constructor.getDefaults()\n */\nexport function getDefaultsFromInstance<T>(instance: T): BaseToneOptions {\n\ttype ToneClass = {\n\t\tconstructor: ToneClass;\n\t\tgetDefaults: () => BaseToneOptions;\n\t} & T;\n\n\treturn (instance as ToneClass).constructor.getDefaults();\n}\n\n/**\n * Returns the fallback if the given object is undefined.\n * Take an array of arguments and return a formatted options object.\n */\nexport function defaultArg<T>(given: T, fallback: T): T {\n\tif (isUndef(given)) {\n\t\treturn fallback;\n\t} else {\n\t\treturn given;\n\t}\n}\n\n/**\n * Remove all of the properties belonging to omit from obj.\n */\nexport function omitFromObject<T extends object, O extends string[]>(obj: T, omit: O): Omit<T, keyof O> {\n\tomit.forEach(prop => {\n\t\tif (Reflect.has(obj, prop)) {\n\t\t\tdelete obj[prop];\n\t\t}\n\t});\n\treturn obj;\n}\n","import { isArray } from \"./TypeCheck\";\n\n// return an interface which excludes certain keys\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n *  Make the property not writable using `defineProperty`. Internal use only.\n */\nexport function readOnly(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => readOnly(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\tenumerable: true,\n\t\t\twritable: false,\n\t\t});\n\t}\n}\n\n/**\n *  Make an attribute writeable. Internal use only.\n */\nexport function writable(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => writable(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\twritable: true,\n\t\t});\n\t}\n}\n\nexport const noOp: (...args: any[]) => any = () => {\n\t// no op!\n};\n\n/**\n * Recursive Partial taken from here: https://stackoverflow.com/a/51365037\n */\nexport type RecursivePartial<T> = {\n\t[P in keyof T]?:\n\tT[P] extends Array<infer U> ? Array<RecursivePartial<U>> :\n\tT[P] extends object ? RecursivePartial<T[P]> :\n\tT[P];\n};\n","/**\n *  Test if the arg is undefined\n */\nexport function isUndef(arg: any): arg is undefined {\n\treturn typeof arg === \"undefined\";\n}\n\n/**\n *  Test if the arg is not undefined\n */\nexport function isDefined<T>(arg: T | undefined): arg is T {\n\treturn !isUndef(arg);\n}\n\n/**\n *  Test if the arg is a function\n */\nexport function isFunction(arg: any): arg is (a: any) => any {\n\treturn typeof arg === \"function\";\n}\n\n/**\n *  Test if the argument is a number.\n */\nexport function isNumber(arg: any): arg is number {\n\treturn (typeof arg === \"number\");\n}\n\n/**\n *  Test if the given argument is an object literal (i.e. `{}`);\n */\nexport function isObject(arg: any): arg is object {\n\treturn (Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object);\n}\n\n/**\n *  Test if the argument is a boolean.\n */\nexport function isBoolean(arg: any): arg is boolean {\n\treturn (typeof arg === \"boolean\");\n}\n\n/**\n *  Test if the argument is an Array\n */\nexport function isArray(arg: any): arg is any[] {\n\treturn (Array.isArray(arg));\n}\n\n/**\n *  Test if the argument is a string.\n */\nexport function isString(arg: any): arg is string {\n\treturn (typeof arg === \"string\");\n}\n\n/**\n *  Test if the argument is in the form of a note in scientific pitch notation.\n *  e.g. \"C4\"\n */\nexport function isNote(arg: any): arg is Note {\n\treturn isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}\n","import { optionsFromArguments } from \"../util/Defaults\";\nimport { isArray, isDefined, isNumber } from \"../util/TypeCheck\";\nimport { Param } from \"./Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\n\nexport type InputNode = ToneAudioNode | AudioNode | AudioParam | Param<Unit>;\nexport type OutputNode = ToneAudioNode | AudioNode;\n\nexport interface ChannelProperties {\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n * The possible options for this node\n */\nexport interface ToneAudioNodeOptions extends ToneWithContextOptions {\n\tnumberOfInputs: number;\n\tnumberOfOutputs: number;\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n *  ToneAudioNode is the base class for classes which process audio.\n */\nexport abstract class ToneAudioNode<Options extends ToneAudioNodeOptions = ToneAudioNodeOptions>\nextends ToneWithContext<Options> {\n\n\tabstract name = \"AudioNode\";\n\n\t/**\n\t * The input node or nodes. If the object is a source,\n\t * it does not have any input and this.input is undefined.\n\t */\n\tabstract input: InputNode | InputNode | undefined;\n\n\t/**\n\t * The output nodes. If the object is a sink,\n\t * it does not have any output and this.output is undefined.\n\t */\n\tabstract output: OutputNode | OutputNode | undefined;\n\n\t/**\n\t *  The number of inputs feeding into the AudioNode.\n\t *  For source nodes, this will be 0.\n\t */\n\treadonly numberOfInputs: number;\n\n\t/**\n\t *  The number of outputs of the AudioNode.\n\t */\n\treadonly numberOfOutputs: number;\n\n\t/**\n\t * List all of the node that must be set to match the ChannelProperties\n\t */\n\tprotected abstract _internalChannels: OutputNode[];\n\n\tstatic getDefaults(): ToneAudioNodeOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tchannelCount: 2,\n\t\t\tchannelCountMode: \"max\" as ChannelCountMode,\n\t\t\tchannelInterpretation: \"speakers\" as ChannelInterpretation,\n\t\t\tnumberOfInputs: 0,\n\t\t\tnumberOfOutputs: 0,\n\t\t});\n\t}\n\n\tconstructor(options: ToneAudioNodeOptions) {\n\t\tsuper(options);\n\t\tthis.numberOfInputs = options.numberOfInputs;\n\t\tthis.numberOfOutputs = options.numberOfOutputs;\n\t}\n\n\tprotected createInsOuts(numberOfInputs: number = 0, numberOfOutputs: number = 0): void {\n\t\t// if (numberOfInputs === 1) {\n\t\t// \tthis.input = this.context.createGain();\n\t\t// } else if (numberOfInputs > 1) {\n\t\t// \tthis.input = [];\n\t\t// \tfor (let i = 0; i < numberOfInputs; i++) {\n\t\t// \t\tthis.input[i] = this.context.createGain();\n\t\t// \t}\n\t\t// }\n\n\t\t// if (numberOfOutputs === 1) {\n\t\t// \tthis.output = this.context.createGain();\n\t\t// } else if (numberOfOutputs > 1) {\n\t\t// \tthis.output = [];\n\t\t// \tfor (let o = 0; o < numberOfOutputs; o++) {\n\t\t// \t\tthis.output[o] = this.context.createGain();\n\t\t// \t}\n\t\t// }\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// AUDIO PROPERTIES\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Set the audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t * @param options\n\t */\n\tprivate _setChannelProperties(options: ChannelProperties): void {\n\t\tif (this._internalChannels.length) {\n\t\t\tthis._internalChannels.forEach(node => {\n\t\t\t\tnode.channelCount = options.channelCount;\n\t\t\t\tnode.channelCountMode = options.channelCountMode;\n\t\t\t\tnode.channelInterpretation = options.channelInterpretation;\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Get the current audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t */\n\tprivate _getChannelProperties(): ChannelProperties {\n\t\tif (this._internalChannels.length) {\n\t\t\tconst node = this._internalChannels[0];\n\t\t\treturn {\n\t\t\t\tchannelCount: node.channelCount,\n\t\t\t\tchannelCountMode: node.channelCountMode,\n\t\t\t\tchannelInterpretation: node.channelInterpretation,\n\t\t\t};\n\t\t} else {\n\t\t\t// return the defaults\n\t\t\treturn {\n\t\t\t\tchannelCount: 2,\n\t\t\t\tchannelCountMode: \"max\",\n\t\t\t\tchannelInterpretation: \"speakers\",\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t *  channelCount is the number of channels used when up-mixing and down-mixing\n\t *  connections to any inputs to the node. The default value is 2 except for\n\t *  specific nodes where its value is specially determined.\n\t */\n\tget channelCount(): number {\n\t\treturn this._getChannelProperties().channelCount;\n\t}\n\tset channelCount(channelCount: number) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCount }));\n\t}\n\n\t/**\n\t *  channelCountMode determines how channels will be counted when up-mixing and\n\t *  down-mixing connections to any inputs to the node.\n\t *  The default value is \"max\". This attribute has no effect for nodes with no inputs.\n\t */\n\tget channelCountMode(): ChannelCountMode {\n\t\treturn this._getChannelProperties().channelCountMode;\n\t}\n\tset channelCountMode(channelCountMode: ChannelCountMode) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCountMode }));\n\t}\n\n\t/**\n\t *  channelInterpretation determines how individual channels will be treated\n\t *  when up-mixing and down-mixing connections to any inputs to the node.\n\t *  The default value is \"speakers\".\n\t */\n\tget channelInterpretation(): ChannelInterpretation {\n\t\treturn this._getChannelProperties().channelInterpretation;\n\t}\n\tset channelInterpretation(channelInterpretation: ChannelInterpretation) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelInterpretation }));\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONNECTIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n\t * @param unit The output to connect to\n\t * @param outputNum The output to connect from\n\t * @param inputNum The input to connect to\n\t */\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t */\n\ttoDestination(): this {\n\t\tthis.connect(this.context.destination);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t * alias for {@link toDestination}\n\t */\n\ttoMaster(): this {\n\t\tconsole.warn(\"toMaster() has been renamed toDestination()\");\n\t\treturn this.toDestination();\n\t}\n\n\t/**\n\t *  disconnect the output\n\t *  @param output Either the output index to disconnect if the output is an array, or the node to disconnect from.\n\t */\n\tdisconnect(destination?: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tdisconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Connect the output of this node to the rest of the nodes in series.\n\t *  @param nodes\n\t *  @example\n\t *  //connect a node to an effect, panVol and then to the master output\n\t *  node.chain(effect, panVol, Tone.Destination);\n\t */\n\tchain(...nodes: InputNode[]): this {\n\t\tconnectSeries(this, ...nodes);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  connect the output of this node to the rest of the nodes in parallel.\n\t *  @param nodes\n\t *  @returns this\n\t */\n\tfan(...nodes: InputNode[]): this {\n\t\tnodes.forEach(node => this.connect(node));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Dispose and disconnect\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (isDefined(this.input)) {\n\t\t\tif (isArray(this.input)) {\n\t\t\t\tthis.input.forEach(input => {\n\t\t\t\t\tif (input instanceof ToneAudioNode) {\n\t\t\t\t\t\tinput.dispose();\n\t\t\t\t\t} else if (input instanceof AudioNode) {\n\t\t\t\t\t\tinput.disconnect();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (this.input instanceof ToneAudioNode) {\n\t\t\t\tthis.input.dispose();\n\t\t\t} else if (this.input instanceof AudioNode) {\n\t\t\t\tthis.input.disconnect();\n\t\t\t}\n\t\t}\n\t\tif (isDefined(this.output)) {\n\t\t\tif (isArray(this.output)) {\n\t\t\t\tthis.output.forEach(output => {\n\t\t\t\t\tif (output instanceof ToneAudioNode) {\n\t\t\t\t\t\toutput.dispose();\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutput.disconnect();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (this.output instanceof ToneAudioNode) {\n\t\t\t\tthis.output.dispose();\n\t\t\t} else if (this.output instanceof AudioNode) {\n\t\t\t\tthis.output.disconnect();\n\t\t\t}\n\t\t}\n\t\tthis._internalChannels = [];\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// CONNECTIONS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n *  connect together all of the arguments in series\n *  @param nodes\n */\nexport function connectSeries(...nodes: InputNode[]): void {\n\tconst first = nodes.shift();\n\tnodes.reduce((prev, current) => {\n\t\tif (prev instanceof ToneAudioNode) {\n\t\t\tprev.connect(current);\n\t\t} else if (prev instanceof AudioNode) {\n\t\t\tconnect(prev, current);\n\t\t}\n\t\treturn current;\n\t}, first);\n}\n\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function connect(srcNode: OutputNode, dstNode: InputNode, outputNumber = 0, inputNumber = 0): void {\n\n\t// resolve the input of the dstNode\n\twhile (!(dstNode instanceof AudioNode || dstNode instanceof AudioParam)) {\n\t\tif (isDefined(dstNode.input)) {\n\t\t\tdstNode = dstNode.input;\n\t\t}\n\t}\n\n\twhile (srcNode instanceof ToneAudioNode) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\t// make the connection\n\tif (dstNode instanceof AudioParam) {\n\t\tsrcNode.connect(dstNode, outputNumber);\n\t} else {\n\t\tsrcNode.connect(dstNode, outputNumber, inputNumber);\n\t}\n}\n\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function disconnect(\n\tsrcNode: OutputNode,\n\tdstNode?: InputNode,\n\toutputNumber = 0,\n\tinputNumber = 0,\n): void {\n\n\t// resolve the destination node\n\tif (isDefined(dstNode)) {\n\t\twhile (dstNode instanceof ToneAudioNode) {\n\t\t\tif (dstNode.input) {\n\t\t\t\tdstNode = dstNode.input;\n\t\t\t}\n\t\t}\n\t}\n\n\t// resolve the src node\n\twhile (!(srcNode instanceof AudioNode)) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\tif (dstNode instanceof AudioParam) {\n\t\tsrcNode.disconnect(dstNode, outputNumber);\n\t} else if (dstNode instanceof AudioNode) {\n\t\tsrcNode.disconnect(dstNode, outputNumber, inputNumber);\n\t} else {\n\t\tsrcNode.disconnect();\n\t}\n}\n","import { Param } from \"../context/Param\";\nimport \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface GainOptions extends ToneAudioNodeOptions {\n\tgain: number;\n\tunits: UnitName;\n\tconvert: boolean;\n}\n\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @param  gain The initial gain of the GainNode\n * @param units The units of the gain parameter.\n */\nexport class Gain<Type extends Unit = GainFactor> extends ToneAudioNode<GainOptions> {\n\n\tname = \"Gain\";\n\n\t/**\n\t *  The gain parameter of the gain node.\n\t */\n\treadonly gain: Param<Type>;\n\n\t/**\n\t * The wrapped GainNode.\n\t */\n\tprivate _gainNode: GainNode = this.context.createGain();\n\n\t// input = output\n\treadonly input: GainNode = this._gainNode;\n\treadonly output: GainNode = this._gainNode;\n\n\t/**\n\t * Add all of the gain nodes\n\t */\n\tprotected _internalChannels: AudioNode[] = [this._gainNode];\n\n\tconstructor(gain?: GainFactor, units?: Unit);\n\tconstructor(options?: Partial<GainOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n\t\tconst options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n\n\t\tthis.gain = new Param({\n\t\t\tcontext : this.context,\n\t\t\tconvert : options.convert,\n\t\t\tparam : this._gainNode.gain,\n\t\t\tunits : options.units,\n\t\t\tvalue : options.gain,\n\t\t});\n\t\treadOnly(this, \"gain\");\n\t}\n\n\tstatic getDefaults(): GainOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert : true,\n\t\t\tgain : 1,\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tunits : \"gain\" as UnitName,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { AbstractParam } from \"../core/context/AbstractParam\";\nimport { Param } from \"../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\n\nexport interface SignalOptions<Type> extends ToneAudioNodeOptions {\n\tvalue: Type;\n\tunits: UnitName;\n\tconvert: boolean;\n}\n\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *  @param value Initial value of the signal\n *  @param units unit The units the signal is in.\n * @example\n * const signal = new Tone.Signal(10);\n */\nexport class Signal<Type extends Unit = number> extends ToneAudioNode<SignalOptions<any>>\nimplements AbstractParam<Type> {\n\n\tname = \"Signal\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection.\n\t */\n\treadonly override: boolean = true;\n\n\t/**\n\t * The constant source node which generates the signal\n\t */\n\tprotected _constantSource: ConstantSourceNode = this.context.createConstantSource();\n\treadonly output: OutputNode = this._constantSource;\n\tprotected _param: Param<Type>;\n\treadonly input: InputNode;\n\tprotected _internalChannels = [this._constantSource];\n\n\tconstructor(value?: Type, units?: UnitName);\n\tconstructor(options?: Partial<SignalOptions<Type>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n\n\t\tconst options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]) as SignalOptions<Type>;\n\n\t\tthis._constantSource.start(0);\n\t\tthis.input = this._param = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._constantSource.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.value,\n\t\t});\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannelCount: 1,\n\t\t\tchannelCountMode: \"explicit\",\n\t\t\tchannelInterpretation: \"discrete\",\n\t\t\tconvert: true,\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tunits: \"number\" as UnitName,\n\t\t\tvalue: 0,\n\t\t}) as SignalOptions<any>;\n\t}\n\n\tconnect(destination: InputNode, outputNum: number = 0, inputNum: number = 0): this {\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// ABSTRACT PARAM INTERFACE\n\t// just a proxy for the ConstantSourceNode's offset AudioParam\n\t// all docs are generated from AbstractParam.ts\n\t///////////////////////////////////////////////////////////////////////////\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.setValueAtTime(value, time);\n\t\treturn this;\n\t}\n\tgetValueAtTime(time: Time): Type {\n\t\treturn this._param.getValueAtTime(time);\n\t}\n\tsetRampPoint(time: Time): this {\n\t\tthis._param.setRampPoint(time);\n\t\treturn this;\n\t}\n\tlinearRampToValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.linearRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampToValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.exponentialRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.exponentialRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\tlinearRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.linearRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\ttargetRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.targetRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\texponentialApproachValueAtTime(value: Type, time: Time, rampTime: Time): this {\n\t\tthis._param.exponentialApproachValueAtTime(value, time, rampTime);\n\t\treturn this;\n\t}\n\tsetTargetAtTime(value: Type, startTime: Time, timeConstant: number): this {\n\t\tthis._param.setTargetAtTime(value, startTime, timeConstant);\n\t\treturn this;\n\t}\n\tsetValueCurveAtTime(values: Type[], startTime: Time, duration: Time, scaling?: number): this {\n\t\tthis._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\t\treturn this;\n\t}\n\tcancelScheduledValues(time: Time): this {\n\t\tthis._param.cancelScheduledValues(time);\n\t\treturn this;\n\t}\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tthis._param.cancelAndHoldAtTime(time);\n\t\treturn this;\n\t}\n\trampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.rampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\n\tget value(): Type {\n\t\treturn this._param.value;\n\t}\n\tset value(value: Type) {\n\t\tthis._param.value = value;\n\t}\n\n\tget convert(): boolean {\n\t\treturn this._param.convert;\n\t}\n\tset convert(convert: boolean) {\n\t\tthis._param.convert = convert;\n\t}\n\n\tget units(): UnitName {\n\t\treturn this._param.units;\n\t}\n\n\tget overridden(): boolean {\n\t\treturn this._param.overridden;\n\t}\n\tset overridden(overridden: boolean) {\n\t\tthis._param.overridden = overridden;\n\t}\n\n\tget maxValue(): number {\n\t\treturn this._param.maxValue;\n\t}\n\tget minValue(): number {\n\t\treturn this._param.minValue;\n\t}\n}\n\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(signal: OutputNode, destination: InputNode, outputNum?: number, inputNum?: number): void {\n\tif (destination instanceof Param || destination instanceof AudioParam ||\n\t\t(destination instanceof Signal && destination.override)) {\n\t\t// cancel changes\n\t\tdestination.cancelScheduledValues(0);\n\t\t// reset the value\n\t\tdestination.setValueAtTime(0, 0);\n\t\t// mark the value as overridden\n\t\tif (destination instanceof Signal) {\n\t\t\tdestination.overridden = true;\n\t\t}\n\t}\n\tconnect(signal, destination, outputNum, inputNum);\n}\n","import { Volume } from \"../component/channel/Volume\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp, readOnly } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline } from \"../core/util/StateTimeline\";\nimport { isUndef } from \"../core/util/TypeCheck\";\n\nexport interface SourceOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  @class  Base class for sources. Sources have start/stop methods\n *          and the ability to be synced to the\n *          start/stop of this.context.transport.\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n *  @example\n * //Multiple state change events can be chained together,\n * //but must be set in the correct order and with ascending times\n *\n * // OK\n * state.start().stop(\"+0.2\");\n * // AND\n * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n *\n * // BAD\n * state.stop(\"+0.2\").start();\n * // OR\n * state.start(\"+0.3\").stop(\"+0.2\");\n *\n */\nexport abstract class Source<Options extends SourceOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The output volume node\n\t *  @type  {Tone.Volume}\n\t *  @private\n\t */\n\tprivate _volume: Volume = new Volume({\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * The output note\n\t */\n\toutput = this._volume;\n\tprotected _internalChannels = [this.output];\n\n\t/**\n\t * There is no input\n\t */\n\tinput = undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * source.volume.value = -6;\n\t */\n\tvolume = this._volume.volume;\n\n\t/**\n\t * \tKeep track of the scheduled state.\n\t *  @type {Tone.StateTimeline}\n\t *  @private\n\t */\n\tprotected _state: StateTimeline<{\n\t\tduration?: Seconds;\n\t\toffset?: Seconds;\n\t\t/**\n\t\t * Either the buffer is explicitly scheduled to end using the stop method,\n\t\t * or it's implicitly ended when the buffer is over.\n\t\t */\n\t\timplicitEnd?: boolean;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t *  The synced `start` callback function from the transport\n\t *  @type {Function}\n\t *  @private\n\t */\n\tprotected _synced = false;\n\n\t/**\n\t *  Keep track of all of the scheduled event ids\n\t */\n\tprivate _scheduled: number[] = [];\n\n\t/**\n\t * Placeholder functions for syncing/unsyncing to transport\n\t */\n\tprivate _syncedStart: (time: Seconds, offset: Seconds) => void = noOp;\n\tprivate _syncedStop: (time: Seconds) => void = noOp;\n\n\tconstructor(options: SourceOptions) {\n\t\tsuper(options);\n\t\treadOnly(this, \"volume\");\n\t\tthis._state.memory = 100;\n\t\tthis.volume.setValueAtTime(options.volume, 0);\n\t\t// set mute initially\n\t\tthis.mute = options.mute;\n\n\t}\n\n\tstatic getDefaults(): SourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\tif (this._synced) {\n\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\treturn this._state.getValueAtTime(this.context.transport.seconds) as BasicPlaybackState;\n\t\t\t} else {\n\t\t\t\treturn \"stopped\";\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._state.getValueAtTime(this.now()) as BasicPlaybackState;\n\t\t}\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute: boolean) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t// overwrite these functions\n\tprotected abstract _start(time: Time, offset?: Time, duration?: Time): void;\n\tprotected abstract _stop(time: Time): void;\n\tabstract restart(time: Time, offset?: Time, duration?: Time): this;\n\n\t/**\n\t *  Start the source at the specified time. If no time is given,\n\t *  start the source now.\n\t *  @param  time When the source should be started.\n\t *  @returns {Source} this\n\t *  @example\n\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t */\n\tstart(time?: Time, offset?: Time, duration: Time = 0): this {\n\t\tif (isUndef(time) && this._synced) {\n\t\t\ttime = this.context.transport.seconds;\n\t\t} else {\n\t\t\ttime = this.toSeconds(time);\n\t\t}\n\t\t// if it's started, stop it and restart it\n\t\tif (this._state.getValueAtTime(time) === \"started\") {\n\t\t\tthis._state.cancel(time);\n\t\t\tthis._state.setStateAtTime(\"started\", time);\n\t\t\tthis.restart(time, offset, duration);\n\t\t} else {\n\t\t\tthis._state.setStateAtTime(\"started\", time);\n\t\t\tif (this._synced) {\n\t\t\t\t// add the offset time to the event\n\t\t\t\tconst event = this._state.get(time);\n\t\t\t\tif (event) {\n\t\t\t\t\tevent.offset = this.toSeconds(defaultArg(offset, 0));\n\t\t\t\t\tevent.duration = this.toSeconds(duration);\n\t\t\t\t}\n\t\t\t\tconst sched = this.context.transport.schedule(t => {\n\t\t\t\t\tthis._start(t, offset, duration);\n\t\t\t\t}, time);\n\t\t\t\tthis._scheduled.push(sched);\n\n\t\t\t\t// if it's already started\n\t\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\t\tthis._syncedStart(this.now(), this.context.transport.seconds);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._start.apply(this, arguments);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the source at the specified time. If no time is given,\n\t *  stop the source now.\n\t *  @param  {Time} [time=now] When the source should be stopped.\n\t *  @returns {Source} this\n\t *  @example\n\t * source.stop(); // stops the source immediately\n\t */\n\tstop(time?: Time): this {\n\t\tif (isUndef(time) && this._synced) {\n\t\t\ttime = this.context.transport.seconds;\n\t\t} else {\n\t\t\ttime = this.toSeconds(time);\n\t\t}\n\t\tif (!this._synced) {\n\t\t\tthis._stop.apply(this, arguments);\n\t\t} else {\n\t\t\tconst sched = this.context.transport.schedule(this._stop.bind(this), time);\n\t\t\tthis._scheduled.push(sched);\n\t\t}\n\t\tthis._state.cancel(time);\n\t\tthis._state.setStateAtTime(\"stopped\", time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Sync the source to the Transport so that all subsequent\n\t *  calls to `start` and `stop` are synced to the TransportTime\n\t *  instead of the AudioContext time.\n\t *\n\t * @example\n\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * source.sync().start(0).stop(0.3);\n\t * //start the transport.\n\t * this.context.transport.start();\n\t *\n\t * @example\n\t * //start the transport with an offset and the sync'ed sources\n\t * //will start in the correct position\n\t * source.sync().start(0.1);\n\t * //the source will be invoked with an offset of 0.4 = (0.5 - 0.1)\n\t * this.context.transport.start(\"+0.5\", 0.5);\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncedStart = (time, offset) => {\n\t\t\t\tif (offset > 0) {\n\t\t\t\t\t// get the playback state at that time\n\t\t\t\t\tconst stateEvent = this._state.get(offset);\n\t\t\t\t\t// listen for start events which may occur in the middle of the sync'ed time\n\t\t\t\t\tif (stateEvent && stateEvent.state === \"started\" && stateEvent.time !== offset) {\n\t\t\t\t\t\t// get the offset\n\t\t\t\t\t\tconst startOffset = offset - this.toSeconds(stateEvent.time);\n\t\t\t\t\t\tlet duration;\n\t\t\t\t\t\tif (stateEvent.duration) {\n\t\t\t\t\t\t\tduration = this.toSeconds(stateEvent.duration) - startOffset;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._syncedStop = time => {\n\t\t\t\tconst seconds = this.context.transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));\n\t\t\t\tif (this._state.getValueAtTime(seconds) === \"started\") {\n\t\t\t\t\tthis._stop(time);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.context.transport.on(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"loopStart\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"loopEnd\", this._syncedStop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsync the source to the Transport. See Source.sync\n\t */\n\tunsync(): this {\n\t\tif (this._synced) {\n\t\t\tthis.context.transport.off(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"loopEnd\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.off(\"loopStart\", this._syncedStart);\n\t\t}\n\t\tthis._synced = false;\n\t\t// clear all of the scheduled ids\n\t\tthis._scheduled.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduled = [];\n\t\tthis._state.cancel(0);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.unsync();\n\t\tthis._volume.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n","import { version } from \"../version\";\nimport { Context } from \"./context/Context\";\n\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext: Context;\n\n// @ts-ignore\nglobalContext = window.TONE_CONTEXT;\n\n/**\n * Returns the default system-wide AudioContext\n */\nexport function getContext(): Context {\n\tif (!globalContext) {\n\t\tsetContext(new Context());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n */\nexport function setContext(context: Context): void {\n\tglobalContext = context;\n\tcontext.initialize();\n\t// @ts-ignore\n\twindow.TONE_CONTEXT = context;\n}\n\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * document.querySelector('#playbutton').addEventListener('click', () => Tone.start())\n */\nexport function start(): Promise <void> {\n\treturn globalContext.resume();\n}\n\n/**\n * Log Tone.js + version in the console.\n */\nif (!this.TONE_SILENCE_LOGGING) {\n\tlet prefix = \"v\";\n\t// @ts-ignore\n\tif (version === \"dev\") {\n\t\tprefix = \"\";\n\t}\n\tconst printString = ` * Tone.js ${prefix}${version} * `;\n\t// tslint:disable-next-line: no-console\n\tconsole.log(`%c${printString}`, \"background: #000; color: #fff\");\n}\n","import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"./Defaults\";\n\ntype TimelineSearchParam = \"ticks\" | \"time\";\n\n/**\n * The options object for Timeline\n */\ninterface TimelineOptions {\n\tmemory: number;\n}\n\n/**\n * An event must have a time number\n */\nexport interface TimelineEvent {\n\ttime: number;\n}\n\n/**\n *  @class A Timeline class for scheduling and maintaining state\n *         along a timeline. All events must have a \"time\" property.\n *         Internally, events are stored in time order for fast\n *         retrieval.\n *  @param memory The number of previous events that are retained.\n */\nexport class Timeline<GenericEvent extends TimelineEvent> extends Tone {\n\n\tname = \"Timeline\";\n\n\t/**\n\t *  The memory of the timeline, i.e.\n\t *  how many events in the past it will retain\n\t */\n\tmemory: number;\n\n\t/**\n\t * The array of scheduled timeline events\n\t */\n\tprotected _timeline: GenericEvent[] = [];\n\n\tconstructor(options?: Partial<TimelineOptions>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(memory?: number);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Timeline.getDefaults(), arguments, [\"memory\"]);\n\n\t\tthis.memory = options.memory;\n\t}\n\n\tstatic getDefaults(): TimelineOptions {\n\t\treturn {\n\t\t\tmemory: Infinity,\n\t\t};\n\t}\n\n\t/**\n\t *  The number of items in the timeline.\n\t */\n\tget length(): number {\n\t\treturn this._timeline.length;\n\t}\n\n\t/**\n\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t *  @param event  The event object to insert into the timeline.\n\t */\n\tadd(event: GenericEvent): Timeline<GenericEvent> {\n\t\t// the event needs to have a time attribute\n\t\tthis.assert(Reflect.has(event, \"time\"), \"Timeline: events must have a time attribute\");\n\t\tevent.time = event.time.valueOf();\n\t\tconst index = this._search(event.time);\n\t\tthis._timeline.splice(index + 1, 0, event);\n\t\t// if the length is more than the memory, remove the previous ones\n\t\tif (this.length > this.memory) {\n\t\t\tconst diff = this.length - this.memory;\n\t\t\tthis._timeline.splice(0, diff);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  {Object}  event  The event object to remove from the list.\n\t *  @returns {Timeline} this\n\t */\n\tremove(event: GenericEvent): Timeline<GenericEvent> {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index !== -1) {\n\t\t\tthis._timeline.splice(index, 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the nearest event whose time is less than or equal to the given time.\n\t *  @param  time  The time to query.\n\t */\n\tget(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index !== -1) {\n\t\t\treturn this._timeline[index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Return the first event in the timeline without removing it\n\t *  @returns {Object} The first event object\n\t */\n\tpeek(): GenericEvent | undefined {\n\t\treturn this._timeline[0];\n\t}\n\n\t/**\n\t *  Return the first event in the timeline and remove it\n\t */\n\tshift(): GenericEvent | undefined {\n\t\treturn this._timeline.shift();\n\t}\n\n\t/**\n\t *  Get the event which is scheduled after the given time.\n\t *  @param  time  The time to query.\n\t */\n\tgetAfter(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index + 1 < this._timeline.length) {\n\t\t\treturn this._timeline[index + 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Get the event before the event at the given time.\n\t *  @param  time  The time to query.\n\t */\n\tgetBefore(time: number): GenericEvent | null {\n\t\tconst len = this._timeline.length;\n\t\t// if it's after the last item, return the last item\n\t\tif (len > 0 && this._timeline[len - 1].time < time) {\n\t\t\treturn this._timeline[len - 1];\n\t\t}\n\t\tconst index = this._search(time);\n\t\tif (index - 1 >= 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Cancel events at and after the given time\n\t *  @param  time  The time to query.\n\t */\n\tcancel(after: number): Timeline<GenericEvent> {\n\t\tif (this._timeline.length > 1) {\n\t\t\tlet index = this._search(after);\n\t\t\tif (index >= 0) {\n\t\t\t\tif (this._timeline[index].time === after) {\n\t\t\t\t\t// get the first item with that time\n\t\t\t\t\tfor (let i = index; i >= 0; i--) {\n\t\t\t\t\t\tif (this._timeline[i].time === after) {\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index);\n\t\t\t\t} else {\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t} else if (this._timeline.length === 1) {\n\t\t\t// the first item's time\n\t\t\tif (this._timeline[0].time >= after) {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel events before or equal to the given time.\n\t *  @param  {Number}  time  The time to cancel before.\n\t *  @returns {Timeline} this\n\t */\n\tcancelBefore(time): Timeline<GenericEvent> {\n\t\tconst index = this._search(time);\n\t\tif (index >= 0) {\n\t\t\tthis._timeline = this._timeline.slice(index + 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the previous event if there is one. null otherwise\n\t * @param  {Object} event The event to find the previous one of\n\t * @return {Object}       The event right before the given event\n\t */\n\tpreviousEvent(event): GenericEvent | null {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index > 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Does a binary search on the timeline array and returns the\n\t *  nearest event index whose time is after or equal to the given time.\n\t *  If a time is searched before the first index in the timeline, -1 is returned.\n\t *  If the time is after the end, the index of the last item is returned.\n\t *  @param  time\n\t */\n\tprotected _search(time: number, param: TimelineSearchParam = \"time\"): number {\n\t\tif (this._timeline.length === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet beginning = 0;\n\t\tconst len = this._timeline.length;\n\t\tlet end = len;\n\t\tif (len > 0 && this._timeline[len - 1][param] <= time) {\n\t\t\treturn len - 1;\n\t\t}\n\t\twhile (beginning < end) {\n\t\t\t// calculate the midpoint for roughly equal partition\n\t\t\tlet midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\t\tconst event = this._timeline[midPoint];\n\t\t\tconst nextEvent = this._timeline[midPoint + 1];\n\t\t\tif (event[param] === time) {\n\t\t\t\t// choose the last one that has the same time\n\t\t\t\tfor (let i = midPoint; i < this._timeline.length; i++) {\n\t\t\t\t\tconst testEvent = this._timeline[i];\n\t\t\t\t\tif (testEvent[param] === time) {\n\t\t\t\t\t\tmidPoint = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[param] < time && nextEvent[param] > time) {\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[param] > time) {\n\t\t\t\t// search lower\n\t\t\t\tend = midPoint;\n\t\t\t} else {\n\t\t\t\t// search upper\n\t\t\t\tbeginning = midPoint + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t *  Internal iterator. Applies extra safety checks for\n\t *  removing items from the array.\n\t */\n\tprivate _iterate(\n\t\tcallback: (event: GenericEvent) => void,\n\t\tlowerBound = 0, upperBound = this._timeline.length - 1,\n\t): void {\n\t\tthis._timeline.slice(lowerBound, upperBound + 1).forEach(callback);\n\t}\n\n\t/**\n\t *  Iterate over everything in the array\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\tthis._iterate(callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at or before the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachBefore(time, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array after the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAfter(time, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst lowerBound = this._search(time);\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array between the startTime and endTime.\n\t *  The timerange is inclusive of the startTime, but exclusive of the endTime.\n\t *  range = [startTime, endTime).\n\t *  @param  startTime The time to check if items are before\n\t *  @param  endTime The end of the test interval.\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachBetween(startTime: number, endTime: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\tlet lowerBound = this._search(startTime);\n\t\tlet upperBound = this._search(endTime);\n\t\tif (lowerBound !== -1 && upperBound !== -1) {\n\t\t\tif (this._timeline[lowerBound].time !== startTime) {\n\t\t\t\tlowerBound += 1;\n\t\t\t}\n\t\t\t// exclusive of the end time\n\t\t\tif (this._timeline[upperBound].time === endTime) {\n\t\t\t\tupperBound -= 1;\n\t\t\t}\n\t\t\tthis._iterate(callback, lowerBound, upperBound);\n\t\t} else if (lowerBound === -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at or after the given time. Similar to\n\t *  forEachAfter, but includes the item(s) at the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tlet lowerBound = this._search(time);\n\t\t// work backwards until the event time is less than time\n\t\twhile (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t\t\tlowerBound--;\n\t\t}\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at the given time\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(event => {\n\t\t\t\tif (event.time === time) {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t}, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._timeline = [];\n\t\treturn this;\n\t}\n}\n","/**\n *  Tone.js\n *  @author Yotam Mann\n *  @license http://opensource.org/licenses/MIT MIT License\n *  @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\n// import { getContext } from \"./Global\";\nimport \"./type/Units\";\n\n///////////////////////////////////////////////////////////////////////////\n// \tTONE\n///////////////////////////////////////////////////////////////////////////\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseToneOptions {}\n\n/**\n *  @class  Tone is the base class of all other classes.\n *  @constructor\n */\nexport abstract class Tone {\n\n\t/**\n\t * The version number semver\n\t */\n\tstatic version: string = version;\n\n\t/**\n\t * The name of the class\n\t */\n\tprotected abstract name: string;\n\n\t/**\n\t * Takes a partial options an returns the completed options by filling in the defaults\n\t */\n\tstatic getDefaults(): BaseToneOptions {\n\t\treturn {};\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDEBUGGING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Set this debug flag to log all events that happen in this class.\n\t */\n\tdebug: boolean = false;\n\n\t/**\n\t * Prints the outputs to the console log for debugging purposes.\n\t * Prints the contents only if either the object has a property\n\t * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n\t * is set to the name of the class.\n\t * @param args\n\t *  @example\n\t * //prints all logs originating from Tone.OscillatorNode\n\t * Tone.global.TONE_DEBUG_CLASS = \"OscillatorNode\"\n\t */\n\tprotected log(...args): void {\n\t\t// if the object is either set to debug = true\n\t\t// or if there is a string on the Tone.global.with the class name\n\t\t// @ts-ignore\n\t\tif (this.debug || this.toString() === global.TONE_DEBUG_CLASS) {\n\t\t\targs.unshift(this.toString() + \":\");\n\t\t\t// tslint:disable-next-line: no-console\n\t\t\tconsole.log(...args);\n\t\t}\n\t}\n\n\t/**\n\t *  Assert that the statement is true, otherwise invoke the error.\n\t *  @param {Boolean} statement\n\t *  @param {String} error The message which is passed into an Error\n\t *  @private\n\t */\n\tprotected assert(statement: boolean, error: string): void {\n\t\tif (!statement) {\n\t\t\tthrow new Error(error);\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDISPOSING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Indicates if the instance was disposed\n\t */\n\tprivate _wasDisposed: boolean = false;\n\n\t/**\n\t *  disconnect and dispose.\n\t */\n\tdispose(): this {\n\t\tthis._wasDisposed = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Indicates if the instance was disposed. 'Disposing' an\n\t * instance means that all of the Web Audio nodes that were\n\t * created for the instance are disconnected and freed for garbage collection.\n\t */\n\tget disposed(): boolean {\n\t\treturn this._wasDisposed;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDEFAULTS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  If the `given` parameter is undefined, use the `fallback`.\n\t *  If both `given` and `fallback` are object literals, it will\n\t *  return a deep copy which includes all of the parameters from both\n\t *  objects. If a parameter is undefined in given, it will return\n\t *  the fallback property.\n\t *  <br><br>\n\t *  WARNING: if object is self referential, it will go into an an\n\t *  infinite recursive loop.\n\t *  @memberOf Tone\n\t *  @param  {*} given\n\t *  @param  {*} fallback\n\t *  @return {*}\n\t */\n\t// static defaultArg(given, fallback) {\n\t\t// if (isObject(given) && isObject(fallback)) {\n\t\t// \tconst ret = {};\n\t\t// \t// make a deep copy of the given object\n\t\t// \tfor (const givenProp in given) {\n\t\t// \t\tret[givenProp] = Tone.defaultArg(fallback[givenProp], given[givenProp]);\n\t\t// \t}\n\t\t// \tfor (const fallbackProp in fallback) {\n\t\t// \t\tret[fallbackProp] = Tone.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t\t// \t}\n\t\t// \treturn ret;\n\t\t// } else {\n\t\t// \treturn isUndef(given) ? fallback : given;\n\t\t// }\n\t// }\n\n\t// protected options(argsArray: IArguments, keys: string[]): object {\n\t// \tlet options: any = {};\n\t// \tconst args = Array.from(argsArray);\n\t// \tif (args[0] instanceof BaseAudioContext) {\n\t// \t\toptions.context = args.shift();\n\t// \t}\n\t// \tif (args.length === 1 && isObject(args[0])) {\n\t// \t\toptions = Object.assign(options, args[0]);\n\t// \t} else {\n\t// \t\tfor (let i = 0; i < keys.length; i++) {\n\t// \t\t\tif (isDefined(args[i])) {\n\t// \t\t\t\toptions[keys[i]] = args[i];\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \treturn deepMerge(this.getDefaults(), options);\n\t// }\n\n\t/**\n\t * Convert the class to a string\n\t * @example\n\t * const osc = new Oscillator()\n\t * osc.toString() // \"Oscillator\"\n\t */\n\ttoString(): string {\n\t\treturn this.name;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tSTATIC\n\t///////////////////////////////////////////////////////////////////////////\n\n\t// static get context(): import(\"./context/Context\").Context {\n\t// \treturn getContext();\n\t// }\n\n\t// static now(): Seconds {\n\t// \treturn Tone.context.now();\n\t// }\n}\n","import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { ToneOscillatorConstructorOptions, ToneOscillatorInterface,\n\tToneOscillatorOptions, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { ToneOscillatorNode } from \"./OscillatorNode\";\n\n/**\n *  Oscillator supports a number of features including\n *  phase rotation, multiple oscillator types (see Oscillator.type),\n *  and Transport syncing (see Oscillator.syncFrequency).\n *\n *  @param frequency Starting frequency\n *  @param type The oscillator type. Read more about type below.\n *  @example\n * //make and start a 440hz sine tone\n * var osc = new Oscillator(440, \"sine\").toDestination().start();\n */\nexport class Oscillator extends Source<ToneOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"Oscillator\";\n\n\t/**\n\t *  the main oscillator\n\t */\n\tprivate _oscillator: ToneOscillatorNode | null = null;\n\n\t/**\n\t *  The frequency control.\n\t */\n\tfrequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune control signal.\n\t */\n\tdetune: Signal<Cents>;\n\n\t/**\n\t *  the periodic wave\n\t */\n\tprivate _wave?: PeriodicWave;\n\n\t/**\n\t *  The partials of the oscillator\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t *  The number of partials to limit or extend the periodic wave by\n\t */\n\tprivate _partialCount: number;\n\n\t/**\n\t *  the phase of the oscillator between 0 - 360\n\t */\n\tprivate _phase: Radians;\n\n\t/**\n\t *  the type of the oscillator\n\t *  @type {string}\n\t *  @private\n\t */\n\tprivate _type;\n\n\tconstructor(options?: Partial<ToneOscillatorConstructorOptions>)\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal<Frequency>({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\tthis.detune = new Signal<Cents>({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, \"detune\");\n\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\t\tthis._phase = options.phase;\n\t\tthis._type = options.type;\n\n\t\tif (options.partialCount && options.type !== \"custom\") {\n\t\t\tthis._type = this.baseType + options.partialCount.toString();\n\t\t}\n\t\tthis.phase = this._phase;\n\t}\n\n\tstatic getDefaults(): ToneOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tpartialCount: 0,\n\t\t\tpartials: [],\n\t\t\tphase: 0,\n\t\t\ttype: \"sine\",\n\t\t}) as ToneOscillatorOptions;\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time?: Time): void {\n\t\tthis.log(\"start\", time);\n\t\t// new oscillator with previous values\n\t\tconst oscillator = new ToneOscillatorNode({\n\t\t\tcontext: this.context,\n\t\t});\n\t\tthis._oscillator = oscillator;\n\t\tif (this._wave) {\n\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t} else {\n\t\t\tthis._oscillator.type = this._type;\n\t\t}\n\t\t// connect the control signal to the oscillator frequency & detune\n\t\tthis._oscillator.connect(this.output);\n\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\tthis.detune.connect(this._oscillator.detune);\n\n\t\t// start the oscillator\n\t\ttime = this.toSeconds(time);\n\t\tthis._oscillator.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tthis.log(\"stop\", time);\n\t\tif (this._oscillator) {\n\t\t\ttime = this.toSeconds(time);\n\t\t\tthis._oscillator.stop(time);\n\t\t}\n\t}\n\n\t/**\n\t * Restart the oscillator. Does not stop the oscillator, but instead\n\t * just cancels any scheduled 'stop' from being invoked.\n\t */\n\trestart(time?: Time): this {\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.cancelStop();\n\t\t}\n\t\tthis._state.cancel(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t *  will also affect the oscillators frequency.\n\t *  @example\n\t * Tone.Transport.bpm.value = 120;\n\t * osc.frequency.value = 440;\n\t * //the ration between the bpm and the frequency will be maintained\n\t * osc.syncFrequency();\n\t * Tone.Transport.bpm.value = 240;\n\t * // the frequency of the oscillator is doubled to 880\n\t */\n\tsyncFrequency(): this {\n\t\tthis.context.transport.syncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsync the oscillator's frequency from the Transport.\n\t *  See Oscillator.syncFrequency\n\t */\n\tunsyncFrequency(): this {\n\t\tthis.context.transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/* tslint:disable */\n\t/**\n\t * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\n\t * setting the first x number of partials of the oscillator. For example: \"sine4\" would\n\t * set be the first 4 partials of the sine wave and \"triangle8\" would set the first\n\t * 8 partials of the triangle wave.\n\t * <br><br>\n\t * Uses PeriodicWave internally even for native types so that it can set the phase.\n\t * PeriodicWave equations are from the\n\t * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).\n\t *\n\t * @memberOf Oscillator#\n\t * @type {string}\n\t * @name type\n\t * @example\n\t * //set it to a square wave\n\t * osc.type = \"square\";\n\t * @example\n\t * //set the first 6 partials of a sawtooth wave\n\t * osc.type = \"sawtooth6\";\n\t */\n\t/* tslint:enable */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tconst isBasicType = [\"sine\", \"square\", \"sawtooth\", \"triangle\"].indexOf(type) !== -1;\n\t\tif (this._phase === 0 && isBasicType) {\n\t\t\tthis._wave = undefined;\n\t\t\tthis._partialCount = 0;\n\t\t\t// just go with the basic approach\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\t// already tested that it's a basic type\n\t\t\t\tthis._oscillator.type = type as OscillatorType;\n\t\t\t}\n\t\t} else {\n\t\t\tconst [real, imag] = this._getRealImaginary(type, this._phase);\n\t\t\tconst periodicWave = this.context.createPeriodicWave(real, imag);\n\t\t\tthis._wave = periodicWave;\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t}\n\t\t}\n\t\tthis._type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._type.replace(this.partialCount, \"\");\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tif (this.partialCount && this._type !== \"custom\" && baseType !== \"custom\") {\n\t\t\tthis.type = baseType + this.partialCount as ToneOscillatorType;\n\t\t} else {\n\t\t\tthis.type = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t * @example\n\t * osc.type = 'sine'\n\t * osc.partialCount = 3\n\t * //is equivalent to\n\t * osc.type = 'sine3'\n\t */\n\tget partialCount(): number {\n\t\treturn this._partialCount;\n\t}\n\tset partialCount(p: number) {\n\t\tlet type = this._type;\n\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(this._type);\n\t\tif (partial) {\n\t\t\ttype = partial[1];\n\t\t}\n\t\tif (this._type !== \"custom\") {\n\t\t\tif (p === 0) {\n\t\t\t\tthis.type = type;\n\t\t\t} else {\n\t\t\t\tthis.type = type + p.toString() as ToneOscillatorType;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Get the object's attributes. Given no arguments get\n\t *  will return all available object properties and their corresponding\n\t *  values.\n\t */\n\tget(): ToneOscillatorOptions {\n\t\tconst values = super.get();\n\t\tif (values.type !== \"custom\") {\n\t\t\tdelete values.partials;\n\t\t}\n\t\treturn values;\n\t}\n\n\t/**\n\t *  Returns the real and imaginary components based\n\t *  on the oscillator type.\n\t *  @returns [real: Float32Array, imaginary: Float32Array]\n\t *  @private\n\t */\n\tprivate _getRealImaginary(type: ToneOscillatorType, phase: Radians): Float32Array[] {\n\t\tconst fftSize = 4096;\n\t\tlet periodicWaveSize = fftSize / 2;\n\n\t\tconst real = new Float32Array(periodicWaveSize);\n\t\tconst imag = new Float32Array(periodicWaveSize);\n\n\t\tlet partialCount = 1;\n\t\tif (type === \"custom\") {\n\t\t\tpartialCount = this._partials.length + 1;\n\t\t\tthis._partialCount = this._partials.length;\n\t\t\tperiodicWaveSize = partialCount;\n\t\t} else {\n\t\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t\t\tif (partial) {\n\t\t\t\tpartialCount = parseInt(partial[2], 10) + 1;\n\t\t\t\tthis._partialCount = parseInt(partial[2], 10);\n\t\t\t\ttype = partial[1] as ToneOscillatorType;\n\t\t\t\tpartialCount = Math.max(partialCount, 2);\n\t\t\t\tperiodicWaveSize = partialCount;\n\t\t\t} else {\n\t\t\t\tthis._partialCount = 0;\n\t\t\t}\n\t\t\tthis._partials = [];\n\t\t}\n\n\t\t// tslint:disable: no-bitwise\n\t\tfor (let n = 1; n < periodicWaveSize; ++n) {\n\t\t\tconst piFactor = 2 / (n * Math.PI);\n\t\t\tlet b;\n\t\t\tswitch (type) {\n\t\t\t\tcase \"sine\":\n\t\t\t\t\tb = (n <= partialCount) ? 1 : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"square\":\n\t\t\t\t\tb = (n & 1) ? 2 * piFactor : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"sawtooth\":\n\t\t\t\t\tb = piFactor * ((n & 1) ? 1 : -1);\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"triangle\":\n\t\t\t\t\tif (n & 1) {\n\t\t\t\t\t\tb = 2 * (piFactor * piFactor) * ((((n - 1) >> 1) & 1) ? -1 : 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t}\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"custom\":\n\t\t\t\t\tb = this._partials[n - 1];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new TypeError(\"Oscillator: invalid type: \" + type);\n\t\t\t}\n\t\t\tif (b !== 0) {\n\t\t\t\treal[n] = -b * Math.sin(phase * n);\n\t\t\t\timag[n] = b * Math.cos(phase * n);\n\t\t\t} else {\n\t\t\t\treal[n] = 0;\n\t\t\t\timag[n] = 0;\n\t\t\t}\n\t\t}\n\t\treturn [real, imag];\n\t}\n\n\t/**\n\t *  Compute the inverse FFT for a given phase.\n\t */\n\tprivate _inverseFFT(real: Float32Array, imag: Float32Array, phase: Radians): number {\n\t\tlet sum = 0;\n\t\tconst len = real.length;\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tsum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t *  Returns the initial value of the oscillator.\n\t */\n\tprotected _getInitialValue(): AudioRange {\n\t\tconst [real, imag] = this._getRealImaginary(this._type, 0);\n\t\tlet maxValue = 0;\n\t\tconst twoPi = Math.PI * 2;\n\t\t// check for peaks in 8 places\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\tmaxValue = Math.max(this._inverseFFT(real, imag, (i / 8) * twoPi), maxValue);\n\t\t}\n\t\treturn -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t}\n\n\t/**\n\t * The partials of the waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tif (partials.length) {\n\t\t\tthis.type = \"custom\";\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t * @example\n\t * osc.phase = 180; //flips the phase of the oscillator\n\t */\n\tget phase(): Degrees {\n\t\treturn this._phase * (180 / Math.PI);\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase * Math.PI / 180;\n\t\t// reset the type\n\t\tthis.type = this._type;\n\t}\n\n\t/**\n\t *  Dispose and disconnect.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._oscillator !== null) {\n\t\t\tthis._oscillator.dispose();\n\t\t}\n\t\tthis._wave = undefined;\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck\";\n\ninterface ToneAudioBufferOptions {\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n\treverse: boolean;\n\tonload: (buffer?: ToneAudioBuffer) => void;\n\tonerror: (error: Error) => void;\n}\n\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n *\n * Aside from load callbacks from individual buffers, ToneAudioBuffer\n * provides events which keep track of the loading progress\n * of _all_ of the buffers. These are ToneAudioBuffer.on(\"load\" / \"progress\" / \"error\")\n *\n * @param url The url to load, or the audio buffer to set.\n * @param onload A callback which is invoked after the buffer is loaded.\n *                            It's recommended to use `ToneAudioBuffer.on('load', callback)` instead\n *                            since it will give you a callback when _all_ buffers are loaded.\n * @param onerror The callback to invoke if there is an error\n * @example\n * var buffer = new ToneAudioBuffer(\"path/to/sound.mp3\", function(){\n * \t//the buffer is now available.\n * \tvar buff = buffer.get();\n * });\n * @example\n * //can load provide fallback extension types if the first type is not supported.\n * var buffer = new ToneAudioBuffer(\"path/to/sound.[mp3|ogg|wav]\");\n */\nexport class ToneAudioBuffer extends Tone {\n\n\tname = \"ToneAudioBuffer\";\n\n\t/**\n\t *  stores the loaded AudioBuffer\n\t */\n\tprivate _buffer?: AudioBuffer;\n\n\t/**\n\t *  indicates if the buffer should be reversed or not\n\t */\n\tprivate _reversed!: boolean;\n\n\t/**\n\t * Callback when the buffer is loaded.\n\t */\n\tonload: (buffer: ToneAudioBuffer) => void = noOp;\n\n\tconstructor(options?: Partial<ToneAudioBufferOptions>);\n\tconstructor(\n\t\turl?: string | ToneAudioBuffer | AudioBuffer,\n\t\tonload?: (buffer: ToneAudioBuffer) => void,\n\t\tonerror?: (error: Error) => void,\n\t);\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tconst options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, [\"url\", \"onload\", \"onerror\"]);\n\n\t\tthis.reverse = options.reverse;\n\t\tthis.onload = options.onload;\n\n\t\tif (options.url && options.url instanceof AudioBuffer || options.url instanceof ToneAudioBuffer) {\n\t\t\tthis.set(options.url);\n\t\t} else if (isString(options.url)) {\n\t\t\t// initiate the download\n\t\t\tthis.load(options.url).catch(options.onerror);\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneAudioBufferOptions {\n\t\treturn {\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\treverse: false,\n\t\t};\n\t}\n\n\t/**\n\t * The sample rate of the AudioBuffer\n\t */\n\tget sampleRate(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.sampleRate;\n\t\t} else {\n\t\t\treturn getContext().sampleRate;\n\t\t}\n\t}\n\n\t/**\n\t *  Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n\t */\n\tset(buffer: AudioBuffer | ToneAudioBuffer): this {\n\t\tif (buffer instanceof ToneAudioBuffer) {\n\t\t\t// if it's loaded, set it\n\t\t\tif (buffer.loaded) {\n\t\t\t\tthis._buffer = buffer.get();\n\t\t\t} else {\n\t\t\t\t// otherwise when it's loaded, invoke it's callback\n\t\t\t\tbuffer.onload = () => {\n\t\t\t\t\tthis.set(buffer);\n\t\t\t\t\tthis.onload(this);\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tthis._buffer = buffer;\n\t\t}\n\t\t// reverse it initially\n\t\tif (this._reversed) {\n\t\t\tthis._reverse();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The audio buffer stored in the object.\n\t */\n\tget(): AudioBuffer | undefined {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t *  Makes an fetch request for the selected url then decodes the file as an audio buffer.\n\t * \tInvokes the callback once the audio buffer loads.\n\t *  @param url The url of the buffer to load. filetype support depends on the browser.\n\t *  @returns A Promise which resolves with this ToneAudioBuffer\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tconst promise = ToneAudioBuffer.load(url);\n\t\tToneAudioBuffer.downloads.push(promise);\n\t\ttry {\n\t\t\tconst audioBuffer = await promise;\n\t\t\tthis.set(audioBuffer);\n\t\t\t// invoke the onload method\n\t\t\tthis.onload(this);\n\t\t} catch (e) {\n\t\t\t// remove the failed file before throwing error\n\t\t\tconst index = ToneAudioBuffer.downloads.indexOf(promise);\n\t\t\tToneAudioBuffer.downloads.splice(index, 1);\n\t\t\tthrow e;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the audio buffer from the array.\n\t * To create a multichannel AudioBuffer, pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t */\n\tfromArray(array: Float32Array | Float32Array[]): this {\n\t\tconst isMultidimensional = isArray(array) && array[0].length > 0;\n\t\tconst channels = isMultidimensional ? array.length : 1;\n\t\tconst len = isMultidimensional ? (array[0] as Float32Array).length : array.length;\n\t\tconst context = getContext();\n\t\tconst buffer = context.createBuffer(channels, len, context.sampleRate);\n\t\tconst multiChannelArray: Float32Array[] = !isMultidimensional && channels === 1 ?\n\t\t\t[array as Float32Array] : array as Float32Array[];\n\n\t\tfor (let c = 0; c < channels; c++) {\n\t\t\tbuffer.copyToChannel(multiChannelArray[c], c);\n\t\t}\n\t\tthis._buffer = buffer;\n\t\treturn this;\n\t}\n\n\t/**\n\t * \tSums multiple channels into 1 channel\n\t *  @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoMono(chanNum?: number): this {\n\t\tif (isNumber(chanNum)) {\n\t\t\tthis.fromArray(this.toArray(chanNum));\n\t\t} else {\n\t\t\tlet outputArray = new Float32Array(this.length as number);\n\t\t\tconst numChannels = this.numberOfChannels;\n\t\t\tfor (let channel = 0; channel < numChannels; channel++) {\n\t\t\t\tconst channelArray = this.toArray(channel) as Float32Array;\n\t\t\t\tfor (let i = 0; i < channelArray.length; i++) {\n\t\t\t\t\toutputArray[i] += channelArray[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// divide by the number of channels\n\t\t\toutputArray = outputArray.map(sample => sample / numChannels);\n\t\t\tthis.fromArray(outputArray);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * \tGet the buffer as an array. Single channel buffers will return a 1-dimensional\n\t * \tFloat32Array, and multichannel buffers will return multidimensional arrays.\n\t *  @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoArray(channel?: number): Float32Array | Float32Array[] {\n\t\tif (isNumber(channel)) {\n\t\t\treturn this.getChannelData(channel);\n\t\t} else if (this.numberOfChannels === 1) {\n\t\t\treturn this.toArray(0);\n\t\t} else {\n\t\t\tconst ret: Float32Array[] = [];\n\t\t\tfor (let c = 0; c < this.numberOfChannels; c++) {\n\t\t\t\tret[c] = this.getChannelData(c);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t/**\n\t *  Returns the Float32Array representing the PCM audio data for the specific channel.\n\t *  @param  channel  The channel number to return\n\t *  @return The audio as a TypedArray\n\t */\n\tgetChannelData(channel: number): Float32Array {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.getChannelData(channel);\n\t\t} else {\n\t\t\treturn new Float32Array(0);\n\t\t}\n\t}\n\n\t/**\n\t *  Cut a subsection of the array and return a buffer of the\n\t *  subsection. Does not modify the original buffer\n\t *  @param start The time to start the slice\n\t *  @param end The end time to slice. If none is given will default to the end of the buffer\n\t */\n\tslice(start: Seconds, end: Seconds = this.duration): ToneAudioBuffer {\n\t\tconst startSamples = Math.floor(start * this.sampleRate);\n\t\tconst endSamples = Math.floor(end * this.sampleRate);\n\t\tthis.assert(startSamples < endSamples, \"The start time must be less than the end time\");\n\t\tconst length = endSamples - startSamples;\n\t\tconst retBuffer = getContext().createBuffer(this.numberOfChannels, length, this.sampleRate);\n\t\tfor (let channel = 0; channel < this.numberOfChannels; channel++) {\n\t\t\tretBuffer.copyFromChannel(this.getChannelData(channel).subarray(startSamples, endSamples), channel);\n\t\t}\n\t\treturn new ToneAudioBuffer(retBuffer);\n\t}\n\n\t/**\n\t *  Reverse the buffer.\n\t */\n\tprivate _reverse(): this {\n\t\tif (this.loaded) {\n\t\t\tfor (let i = 0; i < this.numberOfChannels; i++) {\n\t\t\t\tthis.getChannelData(i).reverse();\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffer is loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this.length > 0;\n\t}\n\n\t/**\n\t * The duration of the buffer in seconds.\n\t */\n\tget duration(): Seconds {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.duration;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The length of the buffer in samples\n\t */\n\tget length(): Samples {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n\t */\n\tget numberOfChannels(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.numberOfChannels;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tget reverse(): boolean {\n\t\treturn this._reversed;\n\t}\n\tset reverse(rev: boolean) {\n\t\tif (this._reversed !== rev) {\n\t\t\tthis._reversed = rev;\n\t\t\tthis._reverse();\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// STATIC METHODS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  A path which is prefixed before every url.\n\t */\n\tstatic baseUrl = \"\";\n\n\t/**\n\t *  Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n\t *  pass in a multidimensional array.\n\t *  @param array The array to fill the audio buffer\n\t *  @return A ToneAudioBuffer created from the array\n\t */\n\tstatic fromArray(array: Float32Array | Float32Array[]): ToneAudioBuffer {\n\t\treturn (new ToneAudioBuffer()).fromArray(array);\n\t}\n\n\t/**\n\t * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n\t * @param  url The url to load.\n\t * @return A promise which resolves to a ToneAudioBuffer\n\t */\n\tstatic async fromUrl(url: string): Promise<ToneAudioBuffer> {\n\t\tconst buffer = new ToneAudioBuffer();\n\t\treturn await buffer.load(url);\n\t}\n\n\t/**\n\t * All of the downloads\n\t */\n\tstatic downloads: Array<Promise<AudioBuffer>> = [];\n\n\t/**\n\t *  Loads a url using fetch and returns the AudioBuffer.\n\t */\n\tstatic async load(url: string): Promise<AudioBuffer> {\n\n\t\t// test if the url contains multiple extensions\n\t\tconst matches = url.match(/\\[(.+\\|?)+\\]$/);\n\t\tif (matches) {\n\t\t\tconst extensions = matches[1].split(\"|\");\n\t\t\tlet extension = extensions[0];\n\t\t\tfor (const ext of extensions) {\n\t\t\t\tif (ToneAudioBuffer.supportsType(ext)) {\n\t\t\t\t\textension = ext;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\turl = url.replace(matches[0], extension);\n\t\t}\n\n\t\tconst response = await fetch(ToneAudioBuffer.baseUrl + url);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`could not load url: ${url}`);\n\t\t}\n\t\tconst arrayBuffer = await response.arrayBuffer();\n\n\t\tconst audioBuffer = await getContext().decodeAudioData(arrayBuffer);\n\n\t\treturn audioBuffer;\n\t}\n\n\t/**\n\t *  Checks a url's extension to see if the current browser can play that file type.\n\t *  @param url The url/extension to test\n\t *  @return If the file extension can be played\n\t *  @static\n\t *  @example\n\t * ToneAudioBuffer.supportsType(\"wav\"); //returns true\n\t * ToneAudioBuffer.supportsType(\"path/to/file.wav\"); //returns true\n\t */\n\tstatic supportsType(url: string): boolean {\n\t\tconst extensions = url.split(\".\");\n\t\tconst extension = extensions[extensions.length - 1];\n\t\tconst response = document.createElement(\"audio\").canPlayType(\"audio/\" + extension);\n\t\treturn response !== \"\";\n\t}\n\n\t/**\n\t *  Returns a Promise which resolves when all of the buffers have loaded\n\t */\n\tstatic async loaded(): Promise<void> {\n\t\tfor (const promise of ToneAudioBuffer.downloads) {\n\t\t\tawait promise;\n\t\t}\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport \"../type/Units\";\nimport { getDefaultsFromInstance, omitFromObject, optionsFromArguments } from \"../util/Defaults\";\nimport { RecursivePartial } from \"../util/Interface\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck\";\nimport { Context } from \"./Context\";\n\n/**\n * A unit which process audio\n */\nexport interface ToneWithContextOptions {\n\tcontext: Context;\n}\n\n/**\n * The Base class for all nodes that have an AudioContext.\n */\nexport abstract class ToneWithContext<Options extends ToneWithContextOptions> extends Tone {\n\n\t/**\n\t * The context belonging to the node.\n\t */\n\treadonly context: Context;\n\n\t/**\n\t * The default context to use if no AudioContext is passed in to the constructor\n\t */\n\treadonly defaultContext?: Context;\n\n\tconstructor(context?: Context | Partial<ToneWithContextOptions>) {\n\t\tconst options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n\t\tsuper();\n\t\tif (this.defaultContext) {\n\t\t\tthis.context = this.defaultContext;\n\t\t} else {\n\t\t\tthis.context = options.context;\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneWithContextOptions {\n\t\treturn {\n\t\t\tcontext: getContext(),\n\t\t};\n\t}\n\n\t/**\n\t * Return the current time of the Context clock plus the lookAhead.\n\t */\n\tnow(): Seconds {\n\t\treturn this.context.currentTime + this.context.lookAhead;\n\t}\n\n\t/**\n\t * Return the current time of the Context clock without any lookAhead.\n\t */\n\timmediate(): Seconds {\n\t\treturn this.context.currentTime;\n\t}\n\n\t/**\n\t * The duration in seconds of one sample.\n\t */\n\tget sampleTime(): Seconds {\n\t\treturn 1 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * The number of seconds of 1 processing block (128 samples)\n\t */\n\tget blockTime(): Seconds {\n\t\treturn 128 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * Convert the incoming time to seconds\n\t */\n\ttoSeconds(time?: Time): Seconds {\n\t\treturn new TimeClass(this.context, time).toSeconds();\n\t}\n\n\t/**\n\t * Convert the input to a frequency number\n\t */\n\ttoFrequency(freq: Frequency): Hertz {\n\t\treturn new FrequencyClass(this.context, freq).toFrequency();\n\t}\n\n\t/**\n\t * Convert the input time into ticks\n\t */\n\ttoTicks(time: Time | TimeClass): Ticks {\n\t\treturn new TransportTimeClass(this.context, time).toTicks();\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tGET/SET\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Get the object's attributes.\n\t * @example\n\t * osc.get();\n\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t */\n\tget(): Options {\n\t\tconst defaults = getDefaultsFromInstance(this) as Options;\n\t\tObject.keys(defaults).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute)) {\n\t\t\t\tconst member = this[attribute];\n\t\t\t\tif (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n\t\t\t\t\tdefaults[attribute] = member.value;\n\t\t\t\t} else if (member instanceof ToneWithContext) {\n\t\t\t\t\tdefaults[attribute] = member.get();\n\t\t\t\t// otherwise make sure it's a serializable type\n\t\t\t\t} else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n\t\t\t\t\tdefaults[attribute] = member;\n\t\t\t\t} else {\n\t\t\t\t\t// remove all undefined and unserializable attributes\n\t\t\t\t\tdelete defaults[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn defaults;\n\t}\n\n\t/**\n\t * Set the parameters at once. Either pass in an\n\t * object mapping parameters to values, or to set a\n\t * single parameter, by passing in a string and value.\n\t * The last argument is an optional ramp time which\n\t * will ramp any signal values to their destination value\n\t * over the duration of the rampTime.\n\t * @param  params\n\t * @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : \"highpass\"\n\t * });\n\t */\n\tset(props: RecursivePartial<Options>): this {\n\t\tObject.keys(props).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute) && isDefined(this[attribute])) {\n\t\t\t\tif (this[attribute] && isDefined(this[attribute].value) && isDefined(this[attribute].setValueAtTime)) {\n\t\t\t\t\tthis[attribute].value = props[attribute];\n\t\t\t\t} else if (this[attribute] instanceof ToneWithContext) {\n\t\t\t\t\tthis[attribute].set(props[attribute]);\n\t\t\t\t} else {\n\t\t\t\t\tthis[attribute] = props[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\nimport { TransportTimeClass } from \"./TransportTime\";\n\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * const t = Ticks(\"4n\"); //a quarter note as ticks\n */\nexport class TicksClass extends TransportTimeClass<Ticks> {\n\n\tname = \"Ticks\";\n\n\treadonly defaultUnits: TimeBaseUnit = \"i\";\n\n\t/**\n\t * Get the current time in the given units\n\t */\n\tprotected _now(): Ticks {\n\t\treturn this.context.transport.ticks;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Ticks {\n\t\treturn this._getPPQ() * beats;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Ticks {\n\t\treturn Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Ticks {\n\t\treturn ticks;\n\t}\n\n\t/**\n\t *  Return the time in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\treturn this.valueOf() as Ticks;\n\t}\n\n\t/**\n\t *  Return the time in seconds\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn (this.valueOf() / this._getPPQ()) * (60 / this._getBpm());\n\t}\n}\n\nexport function Ticks(value?: TimeValue, units?: TimeBaseUnit): TicksClass {\n\treturn new TicksClass(getContext(), value, units);\n}\n","// import \"../type/Type\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\n\nexport type BasicPlaybackState = \"started\" | \"stopped\";\nexport type PlaybackState = BasicPlaybackState | \"paused\";\n\nexport interface StateTimelineEvent extends TimelineEvent {\n\tstate: PlaybackState;\n}\n\n/**\n *  A Timeline State. Provides the methods: `setStateAtTime(\"state\", time)` and `getValueAtTime(time)`\n *  @param initial The initial state of the StateTimeline.  Defaults to `undefined`\n */\nexport class StateTimeline<AdditionalOptions extends {} = {}> extends Timeline<StateTimelineEvent & AdditionalOptions> {\n\n\t/**\n\t *  The initial state\n\t */\n\tprivate _initial: PlaybackState;\n\n\tconstructor(initial: PlaybackState = \"stopped\") {\n\t\tsuper();\n\t\tthis._initial = initial;\n\t}\n\n\t/**\n\t *  Returns the scheduled state scheduled before or at\n\t *  the given time.\n\t *  @param  time  The time to query.\n\t *  @return  The name of the state input in setStateAtTime.\n\t */\n\tgetValueAtTime(time: Seconds): PlaybackState {\n\t\tconst event = this.get(time);\n\t\tif (event !== null) {\n\t\t\treturn event.state;\n\t\t} else {\n\t\t\treturn this._initial;\n\t\t}\n\t}\n\n\t/**\n\t *  Add a state to the timeline.\n\t * @param  state The name of the state to set.\n\t * @param  time  The time to query.\n\t * @param options Any additional options that are needed in the timeline.\n\t */\n\tsetStateAtTime(state: PlaybackState, time: Seconds, options?: AdditionalOptions): this {\n\t\t// all state changes need to be >= the previous state time\n\t\t// TODO throw error if time < the previous event time\n\t\tthis.add(Object.assign({}, options, {\n\t\t\tstate,\n\t\t\ttime,\n\t\t}));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Return the event before the time with the given state\n\t *  @param  state The state to look for\n\t *  @param  time  When to check before\n\t *  @return  The event with the given state before the time\n\t */\n\tgetLastState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tfor (let i = index; i >= 0; i--) {\n\t\t\tconst event = this._timeline[i];\n\t\t\tif (event.state === state) {\n\t\t\t\treturn event;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Return the event after the time with the given state\n\t *  @param  state The state to look for\n\t *  @param  time  When to check from\n\t *  @return  The event with the given state after the time\n\t */\n\tgetNextState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tif (index !== -1) {\n\t\t\tfor (let i = index; i < this._timeline.length; i++) {\n\t\t\t\tconst event = this._timeline[i];\n\t\t\t\tif (event.state === state) {\n\t\t\t\t\treturn event;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import { AbstractParam } from \"../context/AbstractParam\";\nimport { dbToGain, gainToDb } from \"../type/Conversions\";\nimport \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined, isNumber } from \"../util/TypeCheck\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\n\nexport interface ParamOptions extends ToneWithContextOptions {\n\tunits: UnitName;\n\tvalue?: any;\n\tparam: AudioParam;\n\tconvert: boolean;\n}\n\n/**\n * the possible automation types\n */\ntype AutomationType = \"linear\" | \"exponential\" | \"setValue\" | \"setTarget\" | \"cancel\";\n\n/**\n * The events on the automation\n */\nexport interface AutomationEvent {\n\ttype: AutomationType;\n\ttime: number;\n\tvalue: number;\n\tconstant?: number;\n}\n\n/**\n *  Param wraps the native Web Audio's AudioParam to provide\n * additional unit conversion functionality. It also\n * serves as a base-class for classes which have a single,\n * automatable parameter.\n */\nexport class Param<Type extends Unit = number>\nextends ToneWithContext<ParamOptions>\nimplements AbstractParam<Type> {\n\n\tname = \"Param\";\n\n\tstatic getDefaults(): ParamOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t} as ParamOptions);\n\t}\n\n\t/**\n\t * The input connection\n\t */\n\treadonly input: AudioParam;\n\treadonly units: UnitName;\n\tconvert: boolean;\n\toverridden: boolean = false;\n\n\t/**\n\t * The timeline which tracks all of the automations.\n\t */\n\tprotected _events: Timeline<AutomationEvent>;\n\n\t/**\n\t *  The native parameter to control\n\t */\n\tprotected _param: AudioParam;\n\n\t/**\n\t *  The default value before anything is assigned\n\t */\n\tprotected _initialValue: number;\n\n\t/**\n\t *  The minimum output value\n\t */\n\tprivate _minOutput = 1e-5;\n\n\tconstructor(param: AudioParam, units?: Unit, convert?: boolean);\n\tconstructor(options: Partial<ParamOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]));\n\n\t\tconst options = optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]);\n\n\t\tthis.assert(isDefined(options.param) && options.param instanceof AudioParam, \"param must be an AudioParam\");\n\n\t\t// initialize\n\t\tthis._param = this.input = options.param;\n\t\tthis._events = new Timeline<AutomationEvent>(1000);\n\t\tthis._initialValue = this._param.value;\n\t\tthis.units = options.units;\n\t\tthis.convert = options.convert;\n\n\t\t// if the value is defined, set it immediately\n\t\tif (isDefined(options.value)) {\n\t\t\tthis.setValueAtTime(options.value, 0);\n\t\t}\n\t}\n\n\tget value(): Type {\n\t\tconst now = this.now();\n\t\treturn this.getValueAtTime(now);\n\t}\n\tset value(value: Type) {\n\t\tthis._initialValue = this._fromType(value);\n\t\tthis.cancelScheduledValues(this.now());\n\t\tthis.setValueAtTime(value, this.now());\n\t}\n\n\tget minValue(): number {\n\t\tif (this.units === \"time\" || this.units === \"frequency\" ||\n\t\t\tthis.units === \"normalRange\" || this.units === \"positive\" ||\n\t\t\tthis.units === \"transportTime\" || this.units === \"ticks\" ||\n\t\t\tthis.units === \"bpm\" || this.units === \"hertz\" || this.units === \"samples\") {\n\t\t\treturn 0;\n\t\t} else if (this.units === \"audioRange\") {\n\t\t\treturn -1;\n\t\t} else if (this.units === \"decibels\") {\n\t\t\treturn -Infinity;\n\t\t} else {\n\t\t\treturn this._param.minValue;\n\t\t}\n\t}\n\n\tget maxValue(): number {\n\t\tif (this.units === \"normalRange\" ||\n\t\t\tthis.units === \"audioRange\") {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn this._param.maxValue;\n\t\t}\n\t}\n\n\t/**\n\t * Type guard based on the unit name\n\t */\n\tprivate _is<T>(arg: any, type: UnitName): arg is T {\n\t\treturn this.units === type;\n\t}\n\n\t/**\n\t *  Convert the given value from the type specified by Param.units\n\t *  into the destination value (such as Gain or Frequency).\n\t */\n\tprotected _fromType(val: Type): number {\n\t\tif (this.convert && !this.overridden) {\n\t\t\tif (this._is<Time>(val, \"time\")) {\n\t\t\t\treturn this.toSeconds(val);\n\t\t\t} else if (this._is<Decibels>(val, \"decibels\")) {\n\t\t\t\treturn dbToGain(val);\n\t\t\t} else if (this._is<Frequency>(val, \"frequency\")) {\n\t\t\t\treturn this.toFrequency(val);\n\t\t\t} else if (this._is<NormalRange>(val, \"normalRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, 0), 1);\n\t\t\t} else if (this._is<AudioRange>(val, \"audioRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, -1), 1);\n\t\t\t} else if (this._is<Positive>(val, \"positive\")) {\n\t\t\t\treturn Math.max(val, 0);\n\t\t\t} else if (this._is<number>(val, \"number\")) {\n\t\t\t\treturn val;\n\t\t\t} else {\n\t\t\t\treturn val as number;\n\t\t\t}\n\t\t} else {\n\t\t\treturn val as number;\n\t\t}\n\t}\n\n\t/**\n\t * Convert the parameters value into the units specified by Param.units.\n\t */\n\tprotected _toType(val: number): Type {\n\t\tif (this.convert && this.units === \"decibels\") {\n\t\t\treturn gainToDb(val) as Type;\n\t\t} else {\n\t\t\treturn val as Type;\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// ABSTRACT PARAM INTERFACE\n\t// all docs are generated from ParamInterface.ts\n\t///////////////////////////////////////////////////////////////////////////\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst numericValue = this._fromType(value);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValue\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(\"setValue\", value, computedTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(time)}`);\n\t\tthis._param.setValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\tgetValueAtTime(time: Time): Type {\n\t\tconst computedTime = Math.max(this.toSeconds(time), 0);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tconst before = this._events.get(computedTime);\n\t\tlet value = this._initialValue;\n\t\t// if it was set by\n\t\tif (before === null) {\n\t\t\tvalue = this._initialValue;\n\t\t} else if (before.type === \"setTarget\" && (after === null || after.type === \"setValue\")) {\n\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\tlet previousVal;\n\t\t\tif (previous === null) {\n\t\t\t\tpreviousVal = this._initialValue;\n\t\t\t} else {\n\t\t\t\tpreviousVal = previous.value;\n\t\t\t}\n\t\t\tif (isDefined(before.constant)) {\n\t\t\t\tvalue = this._exponentialApproach(before.time, previousVal, before.value, before.constant, computedTime);\n\t\t\t}\n\t\t} else if (after === null) {\n\t\t\tvalue = before.value;\n\t\t} else if (after.type === \"linear\" || after.type === \"exponential\") {\n\t\t\tlet beforeValue = before.value;\n\t\t\tif (before.type === \"setTarget\") {\n\t\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\t\tif (previous === null) {\n\t\t\t\t\tbeforeValue = this._initialValue;\n\t\t\t\t} else {\n\t\t\t\t\tbeforeValue = previous.value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (after.type === \"linear\") {\n\t\t\t\tvalue = this._linearInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t} else {\n\t\t\t\tvalue = this._exponentialInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = before.value;\n\t\t}\n\t\treturn this._toType(value);\n\t}\n\n\tsetRampPoint(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tlet currentVal = this.getValueAtTime(time);\n\t\tthis.cancelAndHoldAtTime(time);\n\t\tif (this._fromType(currentVal) === 0) {\n\t\t\tcurrentVal = this._toType(this._minOutput);\n\t\t}\n\t\tthis.setValueAtTime(currentVal, time);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: Type, endTime: Time): this {\n\t\tconst numericValue = this._fromType(value);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"linear\",\n\t\t\tvalue : numericValue,\n\t\t});\n\t\tthis.log(\"linear\", value, computedTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\tthis._param.linearRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: Type, endTime: Time): this {\n\t\tlet numericValue = this._fromType(value);\n\t\tnumericValue = Math.max(this._minOutput, numericValue);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\t// store the event\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"exponential\",\n\t\t\tvalue : numericValue,\n\t\t});\n\t\tthis.log(\"exponential\", value, computedTime);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\tthis._param.exponentialRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\tlinearRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\ttargetRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialApproachValueAtTime(value, startTime, rampTime);\n\t\treturn this;\n\t}\n\n\texponentialApproachValueAtTime(value: Type, time: Time, rampTime: Time): this {\n\t\tconst timeConstant = Math.log(this.toSeconds(rampTime) + 1) / Math.log(200);\n\t\ttime = this.toSeconds(time);\n\t\treturn this.setTargetAtTime(value, time, timeConstant);\n\t}\n\n\tsetTargetAtTime(value: Type, startTime: Time, timeConstant: Positive): this {\n\t\tconst numericValue = this._fromType(value);\n\t\t// The value will never be able to approach without timeConstant > 0.\n\t\tthis.assert(isFinite(timeConstant) && timeConstant > 0, \"timeConstant must be a number greater than 0\");\n\t\tconst computedTime = this.toSeconds(startTime);\n\t\tthis._events.add({\n\t\t\tconstant: timeConstant,\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setTarget\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(\"setTarget\", value, computedTime, timeConstant);\n\t\tthis.assert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setTargetAtTime: ${JSON.stringify(value)}, ${JSON.stringify(startTime)}`);\n\t\tthis._param.setTargetAtTime(numericValue, computedTime, timeConstant);\n\t\treturn this;\n\t}\n\n\tsetValueCurveAtTime(values: Type[], startTime: Time, duration: Time, scaling: number = 1): this {\n\t\tduration = this.toSeconds(duration);\n\t\tstartTime = this.toSeconds(startTime);\n\t\tconst startingValue = this._fromType(values[0]) * scaling;\n\t\tthis.setValueAtTime(this._toType(startingValue), startTime);\n\t\tconst segTime = duration / (values.length - 1);\n\t\tfor (let i = 1; i < values.length; i++) {\n\t\t\tconst numericValue = this._fromType(values[i]) * scaling;\n\t\t\tthis.linearRampToValueAtTime(this._toType(numericValue), startTime + i * segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tcancelScheduledValues(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._events.cancel(computedTime);\n\t\tthis.assert(isFinite(computedTime), `Invalid argument to cancelScheduledValues: ${JSON.stringify(time)}`);\n\t\tthis._param.cancelScheduledValues(computedTime);\n\t\tthis.log(\"cancel\", computedTime);\n\t\treturn this;\n\t}\n\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst valueAtTime = this._fromType(this.getValueAtTime(computedTime));\n\t\tthis.log(\"cancelAndHoldAtTime\", computedTime, \"value=\" + valueAtTime);\n\n\t\t// remove the schedule events\n\t\tthis.assert(isFinite(computedTime), `Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(time)}`);\n\t\tthis._param.cancelScheduledValues(computedTime);\n\n\t\t// if there is an event at the given computedTime\n\t\t// and that even is not a \"set\"\n\t\tconst before = this._events.get(computedTime);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tif (before && before.time === computedTime) {\n\t\t\t// remove everything after\n\t\t\tif (after) {\n\t\t\t\tthis._events.cancel(after.time);\n\t\t\t} else {\n\t\t\t\tthis._events.cancel(computedTime + this.sampleTime);\n\t\t\t}\n\t\t} else if (after) {\n\t\t\t// cancel the next event(s)\n\t\t\tthis._events.cancel(after.time);\n\t\t\tif (after.type === \"linear\") {\n\t\t\t\tthis.linearRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t} else if (after.type === \"exponential\") {\n\t\t\t\tthis.exponentialRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t}\n\t\t}\n\n\t\t// set the value at the given time\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValue\",\n\t\t\tvalue: valueAtTime,\n\t\t});\n\t\tthis._param.setValueAtTime(valueAtTime, computedTime);\n\t\treturn this;\n\t}\n\n\trampTo(value: Type, rampTime: Time = 0.1, startTime?: Time): this {\n\t\tif (this.units === \"frequency\" || this.units === \"bpm\" || this.units === \"decibels\") {\n\t\t\tthis.exponentialRampTo(value, rampTime, startTime);\n\t\t} else {\n\t\t\tthis.linearRampTo(value, rampTime, startTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tAUTOMATION CURVE CALCULATIONS\n\t// \tMIT License, copyright (c) 2014 Jordan Santell\n\t///////////////////////////////////////////////////////////////////////////\n\n\t// Calculates the the value along the curve produced by setTargetAtTime\n\tprotected _exponentialApproach(t0: number, v0: number, v1: number, timeConstant: number, t: number): number {\n\t\treturn v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t}\n\n\t// Calculates the the value along the curve produced by linearRampToValueAtTime\n\tprotected _linearInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t}\n\n\t// Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\tprotected _exponentialInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n */\nexport class TransportTimeClass<Type extends Seconds | Ticks = Seconds> extends TimeClass<Type> {\n\n\tname = \"TransportTime\";\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected _now(): Type {\n\t\treturn this.context.transport.seconds as Type;\n\t}\n}\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n */\nexport function TransportTime(value?: TimeValue, units?: TimeBaseUnit): TransportTimeClass {\n\treturn new TransportTimeClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { ftom } from \"./Conversions\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\n\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * var t = Time(\"4n\");//a quarter note\n */\nexport class TimeClass<Type extends Seconds | Ticks = Seconds, Unit extends string = TimeBaseUnit>\nextends TimeBaseClass<Type, Unit> {\n\n\tname = \"Time\";\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign(super._getExpressions(), {\n\t\t\tnow: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\treturn this._now() + new (this.constructor as typeof TimeClass)(this.context, capture).valueOf() as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^\\+(.+)/,\n\t\t\t},\n\t\t\tquantize: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\tconst quantTo = new TimeClass(this.context, capture).valueOf();\n\t\t\t\t\treturn this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));\n\t\t\t\t},\n\t\t\t\tregexp: /^@(.+)/,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Quantize the time by the given subdivision. Optionally add a\n\t * percentage which will move the time value towards the ideal\n\t * quantized value by that percentage.\n\t * @param  val    The subdivision to quantize to\n\t * @param  percent  Move the time value towards the quantized value by a percentage.\n\t * @example\n\t * Time(21).quantize(2) //returns 22\n\t * Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t */\n\tquantize(subdiv: number | Subdivision | TimeObject, percent = 1): Type {\n\t\tconst subdivision = new (this.constructor as typeof TimeClass)(this.context, subdiv).valueOf();\n\t\tconst value = this.valueOf();\n\t\tconst multiple = Math.round(value / subdivision);\n\t\tconst ideal = multiple * subdivision;\n\t\tconst diff = ideal - value;\n\t\treturn value + diff * percent as Type;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\t/**\n\t *  Convert a Time to Notation. The notation values are will be the\n\t *  closest representation between 1m to 128th note.\n\t *  @return {Notation}\n\t *  @example\n\t * //if the Transport is at 120bpm:\n\t * Time(2).toNotation();//returns \"1m\"\n\t */\n\ttoNotation(): Subdivision {\n\t\tconst time = this.toSeconds();\n\t\tconst testNotations: Subdivision[] = [\"1m\"];\n\t\tfor (let power = 1; power < 9; power++) {\n\t\t\tconst subdiv = Math.pow(2, power);\n\t\t\ttestNotations.push(subdiv + \"n.\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"n\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"t\" as Subdivision);\n\t\t}\n\t\ttestNotations.push(\"0\");\n\t\t// find the closets notation representation\n\t\tlet closest = testNotations[0];\n\t\tlet closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n\t\ttestNotations.forEach(notation => {\n\t\t\tconst notationSeconds = new TimeClass(this.context, notation).toSeconds();\n\t\t\tif (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n\t\t\t\tclosest = notation;\n\t\t\t\tclosestSeconds = notationSeconds;\n\t\t\t}\n\t\t});\n\t\treturn closest;\n\t}\n\n\t/**\n\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t */\n\ttoBarsBeatsSixteenths(): BarsBeatsSixteenths {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tlet quarters = this.valueOf() / quarterTime;\n\t\tquarters = parseFloat(quarters.toFixed(4));\n\t\tconst measures = Math.floor(quarters / this._getTimeSignature());\n\t\tlet sixteenths = (quarters % 1) * 4;\n\t\tquarters = Math.floor(quarters) % this._getTimeSignature();\n\t\tconst sixteenthString = sixteenths.toString();\n\t\tif (sixteenthString.length > 3) {\n\t\t\t// the additional parseFloat removes insignificant trailing zeroes\n\t\t\tsixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n\t\t}\n\t\tconst progress = [measures, quarters, sixteenths];\n\t\treturn progress.join(\":\");\n\t}\n\n\t/**\n\t *  Return the time in ticks.\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.round(quarters * this._getPPQ());\n\t}\n\n\t/**\n\t *  Return the time in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t *  Return the value as a midi note.\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.toFrequency());\n\t}\n\n\tprotected _now(): Type {\n\t\treturn this.context.now() as Type;\n\t}\n}\n\n/**\n * Create a TimeClass from a time string or number.\n * @param value A value which reprsents time\n * @param units The value's units if they can't be inferred by the value.\n */\nexport function Time(value?: TimeValue, units?: TimeBaseUnit): TimeClass<Seconds> {\n\treturn new TimeClass(getContext(), value, units);\n}\n","import \"./Units\";\n\n/**\n *  Equal power gain scale. Good for cross-fading.\n *  @param  percent (0-1)\n */\nexport function equalPowerScale(percent: NormalRange): number {\n\tconst piFactor = 0.5 * Math.PI;\n\treturn Math.sin(percent * piFactor);\n}\n\n/**\n *  Convert decibels into gain.\n */\nexport function dbToGain(db: Decibels): GainFactor {\n\treturn Math.pow(10, db / 20);\n}\n\n/**\n *  Convert gain to decibels.\n */\nexport function gainToDb(gain: GainFactor): Decibels {\n\treturn 20 * (Math.log(gain) / Math.LN10);\n}\n\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * tone.intervalToFrequencyRatio(0); // 1\n * tone.intervalToFrequencyRatio(12); // 2\n * tone.intervalToFrequencyRatio(-12); // 0.5\n */\nexport function intervalToFrequencyRatio(interval: Interval): number {\n\treturn Math.pow(2, (interval / 12));\n}\n\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\nlet A4: Hertz = 440;\n\nexport function getA4(): Hertz {\n\treturn A4;\n}\n\nexport function setA4(freq: Hertz): void {\n\tA4 = freq;\n}\n\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * ftom(440); // returns 69\n */\nexport function ftom(frequency: Hertz): MidiNote {\n\treturn 69 + Math.round(12 * Math.log2(frequency / A4));\n}\n\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n */\nexport function mtof(midi: MidiNote): Hertz {\n\treturn A4 * Math.pow(2, (midi - 69) / 12);\n}\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { OneShotSource, OneShotSourceCurve, OneShotSourceOptions } from \"../OneShotSource\";\n\nexport type ToneBufferSourceCurve = OneShotSourceCurve;\n\ninterface ToneBufferSourceOptions extends OneShotSourceOptions {\n\tbuffer: ToneAudioBuffer;\n\tcurve: ToneBufferSourceCurve;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tloop: boolean;\n\tonload: () => void;\n}\n\n/**\n *  Wrapper around the native BufferSourceNode.\n *  @param  buffer   The buffer to play\n *  @param  onended  The callback to invoke when the buffer is done playing.\n */\nexport class ToneBufferSource extends OneShotSource<ToneBufferSourceOptions> {\n\n\tname = \"ToneBufferSource\";\n\n\t/**\n\t *  The oscillator\n\t */\n\tprivate _source = this.context.createBufferSource();\n\tprotected _internalChannels = [this._gainNode, this._source];\n\n\t/**\n\t *  The frequency of the oscillator\n\t */\n\treadonly playbackRate: Param<Positive>;\n\n\t/**\n\t * The private instance of the buffer object\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * indicators if the source has started/stopped\n\t */\n\tprivate _sourceStarted: boolean = false;\n\tprivate _sourceStopped: boolean = false;\n\n\tconstructor(buffer?: ToneAudioBuffer | AudioBuffer | string, onload?: () => void);\n\tconstructor(options?: Partial<ToneBufferSourceOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]));\n\t\tconst options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]);\n\n\t\tconnect(this._source, this._gainNode);\n\t\tthis._source.onended = () => this._stopSource();\n\n\t\t/**\n\t\t *  The playbackRate of the buffer\n\t\t */\n\t\tthis.playbackRate = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._source.playbackRate,\n\t\t\tunits : \"positive\",\n\t\t\tvalue : options.playbackRate,\n\t\t});\n\n\t\t// set some values initially\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis._buffer = new ToneAudioBuffer(options.buffer, options.onload);\n\t}\n\n\tstatic getDefaults(): ToneBufferSourceOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tbuffer: new ToneAudioBuffer(),\n\t\t\tloop: false,\n\t\t\tloopEnd : 0,\n\t\t\tloopStart : 0,\n\t\t\tonload: noOp,\n\t\t\tplaybackRate : 1,\n\t\t});\n\t}\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(t: Time) {\n\t\tthis._fadeIn = t;\n\t}\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(t: Time) {\n\t\tthis._fadeOut = t;\n\t}\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tget curve(): ToneBufferSourceCurve {\n\t\treturn this._curve;\n\t}\n\tset curve(t) {\n\t\tthis._curve = t;\n\t}\n\n\t/**\n\t *  Start the buffer\n\t *  @param  time When the player should start.\n\t *  @param  offset The offset from the beginning of the sample to start at.\n\t *  @param  duration How long the sample should play. If no duration\n\t *                   is given, it will default to the full length\n\t *                   of the sample (minus any offset)\n\t *  @param  gain  The gain to play the buffer back at.\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time, gain: GainFactor = 1): this {\n\t\tthis.assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n\t\ttime = this.toSeconds(time);\n\n\t\t// apply the gain envelope\n\t\tthis._startGain(time, gain);\n\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this.loop) {\n\t\t\toffset = defaultArg(offset, this.loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\t\toffset = this.toSeconds(offset);\n\t\t// make sure the offset is not less than 0\n\t\toffset = Math.max(offset, 0);\n\n\t\t// start the buffer source\n\t\tif (this.loop) {\n\t\t\t// modify the offset if it's greater than the loop time\n\t\t\tconst loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\t\tconst loopStart = this.toSeconds(this.loopStart);\n\t\t\tconst loopDuration = loopEnd - loopStart;\n\t\t\t// move the offset back\n\t\t\tif (offset >= loopEnd) {\n\t\t\t\toffset = ((offset - loopStart) % loopDuration) + loopStart;\n\t\t\t}\n\t\t}\n\n\t\t// this.buffer.loaded would have return false if the AudioBuffer was undefined\n\t\tthis._source.buffer = this.buffer.get() as AudioBuffer;\n\t\tthis._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\tif (offset < this.buffer.duration) {\n\t\t\tthis._sourceStarted = true;\n\t\t\tthis._source.start(time, offset);\n\t\t}\n\n\t\t// if a duration is given, schedule a stop\n\t\tif (isDefined(duration)) {\n\t\t\tlet computedDur = this.toSeconds(duration);\n\t\t\t// make sure it's never negative\n\t\t\tcomputedDur = Math.max(computedDur, 0);\n\t\t\tthis.stop(time + computedDur);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tif (!this._sourceStopped) {\n\t\t\tthis._sourceStopped = true;\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._onended();\n\t\t}\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._source.loopStart;\n\t}\n\tset loopStart(loopStart: Time) {\n\t\tthis._source.loopStart = this.toSeconds(loopStart);\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._source.loopEnd;\n\t}\n\tset loopEnd(loopEnd: Time) {\n\t\tthis._source.loopEnd = this.toSeconds(loopEnd);\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer: ToneAudioBuffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._source.loop;\n\t}\n\tset loop(loop: boolean) {\n\t\tthis._source.loop = loop;\n\t\tif (this._sourceStarted) {\n\t\t\tthis.cancelStop();\n\t\t}\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._source.onended = null;\n\t\tthis._source.disconnect();\n\t\tthis._buffer.dispose();\n\t\tthis.playbackRate.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface VolumeOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  @class Volume is a simple volume node, useful for creating a volume fader.\n *\n *  @extends {Tone.AudioNode}\n *  @constructor\n *  @param {Decibels} [volume=0] the initial volume\n *  @example\n * var vol = new Volume(-12);\n * instrument.chain(vol, Tone.Master);\n */\nexport class Volume extends ToneAudioNode<VolumeOptions> {\n\n\tname = \"Volume\";\n\n\t/**\n\t * the output node\n\t */\n\toutput: Gain<Decibels> = new Gain({\n\t\tcontext: this.context,\n\t\tunits: \"decibels\",\n\t});\n\tprotected _internalChannels = [this.output];\n\n\t/**\n\t * Input and output are the same\n\t */\n\tinput = this.output;\n\n\t/**\n\t * The unmuted volume\n\t */\n\tprivate _unmutedVolume: Decibels;\n\n\t/**\n\t *  The volume control in decibels.\n\t */\n\tvolume: Param<Decibels> = this.output.gain;\n\n\tconstructor(options?: Decibels | Partial<VolumeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n\n\t\tthis.volume.value = options.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis._unmutedVolume = options.volume;\n\n\t\t// set the mute initially\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): VolumeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * volume.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.volume.value === -Infinity;\n\t}\n\tset mute(mute: boolean) {\n\t\tif (!this.mute && mute) {\n\t\t\tthis._unmutedVolume = this.volume.value;\n\t\t\t// maybe it should ramp here?\n\t\t\tthis.volume.value = -Infinity;\n\t\t} else if (this.mute && !mute) {\n\t\t\tthis.volume.value = this._unmutedVolume;\n\t\t}\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n","export { connect, disconnect, connectSeries } from \"./context/ToneAudioNode\";\n","import { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions\";\nimport { ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\n\nexport type FrequencyUnit = TimeBaseUnit | \"midi\";\n\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `eval` method.\n * @example\n * Frequency(\"C3\") // 261\n * Frequency(38, \"midi\") //\n * Frequency(\"C3\").transpose(4);\n */\nexport class FrequencyClass<Type extends number = Hertz> extends TimeClass<Type, FrequencyUnit> {\n\n\tname = \"Frequency\";\n\n\treadonly defaultUnits: FrequencyUnit = \"hz\";\n\n\t/**\n\t * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n\t * to generate all the other pitch values from notes. A4's values in Hertz.\n\t */\n\tstatic get A4(): Hertz {\n\t\treturn getA4();\n\t}\n\tstatic set A4(freq: Hertz) {\n\t\tsetA4(freq);\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tAUGMENT BASE EXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign({}, super._getExpressions(), {\n\t\t\tmidi : {\n\t\t\t\tregexp : /^(\\d+(?:\\.\\d+)?midi)/,\n\t\t\t\tmethod(value): number {\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(value);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tnote : {\n\t\t\t\tregexp : /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t\t\t\tmethod(pitch, octave): number {\n\t\t\t\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\t\t\t\tconst noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn noteNumber;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(noteNumber);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\ttr : {\n\t\t\t\tregexp : /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t\t\tmethod(m, q, s): number {\n\t\t\t\t\tlet total = 1;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total;\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tEXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Transposes the frequency by the given number of semitones.\n\t *  @return  A new transposed frequency\n\t *  @example\n\t * Frequency(\"A4\").transpose(3); //\"C5\"\n\t */\n\ttranspose(interval: Interval): FrequencyClass {\n\t\treturn new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n\t}\n\n\t/**\n\t *  Takes an array of semitone intervals and returns\n\t *  an array of frequencies transposed by those intervals.\n\t *  @return  Returns an array of Frequencies\n\t *  @example\n\t * Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t */\n\tharmonize(intervals: Interval[]): FrequencyClass[] {\n\t\treturn intervals.map(interval => {\n\t\t\treturn this.transpose(interval);\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Return the value of the frequency as a MIDI note\n\t *  @return  {MIDI}\n\t *  @example\n\t * Frequency(\"C4\").toMidi(); //60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.valueOf());\n\t}\n\n\t/**\n\t *  Return the value of the frequency in Scientific Pitch Notation\n\t *  @return  {Note}\n\t *  @example\n\t * Frequency(69, \"midi\").toNote(); //\"A4\"\n\t */\n\ttoNote(): Note {\n\t\tconst freq = this.toFrequency();\n\t\tconst log = Math.log2(freq / FrequencyClass.A4);\n\t\tlet noteNumber = Math.round(12 * log) + 57;\n\t\tconst octave = Math.floor(noteNumber / 12);\n\t\tif (octave < 0) {\n\t\t\tnoteNumber += -12 * octave;\n\t\t}\n\t\tconst noteName = scaleIndexToNote[noteNumber % 12];\n\t\treturn noteName + octave.toString();\n\t}\n\n\t/**\n\t *  Return the duration of one cycle in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn 1 / super.toSeconds();\n\t}\n\n\t/**\n\t *  Return the duration of one cycle in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.floor(quarters * this._getPPQ());\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS HELPERS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  With no arguments, return 0\n\t */\n\tprotected _noArg(): Type {\n\t\treturn 0 as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn freq as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn 1 / ((ticks * 60) / (this._getBpm() * this._getPPQ())) as Type;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn 1 / super._beatsToUnits(beats) as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn 1 / seconds as Type;\n\t}\n\n\t/**\n\t * Convert a MIDI note to frequency value.\n\t * @param  midi The midi number to convert.\n\t * @return The corresponding frequency value\n\t * @example\n\t * FrequencyClass.mtof(69); // returns 440\n\t */\n\tstatic mtof(midi: MidiNote): Hertz {\n\t\treturn mtof(midi);\n\t}\n\n\t/**\n\t * Convert a frequency value to a MIDI note.\n\t * @param frequency The value to frequency value to convert.\n\t * @example\n\t * Frequency.ftom(440); // returns 69\n\t */\n\tstatic ftom(frequency: Hertz): MidiNote {\n\t\treturn ftom(frequency);\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tFREQUENCY CONVERSIONS\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Note to scale index\n *  @type  {Object}\n *  @private\n */\nconst noteToScaleIndex = {\n\t// tslint:disable-next-line\n\t\"cbb\" : -2, \"cb\" : -1, \"c\" : 0, \"c#\" : 1, \"cx\" : 2,\n\t\"dbb\" : 0, \"db\" : 1, \"d\" : 2, \"d#\" : 3, \"dx\" : 4,\n\t\"ebb\" : 2, \"eb\" : 3, \"e\" : 4, \"e#\" : 5, \"ex\" : 6,\n\t\"fbb\" : 3, \"fb\" : 4, \"f\" : 5, \"f#\" : 6, \"fx\" : 7,\n\t\"gbb\" : 5, \"gb\" : 6, \"g\" : 7, \"g#\" : 8, \"gx\" : 9,\n\t\"abb\" : 7, \"ab\" : 8, \"a\" : 9, \"a#\" : 10, \"ax\" : 11,\n\t\"bbb\" : 9, \"bb\" : 10, \"b\" : 11, \"b#\" : 12, \"bx\" : 13,\n};\n\n/**\n *  scale index to note (sharps)\n *  @type  {Array}\n *  @private\n */\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n/**\n * Convert a value into a FrequencyClass object.\n */\nexport function Frequency(value?: TimeValue | Frequency, units?: FrequencyUnit): FrequencyClass {\n\treturn new FrequencyClass(getContext(), value, units);\n}\n","import { Tone } from \"../Tone\";\nimport { isUndef } from \"./TypeCheck\";\n\nexport interface EmitterEventObject {\n\t[event: string]: Array<(...args: any[]) => void>;\n}\n\n/**\n * Emitter gives classes which extend it\n * the ability to listen for and emit events.\n * Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n * MIT (c) 2011 Jerome Etienne.\n */\nexport class Emitter<EventType extends string = string> extends Tone {\n\n\tname = \"Emitter\";\n\n\t/**\n\t * Private container for the events\n\t */\n\tprivate _events?: EmitterEventObject;\n\n\t/**\n\t *  Bind a callback to a specific event.\n\t *  @param  event     The name of the event to listen for.\n\t *  @param  callback  The callback to invoke when the event is emitted\n\t */\n\ton(event: EventType, callback: (...args: any[]) => void): this {\n\t\t// split the event\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (!this._events.hasOwnProperty(eventName)) {\n\t\t\t\tthis._events[eventName] = [];\n\t\t\t}\n\t\t\tthis._events[eventName].push(callback);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Bind a callback which is only invoked once\n\t *  @param  event     The name of the event to listen for.\n\t *  @param  callback  The callback to invoke when the event is emitted\n\t */\n\tonce(event: EventType, callback: (...args: any[]) => void): this {\n\t\tconst boundCallback = (...args: any[])  => {\n\t\t\t// invoke the callback\n\t\t\tcallback(...args);\n\t\t\t// remove the event\n\t\t\tthis.off(event, boundCallback);\n\t\t};\n\t\tthis.on(event, boundCallback);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove the event listener.\n\t *  @param  event     The event to stop listening to.\n\t *  @param  callback  The callback which was bound to the event with Emitter.on.\n\t *                    If no callback is given, all callbacks events are removed.\n\t */\n\toff(event: EventType, callback?: (...args: any[]) => void): this {\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tif (isUndef(callback)) {\n\t\t\t\t\tthis._events[event] = [];\n\t\t\t\t} else {\n\t\t\t\t\tconst eventList = this._events[event];\n\t\t\t\t\tfor (let i = 0; i < eventList.length; i++) {\n\t\t\t\t\t\tif (eventList[i] === callback) {\n\t\t\t\t\t\t\teventList.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Invoke all of the callbacks bound to the event\n\t *  with any arguments passed in.\n\t *  @param  event  The name of the event.\n\t *  @param args The arguments to pass to the functions listening.\n\t */\n\temit(event, ...args: any[]): this {\n\t\tif (this._events) {\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tconst eventList = this._events[event].slice(0);\n\t\t\t\tfor (let i = 0, len = eventList.length; i < len; i++) {\n\t\t\t\t\teventList[i].apply(this, args);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Add Emitter functions (on/off/emit) to the object\n\t */\n\tstatic mixin(constr: any): void {\n\t\t// instance._events = {};\n\t\t[\"on\", \"once\", \"off\", \"emit\"].forEach(name => {\n\t\t\tconst property = Object.getOwnPropertyDescriptor(Emitter.prototype, name) as PropertyDescriptor;\n\t\t\tObject.defineProperty(constr.prototype, name, property);\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events = undefined;\n\t\treturn this;\n\t}\n}\n","import \"../core/clock/Transport\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../core/context/ToneWithContext\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline } from \"../core/util/StateTimeline\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck\";\n\nexport type ToneEventCallback = (time: Seconds, value: any) => void;\n\nexport interface ToneEventOptions extends ToneWithContextOptions {\n\tcallback: ToneEventCallback;\n\tloop: boolean | number;\n\tloopEnd: Time;\n\tloopStart: Time;\n\tplaybackRate: Positive;\n\tvalue?: any;\n\tprobability: NormalRange;\n\tmute: boolean;\n\thumanize: boolean | Time;\n}\n\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @extends {Tone}\n * @param callback The callback to invoke at the time.\n * @param value The value or values which should be passed to the callback function on invocation.\n * @example\n * var chord = new ToneEvent(function(time, chord){\n * \t//the chord as well as the exact time of the event\n * \t//are passed in as arguments to the callback function\n * }, [\"D4\", \"E4\", \"F4\"]);\n * //start the chord at the beginning of the transport timeline\n * chord.start();\n * //loop it every measure for 8 measures\n * chord.loop = 8;\n * chord.loopEnd = \"1m\";\n */\nexport class ToneEvent extends ToneWithContext<ToneEventOptions> {\n\n\tname = \"ToneEvent\";\n\n\t/**\n\t *  Loop value\n\t */\n\tprotected _loop: boolean | number;\n\n\t/**\n\t *  The callback to invoke.\n\t */\n\tcallback: ToneEventCallback;\n\n\t/**\n\t *  The value which is passed to the\n\t *  callback function.\n\t */\n\tvalue: any;\n\n\t/**\n\t *  When the note is scheduled to start.\n\t */\n\tprotected _loopStart: Ticks;\n\n\t/**\n\t *  When the note is scheduled to start.\n\t */\n\tprotected _loopEnd: Ticks;\n\n\t/**\n\t *  Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number,\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t *  The playback speed of the note. A speed of 1\n\t *  is no change.\n\t */\n\tprotected _playbackRate: Positive;\n\n\t/**\n\t *  A delay time from when the event is scheduled to start\n\t */\n\tprotected _startOffset: Ticks = 0;\n\n\t/**\n\t *  private holder of probability value\n\t */\n\tprotected _probability: NormalRange;\n\n\t/**\n\t *  the amount of variation from the given time.\n\t */\n\tprotected _humanize: boolean | Time;\n\n\t/**\n\t *  If mute is true, the callback won't be invoked.\n\t */\n\tmute: boolean;\n\n\tconstructor(options?: Partial<ToneEventOptions>);\n\tconstructor(callback?: ToneEventCallback, value?: any);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]));\n\t\tconst options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n\n\t\tthis._loop = options.loop;\n\t\tthis.callback = options.callback;\n\t\tthis.value = options.value;\n\t\tthis._loopStart = this.toTicks(options.loopStart);\n\t\tthis._loopEnd = this.toTicks(options.loopEnd);\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis._probability = options.probability;\n\t\tthis._humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis.playbackRate = options.playbackRate;\n\t}\n\n\tstatic getDefaults(): ToneEventOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback : noOp,\n\t\t\thumanize : false,\n\t\t\tloop : false,\n\t\t\tloopEnd : \"1m\",\n\t\t\tloopStart : 0,\n\t\t\tmute : false,\n\t\t\tplaybackRate : 1,\n\t\t\tprobability : 1,\n\t\t\tvalue : null,\n\t\t});\n\t}\n\n\t/**\n\t *  Reschedule all of the events along the timeline\n\t *  with the updated values.\n\t *  @param after Only reschedules events after the given time.\n\t *  @private\n\t */\n\tprivate _rescheduleEvents(after: Ticks = -1): void {\n\t\t// if no argument is given, schedules all of the events\n\t\tthis._state.forEachFrom(after, event => {\n\t\t\tlet duration;\n\t\t\tif (event.state === \"started\") {\n\t\t\t\tif (event.id !== -1) {\n\t\t\t\t\tthis.context.transport.clear(event.id);\n\t\t\t\t}\n\t\t\t\tconst startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t\t\t\tif (this._loop === true || isNumber(this._loop) && this._loop > 1) {\n\t\t\t\t\tduration = Infinity;\n\t\t\t\t\tif (isNumber(this._loop)) {\n\t\t\t\t\t\tduration = (this._loop) * this._getLoopDuration();\n\t\t\t\t\t}\n\t\t\t\t\tconst nextEvent = this._state.getAfter(startTick);\n\t\t\t\t\tif (nextEvent !== null) {\n\t\t\t\t\t\tduration = Math.min(duration, nextEvent.time - startTick);\n\t\t\t\t\t}\n\t\t\t\t\tif (duration !== Infinity) {\n\t\t\t\t\t\t// schedule a stop since it's finite duration\n\t\t\t\t\t\tthis._state.setStateAtTime(\"stopped\", startTick + duration + 1, { id : -1 });\n\t\t\t\t\t\tduration = new TicksClass(this.context, duration);\n\t\t\t\t\t}\n\t\t\t\t\tconst interval = new TicksClass(this.context, this._getLoopDuration());\n\t\t\t\t\tevent.id = this.context.transport.scheduleRepeat(\n\t\t\t\t\t\tthis._tick.bind(this), interval, new TicksClass(this.context, startTick), duration);\n\t\t\t\t} else {\n\t\t\t\t\tevent.id = this.context.transport.schedule(this._tick.bind(this), new TicksClass(this.context, startTick));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the note, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this._state.getValueAtTime(this.context.transport.ticks) as BasicPlaybackState;\n\t}\n\n\t/**\n\t * The start from the scheduled start time.\n\t */\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t}\n\n\t/**\n\t *  The probability of the notes being triggered.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t}\n\n\t/**\n\t *  If set to true, will apply small random variation\n\t *  to the callback time. If the value is given as a time, it will randomize\n\t *  by that amount.\n\t * @example\n\t * event.humanize = true;\n\t */\n\tget humanize(): Time | boolean {\n\t\treturn this._humanize;\n\t}\n\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t}\n\n\t/**\n\t *  Start the note at the given time.\n\t *  @param  time  When the event should start.\n\t */\n\tstart(time?: TransportTime | TransportTimeClass): this {\n\t\ttime = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(time) === \"stopped\") {\n\t\t\tthis._state.add({\n\t\t\t\tid : -1,\n\t\t\t\tstate : \"started\",\n\t\t\t\ttime,\n\t\t\t});\n\t\t\tthis._rescheduleEvents(time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the Event at the given time.\n\t *  @param  time  When the event should stop.\n\t */\n\tstop(time?: TransportTime | TransportTimeClass): this {\n\t\tthis.cancel(time);\n\t\ttime = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(time) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"stopped\", time, { id: -1 });\n\t\t\tconst previousEvent = this._state.getBefore(time);\n\t\t\tlet reschedulTime = time;\n\t\t\tif (previousEvent !== null) {\n\t\t\t\treschedulTime = previousEvent.time;\n\t\t\t}\n\t\t\tthis._rescheduleEvents(reschedulTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel all scheduled events greater than or equal to the given time\n\t *  @param  time  The time after which events will be cancel.\n\t */\n\tcancel(time?: TransportTime | TransportTimeClass): this {\n\t\ttime = defaultArg(time, -Infinity);\n\t\ttime = this.toTicks(time);\n\t\tthis._state.forEachFrom(time, event => {\n\t\t\tthis.context.transport.clear(event.id);\n\t\t});\n\t\tthis._state.cancel(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The callback function invoker. Also\n\t *  checks if the Event is done playing\n\t *  @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds): void {\n\t\tconst ticks = this.context.transport.getTicksAtTime(time);\n\t\tif (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n\t\t\tif (this.probability < 1 && Math.random() > this.probability) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.humanize) {\n\t\t\t\tlet variation = 0.02;\n\t\t\t\tif (!isBoolean(this.humanize)) {\n\t\t\t\t\tvariation = this.toSeconds(this.humanize);\n\t\t\t\t}\n\t\t\t\ttime += (Math.random() * 2 - 1) * variation;\n\t\t\t}\n\t\t\tthis.callback(time, this.value);\n\t\t}\n\t}\n\n\t/**\n\t *  Get the duration of the loop.\n\t */\n\tprotected _getLoopDuration(): Ticks {\n\t\treturn Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t}\n\n\t/**\n\t *  If the note should loop or not\n\t *  between ToneEvent.loopStart and\n\t *  ToneEvent.loopEnd. If set to true,\n\t *  the event will loop indefinitely,\n\t *  if set to a number greater than 1\n\t *  it will play a specific number of\n\t *  times, if set to false, 0 or 1, the\n\t *  part will only play once.\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t * \tThe playback rate of the note. Defaults to 1.\n\t *  @example\n\t * note.loop = true;\n\t * //repeat the note twice as fast\n\t * note.playbackRate = 2;\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t *  The loopEnd point is the time the event will loop\n\t *  if ToneEvent.loop is true.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t *  The time when the loop should start.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t *  The current progress of the loop interval.\n\t *  Returns 0 if the event is not started yet or\n\t *  it is not set to loop.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this._loop) {\n\t\t\tconst ticks = this.context.transport.ticks;\n\t\t\tconst lastEvent = this._state.get(ticks);\n\t\t\tif (lastEvent !== null && lastEvent.state === \"started\") {\n\t\t\t\tconst loopDuration = this._getLoopDuration();\n\t\t\t\tconst progress = (ticks - lastEvent.time) % loopDuration;\n\t\t\t\treturn progress / loopDuration;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.cancel();\n\t\tthis._state.dispose();\n\t\tthis.value = null;\n\t\treturn this;\n\t}\n}\n","import { InputNode, OutputNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { isArray, isObject, isString } from \"../../core/util/TypeCheck\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\n\ntype BasicEnvelopeCurve = \"linear\" | \"exponential\";\ntype InternalEnvelopeCurve = BasicEnvelopeCurve | number[];\nexport type EnvelopeCurve = EnvelopeCurveName | number[];\n\nexport interface EnvelopeOptions extends ToneAudioNodeOptions {\n\tattack: Time;\n\tdecay: Time;\n\tsustain: NormalRange;\n\trelease: Time;\n\tattackCurve: EnvelopeCurve;\n\treleaseCurve: EnvelopeCurve;\n\tdecayCurve: BasicEnvelopeCurve;\n}\n\n/**\n *  Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n *  envelope generator. Envelope outputs a signal which\n *  can be connected to an AudioParam or Tone.Signal.\n *  <img src=\"https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg\">\n *\n *  @param attack The amount of time it takes for the envelope to go from\n *                         0 to it's maximum value.\n *  @param decay\tThe period of time after the attack that it takes for the envelope\n *                       \tto fall to the sustain value. Value must be greater than 0.\n *  @param sustain\tThe percent of the maximum value that the envelope rests at until\n *                                \tthe release is triggered.\n *  @param release\tThe amount of time after the release is triggered it takes to reach 0.\n *                         \tValue must be greater than 0.\n *  @example\n * //an amplitude envelope\n * var gainNode = Tone.context.createGain();\n * var env = new Envelope({\n * \t\"attack\" : 0.1,\n * \t\"decay\" : 0.2,\n * \t\"sustain\" : 1,\n * \t\"release\" : 0.8,\n * });\n * env.connect(gainNode.gain);\n */\nexport class Envelope extends ToneAudioNode<EnvelopeOptions> {\n\n\tname = \"Envelope\";\n\n\t/**\n\t *  When triggerAttack is called, the attack time is the amount of\n\t *  time it takes for the envelope to reach it's maximum value.\n\t */\n\tattack: Time;\n\n\t/**\n\t *  After the attack portion of the envelope, the value will fall\n\t *  over the duration of the decay time to it's sustain value.\n\t */\n\tdecay: Time;\n\n\t/**\n\t * \tThe sustain value is the value\n\t * \twhich the envelope rests at after triggerAttack is\n\t * \tcalled, but before triggerRelease is invoked.\n\t */\n\tsustain: NormalRange;\n\n\t/**\n\t *  After triggerRelease is called, the envelope's\n\t *  value will fall to it's miminum value over the\n\t *  duration of the release time.\n\t */\n\trelease: Time;\n\n\t/**\n\t *  The automation curve type for the attack\n\t */\n\tprivate _attackCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t *  The automation curve type for the decay\n\t */\n\tprivate _decayCurve!: BasicEnvelopeCurve;\n\n\t/**\n\t *  The automation curve type for the release\n\t */\n\tprivate _releaseCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t *  the signal which is output.\n\t */\n\tprotected _sig: Signal<NormalRange> = new Signal({\n\t\tcontext: this.context,\n\t\tvalue: 0,\n\t});\n\tprotected _internalChannels = [this._sig];\n\n\t/**\n\t * The output signal of the envelope\n\t */\n\toutput: OutputNode = this._sig;\n\n\t/**\n\t * Envelope has no input\n\t */\n\tinput: InputNode | undefined = undefined;\n\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tconst options = optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n\n\t\tthis.attack = options.attack;\n\t\tthis.decay = options.decay;\n\t\tthis.sustain = options.sustain;\n\t\tthis.release = options.release;\n\t\tthis.attackCurve = options.attackCurve;\n\t\tthis.releaseCurve = options.releaseCurve;\n\t\tthis.decayCurve = options.decayCurve;\n\t}\n\n\tstatic getDefaults(): EnvelopeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tattack : 0.01,\n\t\t\tattackCurve : \"linear\" as EnvelopeCurveName,\n\t\t\tdecay : 0.1,\n\t\t\tdecayCurve : \"exponential\" as BasicEnvelopeCurve,\n\t\t\trelease : 1,\n\t\t\treleaseCurve : \"exponential\" as EnvelopeCurveName,\n\t\t\tsustain : 0.5,\n\t\t});\n\t}\n\n\t/**\n\t * Read the current value of the envelope. Useful for\n\t * syncronizing visual output to the envelope.\n\t */\n\tget value(): NormalRange {\n\t\treturn this.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Get the curve\n\t *  @param  curve\n\t *  @param  direction  In/Out\n\t *  @return  {String}  The curve name\n\t *  @private\n\t */\n\tprivate _getCurve(curve: InternalEnvelopeCurve, direction: EnvelopeDirection): EnvelopeCurve {\n\t\tif (isString(curve)) {\n\t\t\treturn curve;\n\t\t} else {\n\t\t\t// look up the name in the curves array\n\t\t\tlet curveName: EnvelopeCurveName;\n\t\t\tfor (curveName in EnvelopeCurves) {\n\t\t\t\tif (EnvelopeCurves[curveName][direction] === curve) {\n\t\t\t\t\treturn curveName;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// return the custom curve\n\t\t\treturn curve;\n\t\t}\n\t}\n\n\t/**\n\t *  Assign a the curve to the given name using the direction\n\t *  @param  name\n\t *  @param  direction In/Out\n\t *  @param  curve\n\t *  @private\n\t */\n\tprivate _setCurve(\n\t\tname: \"_attackCurve\" | \"_decayCurve\" | \"_releaseCurve\",\n\t\tdirection: EnvelopeDirection,\n\t\tcurve: EnvelopeCurve,\n\t): void {\n\t\t// check if it's a valid type\n\t\tif (isString(curve) && Reflect.has(EnvelopeCurves, curve)) {\n\t\t\tconst curveDef = EnvelopeCurves[curve];\n\t\t\tif (isObject(curveDef)) {\n\t\t\t\tif (name !== \"_decayCurve\") {\n\t\t\t\t\tthis[name] = curveDef[direction];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis[name] = curveDef;\n\t\t\t}\n\t\t} else if (isArray(curve) && name !== \"_decayCurve\") {\n\t\t\tthis[name] = curve;\n\t\t} else {\n\t\t\tthrow new Error(\"Envelope: invalid curve: \" + curve);\n\t\t}\n\t}\n\n\t/**\n\t * The shape of the attack.\n\t * Can be any of these strings:\n\t * * linear\n\t * * exponential\n\t * * sine\n\t * * cosine\n\t * * bounce\n\t * * ripple\n\t * * step\n\t * Can also be an array which describes the curve. Values\n\t * in the array are evenly subdivided and linearly\n\t * interpolated over the duration of the attack.\n\t * @memberOf Envelope#\n\t * @type {String|Array}\n\t * @name attackCurve\n\t * @example\n\t * env.attackCurve = \"linear\";\n\t * @example\n\t * //can also be an array\n\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]\n\t */\n\tget attackCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._attackCurve, \"In\");\n\t}\n\tset attackCurve(curve) {\n\t\tthis._setCurve(\"_attackCurve\", \"In\", curve);\n\t}\n\n\t/**\n\t * The shape of the release. See the attack curve types.\n\t * @memberOf Envelope#\n\t * @type {String|Array}\n\t * @name releaseCurve\n\t * @example\n\t * env.releaseCurve = \"linear\";\n\t */\n\tget releaseCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._releaseCurve, \"Out\");\n\t}\n\tset releaseCurve(curve) {\n\t\tthis._setCurve(\"_releaseCurve\", \"Out\", curve);\n\t}\n\n\t/**\n\t * The shape of the decay either \"linear\" or \"exponential\"\n\t * @memberOf Envelope#\n\t * @type {String}\n\t * @name decayCurve\n\t * @example\n\t * env.decayCurve = \"linear\";\n\t */\n\tget decayCurve(): BasicEnvelopeCurve {\n\t\treturn this._decayCurve;\n\t}\n\tset decayCurve(curve) {\n\t\tthis.assert([\"linear\", \"exponential\"].some(c => c === curve), `Invalid envelope curve: ${curve}`);\n\t\tthis._decayCurve = curve;\n\t}\n\n\t/**\n\t * Trigger the attack/decay portion of the ADSR envelope.\n\t * @param  time When the attack should start.\n\t * @param velocity The velocity of the envelope scales the vales.\n\t *                              number between 0-1\n\t * @example\n\t * //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t * env.triggerAttack(\"+0.5\", 0.2);\n\t */\n\ttriggerAttack(time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", time, velocity);\n\t\ttime = this.toSeconds(time);\n\t\tconst originalAttack = this.toSeconds(this.attack);\n\t\tlet attack = originalAttack;\n\t\tconst decay = this.toSeconds(this.decay);\n\t\t// check if it's not a complete attack\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\t// subtract the current value from the attack time\n\t\t\tconst attackRate = 1 / attack;\n\t\t\tconst remainingDistance = 1 - currentValue;\n\t\t\t// the attack is now the remaining time\n\t\t\tattack = remainingDistance / attackRate;\n\t\t}\n\t\t// attack\n\t\tif (attack === 0) {\n\t\t\t// case where the attack time is 0 should set instantly\n\t\t\tthis._sig.setValueAtTime(velocity, time);\n\t\t} else if (this._attackCurve === \"linear\") {\n\t\t\tthis._sig.linearRampTo(velocity, attack, time);\n\t\t} else if (this._attackCurve === \"exponential\") {\n\t\t\tthis._sig.targetRampTo(velocity, attack, time);\n\t\t} else if (attack > 0) {\n\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\tlet curve = this._attackCurve;\n\t\t\t// find the starting position in the curve\n\t\t\tfor (let i = 1; i < curve.length; i++) {\n\t\t\t\t// the starting index is between the two values\n\t\t\t\tif (curve[i - 1] <= currentValue && currentValue <= curve[i]) {\n\t\t\t\t\tcurve = this._attackCurve.slice(i);\n\t\t\t\t\t// the first index is the current value\n\t\t\t\t\tcurve[0] = currentValue;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t\t}\n\t\t// decay\n\t\tif (decay) {\n\t\t\tconst decayValue = velocity * this.sustain;\n\t\t\tconst decayStart = time + attack;\n\t\t\tthis.log(\"decay\", decayStart);\n\t\t\tif (this._decayCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(decayValue, decay, decayStart + this.sampleTime);\n\t\t\t} else if (this._decayCurve === \"exponential\") {\n\t\t\t\tthis._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Triggers the release of the envelope.\n\t *  @param  time When the release portion of the envelope should start.\n\t *  @example\n\t *  //trigger release immediately\n\t *  env.triggerRelease();\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\ttime = this.toSeconds(time);\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\tconst release = this.toSeconds(this.release);\n\t\t\tif (this._releaseCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(0, release, time);\n\t\t\t} else if (this._releaseCurve === \"exponential\") {\n\t\t\t\tthis._sig.targetRampTo(0, release, time);\n\t\t\t} else {\n\t\t\t\tif (isArray(this._releaseCurve)) {\n\t\t\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\t\t\tthis._sig.setValueCurveAtTime(this._releaseCurve, time, release, currentValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the scheduled value at the given time. This will\n\t *  return the unconverted (raw) value.\n\t */\n\tgetValueAtTime(time: Time): NormalRange {\n\t\treturn this._sig.getValueAtTime(time);\n\t}\n\n\t/**\n\t *  triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t *  some duration, then triggerRelease.\n\t *  @param duration The duration of the sustain.\n\t *  @param time When the attack should be triggered.\n\t *  @param velocity The velocity of the envelope.\n\t *  @example\n\t * //trigger the attack and then the release after 0.6 seconds.\n\t * env.triggerAttackRelease(0.6);\n\t */\n\ttriggerAttackRelease(duration: Time, time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis.triggerAttack(time, velocity);\n\t\tthis.triggerRelease(time + this.toSeconds(duration));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancels all scheduled envelope changes after the given time.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._sig.cancelScheduledValues(after);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the envelope to a destination node.\n\t */\n\tconnect(destination: InputNode, outputNumber: number = 0, inputNumber: number = 0): this {\n\t\tconnectSignal(this, destination, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sig.dispose();\n\t\treturn this;\n\t}\n}\n\ninterface EnvelopeCurveObject {\n\tIn: number[];\n\tOut: number[];\n}\n\ntype EnvelopeDirection = keyof EnvelopeCurveObject;\n\ninterface EnvelopeCurveMap {\n\tlinear: \"linear\";\n\texponential: \"exponential\";\n\tbounce: EnvelopeCurveObject;\n\tcosine: EnvelopeCurveObject;\n\tsine: EnvelopeCurveObject;\n\tripple: EnvelopeCurveObject;\n\tstep: EnvelopeCurveObject;\n}\n\ntype EnvelopeCurveName =  keyof EnvelopeCurveMap;\n\n/**\n *  Generate some complex envelope curves.\n */\n// tslint:disable-next-line: variable-name\nconst EnvelopeCurves: EnvelopeCurveMap = (() => {\n\n\tconst curveLen = 128;\n\n\tlet i: number;\n\tlet k: number;\n\n\t// cosine curve\n\tconst cosineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tcosineCurve[i] = Math.sin((i / (curveLen - 1)) * (Math.PI / 2));\n\t}\n\n\t// ripple curve\n\tconst rippleCurve: number[] = [];\n\tconst rippleCurveFreq = 6.4;\n\tfor (i = 0; i < curveLen - 1; i++) {\n\t\tk = (i / (curveLen - 1));\n\t\tconst sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t\trippleCurve[i] = sineWave / 10 + k * 0.83;\n\t}\n\trippleCurve[curveLen - 1] = 1;\n\n\t// stairs curve\n\tconst stairsCurve: number[] = [];\n\tconst steps = 5;\n\tfor (i = 0; i < curveLen; i++) {\n\t\tstairsCurve[i] = Math.ceil((i / (curveLen - 1)) * steps) / steps;\n\t}\n\n\t// in-out easing curve\n\tconst sineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tsineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t}\n\n\t// a bounce curve\n\tconst bounceCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tconst freq = Math.pow(k, 3) * 4 + 0.2;\n\t\tconst val = Math.cos(freq * Math.PI * 2 * k);\n\t\tbounceCurve[i] = Math.abs(val * (1 - k));\n\t}\n\n\t/**\n\t *  Invert a value curve to make it work for the release\n\t */\n\tfunction invertCurve(curve: number[]): number[] {\n\t\tconst out = new Array(curve.length);\n\t\tfor (let j = 0; j < curve.length; j++) {\n\t\t\tout[j] = 1 - curve[j];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t *  reverse the curve\n\t */\n\tfunction reverseCurve(curve: number[]): number[] {\n\t\treturn curve.slice(0).reverse();\n\t}\n\n\t/**\n\t *  attack and release curve arrays\n\t */\n\treturn {\n\t\tbounce : {\n\t\t\tIn : invertCurve(bounceCurve),\n\t\t\tOut : bounceCurve,\n\t\t},\n\t\tcosine : {\n\t\t\tIn : cosineCurve,\n\t\t\tOut : reverseCurve(cosineCurve),\n\t\t},\n\t\texponential : \"exponential\" as \"exponential\",\n\t\tlinear : \"linear\" as \"linear\",\n\t\tripple : {\n\t\t\tIn : rippleCurve,\n\t\t\tOut : invertCurve(rippleCurve),\n\t\t},\n\t\tsine : {\n\t\t\tIn : sineCurve,\n\t\t\tOut : invertCurve(sineCurve),\n\t\t},\n\t\tstep : {\n\t\t\tIn : stairsCurve,\n\t\t\tOut : invertCurve(stairsCurve),\n\t\t},\n\t};\n})();\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { PulseOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\n\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @param frequency The frequency of the oscillator\n * @param width The width of the pulse\n * @example\n * var pulse = new PulseOscillator(\"E5\", 0.4).toDestination().start();\n */\nexport class PulseOscillator extends Source<PulseOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"PulseOscillator\";\n\n\t/**\n\t *  The width of the pulse.\n\t */\n\twidth: Signal<AudioRange> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"audioRange\",\n\t});\n\n\t/**\n\t *  gate the width amount\n\t */\n\tprivate _widthGate: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t *  the sawtooth oscillator\n\t */\n\tprivate _sawtooth: Oscillator = new Oscillator({\n\t\tcontext: this.context,\n\t\ttype : \"sawtooth\",\n\t});\n\n\t/**\n\t *  The frequency control.\n\t */\n\tfrequency: Signal<Frequency> = this._sawtooth.frequency;\n\n\t/**\n\t *  The detune in cents.\n\t */\n\tdetune: Signal<Cents> = this._sawtooth.detune;\n\n\t/**\n\t *  Threshold the signal to turn it into a square\n\t */\n\tprivate _thresh = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => val <= 0 ? -1 : 1,\n\t});\n\n\tconstructor(options?: Partial<PulseOscillatorOptions>);\n\tconstructor(frequency?: Frequency, width?: AudioRange);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]));\n\t\tconst options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n\n\t\tthis.width.setValueAtTime(options.width, 0);\n\t\tthis._sawtooth.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis._sawtooth.detune.setValueAtTime(options.detune, 0);\n\t\tthis._sawtooth.phase = options.phase;\n\n\t\t// connections\n\t\tthis._sawtooth.chain(this._thresh, this.output);\n\t\tthis.width.chain(this._widthGate, this._thresh);\n\t\treadOnly(this, [\"width\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PulseOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tphase: 0,\n\t\t\ttype: \"pulse\" as \"pulse\",\n\t\t\twidth: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.start(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.stop(time);\n\t\t// the width is still connected to the output.\n\t\t// that needs to be stopped also\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(0, time);\n\t}\n\n\t/**\n\t *  Restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._sawtooth.restart(computedTime);\n\t\tthis._widthGate.gain.cancelScheduledValues(computedTime);\n\t\tthis._widthGate.gain.setValueAtTime(1, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._sawtooth.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._sawtooth.phase = phase;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pulse\".\n\t */\n\tget type(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pulse\".\n\t */\n\tget baseType(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t *  Clean up method.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sawtooth.dispose();\n\t\tthis.width.dispose();\n\t\tthis._widthGate.dispose();\n\t\tthis._thresh.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\n\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @param {number=} value Constant value to multiple\n * @example\n * const mult = new Multiply();\n * const sigA = new Tone.Signal(3);\n * const sigB = new Tone.Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * //output of mult is 12.\n *  @example\n * const mult = new Multiply(10);\n * const sig = new Tone.Signal(2).connect(mult);\n * //the output of mult is 20.\n */\nexport class Multiply extends Signal<number> {\n\n\tname = \"Multiply\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection\n\t */\n\treadonly override = false;\n\n\t/**\n\t * the input gain node\n\t */\n\tprivate _mult: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The multiplcant input.\n\t */\n\tinput = this._mult;\n\n\t/**\n\t * The product of the input and {@link factor}\n\t */\n\toutput = this._mult;\n\n\t/**\n\t * The multiplication factor. Can be set directly or a signal can be connected to it.\n\t */\n\tfactor: Param<number>;\n\n\tconstructor(options?: Partial<SignalOptions<number>>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(value?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis.factor = this._param = this._mult.gain as unknown as Param<number>;\n\t\tthis.factor.setValueAtTime(options.value, 0);\n\t}\n\n\tstatic getDefaults(): SignalOptions<number> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._mult.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isFunction, isUndef } from \"../core/util/TypeCheck\";\nimport { Signal, SignalOptions } from \"./Signal\";\nimport { SignalOperator } from \"./SignalOperator\";\n\ntype WaveShaperMappingFn = (value: number, index?: number) => number;\n\ntype WaveShaperMapping =  WaveShaperMappingFn | number[] | Float32Array;\n\ninterface WaveShaperOptions extends ToneAudioNodeOptions {\n\tmapping?: WaveShaperMapping;\n\tlength: number;\n\tcurve?: number[] | Float32Array;\n}\n\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n *  @param mapping The function used to define the values.\n *                 The mapping function should take two arguments:\n *                 the first is the value at the current position\n *                 and the second is the array position.\n *                 If the argument is an array, that array will be\n *                 set as the wave shaping function. The input\n *                 signal is an AudioRange [-1, 1] value and the output\n *                 signal can take on any numerical values.\n *\n *  @param bufferLen The length of the WaveShaperNode buffer.\n *  @example\n * var timesTwo = new WaveShaper(function(val){\n * \treturn val * 2;\n * }, 2048);\n *  @example\n * //a waveshaper can also be constructed with an array of values\n * var invert = new WaveShaper([1, -1]);\n */\nexport class WaveShaper extends SignalOperator<WaveShaperOptions> {\n\n\tname = \"WaveShaper\";\n\n\t/**\n\t *  the waveshaper node\n\t */\n\tprivate _shaper: WaveShaperNode = this.context.createWaveShaper();\n\n\t/**\n\t * The input to the waveshaper node.\n\t */\n\tinput = this._shaper;\n\n\t/**\n\t * The output from the waveshaper node\n\t */\n\toutput = this._shaper;\n\n\tprotected _internalChannels = [this._shaper];\n\n\tconstructor(options?: Partial<WaveShaperOptions>);\n\tconstructor(mapping?: WaveShaperMapping , length?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"])));\n\t\tconst options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n\n\t\tif (isArray(options.mapping) || options.mapping instanceof Float32Array) {\n\t\t\tthis.curve = Float32Array.from(options.mapping);\n\t\t} else if (isFunction(options.mapping)) {\n\t\t\tthis.setMap(options.mapping, options.length);\n\t\t}\n\t}\n\n\tstatic getDefaults(): WaveShaperOptions {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tlength: 1024,\n\t\t});\n\t}\n\n\t/**\n\t *  Uses a mapping function to set the value of the curve.\n\t *  @param mapping The function used to define the values.\n\t *                 The mapping function take two arguments:\n\t *                 the first is the value at the current position\n\t *                 which goes from -1 to 1 over the number of elements\n\t *                 in the curve array. The second argument is the array position.\n\t * @example\n\t * //map the input signal from [-1, 1] to [0, 10]\n\t * shaper.setMap(function(val, index){\n\t * \treturn (val + 1) * 5;\n\t * })\n\t */\n\tsetMap(mapping: WaveShaperMappingFn, length: number = 1024): this {\n\t\tconst array = new Float32Array(length);\n\t\tfor (let i = 0, len = length; i < len; i++) {\n\t\t\tconst normalized = (i / (len - 1)) * 2 - 1;\n\t\t\tarray[i] = mapping(normalized, i);\n\t\t}\n\t\tthis.curve = array;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The array to set as the waveshaper curve. For linear curves\n\t * array length does not make much difference, but for complex curves\n\t * longer arrays will provide smoother interpolation.\n\t */\n\tget curve(): Float32Array | null {\n\t\treturn this._shaper.curve;\n\t}\n\n\tset curve(mapping: Float32Array | null) {\n\t\tthis._shaper.curve = mapping;\n\t}\n\n\t/**\n\t * Specifies what type of oversampling (if any) should be used when\n\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n\t */\n\tget oversample(): OverSampleType {\n\t\treturn this._shaper.oversample;\n\t}\n\n\tset oversample(oversampling: OverSampleType) {\n\t\tconst isOverSampleType = [\"none\", \"2x\", \"4x\"].some(str => str.includes(oversampling));\n\t\tthis.assert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n\t\tthis._shaper.oversample = oversampling;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._shaper.disconnect();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"..//core/util/Defaults\";\nimport { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connectSignal } from \"./Signal\";\n/**\n * A signal operator has an input and output and modifies the signal.\n */\nexport abstract class SignalOperator<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\tconstructor(options?: Partial<Options>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(SignalOperator.getDefaults(), arguments, [\"context\"])));\n\t}\n\n\tconnect(destination: InputNode, outputNum: number = 0, inputNum: number = 0): this {\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n}\n","///////////////////////////////////////////////////////////////////////////\n// INITIALIZING NEW CONTEXT\n///////////////////////////////////////////////////////////////////////////\n\ntype Context = import(\"./Context\").Context;\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to setup a new Context\n */\nexport function onContextInit(cb: (ctx: Context) => void): void {\n\tnotifyNewContext.push(cb);\n}\n\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\nexport function initializeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyNewContext.forEach(cb => cb(ctx));\n}\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyCloseContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to tear down a Context\n */\nexport function onContextClose(cb: (ctx: Context) => void): void {\n\tnotifyCloseContext.push(cb);\n}\n\nexport function closeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyCloseContext.forEach(cb => cb(ctx));\n}\n","import { Ticker, TickerClockSource } from \"../clock/Ticker\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { Omit } from \"../util/Interface\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isString } from \"../util/TypeCheck\";\nimport { getAudioContext } from \"./AudioContext\";\nimport { closeContext, initializeContext } from \"./ContextInitialization\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Destination = import(\"./Destination\").Destination;\n\nexport type ContextLatencyHint = AudioContextLatencyCategory | \"fastest\";\n\n// these are either not used in Tone.js or deprecated and not implemented.\nexport type ExcludedFromBaseAudioContext = \"createScriptProcessor\" | \"onstatechange\" | \"addEventListener\"\n\t| \"removeEventListener\" | \"listener\" | \"dispatchEvent\" | \"audioWorklet\" | \"destination\";\n\n// the subset of the BaseAudioContext which Tone.Context implements.\nexport type BaseAudioContextSubset = Omit<BaseAudioContext, ExcludedFromBaseAudioContext>;\n\nexport interface ContextOptions {\n\tclockSource: TickerClockSource;\n\tlatencyHint: ContextLatencyHint;\n\tlookAhead: Seconds;\n\tupdateInterval: Seconds;\n\tcontext: BaseAudioContext;\n}\n\nexport interface ContextTimeoutEvent {\n\tcallback: (...args: any[]) => void;\n\tid: number;\n\ttime: Seconds;\n}\n\n/**\n * Wrapper around the native AudioContext.\n */\nexport class Context extends Emitter<\"statechange\" | \"tick\"> implements BaseAudioContextSubset {\n\n\tname = \"Context\";\n\n\t/**\n\t * The amount of time into the future events are scheduled. Giving Web Audio\n\t * a short amount of time into the future to schedule events can reduce clicks and\n\t * improve performance. This value can be set to 0 to get the lowest latency.\n\t */\n\tlookAhead: Seconds;\n\n\t/**\n\t * private reference to the BaseAudioContext\n\t */\n\tprotected readonly _context: BaseAudioContext;\n\n\t/**\n\t * A reliable callback method\n\t */\n\tprivate readonly _ticker: Ticker;\n\n\t/**\n\t *  The default latency hint\n\t */\n\tprivate _latencyHint: ContextLatencyHint | Seconds;\n\n\t/**\n\t *  An object containing all of the constants AudioBufferSourceNodes\n\t */\n\tprivate _constants = new Map<number, AudioBufferSourceNode>();\n\n\t/**\n\t *  All of the setTimeout events.\n\t */\n\tprivate _timeouts: Timeline<ContextTimeoutEvent> = new Timeline();\n\n\t/**\n\t *  The timeout id counter\n\t */\n\tprivate _timeoutIds = 0;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _transport!: Transport;\n\n\t/**\n\t * A reference the Destination singleton belonging to this context\n\t */\n\tprivate _destination!: Destination;\n\n\t/**\n\t * Private indicator if the context has been initialized\n\t */\n\tprivate _initialized: boolean = false;\n\n\tconstructor(context?: BaseAudioContext);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<ContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Context.getDefaults(), arguments, [\"context\"]);\n\n\t\tthis._context = options.context;\n\n\t\tthis._latencyHint = options.latencyHint;\n\t\tthis.lookAhead = options.lookAhead;\n\n\t\tthis._ticker = new Ticker(this.emit.bind(this, \"tick\"), options.clockSource, options.updateInterval);\n\t\tthis.on(\"tick\", this._timeoutLoop.bind(this));\n\n\t\t// fwd events from the context\n\t\tthis._context.addEventListener(\"statechange\", () => {\n\t\t\tthis.emit(\"statechange\", this.state);\n\t\t});\n\t}\n\n\tstatic getDefaults(): ContextOptions {\n\t\treturn {\n\t\t\tclockSource: \"worker\",\n\t\t\tcontext: getAudioContext(),\n\t\t\tlatencyHint: \"interactive\",\n\t\t\tlookAhead: 0.1,\n\t\t\tupdateInterval: 0.03,\n\t\t};\n\t}\n\n\t/**\n\t * Finish setting up the context. **You usually do not need to do this manually.**\n\t */\n\tinitialize(): this {\n\t\tif (!this._initialized) {\n\t\t\t// add any additional modules\n\t\t\tinitializeContext(this);\n\t\t\tthis._initialized = true;\n\t\t}\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// BASE AUDIO CONTEXT METHODS\n\t///////////////////////////////////////////////////////////////////////\n\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn this._context.createAnalyser();\n\t}\n\tcreateOscillator(): OscillatorNode {\n\t\treturn this._context.createOscillator();\n\t}\n\tcreateBufferSource(): AudioBufferSourceNode {\n\t\treturn this._context.createBufferSource();\n\t}\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn this._context.createBiquadFilter();\n\t}\n\tcreateBuffer(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer {\n\t\treturn this._context.createBuffer(numberOfChannels, length, sampleRate);\n\t}\n\tcreateChannelMerger(numberOfInputs?: number | undefined): ChannelMergerNode {\n\t\treturn this._context.createChannelMerger(numberOfInputs);\n\t}\n\tcreateChannelSplitter(numberOfOutputs?: number | undefined): ChannelSplitterNode {\n\t\treturn this._context.createChannelSplitter(numberOfOutputs);\n\t}\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn this._context.createConstantSource();\n\t}\n\tcreateConvolver(): ConvolverNode {\n\t\treturn this._context.createConvolver();\n\t}\n\tcreateDelay(maxDelayTime?: number | undefined): DelayNode {\n\t\treturn this._context.createDelay(maxDelayTime);\n\t}\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn this._context.createDynamicsCompressor();\n\t}\n\tcreateGain(): GainNode {\n\t\treturn this._context.createGain();\n\t}\n\tcreateIIRFilter(feedforward: number[], feedback: number[]): IIRFilterNode {\n\t\treturn this._context.createIIRFilter(feedforward, feedback);\n\t}\n\tcreatePanner(): PannerNode {\n\t\treturn this._context.createPanner();\n\t}\n\tcreatePeriodicWave(\n\t\treal: number[] | Float32Array,\n\t\timag: number[] | Float32Array,\n\t\tconstraints?: PeriodicWaveConstraints | undefined,\n\t): PeriodicWave {\n\t\treturn this._context.createPeriodicWave(real, imag, constraints);\n\t}\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn this._context.createStereoPanner();\n\t}\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn this._context.createWaveShaper();\n\t}\n\tdecodeAudioData(audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn this._context.decodeAudioData(audioData);\n\t}\n\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget state(): AudioContextState {\n\t\treturn this._context.state;\n\t}\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget sampleRate(): number {\n\t\treturn this._context.sampleRate;\n\t}\n\t/**\n\t *  The listener\n\t */\n\tget listener(): AudioListener {\n\t\treturn this._context.listener;\n\t}\n\n\t/**\n\t *  There is only one Transport per Context. It is created on initialization.\n\t */\n\tget transport(): Transport {\n\t\tthis.assert(this._initialized, \"The context must be initialized before being used by invoking context.initialize()\");\n\t\treturn this._transport;\n\t}\n\tset transport(t: Transport) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._transport = t;\n\t}\n\n\t/**\n\t *  A reference to the Context's destination node.\n\t */\n\tget destination(): Destination {\n\t\tthis.assert(this._initialized, \"The context must be initialized before being used by invoking context.initialize()\");\n\t\treturn this._destination;\n\t}\n\tset destination(d: Destination) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._destination = d;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// TICKER\n\t///////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  How often the interval callback is invoked.\n\t *  This number corresponds to how responsive the scheduling\n\t *  can be. context.updateInterval + context.lookAhead gives you the\n\t *  total latency between scheduling an event and hearing it.\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._ticker.updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._ticker.updateInterval = interval;\n\t}\n\n\t/**\n\t *  What the source of the clock is, either \"worker\" (default),\n\t *  \"timeout\", or \"offline\" (none).\n\t */\n\tget clockSource(): TickerClockSource {\n\t\treturn this._ticker.type;\n\t}\n\tset clockSource(type: TickerClockSource) {\n\t\tthis._ticker.type = type;\n\t}\n\n\t/**\n\t * The type of playback, which affects tradeoffs between audio\n\t * output latency and responsiveness.\n\t * In addition to setting the value in seconds, the latencyHint also\n\t * accepts the strings \"interactive\" (prioritizes low latency),\n\t * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t * latency and performance), and \"fastest\" (lowest latency, might glitch more often).\n\t * @example\n\t * //set the lookAhead to 0.3 seconds\n\t * Tone.context.latencyHint = 0.3;\n\t */\n\tget latencyHint(): ContextLatencyHint | Seconds {\n\t\treturn this._latencyHint;\n\t}\n\tset latencyHint(hint: ContextLatencyHint | Seconds) {\n\t\tlet lookAheadValue = 0;\n\t\tthis._latencyHint = hint;\n\t\tif (isString(hint)) {\n\t\t\tswitch (hint) {\n\t\t\t\tcase \"interactive\":\n\t\t\t\t\tlookAheadValue = 0.1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"playback\":\n\t\t\t\t\tlookAheadValue = 0.8;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"balanced\":\n\t\t\t\t\tlookAheadValue = 0.25;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"fastest\":\n\t\t\t\t\tlookAheadValue = 0.01;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.lookAhead = lookAheadValue;\n\t\tthis.updateInterval = lookAheadValue / 3;\n\t}\n\n\t/**\n\t *  The unwrapped AudioContext.\n\t */\n\tget rawContext(): BaseAudioContext {\n\t\treturn this._context;\n\t}\n\n\t/**\n\t * The current audio context time plus a short {@link lookAhead}.\n\t */\n\tnow(): Seconds {\n\t\treturn this._context.currentTime + this.lookAhead;\n\t}\n\n\t/**\n\t *  Starts the audio context from a suspended state. This is required\n\t *  to initially start the AudioContext.\n\t */\n\tresume(): Promise<void> {\n\t\tif (this._context.state === \"suspended\" && this._context instanceof AudioContext) {\n\t\t\treturn this._context.resume();\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t *  Promise which is invoked when the context is running.\n\t *  Tries to resume the context if it's not started.\n\t */\n\tasync close(): Promise<Context> {\n\t\tif (this._context instanceof AudioContext) {\n\t\t\tawait this._context.close();\n\t\t}\n\t\tif (this._initialized) {\n\t\t\tcloseContext(this);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Generate a looped buffer at some constant value.\n\t */\n\tgetConstant(val: number): AudioBufferSourceNode {\n\t\tif (this._constants.has(val)) {\n\t\t\treturn this._constants.get(val) as AudioBufferSourceNode;\n\t\t} else {\n\t\t\tconst buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t\t\tconst arr = buffer.getChannelData(0);\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = val;\n\t\t\t}\n\t\t\tconst constant = this._context.createBufferSource();\n\t\t\tconstant.channelCount = 1;\n\t\t\tconstant.channelCountMode = \"explicit\";\n\t\t\tconstant.buffer = buffer;\n\t\t\tconstant.loop = true;\n\t\t\tconstant.start(0);\n\t\t\tthis._constants.set(val, constant);\n\t\t\treturn constant;\n\t\t}\n\t}\n\n\t/**\n\t *  Clean up. Also closes the audio context.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._ticker.dispose();\n\t\tthis._timeouts.dispose();\n\t\tObject.keys(this._constants).map(val => this._constants[val].disconnect());\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// TIMEOUTS\n\t///////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The private loop which keeps track of the context scheduled timeouts\n\t *  Is invoked from the clock source\n\t */\n\tprivate _timeoutLoop(): void  {\n\t\tconst now = this.now();\n\t\tlet firstEvent = this._timeouts.peek();\n\t\twhile (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n\t\t\t// invoke the callback\n\t\t\tfirstEvent.callback();\n\t\t\t// shift the first event off\n\t\t\tthis._timeouts.shift();\n\t\t\t// get the next one\n\t\t\tfirstEvent = this._timeouts.peek();\n\t\t}\n\t}\n\n\t/**\n\t *  A setTimeout which is guarented by the clock source.\n\t *  Also runs in the offline context.\n\t *  @param  fn       The callback to invoke\n\t *  @param  timeout  The timeout in seconds\n\t *  @returns ID to use when invoking Context.clearTimeout\n\t */\n\tsetTimeout(fn: (...args: any[]) => void, timeout: Seconds): number {\n\t\tthis._timeoutIds++;\n\t\tconst now = this.now();\n\t\tthis._timeouts.add({\n\t\t\tcallback : fn,\n\t\t\tid : this._timeoutIds,\n\t\t\ttime : now + timeout,\n\t\t});\n\t\treturn this._timeoutIds;\n\t}\n\n\t/**\n\t *  Clears a previously scheduled timeout with Tone.context.setTimeout\n\t *  @param  id  The ID returned from setTimeout\n\t */\n\tclearTimeout(id: number): Context {\n\t\tthis._timeouts.forEach(event => {\n\t\t\tif (event.id === id) {\n\t\t\t\tthis._timeouts.remove(event);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\n\ninterface FilterOptions extends ToneAudioNodeOptions {\n\ttype: BiquadFilterType;\n\tfrequency: Frequency;\n\trolloff: number;\n\tQ: Positive;\n\tdetune: Cents;\n\tgain: GainFactor;\n}\n\n/**\n *  @class  Tone.Filter is a filter which allows for all of the same native methods\n *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n *          Tone.Filter has the added ability to set the filter rolloff at -12\n *          (default), -24 and -48.\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n *  @param frequency The cutoff frequency of the filter.\n *  @param type The type of filter.\n *  @param rolloff The drop in decibels per octave after the cutoff frequency\n *  @example\n *  var filter = new Filter(200, \"highpass\");\n */\nexport class Filter extends ToneAudioNode<FilterOptions> {\n\n\tname = \"Filter\";\n\n\treadonly input = new Gain({ context: this.context });\n\treadonly output = new Gain({ context: this.context });\n\tprivate _filters: BiquadFilterNode[] = [];\n\n\t/**\n\t * The internal channels for channel routing changes\n\t */\n\tprotected _internalChannels = [this.input, ...this._filters, this.output];\n\n\t/**\n\t *  the rolloff value of the filter\n\t */\n\tprivate _rolloff!: number;\n\tprivate _type: BiquadFilterType;\n\n\t/**\n\t *  The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<Positive>;\n\n\t/**\n\t *  The cutoff frequency of the filter.\n\t */\n\treadonly frequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune parameter\n\t */\n\treadonly detune: Signal<Cents>;\n\n\t/**\n\t *  The gain of the filter, only used in certain filter types\n\t */\n\treadonly gain: Signal<Decibels>;\n\n\tconstructor(frequency?: Frequency, type?: BiquadFilterType, rolloff?: number);\n\tconstructor(options?: Partial<FilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]));\n\t\tconst options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n\n\t\tthis._filters = [];\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\tthis.gain = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.gain,\n\t\t});\n\t\tthis._type = options.type;\n\t\tthis.rolloff = options.rolloff;\n\t\treadOnly(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): FilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\tdetune: 0,\n\t\t\tfrequency: 350,\n\t\t\tgain: 0,\n\t\t\trolloff: -12,\n\t\t\ttype: \"lowpass\" as BiquadFilterType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the filter. Types: \"lowpass\", \"highpass\",\n\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n\t */\n\tget type(): BiquadFilterType {\n\t\treturn this._type;\n\t}\n\tset type(type: BiquadFilterType) {\n\t\tconst types: BiquadFilterType[] = [\"lowpass\", \"highpass\", \"bandpass\",\n\t\t\t\"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n\t\tthis.assert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n\t\tthis._type = type;\n\t\tthis._filters.forEach(filter => filter.type = type);\n\t}\n\n\t/**\n\t * The rolloff of the filter which is the drop in db\n\t * per octave. Implemented internally by cascading filters.\n\t * Only accepts the values -12, -24, -48 and -96.\n\t */\n\tget rolloff(): number | string {\n\t\treturn this._rolloff;\n\t}\n\tset rolloff(rolloff: number | string) {\n\t\tconst rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10);\n\t\tconst possibilities = [-12, -24, -48, -96];\n\t\tlet cascadingCount = possibilities.indexOf(rolloffNum);\n\t\t// check the rolloff is valid\n\t\tthis.assert(cascadingCount !== -1, `rolloff can only be ${possibilities.join(\", \")}`);\n\t\tcascadingCount += 1;\n\n\t\tthis._rolloff = rolloffNum;\n\t\tthis.input.disconnect();\n\t\tthis._filters.forEach(filter => filter.disconnect());\n\n\t\tthis._filters = new Array(cascadingCount);\n\t\tfor (let count = 0; count < cascadingCount; count++) {\n\t\t\tconst filter = this.context.createBiquadFilter();\n\t\t\tfilter.type = this._type;\n\t\t\tthis.frequency.connect(filter.frequency);\n\t\t\tthis.detune.connect(filter.detune);\n\t\t\tthis.Q.connect(filter.Q);\n\t\t\tthis.gain.connect(filter.gain);\n\t\t\tthis._filters[count] = filter;\n\t\t}\n\t\tthis._internalChannels = [this.input, ...this._filters, this.output];\n\t\tconnectSeries(...this._internalChannels);\n\t}\n\n\t/**\n\t * Get the frequency response curve. This curve represents how the filter\n\t * responses to frequencies between 20hz-20khz.\n\t * @param  len The number of values to return\n\t * @return The frequency response curve between 20-20kHz\n\t */\n\tgetFrequencyResponse(len: number = 128): Float32Array {\n\t\t// start with all 1s\n\t\tconst totalResponse = new Float32Array(len).map(() => 1);\n\t\tconst freqValues = new Float32Array(len);\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tconst norm = Math.pow(i / len, 2);\n\t\t\tconst freq = norm * (20000 - 20) + 20;\n\t\t\tfreqValues[i] = freq;\n\t\t}\n\t\tconst magValues = new Float32Array(len);\n\t\tconst phaseValues = new Float32Array(len);\n\t\tthis._filters.forEach(() => {\n\t\t\tconst filterClone = this.context.createBiquadFilter();\n\t\t\tfilterClone.type = this._type;\n\t\t\tfilterClone.Q.value = this.Q.value;\n\t\t\tfilterClone.frequency.value = this.frequency.value as number;\n\t\t\tfilterClone.gain.value = this.gain.value as number;\n\t\t\tfilterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n\t\t\tmagValues.forEach((val, i) => {\n\t\t\t\ttotalResponse[i] *= val;\n\t\t\t});\n\t\t});\n\t\treturn totalResponse;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._filters.forEach(filter => {\n\t\t\tfilter.disconnect();\n\t\t});\n\t\twritable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t\tthis.frequency.dispose();\n\t\tthis.Q.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { connect, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { GainToAudio } from \"../../signal/GainToAudio\";\nimport { Signal } from \"../../signal/Signal\";\n\ninterface CrossFadeOptions extends ToneAudioNodeOptions {\n\tfade: NormalRange;\n}\n\n/**\n * Tone.Crossfade provides equal power fading between two inputs.\n * More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n * ```\n *                                             +---------+\n *                                            +> input a +>--+\n * +-----------+   +---------------------+     |         |   |\n * | 1s signal +>--> stereoPannerNode  L +>----> gain    |   |\n * +-----------+   |                     |     +---------+   |\n *               +-> pan               R +>-+                |   +--------+\n *               | +---------------------+  |                +---> output +>\n *  +------+     |                          |  +---------+   |   +--------+\n *  | fade +>----+                          | +> input b +>--+\n *  +------+                                |  |         |\n *                                          +--> gain    |\n *                                             +---------+\n * ```\n * @example\n * var crossFade = new CrossFade(0.5);\n * //connect effect A to crossfade from\n * //effect output 0 to crossfade input 0\n * effectA.connect(crossFade.a);\n * //connect effect B to crossfade from\n * //effect output 0 to crossfade input 1\n * effectB.connect(crossFade.b);\n * crossFade.fade.value = 0;\n * // ^ only effectA is output\n * crossFade.fade.value = 1;\n * // ^ only effectB is output\n * crossFade.fade.value = 0.5;\n * // ^ the two signals are mixed equally.\n */\nexport class CrossFade extends ToneAudioNode<CrossFadeOptions> {\n\n\tname = \"CrossFade\";\n\n\t/**\n\t * The crossfading is done by a StereoPannerNode\n\t */\n\tprivate _panner: StereoPannerNode = this.context.createStereoPanner();\n\n\t/**\n\t * Split the output of the panner node into two values used to control the gains.\n\t */\n\tprivate _split: ChannelSplitterNode = this.context.createChannelSplitter(2);\n\n\t/**\n\t * Convert the fade value into an audio range value so it can be connected\n\t * to the panner.pan AudioParam\n\t */\n\tprivate _g2a: GainToAudio = new GainToAudio({ context : this.context });\n\n\t/**\n\t * The input which is at full level when fade = 0\n\t */\n\ta: Gain = new Gain({\n\t\tcontext : this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The input which is at full level when fade = 1\n\t */\n\tb: Gain = new Gain({\n\t\tcontext : this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The output is a mix between `a` and `b` at the ratio of `fade`\n\t */\n\toutput: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * CrossFade has no input, you must choose either `a` or `b`\n\t */\n\tinput: undefined;\n\n\t/**\n\t * \tThe mix between the two inputs. A fade value of 0\n\t * \twill output 100% crossFade.a and\n\t * \ta value of 1 will output 100% crossFade.b.\n\t */\n\treadonly fade: Signal<NormalRange>;\n\n\tprotected _internalChannels = [this.a, this.b];\n\n\tconstructor(options?: Partial<CrossFadeOptions>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(fade?: NormalRange);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"])));\n\t\tconst options = optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"]);\n\n\t\tthis.fade = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"normalRange\",\n\t\t\tvalue: options.fade,\n\t\t});\n\t\treadOnly(this, \"fade\");\n\n\t\tthis.context.getConstant(1).connect(this._panner);\n\t\tthis._panner.connect(this._split);\n\t\tconnect(this._split, this.a.gain, 0);\n\t\tconnect(this._split, this.b.gain, 1);\n\n\t\tthis.fade.chain(this._g2a, this._panner.pan);\n\n\t\tthis.a.connect(this.output);\n\t\tthis.b.connect(this.output);\n\t}\n\n\tstatic getDefaults(): CrossFadeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tfade: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.a.dispose();\n\t\tthis.b.dispose();\n\t\tthis.output.dispose();\n\t\tthis.fade.dispose();\n\t\tthis._g2a.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis._split.disconnect();\n\t\treturn this;\n\t}\n}\n","import { CrossFade } from \"../component/channel/CrossFade\";\nimport { Gain } from \"../core/context/Gain\";\nimport { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\n\nexport interface EffectOptions extends ToneAudioNodeOptions {\n\twet: NormalRange;\n}\n/**\n * \t@class  Effect is the base class for effects. Connect the effect between\n * \t        the effectSend and effectReturn GainNodes, then control the amount of\n * \t        effect which goes to the output using the wet control.\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n *  @param {NormalRange|Object} [wet] The starting wet value.\n */\nexport abstract class Effect<Options extends EffectOptions>\nextends ToneAudioNode<Options> {\n\n\tname = \"Effect\";\n\n\t/**\n\t *  the drywet knob to control the amount of effect\n\t */\n\tprivate _dryWet: CrossFade = new CrossFade({ context : this.context });\n\n\t/**\n\t *  The wet control is how much of the effected\n\t *  will pass through to the output. 1 = 100% effected\n\t *  signal, 0 = 100% dry signal.\n\t */\n\twet: Signal<NormalRange> = this._dryWet.fade;\n\n\t/**\n\t *  connect the effectSend to the input of hte effect\n\t */\n\tprotected effectSend: Gain = new Gain({ context : this.context });\n\n\t/**\n\t *  connect the output of the effect to the effectReturn\n\t */\n\tprotected effectReturn: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The effect input node\n\t */\n\tinput: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The effect output\n\t */\n\toutput = this._dryWet;\n\n\tprotected _internalChannels: ToneAudioNode[] = [this.input, this.output, this.effectReturn, this.effectSend];\n\n\tconstructor(options: EffectOptions) {\n\t\tsuper(options);\n\n\t\t// connections\n\t\tthis.input.fan(this._dryWet.a, this.effectSend);\n\t\tthis.effectReturn.connect(this._dryWet.b);\n\t\tthis.wet.setValueAtTime(options.wet, 0);\n\t\treadOnly(this, \"wet\");\n\t}\n\n\tstatic getDefaults(): EffectOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\twet : 1,\n\t\t});\n\t}\n\n\t/**\n\t *  chains the effect in between the effectSend and effectReturn\n\t */\n\tprotected connectEffect(effect: InputNode): this {\n\t\tthis.effectSend.chain(effect, this.effectReturn);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dryWet.dispose();\n\t\tthis.effectSend.dispose();\n\t\tthis.effectReturn.dispose();\n\t\tthis.wet.dispose();\n\t\treturn this;\n\t}\n}\n","import { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isArray, isDefined, isObject, isUndef } from \"../core/util/TypeCheck\";\nimport { ToneEvent, ToneEventCallback, ToneEventOptions } from \"./ToneEvent\";\n\ntype PartEventDescription = Time | [Time, any] | {\n\ttime: Time,\n\t[key: string]: any;\n};\n\ninterface PartOptions extends ToneEventOptions {\n\tevents: PartEventDescription[];\n}\n\n/**\n *  Part is a collection ToneEvents which can be started/stopped and looped as a single unit.\n *\n *  @param callback The callback to invoke on each event\n *  @param events the array of events\n *  @example\n * var part = new Part(function(time, note){\n * \t//the notes given as the second element in the array\n * \t//will be passed in as the second argument\n * \tsynth.triggerAttackRelease(note, \"8n\", time);\n * }, [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n *  @example\n * //use an array of objects as long as the object has a \"time\" attribute\n * var part = new Part(function(time, value){\n * \t//the value is an object which contains both the note and the velocity\n * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n * }, [{\"time\" : 0, \"note\" : \"C3\", \"velocity\": 0.9},\n * \t   {\"time\" : \"0:2\", \"note\" : \"C4\", \"velocity\": 0.5}\n * ]).start(0);\n */\nexport class Part extends ToneEvent {\n\n\tname = \"Part\";\n\n\t/**\n\t *  Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number,\n\t\toffset: number,\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The events that belong to this part\n\t */\n\tprivate _events: Set<ToneEvent> = new Set();\n\n\tconstructor(callback?: ToneEventCallback, value?: any);\n\tconstructor(options?: Partial<PartOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]));\n\t\tconst options = optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]);\n\n\t\t// add the events\n\t\toptions.events.forEach(event => {\n\t\t\tif (isArray(event)) {\n\t\t\t\tthis.add(event[0], event[1]);\n\t\t\t} else {\n\t\t\t\t// @ts-ignore\n\t\t\t\tthis.add(event);\n\t\t\t}\n\t\t});\n\t}\n\n\tstatic getDefaults(): PartOptions {\n\t\treturn Object.assign(ToneEvent.getDefaults(), {\n\t\t\tevents: [],\n\t\t});\n\t}\n\n\t/**\n\t *  Start the part at the given time.\n\t *  @param  time    When to start the part.\n\t *  @param  offset  The offset from the start of the part to begin playing at.\n\t */\n\tstart(time?: TransportTime, offset?: Time): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) !== \"started\") {\n\t\t\toffset = defaultArg(offset, this._loop ? this._loopStart : 0);\n\t\t\tif (this._loop) {\n\t\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t\t} else {\n\t\t\t\toffset = defaultArg(offset, 0);\n\t\t\t}\n\t\t\tconst computedOffset = this.toTicks(offset);\n\t\t\tthis._state.add({\n\t\t\t\tid : -1,\n\t\t\t\toffset: computedOffset,\n\t\t\t\tstate : \"started\",\n\t\t\t\ttime : ticks,\n\t\t\t});\n\t\t\tthis._forEach(event => {\n\t\t\t\tthis._startNote(event, ticks, computedOffset);\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Start the event in the given event at the correct time given\n\t *  the ticks and offset and looping.\n\t *  @param  event\n\t *  @param  ticks\n\t *  @param  offset\n\t */\n\tprivate _startNote(event: ToneEvent, ticks: Ticks, offset: Ticks): void {\n\t\tticks -= offset;\n\t\tif (this._loop) {\n\t\t\tif (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n\t\t\t\tif (event.startOffset < offset) {\n\t\t\t\t\t// start it on the next loop\n\t\t\t\t\tticks += this._getLoopDuration();\n\t\t\t\t}\n\t\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t\t} else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n\t\t\t\tevent.loop = false;\n\t\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t\t}\n\t\t} else if (event.startOffset >= offset) {\n\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t}\n\t}\n\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t\tthis._forEach(event => {\n\t\t\tevent.startOffset += this._startOffset;\n\t\t});\n\t}\n\n\t/**\n\t *  Stop the part at the given time.\n\t *  @param  time  When to stop the part.\n\t */\n\tstop(time?: TransportTime): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tthis._state.cancel(ticks);\n\t\tthis._state.setStateAtTime(\"stopped\", ticks);\n\t\tthis._forEach(event => {\n\t\t\tevent.stop(time);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get/Set an Event's value at the given time.\n\t * If a value is passed in and no event exists at\n\t * the given time, one will be created with that value.\n\t * If two events are at the same time, the first one will\n\t * be returned.\n\t * @example\n\t * part.at(\"1m\"); //returns the part at the first measure\n\t * part.at(\"2m\", \"C2\"); //set the value at \"2m\" to C2.\n\t * //if an event didn't exist at that time, it will be created.\n\t * @param time The time of the event to get or set.\n\t * @param value If a value is passed in, the value of the event at the given time will be set to it.\n\t */\n\tat(time: Time, value?: any): ToneEvent | null {\n\t\tconst timeInTicks = new TransportTimeClass(this.context, time).toTicks();\n\t\tconst tickTime = new TicksClass(this.context, 1).toSeconds();\n\n\t\tconst iterator = this._events.values();\n\t\tlet result = iterator.next();\n\t\twhile (!result.done) {\n\t\t\tconst event = result.value;\n\t\t\tif (Math.abs(timeInTicks - event.startOffset) < tickTime) {\n\t\t\t\tif (isDefined(value)) {\n\t\t\t\t\tevent.value = value;\n\t\t\t\t}\n\t\t\t\treturn event;\n\t\t\t}\n\t\t\tresult = iterator.next();\n\t\t}\n\t\t// if there was no event at that time, create one\n\t\tif (isDefined(value)) {\n\t\t\tthis.add(time, value);\n\t\t\t// return the new event\n\t\t\treturn this.at(time);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Add a an event to the part.\n\t *  @param time The time the note should start. If an object is passed in, it should\n\t *  \t\t\thave a 'time' attribute and the rest of the object will be used as the 'value'.\n\t *  @param  value\n\t * @example\n\t * part.add(\"1m\", \"C#+11\");\n\t * @example\n\t * part.add({\n\t * \ttime: \"1m\",\n\t * \tnote: \"C#11\"\n\t * });\n\t */\n\tadd(obj: {\n\t\ttime: Time,\n\t\t[key: string]: any;\n\t}): this;\n\tadd(time: Time, value?: any): this;\n\tadd(time: Time | object, value?: any): this {\n\t\t// extract the parameters\n\t\tif (isObject(time) && time.hasOwnProperty(\"time\")) {\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\ttime = this.toTicks(time);\n\t\tlet event: ToneEvent;\n\t\tif (value instanceof ToneEvent) {\n\t\t\tevent = value;\n\t\t\tevent.callback = this._tick.bind(this);\n\t\t} else {\n\t\t\tevent = new ToneEvent({\n\t\t\t\tcallback : this._tick.bind(this),\n\t\t\t\tcontext: this.context,\n\t\t\t\tvalue,\n\t\t\t});\n\t\t}\n\t\t// the start offset\n\t\tevent.startOffset = time;\n\n\t\t// initialize the values\n\t\tevent.set({\n\t\t\thumanize : this.humanize,\n\t\t\tloop : this.loop,\n\t\t\tloopEnd : this.loopEnd,\n\t\t\tloopStart : this.loopStart,\n\t\t\tplaybackRate : this.playbackRate,\n\t\t\tprobability : this.probability,\n\t\t});\n\n\t\tthis._events.add(event);\n\n\t\t// start the note if it should be played right now\n\t\tthis._restartEvent(event);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Restart the given event\n\t */\n\tprivate _restartEvent(event: ToneEvent): void {\n\t\tthis._state.forEach((stateEvent) => {\n\t\t\tif (stateEvent.state === \"started\") {\n\t\t\t\tthis._startNote(event, stateEvent.time, stateEvent.offset);\n\t\t\t} else {\n\t\t\t\t// stop the note\n\t\t\t\tevent.stop(new TicksClass(this.context, stateEvent.time));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t *  Remove an event from the part. If the event at that time is a Part,\n\t *  it will remove the entire part.\n\t *  @param time The time of the event\n\t *  @param value Optionally select only a specific event value\n\t */\n\tremove(obj: {\n\t\ttime: Time,\n\t\t[key: string]: any;\n\t}): this;\n\tremove(time: Time, value?: any): this;\n\tremove(time: Time | object, value?: any): this {\n\t\t// extract the parameters\n\t\tif (isObject(time) && time.hasOwnProperty(\"time\")) {\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\ttime = this.toTicks(time);\n\t\tthis._events.forEach(event => {\n\t\t\tif (event.startOffset === time) {\n\t\t\t\tif (isUndef(value) || (isDefined(value) && event.value === value)) {\n\t\t\t\t\tthis._events.delete(event);\n\t\t\t\t\tevent.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove all of the notes from the group.\n\t */\n\tclear(): this {\n\t\tthis._forEach(event => event.dispose());\n\t\tthis._events.clear();\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t *  @param after The time after which to cancel the scheduled events.\n\t */\n\tcancel(after?: TransportTime | TransportTimeClass): this {\n\t\tthis._forEach(event => event.cancel(after));\n\t\tthis._state.cancel(this.toTicks(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over all of the events\n\t */\n\tprivate _forEach(callback: (event: ToneEvent) => void): this {\n\t\tif (this._events) {\n\t\t\tthis._events.forEach(event => {\n\t\t\t\tif (event instanceof Part) {\n\t\t\t\t\tevent._forEach(callback);\n\t\t\t\t} else {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Set the attribute of all of the events\n\t *  @param  attr  the attribute to set\n\t *  @param  value      The value to set it to\n\t */\n\tprivate _setAll(attr: string, value: any): void {\n\t\tthis._forEach(event => {\n\t\t\tevent[attr] = value;\n\t\t});\n\t}\n\n\t/**\n\t *  Internal tick method\n\t *  @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds, value?: any): void {\n\t\tif (!this.mute) {\n\t\t\tthis.callback(time, value);\n\t\t}\n\t}\n\n\t/**\n\t *  Determine if the event should be currently looping\n\t *  given the loop boundries of this Part.\n\t *  @param  event  The event to test\n\t */\n\tprivate _testLoopBoundries(event: ToneEvent): void {\n\t\tif (this._loop && (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd)) {\n\t\t\tevent.cancel(0);\n\t\t} else if (event.state === \"stopped\") {\n\t\t\t// reschedule it if it's stopped\n\t\t\tthis._restartEvent(event);\n\t\t}\n\t}\n\n\t/**\n\t *  The probability of the notes being triggered.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t\tthis._setAll(\"probability\", prob);\n\t}\n\n\t/**\n\t * If set to true, will apply small random variation\n\t * to the callback time. If the value is given as a time, it will randomize\n\t * by that amount.\n\t * @example\n\t * event.humanize = true;\n\t */\n\tget humanize(): boolean | Time {\n\t\treturn this._humanize;\n\t}\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t\tthis._setAll(\"humanize\", variation);\n\t}\n\n\t/**\n\t * If the part should loop or not\n\t * between Part.loopStart and\n\t * Part.loopEnd. If set to true,\n\t * the part will loop indefinitely,\n\t * if set to a number greater than 1\n\t * it will play a specific number of\n\t * times, if set to false, 0 or 1, the\n\t * part will only play once.\n\t * @example\n\t * //loop the part 8 times\n\t * part.loop = 8;\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._forEach(event => {\n\t\t\tevent.loopStart = this.loopStart;\n\t\t\tevent.loopEnd = this.loopEnd;\n\t\t\tevent.loop = loop;\n\t\t\tthis._testLoopBoundries(event);\n\t\t});\n\t}\n\n\t/**\n\t *  The loopEnd point determines when it will\n\t *  loop if Part.loop is true.\n\t *  @memberOf Part#\n\t *  @type {Time}\n\t *  @name loopEnd\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._forEach(event => {\n\t\t\t\tevent.loopEnd = loopEnd;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t *  The loopStart point determines when it will\n\t *  loop if Part.loop is true.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._forEach(event => {\n\t\t\t\tevent.loopStart = this.loopStart;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * \tThe playback rate of the part\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._setAll(\"playbackRate\", rate);\n\t}\n\n\t/**\n\t * \tThe number of scheduled notes in the part.\n\t */\n\tget length(): number {\n\t\treturn this._events.size;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.clear();\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../component/channel/Volume\";\nimport { Param } from \"../core/context/Param\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface InstrumentOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n}\n\n/**\n *  Base-class for all instruments\n */\nexport abstract class Instrument<Options extends InstrumentOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The output and volume triming node\n\t */\n\tprivate _volume: Volume;\n\toutput: OutputNode;\n\n\t/**\n\t * The instrument only has an output\n\t */\n\tinput: undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * source.volume.value = -6;\n\t */\n\tvolume: Param<Decibels>;\n\n\t/**\n\t * Keep track of all events scheduled to the transport\n\t * when the instrument is 'synced'\n\t */\n\tprivate _scheduledEvents: number[] = [];\n\n\t/**\n\t * If the instrument is currently synced\n\t */\n\tprivate _synced: boolean = false;\n\n\tconstructor(options?: Partial<InstrumentOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Instrument.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Instrument.getDefaults(), arguments);\n\n\t\tthis._volume = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\tthis.output = this._volume;\n\t\treadOnly(this, \"volume\");\n\t}\n\n\tstatic getDefaults(): InstrumentOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tnumberOfOutputs: 1,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n\t * will be scheduled along the transport.\n\t * @example\n\t * instrument.sync()\n\t * //schedule 3 notes when the transport first starts\n\t * instrument.triggerAttackRelease('C4', '8n', 0)\n\t * instrument.triggerAttackRelease('E4', '8n', '8n')\n\t * instrument.triggerAttackRelease('G4', '8n', '4n')\n\t * //start the transport to hear the notes\n\t * Transport.start()\n\t * @returns {Instrument} this\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\t\tthis._syncMethod(\"triggerRelease\", 0);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Wrap the given method so that it can be synchronized\n\t * @param method Which method to wrap and sync\n\t * @param  timePosition What position the time argument appears in\n\t */\n\tprotected _syncMethod(method: string, timePosition: number): void {\n\t\tconst originalMethod = this[\"_original_\" + method] = this[method];\n\t\tthis[method] = (...args: any[]) => {\n\t\t\tconst time = args[timePosition];\n\t\t\tconst id = this.context.transport.schedule((t) => {\n\t\t\t\targs[timePosition] = t;\n\t\t\t\toriginalMethod.apply(this, args);\n\t\t\t}, time);\n\t\t\tthis._scheduledEvents.push(id);\n\t\t};\n\t}\n\n\t/**\n\t * Unsync the instrument from the Transport\n\t */\n\tunsync(): this {\n\t\tthis._scheduledEvents.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduledEvents = [];\n\t\tif (this._synced) {\n\t\t\tthis._synced = false;\n\t\t\tthis.triggerAttack = this._original_triggerAttack;\n\t\t\tthis.triggerRelease = this._original_triggerRelease;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Trigger the attack and then the release after the duration.\n\t *  @param  note     The note to trigger.\n\t *  @param  duration How long the note should be held for before\n\t *                          triggering the release. This value must be greater than 0.\n\t *  @param time  When the note should be triggered.\n\t *  @param  velocity The velocity the note should be triggered at.\n\t *  @example\n\t * //trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */\n\ttriggerAttackRelease(note: Frequency, duration: Time, time?: Time, velocity?: NormalRange): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tthis.triggerAttack(note, computedTime, velocity);\n\t\tthis.triggerRelease(computedTime + computedDuration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the instrument's note.\n\t * @param note the note to trigger\n\t * @param time the time to trigger the ntoe\n\t * @param velocity the velocity to trigger the note (betwee 0-1)\n\t */\n\tabstract triggerAttack(note: Frequency, time?: Time, velocity?: NormalRange): this;\n\t// tslint:disable-next-line: variable-name\n\tprivate _original_triggerAttack = this.triggerAttack;\n\n\t/**\n\t * Trigger the release phase of the current note.\n\t *  @param time when to trigger the release\n\t */\n\tabstract triggerRelease(...args: any[]): this;\n\t// tslint:disable-next-line: variable-name\n\tprivate _original_triggerRelease = this.triggerRelease;\n\n\t/**\n\t *  clean up\n\t *  @returns {Instrument} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.unsync();\n\t\tthis._scheduledEvents = [];\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope, EnvelopeOptions } from \"./Envelope\";\n\n/**\n * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts\n * an audio signal as the input and will apply the envelope to the amplitude\n * of the signal.\n * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n *\n * @param attack The amount of time it takes for the envelope to go from 0 to it's maximum value.\n * @param decay\tThe period of time after the attack that it takes for the envelope\n *                       \tto fall to the sustain value. Value must be greater than 0.\n * @param sustain\tThe percent of the maximum value that the envelope rests at until\n *                                \tthe release is triggered.\n * @param release\tThe amount of time after the release is triggered it takes to reach 0.\n *                         \tValue must be greater than 0.\n *  @example\n * var ampEnv = new AmplitudeEnvelope({\n * \t\"attack\": 0.1,\n * \t\"decay\": 0.2,\n * \t\"sustain\": 1.0,\n * \t\"release\": 0.8\n * }).toDestination();\n * //create an oscillator and connect it\n * var osc = new Tone.Oscillator().connect(ampEnv).start();\n * //trigger the envelopes attack and release \"8t\" apart\n * ampEnv.triggerAttackRelease(\"8t\");\n */\nexport class AmplitudeEnvelope extends Envelope {\n\n\tname = \"AmplitudeEnvelope\";\n\n\tprivate _gainNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\toutput: Gain = this._gainNode;\n\tinput: Gain = this._gainNode;\n\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tthis._sig.connect(this._gainNode.gain);\n\t\tthis.output = this._gainNode;\n\t\tthis.input = this._gainNode;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.dispose();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isNumber, isString } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { AMOscillator } from \"./AMOscillator\";\nimport { FatOscillator } from \"./FatOscillator\";\nimport { FMOscillator } from \"./FMOscillator\";\nimport { Oscillator } from \"./Oscillator\";\nimport { AMOscillatorOptions, FatOscillatorOptions,\n\tFMOscillatorOptions, OmniOscillatorConstructorOptions,\n\tOmniOscillatorOptions, OmniOscillatorType,\n\tPulseOscillatorOptions, PWMOscillatorOptions,\n\tToneOscillatorInterface, ToneOscillatorOptions, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\nimport { PWMOscillator } from \"./PWMOscillator\";\n\n/**\n * All of the oscillator types that OmniOscillator can take on\n */\ntype AnyOscillator = Oscillator | PWMOscillator | PulseOscillator | FatOscillator | AMOscillator | FMOscillator;\n\n/**\n * The constructor of each of the OmniOscillator types\n */\ntype TypeofAnyOscillator = typeof Oscillator | typeof PWMOscillator |\n\ttypeof PulseOscillator | typeof FatOscillator |\n\ttypeof AMOscillator | typeof FMOscillator;\n\n/**\n * Select the Oscillator's Options depending on the generic type.\n */\ntype ConditionalOptions<Osc extends AnyOscillator> =\n\tOsc extends FMOscillator ? FMOscillatorOptions :\n\tOsc extends Oscillator ? ToneOscillatorOptions :\n\tOsc extends AMOscillator ? AMOscillatorOptions :\n\tOsc extends FatOscillator ? FatOscillatorOptions :\n\tOsc extends PulseOscillator ? PulseOscillatorOptions :\n\tOsc extends PWMOscillator ? PWMOscillatorOptions :\n\tToneOscillatorOptions;\n\n/**\n * The aggregate options of all of the oscillators\n */\n// export type OmniOscillatorOptions = ConditionalOptions<AnyOscillator>;\n\n/**\n * All of the Oscillator constructor types mapped to their name.\n */\ninterface OmniOscillatorSource {\n\t\"fm\": FMOscillator;\n\t\"am\": AMOscillator;\n\t\"pwm\": PWMOscillator;\n\t\"pulse\": PulseOscillator;\n\t\"oscillator\": Oscillator;\n\t\"fat\": FatOscillator;\n}\n\n/**\n * The available oscillator types.\n */\nexport type OmniOscSourceType = keyof OmniOscillatorSource;\n\n// Conditional Types\ntype IsAmOrFmOscillator<Osc, Ret> = Osc extends AMOscillator ? Ret : Osc extends FMOscillator ? Ret : undefined;\ntype IsFatOscillator<Osc, Ret> = Osc extends FatOscillator ? Ret : undefined;\ntype IsPWMOscillator<Osc, Ret> = Osc extends PWMOscillator ? Ret : undefined;\ntype IsPulseOscillator<Osc, Ret> = Osc extends PulseOscillator ? Ret : undefined;\ntype IsFMOscillator<Osc, Ret> = Osc extends FMOscillator ? Ret : undefined;\n\n// tslint:disable-next-line: variable-name\nconst OmniOscillatorSourceMap: {\n\t[key in OmniOscSourceType] : TypeofAnyOscillator\n} = {\n\tam: AMOscillator,\n\tfat: FatOscillator,\n\tfm: FMOscillator,\n\toscillator: Oscillator,\n\tpulse: PulseOscillator,\n\tpwm: PWMOscillator,\n};\n\n/**\n * OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n * Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n * into one class. The oscillator class can be changed by setting the `type`.\n * `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n * any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n * will use the FMOscillator, AMOscillator or FatOscillator respectively.\n * For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n * to a FatOscillator of type \"sawtooth\".\n *\n * @param frequency The initial frequency of the oscillator.\n * @param type The type of the oscillator.\n * @example\n * var omniOsc = new OmniOscillator(\"C#4\", \"pwm\");\n */\nexport class OmniOscillator<OscType extends AnyOscillator>\nextends Source<OmniOscillatorConstructorOptions>\nimplements Omit<ToneOscillatorInterface, \"type\"> {\n\n\tname = \"OmniOscillator\";\n\n\t/**\n\t *  The frequency control.\n\t */\n\treadonly frequency: Signal<Frequency> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"frequency\",\n\t});\n\n\t/**\n\t *  The detune control.\n\t */\n\treadonly detune: Signal<Cents> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"cents\",\n\t});\n\n\t/**\n\t * The oscillator that can switch types\n\t */\n\tprivate _oscillator!: AnyOscillator;\n\n\t/**\n\t *  the type of the oscillator source\n\t */\n\tprivate _sourceType!: OmniOscSourceType;\n\n\tconstructor(options?: Partial<OmniOscillatorConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: OmniOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\n\t\t// set the options\n\t\tthis.set(options);\n\t}\n\n\tstatic getDefaults(): OmniOscillatorOptions {\n\t\treturn Object.assign(\n\t\t\tOscillator.getDefaults(),\n\t\t\tFMOscillator.getDefaults(),\n\t\t\tAMOscillator.getDefaults(),\n\t\t\tFatOscillator.getDefaults(),\n\t\t\tPulseOscillator.getDefaults(),\n\t\t\tPWMOscillator.getDefaults(),\n\t\t);\n\t\t// return Oscillator.getDefaults() as OmniOscillatorConstructorOptions;\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._oscillator.start(time);\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\trestart(time?: Time): this {\n\t\tthis._oscillator.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n\t * when it's not.\n\t * @example\n\t * omniOsc.type = \"pwm\";\n\t * //modulationFrequency is parameter which is available\n\t * //only when the type is \"pwm\".\n\t * omniOsc.modulationFrequency.value = 0.5;\n\t * @example\n\t * //an square wave frequency modulated by a sawtooth\n\t * omniOsc.type = \"fmsquare\";\n\t * omniOsc.modulationType = \"sawtooth\";\n\t */\n\tget type(): OmniOscillatorType {\n\t\tlet prefix = \"\";\n\t\tif ([\"am\", \"fm\", \"fat\"].some(p => this._sourceType === p)) {\n\t\t\tprefix = this._sourceType;\n\t\t}\n\t\treturn prefix + this._oscillator.type as OmniOscillatorType;\n\t}\n\tset type(type) {\n\t\tif (type.substr(0, 2) === \"fm\") {\n\t\t\tthis._createNewOscillator(\"fm\");\n\t\t\tthis._oscillator = this._oscillator as FMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2) as ToneOscillatorType;\n\t\t} else if (type.substr(0, 2) === \"am\") {\n\t\t\tthis._createNewOscillator(\"am\");\n\t\t\tthis._oscillator = this._oscillator as AMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2)  as ToneOscillatorType;\n\t\t} else if (type.substr(0, 3) === \"fat\") {\n\t\t\tthis._createNewOscillator(\"fat\");\n\t\t\tthis._oscillator = this._oscillator as FatOscillator;\n\t\t\tthis._oscillator.type = type.substr(3)  as ToneOscillatorType;\n\t\t} else if (type === \"pwm\") {\n\t\t\tthis._createNewOscillator(\"pwm\");\n\t\t\tthis._oscillator = this._oscillator as PWMOscillator;\n\t\t} else if (type === \"pulse\") {\n\t\t\tthis._createNewOscillator(\"pulse\");\n\t\t} else {\n\t\t\tthis._createNewOscillator(\"oscillator\");\n\t\t\tthis._oscillator = this._oscillator as Oscillator;\n\t\t\tthis._oscillator.type = (type as ToneOscillatorType);\n\t\t}\n\t}\n\n\t/**\n\t * The partials of the waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillator.partials;\n\t}\n\tset partials(partials) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partials = partials;\n\t\t}\n\t}\n\n\t/**\n\t * The partial count of the oscillator. This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * @example\n\t * //set the maximum number of partials\n\t * osc.partialCount = 0;\n\t */\n\tget partialCount(): number {\n\t\treturn this._oscillator.partialCount;\n\t}\n\tset partialCount(partialCount) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partialCount = partialCount;\n\t\t}\n\t}\n\n\t/**\n\t * Set the parameters at once. Either pass in an\n\t * object mapping parameters to values, or to set a\n\t * single parameter, by passing in a string and value.\n\t * The last argument is an optional ramp time which\n\t * will ramp any signal values to their destination value\n\t * over the duration of the rampTime.\n\t * @param  params\n\t * @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : \"highpass\"\n\t * });\n\t */\n\tset(props: Partial<OmniOscillatorConstructorOptions>): this {\n\t\t// make sure the type is set first\n\t\tif (Reflect.has(props, \"type\") && props.type) {\n\t\t\tthis.type = props.type;\n\t\t\t// delete props.type;\n\t\t}\n\t\t// then set the rest\n\t\tsuper.set(props);\n\t\treturn this;\n\t}\n\n\tget(): OmniOscillatorConstructorOptions {\n\t\tconst options = this._oscillator.get();\n\t\t// @ts-ignore\n\t\toptions.type = this.type;\n\t\treturn options as OmniOscillatorOptions;\n\t}\n\n\t/**\n\t *  connect the oscillator to the frequency and detune signals\n\t */\n\tprivate _createNewOscillator(oscType: OmniOscSourceType): void {\n\t\tif (oscType !== this._sourceType) {\n\t\t\tthis._sourceType = oscType;\n\t\t\tconst oscConstructor = OmniOscillatorSourceMap[oscType];\n\t\t\t// short delay to avoid clicks on the change\n\t\t\tconst now = this.now();\n\t\t\tif (this._oscillator) {\n\t\t\t\tconst oldOsc = this._oscillator;\n\t\t\t\toldOsc.stop(now);\n\t\t\t\t// dispose the old one\n\t\t\t\tthis.context.setTimeout(() => oldOsc.dispose(), this.blockTime);\n\t\t\t}\n\t\t\t// @ts-ignore\n\t\t\tthis._oscillator = new oscConstructor({\n\t\t\t\tcontext : this.context,\n\t\t\t});\n\t\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\t\tthis.detune.connect(this._oscillator.detune);\n\t\t\tthis._oscillator.connect(this.output);\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._oscillator.start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._oscillator.phase;\n\t}\n\tset phase(phase) {\n\t\tthis._oscillator.phase = phase;\n\t}\n\n\t/**\n\t * The source type of the oscillator.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"fmsquare\");\n\t * omniOsc.sourceType // 'fm'\n\t */\n\tget sourceType(): OmniOscSourceType {\n\t\treturn this._sourceType;\n\t}\n\tset sourceType(sType) {\n\t\t// the basetype defaults to sine\n\t\tlet baseType = \"sine\";\n\t\tif (this._oscillator.type !== \"pwm\" && this._oscillator.type !== \"pulse\") {\n\t\t\tbaseType = this._oscillator.type;\n\t\t}\n\n\t\t// set the type\n\t\tif (sType === \"fm\") {\n\t\t\tthis.type = \"fm\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"am\") {\n\t\t\tthis.type = \"am\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"fat\") {\n\t\t\tthis.type = \"fat\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"oscillator\") {\n\t\t\tthis.type = baseType as OmniOscillatorType;\n\t\t} else if (sType === \"pulse\") {\n\t\t\tthis.type = \"pulse\";\n\t\t} else if (sType === \"pwm\") {\n\t\t\tthis.type = \"pwm\";\n\t\t}\n\t}\n\n\tprivate _getOscType<SourceType extends OmniOscSourceType>(\n\t\tosc: AnyOscillator,\n\t\tsourceType: SourceType,\n\t): osc is OmniOscillatorSource[SourceType] {\n\t\treturn osc instanceof OmniOscillatorSourceMap[sourceType];\n\t}\n\n\t/**\n\t * The base type of the oscillator.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"fmsquare4\");\n\t * omniOsc.sourceType // 'fm'\n\t * omniOsc.baseType //'square'\n\t * omniOsc.partialCount //4\n\t */\n\tget baseType(): OscillatorType | \"pwm\" | \"pulse\" {\n\t\treturn this._oscillator.baseType;\n\t}\n\tset baseType(baseType) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") &&\n\t\t\t!this._getOscType(this._oscillator, \"pwm\") &&\n\t\t\tbaseType !== \"pulse\" && baseType !== \"pwm\") {\n\t\t\tthis._oscillator.baseType = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * The width of the oscillator when sourceType === \"pulse\".\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"pulse\");\n\t * //can access the width attribute only if type === \"pulse\"\n\t * omniOsc.width.value = 0.2;\n\t */\n\tget width(): IsPulseOscillator<OscType, Signal<AudioRange>> {\n\t\tif (this._getOscType(this._oscillator, \"pulse\")) {\n\t\t\treturn this._oscillator.width as IsPulseOscillator<OscType, Signal<AudioRange>> ;\n\t\t} else {\n\t\t\treturn undefined as IsPulseOscillator<OscType, Signal<AudioRange>> ;\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators, when sourceType === \"fat\".\n\t */\n\tget count(): IsFatOscillator<OscType, number> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.count as IsFatOscillator<OscType, number>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, number>;\n\t\t}\n\t}\n\tset count(count) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(count)) {\n\t\t\tthis._oscillator.count = count;\n\t\t}\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents. See Tone.FatOscillator\n\t * for more info.\n\t */\n\tget spread(): IsFatOscillator<OscType, Cents> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.spread as IsFatOscillator<OscType, Cents>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, Cents>;\n\t\t}\n\t}\n\tset spread(spread) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(spread)) {\n\t\t\tthis._oscillator.spread = spread;\n\t\t}\n\t}\n\n\t/**\n\t * The type of the modulator oscillator. Only if the oscillator\n\t * is set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\n\t * for more info.\n\t */\n\tget modulationType(): IsAmOrFmOscillator<OscType, ToneOscillatorType> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.modulationType as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t}\n\t}\n\tset modulationType(mType) {\n\t\tif ((this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) && isString(mType)) {\n\t\t\tthis._oscillator.modulationType = mType;\n\t\t}\n\t}\n\n\t/**\n\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t * See Tone.FMOscillator for more info.\n\t */\n\tget modulationIndex(): IsFMOscillator<OscType, Signal<Positive>> {\n\t\tif (this._getOscType(this._oscillator, \"fm\")) {\n\t\t\treturn this._oscillator.modulationIndex as IsFMOscillator<OscType, Signal<Positive>>;\n\t\t} else {\n\t\t\treturn undefined as IsFMOscillator<OscType, Signal<Positive>>;\n\t\t}\n\t}\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n\t *  for more info.\n\t */\n\tget harmonicity(): IsAmOrFmOscillator<OscType, Signal<Positive>> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.harmonicity as IsAmOrFmOscillator<OscType, Signal<Positive>>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, Signal<Positive>>;\n\t\t}\n\t}\n\n\t/**\n\t * The modulationFrequency Signal of the oscillator\n\t * (only if the oscillator type is set to pwm). See\n\t * Tone.PWMOscillator for more info.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"pwm\");\n\t * //can access the modulationFrequency attribute only if type === \"pwm\"\n\t * omniOsc.modulationFrequency.value = 0.2;\n\t */\n\tget modulationFrequency(): IsPWMOscillator<OscType, Signal<Frequency>> {\n\t\tif (this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\treturn this._oscillator.modulationFrequency as IsPWMOscillator<OscType, Signal<Frequency>>;\n\t\t} else {\n\t\t\treturn undefined as IsPWMOscillator<OscType, Signal<Frequency>>;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis._oscillator.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { PWMOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n *\n * @param {Frequency} frequency The starting frequency of the oscillator.\n * @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse.\n * @example\n *  var pwm = new PWMOscillator(\"Ab3\", 0.3).toDestination().start();\n */\nexport class PWMOscillator extends Source<PWMOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"PWMOscillator\";\n\n\treadonly sourceType = \"pwm\";\n\n\t/**\n\t *  the pulse oscillator\n\t */\n\tprivate _pulse: PulseOscillator = new PulseOscillator({ context: this.context });\n\t/**\n\t *  the modulator\n\t *  @type {Tone.Oscillator}\n\t *  @private\n\t */\n\tprivate _modulator: Oscillator = new Oscillator({ context: this.context });\n\n\t/**\n\t *  Scale the oscillator so it doesn't go silent\n\t *  at the extreme values.\n\t */\n\tprivate _scale: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: 2,\n\t});\n\n\t/**\n\t *  The frequency control.\n\t */\n\treadonly frequency: Signal<Frequency> = this._modulator.frequency;\n\n\t/**\n\t *  The detune of the oscillator.\n\t */\n\treadonly detune: Signal<Cents> = this._modulator.detune;\n\n\t/**\n\t *  The modulation rate of the oscillator.\n\t */\n\treadonly modulationFrequency: Signal<Frequency> = this._pulse.frequency;\n\n\tconstructor(options?: Partial<PWMOscillatorOptions>);\n\tconstructor(frequency?: Frequency, modulationFrequency?: Frequency);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n\t\tconst options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n\n\t\t// change the pulse oscillator type\n\t\t// @ts-ignore\n\t\tthis._pulse._sawtooth.type = \"sine\";\n\n\t\tthis._pulse.frequency.setValueAtTime(options.modulationFrequency, 0);\n\t\tthis._modulator.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis._modulator.detune.setValueAtTime(options.detune, 0);\n\t\tthis._modulator.phase = options.phase;\n\n\t\t// connections\n\t\tthis._modulator.chain(this._scale, this._pulse.width);\n\t\tthis._pulse.connect(this.output);\n\t\treadOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PWMOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tmodulationFrequency: 0.4,\n\t\t\tphase: 0,\n\t\t\ttype: \"pwm\" as \"pwm\",\n\t\t});\n\t}\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.start(time);\n\t\tthis._pulse.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.stop(time);\n\t\tthis._pulse.stop(time);\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._pulse.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pwm\".\n\t */\n\tget type(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pwm\".\n\t */\n\tget baseType(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._modulator.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._pulse.dispose();\n\t\tthis._scale.dispose();\n\t\tthis._modulator.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { FatConstructorOptions, FatOscillatorOptions,\n\tToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\n\n/**\n *  FatOscillator is an array of oscillators with detune spread between the oscillators\n *  @param frequency The oscillator's frequency.\n *  @param type The type of the oscillator.\n *  @param spread The detune spread between the oscillators.\n *  @example\n * var fatOsc = new FatOscillator(\"Ab3\", \"sine\", 40).toDestination().start();\n */\nexport class FatOscillator extends Source<FatOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"FatOscillator\";\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"frequency\",\n\t});\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"cents\",\n\t});\n\n\t/**\n\t *  The array of oscillators\n\t */\n\tprivate _oscillators: Oscillator[] = [];\n\n\t/**\n\t *  The total spread of the oscillators\n\t */\n\tprivate _spread: Cents;\n\n\t/**\n\t *  The type of the oscillator\n\t */\n\tprivate _type: ToneOscillatorType;\n\n\t/**\n\t *  The phase of the oscillators\n\t */\n\tprivate _phase: Degrees;\n\n\t/**\n\t *  The partials array\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t *  The number of partials to use\n\t */\n\tprivate _partialCount: number;\n\n\tconstructor(options?: Partial<FatConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]));\n\t\tconst options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\n\t\tthis._spread = options.spread;\n\t\tthis._type = options.type;\n\t\tthis._phase = options.phase;\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\n\t\t// set the count initially\n\t\tthis.count = options.count;\n\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): FatOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tcount : 3,\n\t\t\tspread : 20,\n\t\t\ttype : \"sawtooth\",\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.start(time));\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.stop(time));\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.restart(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over all of the oscillators\n\t */\n\tprivate _forEach(iterator: (osc: Oscillator, index: number) => void): void {\n\t\tfor (let i = 0; i < this._oscillators.length; i++) {\n\t\t\titerator(this._oscillators[i], i);\n\t\t}\n\t}\n\n\t/**\n\t * The type of the oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\n\tset type(type: ToneOscillatorType) {\n\t\tthis._type = type;\n\t\tthis._forEach(osc => osc.type = type);\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents.\n\t */\n\tget spread(): Cents {\n\t\treturn this._spread;\n\t}\n\n\tset spread(spread: Cents) {\n\t\tthis._spread = spread;\n\t\tif (this._oscillators.length > 1) {\n\t\t\tconst start = -spread / 2;\n\t\t\tconst step = spread / (this._oscillators.length - 1);\n\t\t\tthis._forEach((osc, i) => osc.detune.value = start + step * i);\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators. Should be an integer greater than 1.\n\t */\n\tget count(): number {\n\t\treturn this._oscillators.length;\n\t}\n\n\tset count(count: number) {\n\t\tcount = Math.max(count, 1);\n\t\tif (this._oscillators.length !== count) {\n\t\t\t// dispose the previous oscillators\n\t\t\tthis._forEach(osc => osc.dispose());\n\t\t\tthis._oscillators = [];\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tconst osc = new Oscillator({\n\t\t\t\t\tcontext : this.context,\n\t\t\t\t});\n\t\t\t\tif (this.type === \"custom\") {\n\t\t\t\t\tosc.partials = this._partials;\n\t\t\t\t} else {\n\t\t\t\t\tosc.type = this._type;\n\t\t\t\t}\n\t\t\t\tosc.partialCount = this._partialCount;\n\t\t\t\tosc.phase = this._phase + (i / count) * 360;\n\t\t\t\tosc.volume.value = -6 - count * 1.1;\n\t\t\t\tthis.frequency.connect(osc.frequency);\n\t\t\t\tthis.detune.connect(osc.detune);\n\t\t\t\tosc.connect(this.output);\n\t\t\t\tthis._oscillators[i] = osc;\n\t\t\t}\n\t\t\t// set the spread\n\t\t\tthis.spread = this._spread;\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._forEach(osc => osc.start());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase;\n\t\tthis._forEach(osc => osc.phase = phase);\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._oscillators[0].baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._forEach(osc => osc.baseType = baseType);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @memberOf FatOscillator#\n\t * @type {Array}\n\t * @name partials\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillators[0].partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tif (partials.length) {\n\t\t\tthis._type = \"custom\";\n\t\t\tthis._forEach(osc => osc.partials = partials);\n\t\t}\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t * @memberOf FatOscillator#\n\t * @type {Number}\n\t * @name partialCount\n\t */\n\tget partialCount(): number {\n\t\treturn this._oscillators[0].partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._partialCount = partialCount;\n\t\tthis._forEach(osc => osc.partialCount = partialCount);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._forEach(osc => osc.dispose());\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { FMConstructorOptions, FMOscillatorOptions,\n\tNonCustomOscillatorType, ToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\n\n/**\n * FMOscillator implements a frequency modulation synthesis\n * ```\n *                                              +-------------+\n * +---------------+        +-------------+     | Carrier Osc |\n * | Modulator Osc +>-------> GainNode    |     |             +--->Output\n * +---------------+        |             +>----> frequency   |\n *                       +--> gain        |     +-------------+\n *                       |  +-------------+\n * +-----------------+   |\n * | modulationIndex +>--+\n * +-----------------+\n * ```\n *\n * @param frequency The starting frequency of the oscillator.\n * @param type The type of the carrier oscillator.\n * @param modulationType The type of the modulator oscillator.\n * @example\n * //a sine oscillator frequency-modulated by a square wave\n * var fmOsc = new FMOscillator(\"Ab3\", \"sine\", \"square\").toDestination().start();\n */\nexport class FMOscillator extends Source<FMOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"FMOscillator\";\n\n\t/**\n\t *  The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator = new Oscillator({\n\t\tcontext : this.context,\n\t\tfrequency: 0,\n\t});\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"frequency\",\n\t});\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents> = this._carrier.detune;\n\n\t/**\n\t *  The modulating oscillator\n\t */\n\tprivate _modulator = new Oscillator({ context : this.context });\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave.\n\t *  @example\n\t * //pitch the modulator an octave below carrier\n\t * synth.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<Positive> = new Multiply({\n\t\tcontext: this.context,\n\t\tunits: \"positive\",\n\t});\n\n\t/**\n\t *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t *  modulating signal (ma) -- as in ma/mf.\n\t */\n\treadonly modulationIndex: Signal<Positive> = new Multiply({\n\t\tcontext: this.context,\n\t\tunits: \"positive\",\n\t});\n\n\t/**\n\t *  the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\tconstructor(options?: Partial<FMConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier.type = options.type;\n\t\tthis._modulator.type = options.modulationType;\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\t\tthis.harmonicity.setValueAtTime(options.harmonicity, 0);\n\t\tthis.modulationIndex.setValueAtTime(options.modulationIndex, 0);\n\n\t\t// connections\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t\tthis.detune.connect(this._modulator.detune);\n\n\t\tthis.phase = options.phase;\n\n\t\treadOnly(this, [\"modulationIndex\", \"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): FMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationIndex: 2,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t *  stop and restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t */\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis.modulationIndex.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { AMConstructorOptions, AMOscillatorOptions,\n\tNonCustomOscillatorType, ToneOscillatorInterface,\n\tToneOscillatorType } from \"./OscillatorInterface\";\n\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n *\n * @param frequency The starting frequency of the oscillator.\n * @param type The type of the carrier oscillator.\n * @param modulationType The type of the modulator oscillator.\n * @example\n * //a sine oscillator frequency-modulated by a square wave\n * var fmOsc = new AMOscillator(\"Ab3\", \"sine\", \"square\").toDestination().start();\n */\nexport class AMOscillator extends Source<AMOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"AMOscillator\";\n\n\t/**\n\t *  The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator = new Oscillator({context : this.context });\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency> = this._carrier.frequency;\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents> = this._carrier.detune;\n\n\t/**\n\t *  The modulating oscillator\n\t */\n\tprivate _modulator = new Oscillator({ context : this.context });\n\n\t/**\n\t *  convert the -1,1 output to 0,1\n\t */\n\tprivate _modulationScale = new AudioToGain({ context: this.context });\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave.\n\t *  @example\n\t * //pitch the modulator an octave below carrier\n\t * synth.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<Positive> = new Multiply({\n\t\tcontext: this.context,\n\t\tunits: \"positive\",\n\t});\n\n\t/**\n\t *  the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t});\n\n\tconstructor(options?: Partial<AMConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier.type = options.type;\n\t\tthis._modulator.type = options.modulationType;\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\t\tthis.harmonicity.setValueAtTime(options.harmonicity, 0);\n\n\t\t// connections\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\n\t\tthis.phase = options.phase;\n\n\t\treadOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): AMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Seconds): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Seconds): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t */\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis._modulationScale.dispose();\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource, OneShotSourceOptions } from \"../OneShotSource\";\n\ninterface ToneOscillatorNodeOptions extends OneShotSourceOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\ttype: OscillatorType;\n}\n\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[Tone.Oscillator](Oscillator) is better for most use-cases***\n *  @extends {Tone.AudioNode}\n *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n *  @param  {Function}  onload  The callback to invoke when the\n *                               buffer is done playing.\n */\nexport class ToneOscillatorNode extends OneShotSource<ToneOscillatorNodeOptions> {\n\n\tname = \"ToneOscillatorNode\";\n\n\t/**\n\t *  The oscillator\n\t */\n\tprivate _oscillator = this.context.createOscillator();\n\tprotected _internalChannels = [this._gainNode, this._oscillator];\n\n\t/**\n\t *  The frequency of the oscillator\n\t */\n\treadonly frequency: Param<\"frequency\">;\n\n\t/**\n\t *  The detune of the oscillator\n\t */\n\treadonly detune: Param<\"cents\">;\n\n\tconstructor(options?: Partial<ToneOscillatorNodeOptions>);\n\tconstructor(\n\t\tfrequency: Frequency,\n\t\ttype: OscillatorType,\n\t);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tconnect(this._oscillator, this._gainNode);\n\n\t\tthis.type = options.type;\n\n\t\tthis.frequency = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._oscillator.frequency,\n\t\t\tunits : \"frequency\",\n\t\t\tvalue : this.toFrequency(options.frequency),\n\t\t});\n\n\t\tthis.detune = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._oscillator.detune,\n\t\t\tunits : \"cents\",\n\t\t\tvalue : options.detune,\n\t\t});\n\t}\n\n\tstatic getDefaults(): ToneOscillatorNodeOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\ttype: \"sine\" as OscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * Start the oscillator node at the given time\n\t * @param  time When to start the oscillator\n\t */\n\tstart(time?: Time): this {\n\t\tthis.log(\"start\", time);\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._startGain(computedTime);\n\t\tthis._oscillator.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\t/**\n\t * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n\t * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n\t */\n\tsetPeriodicWave(periodicWave: PeriodicWave): this {\n\t\tthis._oscillator.setPeriodicWave(periodicWave);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n\t */\n\tget type(): OscillatorType {\n\t\treturn this._oscillator.type;\n\t}\n\tset type(type: OscillatorType) {\n\t\tthis._oscillator.type = type;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._oscillator.disconnect();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState } from \"../core/util/StateTimeline\";\n\nexport type OneShotSourceCurve = \"linear\" | \"exponential\";\n\nexport interface OneShotSourceOptions extends ToneAudioNodeOptions {\n\tonended: () => void;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tcurve: OneShotSourceCurve;\n}\n\nexport abstract class OneShotSource<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The callback to invoke after the\n\t *  source is done playing.\n\t */\n\tonended: () => void = noOp;\n\n\t/**\n\t * Sources do not have input nodes\n\t */\n\tinput: undefined;\n\n\t/**\n\t *  The start time\n\t */\n\tprotected _startTime: number = -1;\n\n\t/**\n\t *  The stop time\n\t */\n\tprotected _stopTime: number = -1;\n\n\t/**\n\t * The id of the timeout\n\t */\n\tprivate _timeout: number = -1;\n\n\t/**\n\t * The public output node\n\t */\n\toutput: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain : 0,\n\t});\n\n\t/**\n\t *  The output gain node.\n\t */\n\tprotected _gainNode = this.output;\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time;\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time;\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tprotected _curve: OneShotSourceCurve;\n\n\tconstructor(options: OneShotSourceOptions) {\n\t\tsuper(options);\n\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t\tthis._curve = options.curve;\n\t}\n\n\tstatic getDefaults(): OneShotSourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tcurve: \"linear\" as OneShotSourceCurve,\n\t\t\tfadeIn : 0,\n\t\t\tfadeOut: 0,\n\t\t\tonended : noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Stop the source node\n\t */\n\tprotected abstract _stopSource(time: Seconds): void;\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the node\n\t */\n\tprotected abstract start(time?: Time): this;\n\t/**\n\t * Start the source at the given time\n\t * @param  time When to start the source\n\t */\n\tprotected _startGain(time: Seconds, gain: GainFactor = 1): this {\n\t\tthis.assert(this._startTime === -1, \"Source cannot be started more than once\");\n\t\t// apply a fade in envelope\n\t\tconst fadeInTime = this.toSeconds(this._fadeIn);\n\n\t\t// record the start time\n\t\tthis._startTime = time + fadeInTime;\n\t\tthis._startTime = Math.max(this._startTime, this.context.currentTime);\n\n\t\t// schedule the envelope\n\t\tif (fadeInTime > 0) {\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._gainNode.gain.setValueAtTime(gain, time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source node at the given time.\n\t * @param time When to stop the source\n\t */\n\tstop(time?: Time): this {\n\t\tthis._stopGain(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source at the given time\n\t * @param  time When to stop the source\n\t */\n\tprotected _stopGain(time: Seconds): this {\n\t\tthis.assert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n\t\t// cancel the previous stop\n\t\tthis.cancelStop();\n\n\t\t// the fadeOut time\n\t\tconst fadeOutTime = this.toSeconds(this._fadeOut);\n\n\t\t// schedule the stop callback\n\t\tthis._stopTime = this.toSeconds(time) + fadeOutTime;\n\t\tthis._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\t\tif (fadeOutTime > 0) {\n\t\t\t// start the fade out curve at the given time\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// stop any ongoing ramps, and set the value to 0\n\t\t\tthis._gainNode.gain.cancelAndHoldAtTime(time);\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t}\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._timeout = this.context.setTimeout(() => {\n\t\t\t// allow additional time for the exponential curve to fully decay\n\t\t\tconst additionalTail = this._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n\t\t\tthis._stopSource(this.now() + additionalTail);\n\t\t\tthis._onended();\n\t\t}, this._stopTime - this.context.currentTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the onended callback\n\t */\n\tprotected _onended(): void {\n\t\tif (this.onended !== noOp) {\n\t\t\tthis.onended();\n\t\t\t// overwrite onended to make sure it only is called once\n\t\t\tthis.onended = noOp;\n\t\t\t// dispose when it's ended to free up for garbage collection\n\t\t\tsetTimeout(() => this.dispose(), 1000);\n\t\t}\n\t}\n\n\t/**\n\t *  Get the playback state at the given time\n\t */\n\tgetStateAtTime = function(time: Time): BasicPlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._startTime !== -1 && computedTime >= this._startTime &&\n\t\t\t(this._stopTime === -1 || computedTime <= this._stopTime)) {\n\t\t\treturn \"started\";\n\t\t} else {\n\t\t\treturn \"stopped\";\n\t\t}\n\t};\n\n\t/**\n\t * Get the playback state at the current time\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t *  Cancel a scheduled stop event\n\t */\n\tcancelStop(): this {\n\t\tthis.assert(this._startTime !== -1, \"Source is not started\");\n\t\t// cancel the stop envelope\n\t\tthis._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._stopTime = -1;\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\treturn this;\n\t}\n}\n","import { noOp } from \"../util/Interface\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\nexport interface TransportEventOptions {\n\tcallback: (time: number) => void;\n\tonce: boolean;\n\ttime: Ticks;\n}\n\n/**\n * TransportEvent is an internal class used by (Tone.Transport)[Transport]\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n * @param Transport The transport object which the event belongs to\n */\nexport class TransportEvent {\n\n\t/**\n\t * Reference to the Transport that created it\n\t */\n\tprotected transport: Transport;\n\n\t/**\n\t * The unique id of the event\n\t */\n\tid: number = TransportEvent._eventId++;\n\n\t/**\n\t * The time the event starts\n\t */\n\ttime: Ticks;\n\n\t/**\n\t * The callback to invoke\n\t */\n\tprivate callback?: (time: Seconds) => void;\n\n\t/**\n\t * If the event should be removed after being invoked.\n\t */\n\tprivate _once: boolean;\n\n\tconstructor(transport: Transport, opts: Partial<TransportEventOptions>) {\n\n\t\tconst options: TransportEventOptions = Object.assign(TransportEvent.getDefaults(), opts);\n\n\t\tthis.transport = transport;\n\t\tthis.callback = options.callback;\n\t\tthis._once = options.once;\n\t\tthis.time = options.time;\n\t}\n\n\tstatic getDefaults(): TransportEventOptions {\n\t\treturn {\n\t\t\tcallback: noOp,\n\t\t\tonce: false,\n\t\t\ttime: 0,\n\t\t};\n\t}\n\n\t/**\n\t * Current ID counter\n\t */\n\tprivate static _eventId: number = 0;\n\n\t/**\n\t * Invoke the event callback.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\tif (this.callback) {\n\t\t\tthis.callback(time);\n\t\t\tif (this._once) {\n\t\t\t\tthis.transport.clear(this.id);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tthis.callback = undefined;\n\t\treturn this;\n\t}\n}\n","import { Time, TimeClass } from \"../../core/type/Time\";\nimport { PlaybackState } from \"../../core/util/StateTimeline\";\nimport { Signal } from \"../../signal/Signal\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\nimport { Gain } from \"../context/Gain\";\nimport { Param } from \"../context/Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { readOnly, writable } from \"../util/Interface\";\nimport { IntervalTimeline } from \"../util/IntervalTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isArray, isDefined } from \"../util/TypeCheck\";\nimport { Clock } from \"./Clock\";\nimport { TransportEvent } from \"./TransportEvent\";\nimport { TransportRepeatEvent } from \"./TransportRepeatEvent\";\n\ninterface TransportOptions extends ToneWithContextOptions {\n\tbpm: BPM;\n\tswing: NormalRange;\n\tswingSubdivision: Subdivision;\n\ttimeSignature: number;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tppq: number;\n}\n\ntype TransportEventNames = \"start\" | \"stop\" | \"pause\" | \"loop\" | \"loopEnd\" | \"loopStart\";\n\ninterface SyncedSignalEvent {\n\tsignal: Signal;\n\tinitial: number;\n\tratio: Gain;\n}\n\ntype TransportCallback = (time: Seconds) => void;\n\n/**\n * Transport for timing musical events.\n * Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n * Transport timing events pass in the exact time of the scheduled event\n * in the argument of the callback function. Pass that time value to the object\n * you're scheduling. <br><br>\n * A single transport is created for you when the library is initialized.\n * <br><br>\n * The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n * called with the time of that event as the argument.\n *\n * @example\n * //repeated event every 8th note\n * Transport.scheduleRepeat(function(time){\n * \t//do something with the time\n * }, \"8n\");\n * @example\n * //schedule an event on the 16th measure\n * Transport.schedule(function(time){\n * \t//do something with the time\n * }, \"16:0:0\");\n */\nexport class Transport extends ToneWithContext<TransportOptions> implements Emitter<TransportEventNames> {\n\n\tname = \"Transport\";\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tLOOPING\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * \tIf the transport loops or not.\n\t */\n\tloop: boolean = false;\n\n\t/**\n\t * \tThe loop start position in ticks\n\t */\n\tprivate _loopStart: Ticks = 0;\n\n\t/**\n\t * \tThe loop end position in ticks\n\t */\n\tprivate _loopEnd: Ticks = 0;\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tCLOCK/TEMPO\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Pulses per quarter is the number of ticks per quarter note.\n\t */\n\tprivate _ppq: number;\n\n\t/**\n\t *  watches the main oscillator for timing ticks\n\t *  initially starts at 120bpm\n\t */\n\tprivate _clock: Clock<BPM>;\n\n\t/**\n\t * The Beats Per Minute of the Transport.\n\t * @example\n\t * Transport.bpm.value = 80;\n\t * //ramp the bpm to 120 over 10 seconds\n\t * Transport.bpm.rampTo(120, 10);\n\t */\n\tbpm: Param<BPM>;\n\n\t/**\n\t *  The time signature, or more accurately the numerator\n\t *  of the time signature over a denominator of 4.\n\t */\n\tprivate _timeSignature: number;\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tTIMELINE EVENTS\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  All the events in an object to keep track by ID\n\t */\n\tprivate _scheduledEvents = {};\n\n\t/**\n\t * \tThe scheduled events.\n\t */\n\tprivate _timeline: Timeline<TransportEvent> = new Timeline();\n\n\t/**\n\t *  Repeated events\n\t */\n\tprivate _repeatedEvents: IntervalTimeline = new IntervalTimeline();\n\n\t/**\n\t *  All of the synced Signals\n\t */\n\tprivate _syncedSignals: SyncedSignalEvent[] = [];\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tSWING\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The subdivision of the swing\n\t */\n\tprivate _swingTicks: Ticks;\n\n\t/**\n\t *  The swing amount\n\t */\n\tprivate _swingAmount: NormalRange = 0;\n\n\tconstructor(options?: Partial<TransportOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Transport.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Transport.getDefaults(), arguments);\n\n\t\t// CLOCK/TEMPO\n\t\tthis._ppq = options.ppq;\n\t\tthis._clock = new Clock({\n\t\t\tcallback : this._processTick.bind(this),\n\t\t\tcontext: this.context,\n\t\t\tfrequency : 0,\n\t\t\tunits: \"bpm\",\n\t\t});\n\t\tthis._bindClockEvents();\n\t\tthis.bpm = this._clock.frequency;\n\t\tthis._clock.frequency.multiplier = options.ppq;\n\t\tthis.bpm.value = options.bpm;\n\t\treadOnly(this, \"bpm\");\n\t\tthis._timeSignature = options.timeSignature;\n\n\t\t// SWING\n\t\tthis._swingTicks = options.ppq / 2; // 8n\n\t}\n\n\tstatic getDefaults(): TransportOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tbpm: 120,\n\t\t\tloopEnd: \"4m\" as Subdivision,\n\t\t\tloopStart: 0,\n\t\t\tppq: 192,\n\t\t\tswing: 0,\n\t\t\tswingSubdivision: \"8n\" as Subdivision,\n\t\t\ttimeSignature: 4,\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tTICKS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  called on every tick\n\t *  @param  tickTime clock relative tick time\n\t *  @private\n\t */\n\tprivate _processTick(tickTime: Seconds, ticks: Ticks): void {\n\t\t// handle swing\n\t\tif (this._swingAmount > 0 &&\n\t\t\tticks % this._ppq !== 0 && // not on a downbeat\n\t\t\tticks % (this._swingTicks * 2) !== 0) {\n\t\t\t// add some swing\n\t\t\tconst progress = (ticks % (this._swingTicks * 2)) / (this._swingTicks * 2);\n\t\t\tconst amount = Math.sin((progress) * Math.PI) * this._swingAmount;\n\t\t\ttickTime += new TicksClass(this.context, this._swingTicks * 2 / 3).toSeconds() * amount;\n\t\t}\n\t\t// do the loop test\n\t\tif (this.loop) {\n\t\t\tif (ticks >= this._loopEnd) {\n\t\t\t\tthis.emit(\"loopEnd\", tickTime);\n\t\t\t\tthis._clock.setTicksAtTime(this._loopStart, tickTime);\n\t\t\t\tticks = this._loopStart;\n\t\t\t\tthis.emit(\"loopStart\", tickTime, this._clock.getSecondsAtTime(tickTime));\n\t\t\t\tthis.emit(\"loop\", tickTime);\n\t\t\t}\n\t\t}\n\t\t// invoke the timeline events scheduled on this tick\n\t\tthis._timeline.forEachAtTime(ticks, event => event.invoke(tickTime));\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSCHEDULABLE EVENTS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Schedule an event along the timeline.\n\t * @param callback The callback to be invoked at the time.\n\t * @param time The time to invoke the callback at.\n\t * @return The id of the event which can be used for canceling the event.\n\t * @example\n\t * //trigger the callback when the Transport reaches the desired time\n\t * Transport.schedule(function(time){\n\t * \tenvelope.triggerAttack(time);\n\t * }, \"128i\");\n\t */\n\tschedule(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\ttime : new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Schedule a repeated event along the timeline. The event will fire\n\t * at the `interval` starting at the `startTime` and for the specified\n\t * `duration`.\n\t * @param  callback   The callback to invoke.\n\t * @param  interval   The duration between successive callbacks. Must be a positive number.\n\t * @param  startTime  When along the timeline the events should start being invoked.\n\t * @param  duration How long the event should repeat.\n\t * @return  The ID of the scheduled event. Use this to cancel the event.\n\t * @example\n\t * //a callback invoked every eighth note after the first measure\n\t * Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t */\n\tscheduleRepeat(\n\t\tcallback: TransportCallback,\n\t\tinterval: Time | TimeClass,\n\t\tstartTime?: TransportTime | TransportTimeClass,\n\t\tduration: Time = Infinity,\n\t): number {\n\t\tconst event = new TransportRepeatEvent(this, {\n\t\t\tcallback,\n\t\t\tduration : new TimeClass(this.context, duration).toTicks(),\n\t\t\tinterval: new TimeClass(this.context, interval).toTicks(),\n\t\t\ttime : new TransportTimeClass(this.context, startTime).toTicks(),\n\t\t});\n\t\t// kick it off if the Transport is started\n\t\t// @ts-ignore\n\t\treturn this._addEvent(event, this._repeatedEvents);\n\t}\n\n\t/**\n\t *  Schedule an event that will be removed after it is invoked.\n\t *  @param callback The callback to invoke once.\n\t *  @param time The time the callback should be invoked.\n\t *  @returns The ID of the scheduled event.\n\t */\n\tscheduleOnce(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\tonce : true,\n\t\t\ttime : new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Clear the passed in event id from the timeline\n\t * @param eventId The id of the event.\n\t */\n\tclear(eventId: number): this {\n\t\tif (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t\t\tconst item = this._scheduledEvents[eventId.toString()];\n\t\t\titem.timeline.remove(item.event);\n\t\t\titem.event.dispose();\n\t\t\tdelete this._scheduledEvents[eventId.toString()];\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an event to the correct timeline. Keep track of the\n\t * timeline it was added to.\n\t * @returns the event id which was just added\n\t */\n\tprivate _addEvent(event: TransportEvent, timeline: Timeline<TransportEvent>): number {\n\t\tthis._scheduledEvents[event.id.toString()] = {\n\t\t\tevent,\n\t\t\ttimeline,\n\t\t};\n\t\ttimeline.add(event);\n\t\treturn event.id;\n\t}\n\n\t/**\n\t * Remove scheduled events from the timeline after\n\t * the given time. Repeated events will be removed\n\t * if their startTime is after the given time\n\t * @param after Clear all events after this time.\n\t */\n\tcancel(after: TransportTime = 0): this {\n\t\tconst computedAfter = this.toTicks(after);\n\t\tthis._timeline.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\tthis._repeatedEvents.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSTART/STOP/PAUSE\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Bind start/stop/pause events from the clock and emit them.\n\t */\n\tprivate _bindClockEvents(): void {\n\t\tthis._clock.on(\"start\", (time, offset) => {\n\t\t\toffset = new TicksClass(this.context, offset).toSeconds();\n\t\t\tthis.emit(\"start\", time, offset);\n\t\t});\n\n\t\tthis._clock.on(\"stop\", (time) => {\n\t\t\tthis.emit(\"stop\", time);\n\t\t});\n\n\t\tthis._clock.on(\"pause\", (time) => {\n\t\t\tthis.emit(\"pause\", time);\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._clock.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the transport and all sources synced to the transport.\n\t * @param  time The time when the transport should start.\n\t * @param  offset The timeline offset to start the transport.\n\t * @example\n\t * //start the transport in one second starting at beginning of the 5th measure.\n\t * Transport.start(\"+1\", \"4:0:0\");\n\t */\n\tstart(time?: Time, offset?: TransportTime): this {\n\t\tlet offsetTicks;\n\t\tif (isDefined(offset)) {\n\t\t\toffsetTicks = this.toTicks(offset);\n\t\t}\n\t\t// start the clock\n\t\tthis._clock.start(time, offsetTicks);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the transport and all sources synced to the transport.\n\t * @param time The time when the transport should stop.\n\t * @example\n\t * Transport.stop();\n\t */\n\tstop(time?: Time): this {\n\t\tthis._clock.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the transport and all sources synced to the transport.\n\t */\n\tpause(time?: Time): this {\n\t\tthis._clock.pause(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Toggle the current state of the transport. If it is\n\t * started, it will stop it, otherwise it will start the Transport.\n\t * @param  time The time of the event\n\t */\n\ttoggle(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tif (this._clock.getStateAtTime(time) !== \"started\") {\n\t\t\tthis.start(time);\n\t\t} else {\n\t\t\tthis.stop(time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSETTERS/GETTERS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * The time signature as just the numerator over 4.\n\t * For example 4/4 would be just 4 and 6/8 would be 3.\n\t * @example\n\t * //common time\n\t * Transport.timeSignature = 4;\n\t * // 7/8\n\t * Transport.timeSignature = [7, 8];\n\t * //this will be reduced to a single number\n\t * Transport.timeSignature; //returns 3.5\n\t */\n\tget timeSignature(): TimeSignature {\n\t\treturn this._timeSignature;\n\t}\n\tset timeSignature(timeSig: TimeSignature) {\n\t\tif (isArray(timeSig)) {\n\t\t\ttimeSig = (timeSig[0] / timeSig[1]) * 4;\n\t\t}\n\t\tthis._timeSignature = timeSig;\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the starting position of the loop.\n\t */\n\tget loopStart(): Time {\n\t\treturn Time(this._loopStart, \"i\").toSeconds();\n\t}\n\tset loopStart(startPosition: Time) {\n\t\tthis._loopStart = this.toTicks(startPosition);\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the ending position of the loop.\n\t */\n\tget loopEnd(): Time {\n\t\treturn Time(this._loopEnd, \"i\").toSeconds();\n\t}\n\tset loopEnd(endPosition: Time) {\n\t\tthis._loopEnd = this.toTicks(endPosition);\n\t}\n\n\t/**\n\t * Set the loop start and stop at the same time.\n\t * @example\n\t * //loop over the first measure\n\t * Transport.setLoopPoints(0, \"1m\");\n\t * Transport.loop = true;\n\t */\n\tsetLoopPoints(startPosition: TransportTime, endPosition: TransportTime): this {\n\t\tthis.loopStart = startPosition;\n\t\tthis.loopEnd = endPosition;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The swing value. Between 0-1 where 1 equal to the note + half the subdivision.\n\t */\n\tget swing(): NormalRange {\n\t\treturn this._swingAmount;\n\t}\n\tset swing(amount: NormalRange) {\n\t\t// scale the values to a normal range\n\t\tthis._swingAmount = amount;\n\t}\n\n\t/**\n\t * Set the subdivision which the swing will be applied to.\n\t * The default value is an 8th note. Value must be less\n\t * than a quarter note.\n\t */\n\tget swingSubdivision(): Subdivision {\n\t\treturn new TicksClass(this.context, this._swingTicks).toNotation();\n\t}\n\tset swingSubdivision(subdivision: Subdivision) {\n\t\tthis._swingTicks = this.toTicks(subdivision);\n\t}\n\n\t/**\n\t *  The Transport's position in Bars:Beats:Sixteenths.\n\t *  Setting the value will jump to that position right away.\n\t */\n\tget position(): BarsBeatsSixteenths | Time {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\treturn new TicksClass(this.context, ticks).toBarsBeatsSixteenths();\n\t}\n\tset position(progress: Time) {\n\t\tconst ticks = this.toTicks(progress);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t *  The Transport's position in seconds\n\t *  Setting the value will jump to that position right away.\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._clock.seconds;\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.frequency.timeToTicks(s, now);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t *  The Transport's loop position as a normalized value. Always\n\t *  returns 0 if the transport if loop is not true.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this.loop) {\n\t\t\tconst now = this.now();\n\t\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\t\treturn (ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t *  The transports current tick position.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this._clock.ticks;\n\t}\n\tset ticks(t: Ticks) {\n\t\tif (this._clock.ticks !== t) {\n\t\t\tconst now = this.now();\n\t\t\t// stop everything synced to the transport\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis.emit(\"stop\", now);\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t\t// restart it with the new time\n\t\t\t\tthis.emit(\"start\", now, this.seconds);\n\t\t\t} else {\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\treturn Math.round(this._clock.getTicksAtTime(time));\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._clock.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t *  Pulses Per Quarter note. This is the smallest resolution\n\t *  the Transport timing supports. This should be set once\n\t *  on initialization and not set again. Changing this value\n\t *  after other objects have been created can cause problems.\n\t */\n\tget PPQ(): number {\n\t\treturn this._clock.frequency.multiplier;\n\t}\n\tset PPQ(ppq: number) {\n\t\tthis._clock.frequency.multiplier = ppq;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSYNCING\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Returns the time aligned to the next subdivision\n\t * of the Transport. If the Transport is not started,\n\t * it will return 0.\n\t * Note: this will not work precisely during tempo ramps.\n\t * @param  subdivision  The subdivision to quantize to\n\t * @return  The context time of the next subdivision.\n\t * @example\n\t * Transport.start(); //the transport must be started\n\t * Transport.nextSubdivision(\"4n\");\n\t */\n\tnextSubdivision(subdivision?: Time): Seconds {\n\t\tsubdivision = this.toTicks(subdivision);\n\t\tif (this.state !== \"started\") {\n\t\t\t// if the transport's not started, return 0\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tconst now = this.now();\n\t\t\t// the remainder of the current ticks and the subdivision\n\t\t\tconst transportPos = this.getTicksAtTime(now);\n\t\t\tconst remainingTicks = subdivision - transportPos % subdivision;\n\t\t\treturn this._clock.nextTickTime(remainingTicks, now);\n\t\t}\n\t}\n\n\t/**\n\t *  Attaches the signal to the tempo control signal so that\n\t *  any changes in the tempo will change the signal in the same\n\t *  ratio.\n\t *\n\t *  @param signal\n\t *  @param ratio Optionally pass in the ratio between the two signals.\n\t * \t\t\t\tOtherwise it will be computed based on their current values.\n\t */\n\tsyncSignal(signal: Signal<any>, ratio?: number): this {\n\t\tif (!ratio) {\n\t\t\t// get the sync ratio\n\t\t\tconst now = this.now();\n\t\t\tif (signal.getValueAtTime(now) !== 0) {\n\t\t\t\tconst bpm = this.bpm.getValueAtTime(now);\n\t\t\t\tconst computedFreq = 1 / (60 / bpm / this.PPQ);\n\t\t\t\tratio = signal.getValueAtTime(now) / computedFreq;\n\t\t\t} else {\n\t\t\t\tratio = 0;\n\t\t\t}\n\t\t}\n\t\tconst ratioSignal = new Gain(ratio);\n\t\t// @ts-ignore\n\t\tthis.bpm.connect(ratioSignal);\n\t\t// @ts-ignore\n\t\tratioSignal.connect(signal._param);\n\t\tthis._syncedSignals.push({\n\t\t\tinitial : signal.value,\n\t\t\tratio : ratioSignal,\n\t\t\tsignal,\n\t\t});\n\t\tsignal.value = 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsyncs a previously synced signal from the transport's control.\n\t *  See Transport.syncSignal.\n\t */\n\tunsyncSignal(signal: Signal<any>): this {\n\t\tfor (let i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t\t\tconst syncedSignal = this._syncedSignals[i];\n\t\t\tif (syncedSignal.signal === signal) {\n\t\t\t\tsyncedSignal.ratio.dispose();\n\t\t\t\tsyncedSignal.signal.value = syncedSignal.initial;\n\t\t\t\tthis._syncedSignals.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._clock.dispose();\n\t\twritable(this, \"bpm\");\n\t\tthis._timeline.dispose();\n\t\tthis._repeatedEvents.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t///////////////////////////////////////////////////////////////////////\n\n\ton!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\tonce!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\toff!: (event: TransportEventNames, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Transport);\n\n///////////////////////////////////////////////////////////////////////////////\n// \tINITIALIZATION\n///////////////////////////////////////////////////////////////////////////////\n\nonContextInit(context => {\n\tcontext.transport = new Transport({ context });\n});\n\nonContextClose(context => {\n\tcontext.transport.dispose();\n});\n","import { Tone } from \"../Tone\";\nimport { isDefined } from \"./TypeCheck\";\n\n/**\n * An IntervalTimeline event must have a time and duration\n */\nexport interface IntervalTimelineEvent {\n\ttime: number;\n\tduration: number;\n\t[propName: string]: any;\n}\n\n/**\n * Similar to Tone.Timeline, but all events represent\n * intervals with both \"time\" and \"duration\" times. The\n * events are placed in a tree structure optimized\n * for querying an intersection point with the timeline\n * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n * to represent the data.\n */\nexport class IntervalTimeline extends Tone {\n\n\tname = \"IntervalTimeline\";\n\n\t/**\n\t *  The root node of the inteval tree\n\t */\n\tprivate _root: IntervalNode | null = null;\n\n\t/**\n\t *  Keep track of the length of the timeline.\n\t */\n\tprivate _length: number = 0;\n\n\t/**\n\t *  The event to add to the timeline. All events must\n\t *  have a time and duration value\n\t *  @param  event  The event to add to the timeline\n\t */\n\tadd(event: IntervalTimelineEvent): this {\n\t\tthis.assert(isDefined(event.time), \"Events must have a time property\");\n\t\tthis.assert(isDefined(event.duration), \"Events must have a duration parameter\");\n\n\t\tevent.time = event.time.valueOf();\n\t\tlet node: IntervalNode | null = new IntervalNode(event.time, event.time + event.duration, event);\n\t\tif (this._root === null) {\n\t\t\tthis._root = node;\n\t\t} else {\n\t\t\tthis._root.insert(node);\n\t\t}\n\t\tthis._length++;\n\t\t// Restructure tree to be balanced\n\t\twhile (node !== null) {\n\t\t\tnode.updateHeight();\n\t\t\tnode.updateMax();\n\t\t\tthis._rebalance(node);\n\t\t\tnode = node.parent;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  event  The event to remove from the timeline\n\t */\n\tremove(event: IntervalTimelineEvent): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(event.time, results);\n\t\t\tfor (const node of results) {\n\t\t\t\tif (node.event === event) {\n\t\t\t\t\tthis._removeNode(node);\n\t\t\t\t\tthis._length--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The number of items in the timeline.\n\t *  @readOnly\n\t */\n\tget length(): number {\n\t\treturn this._length;\n\t}\n\n\t/**\n\t *  Remove events whose time time is after the given time\n\t *  @param  time  The time to query.\n\t */\n\tcancel(after: number): this {\n\t\tthis.forEachFrom(after, event => this.remove(event));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Set the root node as the given node\n\t */\n\tprivate _setRoot(node: IntervalNode | null): void {\n\t\tthis._root = node;\n\t\tif (this._root !== null) {\n\t\t\tthis._root.parent = null;\n\t\t}\n\t}\n\n\t/**\n\t *  Replace the references to the node in the node's parent\n\t *  with the replacement node.\n\t */\n\tprivate _replaceNodeInParent(node: IntervalNode, replacement: IntervalNode | null): void {\n\t\tif (node.parent !== null) {\n\t\t\tif (node.isLeftChild()) {\n\t\t\t\tnode.parent.left = replacement;\n\t\t\t} else {\n\t\t\t\tnode.parent.right = replacement;\n\t\t\t}\n\t\t\tthis._rebalance(node.parent);\n\t\t} else {\n\t\t\tthis._setRoot(replacement);\n\t\t}\n\t}\n\n\t/**\n\t *  Remove the node from the tree and replace it with\n\t *  a successor which follows the schema.\n\t */\n\tprivate _removeNode(node): void {\n\t\tif (node.left === null && node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, null);\n\t\t} else if (node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, node.left);\n\t\t} else if (node.left === null) {\n\t\t\tthis._replaceNodeInParent(node, node.right);\n\t\t} else {\n\t\t\tconst balance = node.getBalance();\n\t\t\tlet replacement: IntervalNode;\n\t\t\tlet temp: IntervalNode | null = null;\n\t\t\tif (balance > 0) {\n\t\t\t\tif (node.left.right === null) {\n\t\t\t\t\treplacement = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\ttemp = replacement;\n\t\t\t\t} else {\n\t\t\t\t\treplacement = node.left.right;\n\t\t\t\t\twhile (replacement.right !== null) {\n\t\t\t\t\t\treplacement = replacement.right;\n\t\t\t\t\t}\n\t\t\t\t\tif (replacement.parent) {\n\t\t\t\t\t\treplacement.parent.right = replacement.left;\n\t\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (node.right.left === null) {\n\t\t\t\treplacement = node.right;\n\t\t\t\treplacement.left = node.left;\n\t\t\t\ttemp = replacement;\n\t\t\t} else {\n\t\t\t\treplacement = node.right.left;\n\t\t\t\twhile (replacement.left !== null) {\n\t\t\t\t\treplacement = replacement.left;\n\t\t\t\t}\n\t\t\t\tif (replacement.parent) {\n\t\t\t\t\treplacement.parent.left = replacement.right;\n\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (node.parent !== null) {\n\t\t\t\tif (node.isLeftChild()) {\n\t\t\t\t\tnode.parent.left = replacement;\n\t\t\t\t} else {\n\t\t\t\t\tnode.parent.right = replacement;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._setRoot(replacement);\n\t\t\t}\n\t\t\tif (temp) {\n\t\t\t\tthis._rebalance(temp);\n\t\t\t}\n\t\t}\n\t\tnode.dispose();\n\t}\n\n\t/**\n\t *  Rotate the tree to the left\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\t_rotateLeft(node): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.right the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.right;\n\t\tnode.right = pivotNode.left;\n\t\tpivotNode.left = node;\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t *  Rotate the tree to the right\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\t_rotateRight(node): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.left the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.left;\n\t\tnode.left = pivotNode.right;\n\t\tpivotNode.right = node;\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t *  Balance the BST\n\t */\n\tprivate _rebalance(node: IntervalNode): void {\n\t\tconst balance = node.getBalance();\n\t\tif (balance > 1 && node.left) {\n\t\t\tif (node.left.getBalance() < 0) {\n\t\t\t\tthis._rotateLeft(node.left);\n\t\t\t} else {\n\t\t\t\tthis._rotateRight(node);\n\t\t\t}\n\t\t} else if (balance < -1 && node.right) {\n\t\t\tif (node.right.getBalance() > 0) {\n\t\t\t\tthis._rotateRight(node.right);\n\t\t\t} else {\n\t\t\t\tthis._rotateLeft(node);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Get an event whose time and duration span the give time. Will\n\t *  return the match whose \"time\" value is closest to the given time.\n\t *  @return  The event which spans the desired time\n\t */\n\tget(time: number): IntervalTimelineEvent | null {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tif (results.length > 0) {\n\t\t\t\tlet max = results[0];\n\t\t\t\tfor (let i = 1; i < results.length; i++) {\n\t\t\t\t\tif (results[i].low > max.low) {\n\t\t\t\t\t\tmax = results[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn max.event;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t *  Iterate over everything in the timeline.\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: IntervalTimelineEvent) => void): this {\n\t\tif (this._root !== null) {\n\t\t\tconst allNodes: IntervalNode[] = [];\n\t\t\tthis._root.traverse(node => allNodes.push(node));\n\t\t\tallNodes.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array in which the given time\n\t *  overlaps with the time and duration time of the event.\n\t *  @param  time The time to check if items are overlapping\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: IntervalTimelineEvent) => void): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array in which the time is greater\n\t *  than or equal to the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time, callback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.searchAfter(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._root !== null) {\n\t\t\tthis._root.traverse(node => node.dispose());\n\t\t}\n\t\tthis._root = null;\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tINTERVAL NODE HELPER\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Represents a node in the binary search tree, with the addition\n *  of a \"high\" value which keeps track of the highest value of\n *  its children.\n *  References:\n *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n *  @param low\n *  @param high\n */\n// tslint:disable-next-line: max-classes-per-file\nclass IntervalNode {\n\n\t// the event container\n\tevent: IntervalTimelineEvent | null;\n\t// the low value\n\tlow: number;\n\t// the high value\n\thigh: number;\n\t// the high value for this and all child nodes\n\tmax: number;\n\t// the nodes to the left\n\tprivate _left: IntervalNode | null = null;\n\t// the nodes to the right\n\tprivate _right: IntervalNode | null = null;\n\t// the parent node\n\tparent: IntervalNode | null = null;\n\t// the number of child nodes\n\theight: number = 0;\n\n\tconstructor(low, high, event) {\n\t\tthis.event = event;\n\t\t// the low value\n\t\tthis.low = low;\n\t\t// the high value\n\t\tthis.high = high;\n\t\t// the high value for this and all child nodes\n\t\tthis.max = this.high;\n\t}\n\n\t/**\n\t *  Insert a node into the correct spot in the tree\n\t */\n\tinsert(node: IntervalNode): void {\n\t\tif (node.low <= this.low) {\n\t\t\tif (this.left === null) {\n\t\t\t\tthis.left = node;\n\t\t\t} else {\n\t\t\t\tthis.left.insert(node);\n\t\t\t}\n\t\t} else if (this.right === null) {\n\t\t\tthis.right = node;\n\t\t} else {\n\t\t\tthis.right.insert(node);\n\t\t}\n\t}\n\n\t/**\n\t *  Search the tree for nodes which overlap\n\t *  with the given point\n\t *  @param  point  The point to query\n\t *  @param  results  The array to put the results\n\t */\n\tsearch(point: number, results: IntervalNode[]): void {\n\t\t// If p is to the right of the rightmost point of any interval\n\t\t// in this node and all children, there won't be any matches.\n\t\tif (point > this.max) {\n\t\t\treturn;\n\t\t}\n\t\t// Search left children\n\t\tif (this.left !== null) {\n\t\t\tthis.left.search(point, results);\n\t\t}\n\t\t// Check this node\n\t\tif (this.low <= point && this.high > point) {\n\t\t\tresults.push(this);\n\t\t}\n\t\t// If p is to the left of the time of this interval,\n\t\t// then it can't be in any child to the right.\n\t\tif (this.low > point) {\n\t\t\treturn;\n\t\t}\n\t\t// Search right children\n\t\tif (this.right !== null) {\n\t\t\tthis.right.search(point, results);\n\t\t}\n\t}\n\n\t/**\n\t *  Search the tree for nodes which are less\n\t *  than the given point\n\t *  @param  point  The point to query\n\t *  @param  results  The array to put the results\n\t */\n\tsearchAfter(point: number, results: IntervalNode[]): void {\n\t\t// Check this node\n\t\tif (this.low >= point) {\n\t\t\tresults.push(this);\n\t\t\tif (this.left !== null) {\n\t\t\t\tthis.left.searchAfter(point, results);\n\t\t\t}\n\t\t}\n\t\t// search the right side\n\t\tif (this.right !== null) {\n\t\t\tthis.right.searchAfter(point, results);\n\t\t}\n\t}\n\n\t/**\n\t *  Invoke the callback on this element and both it's branches\n\t *  @param  {Function}  callback\n\t */\n\ttraverse(callback: (self: IntervalNode) => void): void {\n\t\tcallback(this);\n\t\tif (this.left !== null) {\n\t\t\tthis.left.traverse(callback);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.right.traverse(callback);\n\t\t}\n\t}\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tupdateHeight(): void {\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tthis.height = Math.max(this.left.height, this.right.height) + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tthis.height = this.right.height + 1;\n\t\t} else if (this.left !== null) {\n\t\t\tthis.height = this.left.height + 1;\n\t\t} else {\n\t\t\tthis.height = 0;\n\t\t}\n\t}\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tupdateMax(): void {\n\t\tthis.max = this.high;\n\t\tif (this.left !== null) {\n\t\t\tthis.max = Math.max(this.max, this.left.max);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.max = Math.max(this.max, this.right.max);\n\t\t}\n\t}\n\n\t/**\n\t *  The balance is how the leafs are distributed on the node\n\t *  @return  Negative numbers are balanced to the right\n\t */\n\tgetBalance(): number {\n\t\tlet balance = 0;\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tbalance = this.left.height - this.right.height;\n\t\t} else if (this.left !== null) {\n\t\t\tbalance = this.left.height + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tbalance = -(this.right.height + 1);\n\t\t}\n\t\treturn balance;\n\t}\n\n\t/**\n\t *  @returns true if this node is the left child of its parent\n\t */\n\tisLeftChild(): boolean {\n\t\treturn this.parent !== null && this.parent.left === this;\n\t}\n\n\t/**\n\t *  get/set the left node\n\t */\n\tget left(): IntervalNode | null {\n\t\treturn this._left;\n\t}\n\n\tset left(node: IntervalNode | null) {\n\t\tthis._left = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t *  get/set the right node\n\t */\n\tget right(): IntervalNode | null {\n\t\treturn this._right;\n\t}\n\n\tset right(node: IntervalNode | null) {\n\t\tthis._right = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t *  null out references.\n\t */\n\tdispose(): void {\n\t\tthis.parent = null;\n\t\tthis._left = null;\n\t\tthis._right = null;\n\t\tthis.event = null;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter, EmitterEventObject } from \"../util/Emitter\";\nimport { noOp, readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline } from \"../util/StateTimeline\";\nimport { TickSignal } from \"./TickSignal\";\nimport { TickSource } from \"./TickSource\";\n\ntype ClockCallback = (time: Time, ticks?: Ticks) => void;\n\ninterface ClockOptions extends ToneWithContextOptions {\n\tfrequency: number;\n\tcallback: ClockCallback;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ntype ClockEvent = \"start\" | \"stop\" | \"pause\";\n\n/**\n * A sample accurate clock which provides a callback at the given rate.\n * While the callback is not sample-accurate (it is still susceptible to\n * loose JS timing), the time passed in as the argument to the callback\n * is precise. For most applications, it is better to use Tone.Transport\n * instead of the Clock by itself since you can synchronize multiple callbacks.\n *\n * @param callback The callback to be invoked with the time of the audio event\n * @param frequency The rate of the callback\n * @example\n * //the callback will be invoked approximately once a second\n * //and will print the time exactly once a second apart.\n * const clock = new Clock(time => {\n * \tconsole.log(time);\n * }, 1);\n */\nexport class Clock<Type extends BPM | Hertz = Hertz>\nextends ToneWithContext<ClockOptions> implements Emitter<ClockEvent> {\n\n\tname = \"Clock\";\n\n\t/**\n\t *  The callback function to invoke at the scheduled tick.\n\t */\n\tcallback: ClockCallback = noOp;\n\n\t/**\n\t *  The tick counter\n\t */\n\tprivate _tickSource: TickSource<Type>;\n\n\t/**\n\t *  The last time the loop callback was invoked\n\t */\n\tprivate _lastUpdate: number = 0;\n\n\t/**\n\t *  Keep track of the playback state\n\t */\n\tprivate _state: StateTimeline = new StateTimeline(\"stopped\");\n\n\t/**\n\t * Context bound reference to the _loop method\n\t * This is necessary to remove the event in the end.\n\t */\n\tprivate _boundLoop: () => void = this._loop.bind(this);\n\n\t/**\n\t *  The rate the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<Type>;\n\n\tconstructor(options: Partial<ClockOptions>);\n\tconstructor(callback?: ClockCallback, frequency?: Frequency);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]));\n\t\tconst options = optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]);\n\n\t\tthis.callback = options.callback;\n\t\tthis._tickSource = new TickSource({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tunits: options.units,\n\t\t});\n\t\tthis._lastUpdate = 0;\n\t\tthis.frequency = this._tickSource.frequency;\n\t\treadOnly(this, \"frequency\");\n\n\t\t// add an initial state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\n\t\t// bind a callback to the worker thread\n\t\tthis.context.on(\"tick\", this._boundLoop);\n\t}\n\n\tstatic getDefaults(): ClockOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback: noOp as ClockCallback,\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\",\n\t\t}) as ClockOptions;\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  time    The time the clock should start\n\t *  @param offset  Where the tick counter starts counting from.\n\t */\n\tstart(time?: Time, offset?: Ticks): this {\n\t\t// make sure the context is started\n\t\tthis.context.resume();\n\t\t// start the loop\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis._tickSource.start(computedTime, offset);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"start\", computedTime, offset);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t *  @param time The time when the clock should stop.\n\t *  @returns {Clock} this\n\t *  @example\n\t * clock.stop();\n\t */\n\tstop(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis._tickSource.stop(computedTime);\n\t\tif (computedTime < this._lastUpdate) {\n\t\t\tthis.emit(\"stop\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param time The time when the clock should stop.\n\t */\n\tpause(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t\tthis._tickSource.pause(computedTime);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"pause\", computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The number of times the callback was invoked. Starts counting at 0\n\t *  and increments after the callback was invoked.\n\t */\n\tget ticks(): Ticks {\n\t\treturn Math.ceil(this.getTicksAtTime(this.now()));\n\t}\n\tset ticks(t: Ticks) {\n\t\tthis._tickSource.ticks = t;\n\t}\n\n\t/**\n\t *  The time since ticks=0 that the Clock has been running. Accounts for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._tickSource.seconds;\n\t}\n\tset seconds(s: Seconds) {\n\t\tthis._tickSource.seconds = s;\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._tickSource.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\tthis._tickSource.setTicksAtTime(ticks, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\treturn this._tickSource.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the next tick\n\t * @param  ticks The tick number.\n\t */\n\tnextTickTime(offset: Ticks, when: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst currentTick = this.getTicksAtTime(computedTime);\n\t\treturn this._tickSource.getTimeOfTick(currentTick + offset, computedTime);\n\t}\n\n\t/**\n\t *  The scheduling loop.\n\t */\n\tprivate _loop(): void {\n\n\t\tconst startTime = this._lastUpdate;\n\t\tconst endTime = this.now();\n\t\tthis._lastUpdate = endTime;\n\n\t\tif (startTime !== endTime) {\n\t\t\t// the state change events\n\t\t\tthis._state.forEachBetween(startTime, endTime, e => {\n\t\t\t\tswitch (e.state) {\n\t\t\t\t\tcase \"started\" :\n\t\t\t\t\t\tconst offset = this._tickSource.getTicksAtTime(e.time);\n\t\t\t\t\t\tthis.emit(\"start\", e.time, offset);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"stopped\" :\n\t\t\t\t\t\tif (e.time !== 0) {\n\t\t\t\t\t\t\tthis.emit(\"stop\", e.time);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"paused\" :\n\t\t\t\t\t\tthis.emit(\"pause\", e.time);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t\t// the tick callbacks\n\t\t\tthis._tickSource.forEachTickBetween(startTime, endTime, (time, ticks) => {\n\t\t\t\tthis.callback(time, ticks);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Returns the scheduled state at the given time.\n\t * @param  time  The time to query.\n\t * @return  The name of the state input in setStateAtTime.\n\t * @example\n\t * clock.start(\"+0.1\");\n\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tgetStateAtTime(time: Time): PlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(computedTime);\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.context.off(\"tick\", this._boundLoop);\n\t\tthis._tickSource.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t///////////////////////////////////////////////////////////////////////\n\n\ton!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\tonce!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\toff!: (event: ClockEvent, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Clock);\n","import { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\nexport interface DelayOptions extends ToneAudioNodeOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n *  Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n *  @param delayTime The delay applied to the incoming signal.\n *  @param maxDelay The maximum delay time.\n */\nexport class Delay extends ToneAudioNode<DelayOptions> {\n\n\tname = \"Delay\";\n\n\t/**\n\t * The maximum delay time. This cannot be changed after\n\t * the value is passed into the constructor.\n\t */\n\treadonly maxDelay: Time;\n\n\t/**\n\t *  The amount of time the incoming signal is delayed.\n\t */\n\treadonly delayTime: Param<Time>;\n\n\t/**\n\t * Private reference to the internal DelayNode\n\t */\n\tprivate _delayNode: DelayNode;\n\treadonly input: DelayNode;\n\treadonly output: DelayNode;\n\n\t/**\n\t * The internal channels for channel routing changes\n\t */\n\tprotected _internalChannels: AudioNode[];\n\n\tconstructor(options?: Partial<DelayOptions>)\n\tconstructor(delayTime?: Time, maxDelay?: Time)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]));\n\n\t\tconst options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n\n\t\tconst maxDelayInSeconds = this.toSeconds(options.maxDelay);\n\t\tthis.maxDelay = Math.max(maxDelayInSeconds, this.toSeconds(options.delayTime));\n\n\t\tthis._delayNode = this.input = this.output = this.context.createDelay(maxDelayInSeconds);\n\t\tthis._internalChannels = [this._delayNode];\n\n\t\tthis.delayTime = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._delayNode.delayTime,\n\t\t\tunits : \"time\",\n\t\t\tvalue : options.delayTime,\n\t\t});\n\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): DelayOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdelayTime : 0,\n\t\t\tmaxDelay: 1,\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.disconnect();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { Context } from \"../context/Context\";\n\n/**\n *  Wrapper around the OfflineAudioContext\n *  @param  channels  The number of channels to render\n *  @param  duration  The duration to render in samples\n *  @param sampleRate the sample rate to render at\n */\nexport class OfflineContext extends Context {\n\n\tname = \"OfflineContext\";\n\n\t/**\n\t *  A private reference to the duration\n\t */\n\tprivate readonly _duration: Seconds;\n\n\t/**\n\t *  An artificial clock source\n\t */\n\tprivate _currentTime: Seconds = 0;\n\n\t/**\n\t * Private reference to the OfflineAudioContext.\n\t */\n\tprotected _context!: OfflineAudioContext;\n\n\tconstructor(channels: number | OfflineAudioContext, duration: Seconds, sampleRate: number) {\n\n\t\tsuper({\n\t\t\tclockSource: \"offline\",\n\t\t\tcontext: channels instanceof OfflineAudioContext ?\n\t\t\t\tchannels : new OfflineAudioContext(channels, duration * sampleRate, sampleRate),\n\t\t\tlookAhead: 0,\n\t\t\tupdateInterval: channels instanceof OfflineAudioContext ?\n\t\t\t\t\t128 / channels.sampleRate : 128 / sampleRate,\n\t\t});\n\n\t\tthis._duration = channels instanceof OfflineAudioContext ?\n\t\t\tchannels.length / channels.sampleRate : duration;\n\t}\n\n\t/**\n\t *  Override the now method to point to the internal clock time\n\t */\n\tnow(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t * Same as this.now()\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t *  Render the output of the OfflineContext\n\t */\n\trender(): Promise<AudioBuffer> {\n\t\twhile (this._duration - this._currentTime >= 0) {\n\t\t\t// invoke all the callbacks on that time\n\t\t\tthis.emit(\"tick\");\n\t\t\t// increment the clock in 5ms chunks\n\t\t\tthis._currentTime += 0.005;\n\t\t}\n\n\t\treturn this._context.startRendering();\n\t}\n\n\t/**\n\t *  Close the context\n\t */\n\tclose(): Promise<OfflineContext> {\n\t\treturn Promise.resolve(this);\n\t}\n}\n","export const version = \"14.1.1\";\n","import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n\ninterface MultibandSplitOptions extends ToneAudioNodeOptions {\n\tQ: Positive;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\n/**\n *  Split the incoming signal into three bands (low, mid, high)\n *  with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +>------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input +>-+-> lowFrequency < input < highFrequency +>--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +>-----------------> high\n *            +-----------------------+\n * ```\n *\n *  @param lowFrequency the low/mid crossover frequency\n *  @param highFrequency the mid/high crossover frequency\n */\nexport class MultibandSplit extends ToneAudioNode<MultibandSplitOptions> {\n\n\tname = \"MultibandSplit\";\n\n\t/**\n\t *  the input\n\t */\n\treadonly input = new Gain({ context: this.context });\n\n\t/**\n\t *  The low band.\n\t */\n\treadonly low = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t *  the lower filter of the mid band\n\t */\n\tprivate _lowMidFilter = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t *  The mid band output.\n\t */\n\treadonly mid = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t *  The high band output.\n\t */\n\treadonly high = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t * No output node. use either low/mid/high\n\t */\n\toutput = undefined;\n\n\t/**\n\t *  The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<Frequency>;\n\n\t/**\n\t *  The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<Frequency>;\n\n\tprotected _internalChannels = [this.input, this.low, this.mid, this.high];\n\n\t/**\n\t *  The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<Positive>;\n\n\tconstructor(lowFrequency?: Frequency, highFrequency?: Frequency);\n\tconstructor(options?: Partial<MultibandSplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]));\n\t\tconst options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n\n\t\tthis.lowFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.lowFrequency,\n\t\t});\n\n\t\tthis.highFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.highFrequency,\n\t\t});\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\n\t\tthis.input.fan(this.low, this.high);\n\t\tthis.input.chain(this._lowMidFilter, this.mid);\n\t\t// the frequency control signal\n\t\tthis.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);\n\t\tthis.highFrequency.fan(this.mid.frequency, this.high.frequency);\n\t\t// the Q value\n\t\tthis.Q.connect(this.low.Q);\n\t\tthis.Q.connect(this._lowMidFilter.Q);\n\t\tthis.Q.connect(this.mid.Q);\n\t\tthis.Q.connect(this.high.Q);\n\n\t\treadOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t}\n\n\tstatic getDefaults(): MultibandSplitOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\thighFrequency: 2500,\n\t\t\tlowFrequency: 400,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t\tthis.low.dispose();\n\t\tthis._lowMidFilter.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\n\ninterface EQ3Options extends ToneAudioNodeOptions {\n\tlow: Decibels;\n\tmid: Decibels;\n\thigh: Decibels;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\nexport class EQ3 extends ToneAudioNode<EQ3Options> {\n\tname = \"EQ3\";\n\n\t/**\n\t *  the input\n\t */\n\treadonly input: MultibandSplit;\n\n\t/**\n\t *  the output\n\t */\n\treadonly output = new Gain({ context: this.context });\n\n\tprivate _multibandSplit: MultibandSplit;\n\n\t/**\n\t *  The gain for the lower signals\n\t */\n\tprivate _lowGain: Gain<Decibels>;\n\n\t/**\n\t *  The gain for the mid signals\n\t */\n\tprivate _midGain: Gain<Decibels>;\n\n\t/**\n\t *  The gain for the high signals\n\t */\n\tprivate _highGain: Gain<Decibels>;\n\n\t/**\n\t * The gain in decibels of the low part\n\t */\n\treadonly low: Param<Decibels>;\n\n\t/**\n\t * The gain in decibels of the mid part\n\t */\n\treadonly mid: Param<Decibels>;\n\n\t/**\n\t * The gain in decibels of the high part\n\t */\n\treadonly high: Param<Decibels>;\n\n\t/**\n\t *  The Q value for all of the filters.\n\t */\n\treadonly Q: Signal<Positive>;\n\n\t/**\n\t *  The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<Frequency>;\n\n\t/**\n\t *  The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<Frequency>;\n\n\tprotected _internalChannels: ToneAudioNode[] = [];\n\n\tconstructor(lowLevel?: Decibels, midLevel?: Decibels, highLevel?: Decibels);\n\tconstructor(options: Partial<EQ3Options>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]));\n\t\tconst options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n\n\t\tthis.input = this._multibandSplit = new MultibandSplit({\n\t\t\tcontext: this.context,\n\t\t\thighFrequency: options.highFrequency,\n\t\t\tlowFrequency: options.lowFrequency,\n\t\t});\n\n\t\tthis._lowGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.low,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._midGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.mid,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._highGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.high,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis.low = this._lowGain.gain;\n\t\tthis.mid = this._midGain.gain;\n\t\tthis.high = this._highGain.gain;\n\t\tthis.Q = this._multibandSplit.Q;\n\t\tthis.lowFrequency = this._multibandSplit.lowFrequency;\n\t\tthis.highFrequency\t= this._multibandSplit.highFrequency;\n\n\t\t// the frequency bands\n\t\tthis._multibandSplit.low.chain(this._lowGain, this.output);\n\t\tthis._multibandSplit.mid.chain(this._midGain, this.output);\n\t\tthis._multibandSplit.high.chain(this._highGain, this.output);\n\n\t\treadOnly(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._internalChannels = [this._multibandSplit, this.output];\n\t}\n\n\tstatic getDefaults(): EQ3Options {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\thigh : 0,\n\t\t\thighFrequency : 2500,\n\t\t\tlow : 0,\n\t\t\tlowFrequency : 400,\n\t\t\tmid : 0,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._multibandSplit.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis._lowGain.dispose();\n\t\tthis._midGain.dispose();\n\t\tthis._highGain.dispose();\n\t\tthis.low.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ninterface MergeOptions extends ToneAudioNodeOptions {\n\tchannels: Positive;\n}\n\n/**\n * Merge brings multiple mono input channels into a single multichannel output channel.\n *\n * @param channels The number of channels to merge.\n * @example\n * var merge = new Merge().toDestination();\n * //routing a sine tone in the left channel\n * //and noise in the right channel\n * var osc = new Tone.Oscillator().connect(merge.left);\n * var noise = new Tone.Noise().connect(merge.right);\n * //starting our oscillators\n * noise.start();\n * osc.start();\n */\nexport class Merge extends ToneAudioNode<MergeOptions> {\n\n\tname = \"Merge\";\n\n\t/**\n\t *  The merger node for the two channels.\n\t */\n\tprivate _merger: ChannelMergerNode;\n\n\t/**\n\t * The output is the input channels combined into a sigle (multichannel) output\n\t */\n\toutput: AudioNode;\n\n\t/**\n\t * Multiple input connections combine into a single output.\n\t */\n\tinput: AudioNode;\n\n\tprotected _internalChannels = [];\n\n\tconstructor(channels?: Positive);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<MergeOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]));\n\t\tconst options = optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]);\n\n\t\tthis._merger = this.output = this.input = this.context.createChannelMerger(options.channels);\n\n\t\t// @ts-ignore\n\t\tthis.numberOfInputs = options.channels;\n\t\t// @ts-ignore\n\t\tthis.numberOfOutputs = 1;\n\t}\n\n\tstatic getDefaults(): MergeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannels: 2,\n\t\t\tnumberOfOutputs : 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._merger.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ntype AnalyserType = \"fft\" | \"waveform\";\n\ninterface AnalyserOptions extends ToneAudioNodeOptions {\n\tsize: PowerOfTwo;\n\ttype: AnalyserType;\n\tsmoothing: NormalRange;\n}\n\n/**\n *  Wrapper around the native Web Audio's [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n *  Extracts FFT or Waveform data from the incoming signal.\n *  @param type The return type of the analysis, either \"fft\", or \"waveform\".\n *  @param size The size of the FFT. This must be a power of two in the range 16 to 16384.\n */\nexport class Analyser extends ToneAudioNode<AnalyserOptions> {\n\n\tname = \"Analyser\";\n\n\tinput: AnalyserNode;\n\toutput: AnalyserNode;\n\n\t/**\n\t *  The analyser node.\n\t */\n\tprivate _analyser = this.context.createAnalyser();\n\tprotected _internalChannels = [this._analyser];\n\n\t/**\n\t *  The analysis type\n\t */\n\tprivate _type!: AnalyserType;\n\n\t/**\n\t *  The buffer that the FFT data is written to\n\t */\n\tprivate _buffer!: Float32Array;\n\n\tconstructor(type?: AnalyserType, size?: number);\n\tconstructor(options?: Partial<AnalyserOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]));\n\t\tconst options = optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]);\n\t\t// set the values initially\n\t\tthis.size = options.size;\n\t\tthis.type = options.type;\n\t\tthis.input = this.output = this._analyser;\n\t}\n\n\tstatic getDefaults(): AnalyserOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tsize: 1024,\n\t\t\tsmoothing: 0.8,\n\t\t\ttype: \"fft\" as AnalyserType,\n\t\t});\n\t}\n\n\t/**\n\t *  Run the analysis given the current settings and return the\n\t */\n\tgetValue(): Float32Array {\n\t\tif (this._type === \"fft\") {\n\t\t\tthis._analyser.getFloatFrequencyData(this._buffer);\n\t\t} else if (this._type === \"waveform\") {\n\t\t\tthis._analyser.getFloatTimeDomainData(this._buffer);\n\t\t}\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t *  The size of analysis. This must be a power of two in the range 16 to 16384.\n\t */\n\tget size(): PowerOfTwo {\n\t\treturn this._analyser.frequencyBinCount;\n\t}\n\tset size(size: PowerOfTwo) {\n\t\tthis._analyser.fftSize = size * 2;\n\t\tthis._buffer = new Float32Array(size);\n\t}\n\n\t/**\n\t *  The analysis function returned by analyser.getValue(), either \"fft\" or \"waveform\".\n\t */\n\tget type(): AnalyserType {\n\t\treturn this._type;\n\t}\n\tset type(type: AnalyserType) {\n\t\tthis.assert(type === \"waveform\" || type === \"fft\", `Analyser: invalid type: ${type}`);\n\t\tthis._type = type;\n\t}\n\n\t/**\n\t *  0 represents no time averaging with the last analysis frame.\n\t */\n\tget smoothing(): NormalRange {\n\t\treturn this._analyser.smoothingTimeConstant;\n\t}\n\n\tset smoothing(val: NormalRange) {\n\t\tthis._analyser.smoothingTimeConstant = val;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._analyser.disconnect();\n\t\treturn this;\n\t}\n}\n","export { Analyser } from \"./analysis/Analyser\";\nexport { CrossFade } from \"./channel/CrossFade\";\nexport { Merge } from \"./channel/Merge\";\nexport { Volume } from \"./channel/Volume\";\nexport { AmplitudeEnvelope } from \"./envelope/AmplitudeEnvelope\";\nexport { Envelope } from \"./envelope/Envelope\";\nexport { EQ3 } from \"./filter/EQ3\";\nexport { Filter } from \"./filter/Filter\";\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\ninterface ToneConvolverOptions extends EffectOptions {\n\tonload: () => void;\n\tnormalize: boolean;\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n}\n\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @param url The URL of the impulse response or the Tone.Buffer contianing the impulse response.\n * @param onload The callback to invoke when the url is loaded.\n * @example\n * //initializing the convolver with an impulse response\n * var convolver = new Convolver(\"./path/to/ir.wav\").toDestination();\n */\nexport class Convolver extends Effect<ToneConvolverOptions> {\n\n\tname = \"Convolver\";\n\n\t/**\n\t *  The native ConvolverNode\n\t */\n\tprivate _convolver: ConvolverNode = this.context.createConvolver();\n\n\t/**\n\t *  The Buffer belonging to the convolver\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<ToneConvolverOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer(options.url, buffer => {\n\t\t\tthis.buffer = buffer;\n\t\t\toptions.onload();\n\t\t});\n\n\t\t// set if it's already loaded\n\t\tif (this._buffer.loaded) {\n\t\t\tthis.buffer = this._buffer;\n\t\t}\n\n\t\t// initially set normalization\n\t\tthis.normalize = options.normalize;\n\n\t\t// connect it up\n\t\tthis.connectEffect(this._convolver);\n\t}\n\n\tstatic getDefaults(): ToneConvolverOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tnormalize : true,\n\t\t\tonload : noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Load an impulse response url as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * @param url The url of the buffer to load. filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<void> {\n\t\tthis.buffer = await this._buffer.load(url);\n\t}\n\n\t/**\n\t *  The convolver's buffer\n\t */\n\tget buffer(): ToneAudioBuffer | null {\n\t\tif (this._buffer.length) {\n\t\t\treturn this._buffer;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tset buffer(buffer) {\n\t\tif (buffer) {\n\t\t\tthis._buffer.set(buffer);\n\t\t}\n\t\t// if it's already got a buffer, create a new one\n\t\tif (this._convolver.buffer) {\n\t\t\t// disconnect the old one\n\t\t\tthis.effectSend.disconnect();\n\t\t\tthis._convolver.disconnect();\n\t\t\t// create and connect a new one\n\t\t\tthis._convolver = this.context.createConvolver();\n\t\t\tthis.connectEffect(this._convolver);\n\t\t}\n\t\tconst buff = this._buffer.get();\n\t\tthis._convolver.buffer = buff ? buff : null;\n\t}\n\n\t/**\n\t * The normalize property of the ConvolverNode interface is a boolean that\n\t * controls whether the impulse response from the buffer will be scaled by\n\t * an equal-power normalization when the buffer attribute is set, or not.\n\t */\n\tget normalize(): boolean {\n\t\treturn this._convolver.normalize;\n\t}\n\tset normalize(norm) {\n\t\tthis._convolver.normalize = norm;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer.dispose();\n\t\tthis._convolver.disconnect();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * GainToAudio converts an input in NormalRange [0,1] to AudioRange [-1,1].\n * See {@link AudioToGain}.\n *\n * @example\n * var a2g = new GainToAudio();\n */\nexport class GainToAudio extends SignalOperator<ToneAudioNodeOptions> {\n\n\tname = \"GainToAudio\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => Math.abs(x) * 2 - 1,\n\t});\n\tprotected _internalChannels = [this._norm];\n\n\t/**\n\t * The NormalRange input [0, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The AudioRange output [-1, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\nexport interface FeedbackEffectOptions extends EffectOptions {\n\t/**\n\t * The feedback from the output back to the input\n\t * ```\n\t * +---<--------<---+\n\t * |                |\n\t * |  +----------+  |\n\t * +--> feedback +>-+\n\t *    +----------+\n\t * ```\n\t */\n\tfeedback: NormalRange;\n}\n\n/**\n * FeedbackEffect provides a loop between an audio source and its own output.\n * This is a base-class for feedback effects.\n */\nexport abstract class FeedbackEffect<Options extends FeedbackEffectOptions> extends Effect<Options> {\n\n\tname = \"FeedbackEffect\";\n\n\t/**\n\t *  the gain which controls the feedback\n\t */\n\tprivate _feedbackGain: Gain<NormalRange>;\n\n\t/**\n\t *  The amount of signal which is fed back into the effect input.\n\t */\n\tfeedback: Param<NormalRange>;\n\n\tconstructor(options: FeedbackEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._feedbackGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.feedback,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\tthis.feedback = this._feedbackGain.gain;\n\t\treadOnly(this, \"feedback\");\n\n\t\t// the feedback loop\n\t\tthis.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t}\n\n\tstatic getDefaults(): FeedbackEffectOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfeedback: 0.125,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._feedbackGain.dispose();\n\t\tthis.feedback.dispose();\n\t\treturn this;\n\t}\n}\n","import { Delay } from \"../core/context/Delay\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { FeedbackEffect,  FeedbackEffectOptions } from \"./FeedbackEffect\";\n\ninterface FeedbackDelayOptions extends FeedbackEffectOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n * FeedbackDelay is a DelayNode in which part of output signal is fed back into the delay.\n *\n * @param delayTime The delay applied to the incoming signal.\n * @param feedback The amount of the effected signal which is fed back through the delay.\n * @example\n * var feedbackDelay = new FeedbackDelay(\"8n\", 0.5).toDestination();\n * var tom = new Tone.MembraneSynth({\n * \t\"octaves\" : 4,\n * \t\"pitchDecay\" : 0.1\n * }).connect(feedbackDelay);\n * tom.triggerAttackRelease(\"A2\",\"32n\");\n */\nexport class FeedbackDelay extends FeedbackEffect<FeedbackDelayOptions> {\n\n\t/**\n\t *  the delay node\n\t */\n\tprivate _delayNode: Delay;\n\n\t/**\n\t *  The delayTime of the FeedbackDelay.\n\t */\n\treadonly delayTime: Param<Time>;\n\n\tconstructor(delayTime?: Time, feedback?: NormalRange);\n\tconstructor(options?: Partial<FeedbackDelayOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n\t\tconst options = optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n\n\t\tthis._delayNode = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tdelayTime: options.delayTime,\n\t\t\tmaxDelay: options.maxDelay,\n\t\t});\n\t\tthis.delayTime = this._delayNode.delayTime;\n\t\tthis._internalChannels.push(this._delayNode);\n\n\t\t// connect it up\n\t\tthis.connectEffect(this._delayNode);\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): FeedbackDelayOptions {\n\t\treturn Object.assign(FeedbackEffect.getDefaults(), {\n\t\t\tdelayTime: 0.25,\n\t\t\tmaxDelay: 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.dispose();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","export { FeedbackDelay } from \"./FeedbackDelay\";\nexport { Convolver } from \"./Convolver\";\n","import { TicksClass } from \"../core/type/Ticks\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isString } from \"../core/util/TypeCheck\";\nimport { Part } from \"./Part\";\nimport { ToneEvent, ToneEventCallback, ToneEventOptions } from \"./ToneEvent\";\n\ntype SequenceEventDescription = Array<any | any[]>;\n\ninterface SequenceOptions extends Omit<ToneEventOptions, \"value\"> {\n\tloopStart: number;\n\tloopEnd: number;\n\tsubdivision: Time;\n\tevents: SequenceEventDescription;\n}\n\n/**\n * A sequence is an alternate notation of a part. Instead\n * of passing in an array of [time, event] pairs, pass\n * in an array of events which will be spaced at the\n * given subdivision. Sub-arrays will subdivide that beat\n * by the number of items are in the array.\n * Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n * @param  callback  The callback to invoke with every note\n * @param  sequence  The sequence\n * @param  subdivision  The subdivision between which events are placed.\n * @example\n * var seq = new Sequence(function(time, note){\n * \tconsole.log(note);\n * //straight quater notes\n * }, [\"C4\", \"E4\", \"G4\", \"A4\"], \"4n\");\n * @example\n * var seq = new Sequence(function(time, note){\n * \tconsole.log(note);\n * //subdivisions are given as subarrays\n * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]);\n */\nexport class Sequence extends ToneEvent {\n\n\tname = \"Sequence\";\n\n\t/**\n\t *  The subdivison of each note\n\t */\n\tprivate _subdivision: Ticks;\n\n\t/**\n\t * The object responsible for scheduling all of the events\n\t */\n\tprivate _part: Part = new Part({\n\t\tcallback: this._seqCallback.bind(this),\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * private reference to all of the sequence proxies\n\t */\n\tprivate _events: any[] = [];\n\n\t/**\n\t * The proxied array\n\t */\n\tprivate _eventsArray: any[] = [];\n\n\tconstructor(\n\t\tcallback?: ToneEventCallback,\n\t\tevents?: SequenceEventDescription,\n\t\tsubdivision?: Time,\n\t);\n\tconstructor(options?: Partial<SequenceOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]));\n\t\tconst options = optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]);\n\n\t\tthis._subdivision = this.toTicks(options.subdivision);\n\n\t\tthis.events = options.events;\n\n\t\t// set all of the values\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis.playbackRate = options.playbackRate;\n\t\tthis.probability = options.probability;\n\t\tthis.humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis.playbackRate = options.playbackRate;\n\t}\n\n\tstatic getDefaults(): SequenceOptions {\n\t\treturn Object.assign( omitFromObject(ToneEvent.getDefaults(), [\"value\"]), {\n\t\t\tevents: [],\n\t\t\tloop: true,\n\t\t\tloopEnd : 0,\n\t\t\tloopStart: 0,\n\t\t\tsubdivision: \"8n\",\n\t\t});\n\t}\n\n\t/**\n\t * The internal callback for when an event is invoked\n\t */\n\tprivate _seqCallback(time: Seconds, value: any): void {\n\t\tif (value !== null) {\n\t\t\tthis.callback(time, value);\n\t\t}\n\t}\n\n\t/**\n\t * The sequence\n\t */\n\tget events(): any[] {\n\t\treturn this._events;\n\t}\n\tset events(s) {\n\t\tthis.clear();\n\t\tthis._eventsArray = s;\n\t\tthis._events = this._createSequence(this._eventsArray);\n\t\tthis._eventsUpdated();\n\t}\n\n\t/**\n\t *  Start the part at the given time.\n\t *  @param  time    When to start the part.\n\t *  @param  offset  The offset index to start at\n\t */\n\tstart(time?: TransportTime, offset?: number): this {\n\t\tthis._part.start(time, offset ? this._indexTime(offset) : offset);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the part at the given time.\n\t *  @param  time  When to stop the part.\n\t */\n\tstop(time?: TransportTime): this {\n\t\tthis._part.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The subdivision of the sequence. This can only be\n\t *  set in the constructor. The subdivision is the\n\t *  interval between successive steps.\n\t */\n\tget subdivision(): Seconds {\n\t\treturn new TicksClass(this.context, this._subdivision).toSeconds();\n\t}\n\n\t/**\n\t * Create a sequence proxy which can be monitored to create subsequences\n\t */\n\tprivate _createSequence(array: any[]): any[] {\n\t\treturn new Proxy(array, {\n\t\t\tget: (target: any[], property: PropertyKey): any => {\n\t\t\t\t// property is index in this case\n\t\t\t\treturn target[property];\n\t\t\t},\n\t\t\tset: (target: any[], property: PropertyKey, value: any): boolean => {\n\t\t\t\tif (isString(property) && isFinite(parseInt(property, 10))) {\n\t\t\t\t\tconst index = parseInt(property, 10);\n\t\t\t\t\tif (isArray(value)) {\n\t\t\t\t\t\ttarget[property] = this._createSequence(value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[property] = value;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttarget[property] = value;\n\t\t\t\t}\n\t\t\t\tthis._eventsUpdated();\n\t\t\t\t// return true to accept the changes\n\t\t\t\treturn true;\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * When the sequence has changed, all of the events need to be recreated\n\t */\n\tprivate _eventsUpdated(): void {\n\t\tthis._part.clear();\n\t\tthis._rescheduleSequence(this._eventsArray, this._subdivision, this.startOffset);\n\t\t// update the loopEnd\n\t\tthis.loopEnd = this.loopEnd;\n\t}\n\n\t/**\n\t * reschedule all of the events that need to be rescheduled\n\t */\n\tprivate _rescheduleSequence(sequence: any[], subdivision: Ticks, startOffset: Ticks): void {\n\t\tsequence.forEach((value, index) => {\n\t\t\tconst eventOffset = index * (subdivision) + startOffset;\n\t\t\tif (isArray(value)) {\n\t\t\t\tthis._rescheduleSequence(value, subdivision / value.length, eventOffset);\n\t\t\t} else {\n\t\t\t\tconst startTime = new TicksClass(this.context, eventOffset, \"i\").toSeconds();\n\t\t\t\tthis._part.add(startTime, value);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t *  Get the time of the index given the Sequence's subdivision\n\t *  @param  index\n\t *  @return The time of that index\n\t *  @private\n\t */\n\tprivate _indexTime(index: number): Seconds {\n\t\treturn new TicksClass(this.context, index * (this._subdivision) + this.startOffset).toSeconds();\n\t}\n\n\t/**\n\t * Clear all of the events\n\t */\n\tclear(): this {\n\t\tthis._part.clear();\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._part.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// PROXY CALLS\n\t///////////////////////////////////////////////////////////////////////////\n\n\tget loop(): boolean | number {\n\t\treturn this._part.loop;\n\t}\n\tset loop(l) {\n\t\tif (this._part) {\n\t\t\tthis._part.loop = l;\n\t\t}\n\t}\n\n\t/**\n\t * The index at which the sequence should start looping\n\t */\n\tget loopStart(): number {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(index) {\n\t\tthis._loopStart = index;\n\t\tif (this._part) {\n\t\t\tthis._part.loopStart = this._indexTime(index);\n\t\t}\n\t}\n\n\t/**\n\t * The index at which the sequence should end looping\n\t */\n\tget loopEnd(): number {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(index) {\n\t\tthis._loopEnd = index;\n\t\tif (this._part) {\n\t\t\tif (index === 0) {\n\t\t\t\tthis._part.loopEnd = this._indexTime(this._eventsArray.length);\n\t\t\t} else {\n\t\t\t\tthis._part.loopEnd = this._indexTime(index);\n\t\t\t}\n\t\t}\n\t}\n\n\tget startOffset(): Ticks {\n\t\treturn this._part.startOffset;\n\t}\n\tset startOffset(start) {\n\t\tif (this._part) {\n\t\t\tthis._part.startOffset = start;\n\t\t}\n\t}\n\n\tget playbackRate(): Positive {\n\t\treturn this._part.playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tif (this._part) {\n\t\t\tthis._part.playbackRate = rate;\n\t\t}\n\t}\n\n\tget probability(): NormalRange {\n\t\treturn this._part.probability;\n\t}\n\tset probability(prob) {\n\t\tif (this._part) {\n\t\t\tthis._part.probability = prob;\n\t\t}\n\t}\n\n\tget humanize(): boolean | Time {\n\t\treturn this._part.humanize;\n\t}\n\tset humanize(variation) {\n\t\tif (this._part) {\n\t\t\tthis._part.humanize = variation;\n\t\t}\n\t}\n\n\t/**\n\t * The number of scheduled events\n\t */\n\tget length(): number {\n\t\treturn this._part.length;\n\t}\n}\n","export { Part } from \"./Part\";\nexport { Sequence } from \"./Sequence\";\nexport { ToneEvent } from \"./ToneEvent\";\n","import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isString } from \"../util/TypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\ninterface ToneAudioBuffersUrlMap {\n\t[name: string]: string | AudioBuffer | ToneAudioBuffer;\n\t[name: number]: string | AudioBuffer | ToneAudioBuffer;\n}\n\ninterface ToneAudioBuffersOptions {\n\turls: ToneAudioBuffersUrlMap;\n\tonload: () => void;\n\tonerror?: (error: Error) => void;\n\tbaseUrl: string;\n}\n\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @param  urls      An object literal or array of urls to load.\n * @param onload  The callback to invoke when the buffers are loaded.\n * @example\n * //load a whole bank of piano samples\n * var pianoSamples = new ToneAudioBuffers({\n * \t\"C4\" : \"path/to/C4.mp3\"\n * \t\"C#4\" : \"path/to/C#4.mp3\"\n * \t\"D4\" : \"path/to/D4.mp3\"\n * \t\"D#4\" : \"path/to/D#4.mp3\"\n * }, function(){\n * \t//play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"C4\");\n * \tplayer.start();\n * });\n * @example\n * //To pass in additional parameters in the second parameter\n * var buffers = new ToneAudioBuffers(urls, {\n * \t\"onload\" : callback,\n * \t\"baseUrl\" : \"../path/to/audio/\"\n * })\n */\nexport class ToneAudioBuffers extends Tone {\n\n\tname = \"ToneAudioBuffers\";\n\n\t/**\n\t *  All of the buffers\n\t */\n\tprivate _buffers: Map<string, ToneAudioBuffer> = new Map();\n\n\t/**\n\t *  A path which is prefixed before every url.\n\t */\n\tbaseUrl: string;\n\n\t/**\n\t * Keep track of the number of loaded buffers\n\t */\n\tprivate _loadingCount: number = 0;\n\n\tconstructor(\n\t\turls?: ToneAudioBuffersUrlMap,\n\t\tonload?: () => void,\n\t\tbaseUrl?: string,\n\t\t);\n\tconstructor(options?: Partial<ToneAudioBuffersOptions>);\n\tconstructor() {\n\n\t\tsuper();\n\t\tconst options = optionsFromArguments(\n\t\t\tToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\",\n\t\t);\n\n\t\tthis.baseUrl = options.baseUrl;\n\t\tconst urlMap: ToneAudioBuffersUrlMap = {};\n\t\t// add each one\n\t\tObject.keys(options.urls).forEach(name => {\n\t\t\tthis._loadingCount++;\n\t\t\tconst url = options.urls[name];\n\t\t\tthis.add(name, url, this._bufferLoaded.bind(this, (options as ToneAudioBuffersOptions).onload));\n\t\t});\n\n\t}\n\n\tstatic getDefaults(): ToneAudioBuffersOptions {\n\t\treturn {\n\t\t\tbaseUrl: \"\",\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\turls: {},\n\t\t};\n\t}\n\n\t/**\n\t *  True if the buffers object has a buffer by that name.\n\t *  @param  name  The key or index of the buffer.\n\t */\n\thas(name: string | number): boolean {\n\t\treturn this._buffers.has(name.toString());\n\t}\n\n\t/**\n\t *  Get a buffer by name. If an array was loaded,\n\t *  then use the array index.\n\t *  @param  name  The key or index of the buffer.\n\t */\n\tget(name: string | number): ToneAudioBuffer {\n\t\tthis.assert(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);\n\t\treturn this._buffers.get(name.toString()) as ToneAudioBuffer;\n\t}\n\n\t/**\n\t *  A buffer was loaded. decrement the counter.\n\t */\n\tprivate _bufferLoaded(callback: () => void): void {\n\t\tthis._loadingCount--;\n\t\tif (this._loadingCount === 0 && callback) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn Array.from(this._buffers).every(([name, buffer]) => buffer.loaded);\n\t}\n\n\t/**\n\t *  Add a buffer by name and url to the Buffers\n\t *  @param  name      A unique name to give the buffer\n\t *  @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n\t *  @param  callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(\n\t\tname: string | number,\n\t\turl: string | AudioBuffer | ToneAudioBuffer,\n\t\tcallback: () => void = noOp,\n\t): this {\n\t\tif (url instanceof ToneAudioBuffer) {\n\t\t\tthis._buffers.set(name.toString(), url);\n\t\t\tcallback();\n\t\t} else if (url instanceof AudioBuffer) {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(url));\n\t\t\tcallback();\n\t\t} else if (isString(url)) {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.forEach(buffer => buffer.dispose());\n\t\tthis._buffers.clear();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { ToneAudioBuffers } from \"../core/context/ToneAudioBuffers\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { isArray, isNote } from \"../core/util/TypeCheck\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { ToneBufferSource, ToneBufferSourceCurve } from \"../source/buffer/BufferSource\";\n\ninterface SamplesMap {\n\t[note: string]: ToneAudioBuffer | AudioBuffer | string;\n\t[midi: number]: ToneAudioBuffer | AudioBuffer | string;\n}\n\ninterface SamplerOptions extends InstrumentOptions {\n\tattack: Time;\n\trelease: Time;\n\tonload: () => void;\n\tbaseUrl: string;\n\tcurve: ToneBufferSourceCurve;\n\turls: SamplesMap;\n}\n\n/**\n * Pass in an object which maps the note's pitch or midi value to the url,\n * then you can trigger the attack and release of that note like other instruments.\n * By automatically repitching the samples, it is possible to play pitches which\n * were not explicitly included which can save loading time.\n *\n * For sample or buffer playback where repitching is not necessary,\n * use {@link Player}.\n * @param samples An object of samples mapping either Midi\n *                         Note Numbers or Scientific Pitch Notation\n *                         to the url of that sample.\n * @param onload The callback to invoke when all of the samples are loaded.\n * @param baseUrl The root URL of all of the samples, which is prepended to all the URLs.\n * @example\n * var sampler = new Sampler({\n * \t\"C3\" : \"path/to/C3.mp3\",\n * \t\"D#3\" : \"path/to/Dsharp3.mp3\",\n * \t\"F#3\" : \"path/to/Fsharp3.mp3\",\n * \t\"A3\" : \"path/to/A3.mp3\",\n * }, function(){\n * \t//sampler will repitch the closest sample\n * \tsampler.triggerAttack(\"D3\")\n * })\n */\nexport class Sampler extends Instrument<SamplerOptions> {\n\n\tname = \"Sampler\";\n\n\t/**\n\t * The stored and loaded buffers\n\t * @type {Tone.Buffers}\n\t * @private\n\t */\n\tprivate _buffers: ToneAudioBuffers;\n\n\t/**\n\t * The object of all currently playing BufferSources\n\t */\n\tprivate _activeSources: Map<MidiNote, ToneBufferSource[]> = new Map();\n\n\t/**\n\t * The envelope applied to the beginning of the sample.\n\t */\n\tattack: Time;\n\n\t/**\n\t * The envelope applied to the end of the envelope.\n\t */\n\trelease: Time;\n\n\t/**\n\t *  The shape of the attack/release curve.\n\t *  Either \"linear\" or \"exponential\"\n\t */\n\tcurve: ToneBufferSourceCurve;\n\n\tprotected _internalChannels = [this.output];\n\n\tconstructor(options?: Partial<SamplerOptions>);\n\tconstructor(samples?: SamplesMap, options?: Partial<Omit<SamplerOptions, \"urls\">>);\n\tconstructor(samples?: SamplesMap, onload?: () => void, baseUrl?: string);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\"));\n\t\tconst options = optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n\n\t\tconst urlMap = {};\n\t\tObject.keys(options.urls).forEach((note) => {\n\t\t\tthis.assert(isNote(note) || isFinite(note), `url key is neither a note or midi pitch: ${note}`);\n\t\t\tif (isNote(note)) {\n\t\t\t\t// convert the note name to MIDI\n\t\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\t\turlMap[mid] = options.urls[note];\n\t\t\t} else if (isFinite(note)) {\n\t\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\t\turlMap[parseInt(note, 10)] = options.urls[note];\n\t\t\t}\n\t\t});\n\n\t\tthis._buffers = new ToneAudioBuffers(urlMap, options.onload, options.baseUrl);\n\t\tthis.attack = options.attack;\n\t\tthis.release = options.release;\n\t\tthis.curve = options.curve;\n\t}\n\n\tstatic getDefaults(): SamplerOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tattack : 0,\n\t\t\tbaseUrl : \"\",\n\t\t\tcurve : \"exponential\" as \"exponential\",\n\t\t\tonload : noOp,\n\t\t\trelease : 0.1,\n\t\t\turls: {},\n\t\t});\n\t}\n\n\t/**\n\t * Returns the difference in steps between the given midi note at the closets sample.\n\t */\n\tprivate _findClosest(midi: MidiNote): Interval {\n\t\t// searches within 8 octaves of the given midi note\n\t\tconst MAX_INTERVAL = 96;\n\t\tlet interval = 0;\n\t\twhile (interval < MAX_INTERVAL) {\n\t\t\t// check above and below\n\t\t\tif (this._buffers.has(midi + interval)) {\n\t\t\t\treturn -interval;\n\t\t\t} else if (this._buffers.has(midi - interval)) {\n\t\t\t\treturn interval;\n\t\t\t}\n\t\t\tinterval++;\n\t\t}\n\t\tthrow new Error(`No available buffers for note: ${midi}`);\n\t}\n\n\t/**\n\t * @param  notes\tThe note to play, or an array of notes.\n\t * @param  time     When to play the note\n\t * @param  velocity The velocity to play the sample back.\n\t */\n\ttriggerAttack(notes: Frequency | Frequency[], time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", notes, time, velocity);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midi = new FrequencyClass(this.context, note).toMidi();\n\t\t\t// find the closest note pitch\n\t\t\tconst difference = this._findClosest(midi);\n\t\t\tconst closestNote = midi - difference;\n\t\t\tconst buffer = this._buffers.get(closestNote);\n\t\t\tconst playbackRate = intervalToFrequencyRatio(difference);\n\t\t\t// play that note\n\t\t\tconst source = new ToneBufferSource({\n\t\t\t\tbuffer,\n\t\t\t\tcontext: this.context,\n\t\t\t\tcurve : this.curve,\n\t\t\t\tfadeIn : this.attack,\n\t\t\t\tfadeOut : this.release,\n\t\t\t\tplaybackRate,\n\t\t\t}).connect(this.output);\n\t\t\tsource.start(time, 0, buffer.duration / playbackRate, velocity);\n\t\t\t// add it to the active sources\n\t\t\tif (!isArray(this._activeSources.get(midi))) {\n\t\t\t\tthis._activeSources.set(midi, []);\n\t\t\t}\n\t\t\t(this._activeSources.get(midi) as ToneBufferSource[]).push(source);\n\n\t\t\t// remove it when it's done\n\t\t\tsource.onended = () => {\n\t\t\t\tif (this._activeSources && this._activeSources.has(midi)) {\n\t\t\t\t\tconst sources = this._activeSources.get(midi) as ToneBufferSource[];\n\t\t\t\t\tconst index = sources.indexOf(source);\n\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\tsources.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param  notes\tThe note to release, or an array of notes.\n\t * @param  time     \tWhen to release the note.\n\t */\n\ttriggerRelease(notes: Frequency | Frequency[], time?: Time): this {\n\t\tthis.log(\"triggerRelease\", notes, time);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midi = new FrequencyClass(this.context, note).toMidi();\n\t\t\t// find the note\n\t\t\tif (this._activeSources.has(midi) && (this._activeSources.get(midi) as ToneBufferSource[]).length) {\n\t\t\t\tconst source = (this._activeSources.get(midi) as ToneBufferSource[]).shift() as ToneBufferSource;\n\t\t\t\ttime = this.toSeconds(time);\n\t\t\t\tsource.stop(time);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Release all currently active notes.\n\t * @param  time     \tWhen to release the notes.\n\t */\n\treleaseAll(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(sources => {\n\t\t\twhile (sources.length) {\n\t\t\t\tconst source = sources.shift() as ToneBufferSource;\n\t\t\t\tsource.stop(computedTime);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n\t * will be scheduled along the transport.\n\t * @example\n\t * synth.sync()\n\t * //schedule 3 notes when the transport first starts\n\t * synth.triggerAttackRelease('8n', 0)\n\t * synth.triggerAttackRelease('8n', '8n')\n\t * synth.triggerAttackRelease('8n', '4n')\n\t * //start the transport to hear the notes\n\t * Transport.start()\n\t * @returns {Tone.Instrument} this\n\t */\n\tsync(): this {\n\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\tthis._syncMethod(\"triggerRelease\", 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the attack phase, then after the duration, invoke the release.\n\t * @param  notes\tThe note to play and release, or an array of notes.\n\t * @param  duration The time the note should be held\n\t * @param  time     When to start the attack\n\t * @param  velocity The velocity of the attack\n\t */\n\ttriggerAttackRelease(\n\t\tnotes: Frequency[] | Frequency,\n\t\tduration: Time | Time[],\n\t\ttime?: Time,\n\t\tvelocity: NormalRange = 1,\n\t): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.triggerAttack(notes, computedTime, velocity);\n\t\tif (isArray(duration)) {\n\t\t\tthis.assert(isArray(notes), \"notes must be an array when duration is array\");\n\t\t\t(notes as Frequency[]).forEach((note, index) => {\n\t\t\t\tconst d = duration[Math.min(index, duration.length - 1)];\n\t\t\t\tthis.triggerRelease(note, computedTime + this.toSeconds(d));\n\t\t\t});\n\t\t} else {\n\t\t\tthis.triggerRelease(notes, computedTime + this.toSeconds(duration));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Add a note to the sampler.\n\t *  @param  {Note|Midi}   note      The buffer's pitch.\n\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer,\n\t *                                                 or a buffer which will be added\n\t *                                                 with the given name.\n\t *  @param  {Function=}  callback  The callback to invoke\n\t *                                 when the url is loaded.\n\t */\n\tadd(note: Note | MidiNote, url: string | ToneAudioBuffer | AudioBuffer, callback?: () => void): this {\n\t\tthis.assert(isNote(note) || isFinite(note), `note must be a pitch or midi: ${note}`);\n\t\tif (isNote(note)) {\n\t\t\t// convert the note name to MIDI\n\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\tthis._buffers.add(mid, url, callback);\n\t\t} else {\n\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\tthis._buffers.add(note, url, callback);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffers.loaded;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.dispose();\n\t\tthis._activeSources.forEach(sources => {\n\t\t\tsources.forEach(source => source.dispose());\n\t\t});\n\t\tthis._activeSources.clear();\n\t\treturn this;\n\t}\n}\n","import { FrequencyClass } from \"../core/type/Frequency\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { Signal } from \"../signal/Signal\";\n\nexport interface MonophonicOptions extends InstrumentOptions {\n\tportamento: Seconds;\n}\n\n/**\n * Abstract base class for other monophonic instruments to extend.\n */\nexport abstract class Monophonic<Options extends MonophonicOptions> extends Instrument<Options> {\n\n\t/**\n\t *  The glide time between notes.\n\t */\n\tportamento: Seconds;\n\n\t/**\n\t * The instrument's envelope\n\t */\n\tabstract envelope: any;\n\n\t/**\n\t * The instrument's frequency signal.\n\t */\n\tabstract readonly frequency: Signal<Frequency>;\n\n\t/**\n\t * The instrument's detune control signal.\n\t */\n\tabstract readonly detune: Signal<Cents>;\n\n\tconstructor(options?: Partial<MonophonicOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Monophonic.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Monophonic.getDefaults(), arguments);\n\n\t\tthis.portamento = options.portamento;\n\n\t}\n\n\tstatic getDefaults(): MonophonicOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tportamento: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  Trigger the attack of the note optionally with a given velocity.\n\t *\n\t *\n\t *  @param  note The note to trigger.\n\t *  @param  time When the note should start.\n\t *  @param  velocity The velocity scaler determines how \"loud\" the note\n\t *                   will be triggered.\n\t *  @example\n\t * synth.triggerAttack(\"C4\");\n\t *  @example\n\t * //trigger the note a half second from now at half velocity\n\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t */\n\ttriggerAttack(note: Frequency | FrequencyClass, time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", note, time, velocity);\n\t\ttime = this.toSeconds(time);\n\t\tthis._triggerEnvelopeAttack(time, velocity);\n\t\tthis.setNote(note, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Trigger the release portion of the envelope\n\t *  @param  {Time} [time=now] If no time is given, the release happens immediatly\n\t *  @returns {Monophonic} this\n\t *  @example\n\t * synth.triggerRelease();\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\ttime = this.toSeconds(time);\n\t\tthis._triggerEnvelopeRelease(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Internal method which starts the envelope attack\n\t */\n\tprotected abstract _triggerEnvelopeAttack(time: Seconds, velocity: NormalRange): void;\n\n\t/**\n\t *  Internal method which starts the envelope release\n\t */\n\tprotected abstract _triggerEnvelopeRelease(time: Seconds): void;\n\n\t/**\n\t *  Get the level of the output at the given time. Measures\n\t *  the envelope(s) value at the time.\n\t *  @param time The time to query the envelope value\n\t *  @return The output level between 0-1\n\t */\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\t/**\n\t *  Set the note at the given time. If no time is given, the note\n\t *  will set immediately.\n\t *  @param note The note to change to.\n\t *  @param  time The time when the note should be set.\n\t * @example\n\t * //change to F#6 in one quarter note from now.\n\t * synth.setNote(\"F#6\", \"+4n\");\n\t * @example\n\t * //change to Bb4 right now\n\t * synth.setNote(\"Bb4\");\n\t */\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tconst computedFrequency = note instanceof FrequencyClass ? note.toFrequency() : note;\n\t\tif (this.portamento > 0 && this.getLevelAtTime(time) > 0.05) {\n\t\t\tconst portTime = this.toSeconds(this.portamento);\n\t\t\tthis.frequency.exponentialRampTo(computedFrequency, portTime, time);\n\t\t} else {\n\t\t\tthis.frequency.setValueAtTime(computedFrequency, time);\n\t\t}\n\t\treturn this;\n\t}\n}\n","import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { OmniOscillatorConstructorOptions } from \"../source/oscillator/OscillatorInterface\";\nimport { Source } from \"../source/Source\";\nimport { Monophonic, MonophonicOptions } from \"./Monophonic\";\n\nexport interface SynthOptions extends MonophonicOptions {\n\toscillator: OmniOscillatorConstructorOptions;\n\tenvelope: EnvelopeOptions;\n}\n\n/**\n *  Synth is composed simply of a Tone.OmniOscillator routed through a Tone.AmplitudeEnvelope.\n * ```\n * +----------------+     +-------------------+\n * | OmniOscillator +>----> AmplitudeEnvelope +>-->Output\n * +----------------+     +-------------------+\n * ```\n *  @constructor\n *  @param options the options available for the synth.\n *  @example\n * var synth = new Synth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n */\nexport class Synth extends Monophonic<SynthOptions> {\n\n\tname = \"Synth\";\n\n\t/**\n\t *  The oscillator.\n\t */\n\treadonly oscillator = new OmniOscillator({ context: this.context });\n\n\t/**\n\t * The frequency signal\n\t */\n\treadonly frequency = this.oscillator.frequency;\n\n\t/**\n\t * The detune signal\n\t */\n\treadonly detune = this.oscillator.detune;\n\n\t/**\n\t * The envelope\n\t */\n\treadonly envelope: AmplitudeEnvelope = new AmplitudeEnvelope({ context: this.context });\n\n\tprotected _internalChannels = [this.oscillator, this.envelope, this.output];\n\n\tconstructor(options?: RecursivePartial<SynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Synth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Synth.getDefaults(), arguments);\n\n\t\tthis.oscillator.set(options.oscillator);\n\t\tthis.envelope.set(options.envelope);\n\n\t\t// connect the oscillators to the output\n\t\tthis.oscillator.chain(this.envelope, this.output);\n\t\treadOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): SynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(Source.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack : 0.005,\n\t\t\t\t\tdecay : 0.1,\n\t\t\t\t\trelease : 1,\n\t\t\t\t\tsustain : 0.3,\n\t\t\t\t},\n\t\t\t),\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), Object.keys(Source.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\ttype: \"triangle\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t}\n\n\t/**\n\t *  start the attack portion of the envelope\n\t *  @param time the time the attack should start\n\t *  @param velocity the velocity of the note (0-1)\n\t */\n\tprotected _triggerEnvelopeAttack(time?: Time, velocity: number = 1): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// the envelopes\n\t\tthis.envelope.triggerAttack(computedTime, velocity);\n\t\tthis.oscillator.start(computedTime);\n\t\t// if there is no release portion, stop the oscillator\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tconst computedAttack = this.toSeconds(this.envelope.attack);\n\t\t\tconst computedDecay = this.toSeconds(this.envelope.decay);\n\t\t\tthis.oscillator.stop(computedTime + computedAttack + computedDecay);\n\t\t}\n\t}\n\n\t/**\n\t *  start the release portion of the envelope\n\t *  @param time the time the release should start\n\t */\n\tprotected _triggerEnvelopeRelease(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.oscillator.stop(time + this.toSeconds(this.envelope.release));\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.oscillator.dispose();\n\t\tthis.envelope.dispose();\n\t\treturn this;\n\t}\n}\n","export { Synth } from \"./Synth\";\nexport { Sampler } from \"./Sampler\";\n","import { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source, SourceOptions } from \"../Source\";\nimport { ToneBufferSource } from \"./BufferSource\";\n\ninterface PlayerOptions extends SourceOptions {\n\tonload: () => void;\n\tplaybackRate: Positive;\n\tloop: boolean;\n\tautostart: boolean;\n\tloopStart: Time;\n\tloopEnd: Time;\n\treverse: boolean;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\turl?: ToneAudioBuffer | string | AudioBuffer;\n}\n\n/**\n * Player is an audio file player with start, loop, and stop functions.\n *\n * @param url Either the AudioBuffer or the url from which to load the AudioBuffer\n * @param onload The function to invoke when the buffer is loaded.\n *                            Recommended to use Tone.Buffer.on('load') instead.\n * @example\n * var player = new Player(\"./path/to/sample.mp3\").toDestination();\n * //play as soon as the buffer is loaded\n * player.autostart = true;\n */\nexport class Player extends Source<PlayerOptions> {\n\n\tname = \"Player\";\n\n\t/**\n\t * If the file should play as soon\n\t * as the buffer is loaded.\n\t * @example\n\t * //will play as soon as it's loaded\n\t * var player = new Player({\n\t * \t\"url\" : \"./path/to/sample.mp3\",\n\t * \t\"autostart\" : true,\n\t * }).toDestination();\n\t */\n\tautostart: boolean;\n\n\t/**\n\t *  The buffer\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t *  if the buffer should loop once it's over\n\t */\n\tprivate _loop: boolean;\n\n\t/**\n\t *  if 'loop' is true, the loop will start at this position\n\t */\n\tprivate _loopStart: Time;\n\n\t/**\n\t *  if 'loop' is true, the loop will end at this position\n\t */\n\tprivate _loopEnd: Time;\n\n\t/**\n\t *  the playback rate\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t *  All of the active buffer source nodes\n\t */\n\tprivate _activeSources: Set<ToneBufferSource> = new Set();\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tfadeIn: Time;\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tfadeOut: Time;\n\n\tconstructor(options?: Partial<PlayerOptions>);\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer({\n\t\t\tonload: this._onload.bind(this, options.onload),\n\t\t\treverse: options.reverse,\n\t\t\turl: options.url,\n\t\t});\n\t\tthis.autostart = options.autostart;\n\t\tthis._loop = options.loop;\n\t\tthis._loopStart = options.loopStart;\n\t\tthis._loopEnd = options.loopEnd;\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.fadeIn = options.fadeIn;\n\t\tthis.fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): PlayerOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tautostart : false,\n\t\t\tfadeIn : 0,\n\t\t\tfadeOut : 0,\n\t\t\tloop : false,\n\t\t\tloopEnd : 0,\n\t\t\tloopStart : 0,\n\t\t\tonload : noOp,\n\t\t\tplaybackRate : 1,\n\t\t\treverse : false,\n\t\t});\n\t}\n\n\t/**\n\t * Load the audio file as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * Note: this does not need to be called if a url\n\t * was passed in to the constructor. Only use this\n\t * if you want to manually load a new url.\n\t * @param url The url of the buffer to load. Filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tawait this._buffer.load(url);\n\t\tthis._onload();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal callback when the buffer is loaded.\n\t */\n\tprivate _onload(callback: () => void = noOp): void {\n\t\tcallback();\n\t\tif (this.autostart) {\n\t\t\tthis.start();\n\t\t}\n\t}\n\n\t/**\n\t * Internal callback when the buffer is done playing.\n\t */\n\tprivate _onSourceEnd(source: ToneBufferSource): void {\n\t\tthis._activeSources.delete(source);\n\t\tif (this._activeSources.size === 0 && !this._synced) {\n\t\t\tthis._state.setStateAtTime(\"stopped\", this.now());\n\t\t}\n\t}\n\n\t/**\n\t *  Play the buffer at the given startTime. Optionally add an offset\n\t *  and/or duration which will play the buffer from a position\n\t *  within the buffer for the given duration.\n\t *\n\t *  @param  time When the player should start.\n\t *  @param  offset The offset from the beginning of the sample\n\t *                                 to start at.\n\t *  @param  duration How long the sample should play. If no duration is given, it will default to the full length\n\t *                   of the sample (minus any offset)\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tsuper.start(time, offset, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Internal start method\n\t */\n\tprotected _start(startTime?: Time, offset?: Time, duration?: Time): void {\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this._loop) {\n\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\n\t\t// compute the values in seconds\n\t\toffset = this.toSeconds(offset);\n\n\t\t// if it's synced, it should factor in the playback rate for computing the offset\n\t\tif (this._synced) {\n\t\t\toffset *= this._playbackRate;\n\t\t}\n\n\t\t// compute the duration which is either the passed in duration of the buffer.duration - offset\n\t\tlet computedDuration = defaultArg(duration, Math.max(this._buffer.duration - offset, 0));\n\t\tcomputedDuration = this.toSeconds(computedDuration);\n\n\t\t// scale it by the playback rate\n\t\tcomputedDuration = computedDuration / this._playbackRate;\n\n\t\t// get the start time\n\t\tstartTime = this.toSeconds(startTime);\n\n\t\t// make the source\n\t\tconst source = new ToneBufferSource({\n\t\t\tbuffer : this._buffer,\n\t\t\tcontext: this.context,\n\t\t\tfadeIn : this.fadeIn,\n\t\t\tfadeOut : this.fadeOut,\n\t\t\tloop : this._loop,\n\t\t\tloopEnd : this._loopEnd,\n\t\t\tloopStart : this._loopStart,\n\t\t\tonended : this._onSourceEnd.bind(this),\n\t\t\tplaybackRate : this._playbackRate,\n\t\t}).connect(this.output);\n\n\t\t// set the looping properties\n\t\tif (!this._loop && !this._synced) {\n\t\t\t// if it's not looping, set the state change at the end of the sample\n\t\t\tthis._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n\t\t\t\timplicitEnd: true,\n\t\t\t});\n\t\t}\n\n\t\t// add it to the array of active sources\n\t\tthis._activeSources.add(source);\n\n\t\t// start it\n\t\tif (this._loop && isUndef(duration)) {\n\t\t\tsource.start(startTime, offset);\n\t\t} else {\n\t\t\t// subtract the fade out time\n\t\t\tsource.start(startTime, offset, computedDuration - this.toSeconds(this.fadeOut));\n\t\t}\n\t}\n\n\t/**\n\t *  Stop playback.\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(source => source.stop(computedTime));\n\t}\n\n\t/**\n\t * Stop and then restart the player from the beginning (or offset)\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given,\n\t * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n\t */\n\trestart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tthis._stop(time);\n\t\tthis._start(time, offset, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Seek to a specific time in the player's buffer. If the\n\t *  source is no longer playing at that time, it will stop.\n\t *  If you seek to a time that\n\t *  @param {Time} offset The time to seek to.\n\t *  @param {Time=} time The time for the seek event to occur.\n\t *  @return {Player} this\n\t *  @example\n\t * source.start(0.2);\n\t * source.stop(0.4);\n\t */\n\tseek(offset: Time, when?: Time): this {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tconst comptuedOffset = this.toSeconds(offset);\n\t\t\t// if it's currently playing, stop it\n\t\t\tthis._stop(computedTime);\n\t\t\t// restart it at the given time\n\t\t\tthis._start(computedTime, comptuedOffset);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the loop start and end. Will only loop if loop is set to true.\n\t * @param loopStart The loop end time\n\t * @param loopEnd The loop end time\n\t * @example\n\t * //loop 0.1 seconds of the file.\n\t * player.setLoopPoints(0.2, 0.3);\n\t * player.loop = true;\n\t */\n\tsetLoopPoints(loopStart: Time, loopEnd: Time): this {\n\t\tthis.loopStart = loopStart;\n\t\tthis.loopEnd = loopEnd;\n\t\treturn this;\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = loopStart;\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopStart = loopStart;\n\t\t});\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = loopEnd;\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopEnd = loopEnd;\n\t\t});\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\t// if no change, do nothing\n\t\tif (this._loop === loop) {\n\t\t\treturn;\n\t\t}\n\t\tthis._loop = loop;\n\t\t// set the loop of all of the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loop = loop;\n\t\t});\n\t\tif (loop) {\n\t\t\t// remove the next stopEvent\n\t\t\tconst stopEvent = this._state.getNextState(\"stopped\", this.now());\n\t\t\tif (stopEvent) {\n\t\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The playback speed. 1 is normal speed. This is not a signal because\n\t * Safari and iOS currently don't support playbackRate as a signal.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tconst now = this.now();\n\n\t\t// cancel the stop event since it's at a different time now\n\t\tconst stopEvent = this._state.getNextState(\"stopped\", now);\n\t\tif (stopEvent && stopEvent.implicitEnd) {\n\t\t\tthis._state.cancel(stopEvent.time);\n\t\t}\n\n\t\t// set all the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.playbackRate.setValueAtTime(rate, now);\n\t\t});\n\t}\n\n\t/**\n\t * The direction the buffer should play in\n\t */\n\tget reverse(): boolean {\n\t\treturn this._buffer.reverse;\n\t}\n\tset reverse(rev) {\n\t\tthis._buffer.reverse = rev;\n\t}\n\n\t/**\n\t * If the buffer is loaded\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffer.loaded;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\t// disconnect all of the players\n\t\tthis._activeSources.forEach(source => source.dispose());\n\t\tthis._activeSources.clear();\n\t\tthis._buffer.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].\n * See {@link GainToAudio}.\n *\n * @example\n * var a2g = new AudioToGain();\n */\nexport class AudioToGain extends SignalOperator<ToneAudioNodeOptions> {\n\n\tname = \"AudioToGain\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => (x + 1) / 2,\n\t});\n\tprotected _internalChannels = [this._norm];\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The GainRange output [0, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Source, SourceOptions } from \"../source/Source\";\nimport { ToneBufferSource } from \"./buffer/BufferSource\";\n\ntype NoiseType = \"white\" | \"brown\" | \"pink\";\n\ninterface NoiseOptions extends SourceOptions {\n\ttype: NoiseType;\n\tplaybackRate: Positive;\n}\n\n/**\n * Noise is a noise generator. It uses looped noise buffers to save on performance.\n * Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n *\n * @param type the noise type (white|pink|brown)\n * @example\n * //initialize the noise and start\n * var noise = new Noise(\"pink\").start();\n *\n * //make an autofilter to shape the noise\n * var autoFilter = new Tone.AutoFilter({\n * \t\"frequency\" : \"8m\",\n * \t\"min\" : 800,\n * \t\"max\" : 15000\n * }).connect(Tone.Master);\n *\n * //connect the noise\n * noise.connect(autoFilter);\n * //start the autofilter LFO\n * autoFilter.start()\n */\nexport class Noise extends Source<NoiseOptions> {\n\n\tname = \"Noise\";\n\n\t/**\n\t * Private reference to the source\n\t */\n\tprivate _source: ToneBufferSource | null = null;\n\n\t/**\n\t * private reference to the type\n\t */\n\tprivate _type!: NoiseType;\n\n\t/**\n\t *  The playback rate of the noise. Affects\n\t *  the \"frequency\" of the noise.\n\t */\n\tprivate _playbackRate: Positive;\n\n\tconstructor(options?: NoiseType | Partial<NoiseOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]));\n\t\tconst options = optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]);\n\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.type = options.type;\n\t}\n\n\tstatic getDefaults(): NoiseOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tplaybackRate: 1,\n\t\t\ttype: \"white\" as NoiseType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n\t * @example\n\t * noise.type = \"white\";\n\t */\n\tget type(): NoiseType {\n\t\treturn this._type;\n\t}\n\tset type(type: NoiseType) {\n\t\tthis.assert(type in _noiseBuffers, \"Noise: invalid type: \" + type);\n\t\tif (this._type !== type) {\n\t\t\tthis._type = type;\n\t\t\t// if it's playing, stop and restart it\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tconst now = this.now();\n\t\t\t\tthis._stop(now);\n\t\t\t\tthis._start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  The playback rate of the noise. Affects\n\t *  the \"frequency\" of the noise.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate: Positive) {\n\t\tthis._playbackRate = rate;\n\t\tif (this._source) {\n\t\t\tthis._source.playbackRate.value = rate;\n\t\t}\n\t}\n\n\t/**\n\t *  internal start method\n\t */\n\tprotected _start(time?: Time): void {\n\t\tconst buffer = _noiseBuffers[this._type];\n\t\tthis._source = new ToneBufferSource(buffer).connect(this.output);\n\t\tthis._source.loop = true;\n\t\tthis._source.playbackRate.value = this._playbackRate;\n\t\tthis._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t}\n\n\t/**\n\t *  internal stop method\n\t *\n\t *  @param {Time} time\n\t *  @private\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tif (this._source) {\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._source = null;\n\t\t}\n\t}\n\n\t/**\n\t * Restarts the noise.\n\t * @param  time When to restart the noise.\n\t */\n\trestart(time?: Time): this {\n\t\t// TODO could be optimized by cancelling the buffer source 'stop'\n\t\t// stop and restart\n\t\tthis._stop(time);\n\t\tthis._start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._source) {\n\t\t\tthis._source.disconnect();\n\t\t}\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// THE NOISE BUFFERS\n///////////////////////////////////////////////////////////////////////////\n\n// Noise buffer stats\nconst BUFFER_LENGTH = 44100 * 5;\nconst NUM_CHANNELS = 2;\n\n/**\n * The cached noise buffers\n */\ninterface NoiseCache {\n\t[key: string]: ToneAudioBuffer | null;\n}\n\n/**\n * Cache the noise buffers\n */\nconst _noiseCache: NoiseCache = {\n\tbrown: null,\n\tpink: null,\n\twhite: null,\n};\n\n/**\n * The noise arrays. Generated on initialization.\n * borrowed heavily from https://github.com/zacharydenton/noise.js\n * (c) 2013 Zach Denton (MIT)\n */\nconst _noiseBuffers = {\n\tget brown(): ToneAudioBuffer {\n\t\tif (!_noiseCache.brown) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet lastOut = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tchannel[i] = (lastOut + (0.02 * white)) / 1.02;\n\t\t\t\t\tlastOut = channel[i];\n\t\t\t\t\tchannel[i] *= 3.5; // (roughly) compensate for gain\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.brown = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.brown;\n\t},\n\n\tget pink(): ToneAudioBuffer {\n\t\tif (!_noiseCache.pink) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\t// tslint:disable-next-line: one-variable-per-declaration\n\t\t\t\tlet b0, b1, b2, b3, b4, b5, b6;\n\t\t\t\tb0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tb0 = 0.99886 * b0 + white * 0.0555179;\n\t\t\t\t\tb1 = 0.99332 * b1 + white * 0.0750759;\n\t\t\t\t\tb2 = 0.96900 * b2 + white * 0.1538520;\n\t\t\t\t\tb3 = 0.86650 * b3 + white * 0.3104856;\n\t\t\t\t\tb4 = 0.55000 * b4 + white * 0.5329522;\n\t\t\t\t\tb5 = -0.7616 * b5 - white * 0.0168980;\n\t\t\t\t\tchannel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t\t\t\t\tchannel[i] *= 0.11; // (roughly) compensate for gain\n\t\t\t\t\tb6 = white * 0.115926;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.pink = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.pink;\n\t},\n\n\tget white(): ToneAudioBuffer {\n\t\tif (!_noiseCache.white) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tchannel[i] = Math.random() * 2 - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.white = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.white;\n\t},\n};\n","export { Noise } from \"./Noise\";\nexport { Oscillator } from \"./oscillator/Oscillator\";\nexport { AMOscillator } from \"./oscillator/AMOscillator\";\nexport { FMOscillator } from \"./oscillator/FMOscillator\";\nexport { PulseOscillator } from \"./oscillator/PulseOscillator\";\nexport { FatOscillator } from \"./oscillator/FatOscillator\";\nexport { PWMOscillator } from \"./oscillator/PWMOscillator\";\nexport { OmniOscillator } from \"./oscillator/OmniOscillator\";\nexport { ToneOscillatorNode } from \"./oscillator/OscillatorNode\";\nexport { ToneBufferSource } from \"./buffer/BufferSource\";\nexport { Player } from \"./buffer/Player\";\n","import { Context } from \"../context/Context\";\nimport { Ticks, TicksClass } from \"../type/Ticks\";\nimport { TransportEvent, TransportEventOptions } from \"./TransportEvent\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\ninterface TransportRepeatEventOptions extends TransportEventOptions {\n\tinterval: Ticks;\n\tduration: Ticks;\n}\n\n/**\n * TransportRepeatEvent is an internal class used by Tone.Transport\n * to schedule repeat events. This class should not be instantiated directly.\n */\nexport class TransportRepeatEvent extends TransportEvent {\n\n\t/**\n\t * When the event should stop repeating\n\t */\n\tprivate duration: Ticks;\n\n\t/**\n\t * The interval of the repeated event\n\t */\n\tprivate _interval: Ticks;\n\n\t/**\n\t * The ID of the current timeline event\n\t */\n\tprivate _currentId: number = -1;\n\n\t/**\n\t * The ID of the next timeline event\n\t */\n\tprivate _nextId: number = -1;\n\n\t/**\n\t * The time of the next event\n\t */\n\tprivate _nextTick = this.time;\n\n\t/**\n\t * a reference to the bound start method\n\t */\n\tprivate _boundRestart = this._restart.bind(this);\n\n\t/**\n\t * The audio context belonging to this event\n\t */\n\tprotected context: Context;\n\n\tconstructor(transport: Transport, opts: Partial<TransportRepeatEventOptions>) {\n\n\t\tsuper(transport, opts);\n\n\t\tconst options = Object.assign(TransportRepeatEvent.getDefaults(), opts);\n\n\t\tthis.duration = Ticks(options.duration).valueOf();\n\t\tthis._interval = Ticks(options.interval).valueOf();\n\t\tthis._nextTick = options.time;\n\t\tthis.transport.on(\"start\", this._boundRestart);\n\t\tthis.transport.on(\"loopStart\", this._boundRestart);\n\t\tthis.context = this.transport.context;\n\t\tthis._restart();\n\t}\n\n\tstatic getDefaults(): TransportRepeatEventOptions {\n\t\treturn Object.assign({}, TransportEvent.getDefaults(), {\n\t\t\tduration: Infinity,\n\t\t\tinterval: 1,\n\t\t\tonce: false,\n\t\t});\n\t}\n\n\t/**\n\t * Invoke the callback. Returns the tick time which\n\t * the next event should be scheduled at.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\t// create more events if necessary\n\t\tthis._createEvents(time);\n\t\t// call the super class\n\t\tsuper.invoke(time);\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _createEvents(time: Seconds): void {\n\t\t// schedule the next event\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n\t\t\tthis._nextTick += this._interval;\n\t\t\tthis._currentId = this._nextId;\n\t\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\t}\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _restart(time?: Time): void {\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis._nextTick = this.time;\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks > this.time) {\n\t\t\tthis._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n\t\t}\n\t\tthis._currentId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\tthis._nextTick += this._interval;\n\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis.transport.off(\"start\", this._boundRestart);\n\t\tthis.transport.off(\"loopStart\", this._boundRestart);\n\t\treturn this;\n\t}\n}\n","import { Volume } from \"../../component/channel/Volume\";\nimport { connectSeries } from \"../Connect\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { Param } from \"./Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface DestinationOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  A single master output which is connected to the\n *  AudioDestinationNode (aka your speakers).\n *  It provides useful conveniences such as the ability\n *  to set the volume and mute the entire application.\n *  It also gives you the ability to apply master effects to your application.\n *\n *  @example\n * //the audio will go from the oscillator to the speakers\n * oscillator.connect(Destination);\n * //a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * //the above two examples are equivalent.\n */\nexport class Destination extends ToneAudioNode<DestinationOptions> {\n\n\tname = \"Destination\";\n\n\tinput: Volume = new Volume({ context: this.context });\n\toutput: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The volume of the master output.\n\t */\n\tvolume: Param<Decibels> = this.input.volume;\n\t_internalChannels = [this.input, this.output];\n\n\tconstructor(options: Partial<DestinationOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Destination.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Destination.getDefaults(), arguments);\n\n\t\tconnectSeries(this.input, this.output, this.context.rawContext.destination);\n\n\t\tthis.volume.value = options.volume;\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): DestinationOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * Destination.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.input.mute;\n\t}\n\n\tset mute(mute: boolean) {\n\t\tthis.input.mute = mute;\n\t}\n\n\t/**\n\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t *  chained in the master effects chain.\n\t *  @param nodes All arguments will be connected in a row and the Master will be routed through it.\n\t *  @return  {Destination}  this\n\t *  @example\n\t * //some overall compression to keep the levels in check\n\t * var masterCompressor = new Tone.Compressor({\n\t * \t\"threshold\" : -6,\n\t * \t\"ratio\" : 3,\n\t * \t\"attack\" : 0.5,\n\t * \t\"release\" : 0.1\n\t * });\n\t * //give a little boost to the lows\n\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t * //route everything through the filter\n\t * //and compressor before going to the speakers\n\t * Destination.chain(lowBump, masterCompressor);\n\t */\n\tchain(...args: Array<AudioNode | ToneAudioNode>): this {\n\t\tthis.input.disconnect();\n\t\targs.unshift(this.input);\n\t\targs.push(this.output);\n\t\tconnectSeries(...args);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tINITIALIZATION\n///////////////////////////////////////////////////////////////////////////\n\nonContextInit(context => {\n\tcontext.destination = new Destination({ context });\n});\n\nonContextClose(context => {\n\tcontext.destination.dispose();\n});\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\n\ninterface DrawEvent extends TimelineEvent {\n\tcallback: () => void;\n}\n\n/**\n * Draw is useful for synchronizing visuals and audio events.\n * Callbacks from Tone.Transport or any of the Tone.Event classes\n * always happen _before_ the scheduled time and are not synchronized\n * to the animation frame so they are not good for triggering tightly\n * synchronized visuals and sound. Draw makes it easy to schedule\n * callbacks using the AudioContext time and uses requestAnimationFrame.\n * @example\n * Tone.Transport.schedule(function(time){\n * \t//use the time argument to schedule a callback with Draw\n * \tDraw.schedule(function(){\n * \t\t//do drawing or DOM manipulation here\n * \t}, time)\n * }, \"+0.5\")\n */\nexport class Draw extends ToneWithContext<ToneWithContextOptions> {\n\n\tname = \"Draw\";\n\n\t/**\n\t *  The duration after which events are not invoked.\n\t */\n\texpiration: Seconds = 0.25;\n\n\t/**\n\t *  The amount of time before the scheduled time\n\t *  that the callback can be invoked. Default is\n\t *  half the time of an animation frame (0.008 seconds).\n\t */\n\tanticipation: Seconds = 0.008;\n\n\t/**\n\t *  All of the events.\n\t */\n\tprivate _events: Timeline<DrawEvent> = new Timeline();\n\n\t/**\n\t *  The draw loop\n\t */\n\tprivate _boundDrawLoop = this._drawLoop.bind(this);\n\n\t/**\n\t * The animation frame id\n\t */\n\tprivate _animationFrame: number = -1;\n\n\t/**\n\t *  Schedule a function at the given time to be invoked\n\t *  on the nearest animation frame.\n\t *  @param  callback  Callback is invoked at the given time.\n\t *  @param  time      The time relative to the AudioContext time to invoke the callback.\n\t */\n\tschedule(callback: () => void, time: Time): this {\n\t\tthis._events.add({\n\t\t\tcallback,\n\t\t\ttime : this.toSeconds(time),\n\t\t});\n\t\t// start the draw loop on the first event\n\t\tif (this._events.length === 1) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel events scheduled after the given time\n\t *  @param  after  Time after which scheduled events will be removed from the scheduling timeline.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._events.cancel(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The draw loop\n\t */\n\tprivate _drawLoop(): void {\n\t\tconst now = this.context.currentTime;\n\t\twhile (this._events.length && (this._events.peek() as DrawEvent).time - this.anticipation <= now) {\n\t\t\tconst event = this._events.shift();\n\t\t\tif (event && now - event.time <= this.expiration) {\n\t\t\t\tevent.callback();\n\t\t\t}\n\t\t}\n\t\tif (this._events.length > 0) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\tcancelAnimationFrame(this._animationFrame);\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../Connect\";\nimport { AutomationEvent, Param, ParamOptions } from \"../context/Param\";\nimport { getContext } from \"../Global\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isUndef } from \"../util/TypeCheck\";\n\ninterface TickAutomationEvent extends AutomationEvent {\n\tticks: number;\n}\n\ninterface TickSignalOptions extends ParamOptions {\n\tvalue: Hertz | BPM;\n\tmultiplier: number;\n}\n\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n *\n * @param value The initial value of the signal\n */\nexport class TickSignal<Type extends Hertz | BPM> extends Param<Type> {\n\n\tname = \"TickSignal\";\n\n\tprotected _events: Timeline<TickAutomationEvent> = new Timeline(Infinity);\n\n\tprivate _sig: ConstantSourceNode = this.context.createConstantSource();\n\n\tprotected _param = this._sig.offset;\n\n\tprivate _multiplier: number = 1;\n\n\tconstructor(options: Partial<TickSignalOptions>);\n\tconstructor(value?: number);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis._sig = this.context.createConstantSource();\n\t\tthis._sig.start(0);\n\t\tthis._param = this._sig.offset;\n\n\t\t// set the multiplier\n\t\tthis.multiplier = options.multiplier;\n\n\t\t// clear the ticks from the beginning\n\t\tthis.cancelScheduledValues(0);\n\t\t// set an initial event\n\t\tthis._events.add({\n\t\t\tticks: 0,\n\t\t\ttime : 0,\n\t\t\ttype : \"setValue\",\n\t\t\tvalue: this._fromType(options.value as Type),\n\t\t});\n\t\tthis.setValueAtTime(options.value as Type, 0);\n\t}\n\n\tstatic getDefaults(): TickSignalOptions {\n\t\treturn Object.assign(Param.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tparam: getContext().createConstantSource().offset,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tsetTargetAtTime(value: Type, time: Time, constant: number): this {\n\t\t// approximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tthis.setRampPoint(time);\n\t\tconst computedValue = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\tconst segments = Math.round(Math.max(1 / constant, 1));\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = constant * i + time;\n\t\t\tconst rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.setValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.linearRampToValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: Type, time: Time): this {\n\t\t// aproximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tconst computedVal = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\t// approx 10 segments per second\n\t\tconst segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n\t\tconst segmentDur = ((time - prevEvent.time) / segments);\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = segmentDur * i + prevEvent.time;\n\t\t\tconst rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tprivate _getTicksUntilEvent(event: TickAutomationEvent | null, time: number): Ticks {\n\t\tif (event === null) {\n\t\t\tevent = {\n\t\t\t\tticks : 0,\n\t\t\t\ttime : 0,\n\t\t\t\ttype: \"setValue\",\n\t\t\t\tvalue: 0,\n\t\t\t};\n\t\t} else if (isUndef(event.ticks)) {\n\t\t\tconst previousEvent = this._events.previousEvent(event);\n\t\t\tevent.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n\t\t}\n\t\tconst val0 = this._fromType(this.getValueAtTime(event.time));\n\t\tlet val1 = this._fromType(this.getValueAtTime(time));\n\t\t// if it's right on the line, take the previous value\n\t\tconst onTheLineEvent = this._events.get(time);\n\t\tif (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === \"setValue\") {\n\t\t\tval1 = this._fromType(this.getValueAtTime(time - this.sampleTime));\n\t\t}\n\t\treturn 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst event = this._events.get(computedTime);\n\t\treturn Math.max(this._getTicksUntilEvent(event, computedTime), 0);\n\t}\n\n\t/**\n\t * Return the elapsed time of the number of ticks from the given time\n\t * @param ticks The number of ticks to calculate\n\t * @param  time The time to get the next tick from\n\t * @return The duration of the number of ticks from the given time in seconds\n\t */\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst currentTick = this.getTicksAtTime(time);\n\t\treturn this.getTimeOfTick(currentTick + ticks) - computedTime;\n\t}\n\n\t/**\n\t * Given a tick, returns the time that tick occurs at.\n\t * @return The time that the tick occurs.\n\t */\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\tconst before = this._events.get(tick, \"ticks\");\n\t\tconst after = this._events.getAfter(tick, \"ticks\");\n\t\tif (before && before.ticks === tick) {\n\t\t\treturn before.time;\n\t\t} else if (before && after &&\n\t\t\tafter.type === \"linear\" &&\n\t\t\tbefore.value !== after.value) {\n\t\t\tconst val0 = this._fromType(this.getValueAtTime(before.time));\n\t\t\tconst val1 = this._fromType(this.getValueAtTime(after.time));\n\t\t\tconst delta = (val1 - val0) / (after.time - before.time);\n\t\t\tconst k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n\t\t\tconst sol1 = (-val0 + k) / delta;\n\t\t\tconst sol2 = (-val0 - k) / delta;\n\t\t\treturn (sol1 > 0 ? sol1 : sol2) + before.time;\n\t\t} else if (before) {\n\t\t\tif (before.value === 0) {\n\t\t\t\treturn Infinity;\n\t\t\t} else {\n\t\t\t\treturn before.time + (tick - before.ticks) / before.value;\n\t\t\t}\n\t\t} else {\n\t\t\treturn tick / this._initialValue;\n\t\t}\n\t}\n\n\t/**\n\t * Convert some number of ticks their the duration in seconds accounting\n\t * for any automation curves starting at the given time.\n\t * @param  ticks The number of ticks to convert to seconds.\n\t * @param  when  When along the automation timeline to convert the ticks.\n\t * @return The duration in seconds of the ticks.\n\t */\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this.getDurationOfTicks(ticks, when);\n\t}\n\n\t/**\n\t * The inverse of [ticksToTime](#tickstotime). Convert a duration in\n\t * seconds to the corresponding number of ticks accounting for any\n\t * automation curves starting at the given time.\n\t * @param  duration The time interval to convert to ticks.\n\t * @param  when When along the automation timeline to convert the ticks.\n\t * @return The duration in ticks.\n\t */\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tconst startTicks = this.getTicksAtTime(computedTime);\n\t\tconst endTicks = this.getTicksAtTime(computedTime + computedDuration);\n\t\treturn endTicks - startTicks;\n\t}\n\n\t/**\n\t * Convert from the type when the unit value is BPM\n\t */\n\tprotected _fromType(val: Type): number {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn 1 / (60 / val / this.multiplier);\n\t\t} else {\n\t\t\treturn super._fromType(val);\n\t\t}\n\t}\n\n\t/**\n\t * Special case of type conversion where the units === \"bpm\"\n\t */\n\tprotected _toType(val: number): Type {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn (val / this.multiplier) * 60 as Type;\n\t\t} else {\n\t\t\treturn super._toType(val);\n\t\t}\n\t}\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\t// get and reset the current value with the new multipler\n\t\t// might be necessary to clear all the previous values\n\t\tconst currentVal = this.value;\n\t\tthis._multiplier = m;\n\t\tthis.value = currentVal;\n\t}\n\n\t/**\n\t * Connect the output signal\n\t */\n\tconnect(dstNode, outputNumber = 0, inputNumber = 0): this {\n\t\tconnect(this._sig, dstNode, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline, StateTimelineEvent } from \"../util/StateTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { TickSignal } from \"./TickSignal\";\n\ninterface TickSourceOptions extends ToneWithContextOptions {\n\tfrequency: Frequency;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ninterface TickSourceOffsetEvent {\n\tticks: number;\n\ttime: number;\n\tseconds: number;\n}\n\n/**\n *  Uses [TickSignal](TickSignal) to track elapsed ticks with complex automation curves.\n *\n *  @param frequency The initial frequency that the signal ticks at\n */\nexport class TickSource<Type extends BPM | Hertz> extends ToneWithContext<TickSourceOptions> {\n\n\tname = \"TickSource\";\n\n\t/**\n\t *  The frequency the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<Type>;\n\n\t/**\n\t *  The state timeline\n\t */\n\tprivate _state: StateTimeline = new StateTimeline();\n\n\t/**\n\t * The offset values of the ticks\n\t */\n\tprivate _tickOffset: Timeline<TickSourceOffsetEvent> = new Timeline();\n\n\tconstructor(frequency?: Frequency);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<TickSourceOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis.frequency = new TickSignal({\n\t\t\tcontext: this.context,\n\t\t\tunits: options.units,\n\t\t\tvalue: this.toFrequency(options.frequency),\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\t// set the inital state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\t\t// add the first event\n\t\tthis.setTicksAtTime(0, 0);\n\t}\n\n\tstatic getDefaults(): TickSourceOptions {\n\t\treturn Object.assign({\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\" as \"hertz\",\n\t\t}, ToneWithContext.getDefaults());\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  time    The time the clock should start\n\t *  @param offset The number of ticks to start the source at\n\t */\n\tstart(time: Time, offset?: Ticks): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (isDefined(offset)) {\n\t\t\t\tthis.setTicksAtTime(offset, computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the clock. Stopping the clock resets the tick counter to 0.\n\t * @param time The time when the clock should stop.\n\t */\n\tstop(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// cancel the previous stop\n\t\tif (this._state.getValueAtTime(computedTime) === \"stopped\") {\n\t\t\tconst event = this._state.get(computedTime);\n\t\t\tif (event && event.time > 0) {\n\t\t\t\tthis._tickOffset.cancel(event.time);\n\t\t\t\tthis._state.cancel(event.time);\n\t\t\t}\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis.setTicksAtTime(0, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param time The time when the clock should stop.\n\t */\n\tpause(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel start/stop/pause and setTickAtTime events scheduled after the given time.\n\t *  @param time When to clear the events after\n\t */\n\tcancel(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._state.cancel(time);\n\t\tthis._tickOffset.cancel(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the elapsed ticks at the given time\n\t * @param  time  When to get the tick value\n\t * @return The number of ticks\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", computedTime);\n\t\tif (!stopEvent) {\n\t\t\treturn 0;\n\t\t}\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state: \"paused\", time: computedTime};\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedTicks = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, computedTime + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedTicks = offsetEvent.ticks;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedTicks;\n\t}\n\n\t/**\n\t *  The number of times the callback was invoked. Starts counting at 0\n\t *  and increments after the callback was invoked. Returns -1 when stopped.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this.getTicksAtTime(this.now());\n\t}\n\n\tset ticks(t: Ticks) {\n\t\tthis.setTicksAtTime(t, this.now());\n\t}\n\n\t/**\n\t *  The time since ticks=0 that the TickSource has been running. Accounts\n\t *  for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this.getSecondsAtTime(this.now());\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this.frequency.timeToTicks(s, now);\n\t\tthis.setTicksAtTime(ticks, now);\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\ttime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", time);\n\t\tif (!stopEvent) {\n\t\t\treturn 0;\n\t\t}\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state : \"paused\", time };\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedSeconds = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, time + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedSeconds = offsetEvent.seconds;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedSeconds += e.time - periodStartTime;\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedSeconds;\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._tickOffset.cancel(time);\n\t\tthis._tickOffset.add({\n\t\t\tseconds : this.frequency.getDurationOfTicks(ticks, time),\n\t\t\tticks,\n\t\t\ttime,\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Returns the scheduled state at the given time.\n\t *  @param  time  The time to query.\n\t *  @example\n\t * source.start(\"+0.1\");\n\t * source.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tgetStateAtTime(time): PlaybackState {\n\t\ttime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the given tick. The second argument\n\t * is when to test before. Since ticks can be set (with setTicksAtTime)\n\t * there may be multiple times for a given tick value.\n\t * @param  ticks The tick number.\n\t * @param  before When to measure the tick value from.\n\t * @return The time of the tick\n\t */\n\tgetTimeOfTick(tick: Ticks, before = this.now()): Seconds {\n\t\tconst offset = this._tickOffset.get(before) as TickSourceOffsetEvent;\n\t\tconst event = this._state.get(before) as StateTimelineEvent;\n\t\tconst startTime = Math.max(offset.time, event.time);\n\t\tconst absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;\n\t\treturn this.frequency.getTimeOfTick(absoluteTicks);\n\t}\n\n\t/**\n\t *  Invoke the callback event at all scheduled ticks between the\n\t *  start time and the end time\n\t *  @param  startTime  The beginning of the search range\n\t *  @param  endTime    The end of the search range\n\t *  @param  callback   The callback to invoke with each tick\n\t */\n\tforEachTickBetween(startTime: Time, endTime: Time, callback: (when: Seconds, ticks: Ticks) => void): this {\n\t\tconst computedStartTime = this.toSeconds(startTime);\n\t\tconst computedEndTime = this.toSeconds(endTime);\n\t\t// only iterate through the sections where it is \"started\"\n\t\tlet lastStateEvent = this._state.get(computedStartTime);\n\t\tthis._state.forEachBetween(computedStartTime, computedEndTime, event => {\n\t\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && event.state !== \"started\") {\n\t\t\t\tthis.forEachTickBetween(Math.max(lastStateEvent.time, computedStartTime), event.time - this.sampleTime, callback);\n\t\t\t}\n\t\t\tlastStateEvent = event;\n\t\t});\n\n\t\tlet error = null;\n\n\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && this._state) {\n\t\t\tconst maxStartTime = Math.max(lastStateEvent.time, computedStartTime);\n\t\t\t// figure out the difference between the frequency ticks and the\n\t\t\tconst startTicks = this.frequency.getTicksAtTime(maxStartTime);\n\t\t\tconst ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);\n\t\t\tconst diff = startTicks - ticksAtStart;\n\t\t\tlet offset = diff % 1;\n\t\t\tif (offset !== 0) {\n\t\t\t\toffset = 1 - offset;\n\t\t\t}\n\t\t\tlet nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);\n\t\t\twhile (nextTickTime < computedEndTime && this._state) {\n\t\t\t\ttry {\n\t\t\t\t\tcallback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\terror = e;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this._state) {\n\t\t\t\t\tnextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._state.dispose();\n\t\tthis._tickOffset.dispose();\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n","import { getContext, setContext } from \"../Global\";\nimport { OfflineContext } from \"./OfflineContext\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\n/**\n * Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext.\n * The OfflineAudioContext is capable of rendering much faster than real time in many cases.\n * The callback function also passes in an offline instance of Tone.Transport which can be used\n * to schedule events along the Transport. **NOTE** OfflineAudioContext has the same restrictions\n * as the AudioContext in that on certain platforms (like iOS) it must be invoked by an explicit\n * user action like a click or tap.\n * @param  callback  All Tone.js nodes which are created and scheduled\n * \t\t\t\t\twithin this callback are recorded into the output Buffer.\n * @param  duration     the amount of time to record for.\n * @return  The promise which is invoked with the Tone.Buffer of the recorded output.\n * @example\n * //render 2 seconds of the oscillator\n * Tone.Offline(function(){\n * \t//only nodes created in this callback will be recorded\n * \tvar oscillator = new Tone.Oscillator().toDestination().start(0)\n * \t//schedule their events\n * }, 2).then(function(buffer){\n * \t//do something with the output buffer\n * })\n * @example\n * //can also schedule events along the Transport\n * //using the passed in Offline Transport\n * Tone.Offline(function(Transport){\n * \tvar osc = new Tone.Oscillator().toDestination()\n * \tTransport.schedule(function(time){\n * \t\tosc.start(time).stop(time + 0.1)\n * \t}, 1)\n * \tTransport.start(0.2)\n * }, 4).then(function(buffer){\n * \t//do something with the output buffer\n * })\n */\nexport async function Offline(\n\tcallback: (context: OfflineContext) => Promise<void> | void,\n\tduration: Seconds,\n\tchannels: number = 2,\n\tsampleRate: number = getContext().sampleRate,\n): Promise<ToneAudioBuffer> {\n\t// set the OfflineAudioContext based on the current context\n\tconst originalContext = getContext();\n\n\tconst context = new OfflineContext(channels, duration, sampleRate);\n\tsetContext(context);\n\n\t// invoke the callback/scheduling\n\tawait callback(context);\n\n\t// then render the audio\n\tconst buffer = await context.render();\n\n\t// return the original AudioContext\n\tsetContext(originalContext);\n\n\t// return the audio\n\treturn new ToneAudioBuffer(buffer);\n}\n","import { Context } from \"../context/Context\";\nimport { Tone } from \"../Tone\";\nimport { isDefined, isObject , isString, isUndef } from \"../util/TypeCheck\";\n\nexport type TimeValue = Time | TimeBaseClass<any, any>;\n\n/**\n * The units that the TimeBase can accept. extended by other classes\n */\nexport type TimeBaseUnit = \"s\" | \"n\" | \"t\" | \"m\" | \"i\" | \"hz\" | \"tr\" | \"samples\" | \"number\";\n\nexport interface TypeFunction {\n\tregexp: RegExp;\n\tmethod: (value: string, ...args: string[]) => number;\n}\n\nexport interface TimeExpression<Type extends number> {\n\t[key: string]: {\n\t\tregexp: RegExp;\n\t\tmethod: (value: string, ...args: string[]) => Type;\n\t};\n}\n\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n * @param  val    The time value as a number, string or object\n * @param  units  Unit values\n * @example\n * new TimeBase(4, \"n\")\n * new TimeBase(2, \"t\")\n * new TimeBase(\"2t\")\n * new TimeBase({\"2t\" : 2})\n * new TimeBase(\"2t\") + new TimeBase(\"4n\");\n */\nexport abstract class TimeBaseClass<Type extends number, Unit extends string> extends Tone {\n\n\treadonly context: Context;\n\n\t/**\n\t * The value of the units\n\t */\n\tprotected _val?: TimeValue;\n\n\t/**\n\t * The units of time\n\t */\n\tprotected _units?: Unit;\n\n\t/**\n\t * All of the conversion expressions\n\t */\n\tprotected _expressions: TimeExpression<Type>;\n\n\t/**\n\t * The default units\n\t */\n\treadonly defaultUnits: Unit = \"s\" as Unit;\n\n\tconstructor(context: Context, value?: TimeValue, units?: Unit) {\n\t\tsuper();\n\n\t\tthis._val = value;\n\t\tthis._units = units;\n\t\tthis.context = context;\n\t\tthis._expressions = this._getExpressions();\n\t}\n\n\t/**\n\t * All of the time encoding expressions\n\t */\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn {\n\t\t\thz: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._frequencyToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)hz$/i,\n\t\t\t},\n\t\t\ti: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._ticksToUnits(parseInt(value, 10));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)i$/i,\n\t\t\t},\n\t\t\tm: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)m$/i,\n\t\t\t},\n\t\t\tn: {\n\t\t\t\tmethod: (value, dot) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\tconst scalar = dot === \".\" ? 1.5 : 1;\n\t\t\t\t\tif (numericValue === 1) {\n\t\t\t\t\t\treturn this._beatsToUnits(this._getTimeSignature()) * scalar as Type;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this._beatsToUnits(4 / numericValue) * scalar as Type;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)n(\\.?)$/i,\n\t\t\t},\n\t\t\tnumber: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._expressions[this.defaultUnits].method.call(this, value);\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)$/,\n\t\t\t},\n\t\t\ts: {\n\t\t\t\tmethod: (value): Type => {\n\t\t\t\t\treturn this._secondsToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)s$/,\n\t\t\t},\n\t\t\tsamples: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn parseInt(value, 10) / this.context.sampleRate as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)samples$/,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\treturn this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)t$/i,\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tmethod: (m, q, s) => {\n\t\t\t\t\tlet total = 0;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n\t\t\t},\n\t\t};\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tVALUE OF\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Evaluate the time value. Returns the time in seconds.\n\t */\n\tvalueOf(): Type {\n\t\tif (this._val instanceof TimeBaseClass) {\n\t\t\tthis.fromType(this._val);\n\t\t}\n\t\tif (isUndef(this._val)) {\n\t\t\treturn this._noArg();\n\t\t} else if (isString(this._val) && isUndef(this._units)) {\n\t\t\tfor (const units in this._expressions) {\n\t\t\t\tif (this._expressions[units].regexp.test(this._val.trim())) {\n\t\t\t\t\tthis._units = units as Unit;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isObject(this._val)) {\n\t\t\tlet total = 0;\n\t\t\tfor (const typeName in this._val) {\n\t\t\t\tif (isDefined(this._val[typeName])) {\n\t\t\t\t\tconst quantity = this._val[typeName];\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst time = (new this.constructor(this.context, typeName)).valueOf() * quantity;\n\t\t\t\t\ttotal += time;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn total as Type;\n\t\t}\n\t\tif (isDefined(this._units)) {\n\t\t\tconst expr = this._expressions[this._units];\n\t\t\tconst matching = this._val.toString().trim().match(expr.regexp);\n\t\t\tif (matching) {\n\t\t\t\treturn expr.method.apply(this, matching.slice(1));\n\t\t\t} else {\n\t\t\t\treturn expr.method.call(this, this._val);\n\t\t\t}\n\t\t} else if (isString(this._val)) {\n\t\t\treturn parseFloat(this._val) as Type;\n\t\t} else {\n\t\t\treturn this._val as Type;\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn 1 / freq as Type;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn (60 / this._getBpm()) * beats as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn seconds as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t *  @private\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn (ticks * (this._beatsToUnits(1)) / this._getPPQ()) as Type;\n\t}\n\n\t/**\n\t *  With no arguments, return 'now'\n\t */\n\tprotected _noArg(): Type {\n\t\treturn this._now();\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tTEMPO CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Return the bpm\n\t */\n\tprotected _getBpm(): BPM {\n\t\treturn this.context.transport.bpm.value;\n\t}\n\n\t/**\n\t * Return the timeSignature\n\t */\n\tprotected _getTimeSignature(): number {\n\t\treturn this.context.transport.timeSignature as number;\n\t}\n\n\t/**\n\t * Return the PPQ or 192 if Transport is not available\n\t */\n\tprotected _getPPQ(): number {\n\t\treturn this.context.transport.PPQ;\n\t}\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected abstract _now(): Type;\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tCONVERSION INTERFACE\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Coerce a time type into this units type.\n\t * @param type Any time type units\n\t */\n\tfromType(type: TimeBaseClass<any, any>): this {\n\t\tthis._units = undefined;\n\t\tswitch (this.defaultUnits) {\n\t\t\tcase \"s\":\n\t\t\t\tthis._val = type.toSeconds();\n\t\t\t\tbreak;\n\t\t\tcase \"i\":\n\t\t\t\tthis._val = type.toTicks();\n\t\t\t\tbreak;\n\t\t\tcase \"hz\":\n\t\t\t\tthis._val = type.toFrequency();\n\t\t\t\tbreak;\n\t\t\tcase \"midi\":\n\t\t\t\tthis._val = type.toMidi();\n\t\t\t\tbreak;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Return the value in seconds\n\t */\n\tabstract toSeconds(): Seconds;\n\n\t/**\n\t *  Return the value as a Midi note\n\t */\n\tabstract toMidi(): MidiNote;\n\n\t/**\n\t * Convert the value into ticks\n\t */\n\tabstract toTicks(): Ticks;\n\n\t/**\n\t *  Return the value in hertz\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn 1 / this.toSeconds();\n\t}\n\n\t/**\n\t *  Return the time in samples\n\t */\n\ttoSamples(): Samples {\n\t\treturn this.toSeconds() * this.context.sampleRate;\n\t}\n\n\t/**\n\t *  Return the time in milliseconds.\n\t */\n\ttoMilliseconds(): Milliseconds {\n\t\treturn this.toSeconds() * 1000;\n\t}\n}\n","export { Gain } from \"./context/Gain\";\nexport { Context } from \"./context/Context\";\nexport { OfflineContext } from \"./context/OfflineContext\";\nexport { Offline } from \"./context/Offline\";\nexport { ToneAudioBuffer } from \"./context/ToneAudioBuffer\";\nexport { Delay } from \"./context/Delay\";\nexport { Clock } from \"./clock/Clock\";\nexport { Frequency } from \"./type/Frequency\";\nexport { Time } from \"./type/Time\";\nexport { Ticks } from \"./type/Ticks\";\nexport { TransportTime } from \"./type/TransportTime\";\nexport { Draw } from \"./util/Draw\";\nexport { StateTimeline } from \"./util/StateTimeline\";\nexport { IntervalTimeline } from \"./util/IntervalTimeline\";\nexport { Timeline } from \"./util/Timeline\";\nexport { Emitter } from \"./util/Emitter\";\nexport { Tone } from \"./Tone\";\nexport { Destination } from \"./context/Destination\";\nexport { Transport } from \"./clock/Transport\";\n","/**\n * The global audio context which is getable and assignable through\n * getAudioContext and setAudioContext\n */\nlet globalContext: BaseAudioContext;\n\n// @ts-ignore\nglobalContext = window.TONE_AUDIO_CONTEXT;\n\n/**\n * Returns the default system-wide AudioContext\n */\nexport function getAudioContext(): BaseAudioContext {\n\tif (!globalContext) {\n\t\tsetAudioContext(new AudioContext());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n */\nexport function setAudioContext(context: BaseAudioContext): void {\n\tglobalContext = context;\n\t// @ts-ignore\n\twindow.TONE_AUDIO_CONTEXT = globalContext;\n}\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","\nexport type TickerClockSource = \"worker\" | \"timeout\" | \"offline\";\n\n/**\n * A class which provides a reliable callback using either\n * a Web Worker, or if that isn't supported, falls back to setTimeout.\n */\nexport class Ticker {\n\n\t/**\n\t * Either \"worker\" or \"timeout\" or \"offline\"\n\t */\n\tprivate _type: TickerClockSource;\n\n\t/**\n\t * The update interval of the worker\n\t */\n\tprivate _updateInterval: Seconds;\n\n\t/**\n\t * The callback to invoke at regular intervals\n\t */\n\tprivate _callback: () => void;\n\n\t/**\n\t * track the callback interval\n\t */\n\tprivate _timeout!: number;\n\n\t/**\n\t * private reference to the worker\n\t */\n\tprivate _worker!: Worker;\n\n\tconstructor(callback: () => void, type: TickerClockSource, updateInterval: Seconds) {\n\n\t\tthis._callback = callback;\n\t\tthis._type = type;\n\t\tthis._updateInterval = updateInterval;\n\n\t\t// create the clock source for the first time\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t *  Generate a web worker\n\t */\n\tprivate _createWorker(): void {\n\n\t\tconst blob = new Blob([\n\t\t\t// the initial timeout time\n\t\t\t`var timeoutTime =  ${(this._updateInterval * 1000).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();`,\n\t\t]);\n\t\tconst blobUrl = window.URL.createObjectURL(blob);\n\t\tconst worker = new Worker(blobUrl);\n\n\t\tworker.onmessage = this._callback.bind(this);\n\n\t\tthis._worker = worker;\n\t}\n\n\t/**\n\t * Create a timeout loop\n\t */\n\tprivate _createTimeout(): void {\n\t\tthis._timeout = window.setTimeout(()  => {\n\t\t\tthis._createTimeout();\n\t\t\tthis._callback();\n\t\t}, this._updateInterval * 1000);\n\t}\n\n\t/**\n\t * Create the clock source.\n\t */\n\tprivate _createClock(): void {\n\t\tif (this._type === \"worker\") {\n\t\t\ttry {\n\t\t\t\tthis._createWorker();\n\t\t\t} catch (e) {\n\t\t\t\t// workers not supported, fallback to timeout\n\t\t\t\tthis._type = \"timeout\";\n\t\t\t\tthis._createClock();\n\t\t\t}\n\t\t} else if (this._type === \"timeout\") {\n\t\t\tthis._createTimeout();\n\t\t}\n\t}\n\n\t/**\n\t * Clean up the current clock source\n\t */\n\tprivate _disposeClock(): void {\n\t\tif (this._timeout) {\n\t\t\tclearTimeout(this._timeout);\n\t\t\tthis._timeout = 0;\n\t\t}\n\t\tif (this._worker) {\n\t\t\tthis._worker.terminate();\n\t\t\tthis._worker.onmessage = null;\n\t\t}\n\t}\n\n\t/**\n\t * The rate in seconds the ticker will update\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._updateInterval = Math.max(interval, 128 / 44100);\n\t\tif (this._type === \"worker\") {\n\t\t\tthis._worker.postMessage(Math.max(interval * 1000, 1));\n\t\t}\n\t}\n\n\t/**\n\t * The type of the ticker, either a worker or a timeout\n\t */\n\tget type(): TickerClockSource {\n\t\treturn this._type;\n\t}\n\tset type(type: TickerClockSource) {\n\t\tthis._disposeClock();\n\t\tthis._type = type;\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): void {\n\t\tthis._disposeClock();\n\t}\n}\n","export { getContext, setContext } from \"./core/Global\";\nexport * from \"./core/index\";\nexport * from \"./source/index\";\nexport * from \"./instrument/index\";\nexport * from \"./event/index\";\nexport * from \"./effect/index\";\nexport * from \"./component/index\";\n\nimport { getContext } from \"./core/Global\";\n/**\n *  The current audio context time\n */\nexport function now(): Seconds {\n\treturn getContext().now();\n}\n\n// tslint:disable-next-line: variable-name\nexport const Transport = getContext().transport;\n// tslint:disable-next-line: variable-name\nexport const Destination = getContext().destination;\n"],"sourceRoot":""}