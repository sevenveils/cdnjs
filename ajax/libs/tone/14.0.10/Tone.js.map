{"version":3,"sources":["webpack://Tone/webpack/universalModuleDefinition","webpack://Tone/webpack/bootstrap","webpack://Tone/./Tone/core/util/Defaults.ts","webpack://Tone/./Tone/core/util/Interface.ts","webpack://Tone/./Tone/core/util/TypeCheck.ts","webpack://Tone/./Tone/core/context/ToneAudioNode.ts","webpack://Tone/./Tone/core/context/Gain.ts","webpack://Tone/./Tone/core/Global.ts","webpack://Tone/./Tone/signal/Signal.ts","webpack://Tone/./Tone/source/Source.ts","webpack://Tone/./Tone/core/util/Timeline.ts","webpack://Tone/./Tone/source/oscillator/Oscillator.ts","webpack://Tone/./Tone/core/Tone.ts","webpack://Tone/./Tone/core/context/ToneWithContext.ts","webpack://Tone/./Tone/core/context/Param.ts","webpack://Tone/./Tone/core/type/Time.ts","webpack://Tone/./Tone/core/Connect.ts","webpack://Tone/./Tone/core/util/StateTimeline.ts","webpack://Tone/./Tone/core/type/TransportTime.ts","webpack://Tone/./Tone/core/type/Conversions.ts","webpack://Tone/./Tone/core/util/Emitter.ts","webpack://Tone/./Tone/source/oscillator/PulseOscillator.ts","webpack://Tone/./Tone/signal/Multiply.ts","webpack://Tone/./Tone/core/type/Ticks.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffer.ts","webpack://Tone/./Tone/core/context/ContextInitialization.ts","webpack://Tone/./Tone/core/context/Context.ts","webpack://Tone/./Tone/source/oscillator/PWMOscillator.ts","webpack://Tone/./Tone/source/oscillator/FatOscillator.ts","webpack://Tone/./Tone/source/oscillator/FMOscillator.ts","webpack://Tone/./Tone/signal/WaveShaper.ts","webpack://Tone/./Tone/signal/SignalOperator.ts","webpack://Tone/./Tone/source/oscillator/AMOscillator.ts","webpack://Tone/./Tone/source/oscillator/OscillatorNode.ts","webpack://Tone/./Tone/source/OneShotSource.ts","webpack://Tone/./Tone/source/buffer/BufferSource.ts","webpack://Tone/./Tone/core/clock/TransportEvent.ts","webpack://Tone/./Tone/component/channel/Volume.ts","webpack://Tone/./Tone/core/util/IntervalTimeline.ts","webpack://Tone/./Tone/core/clock/Clock.ts","webpack://Tone/./Tone/core/type/Frequency.ts","webpack://Tone/./Tone/version.ts","webpack://Tone/./Tone/source/oscillator/OmniOscillator.ts","webpack://Tone/./Tone/signal/AudioToGain.ts","webpack://Tone/./Tone/source/Noise.ts","webpack://Tone/./Tone/source/index.ts","webpack://Tone/./Tone/core/clock/TransportRepeatEvent.ts","webpack://Tone/./Tone/core/clock/Transport.ts","webpack://Tone/./Tone/core/context/Destination.ts","webpack://Tone/./Tone/core/util/Draw.ts","webpack://Tone/./Tone/core/clock/TickSignal.ts","webpack://Tone/./Tone/core/clock/TickSource.ts","webpack://Tone/./Tone/core/context/Delay.ts","webpack://Tone/./Tone/core/context/OfflineContext.ts","webpack://Tone/./Tone/core/type/TimeBase.ts","webpack://Tone/./Tone/core/index.ts","webpack://Tone/./Tone/core/context/AudioContext.ts","webpack://Tone/./Tone/core/clock/Ticker.ts","webpack://Tone/./Tone/index.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","TypeCheck_1","deepMerge","target","sources","_i","arguments","length","source","shift","isObject","key","assign","_a","_b","apply","concat","optionsFromArguments","defaults","argsArray","keys","opts","args","Array","from","isDefined","getDefaultsFromInstance","instance","constructor","getDefaults","defaultArg","given","fallback","isUndef","readOnly","isArray","forEach","str","writable","noOp","arg","isString","isFunction","isNumber","toString","isBoolean","isNote","test","Defaults_1","ToneWithContext_1","ToneAudioNode","_super","_this","options","numberOfInputs","numberOfOutputs","__extends","ToneWithContext","channelCount","channelCountMode","channelInterpretation","createInsOuts","input","context","createGain","output","_setChannelProperties","_internalChannels","node","_getChannelProperties","props","connect","destination","outputNum","inputNum","toDestination","toMaster","disconnect","chain","nodes","connectSeries","fan","dispose","AudioNode","first","reduce","prev","current","srcNode","dstNode","outputNumber","inputNumber","AudioParam","assert","dst","e","Param_1","Interface_1","ToneAudioNode_1","Gain","_gainNode","gain","Param","convert","param","units","globalContext","version_1","Context_1","setContext","initialize","window","TONE_CONTEXT","getContext","Context","start","resume","TONE_SILENCE_LOGGING","prefix","version","printString","console","log","ToneAudioNode_2","Signal","override","_constantSource","createConstantSource","_param","offset","connectSignal","setValueAtTime","time","getValueAtTime","setRampPoint","linearRampToValueAtTime","exponentialRampToValueAtTime","exponentialRampTo","rampTime","startTime","linearRampTo","targetRampTo","exponentialApproachValueAtTime","setTargetAtTime","timeConstant","setValueCurveAtTime","values","duration","scaling","cancelScheduledValues","cancelAndHoldAtTime","rampTo","overridden","maxValue","minValue","signal","Volume_1","StateTimeline_1","Source","Volume","_volume","undefined","volume","_state","StateTimeline","_synced","_scheduled","_syncedStart","_syncedStop","memory","mute","transport","state","seconds","now","toSeconds","Math","max","currentTime","cancel","setStateAtTime","restart","event_1","sched","schedule","t","_start","push","stop","_stop","bind","sync","stateEvent","startOffset","getSecondsAtTime","sampleTime","on","unsync","off","id","clear","Tone_1","Timeline","_timeline","Infinity","add","event","Reflect","has","valueOf","index","_search","splice","diff","remove","indexOf","peek","getAfter","getBefore","len","after","slice","cancelBefore","previousEvent","beginning","end","midPoint","floor","nextEvent","_iterate","callback","lowerBound","upperBound","forEachBefore","forEachAfter","forEachBetween","endTime","forEachFrom","forEachAtTime","Tone","Signal_1","Source_1","OscillatorNode_1","Oscillator","_oscillator","frequency","detune","_partials","partials","_partialCount","partialCount","_phase","phase","_type","type","baseType","oscillator","ToneOscillatorNode","_wave","setPeriodicWave","onended","setTimeout","cancelStop","syncFrequency","syncSignal","unsyncFrequency","unsyncSignal","isBasicType","_getRealImaginary","real","imag","periodicWave","createPeriodicWave","replace","partial","exec","periodicWaveSize","fftSize","Float32Array","parseInt","piFactor","PI","b","TypeError","sin","cos","_inverseFFT","sum","_getInitialValue","twoPi","debug","statement","error","Error","Global_1","Frequency_1","Time_1","TransportTime_1","defaultContext","lookAhead","immediate","sampleRate","TimeClass","toFrequency","freq","FrequencyClass","toTicks","TransportTimeClass","attribute","member","set","Conversions_1","Timeline_1","_minOutput","_events","_initialValue","_fromType","_is","val","dbToGain","min","_toType","gainToDb","numericValue","computedTime","before","beforeValue","previous","_linearInterpolate","_exponentialInterpolate","previousVal","constant","_exponentialApproach","currentVal","startingValue","segTime","valueAtTime","t0","v0","v1","exp","t1","pow","_getExpressions","method","capture","_now","regexp","quantize","quantTo","_secondsToUnits","nextSubdivision","subdiv","percent","subdivision","round","toNotation","testNotations","power","closest","closestSeconds","notation","notationSeconds","abs","toBarsBeatsSixteenths","quarterTime","_beatsToUnits","quarters","parseFloat","toFixed","measures","_getTimeSignature","sixteenths","sixteenthString","join","_getPPQ","toMidi","ftom","TimeBaseClass","Time","initial","_initial","getLastState","getNextState","event_2","TransportTime","equalPowerScale","db","LN10","intervalToFrequencyRatio","interval","A4","getA4","setA4","log2","mtof","midi","Emitter","split","eventName","once","boundCallback","eventList","emit","mixin","constr","getOwnPropertyDescriptor","Gain_1","WaveShaper_1","Oscillator_1","PulseOscillator","width","_widthGate","_sawtooth","_thresh","WaveShaper","mapping","Multiply","_mult","factor","TicksClass","defaultUnits","ticks","beats","_getBpm","_ticksToUnits","Ticks","ToneAudioBuffer","onload","reverse","url","AudioBuffer","load","catch","onerror","_buffer","buffer","loaded","_reversed","_reverse","promise","downloads","audioBuffer","sent","e_1","fromArray","array","isMultidimensional","channels","createBuffer","multiChannelArray","copyToChannel","toMono","chanNum","toArray","outputArray","numChannels_1","numberOfChannels","channel","channelArray","map","sample","getChannelData","ret","startSamples","endSamples","replacementArray","rev","fromUrl","matches","match","extensions","extension","extensions_1","ext","supportsType","fetch","baseUrl","response","ok","arrayBuffer","decodeAudioData","document","createElement","canPlayType","notifyNewContext","onContextInit","cb","initializeContext","ctx","notifyCloseContext","onContextClose","closeContext","Ticker_1","Emitter_1","AudioContext_1","ContextInitialization_1","_constants","Map","_timeouts","_timeoutIds","_initialized","_context","_latencyHint","latencyHint","_ticker","Ticker","clockSource","updateInterval","_timeoutLoop","addEventListener","getAudioContext","createAnalyser","createOscillator","createBufferSource","createBiquadFilter","createChannelMerger","createChannelSplitter","createConvolver","createDelay","maxDelayTime","createDynamicsCompressor","createIIRFilter","feedforward","feedback","createPanner","constraints","createStereoPanner","createWaveShaper","audioData","listener","_transport","_destination","hint","lookAheadValue","AudioContext","Promise","resolve","close","getConstant","arr","loop","firstEvent","fn","timeout","clearTimeout","Multiply_1","PulseOscillator_1","PWMOscillator","sourceType","_pulse","_modulator","_scale","modulationFrequency","FatOscillator","_oscillators","_spread","spread","count","_forEach","osc","iterator","start_1","step_1","FMOscillator","_carrier","harmonicity","modulationIndex","_modulationNode","modulationType","_shaper","curve","setMap","normalized","oversample","oversampling","isOverSampleType","some","includes","SignalOperator","AudioToGain_1","AMOscillator","_modulationScale","AudioToGain","Connect_1","OneShotSource_1","OneShotSource","_startGain","_stopSource","_startTime","_stopTime","_timeout","_fadeIn","_fadeOut","_curve","getStateAtTime","fadeInTime","_stopGain","fadeOutTime","ToneAudioBuffer_1","ToneBufferSource","_source","_sourceStarted","_sourceStopped","playbackRate","loopStart","loopEnd","fadeIn","fadeOut","computedDur","additionalTail","TransportEvent","_eventId","_once","invoke","_unmutedVolume","IntervalTimeline","_root","_length","IntervalNode","insert","updateHeight","updateMax","_rebalance","parent","results","search","results_1","_removeNode","_setRoot","_replaceNodeInParent","replacement","isLeftChild","left","right","temp","getBalance","_rotateLeft","pivotNode","_rotateRight","balance","low","allNodes_1","traverse","searchAfter","high","_left","_right","height","point","TickSource_1","Clock","_lastUpdate","_boundLoop","_loop","_tickSource","TickSource","pause","ceil","getTicksAtTime","setTicksAtTime","nextTickTime","when","currentTick","getTimeOfTick","forEachTickBetween","Conversions_2","note","pitch","octave","noteNumber","noteToScaleIndex","toLowerCase","tr","q","total","transpose","harmonize","intervals","toNote","scaleIndexToNote","_noArg","_frequencyToUnits","cbb","c#","cx","dbb","d#","dx","ebb","eb","e#","ex","fbb","fb","f","f#","fx","gbb","gb","g","g#","gx","abb","ab","a","a#","ax","bbb","bb","b#","bx","Frequency","AMOscillator_1","FatOscillator_1","FMOscillator_1","PWMOscillator_1","OmniOscillatorSourceMap","am","fat","fm","pulse","pwm","OmniOscillator","_sourceType","substr","_createNewOscillator","_getOscType","oscType","oscConstructor","oldOsc_1","blockTime","sType","mType","SignalOperator_1","_norm","x","BufferSource_1","Noise","_playbackRate","_noiseBuffers","rate","random","_noiseCache","brown","pink","white","channelNum","lastOut","b0","b1","b2","b3","b4","b5","b6","Noise_1","OmniOscillator_1","Ticks_1","TransportEvent_1","TransportRepeatEvent","_currentId","_nextId","_nextTick","_boundRestart","_restart","_interval","_createEvents","scheduleOnce","IntervalTimeline_1","Clock_1","TransportRepeatEvent_1","Transport","_loopStart","_loopEnd","_scheduledEvents","_repeatedEvents","_syncedSignals","_swingAmount","_ppq","ppq","_clock","_processTick","_bindClockEvents","bpm","multiplier","_timeSignature","timeSignature","_swingTicks","swing","swingSubdivision","tickTime","progress","amount","_addEvent","scheduleRepeat","eventId","item","timeline","computedAfter","offsetTicks","toggle","timeSig","startPosition","endPosition","setLoopPoints","timeToTicks","remainingTicks","ratio","computedFreq","PPQ","ratioSignal","syncedSignal","Destination","rawContext","unshift","Draw","expiration","anticipation","_boundDrawLoop","_drawLoop","_animationFrame","requestAnimationFrame","cancelAnimationFrame","TickSignal","_sig","_multiplier","computedValue","prevEvent","segments","rampVal","ticksUntilTime","_getTicksUntilEvent","computedVal","segmentDur","val0","val1","onTheLineEvent","getDurationOfTicks","tick","delta","k","sqrt","sol1","ticksToTime","computedDuration","startTicks","TickSignal_1","_tickOffset","stopEvent","tmpEvent","lastState","elapsedTicks","periodStartTime","offsetEvent","elapsedSeconds","absoluteTicks","computedStartTime","computedEndTime","lastStateEvent","maxStartTime","Delay","maxDelay","delayTime","_delayNode","OfflineContext","OfflineAudioContext","_currentTime","_duration","render","startRendering","_val","_units","_expressions","hz","dot","scalar","number","samples","fromType","trim","typeName","quantity","expr","matching","toSamples","toMilliseconds","OfflineContext_1","Delay_1","Draw_1","Destination_1","Transport_1","setAudioContext","TONE_AUDIO_CONTEXT","_callback","_updateInterval","_createClock","_createWorker","blob","Blob","blobUrl","URL","createObjectURL","worker","Worker","onmessage","_worker","_createTimeout","_disposeClock","terminate","postMessage","__export","Global_2"],"mappings":"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","file":"Tone.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Tone\"] = factory();\n\telse\n\t\troot[\"Tone\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 57);\n","// import { BaseToneOptions } from \"../Tone\";\nimport { isDefined, isObject, isUndef } from \"./TypeCheck\";\n\ntype BaseToneOptions = import(\"../Tone\").BaseToneOptions;\n\n/**\n * Recursively merge an object\n * @param target the object to merge into\n * @param sources the source objects to merge\n */\nexport function deepMerge<T>(target: T, ...sources: T[]): T {\n\tif (!sources.length) { return target; }\n\tconst source = sources.shift();\n\n\tif (isObject(target) && isObject(source)) {\n\t\tfor (const key in source) {\n\t\t\tif (isObject(source[key])) {\n\t\t\t\tif (!target[key]) { Object.assign(target, { [key]: {} }); }\n\t\t\t\tdeepMerge(target[key], source[key] as any);\n\t\t\t} else {\n\t\t\t\tObject.assign(target, { [key]: source[key] as any });\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Convert an args array into an object.\n */\nexport function optionsFromArguments<T>(defaults: T, argsArray: IArguments, keys: string[] = []): T {\n\tconst opts: any = {};\n\tconst args = Array.from(argsArray);\n\tif (args.length === 1 && isObject(args[0])) {\n\t\tdeepMerge(opts, args[0]);\n\t} else {\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tif (isDefined(args[i])) {\n\t\t\t\topts[keys[i]] = args[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn deepMerge(defaults, opts);\n}\n\n/**\n * Return this instances default values by calling Constructor.getDefaults()\n */\nexport function getDefaultsFromInstance<T>(instance: T): BaseToneOptions {\n\ttype ToneClass = {\n\t\tconstructor: ToneClass;\n\t\tgetDefaults: () => BaseToneOptions;\n\t} & T;\n\n\treturn (instance as ToneClass).constructor.getDefaults();\n}\n\n/**\n * Returns the fallback if the given object is undefined.\n * Take an array of arguments and return a formatted options object.\n */\nexport function defaultArg<T>(given: T, fallback: T): T {\n\tif (isUndef(given)) {\n\t\treturn fallback;\n\t} else {\n\t\treturn given;\n\t}\n}\n","import { isArray } from \"./TypeCheck\";\n\n// return an interface which excludes certain keys\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n *  Make the property not writable using `defineProperty`. Internal use only.\n */\nexport function readOnly(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => readOnly(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\tenumerable: true,\n\t\t\twritable: false,\n\t\t});\n\t}\n}\n\n/**\n *  Make an attribute writeable. Internal use only.\n */\nexport function writable(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => writable(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\twritable: true,\n\t\t});\n\t}\n}\n\nexport const noOp: (...args: any[]) => any = () => {\n\t// no op!\n};\n","/**\n *  Test if the arg is undefined\n */\nexport function isUndef(arg: any): arg is undefined {\n\treturn typeof arg === \"undefined\";\n}\n\n/**\n *  Test if the arg is not undefined\n */\nexport function isDefined<T>(arg: T | undefined): arg is T {\n\treturn !isUndef(arg);\n}\n\n/**\n *  Test if the arg is a function\n */\nexport function isFunction(arg: any): arg is (a: any) => any {\n\treturn typeof arg === \"function\";\n}\n\n/**\n *  Test if the argument is a number.\n */\nexport function isNumber(arg: any): arg is number {\n\treturn (typeof arg === \"number\");\n}\n\n/**\n *  Test if the given argument is an object literal (i.e. `{}`);\n */\nexport function isObject(arg: any): arg is object {\n\treturn (Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object);\n}\n\n/**\n *  Test if the argument is a boolean.\n */\nexport function isBoolean(arg: any): arg is boolean {\n\treturn (typeof arg === \"boolean\");\n}\n\n/**\n *  Test if the argument is an Array\n */\nexport function isArray(arg: any): arg is any[] {\n\treturn (Array.isArray(arg));\n}\n\n/**\n *  Test if the argument is a string.\n */\nexport function isString(arg: any): arg is string {\n\treturn (typeof arg === \"string\");\n}\n\n/**\n *  Test if the argument is in the form of a note in scientific pitch notation.\n *  e.g. \"C4\"\n */\nexport function isNote(arg: any): arg is Note {\n\treturn isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}\n","import { optionsFromArguments } from \"../util/Defaults\";\nimport { isArray, isDefined, isNumber } from \"../util/TypeCheck\";\nimport { Param } from \"./Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\n\nexport type InputNode = ToneAudioNode | AudioNode | AudioParam | Param<Unit>;\nexport type OutputNode = ToneAudioNode | AudioNode;\n\nexport interface ChannelProperties {\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n * The possible options for this node\n */\nexport interface ToneAudioNodeOptions extends ToneWithContextOptions {\n\tnumberOfInputs: number;\n\tnumberOfOutputs: number;\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n *  ToneAudioNode is the base class for classes which process audio.\n */\nexport abstract class ToneAudioNode<Options extends ToneAudioNodeOptions = ToneAudioNodeOptions>\nextends ToneWithContext<Options> {\n\n\tabstract name = \"AudioNode\";\n\n\t/**\n\t * The input node or nodes. If the object is a source,\n\t * it does not have any input and this.input is undefined.\n\t */\n\tabstract input: InputNode | InputNode[] | undefined;\n\n\t/**\n\t * The output nodes. If the object is a sink,\n\t * it does not have any output and this.output is undefined.\n\t */\n\tabstract output: OutputNode | OutputNode[] | undefined;\n\n\t/**\n\t *  The number of inputs feeding into the AudioNode.\n\t *  For source nodes, this will be 0.\n\t */\n\treadonly numberOfInputs: number;\n\n\t/**\n\t *  The number of outputs of the AudioNode.\n\t */\n\treadonly numberOfOutputs: number;\n\n\t/**\n\t * List all of the node that must be set to match the ChannelProperties\n\t */\n\tprotected abstract _internalChannels: OutputNode[];\n\n\tstatic getDefaults(): ToneAudioNodeOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tchannelCount: 2,\n\t\t\tchannelCountMode: \"max\" as ChannelCountMode,\n\t\t\tchannelInterpretation: \"speakers\" as ChannelInterpretation,\n\t\t\tnumberOfInputs: 0,\n\t\t\tnumberOfOutputs: 0,\n\t\t});\n\t}\n\n\tconstructor(options: Partial<ToneAudioNodeOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(ToneAudioNode.getDefaults(), arguments, [\"context\"]));\n\n\t\tconst options = optionsFromArguments(ToneAudioNode.getDefaults(), arguments, [\"context\"]);\n\n\t\tthis.numberOfInputs = options.numberOfInputs;\n\t\tthis.numberOfOutputs = options.numberOfInputs;\n\t}\n\n\tprotected createInsOuts(numberOfInputs: number = 0, numberOfOutputs: number = 0): void {\n\t\tif (numberOfInputs === 1) {\n\t\t\tthis.input = this.context.createGain();\n\t\t} else if (numberOfInputs > 1) {\n\t\t\tthis.input = [];\n\t\t\tfor (let i = 0; i < numberOfInputs; i++) {\n\t\t\t\tthis.input[i] = this.context.createGain();\n\t\t\t}\n\t\t}\n\n\t\tif (numberOfOutputs === 1) {\n\t\t\tthis.output = this.context.createGain();\n\t\t} else if (numberOfOutputs > 1) {\n\t\t\tthis.output = [];\n\t\t\tfor (let o = 0; o < numberOfOutputs; o++) {\n\t\t\t\tthis.output[o] = this.context.createGain();\n\t\t\t}\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// AUDIO PROPERTIES\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Set the audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t * @param options\n\t */\n\tprivate _setChannelProperties(options: ChannelProperties): void {\n\t\tif (this._internalChannels.length) {\n\t\t\tthis._internalChannels.forEach(node => {\n\t\t\t\tnode.channelCount = options.channelCount;\n\t\t\t\tnode.channelCountMode = options.channelCountMode;\n\t\t\t\tnode.channelInterpretation = options.channelInterpretation;\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Get the current audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t */\n\tprivate _getChannelProperties(): ChannelProperties {\n\t\tif (this._internalChannels.length) {\n\t\t\tconst node = this._internalChannels[0];\n\t\t\treturn {\n\t\t\t\tchannelCount: node.channelCount,\n\t\t\t\tchannelCountMode: node.channelCountMode,\n\t\t\t\tchannelInterpretation: node.channelInterpretation,\n\t\t\t};\n\t\t} else {\n\t\t\t// return the defaults\n\t\t\treturn {\n\t\t\t\tchannelCount: 2,\n\t\t\t\tchannelCountMode: \"max\",\n\t\t\t\tchannelInterpretation: \"speakers\",\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t *  channelCount is the number of channels used when up-mixing and down-mixing\n\t *  connections to any inputs to the node. The default value is 2 except for\n\t *  specific nodes where its value is specially determined.\n\t */\n\tget channelCount(): number {\n\t\treturn this._getChannelProperties().channelCount;\n\t}\n\tset channelCount(channelCount: number) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCount }));\n\t}\n\n\t/**\n\t *  channelCountMode determines how channels will be counted when up-mixing and\n\t *  down-mixing connections to any inputs to the node.\n\t *  The default value is \"max\". This attribute has no effect for nodes with no inputs.\n\t */\n\tget channelCountMode(): ChannelCountMode {\n\t\treturn this._getChannelProperties().channelCountMode;\n\t}\n\tset channelCountMode(channelCountMode: ChannelCountMode) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCountMode }));\n\t}\n\n\t/**\n\t *  channelInterpretation determines how individual channels will be treated\n\t *  when up-mixing and down-mixing connections to any inputs to the node.\n\t *  The default value is \"speakers\".\n\t */\n\tget channelInterpretation(): ChannelInterpretation {\n\t\treturn this._getChannelProperties().channelInterpretation;\n\t}\n\tset channelInterpretation(channelInterpretation: ChannelInterpretation) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelInterpretation }));\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONNECTIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n\t * @param unit The output to connect to\n\t * @param outputNum The output to connect from\n\t * @param inputNum The input to connect to\n\t */\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t */\n\ttoDestination(): this {\n\t\tthis.connect(this.context.destination);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t * alias for {@link toDestination}\n\t */\n\ttoMaster(): this {\n\t\treturn this.toDestination();\n\t}\n\n\t/**\n\t *  disconnect the output\n\t *  @param output Either the output index to disconnect if the output is an array, or the node to disconnect from.\n\t */\n\tdisconnect(destination?: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tdisconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Connect the output of this node to the rest of the nodes in series.\n\t *  @param nodes\n\t *  @example\n\t *  //connect a node to an effect, panVol and then to the master output\n\t *  node.chain(effect, panVol, Tone.Destination);\n\t */\n\tchain(...nodes: InputNode[]): this {\n\t\tconnectSeries(this, ...nodes);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  connect the output of this node to the rest of the nodes in parallel.\n\t *  @param nodes\n\t *  @returns this\n\t */\n\tfan(...nodes: InputNode[]): this {\n\t\tnodes.forEach(node => this.connect(node));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Dispose and disconnect\n\t */\n\tdispose(): this {\n\t\tif (isDefined(this.input)) {\n\t\t\tif (isArray(this.input)) {\n\t\t\t\tthis.input.forEach(input => {\n\t\t\t\t\tif (input instanceof ToneAudioNode) {\n\t\t\t\t\t\tinput.dispose();\n\t\t\t\t\t} else if (input instanceof AudioNode) {\n\t\t\t\t\t\tinput.disconnect();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (this.input instanceof AudioNode) {\n\t\t\t\t\tthis.input.disconnect();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (isDefined(this.output)) {\n\t\t\tif (isArray(this.output)) {\n\t\t\t\tthis.output.forEach(output => {\n\t\t\t\t\tif (output instanceof ToneAudioNode) {\n\t\t\t\t\t\toutput.dispose();\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutput.disconnect();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.output.disconnect();\n\t\t\t}\n\t\t}\n\t\tthis._internalChannels = [];\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// CONNECTIONS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n *  connect together all of the arguments in series\n *  @param nodes\n */\nexport function connectSeries(...nodes: InputNode[]): void {\n\tconst first = nodes.shift();\n\tnodes.reduce((prev, current) => {\n\t\tif (prev instanceof ToneAudioNode) {\n\t\t\tprev.connect(current);\n\t\t} else if (prev instanceof AudioNode) {\n\t\t\tconnect(prev, current);\n\t\t}\n\t\treturn current;\n\t}, first);\n}\n\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function connect(srcNode: OutputNode, dstNode: InputNode, outputNumber = 0, inputNumber = 0): void {\n\n\t// resolve the input of the dstNode\n\twhile (!(dstNode instanceof AudioNode || dstNode instanceof AudioParam)) {\n\t\tif (isArray(dstNode.input)) {\n\t\t\tthis.assert(dstNode.input.length < inputNumber, \"the output number is greater than the number of outputs\");\n\t\t\tdstNode = dstNode.input[inputNumber];\n\t\t} else if (isDefined(dstNode.input)) {\n\t\t\tdstNode = dstNode.input;\n\t\t}\n\t\tinputNumber = 0;\n\t}\n\n\tif (srcNode instanceof ToneAudioNode) {\n\t\tif (isArray(srcNode.output)) {\n\t\t\tthis.assert(srcNode.output.length < outputNumber, \"the output number is greater than the number of outputs\");\n\t\t\tsrcNode = srcNode.output[outputNumber];\n\t\t} else if (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t\toutputNumber = 0;\n\t}\n\n\t// make the connection\n\tif (dstNode instanceof AudioParam) {\n\t\tsrcNode.connect(dstNode, outputNumber);\n\t} else {\n\t\tsrcNode.connect(dstNode, outputNumber, inputNumber);\n\t}\n}\n\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function disconnect(\n\tsrcNode: OutputNode,\n\tdstNode?: InputNode,\n\toutputNumber = 0,\n\tinputNumber = 0,\n): void {\n\n\t// resolve the destination node\n\tif (isDefined(dstNode)) {\n\t\twhile (dstNode instanceof ToneAudioNode) {\n\t\t\tif (isArray(dstNode.input)) {\n\t\t\t\tif (isNumber(inputNumber)) {\n\t\t\t\t\tthis.assert(dstNode.input.length < inputNumber, \"the input number is greater than the number of inputs\");\n\t\t\t\t\tdstNode = dstNode.input[inputNumber];\n\t\t\t\t} else {\n\t\t\t\t\t// disconnect from all of the nodes\n\t\t\t\t\t// since we don't know which one was connected\n\t\t\t\t\tdstNode.input.forEach(dst => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// catch errors from disconnecting from nodes that are not connected\n\t\t\t\t\t\t\tdisconnect(srcNode, dst, outputNumber);\n\t\t\t\t\t\t\t// tslint:disable-next-line: no-empty\n\t\t\t\t\t\t} catch (e) { }\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tinputNumber = 0;\n\t\t\t} else if (dstNode.input) {\n\t\t\t\tdstNode = dstNode.input;\n\t\t\t}\n\t\t}\n\t}\n\n\t// resolve the src node\n\twhile (!(srcNode instanceof AudioNode)) {\n\t\tif (isArray(srcNode.output)) {\n\t\t\tthis.assert(srcNode.output.length < outputNumber, \"the output number is greater than the number of outputs\");\n\t\t\tsrcNode = srcNode.output[outputNumber];\n\t\t} else if (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t\toutputNumber = 0;\n\t}\n\n\tif (dstNode instanceof AudioParam) {\n\t\tsrcNode.disconnect(dstNode, outputNumber);\n\t} else if (dstNode instanceof AudioNode) {\n\t\tsrcNode.disconnect(dstNode, outputNumber, inputNumber);\n\t} else {\n\t\tsrcNode.disconnect();\n\t}\n}\n","import { Param } from \"../context/Param\";\nimport \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface GainOptions extends ToneAudioNodeOptions {\n\tgain: number;\n\tunits: UnitName;\n\tconvert: boolean;\n}\n\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @param  gain The initial gain of the GainNode\n * @param units The units of the gain parameter.\n */\nexport class Gain<Type extends Unit = GainFactor> extends ToneAudioNode<GainOptions> {\n\n\tname = \"Gain\";\n\n\t/**\n\t *  The gain parameter of the gain node.\n\t */\n\treadonly gain: Param<Type>;\n\n\t/**\n\t * The wrapped GainNode.\n\t */\n\tprivate _gainNode: GainNode = this.context.createGain();\n\n\t// input = output\n\treadonly input: GainNode = this._gainNode;\n\treadonly output: GainNode = this._gainNode;\n\n\t/**\n\t * Add all of the gain nodes\n\t */\n\tprotected _internalChannels: AudioNode[] = [this._gainNode];\n\n\tconstructor(gain?: GainFactor, units?: Unit);\n\tconstructor(options?: Partial<GainOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n\t\tconst options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n\n\t\tthis.gain = new Param({\n\t\t\tcontext : this.context,\n\t\t\tconvert : options.convert,\n\t\t\tparam : this._gainNode.gain,\n\t\t\tunits : options.units,\n\t\t\tvalue : options.gain,\n\t\t});\n\t\treadOnly(this, \"gain\");\n\t}\n\n\tstatic getDefaults(): GainOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert : true,\n\t\t\tgain : 1,\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tunits : \"gain\" as UnitName,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { version } from \"../version\";\nimport { Context } from \"./context/Context\";\n\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext: Context;\n\n// @ts-ignore\nglobalContext = window.TONE_CONTEXT;\n\n/**\n * Returns the default system-wide AudioContext\n */\nexport function getContext(): Context {\n\tif (!globalContext) {\n\t\tsetContext(new Context());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n */\nexport function setContext(context: Context): void {\n\tglobalContext = context;\n\tcontext.initialize();\n\t// @ts-ignore\n\twindow.TONE_CONTEXT = context;\n}\n\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * document.querySelector('#playbutton').addEventListener('click', () => Tone.start())\n */\nexport function start(): Promise <void> {\n\treturn globalContext.resume();\n}\n\n/**\n * Log Tone.js + version in the console.\n */\nif (!this.TONE_SILENCE_LOGGING) {\n\tlet prefix = \"v\";\n\t// @ts-ignore\n\tif (version === \"dev\") {\n\t\tprefix = \"\";\n\t}\n\tconst printString = ` * Tone.js ${prefix}${version} * `;\n\t// tslint:disable-next-line: no-console\n\tconsole.log(`%c${printString}`, \"background: #000; color: #fff\");\n}\n","import { AbstractParam } from \"../core/context/AbstractParam\";\nimport { Param } from \"../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\n\nexport interface SignalOptions<Type> extends ToneAudioNodeOptions {\n\tvalue: Type;\n\tunits: UnitName;\n\tconvert: boolean;\n}\n\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *  @param value Initial value of the signal\n *  @param units unit The units the signal is in.\n * @example\n * const signal = new Tone.Signal(10);\n */\nexport class Signal<Type extends Unit = number> extends ToneAudioNode<SignalOptions<any>>\nimplements AbstractParam<Type> {\n\n\tname = \"Signal\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection.\n\t */\n\treadonly override: boolean = true;\n\n\t/**\n\t * The constant source node which generates the signal\n\t */\n\tprivate _constantSource: ConstantSourceNode = this.context.createConstantSource();\n\treadonly output: OutputNode = this._constantSource;\n\tprotected _param: Param<Type>;\n\treadonly input: InputNode;\n\tprotected _internalChannels = [this._constantSource];\n\n\tconstructor(value?: Type, units?: UnitName);\n\tconstructor(options?: Partial<SignalOptions<Type>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n\n\t\tconst options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]) as SignalOptions<Type>;\n\n\t\tthis._constantSource.start(0);\n\t\tthis.input = this._param = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._constantSource.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.value,\n\t\t});\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannelCount: 1,\n\t\t\tchannelCountMode: \"explicit\",\n\t\t\tchannelInterpretation: \"discrete\",\n\t\t\tconvert: true,\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tunits: \"number\" as UnitName,\n\t\t\tvalue: 0,\n\t\t}) as SignalOptions<any>;\n\t}\n\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// ABSTRACT PARAM INTERFACE\n\t// just a proxy for the ConstantSourceNode's offset AudioParam\n\t// all docs are generated from AbstractParam.ts\n\t///////////////////////////////////////////////////////////////////////////\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.setValueAtTime(value, time);\n\t\treturn this;\n\t}\n\tgetValueAtTime(time: Time): Type {\n\t\treturn this._param.getValueAtTime(time);\n\t}\n\tsetRampPoint(time: Time): this {\n\t\tthis._param.setRampPoint(time);\n\t\treturn this;\n\t}\n\tlinearRampToValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.linearRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampToValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.exponentialRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.exponentialRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\tlinearRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.linearRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\ttargetRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.targetRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\texponentialApproachValueAtTime(value: Type, time: Time, rampTime: Time): this {\n\t\tthis._param.exponentialApproachValueAtTime(value, time, rampTime);\n\t\treturn this;\n\t}\n\tsetTargetAtTime(value: Type, startTime: Time, timeConstant: number): this {\n\t\tthis._param.setTargetAtTime(value, startTime, timeConstant);\n\t\treturn this;\n\t}\n\tsetValueCurveAtTime(values: Type[], startTime: Time, duration: Time, scaling?: number): this {\n\t\tthis._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\t\treturn this;\n\t}\n\tcancelScheduledValues(time: Time): this {\n\t\tthis._param.cancelScheduledValues(time);\n\t\treturn this;\n\t}\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tthis._param.cancelAndHoldAtTime(time);\n\t\treturn this;\n\t}\n\trampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.rampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\n\tget value(): Type {\n\t\treturn this._param.value;\n\t}\n\tset value(value: Type) {\n\t\tthis._param.value = value;\n\t}\n\n\tget convert(): boolean {\n\t\treturn this._param.convert;\n\t}\n\tset convert(convert: boolean) {\n\t\tthis._param.convert = convert;\n\t}\n\n\tget units(): UnitName {\n\t\treturn this._param.units;\n\t}\n\n\tget overridden(): boolean {\n\t\treturn this._param.overridden;\n\t}\n\tset overridden(overridden: boolean) {\n\t\tthis._param.overridden = overridden;\n\t}\n\n\tget maxValue(): number {\n\t\treturn this._param.maxValue;\n\t}\n\tget minValue(): number {\n\t\treturn this._param.minValue;\n\t}\n}\n\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(signal: OutputNode, destination: InputNode, outputNum?: number, inputNum?: number): void {\n\tif (destination instanceof Param || destination instanceof AudioParam ||\n\t\t(destination instanceof Signal && destination.override)) {\n\t\t// cancel changes\n\t\tdestination.cancelScheduledValues(0);\n\t\t// reset the value\n\t\tdestination.setValueAtTime(0, 0);\n\t\t// mark the value as overridden\n\t\tif (destination instanceof Signal) {\n\t\t\tdestination.overridden = true;\n\t\t}\n\t}\n\tconnect(signal, destination, outputNum, inputNum);\n}\n","import { Volume } from \"../component/channel/Volume\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp, readOnly } from \"../core/util/Interface\";\nimport { PlaybackState, StateTimeline, StateTimelineEvent } from \"../core/util/StateTimeline\";\nimport { isUndef } from \"../core/util/TypeCheck\";\n\nexport interface SourceOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  @class  Base class for sources. Sources have start/stop methods\n *          and the ability to be synced to the\n *          start/stop of this.context.transport.\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n *  @example\n * //Multiple state change events can be chained together,\n * //but must be set in the correct order and with ascending times\n *\n * // OK\n * state.start().stop(\"+0.2\");\n * // AND\n * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n *\n * // BAD\n * state.stop(\"+0.2\").start();\n * // OR\n * state.start(\"+0.3\").stop(\"+0.2\");\n *\n */\nexport abstract class Source<Options extends SourceOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The output volume node\n\t *  @type  {Tone.Volume}\n\t *  @private\n\t */\n\tprivate _volume: Volume = new Volume({\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * The output note\n\t */\n\toutput = this._volume;\n\tprotected _internalChannels = [this.output];\n\n\t/**\n\t * There is no input\n\t */\n\tinput = undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * source.volume.value = -6;\n\t */\n\tvolume = this._volume.volume;\n\n\t/**\n\t * \tKeep track of the scheduled state.\n\t *  @type {Tone.StateTimeline}\n\t *  @private\n\t */\n\tprotected _state: StateTimeline = new StateTimeline(\"stopped\");\n\n\t/**\n\t *  The synced `start` callback function from the transport\n\t *  @type {Function}\n\t *  @private\n\t */\n\tprivate _synced = false;\n\n\t/**\n\t *  Keep track of all of the scheduled event ids\n\t */\n\tprivate _scheduled: number[] = [];\n\n\t/**\n\t * Placeholder functions for syncing/unsyncing to transport\n\t */\n\tprivate _syncedStart: (time: Seconds, offset: Seconds) => void = noOp;\n\tprivate _syncedStop: (time: Seconds) => void = noOp;\n\n\tconstructor(options: Partial<SourceOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n\n\t\treadOnly(this, \"volume\");\n\t\tthis._state.memory = 100;\n\t\tthis.volume.value = options.volume;\n\t\t// set mute initially\n\t\tthis.mute = options.mute;\n\n\t}\n\n\tstatic getDefaults(): SourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t */\n\tget state(): PlaybackState {\n\t\tif (this._synced) {\n\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\treturn this._state.getValueAtTime(this.context.transport.seconds);\n\t\t\t} else {\n\t\t\t\treturn \"stopped\";\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._state.getValueAtTime(this.now());\n\t\t}\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute: boolean) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t// overwrite these functions\n\tprotected abstract _start(time: Time, offset?: Time, duration?: Time): void;\n\tprotected abstract _stop(time: Time): void;\n\tabstract restart(time: Time, offset?: Time, duration?: Time): this;\n\n\t/**\n\t *  Start the source at the specified time. If no time is given,\n\t *  start the source now.\n\t *  @param  {Time} [time=now] When the source should be started.\n\t *  @returns {Source} this\n\t *  @example\n\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tif (isUndef(time) && this._synced) {\n\t\t\ttime = this.context.transport.seconds;\n\t\t} else {\n\t\t\ttime = this.toSeconds(time);\n\t\t\ttime = Math.max(time, this.context.currentTime);\n\t\t}\n\t\t// if it's started, stop it and restart it\n\t\tif (this._state.getValueAtTime(time) === \"started\") {\n\t\t\tthis._state.cancel(time);\n\t\t\tthis._state.setStateAtTime(\"started\", time);\n\t\t\tthis.restart(time, offset, duration);\n\t\t} else {\n\t\t\tthis._state.setStateAtTime(\"started\", time);\n\t\t\tif (this._synced) {\n\t\t\t\t// add the offset time to the event\n\t\t\t\tconst event = this._state.get(time);\n\t\t\t\tif (event) {\n\t\t\t\t\tevent.offset = this.toSeconds(defaultArg(offset, 0));\n\t\t\t\t\tevent.duration = this.toSeconds(duration);\n\t\t\t\t}\n\t\t\t\tconst sched = this.context.transport.schedule(t => {\n\t\t\t\t\tthis._start(t, offset, duration);\n\t\t\t\t}, time);\n\t\t\t\tthis._scheduled.push(sched);\n\n\t\t\t\t// if it's already started\n\t\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\t\tthis._syncedStart(this.now(), this.context.transport.seconds);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._start.apply(this, arguments);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the source at the specified time. If no time is given,\n\t *  stop the source now.\n\t *  @param  {Time} [time=now] When the source should be stopped.\n\t *  @returns {Source} this\n\t *  @example\n\t * source.stop(); // stops the source immediately\n\t */\n\tstop(time?: Time): this {\n\t\tif (isUndef(time) && this._synced) {\n\t\t\ttime = this.context.transport.seconds;\n\t\t} else {\n\t\t\ttime = this.toSeconds(time);\n\t\t\ttime = Math.max(time, this.context.currentTime);\n\t\t}\n\t\tif (!this._synced) {\n\t\t\tthis._stop.apply(this, arguments);\n\t\t} else {\n\t\t\tconst sched = this.context.transport.schedule(this._stop.bind(this), time);\n\t\t\tthis._scheduled.push(sched);\n\t\t}\n\t\tthis._state.cancel(time);\n\t\tthis._state.setStateAtTime(\"stopped\", time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Sync the source to the Transport so that all subsequent\n\t *  calls to `start` and `stop` are synced to the TransportTime\n\t *  instead of the AudioContext time.\n\t *\n\t * @example\n\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * source.sync().start(0).stop(0.3);\n\t * //start the transport.\n\t * this.context.transport.start();\n\t *\n\t * @example\n\t * //start the transport with an offset and the sync'ed sources\n\t * //will start in the correct position\n\t * source.sync().start(0.1);\n\t * //the source will be invoked with an offset of 0.4 = (0.5 - 0.1)\n\t * this.context.transport.start(\"+0.5\", 0.5);\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncedStart = (time, offset) => {\n\t\t\t\tif (offset > 0) {\n\t\t\t\t\t// get the playback state at that time\n\t\t\t\t\tconst stateEvent = this._state.get(offset);\n\t\t\t\t\t// listen for start events which may occur in the middle of the sync'ed time\n\t\t\t\t\tif (stateEvent && stateEvent.state === \"started\" && stateEvent.time !== offset) {\n\t\t\t\t\t\t// get the offset\n\t\t\t\t\t\tconst startOffset = offset - this.toSeconds(stateEvent.time);\n\t\t\t\t\t\tlet duration;\n\t\t\t\t\t\tif (stateEvent.duration) {\n\t\t\t\t\t\t\tduration = this.toSeconds(stateEvent.duration) - startOffset;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._syncedStop = time => {\n\t\t\t\tconst seconds = this.context.transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));\n\t\t\t\tif (this._state.getValueAtTime(seconds) === \"started\") {\n\t\t\t\t\tthis._stop(time);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.context.transport.on(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"loopStart\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"loopEnd\", this._syncedStop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsync the source to the Transport. See Source.sync\n\t */\n\tunsync(): this {\n\t\tif (this._synced) {\n\t\t\tthis.context.transport.off(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"loopEnd\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.off(\"loopStart\", this._syncedStart);\n\t\t}\n\t\tthis._synced = false;\n\t\t// clear all of the scheduled ids\n\t\tthis._scheduled.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduled = [];\n\t\tthis._state.cancel(0);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tthis.unsync();\n\t\tthis._volume.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n","import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"./Defaults\";\n\ntype TimelineSearchParam = \"ticks\" | \"time\";\n\n/**\n * The options object for Timeline\n */\ninterface TimelineOptions {\n\tmemory: number;\n}\n\n/**\n * An event must have a time number\n */\nexport interface TimelineEvent {\n\ttime: number;\n}\n\n/**\n *  @class A Timeline class for scheduling and maintaining state\n *         along a timeline. All events must have a \"time\" property.\n *         Internally, events are stored in time order for fast\n *         retrieval.\n *  @param memory The number of previous events that are retained.\n */\nexport class Timeline<GenericEvent extends TimelineEvent> extends Tone {\n\n\tname = \"Timeline\";\n\n\t/**\n\t *  The memory of the timeline, i.e.\n\t *  how many events in the past it will retain\n\t */\n\tmemory: number;\n\n\t/**\n\t * The array of scheduled timeline events\n\t */\n\tprotected _timeline: GenericEvent[] = [];\n\n\tconstructor(options?: Partial<TimelineOptions>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(memory?: number);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Timeline.getDefaults(), arguments, [\"memory\"]);\n\n\t\tthis.memory = options.memory;\n\t}\n\n\tstatic getDefaults(): TimelineOptions {\n\t\treturn {\n\t\t\tmemory: Infinity,\n\t\t};\n\t}\n\n\t/**\n\t *  The number of items in the timeline.\n\t */\n\tget length(): number {\n\t\treturn this._timeline.length;\n\t}\n\n\t/**\n\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t *  @param event  The event object to insert into the timeline.\n\t */\n\tadd(event: GenericEvent): Timeline<GenericEvent> {\n\t\t// the event needs to have a time attribute\n\t\tthis.assert(Reflect.has(event, \"time\"), \"Timeline: events must have a time attribute\");\n\t\tevent.time = event.time.valueOf();\n\t\tconst index = this._search(event.time);\n\t\tthis._timeline.splice(index + 1, 0, event);\n\t\t// if the length is more than the memory, remove the previous ones\n\t\tif (this.length > this.memory) {\n\t\t\tconst diff = this.length - this.memory;\n\t\t\tthis._timeline.splice(0, diff);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  {Object}  event  The event object to remove from the list.\n\t *  @returns {Timeline} this\n\t */\n\tremove(event: GenericEvent): Timeline<GenericEvent> {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index !== -1) {\n\t\t\tthis._timeline.splice(index, 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the nearest event whose time is less than or equal to the given time.\n\t *  @param  time  The time to query.\n\t */\n\tget(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index !== -1) {\n\t\t\treturn this._timeline[index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Return the first event in the timeline without removing it\n\t *  @returns {Object} The first event object\n\t */\n\tpeek(): GenericEvent | undefined {\n\t\treturn this._timeline[0];\n\t}\n\n\t/**\n\t *  Return the first event in the timeline and remove it\n\t */\n\tshift(): GenericEvent | undefined {\n\t\treturn this._timeline.shift();\n\t}\n\n\t/**\n\t *  Get the event which is scheduled after the given time.\n\t *  @param  time  The time to query.\n\t */\n\tgetAfter(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index + 1 < this._timeline.length) {\n\t\t\treturn this._timeline[index + 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Get the event before the event at the given time.\n\t *  @param  time  The time to query.\n\t */\n\tgetBefore(time: number): GenericEvent | null {\n\t\tconst len = this._timeline.length;\n\t\t// if it's after the last item, return the last item\n\t\tif (len > 0 && this._timeline[len - 1].time < time) {\n\t\t\treturn this._timeline[len - 1];\n\t\t}\n\t\tconst index = this._search(time);\n\t\tif (index - 1 >= 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Cancel events at and after the given time\n\t *  @param  time  The time to query.\n\t */\n\tcancel(after: number): Timeline<GenericEvent> {\n\t\tif (this._timeline.length > 1) {\n\t\t\tlet index = this._search(after);\n\t\t\tif (index >= 0) {\n\t\t\t\tif (this._timeline[index].time === after) {\n\t\t\t\t\t// get the first item with that time\n\t\t\t\t\tfor (let i = index; i >= 0; i--) {\n\t\t\t\t\t\tif (this._timeline[i].time === after) {\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index);\n\t\t\t\t} else {\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t} else if (this._timeline.length === 1) {\n\t\t\t// the first item's time\n\t\t\tif (this._timeline[0].time >= after) {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel events before or equal to the given time.\n\t *  @param  {Number}  time  The time to cancel before.\n\t *  @returns {Timeline} this\n\t */\n\tcancelBefore(time): Timeline<GenericEvent> {\n\t\tconst index = this._search(time);\n\t\tif (index >= 0) {\n\t\t\tthis._timeline = this._timeline.slice(index + 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the previous event if there is one. null otherwise\n\t * @param  {Object} event The event to find the previous one of\n\t * @return {Object}       The event right before the given event\n\t */\n\tpreviousEvent(event): GenericEvent | null {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index > 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Does a binary search on the timeline array and returns the\n\t *  nearest event index whose time is after or equal to the given time.\n\t *  If a time is searched before the first index in the timeline, -1 is returned.\n\t *  If the time is after the end, the index of the last item is returned.\n\t *  @param  time\n\t */\n\tprotected _search(time: number, param: TimelineSearchParam = \"time\"): number {\n\t\tif (this._timeline.length === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet beginning = 0;\n\t\tconst len = this._timeline.length;\n\t\tlet end = len;\n\t\tif (len > 0 && this._timeline[len - 1][param] <= time) {\n\t\t\treturn len - 1;\n\t\t}\n\t\twhile (beginning < end) {\n\t\t\t// calculate the midpoint for roughly equal partition\n\t\t\tlet midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\t\tconst event = this._timeline[midPoint];\n\t\t\tconst nextEvent = this._timeline[midPoint + 1];\n\t\t\tif (event[param] === time) {\n\t\t\t\t// choose the last one that has the same time\n\t\t\t\tfor (let i = midPoint; i < this._timeline.length; i++) {\n\t\t\t\t\tconst testEvent = this._timeline[i];\n\t\t\t\t\tif (testEvent[param] === time) {\n\t\t\t\t\t\tmidPoint = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[param] < time && nextEvent[param] > time) {\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[param] > time) {\n\t\t\t\t// search lower\n\t\t\t\tend = midPoint;\n\t\t\t} else {\n\t\t\t\t// search upper\n\t\t\t\tbeginning = midPoint + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t *  Internal iterator. Applies extra safety checks for\n\t *  removing items from the array.\n\t */\n\tprivate _iterate(\n\t\tcallback: (event: GenericEvent) => void,\n\t\tlowerBound = 0, upperBound = this._timeline.length - 1,\n\t): void {\n\t\tthis._timeline.slice(lowerBound, upperBound + 1).forEach(callback);\n\t}\n\n\t/**\n\t *  Iterate over everything in the array\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\tthis._iterate(callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at or before the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachBefore(time, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array after the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAfter(time, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst lowerBound = this._search(time);\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array between the startTime and endTime.\n\t *  The timerange is inclusive of the startTime, but exclusive of the endTime.\n\t *  range = [startTime, endTime).\n\t *  @param  startTime The time to check if items are before\n\t *  @param  endTime The end of the test interval.\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachBetween(startTime: number, endTime: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\tlet lowerBound = this._search(startTime);\n\t\tlet upperBound = this._search(endTime);\n\t\tif (lowerBound !== -1 && upperBound !== -1) {\n\t\t\tif (this._timeline[lowerBound].time !== startTime) {\n\t\t\t\tlowerBound += 1;\n\t\t\t}\n\t\t\t// exclusive of the end time\n\t\t\tif (this._timeline[upperBound].time === endTime) {\n\t\t\t\tupperBound -= 1;\n\t\t\t}\n\t\t\tthis._iterate(callback, lowerBound, upperBound);\n\t\t} else if (lowerBound === -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at or after the given time. Similar to\n\t *  forEachAfter, but includes the item(s) at the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tlet lowerBound = this._search(time);\n\t\t// work backwards until the event time is less than time\n\t\twhile (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t\t\tlowerBound--;\n\t\t}\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at the given time\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(event => {\n\t\t\t\tif (event.time === time) {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t}, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tthis._timeline = [];\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source, SourceOptions } from \"../Source\";\nimport { ToneOscillatorNode } from \"./OscillatorNode\";\n// type OmniOscillatorSourceType = import(\"./OmniOscillator\").OmniOscillatorSourceType;\n\nexport type ToneOscillatorBaseType = OscillatorType | \"pulse\" | \"pwm\";\n\nexport type ToneOscillatorType = ToneOscillatorBaseType | string;\n\nexport interface ToneOscillatorOptions extends SourceOptions {\n\ttype: ToneOscillatorType;\n\tfrequency: Frequency;\n\tdetune: Cents;\n\tphase: Degrees;\n\tpartials: number[];\n\tpartialCount: number;\n}\n\n/**\n * All Oscillators share this interface\n */\nexport interface OscillatorInterface {\n\tpartials: number[];\n\tpartialCount: number;\n\tphase: Degrees;\n\treadonly frequency: Signal<Frequency>;\n\treadonly detune: Signal<Cents>;\n\ttype: ToneOscillatorType;\n\tbaseType: ToneOscillatorBaseType;\n\t// sourceType: OmniOscillatorSourceType;\n}\n\n/**\n *  Oscillator supports a number of features including\n *  phase rotation, multiple oscillator types (see Oscillator.type),\n *  and Transport syncing (see Oscillator.syncFrequency).\n *\n *  @param frequency Starting frequency\n *  @param type The oscillator type. Read more about type below.\n *  @example\n * //make and start a 440hz sine tone\n * var osc = new Oscillator(440, \"sine\").toMaster().start();\n */\nexport class Oscillator extends Source<ToneOscillatorOptions> implements OscillatorInterface {\n\n\tname = \"Oscillator\";\n\n\t/**\n\t *  the main oscillator\n\t */\n\tprivate _oscillator: ToneOscillatorNode | null = null;\n\n\t/**\n\t *  The frequency control.\n\t */\n\tfrequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune control signal.\n\t */\n\tdetune: Signal<Cents>;\n\n\t/**\n\t *  the periodic wave\n\t */\n\tprivate _wave?: PeriodicWave;\n\n\t/**\n\t *  The partials of the oscillator\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t *  The number of partials to limit or extend the periodic wave by\n\t */\n\tprivate _partialCount: number;\n\n\t/**\n\t *  the phase of the oscillator between 0 - 360\n\t */\n\tprivate _phase: Radians;\n\n\t/**\n\t *  the type of the oscillator\n\t *  @type {string}\n\t *  @private\n\t */\n\tprivate _type;\n\n\tconstructor(options?: Partial<ToneOscillatorOptions>)\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal<Frequency>({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\tthis.detune = new Signal<Cents>({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, \"detune\");\n\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\t\tthis._phase = options.phase;\n\t\tthis._type = options.type;\n\n\t\tif (options.partialCount && options.type !== \"custom\") {\n\t\t\tthis._type = this.baseType + options.partialCount.toString();\n\t\t}\n\t\tthis.phase = this._phase;\n\t}\n\n\tstatic getDefaults(): ToneOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tpartialCount: 0,\n\t\t\tpartials: [],\n\t\t\tphase: 0,\n\t\t\ttype: \"sine\",\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time?: Time): void {\n\t\tthis.log(\"start\", time);\n\t\t// new oscillator with previous values\n\t\tconst oscillator = new ToneOscillatorNode({\n\t\t\tcontext: this.context,\n\t\t});\n\t\tthis._oscillator = oscillator;\n\t\tif (this._wave) {\n\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t} else {\n\t\t\tthis._oscillator.type = this._type;\n\t\t}\n\t\t// connect the control signal to the oscillator frequency & detune\n\t\tthis._oscillator.connect(this.output);\n\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\tthis.detune.connect(this._oscillator.detune);\n\n\t\t// disconnect onended\n\t\toscillator.onended = () => {\n\t\t\t// defer the callback for the offline context rendering\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.frequency.disconnect(oscillator.frequency);\n\t\t\t\tthis.detune.disconnect(oscillator.detune);\n\t\t\t}, 100);\n\t\t};\n\n\t\t// start the oscillator\n\t\ttime = this.toSeconds(time);\n\t\tthis._oscillator.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tthis.log(\"stop\", time);\n\t\tif (this._oscillator) {\n\t\t\ttime = this.toSeconds(time);\n\t\t\tthis._oscillator.stop(time);\n\t\t}\n\t}\n\n\t/**\n\t * Restart the oscillator. Does not stop the oscillator, but instead\n\t * just cancels any scheduled 'stop' from being invoked.\n\t */\n\trestart(time?: Time): this {\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.cancelStop();\n\t\t}\n\t\tthis._state.cancel(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t *  will also affect the oscillators frequency.\n\t *  @example\n\t * Tone.Transport.bpm.value = 120;\n\t * osc.frequency.value = 440;\n\t * //the ration between the bpm and the frequency will be maintained\n\t * osc.syncFrequency();\n\t * Tone.Transport.bpm.value = 240;\n\t * // the frequency of the oscillator is doubled to 880\n\t */\n\tsyncFrequency(): this {\n\t\tthis.context.transport.syncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsync the oscillator's frequency from the Transport.\n\t *  See Oscillator.syncFrequency\n\t */\n\tunsyncFrequency(): this {\n\t\tthis.context.transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/* tslint:disable */\n\t/**\n\t * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\n\t * setting the first x number of partials of the oscillator. For example: \"sine4\" would\n\t * set be the first 4 partials of the sine wave and \"triangle8\" would set the first\n\t * 8 partials of the triangle wave.\n\t * <br><br>\n\t * Uses PeriodicWave internally even for native types so that it can set the phase.\n\t * PeriodicWave equations are from the\n\t * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).\n\t *\n\t * @memberOf Oscillator#\n\t * @type {string}\n\t * @name type\n\t * @example\n\t * //set it to a square wave\n\t * osc.type = \"square\";\n\t * @example\n\t * //set the first 6 partials of a sawtooth wave\n\t * osc.type = \"sawtooth6\";\n\t */\n\t/* tslint:enable */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tconst isBasicType = [\"sine\", \"square\", \"sawtooth\", \"triangle\"].indexOf(type) !== -1;\n\t\tif (this._phase === 0 && isBasicType) {\n\t\t\tthis._wave = undefined;\n\t\t\tthis._partialCount = 0;\n\t\t\t// just go with the basic approach\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\t// already tested that it's a basic type\n\t\t\t\tthis._oscillator.type = type as OscillatorType;\n\t\t\t}\n\t\t} else {\n\t\t\tconst [real, imag] = this._getRealImaginary(type, this._phase);\n\t\t\tconst periodicWave = this.context.createPeriodicWave(real, imag);\n\t\t\tthis._wave = periodicWave;\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t}\n\t\t}\n\t\tthis._type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._type.replace(this.partialCount, \"\");\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tif (this.partialCount && this._type !== \"custom\" && baseType !== \"custom\") {\n\t\t\tthis.type = baseType + this.partialCount;\n\t\t} else {\n\t\t\tthis.type = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t * @example\n\t * osc.type = 'sine'\n\t * osc.partialCount = 3\n\t * //is equivalent to\n\t * osc.type = 'sine3'\n\t */\n\tget partialCount(): number {\n\t\treturn this._partialCount;\n\t}\n\tset partialCount(p: number) {\n\t\tlet type = this._type;\n\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(this._type);\n\t\tif (partial) {\n\t\t\ttype = partial[1];\n\t\t}\n\t\tif (this._type !== \"custom\") {\n\t\t\tif (p === 0) {\n\t\t\t\tthis.type = type;\n\t\t\t} else {\n\t\t\t\tthis.type = type + p.toString();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Get the object's attributes. Given no arguments get\n\t *  will return all available object properties and their corresponding\n\t *  values.\n\t */\n\tget(): ToneOscillatorOptions {\n\t\tconst values = super.get();\n\t\tif (values.type !== \"custom\") {\n\t\t\tdelete values.partials;\n\t\t}\n\t\treturn values;\n\t}\n\n\t/**\n\t *  Returns the real and imaginary components based\n\t *  on the oscillator type.\n\t *  @returns [real: Float32Array, imaginary: Float32Array]\n\t *  @private\n\t */\n\tprivate _getRealImaginary(type: ToneOscillatorType, phase: Radians): Float32Array[] {\n\t\tconst fftSize = 4096;\n\t\tlet periodicWaveSize = fftSize / 2;\n\n\t\tconst real = new Float32Array(periodicWaveSize);\n\t\tconst imag = new Float32Array(periodicWaveSize);\n\n\t\tlet partialCount = 1;\n\t\tif (type === \"custom\") {\n\t\t\tpartialCount = this._partials.length + 1;\n\t\t\tthis._partialCount = this._partials.length;\n\t\t\tperiodicWaveSize = partialCount;\n\t\t} else {\n\t\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t\t\tif (partial) {\n\t\t\t\tpartialCount = parseInt(partial[2], 10) + 1;\n\t\t\t\tthis._partialCount = parseInt(partial[2], 10);\n\t\t\t\ttype = partial[1];\n\t\t\t\tpartialCount = Math.max(partialCount, 2);\n\t\t\t\tperiodicWaveSize = partialCount;\n\t\t\t} else {\n\t\t\t\tthis._partialCount = 0;\n\t\t\t}\n\t\t\tthis._partials = [];\n\t\t}\n\n\t\t// tslint:disable: no-bitwise\n\t\tfor (let n = 1; n < periodicWaveSize; ++n) {\n\t\t\tconst piFactor = 2 / (n * Math.PI);\n\t\t\tlet b;\n\t\t\tswitch (type) {\n\t\t\t\tcase \"sine\":\n\t\t\t\t\tb = (n <= partialCount) ? 1 : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"square\":\n\t\t\t\t\tb = (n & 1) ? 2 * piFactor : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"sawtooth\":\n\t\t\t\t\tb = piFactor * ((n & 1) ? 1 : -1);\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"triangle\":\n\t\t\t\t\tif (n & 1) {\n\t\t\t\t\t\tb = 2 * (piFactor * piFactor) * ((((n - 1) >> 1) & 1) ? -1 : 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t}\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"custom\":\n\t\t\t\t\tb = this._partials[n - 1];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new TypeError(\"Oscillator: invalid type: \" + type);\n\t\t\t}\n\t\t\tif (b !== 0) {\n\t\t\t\treal[n] = -b * Math.sin(phase * n);\n\t\t\t\timag[n] = b * Math.cos(phase * n);\n\t\t\t} else {\n\t\t\t\treal[n] = 0;\n\t\t\t\timag[n] = 0;\n\t\t\t}\n\t\t}\n\t\treturn [real, imag];\n\t}\n\n\t/**\n\t *  Compute the inverse FFT for a given phase.\n\t */\n\tprivate _inverseFFT(real: Float32Array, imag: Float32Array, phase: Radians): number {\n\t\tlet sum = 0;\n\t\tconst len = real.length;\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tsum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t *  Returns the initial value of the oscillator.\n\t */\n\tprotected _getInitialValue(): AudioRange {\n\t\tconst [real, imag] = this._getRealImaginary(this._type, 0);\n\t\tlet maxValue = 0;\n\t\tconst twoPi = Math.PI * 2;\n\t\t// check for peaks in 8 places\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\tmaxValue = Math.max(this._inverseFFT(real, imag, (i / 8) * twoPi), maxValue);\n\t\t}\n\t\treturn -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t}\n\n\t/**\n\t * The partials of the waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tif (partials.length) {\n\t\t\tthis.type = \"custom\";\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t * @example\n\t * osc.phase = 180; //flips the phase of the oscillator\n\t */\n\tget phase(): Degrees {\n\t\treturn this._phase * (180 / Math.PI);\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase * Math.PI / 180;\n\t\t// reset the type\n\t\tthis.type = this._type;\n\t}\n\n\t/**\n\t *  Dispose and disconnect.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._oscillator !== null) {\n\t\t\tthis._oscillator.dispose();\n\t\t}\n\t\tthis._wave = undefined;\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","/**\n *  Tone.js\n *  @author Yotam Mann\n *  @license http://opensource.org/licenses/MIT MIT License\n *  @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\n// import { getContext } from \"./Global\";\nimport \"./type/Units\";\n\n///////////////////////////////////////////////////////////////////////////\n// \tTONE\n///////////////////////////////////////////////////////////////////////////\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseToneOptions {}\n\n/**\n *  @class  Tone is the base class of all other classes.\n *  @constructor\n */\nexport abstract class Tone {\n\n\t/**\n\t * The version number semver\n\t */\n\tstatic version: string = version;\n\n\t/**\n\t * The name of the class\n\t */\n\tprotected abstract name: string;\n\n\t/**\n\t *  disconnect and dispose.\n\t */\n\tabstract dispose(): this;\n\n\t/**\n\t * Takes a partial options an returns the completed options by filling in the defaults\n\t */\n\tstatic getDefaults(): BaseToneOptions {\n\t\treturn {};\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDEBUGGING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Set this debug flag to log all events that happen in this class.\n\t */\n\tprotected debug: boolean = false;\n\n\t/**\n\t * Prints the outputs to the console log for debugging purposes.\n\t * Prints the contents only if either the object has a property\n\t * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n\t * is set to the name of the class.\n\t * @param args\n\t *  @example\n\t * //prints all logs originating from Tone.OscillatorNode\n\t * Tone.global.TONE_DEBUG_CLASS = \"OscillatorNode\"\n\t */\n\tprotected log(...args): void {\n\t\t// if the object is either set to debug = true\n\t\t// or if there is a string on the Tone.global.with the class name\n\t\t// if (this.debug || this.toString() === global.TONE_DEBUG_CLASS) {\n\t\t// \targs.unshift(this.toString() + \":\");\n\t\t// \t// eslint-disable-next-line no-console\n\t\t// \tconsole.log(...args);\n\t\t// }\n\t}\n\n\t/**\n\t *  Assert that the statement is true, otherwise invoke the error.\n\t *  @param {Boolean} statement\n\t *  @param {String} error The message which is passed into an Error\n\t *  @private\n\t */\n\tprotected assert(statement: boolean, error: string): void {\n\t\tif (!statement) {\n\t\t\tthrow new Error(error);\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDEFAULTS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  If the `given` parameter is undefined, use the `fallback`.\n\t *  If both `given` and `fallback` are object literals, it will\n\t *  return a deep copy which includes all of the parameters from both\n\t *  objects. If a parameter is undefined in given, it will return\n\t *  the fallback property.\n\t *  <br><br>\n\t *  WARNING: if object is self referential, it will go into an an\n\t *  infinite recursive loop.\n\t *  @memberOf Tone\n\t *  @param  {*} given\n\t *  @param  {*} fallback\n\t *  @return {*}\n\t */\n\t// static defaultArg(given, fallback) {\n\t\t// if (isObject(given) && isObject(fallback)) {\n\t\t// \tconst ret = {};\n\t\t// \t// make a deep copy of the given object\n\t\t// \tfor (const givenProp in given) {\n\t\t// \t\tret[givenProp] = Tone.defaultArg(fallback[givenProp], given[givenProp]);\n\t\t// \t}\n\t\t// \tfor (const fallbackProp in fallback) {\n\t\t// \t\tret[fallbackProp] = Tone.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t\t// \t}\n\t\t// \treturn ret;\n\t\t// } else {\n\t\t// \treturn isUndef(given) ? fallback : given;\n\t\t// }\n\t// }\n\n\t// protected options(argsArray: IArguments, keys: string[]): object {\n\t// \tlet options: any = {};\n\t// \tconst args = Array.from(argsArray);\n\t// \tif (args[0] instanceof BaseAudioContext) {\n\t// \t\toptions.context = args.shift();\n\t// \t}\n\t// \tif (args.length === 1 && isObject(args[0])) {\n\t// \t\toptions = Object.assign(options, args[0]);\n\t// \t} else {\n\t// \t\tfor (let i = 0; i < keys.length; i++) {\n\t// \t\t\tif (isDefined(args[i])) {\n\t// \t\t\t\toptions[keys[i]] = args[i];\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \treturn deepMerge(this.getDefaults(), options);\n\t// }\n\n\t/**\n\t * Convert the class to a string\n\t * @example\n\t * const osc = new Oscillator()\n\t * osc.toString() // \"Oscillator\"\n\t */\n\ttoString(): string {\n\t\treturn this.name;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tSTATIC\n\t///////////////////////////////////////////////////////////////////////////\n\n\t// static get context(): import(\"./context/Context\").Context {\n\t// \treturn getContext();\n\t// }\n\n\t// static now(): Seconds {\n\t// \treturn Tone.context.now();\n\t// }\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport \"../type/Units\";\nimport { getDefaultsFromInstance, optionsFromArguments } from \"../util/Defaults\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { Context } from \"./Context\";\n\n/**\n * A unit which process audio\n */\nexport interface ToneWithContextOptions {\n\tcontext: Context;\n}\n\n/**\n * The Base class for all nodes that have an AudioContext.\n */\nexport abstract class ToneWithContext<Options extends ToneWithContextOptions> extends Tone {\n\n\t/**\n\t * The context belonging to the node.\n\t */\n\treadonly context: Context;\n\n\t/**\n\t * The default context to use if no AudioContext is passed in to the constructor\n\t */\n\treadonly defaultContext?: Context;\n\n\tconstructor(context?: Context | Partial<ToneWithContextOptions>) {\n\t\tconst options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n\t\tsuper();\n\t\tif (this.defaultContext) {\n\t\t\tthis.context = this.defaultContext;\n\t\t} else {\n\t\t\tthis.context = options.context;\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneWithContextOptions {\n\t\treturn {\n\t\t\tcontext: getContext(),\n\t\t};\n\t}\n\n\t/**\n\t * Return the current time of the Context clock plus the lookAhead.\n\t */\n\tnow(): Seconds {\n\t\treturn this.context.currentTime + this.context.lookAhead;\n\t}\n\n\t/**\n\t * Return the current time of the Context clock without any lookAhead.\n\t */\n\timmediate(): Seconds {\n\t\treturn this.context.currentTime;\n\t}\n\n\t/**\n\t * The duration in seconds of one sample.\n\t */\n\tget sampleTime(): Seconds {\n\t\treturn 1 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * The number of seconds of 1 processing block (128 samples)\n\t */\n\tget blockTime(): Seconds {\n\t\treturn 128 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * Convert the incoming time to seconds\n\t */\n\ttoSeconds(time: Time): Seconds {\n\t\treturn new TimeClass(this.context, time).toSeconds();\n\t}\n\n\t/**\n\t * Convert the input to a frequency number\n\t */\n\ttoFrequency(freq: Frequency): Hertz {\n\t\treturn new FrequencyClass(this.context, freq).toFrequency();\n\t}\n\n\t/**\n\t * Convert the input time into ticks\n\t */\n\ttoTicks(time: Time): Ticks {\n\t\treturn new TransportTimeClass(this.context, time).toTicks();\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tGET/SET\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Get the object's attributes. Given no arguments get\n\t * will return all available object properties and their corresponding\n\t * values. Pass in a single attribute to retrieve or an array\n\t * of attributes. The attribute strings can also include a \".\"\n\t * to access deeper properties.\n\t * @param params the parameters to get, otherwise will return all available.\n\t * @example\n\t * osc.get();\n\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t * @example\n\t * osc.get(\"type\");\n\t * //returns { \"type\" : \"sine\"}\n\t * @example\n\t * //use dot notation to access deep properties\n\t * synth.get([\"envelope.attack\", \"envelope.release\"]);\n\t * //returns {\"envelope\" : {\"attack\" : 0.2, \"release\" : 0.4}}\n\t */\n\tget(): Options {\n\t\tconst defaults = getDefaultsFromInstance(this) as Options;\n\t\tObject.keys(defaults).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute)) {\n\t\t\t\tconst member = this[attribute];\n\t\t\t\tif (isDefined(member) && isDefined(member.value)) {\n\t\t\t\t\tdefaults[attribute] = member.value;\n\t\t\t\t} else if (member instanceof ToneWithContext) {\n\t\t\t\t\tdefaults[attribute] = member.get();\n\t\t\t\t} else {\n\t\t\t\t\tdefaults[attribute] = member;\n\t\t\t\t}\n\t\t\t}\n\n\t\t});\n\t\treturn defaults;\n\t}\n\n\t/**\n\t * Set the parameters at once. Either pass in an\n\t * object mapping parameters to values, or to set a\n\t * single parameter, by passing in a string and value.\n\t * The last argument is an optional ramp time which\n\t * will ramp any signal values to their destination value\n\t * over the duration of the rampTime.\n\t * @param  params\n\t * @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : \"highpass\"\n\t * });\n\t */\n\tset(props: Partial<Options>): this {\n\t\tObject.keys(props).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute) && isDefined(this[attribute])) {\n\t\t\t\tif (isDefined(this[attribute].value)) {\n\t\t\t\t\tthis[attribute].value = props[attribute];\n\t\t\t\t} else if (this[attribute] instanceof ToneWithContext) {\n\t\t\t\t\tthis[attribute].set(props[attribute]);\n\t\t\t\t} else {\n\t\t\t\t\tthis[attribute] = props[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n","import { AbstractParam } from \"../context/AbstractParam\";\nimport { dbToGain, gainToDb } from \"../type/Conversions\";\nimport \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\n\nexport interface ParamOptions extends ToneWithContextOptions {\n\tunits: UnitName;\n\tvalue?: any;\n\tparam: AudioParam;\n\tconvert: boolean;\n}\n\n/**\n * the possible automation types\n */\ntype AutomationType = \"linear\" | \"exponential\" | \"setValue\" | \"setTarget\" | \"cancel\";\n\n/**\n * The events on the automation\n */\nexport interface AutomationEvent {\n\ttype: AutomationType;\n\ttime: number;\n\tvalue: number;\n\tconstant?: number;\n}\n\n/**\n *  Param wraps the native Web Audio's AudioParam to provide\n * additional unit conversion functionality. It also\n * serves as a base-class for classes which have a single,\n * automatable parameter.\n */\nexport class Param<Type extends Unit = number>\nextends ToneWithContext<ParamOptions>\nimplements AbstractParam<Type> {\n\n\tname = \"Param\";\n\n\tstatic getDefaults(): ParamOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t} as ParamOptions);\n\t}\n\n\t/**\n\t * The input connection\n\t */\n\treadonly input: AudioParam;\n\treadonly units: UnitName;\n\tconvert: boolean;\n\toverridden: boolean = false;\n\n\t/**\n\t * The timeline which tracks all of the automations.\n\t */\n\tprotected _events: Timeline<AutomationEvent>;\n\n\t/**\n\t *  The native parameter to control\n\t */\n\tprotected _param: AudioParam;\n\n\t/**\n\t *  The default value before anything is assigned\n\t */\n\tprotected _initialValue: number;\n\n\t/**\n\t *  The minimum output value\n\t */\n\tprivate _minOutput = 1e-5;\n\n\tconstructor(param: AudioParam, units?: Unit, convert?: boolean);\n\tconstructor(options: Partial<ParamOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]));\n\n\t\tconst options = optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]);\n\n\t\tthis.assert(isDefined(options.param) && options.param instanceof AudioParam, \"param must be an AudioParam\");\n\n\t\t// initialize\n\t\tthis._param = this.input = options.param;\n\t\tthis._events = new Timeline<AutomationEvent>(1000);\n\t\tthis._initialValue = this._param.value;\n\t\tthis.units = options.units;\n\t\tthis.convert = options.convert;\n\n\t\t// if the value is defined, set it immediately\n\t\tif (isDefined(options.value)) {\n\t\t\tthis.setValueAtTime(options.value, 0);\n\t\t}\n\t}\n\n\tget value(): Type {\n\t\tconst now = this.now();\n\t\treturn this.getValueAtTime(now);\n\t}\n\tset value(value: Type) {\n\t\tthis._initialValue = this._fromType(value);\n\t\tthis.cancelScheduledValues(this.now());\n\t\tthis.setValueAtTime(value, this.now());\n\t}\n\n\tget minValue(): number {\n\t\tif (this.units === \"time\" || this.units === \"frequency\" ||\n\t\t\tthis.units === \"normalRange\" || this.units === \"positive\" ||\n\t\t\tthis.units === \"transportTime\" || this.units === \"ticks\" ||\n\t\t\tthis.units === \"bpm\" || this.units === \"hertz\" || this.units === \"samples\") {\n\t\t\treturn 0;\n\t\t} else if (this.units === \"audioRange\") {\n\t\t\treturn -1;\n\t\t} else if (this.units === \"decibels\") {\n\t\t\treturn -Infinity;\n\t\t} else {\n\t\t\treturn this._param.minValue;\n\t\t}\n\t}\n\n\tget maxValue(): number {\n\t\tif (this.units === \"normalRange\" ||\n\t\t\tthis.units === \"audioRange\") {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn this._param.maxValue;\n\t\t}\n\t}\n\n\t/**\n\t * Type guard based on the unit name\n\t */\n\tprivate _is<T>(arg: any, type: UnitName): arg is T {\n\t\treturn this.units === type;\n\t}\n\n\t/**\n\t *  Convert the given value from the type specified by Param.units\n\t *  into the destination value (such as Gain or Frequency).\n\t */\n\tprotected _fromType(val: Type): number {\n\t\tif (this.convert && !this.overridden) {\n\t\t\tif (this._is<Time>(val, \"time\")) {\n\t\t\t\treturn this.toSeconds(val);\n\t\t\t} else if (this._is<Decibels>(val, \"decibels\")) {\n\t\t\t\treturn dbToGain(val);\n\t\t\t} else if (this._is<Frequency>(val, \"frequency\")) {\n\t\t\t\treturn this.toFrequency(val);\n\t\t\t} else if (this._is<NormalRange>(val, \"normalRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, 0), 1);\n\t\t\t} else if (this._is<AudioRange>(val, \"audioRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, -1), 1);\n\t\t\t} else if (this._is<Positive>(val, \"positive\")) {\n\t\t\t\treturn Math.max(val, 0);\n\t\t\t} else if (this._is<number>(val, \"number\")) {\n\t\t\t\treturn val;\n\t\t\t} else {\n\t\t\t\treturn val as number;\n\t\t\t}\n\t\t} else {\n\t\t\treturn val as number;\n\t\t}\n\t}\n\n\t/**\n\t * Convert the parameters value into the units specified by Param.units.\n\t */\n\tprotected _toType(val: number): Type {\n\t\tif (this.convert && this.units === \"decibels\") {\n\t\t\treturn gainToDb(val) as Type;\n\t\t} else {\n\t\t\treturn val as Type;\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// ABSTRACT PARAM INTERFACE\n\t// all docs are generated from ParamInterface.ts\n\t///////////////////////////////////////////////////////////////////////////\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tconst numericValue = this._fromType(value);\n\t\tthis._events.add({\n\t\t\ttime,\n\t\t\ttype: \"setValue\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(\"setValue\", value, time);\n\t\tthis._param.setValueAtTime(numericValue, time);\n\t\treturn this;\n\t}\n\n\tgetValueAtTime(time: Time): Type {\n\t\tconst computedTime = Math.max(this.toSeconds(time), 0);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tconst before = this._events.get(computedTime);\n\t\tlet value = this._initialValue;\n\t\t// if it was set by\n\t\tif (before === null) {\n\t\t\tvalue = this._initialValue;\n\t\t} else if (before.type === \"setTarget\" && (after === null || after.type === \"setValue\")) {\n\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\tlet previousVal;\n\t\t\tif (previous === null) {\n\t\t\t\tpreviousVal = this._initialValue;\n\t\t\t} else {\n\t\t\t\tpreviousVal = previous.value;\n\t\t\t}\n\t\t\tif (isDefined(before.constant)) {\n\t\t\t\tvalue = this._exponentialApproach(before.time, previousVal, before.value, before.constant, computedTime);\n\t\t\t}\n\t\t} else if (after === null) {\n\t\t\tvalue = before.value;\n\t\t} else if (after.type === \"linear\" || after.type === \"exponential\") {\n\t\t\tlet beforeValue = before.value;\n\t\t\tif (before.type === \"setTarget\") {\n\t\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\t\tif (previous === null) {\n\t\t\t\t\tbeforeValue = this._initialValue;\n\t\t\t\t} else {\n\t\t\t\t\tbeforeValue = previous.value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (after.type === \"linear\") {\n\t\t\t\tvalue = this._linearInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t} else {\n\t\t\t\tvalue = this._exponentialInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = before.value;\n\t\t}\n\t\treturn this._toType(value);\n\t}\n\n\tsetRampPoint(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tlet currentVal = this.getValueAtTime(time);\n\t\tthis.cancelAndHoldAtTime(time);\n\t\tif (this._fromType(currentVal) === 0) {\n\t\t\tcurrentVal = this._toType(this._minOutput);\n\t\t}\n\t\tthis.setValueAtTime(currentVal, time);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: Type, endTime: Time): this {\n\t\tconst numericValue = this._fromType(value);\n\t\tendTime = this.toSeconds(endTime);\n\t\tthis._events.add({\n\t\t\ttime: endTime,\n\t\t\ttype: \"linear\",\n\t\t\tvalue : numericValue,\n\t\t});\n\t\tthis.log(\"linear\", value, endTime);\n\t\tthis._param.linearRampToValueAtTime(numericValue, endTime);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: Type, endTime: Time): this {\n\t\tlet numericValue = this._fromType(value);\n\t\tnumericValue = Math.max(this._minOutput, numericValue);\n\t\tendTime = this.toSeconds(endTime);\n\t\t// store the event\n\t\tthis._events.add({\n\t\t\ttime: endTime,\n\t\t\ttype: \"exponential\",\n\t\t\tvalue : numericValue,\n\t\t});\n\t\tthis.log(\"exponential\", value, endTime);\n\t\tthis._param.exponentialRampToValueAtTime(numericValue, endTime);\n\t\treturn this;\n\t}\n\n\texponentialRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\tlinearRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\ttargetRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialApproachValueAtTime(value, startTime, rampTime);\n\t\treturn this;\n\t}\n\n\texponentialApproachValueAtTime(value: Type, time: Time, rampTime: Time): this {\n\t\tconst timeConstant = Math.log(this.toSeconds(rampTime) + 1) / Math.log(200);\n\t\ttime = this.toSeconds(time);\n\t\treturn this.setTargetAtTime(value, time, timeConstant);\n\t}\n\n\tsetTargetAtTime(value: Type, startTime: Time, timeConstant: Positive): this {\n\t\tconst numericValue = this._fromType(value);\n\t\t// The value will never be able to approach without timeConstant > 0.\n\t\tthis.assert(timeConstant > 0, \"timeConstant must be greater than 0\");\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis._events.add({\n\t\t\tconstant: timeConstant,\n\t\t\ttime: startTime,\n\t\t\ttype: \"setTarget\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(\"setTarget\", value, startTime, timeConstant);\n\t\tthis._param.setTargetAtTime(numericValue, startTime, timeConstant);\n\t\treturn this;\n\t}\n\n\tsetValueCurveAtTime(values: Type[], startTime: Time, duration: Time, scaling: number = 1): this {\n\t\tduration = this.toSeconds(duration);\n\t\tstartTime = this.toSeconds(startTime);\n\t\tconst startingValue = this._fromType(values[0]) * scaling;\n\t\tthis.setValueAtTime(this._toType(startingValue), startTime);\n\t\tconst segTime = duration / (values.length - 1);\n\t\tfor (let i = 1; i < values.length; i++) {\n\t\t\tconst numericValue = this._fromType(values[i]) * scaling;\n\t\t\tthis.linearRampToValueAtTime(this._toType(numericValue), startTime + i * segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tcancelScheduledValues(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._events.cancel(time);\n\t\tthis._param.cancelScheduledValues(time);\n\t\tthis.log(\"cancel\", time);\n\t\treturn this;\n\t}\n\n\tcancelAndHoldAtTime(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tconst valueAtTime = this._fromType(this.getValueAtTime(time));\n\t\tthis.log(\"cancelAndHoldAtTime\", time, \"value=\" + valueAtTime);\n\n\t\t// remove the schedule events\n\t\tthis._param.cancelScheduledValues(time);\n\n\t\t// if there is an event at the given time\n\t\t// and that even is not a \"set\"\n\t\tconst before = this._events.get(time);\n\t\tconst after = this._events.getAfter(time);\n\t\tif (before && before.time === time) {\n\t\t\t// remove everything after\n\t\t\tif (after) {\n\t\t\t\tthis._events.cancel(after.time);\n\t\t\t} else {\n\t\t\t\tthis._events.cancel(time + this.sampleTime);\n\t\t\t}\n\t\t} else if (after) {\n\t\t\t// cancel the next event(s)\n\t\t\tthis._events.cancel(after.time);\n\t\t\tif (after.type === \"linear\") {\n\t\t\t\tthis.linearRampToValueAtTime(this._toType(valueAtTime), time);\n\t\t\t} else if (after.type === \"exponential\") {\n\t\t\t\tthis.exponentialRampToValueAtTime(this._toType(valueAtTime), time);\n\t\t\t}\n\t\t}\n\n\t\t// set the value at the given time\n\t\tthis._events.add({\n\t\t\ttime,\n\t\t\ttype: \"setValue\",\n\t\t\tvalue: valueAtTime,\n\t\t});\n\t\tthis._param.setValueAtTime(valueAtTime, time);\n\t\treturn this;\n\t}\n\n\trampTo(value: Type, rampTime: Time = 0.1, startTime?: Time): this {\n\t\tif (this.units === \"frequency\" || this.units === \"bpm\" || this.units === \"decibels\") {\n\t\t\tthis.exponentialRampTo(value, rampTime, startTime);\n\t\t} else {\n\t\t\tthis.linearRampTo(value, rampTime, startTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tthis._events.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tAUTOMATION CURVE CALCULATIONS\n\t// \tMIT License, copyright (c) 2014 Jordan Santell\n\t///////////////////////////////////////////////////////////////////////////\n\n\t// Calculates the the value along the curve produced by setTargetAtTime\n\tprotected _exponentialApproach(t0: number, v0: number, v1: number, timeConstant: number, t: number): number {\n\t\treturn v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t}\n\n\t// Calculates the the value along the curve produced by linearRampToValueAtTime\n\tprotected _linearInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t}\n\n\t// Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\tprotected _exponentialInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { ftom } from \"./Conversions\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\n\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * var t = Time(\"4n\");//a quarter note\n */\nexport class TimeClass<Type extends Seconds | Ticks = Seconds, Unit extends string = TimeBaseUnit>\nextends TimeBaseClass<Type, Unit> {\n\n\tname = \"Time\";\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign(super._getExpressions(), {\n\t\t\tnow: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\treturn this._now() + new (this.constructor as typeof TimeClass)(this.context, capture).valueOf() as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^\\+(.+)/,\n\t\t\t},\n\t\t\tquantize: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\tconst quantTo = new TimeClass(this.context, capture).valueOf();\n\t\t\t\t\treturn this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));\n\t\t\t\t},\n\t\t\t\tregexp: /^@(.+)/,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Quantize the time by the given subdivision. Optionally add a\n\t * percentage which will move the time value towards the ideal\n\t * quantized value by that percentage.\n\t * @param  val    The subdivision to quantize to\n\t * @param  percent  Move the time value towards the quantized value by a percentage.\n\t * @example\n\t * Time(21).quantize(2) //returns 22\n\t * Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t */\n\tquantize(subdiv: number | Subdivision | TimeObject, percent = 1): Type {\n\t\tconst subdivision = new (this.constructor as typeof TimeClass)(this.context, subdiv).valueOf();\n\t\tconst value = this.valueOf();\n\t\tconst multiple = Math.round(value / subdivision);\n\t\tconst ideal = multiple * subdivision;\n\t\tconst diff = ideal - value;\n\t\treturn value + diff * percent as Type;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\t/**\n\t *  Convert a Time to Notation. The notation values are will be the\n\t *  closest representation between 1m to 128th note.\n\t *  @return {Notation}\n\t *  @example\n\t * //if the Transport is at 120bpm:\n\t * Time(2).toNotation();//returns \"1m\"\n\t */\n\ttoNotation(): Subdivision {\n\t\tconst time = this.toSeconds();\n\t\tconst testNotations: Subdivision[] = [\"1m\"];\n\t\tfor (let power = 1; power < 9; power++) {\n\t\t\tconst subdiv = Math.pow(2, power);\n\t\t\ttestNotations.push(subdiv + \"n.\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"n\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"t\" as Subdivision);\n\t\t}\n\t\ttestNotations.push(\"0\");\n\t\t// find the closets notation representation\n\t\tlet closest = testNotations[0];\n\t\tlet closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n\t\ttestNotations.forEach(notation => {\n\t\t\tconst notationSeconds = new TimeClass(this.context, notation).toSeconds();\n\t\t\tif (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n\t\t\t\tclosest = notation;\n\t\t\t\tclosestSeconds = notationSeconds;\n\t\t\t}\n\t\t});\n\t\treturn closest;\n\t}\n\n\t/**\n\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t */\n\ttoBarsBeatsSixteenths(): BarsBeatsSixteenths {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tlet quarters = this.valueOf() / quarterTime;\n\t\tquarters = parseFloat(quarters.toFixed(4));\n\t\tconst measures = Math.floor(quarters / this._getTimeSignature());\n\t\tlet sixteenths = (quarters % 1) * 4;\n\t\tquarters = Math.floor(quarters) % this._getTimeSignature();\n\t\tconst sixteenthString = sixteenths.toString();\n\t\tif (sixteenthString.length > 3) {\n\t\t\t// the additional parseFloat removes insignificant trailing zeroes\n\t\t\tsixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n\t\t}\n\t\tconst progress = [measures, quarters, sixteenths];\n\t\treturn progress.join(\":\");\n\t}\n\n\t/**\n\t *  Return the time in ticks.\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.round(quarters * this._getPPQ());\n\t}\n\n\t/**\n\t *  Return the time in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t *  Return the value as a midi note.\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.toFrequency());\n\t}\n\n\tprotected _now(): Type {\n\t\treturn this.context.now() as Type;\n\t}\n}\n\n/**\n * Create a TimeClass from a time string or number.\n * @param value A value which reprsents time\n * @param units The value's units if they can't be inferred by the value.\n */\nexport function Time(value?: TimeValue, units?: TimeBaseUnit): TimeClass<Seconds> {\n\treturn new TimeClass(getContext(), value, units);\n}\n","export { connect, disconnect, connectSeries } from \"./context/ToneAudioNode\";\n","// import \"../type/Type\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\n\nexport type PlaybackState = \"started\" | \"stopped\" | \"paused\";\n\nexport interface StateTimelineEvent extends TimelineEvent {\n\tstate: PlaybackState;\n\tduration?: Seconds;\n\toffset?: Seconds;\n}\n\n/**\n *  A Timeline State. Provides the methods: `setStateAtTime(\"state\", time)` and `getValueAtTime(time)`\n *  @param initial The initial state of the StateTimeline.  Defaults to `undefined`\n */\nexport class StateTimeline extends Timeline<StateTimelineEvent> {\n\n\t/**\n\t *  The initial state\n\t */\n\tprivate _initial: PlaybackState;\n\n\tconstructor(initial: PlaybackState = \"stopped\") {\n\t\tsuper();\n\t\tthis._initial = initial;\n\t}\n\n\t/**\n\t *  Returns the scheduled state scheduled before or at\n\t *  the given time.\n\t *  @param  time  The time to query.\n\t *  @return  The name of the state input in setStateAtTime.\n\t */\n\tgetValueAtTime(time: Seconds): PlaybackState {\n\t\tconst event = this.get(time);\n\t\tif (event !== null) {\n\t\t\treturn event.state;\n\t\t} else {\n\t\t\treturn this._initial;\n\t\t}\n\t}\n\n\t/**\n\t *  Add a state to the timeline.\n\t *  @param  state The name of the state to set.\n\t *  @param  time  The time to query.\n\t */\n\tsetStateAtTime(state: PlaybackState, time: Seconds): this {\n\t\t// all state changes need to be >= the previous state time\n\t\t// TODO throw error if time < the previous event time\n\t\tthis.add({\n\t\t\tstate,\n\t\t\ttime,\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Return the event before the time with the given state\n\t *  @param  state The state to look for\n\t *  @param  time  When to check before\n\t *  @return  The event with the given state before the time\n\t */\n\tgetLastState(state: PlaybackState, time: number): StateTimelineEvent | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tfor (let i = index; i >= 0; i--) {\n\t\t\tconst event = this._timeline[i];\n\t\t\tif (event.state === state) {\n\t\t\t\treturn event;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Return the event after the time with the given state\n\t *  @param  state The state to look for\n\t *  @param  time  When to check from\n\t *  @return  The event with the given state after the time\n\t */\n\tgetNextState(state: PlaybackState, time: number): StateTimelineEvent | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tif (index !== -1) {\n\t\t\tfor (let i = index; i < this._timeline.length; i++) {\n\t\t\t\tconst event = this._timeline[i];\n\t\t\t\tif (event.state === state) {\n\t\t\t\t\treturn event;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n */\nexport class TransportTimeClass<Type extends Seconds | Ticks = Seconds> extends TimeClass<Type> {\n\n\tname = \"TransportTime\";\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected _now(): Type {\n\t\treturn this.context.transport.seconds as Type;\n\t}\n}\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n */\nexport function TransportTime(value?: TimeValue, units?: TimeBaseUnit): TransportTimeClass {\n\treturn new TransportTimeClass(getContext(), value, units);\n}\n","import \"./Units\";\n\n/**\n *  Equal power gain scale. Good for cross-fading.\n *  @param  percent (0-1)\n */\nexport function equalPowerScale(percent: NormalRange): number {\n\tconst piFactor = 0.5 * Math.PI;\n\treturn Math.sin(percent * piFactor);\n}\n\n/**\n *  Convert decibels into gain.\n */\nexport function dbToGain(db: Decibels): GainFactor {\n\treturn Math.pow(10, db / 20);\n}\n\n/**\n *  Convert gain to decibels.\n */\nexport function gainToDb(gain: GainFactor): Decibels {\n\treturn 20 * (Math.log(gain) / Math.LN10);\n}\n\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * tone.intervalToFrequencyRatio(0); // 1\n * tone.intervalToFrequencyRatio(12); // 2\n * tone.intervalToFrequencyRatio(-12); // 0.5\n */\nexport function intervalToFrequencyRatio(interval: Interval): number {\n\treturn Math.pow(2, (interval / 12));\n}\n\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\nlet A4: Hertz = 440;\n\nexport function getA4(): Hertz {\n\treturn A4;\n}\n\nexport function setA4(freq: Hertz): void {\n\tA4 = freq;\n}\n\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * ftom(440); // returns 69\n */\nexport function ftom(frequency: Hertz): MidiNote {\n\treturn 69 + Math.round(12 * Math.log2(frequency / A4));\n}\n\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n */\nexport function mtof(midi: MidiNote): Hertz {\n\treturn A4 * Math.pow(2, (midi - 69) / 12);\n}\n","import { Tone } from \"../Tone\";\nimport { isUndef } from \"./TypeCheck\";\n\nexport interface EmitterEventObject {\n\t[event: string]: Array<(...args: any[]) => void>;\n}\n\n/**\n * Emitter gives classes which extend it\n * the ability to listen for and emit events.\n * Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n * MIT (c) 2011 Jerome Etienne.\n */\nexport class Emitter<EventType extends string = string> extends Tone {\n\n\tname = \"Emitter\";\n\n\t/**\n\t * Private container for the events\n\t */\n\tprivate _events?: EmitterEventObject;\n\n\t/**\n\t *  Bind a callback to a specific event.\n\t *  @param  event     The name of the event to listen for.\n\t *  @param  callback  The callback to invoke when the event is emitted\n\t */\n\ton(event: EventType, callback: (...args: any[]) => void): this {\n\t\t// split the event\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (!this._events.hasOwnProperty(eventName)) {\n\t\t\t\tthis._events[eventName] = [];\n\t\t\t}\n\t\t\tthis._events[eventName].push(callback);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Bind a callback which is only invoked once\n\t *  @param  event     The name of the event to listen for.\n\t *  @param  callback  The callback to invoke when the event is emitted\n\t */\n\tonce(event: EventType, callback: (...args: any[]) => void): this {\n\t\tconst boundCallback = (...args: any[])  => {\n\t\t\t// invoke the callback\n\t\t\tcallback(...args);\n\t\t\t// remove the event\n\t\t\tthis.off(event, boundCallback);\n\t\t};\n\t\tthis.on(event, boundCallback);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove the event listener.\n\t *  @param  event     The event to stop listening to.\n\t *  @param  callback  The callback which was bound to the event with Emitter.on.\n\t *                    If no callback is given, all callbacks events are removed.\n\t */\n\toff(event: EventType, callback?: (...args: any[]) => void): this {\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tif (isUndef(callback)) {\n\t\t\t\t\tthis._events[event] = [];\n\t\t\t\t} else {\n\t\t\t\t\tconst eventList = this._events[event];\n\t\t\t\t\tfor (let i = 0; i < eventList.length; i++) {\n\t\t\t\t\t\tif (eventList[i] === callback) {\n\t\t\t\t\t\t\teventList.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Invoke all of the callbacks bound to the event\n\t *  with any arguments passed in.\n\t *  @param  event  The name of the event.\n\t *  @param args The arguments to pass to the functions listening.\n\t */\n\temit(event, ...args: any[]): this {\n\t\tif (this._events) {\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tconst eventList = this._events[event].slice(0);\n\t\t\t\tfor (let i = 0, len = eventList.length; i < len; i++) {\n\t\t\t\t\teventList[i].apply(this, args);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Add Emitter functions (on/off/emit) to the object\n\t */\n\tstatic mixin(constr: any): void {\n\t\t// instance._events = {};\n\t\t[\"on\", \"once\", \"off\", \"emit\"].forEach(name => {\n\t\t\tconst property = Object.getOwnPropertyDescriptor(Emitter.prototype, name) as PropertyDescriptor;\n\t\t\tObject.defineProperty(constr.prototype, name, property);\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tthis._events = undefined;\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator, OscillatorInterface, ToneOscillatorOptions, ToneOscillatorType } from \"./Oscillator\";\n\ntype PulseOscillatorType = \"pulse\";\n\nexport interface PulseOscillatorOptions extends ToneOscillatorOptions {\n\twidth: NormalRange;\n}\n\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @param frequency The frequency of the oscillator\n * @param width The width of the pulse\n * @example\n * var pulse = new PulseOscillator(\"E5\", 0.4).toMaster().start();\n */\nexport class PulseOscillator extends Source<PulseOscillatorOptions> implements OscillatorInterface {\n\n\tname = \"PulseOscillator\";\n\n\t/**\n\t *  The width of the pulse.\n\t */\n\twidth: Signal<AudioRange> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"audioRange\",\n\t});\n\n\t/**\n\t *  gate the width amount\n\t */\n\tprivate _widthGate: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t *  the sawtooth oscillator\n\t */\n\tprivate _sawtooth: Oscillator = new Oscillator({\n\t\tcontext: this.context,\n\t\ttype : \"sawtooth\",\n\t});\n\n\t/**\n\t *  The frequency control.\n\t */\n\tfrequency: Signal<Frequency> = this._sawtooth.frequency;\n\n\t/**\n\t *  The detune in cents.\n\t */\n\tdetune: Signal<Cents> = this._sawtooth.detune;\n\n\t/**\n\t *  Threshold the signal to turn it into a square\n\t */\n\tprivate _thresh = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => val <= 0 ? -1 : 1,\n\t});\n\n\tconstructor(options?: Partial<PulseOscillatorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]));\n\t\tconst options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n\n\t\tthis.width.setValueAtTime(options.width, 0);\n\t\tthis._sawtooth.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis._sawtooth.detune.setValueAtTime(options.detune, 0);\n\t\tthis._sawtooth.phase = options.phase;\n\n\t\t// connections\n\t\tthis._sawtooth.chain(this._thresh, this.output);\n\t\tthis.width.chain(this._widthGate, this._thresh);\n\t\treadOnly(this, [\"width\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PulseOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\twidth: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.start(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.stop(time);\n\t\t// the width is still connected to the output.\n\t\t// that needs to be stopped also\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(0, time);\n\t}\n\n\t/**\n\t *  Restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._sawtooth.restart(time);\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._sawtooth.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._sawtooth.phase = phase;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pulse\".\n\t */\n\tget type(): PulseOscillatorType {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pulse\".\n\t */\n\tget baseType(): PulseOscillatorType {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t *  Clean up method.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sawtooth.dispose();\n\t\tthis.width.dispose();\n\t\tthis._widthGate.dispose();\n\t\tthis._thresh.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\n\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @param {number=} value Constant value to multiple\n * @example\n * const mult = new Multiply();\n * const sigA = new Tone.Signal(3);\n * const sigB = new Tone.Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * //output of mult is 12.\n *  @example\n * const mult = new Multiply(10);\n * const sig = new Tone.Signal(2).connect(mult);\n * //the output of mult is 20.\n */\nexport class Multiply extends Signal<number> {\n\n\tname = \"Multiply\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection\n\t */\n\treadonly override = false;\n\n\t/**\n\t * the input gain node\n\t */\n\tprivate _mult: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The multiplcant input.\n\t */\n\tinput = this._mult;\n\n\t/**\n\t * The product of the input and {@link factor}\n\t */\n\toutput = this._mult;\n\n\t/**\n\t * The multiplication factor. Can be set directly or a signal can be connected to it.\n\t */\n\tfactor: Param<number>;\n\n\tconstructor(options?: Partial<SignalOptions<number>>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(value?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis.factor = this._param = this._mult.gain as unknown as Param<number>;\n\t\tthis.factor.setValueAtTime(options.value, 0);\n\t}\n\n\tstatic getDefaults(): SignalOptions<number> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._mult.dispose();\n\t\treturn this;\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\nimport { TransportTimeClass } from \"./TransportTime\";\n\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * const t = Ticks(\"4n\"); //a quarter note as ticks\n */\nexport class TicksClass extends TransportTimeClass<Ticks> {\n\n\tname = \"Ticks\";\n\n\treadonly defaultUnits: TimeBaseUnit = \"i\";\n\n\t/**\n\t * Get the current time in the given units\n\t */\n\tprotected _now(): Ticks {\n\t\treturn this.context.transport.ticks;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Ticks {\n\t\treturn this._getPPQ() * beats;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Ticks {\n\t\treturn Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Ticks {\n\t\treturn ticks;\n\t}\n\n\t/**\n\t *  Return the time in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\treturn this.valueOf() as Ticks;\n\t}\n\n\t/**\n\t *  Return the time in seconds\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn (this.valueOf() / this._getPPQ()) * (60 / this._getBpm());\n\t}\n}\n\nexport function Ticks(value?: TimeValue, units?: TimeBaseUnit): TicksClass {\n\treturn new TicksClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck\";\n\ninterface ToneAudioBufferOptions {\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n\treverse: boolean;\n\tonload: (buffer?: ToneAudioBuffer) => void;\n\tonerror: (error: Error) => void;\n}\n\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n *\n * Aside from load callbacks from individual buffers, ToneAudioBuffer\n * provides events which keep track of the loading progress\n * of _all_ of the buffers. These are ToneAudioBuffer.on(\"load\" / \"progress\" / \"error\")\n *\n * @param url The url to load, or the audio buffer to set.\n * @param onload A callback which is invoked after the buffer is loaded.\n *                            It's recommended to use `ToneAudioBuffer.on('load', callback)` instead\n *                            since it will give you a callback when _all_ buffers are loaded.\n * @param onerror The callback to invoke if there is an error\n * @example\n * var buffer = new ToneAudioBuffer(\"path/to/sound.mp3\", function(){\n * \t//the buffer is now available.\n * \tvar buff = buffer.get();\n * });\n * @example\n * //can load provide fallback extension types if the first type is not supported.\n * var buffer = new ToneAudioBuffer(\"path/to/sound.[mp3|ogg|wav]\");\n */\nexport class ToneAudioBuffer extends Tone {\n\n\tname = \"ToneAudioBuffer\";\n\n\t/**\n\t *  stores the loaded AudioBuffer\n\t */\n\tprivate _buffer?: AudioBuffer;\n\n\t/**\n\t *  indicates if the buffer should be reversed or not\n\t */\n\tprivate _reversed!: boolean;\n\n\t/**\n\t * Callback when the buffer is loaded.\n\t */\n\tonload: (buffer: ToneAudioBuffer) => void = noOp;\n\n\tconstructor(options?: Partial<ToneAudioBufferOptions>);\n\tconstructor(\n\t\turl?: string | ToneAudioBuffer | AudioBuffer,\n\t\tonload?: (buffer: ToneAudioBuffer) => void,\n\t\tonerror?: (error: Error) => void,\n\t);\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tconst options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, [\"url\", \"onload\", \"onerror\"]);\n\n\t\tthis.reverse = options.reverse;\n\t\tthis.onload = options.onload;\n\n\t\tif (options.url && options.url instanceof AudioBuffer || options.url instanceof ToneAudioBuffer) {\n\t\t\tthis.set(options.url);\n\t\t} else if (isString(options.url)) {\n\t\t\t// initiate the download\n\t\t\tthis.load(options.url).catch(options.onerror);\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneAudioBufferOptions {\n\t\treturn {\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\treverse: false,\n\t\t};\n\t}\n\n\t/**\n\t * The sample rate of the AudioBuffer\n\t */\n\tget sampleRate(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.sampleRate;\n\t\t} else {\n\t\t\treturn getContext().sampleRate;\n\t\t}\n\t}\n\n\t/**\n\t *  Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n\t */\n\tset(buffer: AudioBuffer | ToneAudioBuffer): this {\n\t\tif (buffer instanceof ToneAudioBuffer) {\n\t\t\t// if it's loaded, set it\n\t\t\tif (buffer.loaded) {\n\t\t\t\tthis._buffer = buffer.get();\n\t\t\t} else {\n\t\t\t\t// otherwise when it's loaded, invoke it's callback\n\t\t\t\tbuffer.onload = () => {\n\t\t\t\t\tthis.set(buffer);\n\t\t\t\t\tthis.onload(this);\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tthis._buffer = buffer;\n\t\t}\n\t\t// reverse it initially\n\t\tif (this._reversed) {\n\t\t\tthis._reverse();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The audio buffer stored in the object.\n\t */\n\tget(): AudioBuffer | undefined {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t *  Makes an fetch request for the selected url then decodes the file as an audio buffer.\n\t * \tInvokes the callback once the audio buffer loads.\n\t *  @param url The url of the buffer to load. filetype support depends on the browser.\n\t *  @returns A Promise which resolves with this ToneAudioBuffer\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tconst promise = ToneAudioBuffer.load(url);\n\t\tToneAudioBuffer.downloads.push(promise);\n\t\ttry {\n\t\t\tconst audioBuffer = await promise;\n\t\t\tthis.set(audioBuffer);\n\t\t\t// invoke the onload method\n\t\t\tthis.onload(this);\n\t\t} catch (e) {\n\t\t\t// remove the failed file before throwing error\n\t\t\tconst index = ToneAudioBuffer.downloads.indexOf(promise);\n\t\t\tToneAudioBuffer.downloads.splice(index, 1);\n\t\t\tthrow e;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tthis._buffer = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the audio buffer from the array.\n\t * To create a multichannel AudioBuffer, pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t */\n\tfromArray(array: Float32Array | Float32Array[]): this {\n\t\tconst isMultidimensional = isArray(array) && array[0].length > 0;\n\t\tconst channels = isMultidimensional ? array.length : 1;\n\t\tconst len = isMultidimensional ? (array[0] as Float32Array).length : array.length;\n\t\tconst context = getContext();\n\t\tconst buffer = context.createBuffer(channels, len, context.sampleRate);\n\t\tconst multiChannelArray: Float32Array[] = !isMultidimensional && channels === 1 ?\n\t\t\t[array as Float32Array] : array as Float32Array[];\n\n\t\tfor (let c = 0; c < channels; c++) {\n\t\t\tbuffer.copyToChannel(multiChannelArray[c], c);\n\t\t}\n\t\tthis._buffer = buffer;\n\t\treturn this;\n\t}\n\n\t/**\n\t * \tSums multiple channels into 1 channel\n\t *  @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoMono(chanNum?: number): this {\n\t\tif (isNumber(chanNum)) {\n\t\t\tthis.fromArray(this.toArray(chanNum));\n\t\t} else {\n\t\t\tlet outputArray = new Float32Array(this.length as number);\n\t\t\tconst numChannels = this.numberOfChannels;\n\t\t\tfor (let channel = 0; channel < numChannels; channel++) {\n\t\t\t\tconst channelArray = this.toArray(channel) as Float32Array;\n\t\t\t\tfor (let i = 0; i < channelArray.length; i++) {\n\t\t\t\t\toutputArray[i] += channelArray[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// divide by the number of channels\n\t\t\toutputArray = outputArray.map(sample => sample / numChannels);\n\t\t\tthis.fromArray(outputArray);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * \tGet the buffer as an array. Single channel buffers will return a 1-dimensional\n\t * \tFloat32Array, and multichannel buffers will return multidimensional arrays.\n\t *  @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoArray(channel?: number): Float32Array | Float32Array[] {\n\t\tif (isNumber(channel)) {\n\t\t\treturn this.getChannelData(channel);\n\t\t} else if (this.numberOfChannels === 1) {\n\t\t\treturn this.toArray(0);\n\t\t} else {\n\t\t\tconst ret: Float32Array[] = [];\n\t\t\tfor (let c = 0; c < this.numberOfChannels; c++) {\n\t\t\t\tret[c] = this.getChannelData(c);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t/**\n\t *  Returns the Float32Array representing the PCM audio data for the specific channel.\n\t *  @param  channel  The channel number to return\n\t *  @return The audio as a TypedArray\n\t */\n\tgetChannelData(channel: number): Float32Array {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.getChannelData(channel);\n\t\t} else {\n\t\t\treturn new Float32Array(0);\n\t\t}\n\t}\n\n\t/**\n\t *  Cut a subsection of the array and return a buffer of the\n\t *  subsection. Does not modify the original buffer\n\t *  @param start The time to start the slice\n\t *  @param end The end time to slice. If none is given will default to the end of the buffer\n\t */\n\tslice(start: Seconds, end: Seconds = this.duration): ToneAudioBuffer {\n\t\tconst startSamples = Math.floor(start * this.sampleRate);\n\t\tconst endSamples = Math.floor(end * this.sampleRate);\n\t\tconst replacementArray: Float32Array[] = [];\n\t\tfor (let i = 0; i < this.numberOfChannels; i++) {\n\t\t\treplacementArray[i] = this.toArray(i).slice(startSamples, endSamples) as Float32Array;\n\t\t}\n\t\tconst retBuffer = new ToneAudioBuffer().fromArray(replacementArray);\n\t\treturn retBuffer;\n\t}\n\n\t/**\n\t *  Reverse the buffer.\n\t */\n\tprivate _reverse(): this {\n\t\tif (this.loaded) {\n\t\t\tfor (let i = 0; i < this.numberOfChannels; i++) {\n\t\t\t\tArray.prototype.reverse.call(this.getChannelData(i));\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffer is loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this.length > 0;\n\t}\n\n\t/**\n\t * The duration of the buffer in seconds.\n\t */\n\tget duration(): Seconds {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.duration;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The length of the buffer in samples\n\t */\n\tget length(): Samples {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n\t */\n\tget numberOfChannels(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.numberOfChannels;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tget reverse(): boolean {\n\t\treturn this._reversed;\n\t}\n\tset reverse(rev: boolean) {\n\t\tif (this._reversed !== rev) {\n\t\t\tthis._reversed = rev;\n\t\t\tthis._reverse();\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// STATIC METHODS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  A path which is prefixed before every url.\n\t */\n\tstatic baseUrl = \"\";\n\n\t/**\n\t *  Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n\t *  pass in a multidimensional array.\n\t *  @param array The array to fill the audio buffer\n\t *  @return A ToneAudioBuffer created from the array\n\t */\n\tstatic fromArray(array: Float32Array | Float32Array[]): ToneAudioBuffer {\n\t\treturn (new ToneAudioBuffer()).fromArray(array);\n\t}\n\n\t/**\n\t * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n\t * @param  url The url to load.\n\t * @return A promise which resolves to a ToneAudioBuffer\n\t */\n\tstatic async fromUrl(url: string): Promise<ToneAudioBuffer> {\n\t\tconst buffer = new ToneAudioBuffer();\n\t\treturn await buffer.load(url);\n\t}\n\n\t/**\n\t * All of the downloads\n\t */\n\tstatic downloads: Array<Promise<AudioBuffer>> = [];\n\n\t/**\n\t *  Loads a url using fetch and returns the AudioBuffer.\n\t */\n\tstatic async load(url: string): Promise<AudioBuffer> {\n\n\t\t// test if the url contains multiple extensions\n\t\tconst matches = url.match(/\\[(.+\\|?)+\\]$/);\n\t\tif (matches) {\n\t\t\tconst extensions = matches[1].split(\"|\");\n\t\t\tlet extension = extensions[0];\n\t\t\tfor (const ext of extensions) {\n\t\t\t\tif (ToneAudioBuffer.supportsType(ext)) {\n\t\t\t\t\textension = ext;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\turl = url.replace(matches[0], extension);\n\t\t}\n\n\t\tconst response = await fetch(ToneAudioBuffer.baseUrl + url);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`could not load url: ${url}`);\n\t\t}\n\t\tconst arrayBuffer = await response.arrayBuffer();\n\n\t\tconst audioBuffer = await getContext().decodeAudioData(arrayBuffer);\n\n\t\treturn audioBuffer;\n\t}\n\n\t/**\n\t *  Checks a url's extension to see if the current browser can play that file type.\n\t *  @param url The url/extension to test\n\t *  @return If the file extension can be played\n\t *  @static\n\t *  @example\n\t * ToneAudioBuffer.supportsType(\"wav\"); //returns true\n\t * ToneAudioBuffer.supportsType(\"path/to/file.wav\"); //returns true\n\t */\n\tstatic supportsType(url: string): boolean {\n\t\tconst extensions = url.split(\".\");\n\t\tconst extension = extensions[extensions.length - 1];\n\t\tconst response = document.createElement(\"audio\").canPlayType(\"audio/\" + extension);\n\t\treturn response !== \"\";\n\t}\n\n\t/**\n\t *  Returns a Promise which resolves when all of the buffers have loaded\n\t */\n\tstatic async loaded(): Promise<void> {\n\t\tfor (const promise of ToneAudioBuffer.downloads) {\n\t\t\tawait promise;\n\t\t}\n\t}\n}\n","///////////////////////////////////////////////////////////////////////////\n// INITIALIZING NEW CONTEXT\n///////////////////////////////////////////////////////////////////////////\n\ntype Context = import(\"./Context\").Context;\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to setup a new Context\n */\nexport function onContextInit(cb: (ctx: Context) => void): void {\n\tnotifyNewContext.push(cb);\n}\n\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\nexport function initializeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyNewContext.forEach(cb => cb(ctx));\n}\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyCloseContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to tear down a Context\n */\nexport function onContextClose(cb: (ctx: Context) => void): void {\n\tnotifyCloseContext.push(cb);\n}\n\nexport function closeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyCloseContext.forEach(cb => cb(ctx));\n}\n","import { Ticker, TickerClockSource } from \"../clock/Ticker\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { Omit } from \"../util/Interface\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isString } from \"../util/TypeCheck\";\nimport { getAudioContext } from \"./AudioContext\";\nimport { closeContext, initializeContext } from \"./ContextInitialization\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Destination = import(\"./Destination\").Destination;\n\nexport type ContextLatencyHint = AudioContextLatencyCategory | \"fastest\";\n\n// these are either not used in Tone.js or deprecated and not implemented.\nexport type ExcludedFromBaseAudioContext = \"createScriptProcessor\" | \"onstatechange\" | \"addEventListener\"\n\t| \"removeEventListener\" | \"listener\" | \"dispatchEvent\" | \"audioWorklet\" | \"destination\";\n\n// the subset of the BaseAudioContext which Tone.Context implements.\nexport type BaseAudioContextSubset = Omit<BaseAudioContext, ExcludedFromBaseAudioContext>;\n\nexport interface ContextOptions {\n\tclockSource: TickerClockSource;\n\tlatencyHint: ContextLatencyHint;\n\tlookAhead: Seconds;\n\tupdateInterval: Seconds;\n\tcontext: BaseAudioContext;\n}\n\nexport interface ContextTimeoutEvent {\n\tcallback: (...args: any[]) => void;\n\tid: number;\n\ttime: Seconds;\n}\n\n/**\n * Wrapper around the native AudioContext.\n */\nexport class Context extends Emitter<\"statechange\" | \"tick\"> implements BaseAudioContextSubset {\n\n\tname = \"Context\";\n\n\t/**\n\t * The amount of time into the future events are scheduled. Giving Web Audio\n\t * a short amount of time into the future to schedule events can reduce clicks and\n\t * improve performance. This value can be set to 0 to get the lowest latency.\n\t */\n\tlookAhead: Seconds;\n\n\t/**\n\t * private reference to the BaseAudioContext\n\t */\n\tprotected readonly _context: BaseAudioContext;\n\n\t/**\n\t * A reliable callback method\n\t */\n\tprivate readonly _ticker: Ticker;\n\n\t/**\n\t *  The default latency hint\n\t */\n\tprivate _latencyHint: ContextLatencyHint | Seconds;\n\n\t/**\n\t *  An object containing all of the constants AudioBufferSourceNodes\n\t */\n\tprivate _constants = new Map<number, AudioBufferSourceNode>();\n\n\t/**\n\t *  All of the setTimeout events.\n\t */\n\tprivate _timeouts: Timeline<ContextTimeoutEvent> = new Timeline();\n\n\t/**\n\t *  The timeout id counter\n\t */\n\tprivate _timeoutIds = 0;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _transport!: Transport;\n\n\t/**\n\t * A reference the Destination singleton belonging to this context\n\t */\n\tprivate _destination!: Destination;\n\n\t/**\n\t * Private indicator if the context has been initialized\n\t */\n\tprivate _initialized: boolean = false;\n\n\tconstructor(context?: BaseAudioContext);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<ContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Context.getDefaults(), arguments, [\"context\"]);\n\n\t\tthis._context = options.context;\n\n\t\tthis._latencyHint = options.latencyHint;\n\t\tthis.lookAhead = options.lookAhead;\n\n\t\tthis._ticker = new Ticker(this.emit.bind(this, \"tick\"), options.clockSource, options.updateInterval);\n\t\tthis.on(\"tick\", this._timeoutLoop.bind(this));\n\n\t\t// fwd events from the context\n\t\tthis._context.addEventListener(\"statechange\", () => {\n\t\t\tthis.emit(\"statechange\", this.state);\n\t\t});\n\t}\n\n\tstatic getDefaults(): ContextOptions {\n\t\treturn {\n\t\t\tclockSource: \"worker\",\n\t\t\tcontext: getAudioContext(),\n\t\t\tlatencyHint: \"interactive\",\n\t\t\tlookAhead: 0.1,\n\t\t\tupdateInterval: 0.03,\n\t\t};\n\t}\n\n\t/**\n\t * Finish setting up the context. **You usually do not need to do this manually.**\n\t */\n\tinitialize(): this {\n\t\tif (!this._initialized) {\n\t\t\t// add any additional modules\n\t\t\tinitializeContext(this);\n\t\t\tthis._initialized = true;\n\t\t}\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// BASE AUDIO CONTEXT METHODS\n\t///////////////////////////////////////////////////////////////////////\n\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn this._context.createAnalyser();\n\t}\n\tcreateOscillator(): OscillatorNode {\n\t\treturn this._context.createOscillator();\n\t}\n\tcreateBufferSource(): AudioBufferSourceNode {\n\t\treturn this._context.createBufferSource();\n\t}\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn this._context.createBiquadFilter();\n\t}\n\tcreateBuffer(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer {\n\t\treturn this._context.createBuffer(numberOfChannels, length, sampleRate);\n\t}\n\tcreateChannelMerger(numberOfInputs?: number | undefined): ChannelMergerNode {\n\t\treturn this._context.createChannelMerger(numberOfInputs);\n\t}\n\tcreateChannelSplitter(numberOfOutputs?: number | undefined): ChannelSplitterNode {\n\t\treturn this._context.createChannelSplitter(numberOfOutputs);\n\t}\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn this._context.createConstantSource();\n\t}\n\tcreateConvolver(): ConvolverNode {\n\t\treturn this._context.createConvolver();\n\t}\n\tcreateDelay(maxDelayTime?: number | undefined): DelayNode {\n\t\treturn this._context.createDelay(maxDelayTime);\n\t}\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn this._context.createDynamicsCompressor();\n\t}\n\tcreateGain(): GainNode {\n\t\treturn this._context.createGain();\n\t}\n\tcreateIIRFilter(feedforward: number[], feedback: number[]): IIRFilterNode {\n\t\treturn this._context.createIIRFilter(feedforward, feedback);\n\t}\n\tcreatePanner(): PannerNode {\n\t\treturn this._context.createPanner();\n\t}\n\tcreatePeriodicWave(\n\t\treal: number[] | Float32Array,\n\t\timag: number[] | Float32Array,\n\t\tconstraints?: PeriodicWaveConstraints | undefined,\n\t): PeriodicWave {\n\t\treturn this._context.createPeriodicWave(real, imag, constraints);\n\t}\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn this._context.createStereoPanner();\n\t}\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn this._context.createWaveShaper();\n\t}\n\tdecodeAudioData(audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn this._context.decodeAudioData(audioData);\n\t}\n\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget state(): AudioContextState {\n\t\treturn this._context.state;\n\t}\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget sampleRate(): number {\n\t\treturn this._context.sampleRate;\n\t}\n\t/**\n\t *  The listener\n\t */\n\tget listener(): AudioListener {\n\t\treturn this._context.listener;\n\t}\n\n\t/**\n\t *  There is only one Transport per Context. It is created on initialization.\n\t */\n\tget transport(): Transport {\n\t\tthis.assert(this._initialized, \"The context must be initialized before being used by invoking context.initialize()\");\n\t\treturn this._transport;\n\t}\n\tset transport(t: Transport) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._transport = t;\n\t}\n\n\t/**\n\t *  A reference to the Context's destination node.\n\t */\n\tget destination(): Destination {\n\t\tthis.assert(this._initialized, \"The context must be initialized before being used by invoking context.initialize()\");\n\t\treturn this._destination;\n\t}\n\tset destination(d: Destination) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._destination = d;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// TICKER\n\t///////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  How often the interval callback is invoked.\n\t *  This number corresponds to how responsive the scheduling\n\t *  can be. context.updateInterval + context.lookAhead gives you the\n\t *  total latency between scheduling an event and hearing it.\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._ticker.updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._ticker.updateInterval = interval;\n\t}\n\n\t/**\n\t *  What the source of the clock is, either \"worker\" (default),\n\t *  \"timeout\", or \"offline\" (none).\n\t */\n\tget clockSource(): TickerClockSource {\n\t\treturn this._ticker.type;\n\t}\n\tset clockSource(type: TickerClockSource) {\n\t\tthis._ticker.type = type;\n\t}\n\n\t/**\n\t * The type of playback, which affects tradeoffs between audio\n\t * output latency and responsiveness.\n\t * In addition to setting the value in seconds, the latencyHint also\n\t * accepts the strings \"interactive\" (prioritizes low latency),\n\t * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t * latency and performance), and \"fastest\" (lowest latency, might glitch more often).\n\t * @example\n\t * //set the lookAhead to 0.3 seconds\n\t * Tone.context.latencyHint = 0.3;\n\t */\n\tget latencyHint(): ContextLatencyHint | Seconds {\n\t\treturn this._latencyHint;\n\t}\n\tset latencyHint(hint: ContextLatencyHint | Seconds) {\n\t\tlet lookAheadValue = 0;\n\t\tthis._latencyHint = hint;\n\t\tif (isString(hint)) {\n\t\t\tswitch (hint) {\n\t\t\t\tcase \"interactive\":\n\t\t\t\t\tlookAheadValue = 0.1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"playback\":\n\t\t\t\t\tlookAheadValue = 0.8;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"balanced\":\n\t\t\t\t\tlookAheadValue = 0.25;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"fastest\":\n\t\t\t\t\tlookAheadValue = 0.01;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.lookAhead = lookAheadValue;\n\t\tthis.updateInterval = lookAheadValue / 3;\n\t}\n\n\t/**\n\t *  The unwrapped AudioContext.\n\t */\n\tget rawContext(): BaseAudioContext {\n\t\treturn this._context;\n\t}\n\n\t/**\n\t * The current audio context time plus a short {@link lookAhead}.\n\t */\n\tnow(): Seconds {\n\t\treturn this._context.currentTime + this.lookAhead;\n\t}\n\n\t/**\n\t *  Starts the audio context from a suspended state. This is required\n\t *  to initially start the AudioContext.\n\t */\n\tresume(): Promise<void> {\n\t\tif (this._context.state === \"suspended\" && this._context instanceof AudioContext) {\n\t\t\treturn this._context.resume();\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t *  Promise which is invoked when the context is running.\n\t *  Tries to resume the context if it's not started.\n\t */\n\tasync close(): Promise<Context> {\n\t\tif (this._context instanceof AudioContext) {\n\t\t\tawait this._context.close();\n\t\t}\n\t\tif (this._initialized) {\n\t\t\tcloseContext(this);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Generate a looped buffer at some constant value.\n\t */\n\tgetConstant(val: number): AudioBufferSourceNode {\n\t\tif (this._constants.has(val)) {\n\t\t\treturn this._constants.get(val) as AudioBufferSourceNode;\n\t\t} else {\n\t\t\tconst buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t\t\tconst arr = buffer.getChannelData(0);\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = val;\n\t\t\t}\n\t\t\tconst constant = this._context.createBufferSource();\n\t\t\tconstant.channelCount = 1;\n\t\t\tconstant.channelCountMode = \"explicit\";\n\t\t\tconstant.buffer = buffer;\n\t\t\tconstant.loop = true;\n\t\t\tconstant.start(0);\n\t\t\tthis._constants.set(val, constant);\n\t\t\treturn constant;\n\t\t}\n\t}\n\n\t/**\n\t *  Clean up. Also closes the audio context.\n\t */\n\tdispose(): this {\n\t\tthis._ticker.dispose();\n\t\tthis._timeouts.dispose();\n\t\tObject.keys(this._constants).map(val => this._constants[val].disconnect());\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// TIMEOUTS\n\t///////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The private loop which keeps track of the context scheduled timeouts\n\t *  Is invoked from the clock source\n\t */\n\tprivate _timeoutLoop(): void  {\n\t\tconst now = this.now();\n\t\tlet firstEvent = this._timeouts.peek();\n\t\twhile (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n\t\t\t// invoke the callback\n\t\t\tfirstEvent.callback();\n\t\t\t// shift the first event off\n\t\t\tthis._timeouts.shift();\n\t\t\t// get the next one\n\t\t\tfirstEvent = this._timeouts.peek();\n\t\t}\n\t}\n\n\t/**\n\t *  A setTimeout which is guarented by the clock source.\n\t *  Also runs in the offline context.\n\t *  @param  fn       The callback to invoke\n\t *  @param  timeout  The timeout in seconds\n\t *  @returns ID to use when invoking Context.clearTimeout\n\t */\n\tsetTimeout(fn: (...args: any[]) => void, timeout: Seconds): number {\n\t\tthis._timeoutIds++;\n\t\tconst now = this.now();\n\t\tthis._timeouts.add({\n\t\t\tcallback : fn,\n\t\t\tid : this._timeoutIds,\n\t\t\ttime : now + timeout,\n\t\t});\n\t\treturn this._timeoutIds;\n\t}\n\n\t/**\n\t *  Clears a previously scheduled timeout with Tone.context.setTimeout\n\t *  @param  id  The ID returned from setTimeout\n\t */\n\tclearTimeout(id: number): Context {\n\t\tthis._timeouts.forEach(event => {\n\t\t\tif (event.id === id) {\n\t\t\t\tthis._timeouts.remove(event);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator, OscillatorInterface, ToneOscillatorOptions, ToneOscillatorType } from \"./Oscillator\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n\nexport interface PWMOscillatorOptions extends ToneOscillatorOptions {\n\tmodulationFrequency: Frequency;\n}\n\ntype PWMOscillatorType = \"pwm\";\n\n/**\n *  @class PWMOscillator modulates the width of a Tone.PulseOscillator\n *         at the modulationFrequency. This has the effect of continuously\n *         changing the timbre of the oscillator by altering the harmonics\n *         generated.\n *\n *  @extends {Tone.Source}\n *  @constructor\n *  @param {Frequency} frequency The starting frequency of the oscillator.\n *  @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse.\n *  @example\n *  var pwm = new PWMOscillator(\"Ab3\", 0.3).toMaster().start();\n */\nexport class PWMOscillator extends Source<PWMOscillatorOptions> implements OscillatorInterface {\n\n\tname = \"PWMOscillator\";\n\n\treadonly sourceType = \"pwm\";\n\n\t/**\n\t *  the pulse oscillator\n\t */\n\tprivate _pulse: PulseOscillator = new PulseOscillator({ context: this.context });\n\t/**\n\t *  the modulator\n\t *  @type {Tone.Oscillator}\n\t *  @private\n\t */\n\tprivate _modulator: Oscillator = new Oscillator({ context: this.context });\n\n\t/**\n\t *  Scale the oscillator so it doesn't go silent\n\t *  at the extreme values.\n\t */\n\tprivate _scale: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: 2,\n\t});\n\n\t/**\n\t *  The frequency control.\n\t */\n\treadonly frequency: Signal<Frequency> = this._modulator.frequency;\n\n\t/**\n\t *  The detune of the oscillator.\n\t */\n\treadonly detune: Signal<Cents> = this._modulator.detune;\n\n\t/**\n\t *  The modulation rate of the oscillator.\n\t */\n\treadonly modulationFrequency: Signal<Frequency> = this._pulse.frequency;\n\n\tconstructor(options?: Partial<PWMOscillatorOptions>);\n\tconstructor(frequency?: Frequency, modulationFrequency?: Frequency);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n\t\tconst options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n\n\t\t// change the pulse oscillator type\n\t\t// @ts-ignore\n\t\tthis._pulse._sawtooth.type = \"sine\";\n\n\t\tthis._pulse.frequency.setValueAtTime(options.modulationFrequency, 0);\n\t\tthis._modulator.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis._modulator.detune.setValueAtTime(options.detune, 0);\n\t\tthis._modulator.phase = options.phase;\n\n\t\t// connections\n\t\tthis._modulator.chain(this._scale, this._pulse.width);\n\t\tthis._pulse.connect(this.output);\n\t\treadOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PWMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tmodulationFrequency: 0.4,\n\t\t});\n\t}\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.start(time);\n\t\tthis._pulse.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.stop(time);\n\t\tthis._pulse.stop(time);\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._pulse.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pwm\".\n\t */\n\tget type(): PWMOscillatorType {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pwm\".\n\t */\n\tget baseType(): PWMOscillatorType {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._modulator.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._pulse.dispose();\n\t\tthis._scale.dispose();\n\t\tthis._modulator.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator, OscillatorInterface, ToneOscillatorOptions, ToneOscillatorType } from \"./Oscillator\";\n\nexport interface FatOscillatorOptions extends ToneOscillatorOptions {\n\tspread: Cents;\n\tcount: Positive;\n\ttype: ToneOscillatorType;\n}\n\n/**\n *  FatOscillator is an array of oscillators with detune spread between the oscillators\n *  @param frequency The oscillator's frequency.\n *  @param type The type of the oscillator.\n *  @param spread The detune spread between the oscillators.\n *  @example\n * var fatOsc = new FatOscillator(\"Ab3\", \"sine\", 40).toMaster().start();\n */\nexport class FatOscillator extends Source<FatOscillatorOptions> implements OscillatorInterface {\n\n\tname = \"FatOscillator\";\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"frequency\",\n\t});\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"cents\",\n\t});\n\n\t/**\n\t *  The array of oscillators\n\t */\n\tprivate _oscillators: Oscillator[] = [];\n\n\t/**\n\t *  The total spread of the oscillators\n\t */\n\tprivate _spread: Cents;\n\n\t/**\n\t *  The type of the oscillator\n\t */\n\tprivate _type: ToneOscillatorType;\n\n\t/**\n\t *  The phase of the oscillators\n\t */\n\tprivate _phase: Degrees;\n\n\t/**\n\t *  The partials array\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t *  The number of partials to use\n\t */\n\tprivate _partialCount: number;\n\n\tconstructor(options?: Partial<FatOscillatorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]));\n\t\tconst options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\n\t\tthis._spread = options.spread;\n\t\tthis._type = options.type;\n\t\tthis._phase = options.phase;\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\n\t\t// set the count initially\n\t\tthis.count = options.count;\n\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): FatOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tcount : 3,\n\t\t\tspread : 20,\n\t\t\ttype : \"sawtooth\",\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.start(time));\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.stop(time));\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.restart(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over all of the oscillators\n\t */\n\tprivate _forEach(iterator: (osc: Oscillator, index: number) => void): void {\n\t\tfor (let i = 0; i < this._oscillators.length; i++) {\n\t\t\titerator(this._oscillators[i], i);\n\t\t}\n\t}\n\n\t/**\n\t * The type of the oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\n\tset type(type: ToneOscillatorType) {\n\t\tthis._type = type;\n\t\tthis._forEach(osc => osc.type = type);\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents.\n\t */\n\tget spread(): Cents {\n\t\treturn this._spread;\n\t}\n\n\tset spread(spread: Cents) {\n\t\tthis._spread = spread;\n\t\tif (this._oscillators.length > 1) {\n\t\t\tconst start = -spread / 2;\n\t\t\tconst step = spread / (this._oscillators.length - 1);\n\t\t\tthis._forEach((osc, i) => osc.detune.value = start + step * i);\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators. Should be an integer greater than 1.\n\t */\n\tget count(): number {\n\t\treturn this._oscillators.length;\n\t}\n\n\tset count(count: number) {\n\t\tcount = Math.max(count, 1);\n\t\tif (this._oscillators.length !== count) {\n\t\t\t// dispose the previous oscillators\n\t\t\tthis._forEach(osc => osc.dispose());\n\t\t\tthis._oscillators = [];\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tconst osc = new Oscillator({\n\t\t\t\t\tcontext : this.context,\n\t\t\t\t});\n\t\t\t\tif (this.type === \"custom\") {\n\t\t\t\t\tosc.partials = this._partials;\n\t\t\t\t} else {\n\t\t\t\t\tosc.type = this._type;\n\t\t\t\t}\n\t\t\t\tosc.partialCount = this._partialCount;\n\t\t\t\tosc.phase = this._phase + (i / count) * 360;\n\t\t\t\tosc.volume.value = -6 - count * 1.1;\n\t\t\t\tthis.frequency.connect(osc.frequency);\n\t\t\t\tthis.detune.connect(osc.detune);\n\t\t\t\tosc.connect(this.output);\n\t\t\t\tthis._oscillators[i] = osc;\n\t\t\t}\n\t\t\t// set the spread\n\t\t\tthis.spread = this._spread;\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._forEach(osc => osc.start());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase;\n\t\tthis._forEach(osc => osc.phase = phase);\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._oscillators[0].baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._forEach(osc => osc.baseType = baseType);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @memberOf FatOscillator#\n\t * @type {Array}\n\t * @name partials\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillators[0].partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tif (partials.length) {\n\t\t\tthis._type = \"custom\";\n\t\t\tthis._forEach(osc => osc.partials = partials);\n\t\t}\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t * @memberOf FatOscillator#\n\t * @type {Number}\n\t * @name partialCount\n\t */\n\tget partialCount(): number {\n\t\treturn this._oscillators[0].partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._partialCount = partialCount;\n\t\tthis._forEach(osc => osc.partialCount = partialCount);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._forEach(osc => osc.dispose());\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator, OscillatorInterface, ToneOscillatorOptions, ToneOscillatorType } from \"./Oscillator\";\n\nexport interface FMOscillatorOptions extends ToneOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationIndex: Positive;\n\tmodulationType: ToneOscillatorType;\n}\n\n/**\n * FMOscillator implements a frequency modulation synthesis\n * ```\n *                                              +-------------+\n * +---------------+        +-------------+     | Carrier Osc |\n * | Modulator Osc +>-------> GainNode    |     |             +--->Output\n * +---------------+        |             +>----> frequency   |\n *                       +--> gain        |     +-------------+\n *                       |  +-------------+\n * +-----------------+   |\n * | modulationIndex +>--+\n * +-----------------+\n * ```\n *\n * @param frequency The starting frequency of the oscillator.\n * @param type The type of the carrier oscillator.\n * @param modulationType The type of the modulator oscillator.\n * @example\n * //a sine oscillator frequency-modulated by a square wave\n * var fmOsc = new FMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n */\nexport class FMOscillator extends Source<FMOscillatorOptions> implements OscillatorInterface {\n\n\tname = \"FMOscillator\";\n\n\t/**\n\t *  The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator = new Oscillator({\n\t\tcontext : this.context,\n\t\tfrequency: 0,\n\t});\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"frequency\",\n\t});\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents> = this._carrier.detune;\n\n\t/**\n\t *  The modulating oscillator\n\t */\n\tprivate _modulator = new Oscillator({ context : this.context });\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave.\n\t *  @example\n\t * //pitch the modulator an octave below carrier\n\t * synth.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<Positive> = new Multiply({\n\t\tcontext: this.context,\n\t\tunits: \"positive\",\n\t});\n\n\t/**\n\t *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t *  modulating signal (ma) -- as in ma/mf.\n\t */\n\treadonly modulationIndex: Signal<Positive> = new Multiply({\n\t\tcontext: this.context,\n\t\tunits: \"positive\",\n\t});\n\n\t/**\n\t *  the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\tconstructor(options?: Partial<FMOscillatorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier.type = options.type;\n\t\tthis._modulator.type = options.modulationType;\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\t\tthis.harmonicity.setValueAtTime(options.harmonicity, 0);\n\t\tthis.modulationIndex.setValueAtTime(options.modulationIndex, 0);\n\n\t\t// connections\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t\tthis.detune.connect(this._modulator.detune);\n\n\t\tthis.phase = options.phase;\n\n\t\treadOnly(this, [\"modulationIndex\", \"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): FMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationIndex: 2,\n\t\t\tmodulationType: \"square\",\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t *  stop and restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t */\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis.modulationIndex.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isFunction, isUndef } from \"../core/util/TypeCheck\";\nimport { Signal, SignalOptions } from \"./Signal\";\nimport { SignalOperator } from \"./SignalOperator\";\n\ntype WaveShaperMappingFn = (value: number, index?: number) => number;\n\ntype WaveShaperMapping =  WaveShaperMappingFn | number[] | Float32Array;\n\ninterface WaveShaperOptions extends ToneAudioNodeOptions {\n\tmapping?: WaveShaperMapping;\n\tlength: number;\n\tcurve?: number[] | Float32Array;\n}\n\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n *  @param mapping The function used to define the values.\n *                 The mapping function should take two arguments:\n *                 the first is the value at the current position\n *                 and the second is the array position.\n *                 If the argument is an array, that array will be\n *                 set as the wave shaping function. The input\n *                 signal is an AudioRange [-1, 1] value and the output\n *                 signal can take on any numerical values.\n *\n *  @param bufferLen The length of the WaveShaperNode buffer.\n *  @example\n * var timesTwo = new WaveShaper(function(val){\n * \treturn val * 2;\n * }, 2048);\n *  @example\n * //a waveshaper can also be constructed with an array of values\n * var invert = new WaveShaper([1, -1]);\n */\nexport class WaveShaper extends SignalOperator<WaveShaperOptions> {\n\n\tname = \"WaveShaper\";\n\n\t/**\n\t *  the waveshaper node\n\t */\n\tprivate _shaper: WaveShaperNode = this.context.createWaveShaper();\n\n\t/**\n\t * The input to the waveshaper node.\n\t */\n\tinput = this._shaper;\n\n\t/**\n\t * The output from the waveshaper node\n\t */\n\toutput = this._shaper;\n\n\tprotected _internalChannels = [this._shaper];\n\n\tconstructor(options?: Partial<WaveShaperOptions>);\n\tconstructor(mapping?: WaveShaperMapping , length?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"])));\n\t\tconst options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n\n\t\tif (isArray(options.mapping) || options.mapping instanceof Float32Array) {\n\t\t\tthis.curve = Float32Array.from(options.mapping);\n\t\t} else if (isFunction(options.mapping)) {\n\t\t\tthis.setMap(options.mapping, options.length);\n\t\t}\n\t}\n\n\tstatic getDefaults(): WaveShaperOptions {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tlength: 1024,\n\t\t});\n\t}\n\n\t/**\n\t *  Uses a mapping function to set the value of the curve.\n\t *  @param mapping The function used to define the values.\n\t *                 The mapping function take two arguments:\n\t *                 the first is the value at the current position\n\t *                 which goes from -1 to 1 over the number of elements\n\t *                 in the curve array. The second argument is the array position.\n\t * @example\n\t * //map the input signal from [-1, 1] to [0, 10]\n\t * shaper.setMap(function(val, index){\n\t * \treturn (val + 1) * 5;\n\t * })\n\t */\n\tsetMap(mapping: WaveShaperMappingFn, length: number = 1024): this {\n\t\tconst array = new Float32Array(length);\n\t\tfor (let i = 0, len = length; i < len; i++) {\n\t\t\tconst normalized = (i / (len - 1)) * 2 - 1;\n\t\t\tarray[i] = mapping(normalized, i);\n\t\t}\n\t\tthis.curve = array;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The array to set as the waveshaper curve. For linear curves\n\t * array length does not make much difference, but for complex curves\n\t * longer arrays will provide smoother interpolation.\n\t */\n\tget curve(): Float32Array | null {\n\t\treturn this._shaper.curve;\n\t}\n\n\tset curve(mapping: Float32Array | null) {\n\t\tthis._shaper.curve = mapping;\n\t}\n\n\t/**\n\t * Specifies what type of oversampling (if any) should be used when\n\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n\t */\n\tget oversample(): OverSampleType {\n\t\treturn this._shaper.oversample;\n\t}\n\n\tset oversample(oversampling: OverSampleType) {\n\t\tconst isOverSampleType = [\"none\", \"2x\", \"4x\"].some(str => str.includes(oversampling));\n\t\tthis.assert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n\t\tthis._shaper.oversample = oversampling;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._shaper.disconnect();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"..//core/util/Defaults\";\nimport { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connectSignal } from \"./Signal\";\n/**\n * A signal operator has an input and output and modifies the signal.\n */\nexport abstract class SignalOperator<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\tconstructor(options?: Partial<Options>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(SignalOperator.getDefaults(), arguments, [\"context\"])));\n\t}\n\n\tconnect(destination: InputNode, outputNum: number = 0, inputNum: number = 0): this {\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator, OscillatorInterface, ToneOscillatorOptions, ToneOscillatorType } from \"./Oscillator\";\n\nexport interface AMOscillatorOptions extends ToneOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationType: ToneOscillatorType;\n}\n\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n *\n * @param frequency The starting frequency of the oscillator.\n * @param type The type of the carrier oscillator.\n * @param modulationType The type of the modulator oscillator.\n * @example\n * //a sine oscillator frequency-modulated by a square wave\n * var fmOsc = new AMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n */\nexport class AMOscillator extends Source<AMOscillatorOptions> implements OscillatorInterface {\n\n\tname = \"AMOscillator\";\n\n\t/**\n\t *  The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator = new Oscillator({context : this.context });\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency> = this._carrier.frequency;\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents> = this._carrier.detune;\n\n\t/**\n\t *  The modulating oscillator\n\t */\n\tprivate _modulator = new Oscillator({ context : this.context });\n\n\t/**\n\t *  convert the -1,1 output to 0,1\n\t */\n\tprivate _modulationScale = new AudioToGain({ context: this.context });\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave.\n\t *  @example\n\t * //pitch the modulator an octave below carrier\n\t * synth.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<Positive> = new Multiply({\n\t\tcontext: this.context,\n\t\tunits: \"positive\",\n\t});\n\n\t/**\n\t *  the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t});\n\n\tconstructor(options?: Partial<AMOscillatorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier.type = options.type;\n\t\tthis._modulator.type = options.modulationType;\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\t\tthis.harmonicity.setValueAtTime(options.harmonicity, 0);\n\n\t\t// connections\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\n\t\tthis.phase = options.phase;\n\n\t\treadOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): AMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationType: \"square\",\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Seconds): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Seconds): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t */\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis._modulationScale.dispose();\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource, OneShotSourceOptions } from \"../OneShotSource\";\n\ninterface ToneOscillatorNodeOptions extends OneShotSourceOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\ttype: OscillatorType;\n}\n\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[Tone.Oscillator](Oscillator) is better for most use-cases***\n *  @extends {Tone.AudioNode}\n *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n *  @param  {Function}  onload  The callback to invoke when the\n *                               buffer is done playing.\n */\nexport class ToneOscillatorNode extends OneShotSource<ToneOscillatorNodeOptions> {\n\n\tname = \"ToneOscillatorNode\";\n\n\t/**\n\t *  The oscillator\n\t */\n\tprivate _oscillator = this.context.createOscillator();\n\tprotected _internalChannels = [this._gainNode, this._oscillator];\n\n\t/**\n\t *  The frequency of the oscillator\n\t */\n\treadonly frequency: Param<\"frequency\">;\n\n\t/**\n\t *  The detune of the oscillator\n\t */\n\treadonly detune: Param<\"cents\">;\n\n\tconstructor(options?: Partial<ToneOscillatorNodeOptions>);\n\tconstructor(\n\t\tfrequency: Frequency,\n\t\ttype: OscillatorType,\n\t);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tconnect(this._oscillator, this._gainNode);\n\n\t\tthis.type = options.type;\n\n\t\tthis.frequency = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._oscillator.frequency,\n\t\t\tunits : \"frequency\",\n\t\t\tvalue : this.toFrequency(options.frequency),\n\t\t});\n\n\t\tthis.detune = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._oscillator.detune,\n\t\t\tunits : \"cents\",\n\t\t\tvalue : options.detune,\n\t\t});\n\t}\n\n\tstatic getDefaults(): ToneOscillatorNodeOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\ttype: \"sine\" as OscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * Start the oscillator node at the given time\n\t * @param  time When to start the oscillator\n\t */\n\tstart(time?: Time): this {\n\t\tthis.log(\"start\", time);\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._startGain(computedTime);\n\t\tthis._oscillator.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\t/**\n\t * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n\t * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n\t */\n\tsetPeriodicWave(periodicWave: PeriodicWave): this {\n\t\tthis._oscillator.setPeriodicWave(periodicWave);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n\t */\n\tget type(): OscillatorType {\n\t\treturn this._oscillator.type;\n\t}\n\tset type(type: OscillatorType) {\n\t\tthis._oscillator.type = type;\n\t}\n\n\t/**\n\t *  Clean up.\n\t *  @return  {OscillatorNode}  this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { noOp } from \"../core/util/Interface\";\nimport { PlaybackState } from \"../core/util/StateTimeline\";\n\nexport interface OneShotSourceOptions extends ToneAudioNodeOptions {\n\tonended: () => void;\n}\n\nexport abstract class OneShotSource<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The callback to invoke after the\n\t *  source is done playing.\n\t */\n\tonended: () => void = noOp;\n\n\t/**\n\t * Sources do not have input nodes\n\t */\n\tinput: undefined;\n\n\t/**\n\t *  The start time\n\t */\n\tprotected _startTime: number = -1;\n\n\t/**\n\t *  The stop time\n\t */\n\tprotected _stopTime: number = -1;\n\n\t/**\n\t * The id of the timeout\n\t */\n\tprivate _timeout: number = -1;\n\n\t/**\n\t * The public output node\n\t */\n\toutput: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain : 0,\n\t});\n\n\t/**\n\t *  The output gain node.\n\t */\n\tprotected _gainNode = this.output;\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time = 0;\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time = 0;\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tprotected _curve: \"linear\" | \"exponential\" = \"linear\";\n\n\tstatic getDefaults(): OneShotSourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tonended : noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Stop the source node\n\t */\n\tprotected abstract _stopSource(time: Seconds): void;\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the node\n\t */\n\tprotected abstract start(time?: Time): this;\n\t/**\n\t * Start the source at the given time\n\t * @param  time When to start the source\n\t */\n\tprotected _startGain(time: Seconds, gain: GainFactor = 1): this {\n\t\tthis.assert(this._startTime === -1, \"Source cannot be started more than once\");\n\t\t// apply a fade in envelope\n\t\tconst fadeInTime = this.toSeconds(this._fadeIn);\n\n\t\t// record the start time\n\t\tthis._startTime = time + fadeInTime;\n\t\tthis._startTime = Math.max(this._startTime, this.context.currentTime);\n\n\t\t// schedule the envelope\n\t\tif (fadeInTime > 0) {\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._gainNode.gain.setValueAtTime(gain, time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source node at the given time.\n\t * @param time When to stop the source\n\t */\n\tstop(time?: Time): this {\n\t\tthis._stopGain(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source at the given time\n\t * @param  time When to stop the source\n\t */\n\tprotected _stopGain(time: Seconds): this {\n\t\tthis.assert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n\t\t// cancel the previous stop\n\t\tthis.cancelStop();\n\n\t\t// the fadeOut time\n\t\tconst fadeOutTime = this.toSeconds(this._fadeOut);\n\n\t\t// schedule the stop callback\n\t\tthis._stopTime = this.toSeconds(time) + fadeOutTime;\n\t\tthis._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\t\tif (fadeOutTime > 0) {\n\t\t\t// start the fade out curve at the given time\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// stop any ongoing ramps, and set the value to 0\n\t\t\tthis._gainNode.gain.cancelAndHoldAtTime(time);\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t}\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._timeout = this.context.setTimeout(() => {\n\t\t\tthis._stopSource(this.now());\n\t\t\tthis.onended();\n\t\t\t// disconnect when it's ended, to free up for garbage collection\n\t\t\tsetTimeout(() => this._gainNode.disconnect(), 100);\n\t\t}, this._stopTime - this.context.currentTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the playback state at the given time\n\t */\n\tgetStateAtTime = function(time: Time): PlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._startTime !== -1 && computedTime >= this._startTime &&\n\t\t\t(this._stopTime === -1 || computedTime <= this._stopTime)) {\n\t\t\treturn \"started\";\n\t\t} else {\n\t\t\treturn \"stopped\";\n\t\t}\n\t};\n\n\t/**\n\t * Get the playback state at the current time\n\t */\n\tget state(): PlaybackState {\n\t\treturn this.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t *  Cancel a scheduled stop event\n\t */\n\tcancelStop(): this {\n\t\tthis.assert(this._startTime !== -1, \"Source is not started\");\n\t\t// cancel the stop envelope\n\t\tthis._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._stopTime = -1;\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { OneShotSource, OneShotSourceOptions } from \"../OneShotSource\";\n\ninterface ToneBufferSourceOptions extends OneShotSourceOptions {\n\tbuffer: ToneAudioBuffer;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tloop: boolean;\n\tonload: () => void;\n}\n\n/**\n *  @class Wrapper around the native BufferSourceNode.\n *  @extends {Tone.AudioNode}\n *  @param  buffer   The buffer to play\n *  @param  onended  The callback to invoke when the buffer is done playing.\n */\nexport class ToneBufferSource extends OneShotSource<ToneBufferSourceOptions> {\n\n\tname = \"ToneBufferSource\";\n\n\t/**\n\t *  The oscillator\n\t */\n\tprivate _source = this.context.createBufferSource();\n\tprotected _internalChannels = [this._gainNode, this._source];\n\n\t/**\n\t *  The frequency of the oscillator\n\t */\n\treadonly playbackRate: Param<Positive>;\n\n\t/**\n\t * The private instance of the buffer object\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * indicators if the source has started/stopped\n\t */\n\tprivate _sourceStarted: boolean = false;\n\tprivate _sourceStopped: boolean = false;\n\n\tconstructor(options?: Partial<ToneBufferSourceOptions>);\n\tconstructor(buffer?: ToneAudioBuffer | AudioBuffer | string, onload?: () => void);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]));\n\t\tconst options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]);\n\n\t\tconnect(this._source, this._gainNode);\n\t\tthis._source.onended = this._stopSource.bind(this);\n\n\t\t/**\n\t\t *  The playbackRate of the buffer\n\t\t */\n\t\tthis.playbackRate = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._source.playbackRate,\n\t\t\tunits : \"positive\",\n\t\t\tvalue : options.playbackRate,\n\t\t});\n\n\t\t// set some values initially\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis._buffer = new ToneAudioBuffer(options.buffer, options.onload);\n\t}\n\n\tstatic getDefaults(): ToneBufferSourceOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tbuffer: new ToneAudioBuffer(),\n\t\t\tcurve: \"linear\",\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tloop: false,\n\t\t\tloopEnd : 0,\n\t\t\tloopStart : 0,\n\t\t\tonload: noOp,\n\t\t\tplaybackRate : 1,\n\t\t});\n\t}\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(t: Time) {\n\t\tthis._fadeIn = t;\n\t}\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(t: Time) {\n\t\tthis._fadeOut = t;\n\t}\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tget curve(): \"linear\" | \"exponential\" {\n\t\treturn this._curve;\n\t}\n\tset curve(t: \"linear\" | \"exponential\") {\n\t\tthis._curve = t;\n\t}\n\n\t/**\n\t *  Start the buffer\n\t *  @param  time When the player should start.\n\t *  @param  offset The offset from the beginning of the sample to start at.\n\t *  @param  duration How long the sample should play. If no duration\n\t *                   is given, it will default to the full length\n\t *                   of the sample (minus any offset)\n\t *  @param  gain  The gain to play the buffer back at.\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time, gain: GainFactor = 1): this {\n\t\tthis.assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n\t\ttime = this.toSeconds(time);\n\n\t\t// apply the gain envelope\n\t\tthis._startGain(time, gain);\n\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this.loop) {\n\t\t\toffset = defaultArg(offset, this.loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\t\toffset = this.toSeconds(offset);\n\t\t// make sure the offset is not less than 0\n\t\toffset = Math.max(offset, 0);\n\n\t\t// start the buffer source\n\t\tif (this.loop) {\n\t\t\t// modify the offset if it's greater than the loop time\n\t\t\tconst loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\t\tconst loopStart = this.toSeconds(this.loopStart);\n\t\t\tconst loopDuration = loopEnd - loopStart;\n\t\t\t// move the offset back\n\t\t\tif (offset >= loopEnd) {\n\t\t\t\toffset = ((offset - loopStart) % loopDuration) + loopStart;\n\t\t\t}\n\t\t}\n\n\t\t// this.buffer.loaded would have return false if the AudioBuffer was undefined\n\t\tthis._source.buffer = this.buffer.get() as AudioBuffer;\n\t\tthis._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\tif (offset < this.buffer.duration) {\n\t\t\tthis._sourceStarted = true;\n\t\t\tthis._source.start(time, offset);\n\t\t}\n\n\t\t// if a duration is given, schedule a stop\n\t\tif (isDefined(duration)) {\n\t\t\tlet computedDur = this.toSeconds(duration);\n\t\t\t// make sure it's never negative\n\t\t\tcomputedDur = Math.max(computedDur, 0);\n\t\t\tthis.stop(time + computedDur);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(): void {\n\t\tif (!this._sourceStopped) {\n\t\t\tthis._sourceStopped = true;\n\t\t\t// allow additional time for the exponential curve to fully decay\n\t\t\tconst additionalTail = this._curve === \"exponential\" ? this.toSeconds(this._fadeOut) * 2 : 0;\n\t\t\tif (this._sourceStarted && this._stopTime !== -1) {\n\t\t\t\tthis._source.stop(this._stopTime + additionalTail);\n\t\t\t}\n\n\t\t\tthis.onended();\n\t\t\t// remove the onended callback\n\t\t\tthis.onended = noOp;\n\n\t\t\t// dispose the source after it's come to a stop\n\t\t\tsetTimeout(() => {\n\t\t\t\t// if it hasn't already been disposed\n\t\t\t\tif (this._source) {\n\t\t\t\t\tthis._source.disconnect();\n\t\t\t\t\tthis._gainNode.disconnect();\n\t\t\t\t}\n\t\t\t}, additionalTail * 1000 + 100);\n\t\t}\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._source.loopStart;\n\t}\n\tset loopStart(loopStart: Time) {\n\t\tthis._source.loopStart = this.toSeconds(loopStart);\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._source.loopEnd;\n\t}\n\tset loopEnd(loopEnd: Time) {\n\t\tthis._source.loopEnd = this.toSeconds(loopEnd);\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t * @memberOf ToneBufferSource#\n\t * @type {Tone.Buffer}\n\t * @name buffer\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer: ToneAudioBuffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._source.loop;\n\t}\n\tset loop(loop: boolean) {\n\t\tthis._source.loop = loop;\n\t\tif (this._sourceStarted) {\n\t\t\tthis.cancelStop();\n\t\t}\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._source.onended = null;\n\t\tthis._source.disconnect();\n\t\tthis._buffer.dispose();\n\t\tthis.playbackRate.dispose();\n\t\treturn this;\n\t}\n}\n","import { noOp } from \"../util/Interface\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\nexport interface TransportEventOptions {\n\tcallback: (time: number) => void;\n\tonce: boolean;\n\ttime: Ticks;\n}\n\n/**\n * TransportEvent is an internal class used by (Tone.Transport)[Transport]\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n * @param Transport The transport object which the event belongs to\n */\nexport class TransportEvent {\n\n\t/**\n\t * Reference to the Transport that created it\n\t */\n\tprotected transport: Transport;\n\n\t/**\n\t * The unique id of the event\n\t */\n\tid: number = TransportEvent._eventId++;\n\n\t/**\n\t * The time the event starts\n\t */\n\ttime: Ticks;\n\n\t/**\n\t * The callback to invoke\n\t */\n\tprivate callback?: (time: Seconds) => void;\n\n\t/**\n\t * If the event should be removed after being invoked.\n\t */\n\tprivate _once: boolean;\n\n\tconstructor(transport: Transport, opts: Partial<TransportEventOptions>) {\n\n\t\tconst options: TransportEventOptions = Object.assign(TransportEvent.getDefaults(), opts);\n\n\t\tthis.transport = transport;\n\t\tthis.callback = options.callback;\n\t\tthis._once = options.once;\n\t\tthis.time = options.time;\n\t}\n\n\tstatic getDefaults(): TransportEventOptions {\n\t\treturn {\n\t\t\tcallback: noOp,\n\t\t\tonce: false,\n\t\t\ttime: 0,\n\t\t};\n\t}\n\n\t/**\n\t * Current ID counter\n\t */\n\tprivate static _eventId: number = 0;\n\n\t/**\n\t * Invoke the event callback.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\tif (this.callback) {\n\t\t\tthis.callback(time);\n\t\t\tif (this._once) {\n\t\t\t\tthis.transport.clear(this.id);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tthis.callback = undefined;\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface VolumeOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  @class Volume is a simple volume node, useful for creating a volume fader.\n *\n *  @extends {Tone.AudioNode}\n *  @constructor\n *  @param {Decibels} [volume=0] the initial volume\n *  @example\n * var vol = new Volume(-12);\n * instrument.chain(vol, Tone.Master);\n */\nexport class Volume extends ToneAudioNode<VolumeOptions> {\n\n\tname = \"Volume\";\n\n\t/**\n\t * the output node\n\t */\n\toutput: Gain<Decibels> = new Gain({\n\t\tcontext: this.context,\n\t\tunits: \"decibels\",\n\t});\n\tprotected _internalChannels = [this.output];\n\n\t/**\n\t * Input and output are the same\n\t */\n\tinput = this.output;\n\n\t/**\n\t * The unmuted volume\n\t */\n\tprivate _unmutedVolume: Decibels;\n\n\t/**\n\t *  The volume control in decibels.\n\t */\n\tvolume: Param<Decibels> = this.output.gain;\n\n\tconstructor(options?: Decibels | Partial<VolumeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n\n\t\tthis.volume.value = options.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis._unmutedVolume = options.volume;\n\n\t\t// set the mute initially\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): VolumeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * volume.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.volume.value === -Infinity;\n\t}\n\tset mute(mute: boolean) {\n\t\tif (!this.mute && mute) {\n\t\t\tthis._unmutedVolume = this.volume.value;\n\t\t\t// maybe it should ramp here?\n\t\t\tthis.volume.value = -Infinity;\n\t\t} else if (this.mute && !mute) {\n\t\t\tthis.volume.value = this._unmutedVolume;\n\t\t}\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tthis.input.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n","import { Tone } from \"../Tone\";\nimport { isDefined } from \"./TypeCheck\";\n\n/**\n * An IntervalTimeline event must have a time and duration\n */\nexport interface IntervalTimelineEvent {\n\ttime: number;\n\tduration: number;\n\t[propName: string]: any;\n}\n\n/**\n * Similar to Tone.Timeline, but all events represent\n * intervals with both \"time\" and \"duration\" times. The\n * events are placed in a tree structure optimized\n * for querying an intersection point with the timeline\n * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n * to represent the data.\n */\nexport class IntervalTimeline extends Tone {\n\n\tname = \"IntervalTimeline\";\n\n\t/**\n\t *  The root node of the inteval tree\n\t */\n\tprivate _root: IntervalNode | null = null;\n\n\t/**\n\t *  Keep track of the length of the timeline.\n\t */\n\tprivate _length: number = 0;\n\n\t/**\n\t *  The event to add to the timeline. All events must\n\t *  have a time and duration value\n\t *  @param  event  The event to add to the timeline\n\t */\n\tadd(event: IntervalTimelineEvent): this {\n\t\tthis.assert(isDefined(event.time), \"Events must have a time property\");\n\t\tthis.assert(isDefined(event.duration), \"Events must have a duration parameter\");\n\n\t\tevent.time = event.time.valueOf();\n\t\tlet node: IntervalNode | null = new IntervalNode(event.time, event.time + event.duration, event);\n\t\tif (this._root === null) {\n\t\t\tthis._root = node;\n\t\t} else {\n\t\t\tthis._root.insert(node);\n\t\t}\n\t\tthis._length++;\n\t\t// Restructure tree to be balanced\n\t\twhile (node !== null) {\n\t\t\tnode.updateHeight();\n\t\t\tnode.updateMax();\n\t\t\tthis._rebalance(node);\n\t\t\tnode = node.parent;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  event  The event to remove from the timeline\n\t */\n\tremove(event: IntervalTimelineEvent): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(event.time, results);\n\t\t\tfor (const node of results) {\n\t\t\t\tif (node.event === event) {\n\t\t\t\t\tthis._removeNode(node);\n\t\t\t\t\tthis._length--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The number of items in the timeline.\n\t *  @readOnly\n\t */\n\tget length(): number {\n\t\treturn this._length;\n\t}\n\n\t/**\n\t *  Remove events whose time time is after the given time\n\t *  @param  time  The time to query.\n\t */\n\tcancel(after: number): this {\n\t\tthis.forEachFrom(after, event => this.remove(event));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Set the root node as the given node\n\t */\n\tprivate _setRoot(node: IntervalNode | null): void {\n\t\tthis._root = node;\n\t\tif (this._root !== null) {\n\t\t\tthis._root.parent = null;\n\t\t}\n\t}\n\n\t/**\n\t *  Replace the references to the node in the node's parent\n\t *  with the replacement node.\n\t */\n\tprivate _replaceNodeInParent(node: IntervalNode, replacement: IntervalNode | null): void {\n\t\tif (node.parent !== null) {\n\t\t\tif (node.isLeftChild()) {\n\t\t\t\tnode.parent.left = replacement;\n\t\t\t} else {\n\t\t\t\tnode.parent.right = replacement;\n\t\t\t}\n\t\t\tthis._rebalance(node.parent);\n\t\t} else {\n\t\t\tthis._setRoot(replacement);\n\t\t}\n\t}\n\n\t/**\n\t *  Remove the node from the tree and replace it with\n\t *  a successor which follows the schema.\n\t */\n\tprivate _removeNode(node): void {\n\t\tif (node.left === null && node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, null);\n\t\t} else if (node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, node.left);\n\t\t} else if (node.left === null) {\n\t\t\tthis._replaceNodeInParent(node, node.right);\n\t\t} else {\n\t\t\tconst balance = node.getBalance();\n\t\t\tlet replacement: IntervalNode;\n\t\t\tlet temp: IntervalNode | null = null;\n\t\t\tif (balance > 0) {\n\t\t\t\tif (node.left.right === null) {\n\t\t\t\t\treplacement = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\ttemp = replacement;\n\t\t\t\t} else {\n\t\t\t\t\treplacement = node.left.right;\n\t\t\t\t\twhile (replacement.right !== null) {\n\t\t\t\t\t\treplacement = replacement.right;\n\t\t\t\t\t}\n\t\t\t\t\tif (replacement.parent) {\n\t\t\t\t\t\treplacement.parent.right = replacement.left;\n\t\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (node.right.left === null) {\n\t\t\t\treplacement = node.right;\n\t\t\t\treplacement.left = node.left;\n\t\t\t\ttemp = replacement;\n\t\t\t} else {\n\t\t\t\treplacement = node.right.left;\n\t\t\t\twhile (replacement.left !== null) {\n\t\t\t\t\treplacement = replacement.left;\n\t\t\t\t}\n\t\t\t\tif (replacement.parent) {\n\t\t\t\t\treplacement.parent.left = replacement.right;\n\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (node.parent !== null) {\n\t\t\t\tif (node.isLeftChild()) {\n\t\t\t\t\tnode.parent.left = replacement;\n\t\t\t\t} else {\n\t\t\t\t\tnode.parent.right = replacement;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._setRoot(replacement);\n\t\t\t}\n\t\t\tif (temp) {\n\t\t\t\tthis._rebalance(temp);\n\t\t\t}\n\t\t}\n\t\tnode.dispose();\n\t}\n\n\t/**\n\t *  Rotate the tree to the left\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\t_rotateLeft(node): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.right the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.right;\n\t\tnode.right = pivotNode.left;\n\t\tpivotNode.left = node;\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t *  Rotate the tree to the right\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\t_rotateRight(node): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.left the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.left;\n\t\tnode.left = pivotNode.right;\n\t\tpivotNode.right = node;\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t *  Balance the BST\n\t */\n\tprivate _rebalance(node: IntervalNode): void {\n\t\tconst balance = node.getBalance();\n\t\tif (balance > 1 && node.left) {\n\t\t\tif (node.left.getBalance() < 0) {\n\t\t\t\tthis._rotateLeft(node.left);\n\t\t\t} else {\n\t\t\t\tthis._rotateRight(node);\n\t\t\t}\n\t\t} else if (balance < -1 && node.right) {\n\t\t\tif (node.right.getBalance() > 0) {\n\t\t\t\tthis._rotateRight(node.right);\n\t\t\t} else {\n\t\t\t\tthis._rotateLeft(node);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Get an event whose time and duration span the give time. Will\n\t *  return the match whose \"time\" value is closest to the given time.\n\t *  @return  The event which spans the desired time\n\t */\n\tget(time: number): IntervalTimelineEvent | null {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tif (results.length > 0) {\n\t\t\t\tlet max = results[0];\n\t\t\t\tfor (let i = 1; i < results.length; i++) {\n\t\t\t\t\tif (results[i].low > max.low) {\n\t\t\t\t\t\tmax = results[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn max.event;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t *  Iterate over everything in the timeline.\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: IntervalTimelineEvent) => void): this {\n\t\tif (this._root !== null) {\n\t\t\tconst allNodes: IntervalNode[] = [];\n\t\t\tthis._root.traverse(node => allNodes.push(node));\n\t\t\tallNodes.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array in which the given time\n\t *  overlaps with the time and duration time of the event.\n\t *  @param  time The time to check if items are overlapping\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: IntervalTimelineEvent) => void): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array in which the time is greater\n\t *  than or equal to the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time, callback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.searchAfter(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tif (this._root !== null) {\n\t\t\tthis._root.traverse(node => node.dispose());\n\t\t}\n\t\tthis._root = null;\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tINTERVAL NODE HELPER\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Represents a node in the binary search tree, with the addition\n *  of a \"high\" value which keeps track of the highest value of\n *  its children.\n *  References:\n *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n *  @param low\n *  @param high\n */\n// tslint:disable-next-line: max-classes-per-file\nclass IntervalNode {\n\n\t// the event container\n\tevent: IntervalTimelineEvent | null;\n\t// the low value\n\tlow: number;\n\t// the high value\n\thigh: number;\n\t// the high value for this and all child nodes\n\tmax: number;\n\t// the nodes to the left\n\tprivate _left: IntervalNode | null = null;\n\t// the nodes to the right\n\tprivate _right: IntervalNode | null = null;\n\t// the parent node\n\tparent: IntervalNode | null = null;\n\t// the number of child nodes\n\theight: number = 0;\n\n\tconstructor(low, high, event) {\n\t\tthis.event = event;\n\t\t// the low value\n\t\tthis.low = low;\n\t\t// the high value\n\t\tthis.high = high;\n\t\t// the high value for this and all child nodes\n\t\tthis.max = this.high;\n\t}\n\n\t/**\n\t *  Insert a node into the correct spot in the tree\n\t */\n\tinsert(node: IntervalNode): void {\n\t\tif (node.low <= this.low) {\n\t\t\tif (this.left === null) {\n\t\t\t\tthis.left = node;\n\t\t\t} else {\n\t\t\t\tthis.left.insert(node);\n\t\t\t}\n\t\t} else if (this.right === null) {\n\t\t\tthis.right = node;\n\t\t} else {\n\t\t\tthis.right.insert(node);\n\t\t}\n\t}\n\n\t/**\n\t *  Search the tree for nodes which overlap\n\t *  with the given point\n\t *  @param  point  The point to query\n\t *  @param  results  The array to put the results\n\t */\n\tsearch(point: number, results: IntervalNode[]): void {\n\t\t// If p is to the right of the rightmost point of any interval\n\t\t// in this node and all children, there won't be any matches.\n\t\tif (point > this.max) {\n\t\t\treturn;\n\t\t}\n\t\t// Search left children\n\t\tif (this.left !== null) {\n\t\t\tthis.left.search(point, results);\n\t\t}\n\t\t// Check this node\n\t\tif (this.low <= point && this.high > point) {\n\t\t\tresults.push(this);\n\t\t}\n\t\t// If p is to the left of the time of this interval,\n\t\t// then it can't be in any child to the right.\n\t\tif (this.low > point) {\n\t\t\treturn;\n\t\t}\n\t\t// Search right children\n\t\tif (this.right !== null) {\n\t\t\tthis.right.search(point, results);\n\t\t}\n\t}\n\n\t/**\n\t *  Search the tree for nodes which are less\n\t *  than the given point\n\t *  @param  point  The point to query\n\t *  @param  results  The array to put the results\n\t */\n\tsearchAfter(point: number, results: IntervalNode[]): void {\n\t\t// Check this node\n\t\tif (this.low >= point) {\n\t\t\tresults.push(this);\n\t\t\tif (this.left !== null) {\n\t\t\t\tthis.left.searchAfter(point, results);\n\t\t\t}\n\t\t}\n\t\t// search the right side\n\t\tif (this.right !== null) {\n\t\t\tthis.right.searchAfter(point, results);\n\t\t}\n\t}\n\n\t/**\n\t *  Invoke the callback on this element and both it's branches\n\t *  @param  {Function}  callback\n\t */\n\ttraverse(callback: (self: IntervalNode) => void): void {\n\t\tcallback(this);\n\t\tif (this.left !== null) {\n\t\t\tthis.left.traverse(callback);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.right.traverse(callback);\n\t\t}\n\t}\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tupdateHeight(): void {\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tthis.height = Math.max(this.left.height, this.right.height) + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tthis.height = this.right.height + 1;\n\t\t} else if (this.left !== null) {\n\t\t\tthis.height = this.left.height + 1;\n\t\t} else {\n\t\t\tthis.height = 0;\n\t\t}\n\t}\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tupdateMax(): void {\n\t\tthis.max = this.high;\n\t\tif (this.left !== null) {\n\t\t\tthis.max = Math.max(this.max, this.left.max);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.max = Math.max(this.max, this.right.max);\n\t\t}\n\t}\n\n\t/**\n\t *  The balance is how the leafs are distributed on the node\n\t *  @return  Negative numbers are balanced to the right\n\t */\n\tgetBalance(): number {\n\t\tlet balance = 0;\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tbalance = this.left.height - this.right.height;\n\t\t} else if (this.left !== null) {\n\t\t\tbalance = this.left.height + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tbalance = -(this.right.height + 1);\n\t\t}\n\t\treturn balance;\n\t}\n\n\t/**\n\t *  @returns true if this node is the left child of its parent\n\t */\n\tisLeftChild(): boolean {\n\t\treturn this.parent !== null && this.parent.left === this;\n\t}\n\n\t/**\n\t *  get/set the left node\n\t */\n\tget left(): IntervalNode | null {\n\t\treturn this._left;\n\t}\n\n\tset left(node: IntervalNode | null) {\n\t\tthis._left = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t *  get/set the right node\n\t */\n\tget right(): IntervalNode | null {\n\t\treturn this._right;\n\t}\n\n\tset right(node: IntervalNode | null) {\n\t\tthis._right = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t *  null out references.\n\t */\n\tdispose(): void {\n\t\tthis.parent = null;\n\t\tthis._left = null;\n\t\tthis._right = null;\n\t\tthis.event = null;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter, EmitterEventObject } from \"../util/Emitter\";\nimport { noOp, readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline } from \"../util/StateTimeline\";\nimport { TickSignal } from \"./TickSignal\";\nimport { TickSource } from \"./TickSource\";\n\ntype ClockCallback = (time: Time, ticks?: Ticks) => void;\n\ninterface ClockOptions extends ToneWithContextOptions {\n\tfrequency: number;\n\tcallback: ClockCallback;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ntype ClockEvent = \"start\" | \"stop\" | \"pause\";\n\n/**\n * A sample accurate clock which provides a callback at the given rate.\n * While the callback is not sample-accurate (it is still susceptible to\n * loose JS timing), the time passed in as the argument to the callback\n * is precise. For most applications, it is better to use Tone.Transport\n * instead of the Clock by itself since you can synchronize multiple callbacks.\n *\n * @param callback The callback to be invoked with the time of the audio event\n * @param frequency The rate of the callback\n * @example\n * //the callback will be invoked approximately once a second\n * //and will print the time exactly once a second apart.\n * const clock = new Clock(time => {\n * \tconsole.log(time);\n * }, 1);\n */\nexport class Clock<Type extends BPM | Hertz = Hertz>\nextends ToneWithContext<ClockOptions> implements Emitter<ClockEvent> {\n\n\tname = \"Clock\";\n\n\t/**\n\t *  The callback function to invoke at the scheduled tick.\n\t */\n\tcallback: ClockCallback = noOp;\n\n\t/**\n\t *  The tick counter\n\t */\n\tprivate _tickSource: TickSource<Type>;\n\n\t/**\n\t *  The last time the loop callback was invoked\n\t */\n\tprivate _lastUpdate: number = 0;\n\n\t/**\n\t *  Keep track of the playback state\n\t */\n\tprivate _state: StateTimeline = new StateTimeline(\"stopped\");\n\n\t/**\n\t * Context bound reference to the _loop method\n\t * This is necessary to remove the event in the end.\n\t */\n\tprivate _boundLoop: () => void = this._loop.bind(this);\n\n\t/**\n\t *  The rate the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<Type>;\n\n\tconstructor(options: Partial<ClockOptions>);\n\tconstructor(callback?: ClockCallback, frequency?: Frequency);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]));\n\t\tconst options = optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]);\n\n\t\tthis.callback = options.callback;\n\t\tthis._tickSource = new TickSource({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tunits: options.units,\n\t\t});\n\t\tthis._lastUpdate = 0;\n\t\tthis.frequency = this._tickSource.frequency;\n\t\treadOnly(this, \"frequency\");\n\n\t\t// add an initial state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\n\t\t// bind a callback to the worker thread\n\t\tthis.context.on(\"tick\", this._boundLoop);\n\t}\n\n\tstatic getDefaults(): ClockOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback: noOp as ClockCallback,\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\",\n\t\t}) as ClockOptions;\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  time    The time the clock should start\n\t *  @param offset  Where the tick counter starts counting from.\n\t */\n\tstart(time?: Time, offset?: Ticks): this {\n\t\t// make sure the context is started\n\t\tthis.context.resume();\n\t\t// start the loop\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis._tickSource.start(computedTime, offset);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"start\", computedTime, offset);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t *  @param time The time when the clock should stop.\n\t *  @returns {Clock} this\n\t *  @example\n\t * clock.stop();\n\t */\n\tstop(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis._tickSource.stop(computedTime);\n\t\tif (computedTime < this._lastUpdate) {\n\t\t\tthis.emit(\"stop\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param time The time when the clock should stop.\n\t */\n\tpause(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t\tthis._tickSource.pause(computedTime);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"pause\", computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The number of times the callback was invoked. Starts counting at 0\n\t *  and increments after the callback was invoked.\n\t */\n\tget ticks(): Ticks {\n\t\treturn Math.ceil(this.getTicksAtTime(this.now()));\n\t}\n\tset ticks(t: Ticks) {\n\t\tthis._tickSource.ticks = t;\n\t}\n\n\t/**\n\t *  The time since ticks=0 that the Clock has been running. Accounts for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._tickSource.seconds;\n\t}\n\tset seconds(s: Seconds) {\n\t\tthis._tickSource.seconds = s;\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._tickSource.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\tthis._tickSource.setTicksAtTime(ticks, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\treturn this._tickSource.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the next tick\n\t * @param  ticks The tick number.\n\t */\n\tnextTickTime(offset: Ticks, when: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst currentTick = this.getTicksAtTime(computedTime);\n\t\treturn this._tickSource.getTimeOfTick(currentTick + offset, computedTime);\n\t}\n\n\t/**\n\t *  The scheduling loop.\n\t */\n\tprivate _loop(): void {\n\n\t\tconst startTime = this._lastUpdate;\n\t\tconst endTime = this.now();\n\t\tthis._lastUpdate = endTime;\n\n\t\tif (startTime !== endTime) {\n\t\t\t// the state change events\n\t\t\tthis._state.forEachBetween(startTime, endTime, e => {\n\t\t\t\tswitch (e.state) {\n\t\t\t\t\tcase \"started\" :\n\t\t\t\t\t\tconst offset = this._tickSource.getTicksAtTime(e.time);\n\t\t\t\t\t\tthis.emit(\"start\", e.time, offset);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"stopped\" :\n\t\t\t\t\t\tif (e.time !== 0) {\n\t\t\t\t\t\t\tthis.emit(\"stop\", e.time);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"paused\" :\n\t\t\t\t\t\tthis.emit(\"pause\", e.time);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t\t// the tick callbacks\n\t\t\tthis._tickSource.forEachTickBetween(startTime, endTime, (time, ticks) => {\n\t\t\t\tthis.callback(time, ticks);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Returns the scheduled state at the given time.\n\t * @param  time  The time to query.\n\t * @return  The name of the state input in setStateAtTime.\n\t * @example\n\t * clock.start(\"+0.1\");\n\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tgetStateAtTime(time: Time): PlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(computedTime);\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tthis.context.off(\"tick\", this._boundLoop);\n\t\tthis._tickSource.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t///////////////////////////////////////////////////////////////////////\n\n\ton!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\tonce!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\toff!: (event: ClockEvent, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Clock);\n","import { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions\";\nimport { ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\n\nexport type FrequencyUnit = TimeBaseUnit | \"midi\";\n\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `eval` method.\n * @example\n * Frequency(\"C3\") // 261\n * Frequency(38, \"midi\") //\n * Frequency(\"C3\").transpose(4);\n */\nexport class FrequencyClass<Type extends number = Hertz> extends TimeClass<Type, FrequencyUnit> {\n\n\tname = \"Frequency\";\n\n\treadonly defaultUnits: FrequencyUnit = \"hz\";\n\n\t/**\n\t * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n\t * to generate all the other pitch values from notes. A4's values in Hertz.\n\t */\n\tstatic get A4(): Hertz {\n\t\treturn getA4();\n\t}\n\tstatic set A4(freq: Hertz) {\n\t\tsetA4(freq);\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tAUGMENT BASE EXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign({}, super._getExpressions(), {\n\t\t\tmidi : {\n\t\t\t\tregexp : /^(\\d+(?:\\.\\d+)?midi)/,\n\t\t\t\tmethod(value): number {\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(value);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tnote : {\n\t\t\t\tregexp : /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t\t\t\tmethod(pitch, octave): number {\n\t\t\t\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\t\t\t\tconst noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn noteNumber;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(noteNumber);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\ttr : {\n\t\t\t\tregexp : /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t\t\tmethod(m, q, s): number {\n\t\t\t\t\tlet total = 1;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total;\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tEXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Transposes the frequency by the given number of semitones.\n\t *  @return  A new transposed frequency\n\t *  @example\n\t * Frequency(\"A4\").transpose(3); //\"C5\"\n\t */\n\ttranspose(interval: Interval): FrequencyClass {\n\t\treturn new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n\t}\n\n\t/**\n\t *  Takes an array of semitone intervals and returns\n\t *  an array of frequencies transposed by those intervals.\n\t *  @return  Returns an array of Frequencies\n\t *  @example\n\t * Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t */\n\tharmonize(intervals: Interval[]): FrequencyClass[] {\n\t\treturn intervals.map(interval => {\n\t\t\treturn this.transpose(interval);\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Return the value of the frequency as a MIDI note\n\t *  @return  {MIDI}\n\t *  @example\n\t * Frequency(\"C4\").toMidi(); //60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.valueOf());\n\t}\n\n\t/**\n\t *  Return the value of the frequency in Scientific Pitch Notation\n\t *  @return  {Note}\n\t *  @example\n\t * Frequency(69, \"midi\").toNote(); //\"A4\"\n\t */\n\ttoNote(): Note {\n\t\tconst freq = this.toFrequency();\n\t\tconst log = Math.log2(freq / FrequencyClass.A4);\n\t\tlet noteNumber = Math.round(12 * log) + 57;\n\t\tconst octave = Math.floor(noteNumber / 12);\n\t\tif (octave < 0) {\n\t\t\tnoteNumber += -12 * octave;\n\t\t}\n\t\tconst noteName = scaleIndexToNote[noteNumber % 12];\n\t\treturn noteName + octave.toString();\n\t}\n\n\t/**\n\t *  Return the duration of one cycle in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn 1 / super.toSeconds();\n\t}\n\n\t/**\n\t *  Return the duration of one cycle in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.floor(quarters * this._getPPQ());\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS HELPERS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  With no arguments, return 0\n\t */\n\tprotected _noArg(): Type {\n\t\treturn 0 as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn freq as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn 1 / ((ticks * 60) / (this._getBpm() * this._getPPQ())) as Type;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn 1 / super._beatsToUnits(beats) as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn 1 / seconds as Type;\n\t}\n\n\t/**\n\t * Convert a MIDI note to frequency value.\n\t * @param  midi The midi number to convert.\n\t * @return The corresponding frequency value\n\t * @example\n\t * FrequencyClass.mtof(69); // returns 440\n\t */\n\tstatic mtof(midi: MidiNote): Hertz {\n\t\treturn mtof(midi);\n\t}\n\n\t/**\n\t * Convert a frequency value to a MIDI note.\n\t * @param frequency The value to frequency value to convert.\n\t * @example\n\t * Frequency.ftom(440); // returns 69\n\t */\n\tstatic ftom(frequency: Hertz): MidiNote {\n\t\treturn ftom(frequency);\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tFREQUENCY CONVERSIONS\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Note to scale index\n *  @type  {Object}\n *  @private\n */\nconst noteToScaleIndex = {\n\t// tslint:disable-next-line\n\t\"cbb\" : -2, \"cb\" : -1, \"c\" : 0, \"c#\" : 1, \"cx\" : 2,\n\t\"dbb\" : 0, \"db\" : 1, \"d\" : 2, \"d#\" : 3, \"dx\" : 4,\n\t\"ebb\" : 2, \"eb\" : 3, \"e\" : 4, \"e#\" : 5, \"ex\" : 6,\n\t\"fbb\" : 3, \"fb\" : 4, \"f\" : 5, \"f#\" : 6, \"fx\" : 7,\n\t\"gbb\" : 5, \"gb\" : 6, \"g\" : 7, \"g#\" : 8, \"gx\" : 9,\n\t\"abb\" : 7, \"ab\" : 8, \"a\" : 9, \"a#\" : 10, \"ax\" : 11,\n\t\"bbb\" : 9, \"bb\" : 10, \"b\" : 11, \"b#\" : 12, \"bx\" : 13,\n};\n\n/**\n *  scale index to note (sharps)\n *  @type  {Array}\n *  @private\n */\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n/**\n * Convert a value into a FrequencyClass object.\n */\nexport function Frequency(value?: TimeValue | Frequency, units?: FrequencyUnit): FrequencyClass {\n\treturn new FrequencyClass(getContext(), value, units);\n}\n","export const version = \"14.0.10\";\n","import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isNumber, isString } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { AMOscillator, AMOscillatorOptions } from \"./AMOscillator\";\nimport { FatOscillator, FatOscillatorOptions } from \"./FatOscillator\";\nimport { FMOscillator, FMOscillatorOptions } from \"./FMOscillator\";\nimport { Oscillator, OscillatorInterface,\n\tToneOscillatorBaseType, ToneOscillatorOptions,\n\tToneOscillatorType } from \"./Oscillator\";\nimport { PulseOscillator, PulseOscillatorOptions } from \"./PulseOscillator\";\nimport { PWMOscillator, PWMOscillatorOptions } from \"./PWMOscillator\";\n\n/**\n * All of the oscillator types that OmniOscillator can take on\n */\ntype AnyOscillator = Oscillator | PWMOscillator | PulseOscillator | FatOscillator | AMOscillator | FMOscillator;\n\n/**\n * The constructor of each of the OmniOscillator types\n */\ntype TypeofAnyOscillator = typeof Oscillator | typeof PWMOscillator |\n\ttypeof PulseOscillator | typeof FatOscillator |\n\ttypeof AMOscillator | typeof FMOscillator;\n\n/**\n * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n * when it's not.\n */\ntype OmniOscillatorType = string;\n\ninterface OmniOscillatorOptions extends ToneOscillatorOptions {\n\ttype: OmniOscillatorType;\n}\n\n/**\n * Select the Oscillator's Options depending on the generic type.\n */\ntype ConditionalOptions<Osc extends AnyOscillator> =\n\tOsc extends FMOscillator ? FMOscillatorOptions :\n\tOsc extends Oscillator ? ToneOscillatorOptions :\n\tOsc extends AMOscillator ? AMOscillatorOptions :\n\tOsc extends FatOscillator ? FatOscillatorOptions :\n\tOsc extends PulseOscillator ? PulseOscillatorOptions :\n\tOsc extends PWMOscillator ? PWMOscillatorOptions :\n\tToneOscillatorOptions;\n\n/**\n * All of the Oscillator constructor types mapped to their name.\n */\ninterface OmniOscillatorSource {\n\t\"fm\": FMOscillator;\n\t\"am\": AMOscillator;\n\t\"pwm\": PWMOscillator;\n\t\"pulse\": PulseOscillator;\n\t\"oscillator\": Oscillator;\n\t\"fat\": FatOscillator;\n}\n\n/**\n * The available oscillator types.\n */\nexport type OmniOscSourceType = keyof OmniOscillatorSource;\n\n// Conditional Types\ntype IsAmOrFmOscillator<Osc, Ret> = Osc extends AMOscillator ? Ret : Osc extends FMOscillator ? Ret : undefined;\ntype IsFatOscillator<Osc, Ret> = Osc extends FatOscillator ? Ret : undefined;\ntype IsPWMOscillator<Osc, Ret> = Osc extends PWMOscillator ? Ret : undefined;\ntype IsPulseOscillator<Osc, Ret> = Osc extends PulseOscillator ? Ret : undefined;\ntype IsFMOscillator<Osc, Ret> = Osc extends FMOscillator ? Ret : undefined;\n\n// tslint:disable-next-line: variable-name\nconst OmniOscillatorSourceMap: {\n\t[key in OmniOscSourceType] : TypeofAnyOscillator\n} = {\n\tam: AMOscillator,\n\tfat: FatOscillator,\n\tfm: FMOscillator,\n\toscillator: Oscillator,\n\tpulse: PulseOscillator,\n\tpwm: PWMOscillator,\n};\n\n/**\n * OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n * Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n * into one class. The oscillator class can be changed by setting the `type`.\n * `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n * any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n * will use the FMOscillator, AMOscillator or FatOscillator respectively.\n * For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n * to a FatOscillator of type \"sawtooth\".\n *\n * @param frequency The initial frequency of the oscillator.\n * @param type The type of the oscillator.\n * @example\n * var omniOsc = new OmniOscillator(\"C#4\", \"pwm\");\n */\nexport class OmniOscillator<OscType extends AnyOscillator>\nextends Source<OmniOscillatorOptions> implements OscillatorInterface {\n\n\tname = \"OmniOscillator\";\n\n\t/**\n\t *  The frequency control.\n\t */\n\treadonly frequency: Signal<Frequency> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"frequency\",\n\t});\n\n\t/**\n\t *  The detune control.\n\t */\n\treadonly detune: Signal<Cents> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"cents\",\n\t});\n\n\t/**\n\t * The oscillator that can switch types\n\t */\n\tprivate _oscillator!: AnyOscillator;\n\n\t/**\n\t *  the type of the oscillator source\n\t */\n\tprivate _sourceType!: OmniOscSourceType;\n\n\tconstructor(options?: Partial<ConditionalOptions<OscType>>);\n\tconstructor(frequency?: Frequency, type?: OmniOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\n\t\t// // set the oscillator\n\t\t// this.type = options.type;\n\t\t// set the options\n\t\tthis.set<Oscillator>(options);\n\t}\n\n\tstatic getDefaults(): OmniOscillatorOptions {\n\t\treturn Oscillator.getDefaults();\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._oscillator.start(time);\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\trestart(time?: Time): this {\n\t\tthis._oscillator.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n\t * when it's not.\n\t * @example\n\t * omniOsc.type = \"pwm\";\n\t * //modulationFrequency is parameter which is available\n\t * //only when the type is \"pwm\".\n\t * omniOsc.modulationFrequency.value = 0.5;\n\t * @example\n\t * //an square wave frequency modulated by a sawtooth\n\t * omniOsc.type = \"fmsquare\";\n\t * omniOsc.modulationType = \"sawtooth\";\n\t */\n\tget type(): OmniOscillatorType {\n\t\tlet prefix = \"\";\n\t\tif ([\"am\", \"fm\", \"fat\"].some(p => this._sourceType === p)) {\n\t\t\tprefix = this._sourceType;\n\t\t}\n\t\treturn prefix + this._oscillator.type;\n\t}\n\tset type(type) {\n\t\tif (type.substr(0, 2) === \"fm\") {\n\t\t\tthis._createNewOscillator(\"fm\");\n\t\t\tthis._oscillator = this._oscillator as FMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2);\n\t\t} else if (type.substr(0, 2) === \"am\") {\n\t\t\tthis._createNewOscillator(\"am\");\n\t\t\tthis._oscillator = this._oscillator as AMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2);\n\t\t} else if (type.substr(0, 3) === \"fat\") {\n\t\t\tthis._createNewOscillator(\"fat\");\n\t\t\tthis._oscillator = this._oscillator as FatOscillator;\n\t\t\tthis._oscillator.type = type.substr(3);\n\t\t} else if (type === \"pwm\") {\n\t\t\tthis._createNewOscillator(\"pwm\");\n\t\t\tthis._oscillator = this._oscillator as PWMOscillator;\n\t\t} else if (type === \"pulse\") {\n\t\t\tthis._createNewOscillator(\"pulse\");\n\t\t} else {\n\t\t\tthis._createNewOscillator(\"oscillator\");\n\t\t\tthis._oscillator = this._oscillator as Oscillator;\n\t\t\tthis._oscillator.type = type;\n\t\t}\n\t}\n\n\t/**\n\t * The partials of the waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillator.partials;\n\t}\n\tset partials(partials) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partials = partials;\n\t\t}\n\t}\n\n\t/**\n\t * The partial count of the oscillator. This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * @example\n\t * //set the maximum number of partials\n\t * osc.partialCount = 0;\n\t */\n\tget partialCount(): number {\n\t\treturn this._oscillator.partialCount;\n\t}\n\tset partialCount(partialCount) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partialCount = partialCount;\n\t\t}\n\t}\n\n\t/**\n\t * Set the parameters at once. Either pass in an\n\t * object mapping parameters to values, or to set a\n\t * single parameter, by passing in a string and value.\n\t * The last argument is an optional ramp time which\n\t * will ramp any signal values to their destination value\n\t * over the duration of the rampTime.\n\t * @param  params\n\t * @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : \"highpass\"\n\t * });\n\t */\n\tset<Osc extends AnyOscillator = OscType>(props: Partial<ConditionalOptions<Osc>>): this {\n\t\t// make sure the type is set first\n\t\tif (Reflect.has(props, \"type\") && props.type) {\n\t\t\tthis.type = props.type;\n\t\t\t// delete props.type;\n\t\t}\n\t\t// then set the rest\n\t\tsuper.set(props);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the object's attributes. Given no arguments get\n\t *  will return all available object properties and their corresponding\n\t *  values. Pass in a single attribute to retrieve or an array\n\t *  of attributes. The attribute strings can also include a \".\"\n\t *  to access deeper properties.\n\t */\n\tget<Osc extends AnyOscillator = OscType>(): ConditionalOptions<Osc> {\n\t\tconst options = this._oscillator.get();\n\t\toptions.type = this.type;\n\t\treturn options as ConditionalOptions<Osc>;\n\t}\n\n\t/**\n\t *  connect the oscillator to the frequency and detune signals\n\t */\n\tprivate _createNewOscillator(oscType: OmniOscSourceType): void {\n\t\tif (oscType !== this._sourceType) {\n\t\t\tthis._sourceType = oscType;\n\t\t\tconst oscConstructor = OmniOscillatorSourceMap[oscType];\n\t\t\t// short delay to avoid clicks on the change\n\t\t\tconst now = this.now();\n\t\t\tif (this._oscillator) {\n\t\t\t\tconst oldOsc = this._oscillator;\n\t\t\t\toldOsc.stop(now);\n\t\t\t\t// dispose the old one\n\t\t\t\tthis.context.setTimeout(() => oldOsc.dispose(), this.blockTime);\n\t\t\t}\n\t\t\tthis._oscillator = new oscConstructor({\n\t\t\t\t// @ts-ignore\n\t\t\t\tcontext : this.context,\n\t\t\t});\n\t\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\t\tthis.detune.connect(this._oscillator.detune);\n\t\t\tthis._oscillator.connect(this.output);\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._oscillator.start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._oscillator.phase;\n\t}\n\tset phase(phase) {\n\t\tthis._oscillator.phase = phase;\n\t}\n\n\t/**\n\t * The source type of the oscillator.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"fmsquare\");\n\t * omniOsc.sourceType // 'fm'\n\t */\n\tget sourceType(): OmniOscSourceType {\n\t\treturn this._sourceType;\n\t}\n\tset sourceType(sType) {\n\t\t// the basetype defaults to sine\n\t\tlet baseType = \"sine\";\n\t\tif (this._oscillator.type !== \"pwm\" && this._oscillator.type !== \"pulse\") {\n\t\t\tbaseType = this._oscillator.type;\n\t\t}\n\n\t\t// set the type\n\t\tif (sType === \"fm\") {\n\t\t\tthis.type = \"fm\" + baseType;\n\t\t} else if (sType === \"am\") {\n\t\t\tthis.type = \"am\" + baseType;\n\t\t} else if (sType === \"fat\") {\n\t\t\tthis.type = \"fat\" + baseType;\n\t\t} else if (sType === \"oscillator\") {\n\t\t\tthis.type = baseType;\n\t\t} else if (sType === \"pulse\") {\n\t\t\tthis.type = \"pulse\";\n\t\t} else if (sType === \"pwm\") {\n\t\t\tthis.type = \"pwm\";\n\t\t}\n\t}\n\n\tprivate _getOscType<SourceType extends OmniOscSourceType>(\n\t\tosc: AnyOscillator,\n\t\tsourceType: SourceType,\n\t): osc is OmniOscillatorSource[SourceType] {\n\t\treturn osc instanceof OmniOscillatorSourceMap[sourceType];\n\t}\n\n\t/**\n\t * The base type of the oscillator.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"fmsquare4\");\n\t * omniOsc.sourceType // 'fm'\n\t * omniOsc.baseType //'square'\n\t * omniOsc.partialCount //4\n\t */\n\tget baseType(): ToneOscillatorBaseType {\n\t\treturn this._oscillator.baseType;\n\t}\n\tset baseType(baseType) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") &&\n\t\t\t!this._getOscType(this._oscillator, \"pwm\") &&\n\t\t\tbaseType !== \"pulse\" && baseType !== \"pwm\") {\n\t\t\tthis._oscillator.baseType = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * The width of the oscillator when sourceType === \"pulse\".\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"pulse\");\n\t * //can access the width attribute only if type === \"pulse\"\n\t * omniOsc.width.value = 0.2;\n\t */\n\tget width(): IsPulseOscillator<OscType, Signal<AudioRange>> {\n\t\tif (this._getOscType(this._oscillator, \"pulse\")) {\n\t\t\treturn this._oscillator.width as IsPulseOscillator<OscType, Signal<AudioRange>> ;\n\t\t} else {\n\t\t\treturn undefined as IsPulseOscillator<OscType, Signal<AudioRange>> ;\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators, when sourceType === \"fat\".\n\t */\n\tget count(): IsFatOscillator<OscType, number> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.count as IsFatOscillator<OscType, number>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, number>;\n\t\t}\n\t}\n\tset count(count) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(count)) {\n\t\t\tthis._oscillator.count = count;\n\t\t}\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents. See Tone.FatOscillator\n\t * for more info.\n\t */\n\tget spread(): IsFatOscillator<OscType, Cents> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.spread as IsFatOscillator<OscType, Cents>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, Cents>;\n\t\t}\n\t}\n\tset spread(spread) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(spread)) {\n\t\t\tthis._oscillator.spread = spread;\n\t\t}\n\t}\n\n\t/**\n\t * The type of the modulator oscillator. Only if the oscillator\n\t * is set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\n\t * for more info.\n\t */\n\tget modulationType(): IsAmOrFmOscillator<OscType, ToneOscillatorType> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.modulationType as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t}\n\t}\n\tset modulationType(mType) {\n\t\tif ((this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) && isString(mType)) {\n\t\t\tthis._oscillator.modulationType = mType;\n\t\t}\n\t}\n\n\t/**\n\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t * See Tone.FMOscillator for more info.\n\t */\n\tget modulationIndex(): IsFMOscillator<OscType, Signal<Positive>> {\n\t\tif (this._getOscType(this._oscillator, \"fm\")) {\n\t\t\treturn this._oscillator.modulationIndex as IsFMOscillator<OscType, Signal<Positive>>;\n\t\t} else {\n\t\t\treturn undefined as IsFMOscillator<OscType, Signal<Positive>>;\n\t\t}\n\t}\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n\t *  for more info.\n\t */\n\tget harmonicity(): IsAmOrFmOscillator<OscType, Signal<Positive>> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.harmonicity as IsAmOrFmOscillator<OscType, Signal<Positive>>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, Signal<Positive>>;\n\t\t}\n\t}\n\n\t/**\n\t * The modulationFrequency Signal of the oscillator\n\t * (only if the oscillator type is set to pwm). See\n\t * Tone.PWMOscillator for more info.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"pwm\");\n\t * //can access the modulationFrequency attribute only if type === \"pwm\"\n\t * omniOsc.modulationFrequency.value = 0.2;\n\t */\n\tget modulationFrequency(): IsPWMOscillator<OscType, Signal<Frequency>> {\n\t\tif (this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\treturn this._oscillator.modulationFrequency as IsPWMOscillator<OscType, Signal<Frequency>>;\n\t\t} else {\n\t\t\treturn undefined as IsPWMOscillator<OscType, Signal<Frequency>>;\n\t\t}\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis._oscillator.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n *  @class AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].\n *         See Tone.GainToAudio.\n *\n *  @extends {Tone.SignalBase}\n *  @constructor\n *  @example\n *  var a2g = new AudioToGain();\n */\nexport class AudioToGain extends SignalOperator<ToneAudioNodeOptions> {\n\n\tname = \"AudioToGain\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => (x + 1) / 2,\n\t});\n\tprotected _internalChannels = [this._norm];\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The GainRange output [0, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Source, SourceOptions } from \"../source/Source\";\nimport { ToneBufferSource } from \"./buffer/BufferSource\";\n\ntype NoiseType = \"white\" | \"brown\" | \"pink\";\n\ninterface NoiseOptions extends SourceOptions {\n\ttype: NoiseType;\n\tplaybackRate: Positive;\n}\n\n/**\n * Noise is a noise generator. It uses looped noise buffers to save on performance.\n * Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n *\n * @param type the noise type (white|pink|brown)\n * @example\n * //initialize the noise and start\n * var noise = new Noise(\"pink\").start();\n *\n * //make an autofilter to shape the noise\n * var autoFilter = new Tone.AutoFilter({\n * \t\"frequency\" : \"8m\",\n * \t\"min\" : 800,\n * \t\"max\" : 15000\n * }).connect(Tone.Master);\n *\n * //connect the noise\n * noise.connect(autoFilter);\n * //start the autofilter LFO\n * autoFilter.start()\n */\nexport class Noise extends Source<NoiseOptions> {\n\n\tname = \"Noise\";\n\n\t/**\n\t * Private reference to the source\n\t */\n\tprivate _source: ToneBufferSource | null = null;\n\n\t/**\n\t * private reference to the type\n\t */\n\tprivate _type!: NoiseType;\n\n\t/**\n\t *  The playback rate of the noise. Affects\n\t *  the \"frequency\" of the noise.\n\t */\n\tprivate _playbackRate: Positive;\n\n\tconstructor(options?: NoiseType | Partial<NoiseOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]));\n\t\tconst options = optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]);\n\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.type = options.type;\n\t}\n\n\tstatic getDefaults(): NoiseOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tplaybackRate: 1,\n\t\t\ttype: \"white\" as NoiseType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n\t * @example\n\t * noise.type = \"white\";\n\t */\n\tget type(): NoiseType {\n\t\treturn this._type;\n\t}\n\tset type(type: NoiseType) {\n\t\tthis.assert(type in _noiseBuffers, \"Noise: invalid type: \" + type);\n\t\tif (this._type !== type) {\n\t\t\tthis._type = type;\n\t\t\t// if it's playing, stop and restart it\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tconst now = this.now();\n\t\t\t\tthis._stop(now);\n\t\t\t\tthis._start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  The playback rate of the noise. Affects\n\t *  the \"frequency\" of the noise.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate: Positive) {\n\t\tthis._playbackRate = rate;\n\t\tif (this._source) {\n\t\t\tthis._source.playbackRate.value = rate;\n\t\t}\n\t}\n\n\t/**\n\t *  internal start method\n\t */\n\tprotected _start(time: Time): void {\n\t\tconst buffer = _noiseBuffers[this._type];\n\t\tthis._source = new ToneBufferSource(buffer).connect(this.output);\n\t\tthis._source.loop = true;\n\t\tthis._source.playbackRate.value = this._playbackRate;\n\t\tthis._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t}\n\n\t/**\n\t *  internal stop method\n\t *\n\t *  @param {Time} time\n\t *  @private\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tif (this._source) {\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._source = null;\n\t\t}\n\t}\n\n\t/**\n\t * Restarts the noise.\n\t * @param  time When to restart the noise.\n\t */\n\trestart(time?: Time): this {\n\t\t// TODO could be optimized by cancelling the buffer source 'stop'\n\t\t// stop and restart\n\t\tthis._stop(time);\n\t\tthis._start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._source) {\n\t\t\tthis._source.disconnect();\n\t\t}\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// THE NOISE BUFFERS\n///////////////////////////////////////////////////////////////////////////\n\n// Noise buffer stats\nconst BUFFER_LENGTH = 44100 * 5;\nconst NUM_CHANNELS = 2;\n\n/**\n * The cached noise buffers\n */\ninterface NoiseCache {\n\t[key: string]: ToneAudioBuffer | null;\n}\n\n/**\n * Cache the noise buffers\n */\nconst _noiseCache: NoiseCache = {\n\tbrown: null,\n\tpink: null,\n\twhite: null,\n};\n\n/**\n * The noise arrays. Generated on initialization.\n * borrowed heavily from https://github.com/zacharydenton/noise.js\n * (c) 2013 Zach Denton (MIT)\n */\nconst _noiseBuffers = {\n\tget brown(): ToneAudioBuffer {\n\t\tif (!_noiseCache.brown) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet lastOut = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tchannel[i] = (lastOut + (0.02 * white)) / 1.02;\n\t\t\t\t\tlastOut = channel[i];\n\t\t\t\t\tchannel[i] *= 3.5; // (roughly) compensate for gain\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.brown = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.brown;\n\t},\n\n\tget pink(): ToneAudioBuffer {\n\t\tif (!_noiseCache.pink) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\t// tslint:disable-next-line: one-variable-per-declaration\n\t\t\t\tlet b0, b1, b2, b3, b4, b5, b6;\n\t\t\t\tb0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tb0 = 0.99886 * b0 + white * 0.0555179;\n\t\t\t\t\tb1 = 0.99332 * b1 + white * 0.0750759;\n\t\t\t\t\tb2 = 0.96900 * b2 + white * 0.1538520;\n\t\t\t\t\tb3 = 0.86650 * b3 + white * 0.3104856;\n\t\t\t\t\tb4 = 0.55000 * b4 + white * 0.5329522;\n\t\t\t\t\tb5 = -0.7616 * b5 - white * 0.0168980;\n\t\t\t\t\tchannel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t\t\t\t\tchannel[i] *= 0.11; // (roughly) compensate for gain\n\t\t\t\t\tb6 = white * 0.115926;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.pink = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.pink;\n\t},\n\n\tget white(): ToneAudioBuffer {\n\t\tif (!_noiseCache.white) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tchannel[i] = Math.random() * 2 - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.white = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.white;\n\t},\n};\n","export { Noise } from \"./Noise\";\nexport { Oscillator } from \"./oscillator/Oscillator\";\nexport { AMOscillator } from \"./oscillator/AMOscillator\";\nexport { FMOscillator } from \"./oscillator/FMOscillator\";\nexport { PulseOscillator } from \"./oscillator/PulseOscillator\";\nexport { FatOscillator } from \"./oscillator/FatOscillator\";\nexport { PWMOscillator } from \"./oscillator/PWMOscillator\";\nexport { OmniOscillator } from \"./oscillator/OmniOscillator\";\nexport { ToneOscillatorNode } from \"./oscillator/OscillatorNode\";\nexport { ToneBufferSource } from \"./buffer/BufferSource\";\n","import { Context } from \"../context/Context\";\nimport { Ticks, TicksClass } from \"../type/Ticks\";\nimport { TransportEvent, TransportEventOptions } from \"./TransportEvent\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\ninterface TransportRepeatEventOptions extends TransportEventOptions {\n\tinterval: Ticks;\n\tduration: Ticks;\n}\n\n/**\n * TransportRepeatEvent is an internal class used by Tone.Transport\n * to schedule repeat events. This class should not be instantiated directly.\n */\nexport class TransportRepeatEvent extends TransportEvent {\n\n\t/**\n\t * When the event should stop repeating\n\t */\n\tprivate duration: Ticks;\n\n\t/**\n\t * The interval of the repeated event\n\t */\n\tprivate _interval: Ticks;\n\n\t/**\n\t * The ID of the current timeline event\n\t */\n\tprivate _currentId: number = -1;\n\n\t/**\n\t * The ID of the next timeline event\n\t */\n\tprivate _nextId: number = -1;\n\n\t/**\n\t * The time of the next event\n\t */\n\tprivate _nextTick = this.time;\n\n\t/**\n\t * a reference to the bound start method\n\t */\n\tprivate _boundRestart = this._restart.bind(this);\n\n\t/**\n\t * The audio context belonging to this event\n\t */\n\tprotected context: Context;\n\n\tconstructor(transport: Transport, opts: Partial<TransportRepeatEventOptions>) {\n\n\t\tsuper(transport, opts);\n\n\t\tconst options = Object.assign(TransportRepeatEvent.getDefaults(), opts);\n\n\t\tthis.duration = Ticks(options.duration).valueOf();\n\t\tthis._interval = Ticks(options.interval).valueOf();\n\t\tthis._nextTick = options.time;\n\t\tthis.transport.on(\"start\", this._boundRestart);\n\t\tthis.transport.on(\"loopStart\", this._boundRestart);\n\t\tthis.context = this.transport.context;\n\t\tthis._restart();\n\t}\n\n\tstatic getDefaults(): TransportRepeatEventOptions {\n\t\treturn Object.assign({}, TransportEvent.getDefaults(), {\n\t\t\tduration: Infinity,\n\t\t\tinterval: 1,\n\t\t\tonce: false,\n\t\t});\n\t}\n\n\t/**\n\t * Invoke the callback. Returns the tick time which\n\t * the next event should be scheduled at.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\t// create more events if necessary\n\t\tthis._createEvents(time);\n\t\t// call the super class\n\t\tsuper.invoke(time);\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _createEvents(time: Seconds): void {\n\t\t// schedule the next event\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n\t\t\tthis._nextTick += this._interval;\n\t\t\tthis._currentId = this._nextId;\n\t\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\t}\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _restart(time?: Time): void {\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis._nextTick = this.time;\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks > this.time) {\n\t\t\tthis._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n\t\t}\n\t\tthis._currentId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\tthis._nextTick += this._interval;\n\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis.transport.off(\"start\", this._boundRestart);\n\t\tthis.transport.off(\"loopStart\", this._boundRestart);\n\t\treturn this;\n\t}\n}\n","import { Time, TimeClass } from \"../../core/type/Time\";\nimport { PlaybackState } from \"../../core/util/StateTimeline\";\nimport { Signal } from \"../../signal/Signal\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\nimport { Gain } from \"../context/Gain\";\nimport { Param } from \"../context/Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { readOnly, writable } from \"../util/Interface\";\nimport { IntervalTimeline } from \"../util/IntervalTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isArray, isDefined } from \"../util/TypeCheck\";\nimport { Clock } from \"./Clock\";\nimport { TransportEvent } from \"./TransportEvent\";\nimport { TransportRepeatEvent } from \"./TransportRepeatEvent\";\n\ninterface TransportOptions extends ToneWithContextOptions {\n\tbpm: BPM;\n\tswing: NormalRange;\n\tswingSubdivision: Subdivision;\n\ttimeSignature: number;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tppq: number;\n}\n\ntype TransportEventNames = \"start\" | \"stop\" | \"pause\" | \"loop\" | \"loopEnd\" | \"loopStart\";\n\ninterface SyncedSignalEvent {\n\tsignal: Signal;\n\tinitial: number;\n\tratio: Gain;\n}\n\ntype TransportCallback = (time: Seconds) => void;\n\n/**\n * Transport for timing musical events.\n * Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n * Transport timing events pass in the exact time of the scheduled event\n * in the argument of the callback function. Pass that time value to the object\n * you're scheduling. <br><br>\n * A single transport is created for you when the library is initialized.\n * <br><br>\n * The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n * called with the time of that event as the argument.\n *\n * @example\n * //repeated event every 8th note\n * Transport.scheduleRepeat(function(time){\n * \t//do something with the time\n * }, \"8n\");\n * @example\n * //schedule an event on the 16th measure\n * Transport.schedule(function(time){\n * \t//do something with the time\n * }, \"16:0:0\");\n */\nexport class Transport extends ToneWithContext<TransportOptions> implements Emitter<TransportEventNames> {\n\n\tname = \"Transport\";\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tLOOPING\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * \tIf the transport loops or not.\n\t */\n\tloop: boolean = false;\n\n\t/**\n\t * \tThe loop start position in ticks\n\t */\n\tprivate _loopStart: Ticks = 0;\n\n\t/**\n\t * \tThe loop end position in ticks\n\t */\n\tprivate _loopEnd: Ticks = 0;\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tCLOCK/TEMPO\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Pulses per quarter is the number of ticks per quarter note.\n\t */\n\tprivate _ppq: number;\n\n\t/**\n\t *  watches the main oscillator for timing ticks\n\t *  initially starts at 120bpm\n\t */\n\tprivate _clock: Clock<BPM>;\n\n\t/**\n\t * The Beats Per Minute of the Transport.\n\t * @example\n\t * Transport.bpm.value = 80;\n\t * //ramp the bpm to 120 over 10 seconds\n\t * Transport.bpm.rampTo(120, 10);\n\t */\n\tbpm: Param<BPM>;\n\n\t/**\n\t *  The time signature, or more accurately the numerator\n\t *  of the time signature over a denominator of 4.\n\t */\n\tprivate _timeSignature: number;\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tTIMELINE EVENTS\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  All the events in an object to keep track by ID\n\t */\n\tprivate _scheduledEvents = {};\n\n\t/**\n\t * \tThe scheduled events.\n\t */\n\tprivate _timeline: Timeline<TransportEvent> = new Timeline();\n\n\t/**\n\t *  Repeated events\n\t */\n\tprivate _repeatedEvents: IntervalTimeline = new IntervalTimeline();\n\n\t/**\n\t *  All of the synced Signals\n\t */\n\tprivate _syncedSignals: SyncedSignalEvent[] = [];\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tSWING\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The subdivision of the swing\n\t */\n\tprivate _swingTicks: Ticks;\n\n\t/**\n\t *  The swing amount\n\t */\n\tprivate _swingAmount: NormalRange = 0;\n\n\tconstructor(options?: Partial<TransportOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Transport.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Transport.getDefaults(), arguments);\n\n\t\t// CLOCK/TEMPO\n\t\tthis._ppq = options.ppq;\n\t\tthis._clock = new Clock({\n\t\t\tcallback : this._processTick.bind(this),\n\t\t\tcontext: this.context,\n\t\t\tfrequency : 0,\n\t\t\tunits: \"bpm\",\n\t\t});\n\t\tthis._bindClockEvents();\n\t\tthis.bpm = this._clock.frequency;\n\t\tthis._clock.frequency.multiplier = options.ppq;\n\t\tthis.bpm.value = options.bpm;\n\t\treadOnly(this, \"bpm\");\n\t\tthis._timeSignature = options.timeSignature;\n\n\t\t// SWING\n\t\tthis._swingTicks = options.ppq / 2; // 8n\n\t}\n\n\tstatic getDefaults(): TransportOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tbpm: 120,\n\t\t\tloopEnd: \"4m\" as Subdivision,\n\t\t\tloopStart: 0,\n\t\t\tppq: 192,\n\t\t\tswing: 0,\n\t\t\tswingSubdivision: \"8n\" as Subdivision,\n\t\t\ttimeSignature: 4,\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tTICKS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  called on every tick\n\t *  @param  tickTime clock relative tick time\n\t *  @private\n\t */\n\tprivate _processTick(tickTime: Seconds, ticks: Ticks): void {\n\t\t// handle swing\n\t\tif (this._swingAmount > 0 &&\n\t\t\tticks % this._ppq !== 0 && // not on a downbeat\n\t\t\tticks % (this._swingTicks * 2) !== 0) {\n\t\t\t// add some swing\n\t\t\tconst progress = (ticks % (this._swingTicks * 2)) / (this._swingTicks * 2);\n\t\t\tconst amount = Math.sin((progress) * Math.PI) * this._swingAmount;\n\t\t\ttickTime += new TicksClass(this.context, this._swingTicks * 2 / 3).toSeconds() * amount;\n\t\t}\n\t\t// do the loop test\n\t\tif (this.loop) {\n\t\t\tif (ticks >= this._loopEnd) {\n\t\t\t\tthis.emit(\"loopEnd\", tickTime);\n\t\t\t\tthis._clock.setTicksAtTime(this._loopStart, tickTime);\n\t\t\t\tticks = this._loopStart;\n\t\t\t\tthis.emit(\"loopStart\", tickTime, this._clock.getSecondsAtTime(tickTime));\n\t\t\t\tthis.emit(\"loop\", tickTime);\n\t\t\t}\n\t\t}\n\t\t// invoke the timeline events scheduled on this tick\n\t\tthis._timeline.forEachAtTime(ticks, event => event.invoke(tickTime));\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSCHEDULABLE EVENTS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Schedule an event along the timeline.\n\t * @param callback The callback to be invoked at the time.\n\t * @param time The time to invoke the callback at.\n\t * @return The id of the event which can be used for canceling the event.\n\t * @example\n\t * //trigger the callback when the Transport reaches the desired time\n\t * Transport.schedule(function(time){\n\t * \tenvelope.triggerAttack(time);\n\t * }, \"128i\");\n\t */\n\tschedule(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\ttime : new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Schedule a repeated event along the timeline. The event will fire\n\t * at the `interval` starting at the `startTime` and for the specified\n\t * `duration`.\n\t * @param  callback   The callback to invoke.\n\t * @param  interval   The duration between successive callbacks. Must be a positive number.\n\t * @param  startTime  When along the timeline the events should start being invoked.\n\t * @param  duration How long the event should repeat.\n\t * @return  The ID of the scheduled event. Use this to cancel the event.\n\t * @example\n\t * //a callback invoked every eighth note after the first measure\n\t * Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t */\n\tscheduleRepeat(\n\t\tcallback: TransportCallback,\n\t\tinterval: Time,\n\t\tstartTime?: TransportTime | TransportTimeClass,\n\t\tduration: Time = Infinity,\n\t): number {\n\t\tconst event = new TransportRepeatEvent(this, {\n\t\t\tcallback,\n\t\t\tduration : new TimeClass(this.context, duration).toTicks(),\n\t\t\tinterval: new TimeClass(this.context, interval).toTicks(),\n\t\t\ttime : new TransportTimeClass(this.context, startTime).toTicks(),\n\t\t});\n\t\t// kick it off if the Transport is started\n\t\t// @ts-ignore\n\t\treturn this._addEvent(event, this._repeatedEvents);\n\t}\n\n\t/**\n\t *  Schedule an event that will be removed after it is invoked.\n\t *  @param callback The callback to invoke once.\n\t *  @param time The time the callback should be invoked.\n\t *  @returns The ID of the scheduled event.\n\t */\n\tscheduleOnce(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\tonce : true,\n\t\t\ttime : new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Clear the passed in event id from the timeline\n\t * @param eventId The id of the event.\n\t */\n\tclear(eventId: number): this {\n\t\tif (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t\t\tconst item = this._scheduledEvents[eventId.toString()];\n\t\t\titem.timeline.remove(item.event);\n\t\t\titem.event.dispose();\n\t\t\tdelete this._scheduledEvents[eventId.toString()];\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an event to the correct timeline. Keep track of the\n\t * timeline it was added to.\n\t * @returns the event id which was just added\n\t */\n\tprivate _addEvent(event: TransportEvent, timeline: Timeline<TransportEvent>): number {\n\t\tthis._scheduledEvents[event.id.toString()] = {\n\t\t\tevent,\n\t\t\ttimeline,\n\t\t};\n\t\ttimeline.add(event);\n\t\treturn event.id;\n\t}\n\n\t/**\n\t * Remove scheduled events from the timeline after\n\t * the given time. Repeated events will be removed\n\t * if their startTime is after the given time\n\t * @param after Clear all events after this time.\n\t */\n\tcancel(after: TransportTime = 0): this {\n\t\tconst computedAfter = this.toTicks(after);\n\t\tthis._timeline.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\tthis._repeatedEvents.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSTART/STOP/PAUSE\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Bind start/stop/pause events from the clock and emit them.\n\t */\n\tprivate _bindClockEvents(): void {\n\t\tthis._clock.on(\"start\", (time, offset) => {\n\t\t\toffset = new TicksClass(this.context, offset).toSeconds();\n\t\t\tthis.emit(\"start\", time, offset);\n\t\t});\n\n\t\tthis._clock.on(\"stop\", (time) => {\n\t\t\tthis.emit(\"stop\", time);\n\t\t});\n\n\t\tthis._clock.on(\"pause\", (time) => {\n\t\t\tthis.emit(\"pause\", time);\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._clock.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the transport and all sources synced to the transport.\n\t * @param  time The time when the transport should start.\n\t * @param  offset The timeline offset to start the transport.\n\t * @example\n\t * //start the transport in one second starting at beginning of the 5th measure.\n\t * Transport.start(\"+1\", \"4:0:0\");\n\t */\n\tstart(time?: Time, offset?: TransportTime): this {\n\t\tlet offsetTicks;\n\t\tif (isDefined(offset)) {\n\t\t\toffsetTicks = this.toTicks(offset);\n\t\t}\n\t\t// start the clock\n\t\tthis._clock.start(time, offsetTicks);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the transport and all sources synced to the transport.\n\t * @param time The time when the transport should stop.\n\t * @example\n\t * Transport.stop();\n\t */\n\tstop(time?: Time): this {\n\t\tthis._clock.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the transport and all sources synced to the transport.\n\t */\n\tpause(time?: Time): this {\n\t\tthis._clock.pause(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Toggle the current state of the transport. If it is\n\t * started, it will stop it, otherwise it will start the Transport.\n\t * @param  time The time of the event\n\t */\n\ttoggle(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tif (this._clock.getStateAtTime(time) !== \"started\") {\n\t\t\tthis.start(time);\n\t\t} else {\n\t\t\tthis.stop(time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSETTERS/GETTERS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * The time signature as just the numerator over 4.\n\t * For example 4/4 would be just 4 and 6/8 would be 3.\n\t * @example\n\t * //common time\n\t * Transport.timeSignature = 4;\n\t * // 7/8\n\t * Transport.timeSignature = [7, 8];\n\t * //this will be reduced to a single number\n\t * Transport.timeSignature; //returns 3.5\n\t */\n\tget timeSignature(): TimeSignature {\n\t\treturn this._timeSignature;\n\t}\n\tset timeSignature(timeSig: TimeSignature) {\n\t\tif (isArray(timeSig)) {\n\t\t\ttimeSig = (timeSig[0] / timeSig[1]) * 4;\n\t\t}\n\t\tthis._timeSignature = timeSig;\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the starting position of the loop.\n\t */\n\tget loopStart(): Time {\n\t\treturn Time(this._loopStart, \"i\").toSeconds();\n\t}\n\tset loopStart(startPosition: Time) {\n\t\tthis._loopStart = this.toTicks(startPosition);\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the ending position of the loop.\n\t */\n\tget loopEnd(): Time {\n\t\treturn Time(this._loopEnd, \"i\").toSeconds();\n\t}\n\tset loopEnd(endPosition: Time) {\n\t\tthis._loopEnd = this.toTicks(endPosition);\n\t}\n\n\t/**\n\t * Set the loop start and stop at the same time.\n\t * @example\n\t * //loop over the first measure\n\t * Transport.setLoopPoints(0, \"1m\");\n\t * Transport.loop = true;\n\t */\n\tsetLoopPoints(startPosition: TransportTime, endPosition: TransportTime): this {\n\t\tthis.loopStart = startPosition;\n\t\tthis.loopEnd = endPosition;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The swing value. Between 0-1 where 1 equal to the note + half the subdivision.\n\t */\n\tget swing(): NormalRange {\n\t\treturn this._swingAmount;\n\t}\n\tset swing(amount: NormalRange) {\n\t\t// scale the values to a normal range\n\t\tthis._swingAmount = amount;\n\t}\n\n\t/**\n\t * Set the subdivision which the swing will be applied to.\n\t * The default value is an 8th note. Value must be less\n\t * than a quarter note.\n\t */\n\tget swingSubdivision(): Subdivision {\n\t\treturn new TicksClass(this.context, this._swingTicks).toNotation();\n\t}\n\tset swingSubdivision(subdivision: Subdivision) {\n\t\tthis._swingTicks = this.toTicks(subdivision);\n\t}\n\n\t/**\n\t *  The Transport's position in Bars:Beats:Sixteenths.\n\t *  Setting the value will jump to that position right away.\n\t */\n\tget position(): BarsBeatsSixteenths | Time {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\treturn new TicksClass(this.context, ticks).toBarsBeatsSixteenths();\n\t}\n\tset position(progress: Time) {\n\t\tconst ticks = this.toTicks(progress);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t *  The Transport's position in seconds\n\t *  Setting the value will jump to that position right away.\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._clock.seconds;\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.frequency.timeToTicks(s, now);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t *  The Transport's loop position as a normalized value. Always\n\t *  returns 0 if the transport if loop is not true.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this.loop) {\n\t\t\tconst now = this.now();\n\t\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\t\treturn (ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t *  The transports current tick position.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this._clock.ticks;\n\t}\n\tset ticks(t: Ticks) {\n\t\tif (this._clock.ticks !== t) {\n\t\t\tconst now = this.now();\n\t\t\t// stop everything synced to the transport\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis.emit(\"stop\", now);\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t\t// restart it with the new time\n\t\t\t\tthis.emit(\"start\", now, this.seconds);\n\t\t\t} else {\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\treturn Math.round(this._clock.getTicksAtTime(time));\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._clock.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t *  Pulses Per Quarter note. This is the smallest resolution\n\t *  the Transport timing supports. This should be set once\n\t *  on initialization and not set again. Changing this value\n\t *  after other objects have been created can cause problems.\n\t */\n\tget PPQ(): number {\n\t\treturn this._clock.frequency.multiplier;\n\t}\n\tset PPQ(ppq: number) {\n\t\tthis._clock.frequency.multiplier = ppq;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSYNCING\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Returns the time aligned to the next subdivision\n\t * of the Transport. If the Transport is not started,\n\t * it will return 0.\n\t * Note: this will not work precisely during tempo ramps.\n\t * @param  subdivision  The subdivision to quantize to\n\t * @return  The context time of the next subdivision.\n\t * @example\n\t * Transport.start(); //the transport must be started\n\t * Transport.nextSubdivision(\"4n\");\n\t */\n\tnextSubdivision(subdivision?: Time): Seconds {\n\t\tsubdivision = this.toTicks(subdivision);\n\t\tif (this.state !== \"started\") {\n\t\t\t// if the transport's not started, return 0\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tconst now = this.now();\n\t\t\t// the remainder of the current ticks and the subdivision\n\t\t\tconst transportPos = this.getTicksAtTime(now);\n\t\t\tconst remainingTicks = subdivision - transportPos % subdivision;\n\t\t\treturn this._clock.nextTickTime(remainingTicks, now);\n\t\t}\n\t}\n\n\t/**\n\t *  Attaches the signal to the tempo control signal so that\n\t *  any changes in the tempo will change the signal in the same\n\t *  ratio.\n\t *\n\t *  @param signal\n\t *  @param ratio Optionally pass in the ratio between the two signals.\n\t * \t\t\t\tOtherwise it will be computed based on their current values.\n\t */\n\tsyncSignal(signal: Signal<any>, ratio?: number): this {\n\t\tif (!ratio) {\n\t\t\t// get the sync ratio\n\t\t\tconst now = this.now();\n\t\t\tif (signal.getValueAtTime(now) !== 0) {\n\t\t\t\tconst bpm = this.bpm.getValueAtTime(now);\n\t\t\t\tconst computedFreq = 1 / (60 / bpm / this.PPQ);\n\t\t\t\tratio = signal.getValueAtTime(now) / computedFreq;\n\t\t\t} else {\n\t\t\t\tratio = 0;\n\t\t\t}\n\t\t}\n\t\tconst ratioSignal = new Gain(ratio);\n\t\t// @ts-ignore\n\t\tthis.bpm.connect(ratioSignal);\n\t\t// @ts-ignore\n\t\tratioSignal.connect(signal._param);\n\t\tthis._syncedSignals.push({\n\t\t\tinitial : signal.value,\n\t\t\tratio : ratioSignal,\n\t\t\tsignal,\n\t\t});\n\t\tsignal.value = 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsyncs a previously synced signal from the transport's control.\n\t *  See Transport.syncSignal.\n\t */\n\tunsyncSignal(signal: Signal<any>): this {\n\t\tfor (let i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t\t\tconst syncedSignal = this._syncedSignals[i];\n\t\t\tif (syncedSignal.signal === signal) {\n\t\t\t\tsyncedSignal.ratio.dispose();\n\t\t\t\tsyncedSignal.signal.value = syncedSignal.initial;\n\t\t\t\tthis._syncedSignals.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tthis._clock.dispose();\n\t\twritable(this, \"bpm\");\n\t\tthis._timeline.dispose();\n\t\tthis._repeatedEvents.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t///////////////////////////////////////////////////////////////////////\n\n\ton!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\tonce!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\toff!: (event: TransportEventNames, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Transport);\n\n///////////////////////////////////////////////////////////////////////////////\n// \tINITIALIZATION\n///////////////////////////////////////////////////////////////////////////////\n\nonContextInit(context => {\n\tcontext.transport = new Transport({ context });\n});\n\nonContextClose(context => {\n\tcontext.transport.dispose();\n});\n","import { Volume } from \"../../component/channel/Volume\";\nimport { connectSeries } from \"../Connect\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { Param } from \"./Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface DestinationOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  A single master output which is connected to the\n *  AudioDestinationNode (aka your speakers).\n *  It provides useful conveniences such as the ability\n *  to set the volume and mute the entire application.\n *  It also gives you the ability to apply master effects to your application.\n *\n *  @example\n * //the audio will go from the oscillator to the speakers\n * oscillator.connect(Destination);\n * //a convenience for connecting to the master output is also provided:\n * oscillator.toMaster();\n * //the above two examples are equivalent.\n */\nexport class Destination extends ToneAudioNode<DestinationOptions> {\n\n\tname = \"Destination\";\n\n\tinput: Volume = new Volume({ context: this.context });\n\toutput: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The volume of the master output.\n\t */\n\tvolume: Param<Decibels> = this.input.volume;\n\t_internalChannels = [this.input, this.output];\n\n\tconstructor(options: Partial<DestinationOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Destination.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Destination.getDefaults(), arguments);\n\n\t\tconnectSeries(this.input, this.output, this.context.rawContext.destination);\n\n\t\tthis.volume.value = options.volume;\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): DestinationOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * Destination.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.input.mute;\n\t}\n\n\tset mute(mute: boolean) {\n\t\tthis.input.mute = mute;\n\t}\n\n\t/**\n\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t *  chained in the master effects chain.\n\t *  @param nodes All arguments will be connected in a row and the Master will be routed through it.\n\t *  @return  {Destination}  this\n\t *  @example\n\t * //some overall compression to keep the levels in check\n\t * var masterCompressor = new Tone.Compressor({\n\t * \t\"threshold\" : -6,\n\t * \t\"ratio\" : 3,\n\t * \t\"attack\" : 0.5,\n\t * \t\"release\" : 0.1\n\t * });\n\t * //give a little boost to the lows\n\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t * //route everything through the filter\n\t * //and compressor before going to the speakers\n\t * Destination.chain(lowBump, masterCompressor);\n\t */\n\tchain(...args: Array<AudioNode | ToneAudioNode>): this {\n\t\tthis.input.disconnect();\n\t\targs.unshift(this.input);\n\t\targs.push(this.output);\n\t\tconnectSeries(...args);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tINITIALIZATION\n///////////////////////////////////////////////////////////////////////////\n\nonContextInit(context => {\n\tcontext.destination = new Destination({ context });\n});\n\nonContextClose(context => {\n\tcontext.destination.dispose();\n});\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\n\ninterface DrawEvent extends TimelineEvent {\n\tcallback: () => void;\n}\n\n/**\n * Draw is useful for synchronizing visuals and audio events.\n * Callbacks from Tone.Transport or any of the Tone.Event classes\n * always happen _before_ the scheduled time and are not synchronized\n * to the animation frame so they are not good for triggering tightly\n * synchronized visuals and sound. Draw makes it easy to schedule\n * callbacks using the AudioContext time and uses requestAnimationFrame.\n * @example\n * Tone.Transport.schedule(function(time){\n * \t//use the time argument to schedule a callback with Draw\n * \tDraw.schedule(function(){\n * \t\t//do drawing or DOM manipulation here\n * \t}, time)\n * }, \"+0.5\")\n */\nexport class Draw extends ToneWithContext<ToneWithContextOptions> {\n\n\tname = \"Draw\";\n\n\t/**\n\t *  The duration after which events are not invoked.\n\t */\n\texpiration: Seconds = 0.25;\n\n\t/**\n\t *  The amount of time before the scheduled time\n\t *  that the callback can be invoked. Default is\n\t *  half the time of an animation frame (0.008 seconds).\n\t */\n\tanticipation: Seconds = 0.008;\n\n\t/**\n\t *  All of the events.\n\t */\n\tprivate _events: Timeline<DrawEvent> = new Timeline();\n\n\t/**\n\t *  The draw loop\n\t */\n\tprivate _boundDrawLoop = this._drawLoop.bind(this);\n\n\t/**\n\t * The animation frame id\n\t */\n\tprivate _animationFrame: number = -1;\n\n\t/**\n\t *  Schedule a function at the given time to be invoked\n\t *  on the nearest animation frame.\n\t *  @param  callback  Callback is invoked at the given time.\n\t *  @param  time      The time relative to the AudioContext time to invoke the callback.\n\t */\n\tschedule(callback: () => void, time: Time): this {\n\t\tthis._events.add({\n\t\t\tcallback,\n\t\t\ttime : this.toSeconds(time),\n\t\t});\n\t\t// start the draw loop on the first event\n\t\tif (this._events.length === 1) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel events scheduled after the given time\n\t *  @param  after  Time after which scheduled events will be removed from the scheduling timeline.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._events.cancel(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The draw loop\n\t */\n\tprivate _drawLoop(): void {\n\t\tconst now = this.context.currentTime;\n\t\twhile (this._events.length && (this._events.peek() as DrawEvent).time - this.anticipation <= now) {\n\t\t\tconst event = this._events.shift();\n\t\t\tif (event && now - event.time <= this.expiration) {\n\t\t\t\tevent.callback();\n\t\t\t}\n\t\t}\n\t\tif (this._events.length > 0) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tthis._events.dispose();\n\t\tcancelAnimationFrame(this._animationFrame);\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../Connect\";\nimport { AutomationEvent, Param, ParamOptions } from \"../context/Param\";\nimport { getContext } from \"../Global\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isUndef } from \"../util/TypeCheck\";\n\ninterface TickAutomationEvent extends AutomationEvent {\n\tticks: number;\n}\n\ninterface TickSignalOptions extends ParamOptions {\n\tvalue: Hertz | BPM;\n\tmultiplier: number;\n}\n\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n *\n * @param value The initial value of the signal\n */\nexport class TickSignal<Type extends Hertz | BPM> extends Param<Type> {\n\n\tname = \"TickSignal\";\n\n\tprotected _events: Timeline<TickAutomationEvent> = new Timeline(Infinity);\n\n\tprivate _sig: ConstantSourceNode = this.context.createConstantSource();\n\n\tprotected _param = this._sig.offset;\n\n\tprivate _multiplier: number = 1;\n\n\tconstructor(options: Partial<TickSignalOptions>);\n\tconstructor(value?: number);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis._sig = this.context.createConstantSource();\n\t\tthis._sig.start(0);\n\t\tthis._param = this._sig.offset;\n\n\t\t// set the multiplier\n\t\tthis.multiplier = options.multiplier;\n\n\t\t// clear the ticks from the beginning\n\t\tthis.cancelScheduledValues(0);\n\t\t// set an initial event\n\t\tthis._events.add({\n\t\t\tticks: 0,\n\t\t\ttime : 0,\n\t\t\ttype : \"setValue\",\n\t\t\tvalue: this._fromType(options.value as Type),\n\t\t});\n\t\tthis.setValueAtTime(options.value as Type, 0);\n\t}\n\n\tstatic getDefaults(): TickSignalOptions {\n\t\treturn Object.assign(Param.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tparam: getContext().createConstantSource().offset,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tsetTargetAtTime(value: Type, time: Time, constant: number): this {\n\t\t// approximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tthis.setRampPoint(time);\n\t\tconst computedValue = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\tconst segments = Math.round(Math.max(1 / constant, 1));\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = constant * i + time;\n\t\t\tconst rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.setValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.linearRampToValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: Type, time: Time): this {\n\t\t// aproximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tconst computedVal = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\t// approx 10 segments per second\n\t\tconst segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n\t\tconst segmentDur = ((time - prevEvent.time) / segments);\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = segmentDur * i + prevEvent.time;\n\t\t\tconst rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tprivate _getTicksUntilEvent(event: TickAutomationEvent | null, time: number): Ticks {\n\t\tif (event === null) {\n\t\t\tevent = {\n\t\t\t\tticks : 0,\n\t\t\t\ttime : 0,\n\t\t\t\ttype: \"setValue\",\n\t\t\t\tvalue: 0,\n\t\t\t};\n\t\t} else if (isUndef(event.ticks)) {\n\t\t\tconst previousEvent = this._events.previousEvent(event);\n\t\t\tevent.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n\t\t}\n\t\tconst val0 = this._fromType(this.getValueAtTime(event.time));\n\t\tlet val1 = this._fromType(this.getValueAtTime(time));\n\t\t// if it's right on the line, take the previous value\n\t\tconst onTheLineEvent = this._events.get(time);\n\t\tif (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === \"setValue\") {\n\t\t\tval1 = this._fromType(this.getValueAtTime(time - this.sampleTime));\n\t\t}\n\t\treturn 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst event = this._events.get(computedTime);\n\t\treturn Math.max(this._getTicksUntilEvent(event, computedTime), 0);\n\t}\n\n\t/**\n\t * Return the elapsed time of the number of ticks from the given time\n\t * @param ticks The number of ticks to calculate\n\t * @param  time The time to get the next tick from\n\t * @return The duration of the number of ticks from the given time in seconds\n\t */\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst currentTick = this.getTicksAtTime(time);\n\t\treturn this.getTimeOfTick(currentTick + ticks) - computedTime;\n\t}\n\n\t/**\n\t * Given a tick, returns the time that tick occurs at.\n\t * @return The time that the tick occurs.\n\t */\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\tconst before = this._events.get(tick, \"ticks\");\n\t\tconst after = this._events.getAfter(tick, \"ticks\");\n\t\tif (before && before.ticks === tick) {\n\t\t\treturn before.time;\n\t\t} else if (before && after &&\n\t\t\tafter.type === \"linear\" &&\n\t\t\tbefore.value !== after.value) {\n\t\t\tconst val0 = this._fromType(this.getValueAtTime(before.time));\n\t\t\tconst val1 = this._fromType(this.getValueAtTime(after.time));\n\t\t\tconst delta = (val1 - val0) / (after.time - before.time);\n\t\t\tconst k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n\t\t\tconst sol1 = (-val0 + k) / delta;\n\t\t\tconst sol2 = (-val0 - k) / delta;\n\t\t\treturn (sol1 > 0 ? sol1 : sol2) + before.time;\n\t\t} else if (before) {\n\t\t\tif (before.value === 0) {\n\t\t\t\treturn Infinity;\n\t\t\t} else {\n\t\t\t\treturn before.time + (tick - before.ticks) / before.value;\n\t\t\t}\n\t\t} else {\n\t\t\treturn tick / this._initialValue;\n\t\t}\n\t}\n\n\t/**\n\t * Convert some number of ticks their the duration in seconds accounting\n\t * for any automation curves starting at the given time.\n\t * @param  ticks The number of ticks to convert to seconds.\n\t * @param  when  When along the automation timeline to convert the ticks.\n\t * @return The duration in seconds of the ticks.\n\t */\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this.getDurationOfTicks(ticks, when);\n\t}\n\n\t/**\n\t * The inverse of [ticksToTime](#tickstotime). Convert a duration in\n\t * seconds to the corresponding number of ticks accounting for any\n\t * automation curves starting at the given time.\n\t * @param  duration The time interval to convert to ticks.\n\t * @param  when When along the automation timeline to convert the ticks.\n\t * @return The duration in ticks.\n\t */\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tconst startTicks = this.getTicksAtTime(computedTime);\n\t\tconst endTicks = this.getTicksAtTime(computedTime + computedDuration);\n\t\treturn endTicks - startTicks;\n\t}\n\n\t/**\n\t * Convert from the type when the unit value is BPM\n\t */\n\tprotected _fromType(val: Type): number {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn 1 / (60 / val / this.multiplier);\n\t\t} else {\n\t\t\treturn super._fromType(val);\n\t\t}\n\t}\n\n\t/**\n\t * Special case of type conversion where the units === \"bpm\"\n\t */\n\tprotected _toType(val: number): Type {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn (val / this.multiplier) * 60 as Type;\n\t\t} else {\n\t\t\treturn super._toType(val);\n\t\t}\n\t}\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\t// get and reset the current value with the new multipler\n\t\t// might be necessary to clear all the previous values\n\t\tconst currentVal = this.value;\n\t\tthis._multiplier = m;\n\t\tthis.value = currentVal;\n\t}\n\n\t/**\n\t * Connect the output signal\n\t */\n\tconnect(dstNode, outputNumber = 0, inputNumber = 0): this {\n\t\tconnect(this._sig, dstNode, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline, StateTimelineEvent } from \"../util/StateTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { TickSignal } from \"./TickSignal\";\n\ninterface TickSourceOptions extends ToneWithContextOptions {\n\tfrequency: Frequency;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ninterface TickSourceOffsetEvent {\n\tticks: number;\n\ttime: number;\n\tseconds: number;\n}\n\n/**\n *  Uses [TickSignal](TickSignal) to track elapsed ticks with complex automation curves.\n *\n *  @param frequency The initial frequency that the signal ticks at\n */\nexport class TickSource<Type extends BPM | Hertz> extends ToneWithContext<TickSourceOptions> {\n\n\tname = \"TickSource\";\n\n\t/**\n\t *  The frequency the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<Type>;\n\n\t/**\n\t *  The state timeline\n\t */\n\tprivate _state: StateTimeline = new StateTimeline();\n\n\t/**\n\t * The offset values of the ticks\n\t */\n\tprivate _tickOffset: Timeline<TickSourceOffsetEvent> = new Timeline();\n\n\tconstructor(frequency?: Frequency);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<TickSourceOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis.frequency = new TickSignal({\n\t\t\tcontext: this.context,\n\t\t\tunits: options.units,\n\t\t\tvalue: this.toFrequency(options.frequency),\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\t// set the inital state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\t\t// add the first event\n\t\tthis.setTicksAtTime(0, 0);\n\t}\n\n\tstatic getDefaults(): TickSourceOptions {\n\t\treturn Object.assign({\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\",\n\t\t}, ToneWithContext.getDefaults()) as TickSourceOptions;\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  time    The time the clock should start\n\t *  @param offset The number of ticks to start the source at\n\t */\n\tstart(time: Time, offset?: Ticks): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (isDefined(offset)) {\n\t\t\t\tthis.setTicksAtTime(offset, computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the clock. Stopping the clock resets the tick counter to 0.\n\t * @param time The time when the clock should stop.\n\t */\n\tstop(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// cancel the previous stop\n\t\tif (this._state.getValueAtTime(computedTime) === \"stopped\") {\n\t\t\tconst event = this._state.get(computedTime);\n\t\t\tif (event && event.time > 0) {\n\t\t\t\tthis._tickOffset.cancel(event.time);\n\t\t\t\tthis._state.cancel(event.time);\n\t\t\t}\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis.setTicksAtTime(0, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param time The time when the clock should stop.\n\t */\n\tpause(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel start/stop/pause and setTickAtTime events scheduled after the given time.\n\t *  @param time When to clear the events after\n\t */\n\tcancel(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._state.cancel(time);\n\t\tthis._tickOffset.cancel(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the elapsed ticks at the given time\n\t * @param  time  When to get the tick value\n\t * @return The number of ticks\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", computedTime) as StateTimelineEvent;\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state: \"paused\", time: computedTime};\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedTicks = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, computedTime + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedTicks = offsetEvent.ticks;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedTicks;\n\t}\n\n\t/**\n\t *  The number of times the callback was invoked. Starts counting at 0\n\t *  and increments after the callback was invoked. Returns -1 when stopped.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this.getTicksAtTime(this.now());\n\t}\n\n\tset ticks(t: Ticks) {\n\t\tthis.setTicksAtTime(t, this.now());\n\t}\n\n\t/**\n\t *  The time since ticks=0 that the TickSource has been running. Accounts\n\t *  for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this.getSecondsAtTime(this.now());\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this.frequency.timeToTicks(s, now);\n\t\tthis.setTicksAtTime(ticks, now);\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\ttime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", time) as StateTimelineEvent;\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state : \"paused\", time };\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedSeconds = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, time + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedSeconds = offsetEvent.seconds;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedSeconds += e.time - periodStartTime;\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedSeconds;\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._tickOffset.cancel(time);\n\t\tthis._tickOffset.add({\n\t\t\tseconds : this.frequency.getDurationOfTicks(ticks, time),\n\t\t\tticks,\n\t\t\ttime,\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Returns the scheduled state at the given time.\n\t *  @param  time  The time to query.\n\t *  @example\n\t * source.start(\"+0.1\");\n\t * source.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tgetStateAtTime(time): PlaybackState {\n\t\ttime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the given tick. The second argument\n\t * is when to test before. Since ticks can be set (with setTicksAtTime)\n\t * there may be multiple times for a given tick value.\n\t * @param  ticks The tick number.\n\t * @param  before When to measure the tick value from.\n\t * @return The time of the tick\n\t */\n\tgetTimeOfTick(tick: Ticks, before = this.now()): Seconds {\n\t\tconst offset = this._tickOffset.get(before) as TickSourceOffsetEvent;\n\t\tconst event = this._state.get(before) as StateTimelineEvent;\n\t\tconst startTime = Math.max(offset.time, event.time);\n\t\tconst absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;\n\t\treturn this.frequency.getTimeOfTick(absoluteTicks);\n\t}\n\n\t/**\n\t *  Invoke the callback event at all scheduled ticks between the\n\t *  start time and the end time\n\t *  @param  startTime  The beginning of the search range\n\t *  @param  endTime    The end of the search range\n\t *  @param  callback   The callback to invoke with each tick\n\t */\n\tforEachTickBetween(startTime: Time, endTime: Time, callback: (when: Seconds, ticks: Ticks) => void): this {\n\t\tconst computedStartTime = this.toSeconds(startTime);\n\t\tconst computedEndTime = this.toSeconds(endTime);\n\t\t// only iterate through the sections where it is \"started\"\n\t\tlet lastStateEvent = this._state.get(computedStartTime);\n\t\tthis._state.forEachBetween(computedStartTime, computedEndTime, event => {\n\t\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && event.state !== \"started\") {\n\t\t\t\tthis.forEachTickBetween(Math.max(lastStateEvent.time, computedStartTime), event.time - this.sampleTime, callback);\n\t\t\t}\n\t\t\tlastStateEvent = event;\n\t\t});\n\n\t\tlet error = null;\n\n\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && this._state) {\n\t\t\tconst maxStartTime = Math.max(lastStateEvent.time, computedStartTime);\n\t\t\t// figure out the difference between the frequency ticks and the\n\t\t\tconst startTicks = this.frequency.getTicksAtTime(maxStartTime);\n\t\t\tconst ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);\n\t\t\tconst diff = startTicks - ticksAtStart;\n\t\t\tlet offset = diff % 1;\n\t\t\tif (offset !== 0) {\n\t\t\t\toffset = 1 - offset;\n\t\t\t}\n\t\t\tlet nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);\n\t\t\twhile (nextTickTime < computedEndTime && this._state) {\n\t\t\t\ttry {\n\t\t\t\t\tcallback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\terror = e;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this._state) {\n\t\t\t\t\tnextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tthis._state.dispose();\n\t\tthis._tickOffset.dispose();\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n","import { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\nexport interface DelayOptions extends ToneAudioNodeOptions {\n\tdelayTime: number;\n\tmaxDelay: number;\n}\n\n/**\n *  Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n *  @param delayTime The delay applied to the incoming signal.\n *  @param maxDelay The maximum delay time.\n */\nexport class Delay extends ToneAudioNode<DelayOptions> {\n\n\tname = \"Delay\";\n\n\t/**\n\t * The maximum delay time. This cannot be changed after\n\t * the value is passed into the constructor.\n\t */\n\treadonly maxDelay: Time;\n\n\t/**\n\t *  The amount of time the incoming signal is delayed.\n\t */\n\treadonly delayTime: Param<Time>;\n\n\t/**\n\t * Private reference to the internal DelayNode\n\t */\n\tprivate _delayNode: DelayNode;\n\treadonly input: DelayNode;\n\treadonly output: DelayNode;\n\n\t/**\n\t * The internal channels for channel routing changes\n\t */\n\tprotected _internalChannels: AudioNode[];\n\n\tconstructor(options?: Partial<DelayOptions>)\n\tconstructor(delayTime?: Time, maxDelay?: Time)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]));\n\n\t\tconst options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n\n\t\tthis.maxDelay = Math.max(this.toSeconds(options.maxDelay), this.toSeconds(options.delayTime));\n\n\t\tthis._delayNode = this.input = this.output = this.context.createDelay(options.maxDelay);\n\t\tthis._internalChannels = [this._delayNode];\n\n\t\tthis.delayTime = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._delayNode.delayTime,\n\t\t\tunits : \"time\",\n\t\t\tvalue : options.delayTime,\n\t\t});\n\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): DelayOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdelayTime : 0,\n\t\t\tmaxDelay: 1,\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.disconnect();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { Context } from \"../context/Context\";\n\n/**\n *  Wrapper around the OfflineAudioContext\n *  @param  channels  The number of channels to render\n *  @param  duration  The duration to render in samples\n *  @param sampleRate the sample rate to render at\n */\nexport class OfflineContext extends Context {\n\n\tname = \"OfflineContext\";\n\n\t/**\n\t *  A private reference to the duration\n\t */\n\tprivate readonly _duration: Seconds;\n\n\t/**\n\t *  An artificial clock source\n\t */\n\tprivate _currentTime: Seconds = 0;\n\n\t/**\n\t * Private reference to the OfflineAudioContext.\n\t */\n\tprotected _context!: OfflineAudioContext;\n\n\tconstructor(channels: number | OfflineAudioContext, duration: Seconds, sampleRate: number) {\n\n\t\tsuper({\n\t\t\tclockSource: \"offline\",\n\t\t\tcontext: channels instanceof OfflineAudioContext ?\n\t\t\t\tchannels : new OfflineAudioContext(channels, duration * sampleRate, sampleRate),\n\t\t\tlookAhead: 0,\n\t\t\tupdateInterval: channels instanceof OfflineAudioContext ?\n\t\t\t\t\t128 / channels.sampleRate : 128 / sampleRate,\n\t\t});\n\n\t\tthis._duration = channels instanceof OfflineAudioContext ?\n\t\t\tchannels.length / channels.sampleRate : duration;\n\t}\n\n\t/**\n\t *  Override the now method to point to the internal clock time\n\t */\n\tnow(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t * Same as this.now()\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t *  Render the output of the OfflineContext\n\t */\n\trender(): Promise<AudioBuffer> {\n\t\twhile (this._duration - this._currentTime >= 0) {\n\t\t\t// invoke all the callbacks on that time\n\t\t\tthis.emit(\"tick\");\n\t\t\t// increment the clock in 5ms chunks\n\t\t\tthis._currentTime += 0.005;\n\t\t}\n\n\t\treturn this._context.startRendering();\n\t}\n\n\t/**\n\t *  Close the context\n\t */\n\tclose(): Promise<OfflineContext> {\n\t\treturn Promise.resolve(this);\n\t}\n}\n","import { Context } from \"../context/Context\";\nimport { Tone } from \"../Tone\";\nimport { isDefined, isObject , isString, isUndef } from \"../util/TypeCheck\";\n\nexport type TimeValue = Time | TimeBaseClass<any, any>;\n\n/**\n * The units that the TimeBase can accept. extended by other classes\n */\nexport type TimeBaseUnit = \"s\" | \"n\" | \"t\" | \"m\" | \"i\" | \"hz\" | \"tr\" | \"samples\" | \"number\";\n\nexport interface TypeFunction {\n\tregexp: RegExp;\n\tmethod: (value: string, ...args: string[]) => number;\n}\n\nexport interface TimeExpression<Type extends number> {\n\t[key: string]: {\n\t\tregexp: RegExp;\n\t\tmethod: (value: string, ...args: string[]) => Type;\n\t};\n}\n\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n * @param  val    The time value as a number, string or object\n * @param  units  Unit values\n * @example\n * new TimeBase(4, \"n\")\n * new TimeBase(2, \"t\")\n * new TimeBase(\"2t\")\n * new TimeBase({\"2t\" : 2})\n * new TimeBase(\"2t\") + new TimeBase(\"4n\");\n */\nexport abstract class TimeBaseClass<Type extends number, Unit extends string> extends Tone {\n\n\treadonly context: Context;\n\n\t/**\n\t * The value of the units\n\t */\n\tprotected _val?: TimeValue;\n\n\t/**\n\t * The units of time\n\t */\n\tprotected _units?: Unit;\n\n\t/**\n\t * All of the conversion expressions\n\t */\n\tprotected _expressions: TimeExpression<Type>;\n\n\t/**\n\t * The default units\n\t */\n\treadonly defaultUnits: Unit = \"s\" as Unit;\n\n\tconstructor(context: Context, value?: TimeValue, units?: Unit) {\n\t\tsuper();\n\n\t\tthis._val = value;\n\t\tthis._units = units;\n\t\tthis.context = context;\n\t\tthis._expressions = this._getExpressions();\n\t}\n\n\t/**\n\t * All of the time encoding expressions\n\t */\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn {\n\t\t\thz: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._frequencyToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)hz$/i,\n\t\t\t},\n\t\t\ti: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._ticksToUnits(parseInt(value, 10));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)i$/i,\n\t\t\t},\n\t\t\tm: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)m$/i,\n\t\t\t},\n\t\t\tn: {\n\t\t\t\tmethod: (value, dot) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\tconst scalar = dot === \".\" ? 1.5 : 1;\n\t\t\t\t\tif (numericValue === 1) {\n\t\t\t\t\t\treturn this._beatsToUnits(this._getTimeSignature()) * scalar as Type;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this._beatsToUnits(4 / numericValue) * scalar as Type;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)n(\\.?)$/i,\n\t\t\t},\n\t\t\tnumber: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._expressions[this.defaultUnits].method.call(this, value);\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)$/,\n\t\t\t},\n\t\t\ts: {\n\t\t\t\tmethod: (value): Type => {\n\t\t\t\t\treturn this._secondsToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)s$/,\n\t\t\t},\n\t\t\tsamples: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn parseInt(value, 10) / this.context.sampleRate as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)samples$/,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\treturn this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)t$/i,\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tmethod: (m, q, s) => {\n\t\t\t\t\tlet total = 0;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n\t\t\t},\n\t\t};\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tVALUE OF\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Evaluate the time value. Returns the time in seconds.\n\t */\n\tvalueOf(): Type {\n\t\tif (this._val instanceof TimeBaseClass) {\n\t\t\tthis.fromType(this._val);\n\t\t}\n\t\tif (isUndef(this._val)) {\n\t\t\treturn this._noArg();\n\t\t} else if (isString(this._val) && isUndef(this._units)) {\n\t\t\tfor (const units in this._expressions) {\n\t\t\t\tif (this._expressions[units].regexp.test(this._val.trim())) {\n\t\t\t\t\tthis._units = units as Unit;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isObject(this._val)) {\n\t\t\tlet total = 0;\n\t\t\tfor (const typeName in this._val) {\n\t\t\t\tif (isDefined(this._val[typeName])) {\n\t\t\t\t\tconst quantity = this._val[typeName];\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst time = (new this.constructor(this.context, typeName)).valueOf() * quantity;\n\t\t\t\t\ttotal += time;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn total as Type;\n\t\t}\n\t\tif (isDefined(this._units)) {\n\t\t\tconst expr = this._expressions[this._units];\n\t\t\tconst matching = this._val.toString().trim().match(expr.regexp);\n\t\t\tif (matching) {\n\t\t\t\treturn expr.method.apply(this, matching.slice(1));\n\t\t\t} else {\n\t\t\t\treturn expr.method.call(this, this._val);\n\t\t\t}\n\t\t} else if (isString(this._val)) {\n\t\t\treturn parseFloat(this._val) as Type;\n\t\t} else {\n\t\t\treturn this._val as Type;\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn 1 / freq as Type;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn (60 / this._getBpm()) * beats as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn seconds as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t *  @private\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn (ticks * (this._beatsToUnits(1)) / this._getPPQ()) as Type;\n\t}\n\n\t/**\n\t *  With no arguments, return 'now'\n\t */\n\tprotected _noArg(): Type {\n\t\treturn this._now();\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tTEMPO CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Return the bpm\n\t */\n\tprotected _getBpm(): BPM {\n\t\treturn this.context.transport.bpm.value;\n\t}\n\n\t/**\n\t * Return the timeSignature\n\t */\n\tprotected _getTimeSignature(): number {\n\t\treturn this.context.transport.timeSignature as number;\n\t}\n\n\t/**\n\t * Return the PPQ or 192 if Transport is not available\n\t */\n\tprotected _getPPQ(): number {\n\t\treturn this.context.transport.PPQ;\n\t}\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected abstract _now(): Type;\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tCONVERSION INTERFACE\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Coerce a time type into this units type.\n\t * @param type Any time type units\n\t */\n\tfromType(type: TimeBaseClass<any, any>): this {\n\t\tthis._units = undefined;\n\t\tswitch (this.defaultUnits) {\n\t\t\tcase \"s\":\n\t\t\t\tthis._val = type.toSeconds();\n\t\t\t\tbreak;\n\t\t\tcase \"i\":\n\t\t\t\tthis._val = type.toTicks();\n\t\t\t\tbreak;\n\t\t\tcase \"hz\":\n\t\t\t\tthis._val = type.toFrequency();\n\t\t\t\tbreak;\n\t\t\tcase \"midi\":\n\t\t\t\tthis._val = type.toMidi();\n\t\t\t\tbreak;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Return the value in seconds\n\t */\n\tabstract toSeconds(): Seconds;\n\n\t/**\n\t *  Return the value as a Midi note\n\t */\n\tabstract toMidi(): MidiNote;\n\n\t/**\n\t * Convert the value into ticks\n\t */\n\tabstract toTicks(): Ticks;\n\n\t/**\n\t *  Return the value in hertz\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn 1 / this.toSeconds();\n\t}\n\n\t/**\n\t *  Return the time in samples\n\t */\n\ttoSamples(): Samples {\n\t\treturn this.toSeconds() * this.context.sampleRate;\n\t}\n\n\t/**\n\t *  Return the time in milliseconds.\n\t */\n\ttoMilliseconds(): Milliseconds {\n\t\treturn this.toSeconds() * 1000;\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\treturn this;\n\t}\n}\n","export { Gain } from \"./context/Gain\";\nexport { Context } from \"./context/Context\";\nexport { OfflineContext } from \"./context/OfflineContext\";\nexport { ToneAudioBuffer } from \"./context/ToneAudioBuffer\";\nexport { Delay } from \"./context/Delay\";\nexport { Clock } from \"./clock/Clock\";\nexport { Frequency } from \"./type/Frequency\";\nexport { Time } from \"./type/Time\";\nexport { Ticks } from \"./type/Ticks\";\nexport { TransportTime } from \"./type/TransportTime\";\nexport { Draw } from \"./util/Draw\";\nexport { StateTimeline } from \"./util/StateTimeline\";\nexport { IntervalTimeline } from \"./util/IntervalTimeline\";\nexport { Timeline } from \"./util/Timeline\";\nexport { Emitter } from \"./util/Emitter\";\nexport { Tone } from \"./Tone\";\nexport { Destination } from \"./context/Destination\";\nexport { Transport } from \"./clock/Transport\";\n","/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext: BaseAudioContext;\n\n// @ts-ignore\nglobalContext = window.TONE_AUDIO_CONTEXT;\n\n/**\n * Returns the default system-wide AudioContext\n */\nexport function getAudioContext(): BaseAudioContext {\n\tif (!globalContext) {\n\t\tsetAudioContext(new AudioContext());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n */\nexport function setAudioContext(context: BaseAudioContext): void {\n\tglobalContext = context;\n\t// @ts-ignore\n\twindow.TONE_AUDIO_CONTEXT = globalContext;\n}\n","\nexport type TickerClockSource = \"worker\" | \"timeout\" | \"offline\";\n\n/**\n * A class which provides a reliable callback using either\n * a Web Worker, or if that isn't supported, falls back to setTimeout.\n */\nexport class Ticker {\n\n\t/**\n\t * Either \"worker\" or \"timeout\" or \"offline\"\n\t */\n\tprivate _type: TickerClockSource;\n\n\t/**\n\t * The update interval of the worker\n\t */\n\tprivate _updateInterval: Seconds;\n\n\t/**\n\t * The callback to invoke at regular intervals\n\t */\n\tprivate _callback: () => void;\n\n\t/**\n\t * track the callback interval\n\t */\n\tprivate _timeout!: number;\n\n\t/**\n\t * private reference to the worker\n\t */\n\tprivate _worker!: Worker;\n\n\tconstructor(callback: () => void, type: TickerClockSource, updateInterval: Seconds) {\n\n\t\tthis._callback = callback;\n\t\tthis._type = type;\n\t\tthis._updateInterval = updateInterval;\n\n\t\t// create the clock source for the first time\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t *  Generate a web worker\n\t */\n\tprivate _createWorker(): void {\n\n\t\tconst blob = new Blob([\n\t\t\t// the initial timeout time\n\t\t\t`var timeoutTime =  ${(this._updateInterval * 1000).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();`,\n\t\t]);\n\t\tconst blobUrl = window.URL.createObjectURL(blob);\n\t\tconst worker = new Worker(blobUrl);\n\n\t\tworker.onmessage = this._callback.bind(this);\n\n\t\tthis._worker = worker;\n\t}\n\n\t/**\n\t * Create a timeout loop\n\t */\n\tprivate _createTimeout(): void {\n\t\tthis._timeout = window.setTimeout(()  => {\n\t\t\tthis._createTimeout();\n\t\t\tthis._callback();\n\t\t}, this._updateInterval * 1000);\n\t}\n\n\t/**\n\t * Create the clock source.\n\t */\n\tprivate _createClock(): void {\n\t\tif (this._type === \"worker\") {\n\t\t\ttry {\n\t\t\t\tthis._createWorker();\n\t\t\t} catch (e) {\n\t\t\t\t// workers not supported, fallback to timeout\n\t\t\t\tthis._type = \"timeout\";\n\t\t\t\tthis._createClock();\n\t\t\t}\n\t\t} else if (this._type === \"timeout\") {\n\t\t\tthis._createTimeout();\n\t\t}\n\t}\n\n\t/**\n\t * Clean up the current clock source\n\t */\n\tprivate _disposeClock(): void {\n\t\tif (this._timeout) {\n\t\t\tclearTimeout(this._timeout);\n\t\t\tthis._timeout = 0;\n\t\t}\n\t\tif (this._worker) {\n\t\t\tthis._worker.terminate();\n\t\t\tthis._worker.onmessage = null;\n\t\t}\n\t}\n\n\t/**\n\t * The rate in seconds the ticker will update\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._updateInterval = Math.max(interval, 128 / 44100);\n\t\tif (this._type === \"worker\") {\n\t\t\tthis._worker.postMessage(Math.max(interval * 1000, 1));\n\t\t}\n\t}\n\n\t/**\n\t * The type of the ticker, either a worker or a timeout\n\t */\n\tget type(): TickerClockSource {\n\t\treturn this._type;\n\t}\n\tset type(type: TickerClockSource) {\n\t\tthis._disposeClock();\n\t\tthis._type = type;\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): void {\n\t\tthis._disposeClock();\n\t}\n}\n","export { getContext, setContext } from \"./core/Global\";\nexport * from \"./core/index\";\nexport * from \"./source/index\";\n\nimport { getContext } from \"./core/Global\";\n/**\n *  The current audio context time\n */\nexport function now(): Seconds {\n\treturn getContext().now();\n}\n"],"sourceRoot":""}