{"version":3,"sources":["webpack://Tone/webpack/universalModuleDefinition","webpack://Tone/webpack/bootstrap","webpack://Tone/./Tone/core/util/Defaults.ts","webpack://Tone/./Tone/core/util/Interface.ts","webpack://Tone/./Tone/core/util/TypeCheck.ts","webpack://Tone/./Tone/core/context/ToneAudioNode.ts","webpack://Tone/./Tone/core/context/Gain.ts","webpack://Tone/./Tone/core/Global.ts","webpack://Tone/./Tone/signal/Signal.ts","webpack://Tone/./Tone/source/Source.ts","webpack://Tone/./Tone/core/util/Timeline.ts","webpack://Tone/./Tone/source/oscillator/Oscillator.ts","webpack://Tone/./Tone/core/context/Param.ts","webpack://Tone/./Tone/core/Tone.ts","webpack://Tone/./Tone/core/context/ToneWithContext.ts","webpack://Tone/./Tone/core/type/Time.ts","webpack://Tone/./Tone/core/Connect.ts","webpack://Tone/./Tone/core/util/StateTimeline.ts","webpack://Tone/./Tone/core/type/TransportTime.ts","webpack://Tone/./Tone/core/type/Conversions.ts","webpack://Tone/./Tone/core/util/Emitter.ts","webpack://Tone/./Tone/source/oscillator/PulseOscillator.ts","webpack://Tone/./Tone/signal/Multiply.ts","webpack://Tone/./Tone/core/type/Ticks.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffer.ts","webpack://Tone/./Tone/core/context/ContextInitialization.ts","webpack://Tone/./Tone/core/context/Context.ts","webpack://Tone/./Tone/source/oscillator/PWMOscillator.ts","webpack://Tone/./Tone/source/oscillator/FatOscillator.ts","webpack://Tone/./Tone/source/oscillator/FMOscillator.ts","webpack://Tone/./Tone/signal/WaveShaper.ts","webpack://Tone/./Tone/signal/SignalOperator.ts","webpack://Tone/./Tone/source/oscillator/AMOscillator.ts","webpack://Tone/./Tone/source/oscillator/OscillatorNode.ts","webpack://Tone/./Tone/source/OneShotSource.ts","webpack://Tone/./Tone/source/buffer/BufferSource.ts","webpack://Tone/./Tone/core/clock/TransportEvent.ts","webpack://Tone/./Tone/component/channel/Volume.ts","webpack://Tone/./Tone/core/util/IntervalTimeline.ts","webpack://Tone/./Tone/core/clock/Clock.ts","webpack://Tone/./Tone/core/type/Frequency.ts","webpack://Tone/./Tone/version.ts","webpack://Tone/./Tone/source/oscillator/OmniOscillator.ts","webpack://Tone/./Tone/signal/AudioToGain.ts","webpack://Tone/./Tone/source/Noise.ts","webpack://Tone/./Tone/source/index.ts","webpack://Tone/./Tone/core/clock/TransportRepeatEvent.ts","webpack://Tone/./Tone/core/clock/Transport.ts","webpack://Tone/./Tone/core/context/Destination.ts","webpack://Tone/./Tone/core/util/Draw.ts","webpack://Tone/./Tone/core/clock/TickSignal.ts","webpack://Tone/./Tone/core/clock/TickSource.ts","webpack://Tone/./Tone/core/context/Delay.ts","webpack://Tone/./Tone/core/context/OfflineContext.ts","webpack://Tone/./Tone/core/type/TimeBase.ts","webpack://Tone/./Tone/core/index.ts","webpack://Tone/./Tone/core/context/AudioContext.ts","webpack://Tone/./Tone/core/clock/Ticker.ts","webpack://Tone/./Tone/index.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","TypeCheck_1","deepMerge","target","sources","_i","arguments","length","source","shift","isObject","key","assign","_a","_b","apply","concat","optionsFromArguments","defaults","argsArray","keys","opts","args","Array","from","isDefined","getDefaultsFromInstance","instance","constructor","getDefaults","defaultArg","given","fallback","isUndef","readOnly","isArray","forEach","str","writable","noOp","arg","isString","isFunction","isNumber","toString","isBoolean","isNote","test","Defaults_1","ToneWithContext_1","ToneAudioNode","_super","_this","options","numberOfInputs","numberOfOutputs","__extends","ToneWithContext","channelCount","channelCountMode","channelInterpretation","createInsOuts","input","context","createGain","output","_setChannelProperties","_internalChannels","node","_getChannelProperties","props","connect","destination","outputNum","inputNum","toDestination","toMaster","disconnect","chain","nodes","connectSeries","fan","dispose","AudioNode","first","reduce","prev","current","srcNode","dstNode","outputNumber","inputNumber","AudioParam","assert","dst","e","Param_1","Interface_1","ToneAudioNode_1","Gain","_gainNode","gain","Param","convert","param","units","globalContext","version_1","Context_1","setContext","initialize","window","TONE_CONTEXT","getContext","Context","start","resume","TONE_SILENCE_LOGGING","prefix","version","printString","console","log","Signal","override","_constantSource","createConstantSource","_param","offset","cancelScheduledValues","setValueAtTime","overridden","time","getValueAtTime","setRampPoint","linearRampToValueAtTime","exponentialRampToValueAtTime","exponentialRampTo","rampTime","startTime","linearRampTo","targetRampTo","exponentialApproachValueAtTime","setTargetAtTime","timeConstant","setValueCurveAtTime","values","duration","scaling","cancelAndHoldAtTime","rampTo","maxValue","minValue","Volume_1","StateTimeline_1","Source","Volume","_volume","undefined","volume","_state","StateTimeline","_synced","_scheduled","_syncedStart","_syncedStop","memory","mute","transport","state","seconds","now","toSeconds","Math","max","currentTime","cancel","setStateAtTime","restart","event_1","sched","schedule","t","_start","push","stop","_stop","bind","sync","stateEvent","startOffset","getSecondsAtTime","sampleTime","on","unsync","off","id","clear","Tone_1","Timeline","_timeline","Infinity","add","event","Reflect","has","valueOf","index","_search","splice","diff","remove","indexOf","peek","getAfter","getBefore","len","after","slice","cancelBefore","previousEvent","beginning","end","midPoint","floor","nextEvent","_iterate","callback","lowerBound","upperBound","forEachBefore","forEachAfter","forEachBetween","endTime","forEachFrom","forEachAtTime","Tone","Signal_1","Source_1","OscillatorNode_1","Oscillator","_oscillator","frequency","detune","_partials","partials","_partialCount","partialCount","_phase","phase","_type","type","baseType","oscillator","ToneOscillatorNode","_wave","setPeriodicWave","onended","setTimeout","cancelStop","syncFrequency","syncSignal","unsyncFrequency","unsyncSignal","isBasicType","_getRealImaginary","real","imag","periodicWave","createPeriodicWave","replace","partial","exec","periodicWaveSize","fftSize","Float32Array","parseInt","piFactor","PI","b","TypeError","sin","cos","_inverseFFT","sum","_getInitialValue","twoPi","Conversions_1","Timeline_1","_minOutput","_events","_initialValue","_fromType","_is","val","dbToGain","toFrequency","min","_toType","gainToDb","numericValue","computedTime","before","beforeValue","previous","_linearInterpolate","_exponentialInterpolate","previousVal","constant","_exponentialApproach","currentVal","startingValue","segTime","valueAtTime","t0","v0","v1","exp","t1","pow","debug","statement","error","Error","Global_1","Frequency_1","Time_1","TransportTime_1","defaultContext","lookAhead","immediate","sampleRate","TimeClass","freq","FrequencyClass","toTicks","TransportTimeClass","attribute","member","set","_getExpressions","method","capture","_now","regexp","quantize","quantTo","_secondsToUnits","nextSubdivision","subdiv","percent","subdivision","round","toNotation","testNotations","power","closest","closestSeconds","notation","notationSeconds","abs","toBarsBeatsSixteenths","quarterTime","_beatsToUnits","quarters","parseFloat","toFixed","measures","_getTimeSignature","sixteenths","sixteenthString","join","_getPPQ","toMidi","ftom","TimeBaseClass","Time","initial","_initial","getLastState","getNextState","event_2","TransportTime","equalPowerScale","db","LN10","intervalToFrequencyRatio","interval","A4","getA4","setA4","log2","mtof","midi","Emitter","split","eventName","once","boundCallback","eventList","emit","mixin","constr","getOwnPropertyDescriptor","Gain_1","WaveShaper_1","Oscillator_1","PulseOscillator","width","_widthGate","_sawtooth","_thresh","WaveShaper","mapping","Multiply","_mult","factor","TicksClass","defaultUnits","ticks","beats","_getBpm","_ticksToUnits","Ticks","ToneAudioBuffer","onload","reverse","url","AudioBuffer","load","catch","onerror","_buffer","buffer","loaded","_reversed","_reverse","promise","downloads","audioBuffer","sent","e_1","fromArray","array","isMultidimensional","channels","createBuffer","multiChannelArray","copyToChannel","toMono","chanNum","toArray","outputArray","numChannels_1","numberOfChannels","channel","channelArray","map","sample","getChannelData","ret","startSamples","endSamples","replacementArray","rev","fromUrl","matches","match","extensions","extension","extensions_1","ext","supportsType","fetch","baseUrl","response","ok","arrayBuffer","decodeAudioData","document","createElement","canPlayType","notifyNewContext","onContextInit","cb","initializeContext","ctx","notifyCloseContext","onContextClose","closeContext","Ticker_1","Emitter_1","AudioContext_1","ContextInitialization_1","_constants","Map","_timeouts","_timeoutIds","_initialized","_context","_latencyHint","latencyHint","_ticker","Ticker","clockSource","updateInterval","_timeoutLoop","addEventListener","getAudioContext","createAnalyser","createOscillator","createBufferSource","createBiquadFilter","createChannelMerger","createChannelSplitter","createConvolver","createDelay","maxDelayTime","createDynamicsCompressor","createIIRFilter","feedforward","feedback","createPanner","constraints","createStereoPanner","createWaveShaper","audioData","listener","_transport","_destination","hint","lookAheadValue","AudioContext","Promise","resolve","close","getConstant","arr","loop","firstEvent","fn","timeout","clearTimeout","Multiply_1","PulseOscillator_1","PWMOscillator","sourceType","_pulse","_modulator","_scale","modulationFrequency","FatOscillator","_oscillators","_spread","spread","count","_forEach","osc","iterator","start_1","step_1","FMOscillator","_carrier","harmonicity","modulationIndex","_modulationNode","modulationType","_shaper","curve","setMap","normalized","oversample","oversampling","isOverSampleType","some","includes","SignalOperator","AudioToGain_1","AMOscillator","_modulationScale","AudioToGain","Connect_1","OneShotSource_1","OneShotSource","_startGain","_stopSource","_startTime","_stopTime","_timeout","_fadeIn","_fadeOut","_curve","getStateAtTime","fadeInTime","_stopGain","fadeOutTime","ToneAudioBuffer_1","ToneBufferSource","_source","_sourceStarted","_sourceStopped","playbackRate","loopStart","loopEnd","fadeIn","fadeOut","computedDur","additionalTail","TransportEvent","_eventId","_once","invoke","_unmutedVolume","IntervalTimeline","_root","_length","IntervalNode","insert","updateHeight","updateMax","_rebalance","parent","results","search","results_1","_removeNode","_setRoot","_replaceNodeInParent","replacement","isLeftChild","left","right","temp","getBalance","_rotateLeft","pivotNode","_rotateRight","balance","low","allNodes_1","traverse","searchAfter","high","_left","_right","height","point","TickSource_1","Clock","_lastUpdate","_boundLoop","_loop","_tickSource","TickSource","pause","ceil","getTicksAtTime","setTicksAtTime","nextTickTime","when","currentTick","getTimeOfTick","forEachTickBetween","Conversions_2","note","pitch","octave","noteNumber","noteToScaleIndex","toLowerCase","tr","q","total","transpose","harmonize","intervals","toNote","scaleIndexToNote","_noArg","_frequencyToUnits","cbb","c#","cx","dbb","d#","dx","ebb","eb","e#","ex","fbb","fb","f","f#","fx","gbb","gb","g","g#","gx","abb","ab","a","a#","ax","bbb","bb","b#","bx","Frequency","AMOscillator_1","FatOscillator_1","FMOscillator_1","PWMOscillator_1","OmniOscillatorSourceMap","am","fat","fm","pulse","pwm","OmniOscillator","_sourceType","substr","_createNewOscillator","_getOscType","oscType","oscConstructor","oldOsc_1","blockTime","sType","mType","SignalOperator_1","_norm","x","BufferSource_1","Noise","_playbackRate","_noiseBuffers","rate","random","_noiseCache","brown","pink","white","channelNum","lastOut","b0","b1","b2","b3","b4","b5","b6","Noise_1","OmniOscillator_1","Ticks_1","TransportEvent_1","TransportRepeatEvent","_currentId","_nextId","_nextTick","_boundRestart","_restart","_interval","_createEvents","scheduleOnce","IntervalTimeline_1","Clock_1","TransportRepeatEvent_1","Transport","_loopStart","_loopEnd","_scheduledEvents","_repeatedEvents","_syncedSignals","_swingAmount","_ppq","ppq","_clock","_processTick","_bindClockEvents","bpm","multiplier","_timeSignature","timeSignature","_swingTicks","swing","swingSubdivision","tickTime","progress","amount","_addEvent","scheduleRepeat","eventId","item","timeline","computedAfter","offsetTicks","toggle","timeSig","startPosition","endPosition","setLoopPoints","timeToTicks","remainingTicks","signal","ratio","computedFreq","PPQ","ratioSignal","syncedSignal","Destination","rawContext","unshift","Draw","expiration","anticipation","_boundDrawLoop","_drawLoop","_animationFrame","requestAnimationFrame","cancelAnimationFrame","TickSignal","_sig","_multiplier","computedValue","prevEvent","segments","rampVal","ticksUntilTime","_getTicksUntilEvent","computedVal","segmentDur","val0","val1","onTheLineEvent","getDurationOfTicks","tick","delta","k","sqrt","sol1","ticksToTime","computedDuration","startTicks","TickSignal_1","_tickOffset","stopEvent","tmpEvent","lastState","elapsedTicks","periodStartTime","offsetEvent","elapsedSeconds","absoluteTicks","computedStartTime","computedEndTime","lastStateEvent","maxStartTime","Delay","maxDelay","delayTime","_delayNode","OfflineContext","OfflineAudioContext","_currentTime","_duration","render","startRendering","_val","_units","_expressions","hz","dot","scalar","number","samples","fromType","trim","typeName","quantity","expr","matching","toSamples","toMilliseconds","OfflineContext_1","Delay_1","Draw_1","Destination_1","Transport_1","setAudioContext","TONE_AUDIO_CONTEXT","_callback","_updateInterval","_createClock","_createWorker","blob","Blob","blobUrl","URL","createObjectURL","worker","Worker","onmessage","_worker","_createTimeout","_disposeClock","terminate","postMessage","__export","Global_2"],"mappings":"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","file":"Tone.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Tone\"] = factory();\n\telse\n\t\troot[\"Tone\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 57);\n","// import { BaseToneOptions } from \"../Tone\";\nimport { isDefined, isObject, isUndef } from \"./TypeCheck\";\n\ntype BaseToneOptions = import(\"../Tone\").BaseToneOptions;\n\n/**\n * Recursively merge an object\n * @param target the object to merge into\n * @param sources the source objects to merge\n */\nexport function deepMerge<T>(target: T, ...sources: T[]): T {\n\tif (!sources.length) { return target; }\n\tconst source = sources.shift();\n\n\tif (isObject(target) && isObject(source)) {\n\t\tfor (const key in source) {\n\t\t\tif (isObject(source[key])) {\n\t\t\t\tif (!target[key]) { Object.assign(target, { [key]: {} }); }\n\t\t\t\tdeepMerge(target[key], source[key] as any);\n\t\t\t} else {\n\t\t\t\tObject.assign(target, { [key]: source[key] as any });\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Convert an args array into an object.\n */\nexport function optionsFromArguments<T>(defaults: T, argsArray: IArguments, keys: string[] = []): T {\n\tconst opts: any = {};\n\tconst args = Array.from(argsArray);\n\tif (args.length === 1 && isObject(args[0])) {\n\t\tdeepMerge(opts, args[0]);\n\t} else {\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tif (isDefined(args[i])) {\n\t\t\t\topts[keys[i]] = args[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn deepMerge(defaults, opts);\n}\n\n/**\n * Return this instances default values by calling Constructor.getDefaults()\n */\nexport function getDefaultsFromInstance<T>(instance: T): BaseToneOptions {\n\ttype ToneClass = {\n\t\tconstructor: ToneClass;\n\t\tgetDefaults: () => BaseToneOptions;\n\t} & T;\n\n\treturn (instance as ToneClass).constructor.getDefaults();\n}\n\n/**\n * Returns the fallback if the given object is undefined.\n * Take an array of arguments and return a formatted options object.\n */\nexport function defaultArg<T>(given: T, fallback: T): T {\n\tif (isUndef(given)) {\n\t\treturn fallback;\n\t} else {\n\t\treturn given;\n\t}\n}\n","import { isArray } from \"./TypeCheck\";\n\n// return an interface which excludes certain keys\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n *  Make the property not writable using `defineProperty`. Internal use only.\n */\nexport function readOnly(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => readOnly(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\tenumerable: true,\n\t\t\twritable: false,\n\t\t});\n\t}\n}\n\n/**\n *  Make an attribute writeable. Internal use only.\n */\nexport function writable(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => writable(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\twritable: true,\n\t\t});\n\t}\n}\n\nexport const noOp: (...args: any[]) => any = () => {\n\t// no op!\n};\n","/**\n *  Test if the arg is undefined\n */\nexport function isUndef(arg: any): arg is undefined {\n\treturn typeof arg === \"undefined\";\n}\n\n/**\n *  Test if the arg is not undefined\n */\nexport function isDefined<T>(arg: T | undefined): arg is T {\n\treturn !isUndef(arg);\n}\n\n/**\n *  Test if the arg is a function\n */\nexport function isFunction(arg: any): arg is (a: any) => any {\n\treturn typeof arg === \"function\";\n}\n\n/**\n *  Test if the argument is a number.\n */\nexport function isNumber(arg: any): arg is number {\n\treturn (typeof arg === \"number\");\n}\n\n/**\n *  Test if the given argument is an object literal (i.e. `{}`);\n */\nexport function isObject(arg: any): arg is object {\n\treturn (Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object);\n}\n\n/**\n *  Test if the argument is a boolean.\n */\nexport function isBoolean(arg: any): arg is boolean {\n\treturn (typeof arg === \"boolean\");\n}\n\n/**\n *  Test if the argument is an Array\n */\nexport function isArray(arg: any): arg is any[] {\n\treturn (Array.isArray(arg));\n}\n\n/**\n *  Test if the argument is a string.\n */\nexport function isString(arg: any): arg is string {\n\treturn (typeof arg === \"string\");\n}\n\n/**\n *  Test if the argument is in the form of a note in scientific pitch notation.\n *  e.g. \"C4\"\n */\nexport function isNote(arg: any): arg is Note {\n\treturn isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}\n","import { optionsFromArguments } from \"../util/Defaults\";\nimport { isArray, isDefined, isNumber } from \"../util/TypeCheck\";\nimport { Param } from \"./Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\n\nexport type InputNode = ToneAudioNode | AudioNode | AudioParam | Param<Unit>;\nexport type OutputNode = ToneAudioNode | AudioNode;\n\nexport interface ChannelProperties {\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n * The possible options for this node\n */\nexport interface ToneAudioNodeOptions extends ToneWithContextOptions {\n\tnumberOfInputs: number;\n\tnumberOfOutputs: number;\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n *  ToneAudioNode is the base class for classes which process audio.\n */\nexport abstract class ToneAudioNode<Options extends ToneAudioNodeOptions = ToneAudioNodeOptions>\nextends ToneWithContext<Options> {\n\n\tabstract name = \"AudioNode\";\n\n\t/**\n\t * The input node or nodes. If the object is a source,\n\t * it does not have any input and this.input is undefined.\n\t */\n\tabstract input: InputNode | InputNode[] | undefined;\n\n\t/**\n\t * The output nodes. If the object is a sink,\n\t * it does not have any output and this.output is undefined.\n\t */\n\tabstract output: OutputNode | OutputNode[] | undefined;\n\n\t/**\n\t *  The number of inputs feeding into the AudioNode.\n\t *  For source nodes, this will be 0.\n\t */\n\treadonly numberOfInputs: number;\n\n\t/**\n\t *  The number of outputs of the AudioNode.\n\t */\n\treadonly numberOfOutputs: number;\n\n\t/**\n\t * List all of the node that must be set to match the ChannelProperties\n\t */\n\tprotected abstract _internalChannels: OutputNode[];\n\n\tstatic getDefaults(): ToneAudioNodeOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tchannelCount: 2,\n\t\t\tchannelCountMode: \"max\" as ChannelCountMode,\n\t\t\tchannelInterpretation: \"speakers\" as ChannelInterpretation,\n\t\t\tnumberOfInputs: 0,\n\t\t\tnumberOfOutputs: 0,\n\t\t});\n\t}\n\n\tconstructor(options: Partial<ToneAudioNodeOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(ToneAudioNode.getDefaults(), arguments, [\"context\"]));\n\n\t\tconst options = optionsFromArguments(ToneAudioNode.getDefaults(), arguments, [\"context\"]);\n\n\t\tthis.numberOfInputs = options.numberOfInputs;\n\t\tthis.numberOfOutputs = options.numberOfInputs;\n\t}\n\n\tprotected createInsOuts(numberOfInputs: number = 0, numberOfOutputs: number = 0): void {\n\t\tif (numberOfInputs === 1) {\n\t\t\tthis.input = this.context.createGain();\n\t\t} else if (numberOfInputs > 1) {\n\t\t\tthis.input = [];\n\t\t\tfor (let i = 0; i < numberOfInputs; i++) {\n\t\t\t\tthis.input[i] = this.context.createGain();\n\t\t\t}\n\t\t}\n\n\t\tif (numberOfOutputs === 1) {\n\t\t\tthis.output = this.context.createGain();\n\t\t} else if (numberOfOutputs > 1) {\n\t\t\tthis.output = [];\n\t\t\tfor (let o = 0; o < numberOfOutputs; o++) {\n\t\t\t\tthis.output[o] = this.context.createGain();\n\t\t\t}\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// AUDIO PROPERTIES\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Set the audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t * @param options\n\t */\n\tprivate _setChannelProperties(options: ChannelProperties): void {\n\t\tif (this._internalChannels.length) {\n\t\t\tthis._internalChannels.forEach(node => {\n\t\t\t\tnode.channelCount = options.channelCount;\n\t\t\t\tnode.channelCountMode = options.channelCountMode;\n\t\t\t\tnode.channelInterpretation = options.channelInterpretation;\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Get the current audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t */\n\tprivate _getChannelProperties(): ChannelProperties {\n\t\tif (this._internalChannels.length) {\n\t\t\tconst node = this._internalChannels[0];\n\t\t\treturn {\n\t\t\t\tchannelCount: node.channelCount,\n\t\t\t\tchannelCountMode: node.channelCountMode,\n\t\t\t\tchannelInterpretation: node.channelInterpretation,\n\t\t\t};\n\t\t} else {\n\t\t\t// return the defaults\n\t\t\treturn {\n\t\t\t\tchannelCount: 2,\n\t\t\t\tchannelCountMode: \"max\",\n\t\t\t\tchannelInterpretation: \"speakers\",\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t *  channelCount is the number of channels used when up-mixing and down-mixing\n\t *  connections to any inputs to the node. The default value is 2 except for\n\t *  specific nodes where its value is specially determined.\n\t */\n\tget channelCount(): number {\n\t\treturn this._getChannelProperties().channelCount;\n\t}\n\tset channelCount(channelCount: number) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCount }));\n\t}\n\n\t/**\n\t *  channelCountMode determines how channels will be counted when up-mixing and\n\t *  down-mixing connections to any inputs to the node.\n\t *  The default value is \"max\". This attribute has no effect for nodes with no inputs.\n\t */\n\tget channelCountMode(): ChannelCountMode {\n\t\treturn this._getChannelProperties().channelCountMode;\n\t}\n\tset channelCountMode(channelCountMode: ChannelCountMode) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCountMode }));\n\t}\n\n\t/**\n\t *  channelInterpretation determines how individual channels will be treated\n\t *  when up-mixing and down-mixing connections to any inputs to the node.\n\t *  The default value is \"speakers\".\n\t */\n\tget channelInterpretation(): ChannelInterpretation {\n\t\treturn this._getChannelProperties().channelInterpretation;\n\t}\n\tset channelInterpretation(channelInterpretation: ChannelInterpretation) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelInterpretation }));\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONNECTIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n\t * @param unit The output to connect to\n\t * @param outputNum The output to connect from\n\t * @param inputNum The input to connect to\n\t */\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t */\n\ttoDestination(): this {\n\t\tthis.connect(this.context.destination);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t * alias for {@link toDestination}\n\t */\n\ttoMaster(): this {\n\t\treturn this.toDestination();\n\t}\n\n\t/**\n\t *  disconnect the output\n\t *  @param output Either the output index to disconnect if the output is an array, or the node to disconnect from.\n\t */\n\tdisconnect(destination?: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tdisconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Connect the output of this node to the rest of the nodes in series.\n\t *  @param nodes\n\t *  @example\n\t *  //connect a node to an effect, panVol and then to the master output\n\t *  node.chain(effect, panVol, Tone.Destination);\n\t */\n\tchain(...nodes: InputNode[]): this {\n\t\tconnectSeries(this, ...nodes);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  connect the output of this node to the rest of the nodes in parallel.\n\t *  @param nodes\n\t *  @returns this\n\t */\n\tfan(...nodes: InputNode[]): this {\n\t\tnodes.forEach(node => this.connect(node));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Dispose and disconnect\n\t */\n\tdispose(): this {\n\t\tif (isDefined(this.input)) {\n\t\t\tif (isArray(this.input)) {\n\t\t\t\tthis.input.forEach(input => {\n\t\t\t\t\tif (input instanceof ToneAudioNode) {\n\t\t\t\t\t\tinput.dispose();\n\t\t\t\t\t} else if (input instanceof AudioNode) {\n\t\t\t\t\t\tinput.disconnect();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (this.input instanceof AudioNode) {\n\t\t\t\t\tthis.input.disconnect();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (isDefined(this.output)) {\n\t\t\tif (isArray(this.output)) {\n\t\t\t\tthis.output.forEach(output => {\n\t\t\t\t\tif (output instanceof ToneAudioNode) {\n\t\t\t\t\t\toutput.dispose();\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutput.disconnect();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.output.disconnect();\n\t\t\t}\n\t\t}\n\t\tthis._internalChannels = [];\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// CONNECTIONS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n *  connect together all of the arguments in series\n *  @param nodes\n */\nexport function connectSeries(...nodes: InputNode[]): void {\n\tconst first = nodes.shift();\n\tnodes.reduce((prev, current) => {\n\t\tif (prev instanceof ToneAudioNode) {\n\t\t\tprev.connect(current);\n\t\t} else if (prev instanceof AudioNode) {\n\t\t\tconnect(prev, current);\n\t\t}\n\t\treturn current;\n\t}, first);\n}\n\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function connect(srcNode: OutputNode, dstNode: InputNode, outputNumber = 0, inputNumber = 0): void {\n\n\t// resolve the input of the dstNode\n\twhile (!(dstNode instanceof AudioNode || dstNode instanceof AudioParam)) {\n\t\tif (isArray(dstNode.input)) {\n\t\t\tthis.assert(dstNode.input.length < inputNumber, \"the output number is greater than the number of outputs\");\n\t\t\tdstNode = dstNode.input[inputNumber];\n\t\t} else if (isDefined(dstNode.input)) {\n\t\t\tdstNode = dstNode.input;\n\t\t}\n\t\tinputNumber = 0;\n\t}\n\n\tif (srcNode instanceof ToneAudioNode) {\n\t\tif (isArray(srcNode.output)) {\n\t\t\tthis.assert(srcNode.output.length < outputNumber, \"the output number is greater than the number of outputs\");\n\t\t\tsrcNode = srcNode.output[outputNumber];\n\t\t} else if (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t\toutputNumber = 0;\n\t}\n\n\t// make the connection\n\tif (dstNode instanceof AudioParam) {\n\t\tsrcNode.connect(dstNode, outputNumber);\n\t} else {\n\t\tsrcNode.connect(dstNode, outputNumber, inputNumber);\n\t}\n}\n\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function disconnect(\n\tsrcNode: OutputNode,\n\tdstNode?: InputNode,\n\toutputNumber = 0,\n\tinputNumber = 0,\n): void {\n\n\t// resolve the destination node\n\tif (isDefined(dstNode)) {\n\t\twhile (dstNode instanceof ToneAudioNode) {\n\t\t\tif (isArray(dstNode.input)) {\n\t\t\t\tif (isNumber(inputNumber)) {\n\t\t\t\t\tthis.assert(dstNode.input.length < inputNumber, \"the input number is greater than the number of inputs\");\n\t\t\t\t\tdstNode = dstNode.input[inputNumber];\n\t\t\t\t} else {\n\t\t\t\t\t// disconnect from all of the nodes\n\t\t\t\t\t// since we don't know which one was connected\n\t\t\t\t\tdstNode.input.forEach(dst => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// catch errors from disconnecting from nodes that are not connected\n\t\t\t\t\t\t\tdisconnect(srcNode, dst, outputNumber);\n\t\t\t\t\t\t\t// tslint:disable-next-line: no-empty\n\t\t\t\t\t\t} catch (e) { }\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tinputNumber = 0;\n\t\t\t} else if (dstNode.input) {\n\t\t\t\tdstNode = dstNode.input;\n\t\t\t}\n\t\t}\n\t}\n\n\t// resolve the src node\n\twhile (!(srcNode instanceof AudioNode)) {\n\t\tif (isArray(srcNode.output)) {\n\t\t\tthis.assert(srcNode.output.length < outputNumber, \"the output number is greater than the number of outputs\");\n\t\t\tsrcNode = srcNode.output[outputNumber];\n\t\t} else if (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t\toutputNumber = 0;\n\t}\n\n\tif (dstNode instanceof AudioParam) {\n\t\tsrcNode.disconnect(dstNode, outputNumber);\n\t} else if (dstNode instanceof AudioNode) {\n\t\tsrcNode.disconnect(dstNode, outputNumber, inputNumber);\n\t} else {\n\t\tsrcNode.disconnect();\n\t}\n}\n","import { Param } from \"../context/Param\";\nimport \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface GainOptions extends ToneAudioNodeOptions {\n\tgain: number;\n\tunits: UnitName;\n\tconvert: boolean;\n}\n\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @param  gain The initial gain of the GainNode\n * @param units The units of the gain parameter.\n */\nexport class Gain<Type extends Unit = GainFactor> extends ToneAudioNode<GainOptions> {\n\n\tname = \"Gain\";\n\n\t/**\n\t *  The gain parameter of the gain node.\n\t */\n\treadonly gain: Param<Type>;\n\n\t/**\n\t * The wrapped GainNode.\n\t */\n\tprivate _gainNode: GainNode = this.context.createGain();\n\n\t// input = output\n\treadonly input: GainNode = this._gainNode;\n\treadonly output: GainNode = this._gainNode;\n\n\t/**\n\t * Add all of the gain nodes\n\t */\n\tprotected _internalChannels: AudioNode[] = [this._gainNode];\n\n\tconstructor(gain?: GainFactor, units?: Unit);\n\tconstructor(options?: Partial<GainOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n\t\tconst options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n\n\t\tthis.gain = new Param({\n\t\t\tcontext : this.context,\n\t\t\tconvert : options.convert,\n\t\t\tparam : this._gainNode.gain,\n\t\t\tunits : options.units,\n\t\t\tvalue : options.gain,\n\t\t});\n\t\treadOnly(this, \"gain\");\n\t}\n\n\tstatic getDefaults(): GainOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert : true,\n\t\t\tgain : 1,\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tunits : \"gain\" as UnitName,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { version } from \"../version\";\nimport { Context } from \"./context/Context\";\n\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext: Context;\n\n// @ts-ignore\nglobalContext = window.TONE_CONTEXT;\n\n/**\n * Returns the default system-wide AudioContext\n */\nexport function getContext(): Context {\n\tif (!globalContext) {\n\t\tsetContext(new Context());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n */\nexport function setContext(context: Context): void {\n\tglobalContext = context;\n\tcontext.initialize();\n\t// @ts-ignore\n\twindow.TONE_CONTEXT = context;\n}\n\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * document.querySelector('#playbutton').addEventListener('click', () => Tone.start())\n */\nexport function start(): Promise <void> {\n\treturn globalContext.resume();\n}\n\n/**\n * Log Tone.js + version in the console.\n */\nif (!this.TONE_SILENCE_LOGGING) {\n\tlet prefix = \"v\";\n\t// @ts-ignore\n\tif (version === \"dev\") {\n\t\tprefix = \"\";\n\t}\n\tconst printString = ` * Tone.js ${prefix}${version} * `;\n\t// tslint:disable-next-line: no-console\n\tconsole.log(`%c${printString}`, \"background: #000; color: #fff\");\n}\n","import { AbstractParam } from \"../core/context/AbstractParam\";\nimport { Param } from \"../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\n\nexport interface SignalOptions<Type> extends ToneAudioNodeOptions {\n\tvalue: Type;\n\tunits: UnitName;\n\tconvert: boolean;\n}\n\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *  @param value Initial value of the signal\n *  @param units unit The units the signal is in.\n * @example\n * const signal = new Tone.Signal(10);\n */\nexport class Signal<Type extends Unit = number> extends ToneAudioNode<SignalOptions<any>>\nimplements AbstractParam<Type> {\n\n\tname = \"Signal\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection.\n\t */\n\treadonly override: boolean = true;\n\n\t/**\n\t * The constant source node which generates the signal\n\t */\n\tprivate _constantSource: ConstantSourceNode = this.context.createConstantSource();\n\treadonly output: OutputNode = this._constantSource;\n\tprotected _param: Param<Type>;\n\treadonly input: InputNode;\n\tprotected _internalChannels = [this._constantSource];\n\n\tconstructor(value?: Type, units?: UnitName);\n\tconstructor(options?: Partial<SignalOptions<Type>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n\n\t\tconst options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]) as SignalOptions<Type>;\n\n\t\tthis._constantSource.start(0);\n\t\tthis.input = this._param = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._constantSource.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.value,\n\t\t});\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannelCount: 1,\n\t\t\tchannelCountMode: \"explicit\",\n\t\t\tchannelInterpretation: \"discrete\",\n\t\t\tconvert: true,\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tunits: \"number\" as UnitName,\n\t\t\tvalue: 0,\n\t\t}) as SignalOptions<any>;\n\t}\n\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tif (destination instanceof Param || destination instanceof AudioParam ||\n\t\t\t(destination instanceof Signal && destination.override)) {\n\t\t\t// cancel changes\n\t\t\tdestination.cancelScheduledValues(0);\n\t\t\t// reset the value\n\t\t\tdestination.setValueAtTime(0, 0);\n\t\t\t// mark the value as overridden\n\t\t\tif (destination instanceof Signal) {\n\t\t\t\tdestination.overridden = true;\n\t\t\t}\n\t\t}\n\t\tsuper.connect(destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// ABSTRACT PARAM INTERFACE\n\t// just a proxy for the ConstantSourceNode's offset AudioParam\n\t// all docs are generated from AbstractParam.ts\n\t///////////////////////////////////////////////////////////////////////////\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.setValueAtTime(value, time);\n\t\treturn this;\n\t}\n\tgetValueAtTime(time: Time): Type {\n\t\treturn this._param.getValueAtTime(time);\n\t}\n\tsetRampPoint(time: Time): this {\n\t\tthis._param.setRampPoint(time);\n\t\treturn this;\n\t}\n\tlinearRampToValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.linearRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampToValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.exponentialRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.exponentialRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\tlinearRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.linearRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\ttargetRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.targetRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\texponentialApproachValueAtTime(value: Type, time: Time, rampTime: Time): this {\n\t\tthis._param.exponentialApproachValueAtTime(value, time, rampTime);\n\t\treturn this;\n\t}\n\tsetTargetAtTime(value: Type, startTime: Time, timeConstant: number): this {\n\t\tthis._param.setTargetAtTime(value, startTime, timeConstant);\n\t\treturn this;\n\t}\n\tsetValueCurveAtTime(values: Type[], startTime: Time, duration: Time, scaling?: number): this {\n\t\tthis._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\t\treturn this;\n\t}\n\tcancelScheduledValues(time: Time): this {\n\t\tthis._param.cancelScheduledValues(time);\n\t\treturn this;\n\t}\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tthis._param.cancelAndHoldAtTime(time);\n\t\treturn this;\n\t}\n\trampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.rampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\n\tget value(): Type {\n\t\treturn this._param.value;\n\t}\n\tset value(value: Type) {\n\t\tthis._param.value = value;\n\t}\n\n\tget convert(): boolean {\n\t\treturn this._param.convert;\n\t}\n\tset convert(convert: boolean) {\n\t\tthis._param.convert = convert;\n\t}\n\n\tget units(): UnitName {\n\t\treturn this._param.units;\n\t}\n\n\tget overridden(): boolean {\n\t\treturn this._param.overridden;\n\t}\n\tset overridden(overridden: boolean) {\n\t\tthis._param.overridden = overridden;\n\t}\n\n\tget maxValue(): number {\n\t\treturn this._param.maxValue;\n\t}\n\tget minValue(): number {\n\t\treturn this._param.minValue;\n\t}\n}\n","import { Volume } from \"../component/channel/Volume\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp, readOnly } from \"../core/util/Interface\";\nimport { PlaybackState, StateTimeline, StateTimelineEvent } from \"../core/util/StateTimeline\";\nimport { isUndef } from \"../core/util/TypeCheck\";\n\nexport interface SourceOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  @class  Base class for sources. Sources have start/stop methods\n *          and the ability to be synced to the\n *          start/stop of this.context.transport.\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n *  @example\n * //Multiple state change events can be chained together,\n * //but must be set in the correct order and with ascending times\n *\n * // OK\n * state.start().stop(\"+0.2\");\n * // AND\n * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n *\n * // BAD\n * state.stop(\"+0.2\").start();\n * // OR\n * state.start(\"+0.3\").stop(\"+0.2\");\n *\n */\nexport abstract class Source<Options extends SourceOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The output volume node\n\t *  @type  {Tone.Volume}\n\t *  @private\n\t */\n\tprivate _volume: Volume = new Volume({\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * The output note\n\t */\n\toutput = this._volume;\n\tprotected _internalChannels = [this.output];\n\n\t/**\n\t * There is no input\n\t */\n\tinput = undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * source.volume.value = -6;\n\t */\n\tvolume = this._volume.volume;\n\n\t/**\n\t * \tKeep track of the scheduled state.\n\t *  @type {Tone.StateTimeline}\n\t *  @private\n\t */\n\tprotected _state: StateTimeline = new StateTimeline(\"stopped\");\n\n\t/**\n\t *  The synced `start` callback function from the transport\n\t *  @type {Function}\n\t *  @private\n\t */\n\tprivate _synced = false;\n\n\t/**\n\t *  Keep track of all of the scheduled event ids\n\t */\n\tprivate _scheduled: number[] = [];\n\n\t/**\n\t * Placeholder functions for syncing/unsyncing to transport\n\t */\n\tprivate _syncedStart: (time: Seconds, offset: Seconds) => void = noOp;\n\tprivate _syncedStop: (time: Seconds) => void = noOp;\n\n\tconstructor(options: Partial<SourceOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n\n\t\treadOnly(this, \"volume\");\n\t\tthis._state.memory = 100;\n\t\tthis.volume.value = options.volume;\n\t\t// set mute initially\n\t\tthis.mute = options.mute;\n\n\t}\n\n\tstatic getDefaults(): SourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t */\n\tget state(): PlaybackState {\n\t\tif (this._synced) {\n\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\treturn this._state.getValueAtTime(this.context.transport.seconds);\n\t\t\t} else {\n\t\t\t\treturn \"stopped\";\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._state.getValueAtTime(this.now());\n\t\t}\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute: boolean) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t// overwrite these functions\n\tprotected abstract _start(time: Time, offset?: Time, duration?: Time): void;\n\tprotected abstract _stop(time: Time): void;\n\tabstract restart(time: Time, offset?: Time, duration?: Time): this;\n\n\t/**\n\t *  Start the source at the specified time. If no time is given,\n\t *  start the source now.\n\t *  @param  {Time} [time=now] When the source should be started.\n\t *  @returns {Source} this\n\t *  @example\n\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tif (isUndef(time) && this._synced) {\n\t\t\ttime = this.context.transport.seconds;\n\t\t} else {\n\t\t\ttime = this.toSeconds(time);\n\t\t\ttime = Math.max(time, this.context.currentTime);\n\t\t}\n\t\t// if it's started, stop it and restart it\n\t\tif (this._state.getValueAtTime(time) === \"started\") {\n\t\t\tthis._state.cancel(time);\n\t\t\tthis._state.setStateAtTime(\"started\", time);\n\t\t\tthis.restart(time, offset, duration);\n\t\t} else {\n\t\t\tthis._state.setStateAtTime(\"started\", time);\n\t\t\tif (this._synced) {\n\t\t\t\t// add the offset time to the event\n\t\t\t\tconst event = this._state.get(time);\n\t\t\t\tif (event) {\n\t\t\t\t\tevent.offset = this.toSeconds(defaultArg(offset, 0));\n\t\t\t\t\tevent.duration = this.toSeconds(duration);\n\t\t\t\t}\n\t\t\t\tconst sched = this.context.transport.schedule(t => {\n\t\t\t\t\tthis._start(t, offset, duration);\n\t\t\t\t}, time);\n\t\t\t\tthis._scheduled.push(sched);\n\n\t\t\t\t// if it's already started\n\t\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\t\tthis._syncedStart(this.now(), this.context.transport.seconds);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._start.apply(this, arguments);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the source at the specified time. If no time is given,\n\t *  stop the source now.\n\t *  @param  {Time} [time=now] When the source should be stopped.\n\t *  @returns {Source} this\n\t *  @example\n\t * source.stop(); // stops the source immediately\n\t */\n\tstop(time?: Time): this {\n\t\tif (isUndef(time) && this._synced) {\n\t\t\ttime = this.context.transport.seconds;\n\t\t} else {\n\t\t\ttime = this.toSeconds(time);\n\t\t\ttime = Math.max(time, this.context.currentTime);\n\t\t}\n\t\tif (!this._synced) {\n\t\t\tthis._stop.apply(this, arguments);\n\t\t} else {\n\t\t\tconst sched = this.context.transport.schedule(this._stop.bind(this), time);\n\t\t\tthis._scheduled.push(sched);\n\t\t}\n\t\tthis._state.cancel(time);\n\t\tthis._state.setStateAtTime(\"stopped\", time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Sync the source to the Transport so that all subsequent\n\t *  calls to `start` and `stop` are synced to the TransportTime\n\t *  instead of the AudioContext time.\n\t *\n\t * @example\n\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * source.sync().start(0).stop(0.3);\n\t * //start the transport.\n\t * this.context.transport.start();\n\t *\n\t * @example\n\t * //start the transport with an offset and the sync'ed sources\n\t * //will start in the correct position\n\t * source.sync().start(0.1);\n\t * //the source will be invoked with an offset of 0.4 = (0.5 - 0.1)\n\t * this.context.transport.start(\"+0.5\", 0.5);\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncedStart = (time, offset) => {\n\t\t\t\tif (offset > 0) {\n\t\t\t\t\t// get the playback state at that time\n\t\t\t\t\tconst stateEvent = this._state.get(offset);\n\t\t\t\t\t// listen for start events which may occur in the middle of the sync'ed time\n\t\t\t\t\tif (stateEvent && stateEvent.state === \"started\" && stateEvent.time !== offset) {\n\t\t\t\t\t\t// get the offset\n\t\t\t\t\t\tconst startOffset = offset - this.toSeconds(stateEvent.time);\n\t\t\t\t\t\tlet duration;\n\t\t\t\t\t\tif (stateEvent.duration) {\n\t\t\t\t\t\t\tduration = this.toSeconds(stateEvent.duration) - startOffset;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._syncedStop = time => {\n\t\t\t\tconst seconds = this.context.transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));\n\t\t\t\tif (this._state.getValueAtTime(seconds) === \"started\") {\n\t\t\t\t\tthis._stop(time);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.context.transport.on(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"loopStart\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"loopEnd\", this._syncedStop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsync the source to the Transport. See Source.sync\n\t */\n\tunsync(): this {\n\t\tif (this._synced) {\n\t\t\tthis.context.transport.off(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"loopEnd\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.off(\"loopStart\", this._syncedStart);\n\t\t}\n\t\tthis._synced = false;\n\t\t// clear all of the scheduled ids\n\t\tthis._scheduled.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduled = [];\n\t\tthis._state.cancel(0);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tthis.unsync();\n\t\tthis._volume.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n","import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"./Defaults\";\n\ntype TimelineSearchParam = \"ticks\" | \"time\";\n\n/**\n * The options object for Timeline\n */\ninterface TimelineOptions {\n\tmemory: number;\n}\n\n/**\n * An event must have a time number\n */\nexport interface TimelineEvent {\n\ttime: number;\n}\n\n/**\n *  @class A Timeline class for scheduling and maintaining state\n *         along a timeline. All events must have a \"time\" property.\n *         Internally, events are stored in time order for fast\n *         retrieval.\n *  @param memory The number of previous events that are retained.\n */\nexport class Timeline<GenericEvent extends TimelineEvent> extends Tone {\n\n\tname = \"Timeline\";\n\n\t/**\n\t *  The memory of the timeline, i.e.\n\t *  how many events in the past it will retain\n\t */\n\tmemory: number;\n\n\t/**\n\t * The array of scheduled timeline events\n\t */\n\tprotected _timeline: GenericEvent[] = [];\n\n\tconstructor(options?: Partial<TimelineOptions>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(memory?: number);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Timeline.getDefaults(), arguments, [\"memory\"]);\n\n\t\tthis.memory = options.memory;\n\t}\n\n\tstatic getDefaults(): TimelineOptions {\n\t\treturn {\n\t\t\tmemory: Infinity,\n\t\t};\n\t}\n\n\t/**\n\t *  The number of items in the timeline.\n\t */\n\tget length(): number {\n\t\treturn this._timeline.length;\n\t}\n\n\t/**\n\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t *  @param event  The event object to insert into the timeline.\n\t */\n\tadd(event: GenericEvent): Timeline<GenericEvent> {\n\t\t// the event needs to have a time attribute\n\t\tthis.assert(Reflect.has(event, \"time\"), \"Timeline: events must have a time attribute\");\n\t\tevent.time = event.time.valueOf();\n\t\tconst index = this._search(event.time);\n\t\tthis._timeline.splice(index + 1, 0, event);\n\t\t// if the length is more than the memory, remove the previous ones\n\t\tif (this.length > this.memory) {\n\t\t\tconst diff = this.length - this.memory;\n\t\t\tthis._timeline.splice(0, diff);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  {Object}  event  The event object to remove from the list.\n\t *  @returns {Timeline} this\n\t */\n\tremove(event: GenericEvent): Timeline<GenericEvent> {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index !== -1) {\n\t\t\tthis._timeline.splice(index, 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the nearest event whose time is less than or equal to the given time.\n\t *  @param  time  The time to query.\n\t */\n\tget(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index !== -1) {\n\t\t\treturn this._timeline[index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Return the first event in the timeline without removing it\n\t *  @returns {Object} The first event object\n\t */\n\tpeek(): GenericEvent | undefined {\n\t\treturn this._timeline[0];\n\t}\n\n\t/**\n\t *  Return the first event in the timeline and remove it\n\t */\n\tshift(): GenericEvent | undefined {\n\t\treturn this._timeline.shift();\n\t}\n\n\t/**\n\t *  Get the event which is scheduled after the given time.\n\t *  @param  time  The time to query.\n\t */\n\tgetAfter(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index + 1 < this._timeline.length) {\n\t\t\treturn this._timeline[index + 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Get the event before the event at the given time.\n\t *  @param  time  The time to query.\n\t */\n\tgetBefore(time: number): GenericEvent | null {\n\t\tconst len = this._timeline.length;\n\t\t// if it's after the last item, return the last item\n\t\tif (len > 0 && this._timeline[len - 1].time < time) {\n\t\t\treturn this._timeline[len - 1];\n\t\t}\n\t\tconst index = this._search(time);\n\t\tif (index - 1 >= 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Cancel events at and after the given time\n\t *  @param  time  The time to query.\n\t */\n\tcancel(after: number): Timeline<GenericEvent> {\n\t\tif (this._timeline.length > 1) {\n\t\t\tlet index = this._search(after);\n\t\t\tif (index >= 0) {\n\t\t\t\tif (this._timeline[index].time === after) {\n\t\t\t\t\t// get the first item with that time\n\t\t\t\t\tfor (let i = index; i >= 0; i--) {\n\t\t\t\t\t\tif (this._timeline[i].time === after) {\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index);\n\t\t\t\t} else {\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t} else if (this._timeline.length === 1) {\n\t\t\t// the first item's time\n\t\t\tif (this._timeline[0].time >= after) {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel events before or equal to the given time.\n\t *  @param  {Number}  time  The time to cancel before.\n\t *  @returns {Timeline} this\n\t */\n\tcancelBefore(time): Timeline<GenericEvent> {\n\t\tconst index = this._search(time);\n\t\tif (index >= 0) {\n\t\t\tthis._timeline = this._timeline.slice(index + 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the previous event if there is one. null otherwise\n\t * @param  {Object} event The event to find the previous one of\n\t * @return {Object}       The event right before the given event\n\t */\n\tpreviousEvent(event): GenericEvent | null {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index > 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Does a binary search on the timeline array and returns the\n\t *  nearest event index whose time is after or equal to the given time.\n\t *  If a time is searched before the first index in the timeline, -1 is returned.\n\t *  If the time is after the end, the index of the last item is returned.\n\t *  @param  time\n\t */\n\tprotected _search(time: number, param: TimelineSearchParam = \"time\"): number {\n\t\tif (this._timeline.length === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet beginning = 0;\n\t\tconst len = this._timeline.length;\n\t\tlet end = len;\n\t\tif (len > 0 && this._timeline[len - 1][param] <= time) {\n\t\t\treturn len - 1;\n\t\t}\n\t\twhile (beginning < end) {\n\t\t\t// calculate the midpoint for roughly equal partition\n\t\t\tlet midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\t\tconst event = this._timeline[midPoint];\n\t\t\tconst nextEvent = this._timeline[midPoint + 1];\n\t\t\tif (event[param] === time) {\n\t\t\t\t// choose the last one that has the same time\n\t\t\t\tfor (let i = midPoint; i < this._timeline.length; i++) {\n\t\t\t\t\tconst testEvent = this._timeline[i];\n\t\t\t\t\tif (testEvent[param] === time) {\n\t\t\t\t\t\tmidPoint = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[param] < time && nextEvent[param] > time) {\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[param] > time) {\n\t\t\t\t// search lower\n\t\t\t\tend = midPoint;\n\t\t\t} else {\n\t\t\t\t// search upper\n\t\t\t\tbeginning = midPoint + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t *  Internal iterator. Applies extra safety checks for\n\t *  removing items from the array.\n\t */\n\tprivate _iterate(\n\t\tcallback: (event: GenericEvent) => void,\n\t\tlowerBound = 0, upperBound = this._timeline.length - 1,\n\t): void {\n\t\tthis._timeline.slice(lowerBound, upperBound + 1).forEach(callback);\n\t}\n\n\t/**\n\t *  Iterate over everything in the array\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\tthis._iterate(callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at or before the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachBefore(time, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array after the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAfter(time, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst lowerBound = this._search(time);\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array between the startTime and endTime.\n\t *  The timerange is inclusive of the startTime, but exclusive of the endTime.\n\t *  range = [startTime, endTime).\n\t *  @param  startTime The time to check if items are before\n\t *  @param  endTime The end of the test interval.\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachBetween(startTime: number, endTime: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\tlet lowerBound = this._search(startTime);\n\t\tlet upperBound = this._search(endTime);\n\t\tif (lowerBound !== -1 && upperBound !== -1) {\n\t\t\tif (this._timeline[lowerBound].time !== startTime) {\n\t\t\t\tlowerBound += 1;\n\t\t\t}\n\t\t\t// exclusive of the end time\n\t\t\tif (this._timeline[upperBound].time === endTime) {\n\t\t\t\tupperBound -= 1;\n\t\t\t}\n\t\t\tthis._iterate(callback, lowerBound, upperBound);\n\t\t} else if (lowerBound === -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at or after the given time. Similar to\n\t *  forEachAfter, but includes the item(s) at the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tlet lowerBound = this._search(time);\n\t\t// work backwards until the event time is less than time\n\t\twhile (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t\t\tlowerBound--;\n\t\t}\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at the given time\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(event => {\n\t\t\t\tif (event.time === time) {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t}, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tthis._timeline = [];\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source, SourceOptions } from \"../Source\";\nimport { ToneOscillatorNode } from \"./OscillatorNode\";\n// type OmniOscillatorSourceType = import(\"./OmniOscillator\").OmniOscillatorSourceType;\n\nexport type ToneOscillatorBaseType = OscillatorType | \"pulse\" | \"pwm\";\n\nexport type ToneOscillatorType = ToneOscillatorBaseType | string;\n\nexport interface ToneOscillatorOptions extends SourceOptions {\n\ttype: ToneOscillatorType;\n\tfrequency: Frequency;\n\tdetune: Cents;\n\tphase: Degrees;\n\tpartials: number[];\n\tpartialCount: number;\n}\n\n/**\n * All Oscillators share this interface\n */\nexport interface OscillatorInterface {\n\tpartials: number[];\n\tpartialCount: number;\n\tphase: Degrees;\n\treadonly frequency: Signal<Frequency>;\n\treadonly detune: Signal<Cents>;\n\ttype: ToneOscillatorType;\n\tbaseType: ToneOscillatorBaseType;\n\t// sourceType: OmniOscillatorSourceType;\n}\n\n/**\n *  Oscillator supports a number of features including\n *  phase rotation, multiple oscillator types (see Oscillator.type),\n *  and Transport syncing (see Oscillator.syncFrequency).\n *\n *  @param frequency Starting frequency\n *  @param type The oscillator type. Read more about type below.\n *  @example\n * //make and start a 440hz sine tone\n * var osc = new Oscillator(440, \"sine\").toMaster().start();\n */\nexport class Oscillator extends Source<ToneOscillatorOptions> implements OscillatorInterface {\n\n\tname = \"Oscillator\";\n\n\t/**\n\t *  the main oscillator\n\t */\n\tprivate _oscillator: ToneOscillatorNode | null = null;\n\n\t/**\n\t *  The frequency control.\n\t */\n\tfrequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune control signal.\n\t */\n\tdetune: Signal<Cents>;\n\n\t/**\n\t *  the periodic wave\n\t */\n\tprivate _wave?: PeriodicWave;\n\n\t/**\n\t *  The partials of the oscillator\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t *  The number of partials to limit or extend the periodic wave by\n\t */\n\tprivate _partialCount: number;\n\n\t/**\n\t *  the phase of the oscillator between 0 - 360\n\t */\n\tprivate _phase: Radians;\n\n\t/**\n\t *  the type of the oscillator\n\t *  @type {string}\n\t *  @private\n\t */\n\tprivate _type;\n\n\tconstructor(options?: Partial<ToneOscillatorOptions>)\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal<Frequency>({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\tthis.detune = new Signal<Cents>({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, \"detune\");\n\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\t\tthis._phase = options.phase;\n\t\tthis._type = options.type;\n\n\t\tif (options.partialCount && options.type !== \"custom\") {\n\t\t\tthis._type = this.baseType + options.partialCount.toString();\n\t\t}\n\t\tthis.phase = this._phase;\n\t}\n\n\tstatic getDefaults(): ToneOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tpartialCount: 0,\n\t\t\tpartials: [],\n\t\t\tphase: 0,\n\t\t\ttype: \"sine\",\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time?: Time): void {\n\t\tthis.log(\"start\", time);\n\t\t// new oscillator with previous values\n\t\tconst oscillator = new ToneOscillatorNode({\n\t\t\tcontext: this.context,\n\t\t});\n\t\tthis._oscillator = oscillator;\n\t\tif (this._wave) {\n\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t} else {\n\t\t\tthis._oscillator.type = this._type;\n\t\t}\n\t\t// connect the control signal to the oscillator frequency & detune\n\t\tthis._oscillator.connect(this.output);\n\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\tthis.detune.connect(this._oscillator.detune);\n\n\t\t// disconnect onended\n\t\toscillator.onended = () => {\n\t\t\t// defer the callback for the offline context rendering\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.frequency.disconnect(oscillator.frequency);\n\t\t\t\tthis.detune.disconnect(oscillator.detune);\n\t\t\t}, 100);\n\t\t};\n\n\t\t// start the oscillator\n\t\ttime = this.toSeconds(time);\n\t\tthis._oscillator.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tthis.log(\"stop\", time);\n\t\tif (this._oscillator) {\n\t\t\ttime = this.toSeconds(time);\n\t\t\tthis._oscillator.stop(time);\n\t\t}\n\t}\n\n\t/**\n\t * Restart the oscillator. Does not stop the oscillator, but instead\n\t * just cancels any scheduled 'stop' from being invoked.\n\t */\n\trestart(time?: Time): this {\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.cancelStop();\n\t\t}\n\t\tthis._state.cancel(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t *  will also affect the oscillators frequency.\n\t *  @example\n\t * Tone.Transport.bpm.value = 120;\n\t * osc.frequency.value = 440;\n\t * //the ration between the bpm and the frequency will be maintained\n\t * osc.syncFrequency();\n\t * Tone.Transport.bpm.value = 240;\n\t * // the frequency of the oscillator is doubled to 880\n\t */\n\tsyncFrequency(): this {\n\t\tthis.context.transport.syncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsync the oscillator's frequency from the Transport.\n\t *  See Oscillator.syncFrequency\n\t */\n\tunsyncFrequency(): this {\n\t\tthis.context.transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/* tslint:disable */\n\t/**\n\t * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\n\t * setting the first x number of partials of the oscillator. For example: \"sine4\" would\n\t * set be the first 4 partials of the sine wave and \"triangle8\" would set the first\n\t * 8 partials of the triangle wave.\n\t * <br><br>\n\t * Uses PeriodicWave internally even for native types so that it can set the phase.\n\t * PeriodicWave equations are from the\n\t * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).\n\t *\n\t * @memberOf Oscillator#\n\t * @type {string}\n\t * @name type\n\t * @example\n\t * //set it to a square wave\n\t * osc.type = \"square\";\n\t * @example\n\t * //set the first 6 partials of a sawtooth wave\n\t * osc.type = \"sawtooth6\";\n\t */\n\t/* tslint:enable */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tconst isBasicType = [\"sine\", \"square\", \"sawtooth\", \"triangle\"].indexOf(type) !== -1;\n\t\tif (this._phase === 0 && isBasicType) {\n\t\t\tthis._wave = undefined;\n\t\t\tthis._partialCount = 0;\n\t\t\t// just go with the basic approach\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\t// already tested that it's a basic type\n\t\t\t\tthis._oscillator.type = type as OscillatorType;\n\t\t\t}\n\t\t} else {\n\t\t\tconst [real, imag] = this._getRealImaginary(type, this._phase);\n\t\t\tconst periodicWave = this.context.createPeriodicWave(real, imag);\n\t\t\tthis._wave = periodicWave;\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t}\n\t\t}\n\t\tthis._type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._type.replace(this.partialCount, \"\");\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tif (this.partialCount && this._type !== \"custom\" && baseType !== \"custom\") {\n\t\t\tthis.type = baseType + this.partialCount;\n\t\t} else {\n\t\t\tthis.type = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t * @example\n\t * osc.type = 'sine'\n\t * osc.partialCount = 3\n\t * //is equivalent to\n\t * osc.type = 'sine3'\n\t */\n\tget partialCount(): number {\n\t\treturn this._partialCount;\n\t}\n\tset partialCount(p: number) {\n\t\tlet type = this._type;\n\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(this._type);\n\t\tif (partial) {\n\t\t\ttype = partial[1];\n\t\t}\n\t\tif (this._type !== \"custom\") {\n\t\t\tif (p === 0) {\n\t\t\t\tthis.type = type;\n\t\t\t} else {\n\t\t\t\tthis.type = type + p.toString();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Get the object's attributes. Given no arguments get\n\t *  will return all available object properties and their corresponding\n\t *  values.\n\t */\n\tget(): ToneOscillatorOptions {\n\t\tconst values = super.get();\n\t\tif (values.type !== \"custom\") {\n\t\t\tdelete values.partials;\n\t\t}\n\t\treturn values;\n\t}\n\n\t/**\n\t *  Returns the real and imaginary components based\n\t *  on the oscillator type.\n\t *  @returns [real: Float32Array, imaginary: Float32Array]\n\t *  @private\n\t */\n\tprivate _getRealImaginary(type: ToneOscillatorType, phase: Radians): Float32Array[] {\n\t\tconst fftSize = 4096;\n\t\tlet periodicWaveSize = fftSize / 2;\n\n\t\tconst real = new Float32Array(periodicWaveSize);\n\t\tconst imag = new Float32Array(periodicWaveSize);\n\n\t\tlet partialCount = 1;\n\t\tif (type === \"custom\") {\n\t\t\tpartialCount = this._partials.length + 1;\n\t\t\tthis._partialCount = this._partials.length;\n\t\t\tperiodicWaveSize = partialCount;\n\t\t} else {\n\t\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t\t\tif (partial) {\n\t\t\t\tpartialCount = parseInt(partial[2], 10) + 1;\n\t\t\t\tthis._partialCount = parseInt(partial[2], 10);\n\t\t\t\ttype = partial[1];\n\t\t\t\tpartialCount = Math.max(partialCount, 2);\n\t\t\t\tperiodicWaveSize = partialCount;\n\t\t\t} else {\n\t\t\t\tthis._partialCount = 0;\n\t\t\t}\n\t\t\tthis._partials = [];\n\t\t}\n\n\t\t// tslint:disable: no-bitwise\n\t\tfor (let n = 1; n < periodicWaveSize; ++n) {\n\t\t\tconst piFactor = 2 / (n * Math.PI);\n\t\t\tlet b;\n\t\t\tswitch (type) {\n\t\t\t\tcase \"sine\":\n\t\t\t\t\tb = (n <= partialCount) ? 1 : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"square\":\n\t\t\t\t\tb = (n & 1) ? 2 * piFactor : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"sawtooth\":\n\t\t\t\t\tb = piFactor * ((n & 1) ? 1 : -1);\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"triangle\":\n\t\t\t\t\tif (n & 1) {\n\t\t\t\t\t\tb = 2 * (piFactor * piFactor) * ((((n - 1) >> 1) & 1) ? -1 : 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t}\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"custom\":\n\t\t\t\t\tb = this._partials[n - 1];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new TypeError(\"Oscillator: invalid type: \" + type);\n\t\t\t}\n\t\t\tif (b !== 0) {\n\t\t\t\treal[n] = -b * Math.sin(phase * n);\n\t\t\t\timag[n] = b * Math.cos(phase * n);\n\t\t\t} else {\n\t\t\t\treal[n] = 0;\n\t\t\t\timag[n] = 0;\n\t\t\t}\n\t\t}\n\t\treturn [real, imag];\n\t}\n\n\t/**\n\t *  Compute the inverse FFT for a given phase.\n\t */\n\tprivate _inverseFFT(real: Float32Array, imag: Float32Array, phase: Radians): number {\n\t\tlet sum = 0;\n\t\tconst len = real.length;\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tsum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t *  Returns the initial value of the oscillator.\n\t */\n\tprotected _getInitialValue(): AudioRange {\n\t\tconst [real, imag] = this._getRealImaginary(this._type, 0);\n\t\tlet maxValue = 0;\n\t\tconst twoPi = Math.PI * 2;\n\t\t// check for peaks in 8 places\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\tmaxValue = Math.max(this._inverseFFT(real, imag, (i / 8) * twoPi), maxValue);\n\t\t}\n\t\treturn -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t}\n\n\t/**\n\t * The partials of the waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tif (partials.length) {\n\t\t\tthis.type = \"custom\";\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t * @example\n\t * osc.phase = 180; //flips the phase of the oscillator\n\t */\n\tget phase(): Degrees {\n\t\treturn this._phase * (180 / Math.PI);\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase * Math.PI / 180;\n\t\t// reset the type\n\t\tthis.type = this._type;\n\t}\n\n\t/**\n\t *  Dispose and disconnect.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._oscillator !== null) {\n\t\t\tthis._oscillator.dispose();\n\t\t}\n\t\tthis._wave = undefined;\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { AbstractParam } from \"../context/AbstractParam\";\nimport { dbToGain, gainToDb } from \"../type/Conversions\";\nimport \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\n\nexport interface ParamOptions extends ToneWithContextOptions {\n\tunits: UnitName;\n\tvalue?: any;\n\tparam: AudioParam;\n\tconvert: boolean;\n}\n\n/**\n * the possible automation types\n */\ntype AutomationType = \"linear\" | \"exponential\" | \"setValue\" | \"setTarget\" | \"cancel\";\n\n/**\n * The events on the automation\n */\nexport interface AutomationEvent {\n\ttype: AutomationType;\n\ttime: number;\n\tvalue: number;\n\tconstant?: number;\n}\n\n/**\n *  Param wraps the native Web Audio's AudioParam to provide\n * additional unit conversion functionality. It also\n * serves as a base-class for classes which have a single,\n * automatable parameter.\n */\nexport class Param<Type extends Unit = number>\nextends ToneWithContext<ParamOptions>\nimplements AbstractParam<Type> {\n\n\tname = \"Param\";\n\n\tstatic getDefaults(): ParamOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t} as ParamOptions);\n\t}\n\n\t/**\n\t * The input connection\n\t */\n\treadonly input: AudioParam;\n\treadonly units: UnitName;\n\tconvert: boolean;\n\toverridden: boolean = false;\n\n\t/**\n\t * The timeline which tracks all of the automations.\n\t */\n\tprotected _events: Timeline<AutomationEvent>;\n\n\t/**\n\t *  The native parameter to control\n\t */\n\tprotected _param: AudioParam;\n\n\t/**\n\t *  The default value before anything is assigned\n\t */\n\tprotected _initialValue: number;\n\n\t/**\n\t *  The minimum output value\n\t */\n\tprivate _minOutput = 1e-5;\n\n\tconstructor(param: AudioParam, units?: Unit, convert?: boolean);\n\tconstructor(options: Partial<ParamOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]));\n\n\t\tconst options = optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]);\n\n\t\tthis.assert(isDefined(options.param) && options.param instanceof AudioParam, \"param must be an AudioParam\");\n\n\t\t// initialize\n\t\tthis._param = this.input = options.param;\n\t\tthis._events = new Timeline<AutomationEvent>(1000);\n\t\tthis._initialValue = this._param.value;\n\t\tthis.units = options.units;\n\t\tthis.convert = options.convert;\n\n\t\t// if the value is defined, set it immediately\n\t\tif (isDefined(options.value)) {\n\t\t\tthis.setValueAtTime(options.value, 0);\n\t\t}\n\t}\n\n\tget value(): Type {\n\t\tconst now = this.now();\n\t\treturn this.getValueAtTime(now);\n\t}\n\tset value(value: Type) {\n\t\tthis._initialValue = this._fromType(value);\n\t\tthis.cancelScheduledValues(this.now());\n\t\tthis.setValueAtTime(value, this.now());\n\t}\n\n\tget minValue(): number {\n\t\tif (this.units === \"time\" || this.units === \"frequency\" ||\n\t\t\tthis.units === \"normalRange\" || this.units === \"positive\" ||\n\t\t\tthis.units === \"transportTime\" || this.units === \"ticks\" ||\n\t\t\tthis.units === \"bpm\" || this.units === \"hertz\" || this.units === \"samples\") {\n\t\t\treturn 0;\n\t\t} else if (this.units === \"audioRange\") {\n\t\t\treturn -1;\n\t\t} else if (this.units === \"decibels\") {\n\t\t\treturn -Infinity;\n\t\t} else {\n\t\t\treturn this._param.minValue;\n\t\t}\n\t}\n\n\tget maxValue(): number {\n\t\tif (this.units === \"normalRange\" ||\n\t\t\tthis.units === \"audioRange\") {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn this._param.maxValue;\n\t\t}\n\t}\n\n\t/**\n\t * Type guard based on the unit name\n\t */\n\tprivate _is<T>(arg: any, type: UnitName): arg is T {\n\t\treturn this.units === type;\n\t}\n\n\t/**\n\t *  Convert the given value from the type specified by Param.units\n\t *  into the destination value (such as Gain or Frequency).\n\t */\n\tprotected _fromType(val: Type): number {\n\t\tif (this.convert && !this.overridden) {\n\t\t\tif (this._is<Time>(val, \"time\")) {\n\t\t\t\treturn this.toSeconds(val);\n\t\t\t} else if (this._is<Decibels>(val, \"decibels\")) {\n\t\t\t\treturn dbToGain(val);\n\t\t\t} else if (this._is<Frequency>(val, \"frequency\")) {\n\t\t\t\treturn this.toFrequency(val);\n\t\t\t} else if (this._is<NormalRange>(val, \"normalRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, 0), 1);\n\t\t\t} else if (this._is<AudioRange>(val, \"audioRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, -1), 1);\n\t\t\t} else if (this._is<Positive>(val, \"positive\")) {\n\t\t\t\treturn Math.max(val, 0);\n\t\t\t} else if (this._is<number>(val, \"number\")) {\n\t\t\t\treturn val;\n\t\t\t} else {\n\t\t\t\treturn val as number;\n\t\t\t}\n\t\t} else {\n\t\t\treturn val as number;\n\t\t}\n\t}\n\n\t/**\n\t * Convert the parameters value into the units specified by Param.units.\n\t */\n\tprotected _toType(val: number): Type {\n\t\tif (this.convert && this.units === \"decibels\") {\n\t\t\treturn gainToDb(val) as Type;\n\t\t} else {\n\t\t\treturn val as Type;\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// ABSTRACT PARAM INTERFACE\n\t// all docs are generated from ParamInterface.ts\n\t///////////////////////////////////////////////////////////////////////////\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tconst numericValue = this._fromType(value);\n\t\tthis._events.add({\n\t\t\ttime,\n\t\t\ttype: \"setValue\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(\"setValue\", value, time);\n\t\tthis._param.setValueAtTime(numericValue, time);\n\t\treturn this;\n\t}\n\n\tgetValueAtTime(time: Time): Type {\n\t\tconst computedTime = Math.max(this.toSeconds(time), 0);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tconst before = this._events.get(computedTime);\n\t\tlet value = this._initialValue;\n\t\t// if it was set by\n\t\tif (before === null) {\n\t\t\tvalue = this._initialValue;\n\t\t} else if (before.type === \"setTarget\" && (after === null || after.type === \"setValue\")) {\n\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\tlet previousVal;\n\t\t\tif (previous === null) {\n\t\t\t\tpreviousVal = this._initialValue;\n\t\t\t} else {\n\t\t\t\tpreviousVal = previous.value;\n\t\t\t}\n\t\t\tif (isDefined(before.constant)) {\n\t\t\t\tvalue = this._exponentialApproach(before.time, previousVal, before.value, before.constant, computedTime);\n\t\t\t}\n\t\t} else if (after === null) {\n\t\t\tvalue = before.value;\n\t\t} else if (after.type === \"linear\" || after.type === \"exponential\") {\n\t\t\tlet beforeValue = before.value;\n\t\t\tif (before.type === \"setTarget\") {\n\t\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\t\tif (previous === null) {\n\t\t\t\t\tbeforeValue = this._initialValue;\n\t\t\t\t} else {\n\t\t\t\t\tbeforeValue = previous.value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (after.type === \"linear\") {\n\t\t\t\tvalue = this._linearInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t} else {\n\t\t\t\tvalue = this._exponentialInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = before.value;\n\t\t}\n\t\treturn this._toType(value);\n\t}\n\n\tsetRampPoint(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tlet currentVal = this.getValueAtTime(time);\n\t\tthis.cancelAndHoldAtTime(time);\n\t\tif (this._fromType(currentVal) === 0) {\n\t\t\tcurrentVal = this._toType(this._minOutput);\n\t\t}\n\t\tthis.setValueAtTime(currentVal, time);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: Type, endTime: Time): this {\n\t\tconst numericValue = this._fromType(value);\n\t\tendTime = this.toSeconds(endTime);\n\t\tthis._events.add({\n\t\t\ttime: endTime,\n\t\t\ttype: \"linear\",\n\t\t\tvalue : numericValue,\n\t\t});\n\t\tthis.log(\"linear\", value, endTime);\n\t\tthis._param.linearRampToValueAtTime(numericValue, endTime);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: Type, endTime: Time): this {\n\t\tlet numericValue = this._fromType(value);\n\t\tnumericValue = Math.max(this._minOutput, numericValue);\n\t\tendTime = this.toSeconds(endTime);\n\t\t// store the event\n\t\tthis._events.add({\n\t\t\ttime: endTime,\n\t\t\ttype: \"exponential\",\n\t\t\tvalue : numericValue,\n\t\t});\n\t\tthis.log(\"exponential\", value, endTime);\n\t\tthis._param.exponentialRampToValueAtTime(numericValue, endTime);\n\t\treturn this;\n\t}\n\n\texponentialRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\tlinearRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\ttargetRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialApproachValueAtTime(value, startTime, rampTime);\n\t\treturn this;\n\t}\n\n\texponentialApproachValueAtTime(value: Type, time: Time, rampTime: Time): this {\n\t\tconst timeConstant = Math.log(this.toSeconds(rampTime) + 1) / Math.log(200);\n\t\ttime = this.toSeconds(time);\n\t\treturn this.setTargetAtTime(value, time, timeConstant);\n\t}\n\n\tsetTargetAtTime(value: Type, startTime: Time, timeConstant: Positive): this {\n\t\tconst numericValue = this._fromType(value);\n\t\t// The value will never be able to approach without timeConstant > 0.\n\t\tthis.assert(timeConstant > 0, \"timeConstant must be greater than 0\");\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis._events.add({\n\t\t\tconstant: timeConstant,\n\t\t\ttime: startTime,\n\t\t\ttype: \"setTarget\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(\"setTarget\", value, startTime, timeConstant);\n\t\tthis._param.setTargetAtTime(numericValue, startTime, timeConstant);\n\t\treturn this;\n\t}\n\n\tsetValueCurveAtTime(values: Type[], startTime: Time, duration: Time, scaling: number = 1): this {\n\t\tduration = this.toSeconds(duration);\n\t\tstartTime = this.toSeconds(startTime);\n\t\tconst startingValue = this._fromType(values[0]) * scaling;\n\t\tthis.setValueAtTime(this._toType(startingValue), startTime);\n\t\tconst segTime = duration / (values.length - 1);\n\t\tfor (let i = 1; i < values.length; i++) {\n\t\t\tconst numericValue = this._fromType(values[i]) * scaling;\n\t\t\tthis.linearRampToValueAtTime(this._toType(numericValue), startTime + i * segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tcancelScheduledValues(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._events.cancel(time);\n\t\tthis._param.cancelScheduledValues(time);\n\t\tthis.log(\"cancel\", time);\n\t\treturn this;\n\t}\n\n\tcancelAndHoldAtTime(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tconst valueAtTime = this._fromType(this.getValueAtTime(time));\n\t\tthis.log(\"cancelAndHoldAtTime\", time, \"value=\" + valueAtTime);\n\n\t\t// remove the schedule events\n\t\tthis._param.cancelScheduledValues(time);\n\n\t\t// if there is an event at the given time\n\t\t// and that even is not a \"set\"\n\t\tconst before = this._events.get(time);\n\t\tconst after = this._events.getAfter(time);\n\t\tif (before && before.time === time) {\n\t\t\t// remove everything after\n\t\t\tif (after) {\n\t\t\t\tthis._events.cancel(after.time);\n\t\t\t} else {\n\t\t\t\tthis._events.cancel(time + this.sampleTime);\n\t\t\t}\n\t\t} else if (after) {\n\t\t\t// cancel the next event(s)\n\t\t\tthis._events.cancel(after.time);\n\t\t\tif (after.type === \"linear\") {\n\t\t\t\tthis.linearRampToValueAtTime(this._toType(valueAtTime), time);\n\t\t\t} else if (after.type === \"exponential\") {\n\t\t\t\tthis.exponentialRampToValueAtTime(this._toType(valueAtTime), time);\n\t\t\t}\n\t\t}\n\n\t\t// set the value at the given time\n\t\tthis._events.add({\n\t\t\ttime,\n\t\t\ttype: \"setValue\",\n\t\t\tvalue: valueAtTime,\n\t\t});\n\t\tthis._param.setValueAtTime(valueAtTime, time);\n\t\treturn this;\n\t}\n\n\trampTo(value: Type, rampTime: Time = 0.1, startTime?: Time): this {\n\t\tif (this.units === \"frequency\" || this.units === \"bpm\" || this.units === \"decibels\") {\n\t\t\tthis.exponentialRampTo(value, rampTime, startTime);\n\t\t} else {\n\t\t\tthis.linearRampTo(value, rampTime, startTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tthis._events.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tAUTOMATION CURVE CALCULATIONS\n\t// \tMIT License, copyright (c) 2014 Jordan Santell\n\t///////////////////////////////////////////////////////////////////////////\n\n\t// Calculates the the value along the curve produced by setTargetAtTime\n\tprotected _exponentialApproach(t0: number, v0: number, v1: number, timeConstant: number, t: number): number {\n\t\treturn v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t}\n\n\t// Calculates the the value along the curve produced by linearRampToValueAtTime\n\tprotected _linearInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t}\n\n\t// Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\tprotected _exponentialInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t}\n}\n","/**\n *  Tone.js\n *  @author Yotam Mann\n *  @license http://opensource.org/licenses/MIT MIT License\n *  @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\n// import { getContext } from \"./Global\";\nimport \"./type/Units\";\n\n///////////////////////////////////////////////////////////////////////////\n// \tTONE\n///////////////////////////////////////////////////////////////////////////\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseToneOptions {}\n\n/**\n *  @class  Tone is the base class of all other classes.\n *  @constructor\n */\nexport abstract class Tone {\n\n\t/**\n\t * The version number semver\n\t */\n\tstatic version: string = version;\n\n\t/**\n\t * The name of the class\n\t */\n\tprotected abstract name: string;\n\n\t/**\n\t *  disconnect and dispose.\n\t */\n\tabstract dispose(): this;\n\n\t/**\n\t * Takes a partial options an returns the completed options by filling in the defaults\n\t */\n\tstatic getDefaults(): BaseToneOptions {\n\t\treturn {};\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDEBUGGING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Set this debug flag to log all events that happen in this class.\n\t */\n\tprotected debug: boolean = false;\n\n\t/**\n\t * Prints the outputs to the console log for debugging purposes.\n\t * Prints the contents only if either the object has a property\n\t * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n\t * is set to the name of the class.\n\t * @param args\n\t *  @example\n\t * //prints all logs originating from Tone.OscillatorNode\n\t * Tone.global.TONE_DEBUG_CLASS = \"OscillatorNode\"\n\t */\n\tprotected log(...args): void {\n\t\t// if the object is either set to debug = true\n\t\t// or if there is a string on the Tone.global.with the class name\n\t\t// if (this.debug || this.toString() === global.TONE_DEBUG_CLASS) {\n\t\t// \targs.unshift(this.toString() + \":\");\n\t\t// \t// eslint-disable-next-line no-console\n\t\t// \tconsole.log(...args);\n\t\t// }\n\t}\n\n\t/**\n\t *  Assert that the statement is true, otherwise invoke the error.\n\t *  @param {Boolean} statement\n\t *  @param {String} error The message which is passed into an Error\n\t *  @private\n\t */\n\tprotected assert(statement: boolean, error: string): void {\n\t\tif (!statement) {\n\t\t\tthrow new Error(error);\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDEFAULTS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  If the `given` parameter is undefined, use the `fallback`.\n\t *  If both `given` and `fallback` are object literals, it will\n\t *  return a deep copy which includes all of the parameters from both\n\t *  objects. If a parameter is undefined in given, it will return\n\t *  the fallback property.\n\t *  <br><br>\n\t *  WARNING: if object is self referential, it will go into an an\n\t *  infinite recursive loop.\n\t *  @memberOf Tone\n\t *  @param  {*} given\n\t *  @param  {*} fallback\n\t *  @return {*}\n\t */\n\t// static defaultArg(given, fallback) {\n\t\t// if (isObject(given) && isObject(fallback)) {\n\t\t// \tconst ret = {};\n\t\t// \t// make a deep copy of the given object\n\t\t// \tfor (const givenProp in given) {\n\t\t// \t\tret[givenProp] = Tone.defaultArg(fallback[givenProp], given[givenProp]);\n\t\t// \t}\n\t\t// \tfor (const fallbackProp in fallback) {\n\t\t// \t\tret[fallbackProp] = Tone.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t\t// \t}\n\t\t// \treturn ret;\n\t\t// } else {\n\t\t// \treturn isUndef(given) ? fallback : given;\n\t\t// }\n\t// }\n\n\t// protected options(argsArray: IArguments, keys: string[]): object {\n\t// \tlet options: any = {};\n\t// \tconst args = Array.from(argsArray);\n\t// \tif (args[0] instanceof BaseAudioContext) {\n\t// \t\toptions.context = args.shift();\n\t// \t}\n\t// \tif (args.length === 1 && isObject(args[0])) {\n\t// \t\toptions = Object.assign(options, args[0]);\n\t// \t} else {\n\t// \t\tfor (let i = 0; i < keys.length; i++) {\n\t// \t\t\tif (isDefined(args[i])) {\n\t// \t\t\t\toptions[keys[i]] = args[i];\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \treturn deepMerge(this.getDefaults(), options);\n\t// }\n\n\t/**\n\t * Convert the class to a string\n\t * @example\n\t * const osc = new Oscillator()\n\t * osc.toString() // \"Oscillator\"\n\t */\n\ttoString(): string {\n\t\treturn this.name;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tSTATIC\n\t///////////////////////////////////////////////////////////////////////////\n\n\t// static get context(): import(\"./context/Context\").Context {\n\t// \treturn getContext();\n\t// }\n\n\t// static now(): Seconds {\n\t// \treturn Tone.context.now();\n\t// }\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport \"../type/Units\";\nimport { getDefaultsFromInstance, optionsFromArguments } from \"../util/Defaults\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { Context } from \"./Context\";\n\n/**\n * A unit which process audio\n */\nexport interface ToneWithContextOptions {\n\tcontext: Context;\n}\n\n/**\n * The Base class for all nodes that have an AudioContext.\n */\nexport abstract class ToneWithContext<Options extends ToneWithContextOptions> extends Tone {\n\n\t/**\n\t * The context belonging to the node.\n\t */\n\treadonly context: Context;\n\n\t/**\n\t * The default context to use if no AudioContext is passed in to the constructor\n\t */\n\treadonly defaultContext?: Context;\n\n\tconstructor(context?: Context | Partial<ToneWithContextOptions>) {\n\t\tconst options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n\t\tsuper();\n\t\tif (this.defaultContext) {\n\t\t\tthis.context = this.defaultContext;\n\t\t} else {\n\t\t\tthis.context = options.context;\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneWithContextOptions {\n\t\treturn {\n\t\t\tcontext: getContext(),\n\t\t};\n\t}\n\n\t/**\n\t * Return the current time of the Context clock plus the lookAhead.\n\t */\n\tnow(): Seconds {\n\t\treturn this.context.currentTime + this.context.lookAhead;\n\t}\n\n\t/**\n\t * Return the current time of the Context clock without any lookAhead.\n\t */\n\timmediate(): Seconds {\n\t\treturn this.context.currentTime;\n\t}\n\n\t/**\n\t * The duration in seconds of one sample.\n\t */\n\tget sampleTime(): Seconds {\n\t\treturn 1 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * The number of seconds of 1 processing block (128 samples)\n\t */\n\tget blockTime(): Seconds {\n\t\treturn 128 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * Convert the incoming time to seconds\n\t */\n\ttoSeconds(time: Time): Seconds {\n\t\treturn new TimeClass(this.context, time).toSeconds();\n\t}\n\n\t/**\n\t * Convert the input to a frequency number\n\t */\n\ttoFrequency(freq: Frequency): Hertz {\n\t\treturn new FrequencyClass(this.context, freq).toFrequency();\n\t}\n\n\t/**\n\t * Convert the input time into ticks\n\t */\n\ttoTicks(time: Time): Ticks {\n\t\treturn new TransportTimeClass(this.context, time).toTicks();\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tGET/SET\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Get the object's attributes. Given no arguments get\n\t * will return all available object properties and their corresponding\n\t * values. Pass in a single attribute to retrieve or an array\n\t * of attributes. The attribute strings can also include a \".\"\n\t * to access deeper properties.\n\t * @param params the parameters to get, otherwise will return all available.\n\t * @example\n\t * osc.get();\n\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t * @example\n\t * osc.get(\"type\");\n\t * //returns { \"type\" : \"sine\"}\n\t * @example\n\t * //use dot notation to access deep properties\n\t * synth.get([\"envelope.attack\", \"envelope.release\"]);\n\t * //returns {\"envelope\" : {\"attack\" : 0.2, \"release\" : 0.4}}\n\t */\n\tget(): Options {\n\t\tconst defaults = getDefaultsFromInstance(this) as Options;\n\t\tObject.keys(defaults).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute)) {\n\t\t\t\tconst member = this[attribute];\n\t\t\t\tif (isDefined(member) && isDefined(member.value)) {\n\t\t\t\t\tdefaults[attribute] = member.value;\n\t\t\t\t} else if (member instanceof ToneWithContext) {\n\t\t\t\t\tdefaults[attribute] = member.get();\n\t\t\t\t} else {\n\t\t\t\t\tdefaults[attribute] = member;\n\t\t\t\t}\n\t\t\t}\n\n\t\t});\n\t\treturn defaults;\n\t}\n\n\t/**\n\t * Set the parameters at once. Either pass in an\n\t * object mapping parameters to values, or to set a\n\t * single parameter, by passing in a string and value.\n\t * The last argument is an optional ramp time which\n\t * will ramp any signal values to their destination value\n\t * over the duration of the rampTime.\n\t * @param  params\n\t * @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : \"highpass\"\n\t * });\n\t */\n\tset(props: Partial<Options>): this {\n\t\tObject.keys(props).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute) && isDefined(this[attribute])) {\n\t\t\t\tif (isDefined(this[attribute].value)) {\n\t\t\t\t\tthis[attribute].value = props[attribute];\n\t\t\t\t} else if (this[attribute] instanceof ToneWithContext) {\n\t\t\t\t\tthis[attribute].set(props[attribute]);\n\t\t\t\t} else {\n\t\t\t\t\tthis[attribute] = props[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { ftom } from \"./Conversions\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\n\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * var t = Time(\"4n\");//a quarter note\n */\nexport class TimeClass<Type extends Seconds | Ticks = Seconds, Unit extends string = TimeBaseUnit>\nextends TimeBaseClass<Type, Unit> {\n\n\tname = \"Time\";\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign(super._getExpressions(), {\n\t\t\tnow: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\treturn this._now() + new (this.constructor as typeof TimeClass)(this.context, capture).valueOf() as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^\\+(.+)/,\n\t\t\t},\n\t\t\tquantize: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\tconst quantTo = new TimeClass(this.context, capture).valueOf();\n\t\t\t\t\treturn this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));\n\t\t\t\t},\n\t\t\t\tregexp: /^@(.+)/,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Quantize the time by the given subdivision. Optionally add a\n\t * percentage which will move the time value towards the ideal\n\t * quantized value by that percentage.\n\t * @param  val    The subdivision to quantize to\n\t * @param  percent  Move the time value towards the quantized value by a percentage.\n\t * @example\n\t * Time(21).quantize(2) //returns 22\n\t * Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t */\n\tquantize(subdiv: number | Subdivision | TimeObject, percent = 1): Type {\n\t\tconst subdivision = new (this.constructor as typeof TimeClass)(this.context, subdiv).valueOf();\n\t\tconst value = this.valueOf();\n\t\tconst multiple = Math.round(value / subdivision);\n\t\tconst ideal = multiple * subdivision;\n\t\tconst diff = ideal - value;\n\t\treturn value + diff * percent as Type;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\t/**\n\t *  Convert a Time to Notation. The notation values are will be the\n\t *  closest representation between 1m to 128th note.\n\t *  @return {Notation}\n\t *  @example\n\t * //if the Transport is at 120bpm:\n\t * Time(2).toNotation();//returns \"1m\"\n\t */\n\ttoNotation(): Subdivision {\n\t\tconst time = this.toSeconds();\n\t\tconst testNotations: Subdivision[] = [\"1m\"];\n\t\tfor (let power = 1; power < 9; power++) {\n\t\t\tconst subdiv = Math.pow(2, power);\n\t\t\ttestNotations.push(subdiv + \"n.\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"n\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"t\" as Subdivision);\n\t\t}\n\t\ttestNotations.push(\"0\");\n\t\t// find the closets notation representation\n\t\tlet closest = testNotations[0];\n\t\tlet closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n\t\ttestNotations.forEach(notation => {\n\t\t\tconst notationSeconds = new TimeClass(this.context, notation).toSeconds();\n\t\t\tif (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n\t\t\t\tclosest = notation;\n\t\t\t\tclosestSeconds = notationSeconds;\n\t\t\t}\n\t\t});\n\t\treturn closest;\n\t}\n\n\t/**\n\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t */\n\ttoBarsBeatsSixteenths(): BarsBeatsSixteenths {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tlet quarters = this.valueOf() / quarterTime;\n\t\tquarters = parseFloat(quarters.toFixed(4));\n\t\tconst measures = Math.floor(quarters / this._getTimeSignature());\n\t\tlet sixteenths = (quarters % 1) * 4;\n\t\tquarters = Math.floor(quarters) % this._getTimeSignature();\n\t\tconst sixteenthString = sixteenths.toString();\n\t\tif (sixteenthString.length > 3) {\n\t\t\t// the additional parseFloat removes insignificant trailing zeroes\n\t\t\tsixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n\t\t}\n\t\tconst progress = [measures, quarters, sixteenths];\n\t\treturn progress.join(\":\");\n\t}\n\n\t/**\n\t *  Return the time in ticks.\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.round(quarters * this._getPPQ());\n\t}\n\n\t/**\n\t *  Return the time in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t *  Return the value as a midi note.\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.toFrequency());\n\t}\n\n\tprotected _now(): Type {\n\t\treturn this.context.now() as Type;\n\t}\n}\n\n/**\n * Create a TimeClass from a time string or number.\n * @param value A value which reprsents time\n * @param units The value's units if they can't be inferred by the value.\n */\nexport function Time(value?: TimeValue, units?: TimeBaseUnit): TimeClass<Seconds> {\n\treturn new TimeClass(getContext(), value, units);\n}\n","export { connect, disconnect, connectSeries } from \"./context/ToneAudioNode\";\n","// import \"../type/Type\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\n\nexport type PlaybackState = \"started\" | \"stopped\" | \"paused\";\n\nexport interface StateTimelineEvent extends TimelineEvent {\n\tstate: PlaybackState;\n\tduration?: Seconds;\n\toffset?: Seconds;\n}\n\n/**\n *  A Timeline State. Provides the methods: `setStateAtTime(\"state\", time)` and `getValueAtTime(time)`\n *  @param initial The initial state of the StateTimeline.  Defaults to `undefined`\n */\nexport class StateTimeline extends Timeline<StateTimelineEvent> {\n\n\t/**\n\t *  The initial state\n\t */\n\tprivate _initial: PlaybackState;\n\n\tconstructor(initial: PlaybackState = \"stopped\") {\n\t\tsuper();\n\t\tthis._initial = initial;\n\t}\n\n\t/**\n\t *  Returns the scheduled state scheduled before or at\n\t *  the given time.\n\t *  @param  time  The time to query.\n\t *  @return  The name of the state input in setStateAtTime.\n\t */\n\tgetValueAtTime(time: Seconds): PlaybackState {\n\t\tconst event = this.get(time);\n\t\tif (event !== null) {\n\t\t\treturn event.state;\n\t\t} else {\n\t\t\treturn this._initial;\n\t\t}\n\t}\n\n\t/**\n\t *  Add a state to the timeline.\n\t *  @param  state The name of the state to set.\n\t *  @param  time  The time to query.\n\t */\n\tsetStateAtTime(state: PlaybackState, time: Seconds): this {\n\t\t// all state changes need to be >= the previous state time\n\t\t// TODO throw error if time < the previous event time\n\t\tthis.add({\n\t\t\tstate,\n\t\t\ttime,\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Return the event before the time with the given state\n\t *  @param  state The state to look for\n\t *  @param  time  When to check before\n\t *  @return  The event with the given state before the time\n\t */\n\tgetLastState(state: PlaybackState, time: number): StateTimelineEvent | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tfor (let i = index; i >= 0; i--) {\n\t\t\tconst event = this._timeline[i];\n\t\t\tif (event.state === state) {\n\t\t\t\treturn event;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Return the event after the time with the given state\n\t *  @param  state The state to look for\n\t *  @param  time  When to check from\n\t *  @return  The event with the given state after the time\n\t */\n\tgetNextState(state: PlaybackState, time: number): StateTimelineEvent | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tif (index !== -1) {\n\t\t\tfor (let i = index; i < this._timeline.length; i++) {\n\t\t\t\tconst event = this._timeline[i];\n\t\t\t\tif (event.state === state) {\n\t\t\t\t\treturn event;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n */\nexport class TransportTimeClass<Type extends Seconds | Ticks = Seconds> extends TimeClass<Type> {\n\n\tname = \"TransportTime\";\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected _now(): Type {\n\t\treturn this.context.transport.seconds as Type;\n\t}\n}\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n */\nexport function TransportTime(value?: TimeValue, units?: TimeBaseUnit): TransportTimeClass {\n\treturn new TransportTimeClass(getContext(), value, units);\n}\n","import \"./Units\";\n\n/**\n *  Equal power gain scale. Good for cross-fading.\n *  @param  percent (0-1)\n */\nexport function equalPowerScale(percent: NormalRange): number {\n\tconst piFactor = 0.5 * Math.PI;\n\treturn Math.sin(percent * piFactor);\n}\n\n/**\n *  Convert decibels into gain.\n */\nexport function dbToGain(db: Decibels): GainFactor {\n\treturn Math.pow(10, db / 20);\n}\n\n/**\n *  Convert gain to decibels.\n */\nexport function gainToDb(gain: GainFactor): Decibels {\n\treturn 20 * (Math.log(gain) / Math.LN10);\n}\n\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * tone.intervalToFrequencyRatio(0); // 1\n * tone.intervalToFrequencyRatio(12); // 2\n * tone.intervalToFrequencyRatio(-12); // 0.5\n */\nexport function intervalToFrequencyRatio(interval: Interval): number {\n\treturn Math.pow(2, (interval / 12));\n}\n\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\nlet A4: Hertz = 440;\n\nexport function getA4(): Hertz {\n\treturn A4;\n}\n\nexport function setA4(freq: Hertz): void {\n\tA4 = freq;\n}\n\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * ftom(440); // returns 69\n */\nexport function ftom(frequency: Hertz): MidiNote {\n\treturn 69 + Math.round(12 * Math.log2(frequency / A4));\n}\n\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n */\nexport function mtof(midi: MidiNote): Hertz {\n\treturn A4 * Math.pow(2, (midi - 69) / 12);\n}\n","import { Tone } from \"../Tone\";\nimport { isUndef } from \"./TypeCheck\";\n\nexport interface EmitterEventObject {\n\t[event: string]: Array<(...args: any[]) => void>;\n}\n\n/**\n * Emitter gives classes which extend it\n * the ability to listen for and emit events.\n * Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n * MIT (c) 2011 Jerome Etienne.\n */\nexport class Emitter<EventType extends string = string> extends Tone {\n\n\tname = \"Emitter\";\n\n\t/**\n\t * Private container for the events\n\t */\n\tprivate _events?: EmitterEventObject;\n\n\t/**\n\t *  Bind a callback to a specific event.\n\t *  @param  event     The name of the event to listen for.\n\t *  @param  callback  The callback to invoke when the event is emitted\n\t */\n\ton(event: EventType, callback: (...args: any[]) => void): this {\n\t\t// split the event\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (!this._events.hasOwnProperty(eventName)) {\n\t\t\t\tthis._events[eventName] = [];\n\t\t\t}\n\t\t\tthis._events[eventName].push(callback);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Bind a callback which is only invoked once\n\t *  @param  event     The name of the event to listen for.\n\t *  @param  callback  The callback to invoke when the event is emitted\n\t */\n\tonce(event: EventType, callback: (...args: any[]) => void): this {\n\t\tconst boundCallback = (...args: any[])  => {\n\t\t\t// invoke the callback\n\t\t\tcallback(...args);\n\t\t\t// remove the event\n\t\t\tthis.off(event, boundCallback);\n\t\t};\n\t\tthis.on(event, boundCallback);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove the event listener.\n\t *  @param  event     The event to stop listening to.\n\t *  @param  callback  The callback which was bound to the event with Emitter.on.\n\t *                    If no callback is given, all callbacks events are removed.\n\t */\n\toff(event: EventType, callback?: (...args: any[]) => void): this {\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tif (isUndef(callback)) {\n\t\t\t\t\tthis._events[event] = [];\n\t\t\t\t} else {\n\t\t\t\t\tconst eventList = this._events[event];\n\t\t\t\t\tfor (let i = 0; i < eventList.length; i++) {\n\t\t\t\t\t\tif (eventList[i] === callback) {\n\t\t\t\t\t\t\teventList.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Invoke all of the callbacks bound to the event\n\t *  with any arguments passed in.\n\t *  @param  event  The name of the event.\n\t *  @param args The arguments to pass to the functions listening.\n\t */\n\temit(event, ...args: any[]): this {\n\t\tif (this._events) {\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tconst eventList = this._events[event].slice(0);\n\t\t\t\tfor (let i = 0, len = eventList.length; i < len; i++) {\n\t\t\t\t\teventList[i].apply(this, args);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Add Emitter functions (on/off/emit) to the object\n\t */\n\tstatic mixin(constr: any): void {\n\t\t// instance._events = {};\n\t\t[\"on\", \"once\", \"off\", \"emit\"].forEach(name => {\n\t\t\tconst property = Object.getOwnPropertyDescriptor(Emitter.prototype, name) as PropertyDescriptor;\n\t\t\tObject.defineProperty(constr.prototype, name, property);\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tthis._events = undefined;\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator, OscillatorInterface, ToneOscillatorOptions, ToneOscillatorType } from \"./Oscillator\";\n\ntype PulseOscillatorType = \"pulse\";\n\nexport interface PulseOscillatorOptions extends ToneOscillatorOptions {\n\twidth: NormalRange;\n}\n\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * <pre>\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n *\n * </pre>\n * @param frequency The frequency of the oscillator\n * @param width The width of the pulse\n * @example\n * var pulse = new PulseOscillator(\"E5\", 0.4).toMaster().start();\n */\nexport class PulseOscillator extends Source<PulseOscillatorOptions> implements OscillatorInterface {\n\n\tname = \"PulseOscillator\";\n\n\t/**\n\t *  The width of the pulse.\n\t */\n\twidth: Signal<AudioRange> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"audioRange\",\n\t});\n\n\t/**\n\t *  gate the width amount\n\t */\n\tprivate _widthGate: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t *  the sawtooth oscillator\n\t */\n\tprivate _sawtooth: Oscillator = new Oscillator({\n\t\tcontext: this.context,\n\t\ttype : \"sawtooth\",\n\t});\n\n\t/**\n\t *  The frequency control.\n\t */\n\tfrequency: Signal<Frequency> = this._sawtooth.frequency;\n\n\t/**\n\t *  The detune in cents.\n\t */\n\tdetune: Signal<Cents> = this._sawtooth.detune;\n\n\t/**\n\t *  Threshold the signal to turn it into a square\n\t */\n\tprivate _thresh = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => val <= 0 ? -1 : 1,\n\t});\n\n\tconstructor(options?: Partial<PulseOscillatorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]));\n\t\tconst options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n\n\t\tthis.width.setValueAtTime(options.width, 0);\n\t\tthis._sawtooth.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis._sawtooth.detune.setValueAtTime(options.detune, 0);\n\t\tthis._sawtooth.phase = options.phase;\n\n\t\t// connections\n\t\tthis._sawtooth.chain(this._thresh, this.output);\n\t\tthis.width.chain(this._widthGate, this._thresh);\n\t\treadOnly(this, [\"width\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PulseOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\twidth: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.start(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.stop(time);\n\t\t// the width is still connected to the output.\n\t\t// that needs to be stopped also\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(0, time);\n\t}\n\n\t/**\n\t *  Restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._sawtooth.restart(time);\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._sawtooth.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._sawtooth.phase = phase;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pulse\".\n\t */\n\tget type(): PulseOscillatorType {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pulse\".\n\t */\n\tget baseType(): PulseOscillatorType {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t *  Clean up method.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sawtooth.dispose();\n\t\tthis.width.dispose();\n\t\tthis._widthGate.dispose();\n\t\tthis._thresh.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\n\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @param {number=} value Constant value to multiple\n * @example\n * const mult = new Multiply();\n * const sigA = new Tone.Signal(3);\n * const sigB = new Tone.Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * //output of mult is 12.\n *  @example\n * const mult = new Multiply(10);\n * const sig = new Tone.Signal(2).connect(mult);\n * //the output of mult is 20.\n */\nexport class Multiply extends Signal<number> {\n\n\tname = \"Multiply\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection\n\t */\n\treadonly override = false;\n\n\t/**\n\t * the input gain node\n\t */\n\tprivate _mult: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The multiplcant input.\n\t */\n\tinput = this._mult;\n\n\t/**\n\t * The product of the input and {@link factor}\n\t */\n\toutput = this._mult;\n\n\t/**\n\t * The multiplication factor. Can be set directly or a signal can be connected to it.\n\t */\n\tfactor: Param<number>;\n\n\tconstructor(options?: Partial<SignalOptions<number>>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(value?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis.factor = this._param = this._mult.gain as unknown as Param<number>;\n\t\tthis.factor.setValueAtTime(options.value, 0);\n\t}\n\n\tstatic getDefaults(): SignalOptions<number> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._mult.dispose();\n\t\treturn this;\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\nimport { TransportTimeClass } from \"./TransportTime\";\n\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * const t = Ticks(\"4n\"); //a quarter note as ticks\n */\nexport class TicksClass extends TransportTimeClass<Ticks> {\n\n\tname = \"Ticks\";\n\n\treadonly defaultUnits: TimeBaseUnit = \"i\";\n\n\t/**\n\t * Get the current time in the given units\n\t */\n\tprotected _now(): Ticks {\n\t\treturn this.context.transport.ticks;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Ticks {\n\t\treturn this._getPPQ() * beats;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Ticks {\n\t\treturn Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Ticks {\n\t\treturn ticks;\n\t}\n\n\t/**\n\t *  Return the time in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\treturn this.valueOf() as Ticks;\n\t}\n\n\t/**\n\t *  Return the time in seconds\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn (this.valueOf() / this._getPPQ()) * (60 / this._getBpm());\n\t}\n}\n\nexport function Ticks(value?: TimeValue, units?: TimeBaseUnit): TicksClass {\n\treturn new TicksClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck\";\n\ninterface ToneAudioBufferOptions {\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n\treverse: boolean;\n\tonload: (buffer?: ToneAudioBuffer) => void;\n\tonerror: (error: Error) => void;\n}\n\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n *\n * Aside from load callbacks from individual buffers, ToneAudioBuffer\n * provides events which keep track of the loading progress\n * of _all_ of the buffers. These are ToneAudioBuffer.on(\"load\" / \"progress\" / \"error\")\n *\n * @param url The url to load, or the audio buffer to set.\n * @param onload A callback which is invoked after the buffer is loaded.\n *                            It's recommended to use `ToneAudioBuffer.on('load', callback)` instead\n *                            since it will give you a callback when _all_ buffers are loaded.\n * @param onerror The callback to invoke if there is an error\n * @example\n * var buffer = new ToneAudioBuffer(\"path/to/sound.mp3\", function(){\n * \t//the buffer is now available.\n * \tvar buff = buffer.get();\n * });\n * @example\n * //can load provide fallback extension types if the first type is not supported.\n * var buffer = new ToneAudioBuffer(\"path/to/sound.[mp3|ogg|wav]\");\n */\nexport class ToneAudioBuffer extends Tone {\n\n\tname = \"ToneAudioBuffer\";\n\n\t/**\n\t *  stores the loaded AudioBuffer\n\t */\n\tprivate _buffer?: AudioBuffer;\n\n\t/**\n\t *  indicates if the buffer should be reversed or not\n\t */\n\tprivate _reversed!: boolean;\n\n\t/**\n\t * Callback when the buffer is loaded.\n\t */\n\tonload: (buffer: ToneAudioBuffer) => void = noOp;\n\n\tconstructor(options?: Partial<ToneAudioBufferOptions>);\n\tconstructor(\n\t\turl?: string | ToneAudioBuffer | AudioBuffer,\n\t\tonload?: (buffer: ToneAudioBuffer) => void,\n\t\tonerror?: (error: Error) => void,\n\t);\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tconst options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, [\"url\", \"onload\", \"onerror\"]);\n\n\t\tthis.reverse = options.reverse;\n\t\tthis.onload = options.onload;\n\n\t\tif (options.url && options.url instanceof AudioBuffer || options.url instanceof ToneAudioBuffer) {\n\t\t\tthis.set(options.url);\n\t\t} else if (isString(options.url)) {\n\t\t\t// initiate the download\n\t\t\tthis.load(options.url).catch(options.onerror);\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneAudioBufferOptions {\n\t\treturn {\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\treverse: false,\n\t\t};\n\t}\n\n\t/**\n\t * The sample rate of the AudioBuffer\n\t */\n\tget sampleRate(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.sampleRate;\n\t\t} else {\n\t\t\treturn getContext().sampleRate;\n\t\t}\n\t}\n\n\t/**\n\t *  Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n\t */\n\tset(buffer: AudioBuffer | ToneAudioBuffer): this {\n\t\tif (buffer instanceof ToneAudioBuffer) {\n\t\t\t// if it's loaded, set it\n\t\t\tif (buffer.loaded) {\n\t\t\t\tthis._buffer = buffer.get();\n\t\t\t} else {\n\t\t\t\t// otherwise when it's loaded, invoke it's callback\n\t\t\t\tbuffer.onload = () => {\n\t\t\t\t\tthis.set(buffer);\n\t\t\t\t\tthis.onload(this);\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tthis._buffer = buffer;\n\t\t}\n\t\t// reverse it initially\n\t\tif (this._reversed) {\n\t\t\tthis._reverse();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The audio buffer stored in the object.\n\t */\n\tget(): AudioBuffer | undefined {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t *  Makes an fetch request for the selected url then decodes the file as an audio buffer.\n\t * \tInvokes the callback once the audio buffer loads.\n\t *  @param url The url of the buffer to load. filetype support depends on the browser.\n\t *  @returns A Promise which resolves with this ToneAudioBuffer\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tconst promise = ToneAudioBuffer.load(url);\n\t\tToneAudioBuffer.downloads.push(promise);\n\t\ttry {\n\t\t\tconst audioBuffer = await promise;\n\t\t\tthis.set(audioBuffer);\n\t\t\t// invoke the onload method\n\t\t\tthis.onload(this);\n\t\t} catch (e) {\n\t\t\t// remove the failed file before throwing error\n\t\t\tconst index = ToneAudioBuffer.downloads.indexOf(promise);\n\t\t\tToneAudioBuffer.downloads.splice(index, 1);\n\t\t\tthrow e;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tthis._buffer = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the audio buffer from the array.\n\t * To create a multichannel AudioBuffer, pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t */\n\tfromArray(array: Float32Array | Float32Array[]): this {\n\t\tconst isMultidimensional = isArray(array) && array[0].length > 0;\n\t\tconst channels = isMultidimensional ? array.length : 1;\n\t\tconst len = isMultidimensional ? (array[0] as Float32Array).length : array.length;\n\t\tconst context = getContext();\n\t\tconst buffer = context.createBuffer(channels, len, context.sampleRate);\n\t\tconst multiChannelArray: Float32Array[] = !isMultidimensional && channels === 1 ?\n\t\t\t[array as Float32Array] : array as Float32Array[];\n\n\t\tfor (let c = 0; c < channels; c++) {\n\t\t\tbuffer.copyToChannel(multiChannelArray[c], c);\n\t\t}\n\t\tthis._buffer = buffer;\n\t\treturn this;\n\t}\n\n\t/**\n\t * \tSums multiple channels into 1 channel\n\t *  @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoMono(chanNum?: number): this {\n\t\tif (isNumber(chanNum)) {\n\t\t\tthis.fromArray(this.toArray(chanNum));\n\t\t} else {\n\t\t\tlet outputArray = new Float32Array(this.length as number);\n\t\t\tconst numChannels = this.numberOfChannels;\n\t\t\tfor (let channel = 0; channel < numChannels; channel++) {\n\t\t\t\tconst channelArray = this.toArray(channel) as Float32Array;\n\t\t\t\tfor (let i = 0; i < channelArray.length; i++) {\n\t\t\t\t\toutputArray[i] += channelArray[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// divide by the number of channels\n\t\t\toutputArray = outputArray.map(sample => sample / numChannels);\n\t\t\tthis.fromArray(outputArray);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * \tGet the buffer as an array. Single channel buffers will return a 1-dimensional\n\t * \tFloat32Array, and multichannel buffers will return multidimensional arrays.\n\t *  @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoArray(channel?: number): Float32Array | Float32Array[] {\n\t\tif (isNumber(channel)) {\n\t\t\treturn this.getChannelData(channel);\n\t\t} else if (this.numberOfChannels === 1) {\n\t\t\treturn this.toArray(0);\n\t\t} else {\n\t\t\tconst ret: Float32Array[] = [];\n\t\t\tfor (let c = 0; c < this.numberOfChannels; c++) {\n\t\t\t\tret[c] = this.getChannelData(c);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t/**\n\t *  Returns the Float32Array representing the PCM audio data for the specific channel.\n\t *  @param  channel  The channel number to return\n\t *  @return The audio as a TypedArray\n\t */\n\tgetChannelData(channel: number): Float32Array {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.getChannelData(channel);\n\t\t} else {\n\t\t\treturn new Float32Array(0);\n\t\t}\n\t}\n\n\t/**\n\t *  Cut a subsection of the array and return a buffer of the\n\t *  subsection. Does not modify the original buffer\n\t *  @param start The time to start the slice\n\t *  @param end The end time to slice. If none is given will default to the end of the buffer\n\t */\n\tslice(start: Seconds, end: Seconds = this.duration): ToneAudioBuffer {\n\t\tconst startSamples = Math.floor(start * this.sampleRate);\n\t\tconst endSamples = Math.floor(end * this.sampleRate);\n\t\tconst replacementArray: Float32Array[] = [];\n\t\tfor (let i = 0; i < this.numberOfChannels; i++) {\n\t\t\treplacementArray[i] = this.toArray(i).slice(startSamples, endSamples) as Float32Array;\n\t\t}\n\t\tconst retBuffer = new ToneAudioBuffer().fromArray(replacementArray);\n\t\treturn retBuffer;\n\t}\n\n\t/**\n\t *  Reverse the buffer.\n\t */\n\tprivate _reverse(): this {\n\t\tif (this.loaded) {\n\t\t\tfor (let i = 0; i < this.numberOfChannels; i++) {\n\t\t\t\tArray.prototype.reverse.call(this.getChannelData(i));\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffer is loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this.length > 0;\n\t}\n\n\t/**\n\t * The duration of the buffer in seconds.\n\t */\n\tget duration(): Seconds {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.duration;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The length of the buffer in samples\n\t */\n\tget length(): Samples {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n\t */\n\tget numberOfChannels(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.numberOfChannels;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tget reverse(): boolean {\n\t\treturn this._reversed;\n\t}\n\tset reverse(rev: boolean) {\n\t\tif (this._reversed !== rev) {\n\t\t\tthis._reversed = rev;\n\t\t\tthis._reverse();\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// STATIC METHODS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  A path which is prefixed before every url.\n\t */\n\tstatic baseUrl = \"\";\n\n\t/**\n\t *  Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n\t *  pass in a multidimensional array.\n\t *  @param array The array to fill the audio buffer\n\t *  @return A ToneAudioBuffer created from the array\n\t */\n\tstatic fromArray(array: Float32Array | Float32Array[]): ToneAudioBuffer {\n\t\treturn (new ToneAudioBuffer()).fromArray(array);\n\t}\n\n\t/**\n\t * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n\t * @param  url The url to load.\n\t * @return A promise which resolves to a ToneAudioBuffer\n\t */\n\tstatic async fromUrl(url: string): Promise<ToneAudioBuffer> {\n\t\tconst buffer = new ToneAudioBuffer();\n\t\treturn await buffer.load(url);\n\t}\n\n\t/**\n\t * All of the downloads\n\t */\n\tstatic downloads: Array<Promise<AudioBuffer>> = [];\n\n\t/**\n\t *  Loads a url using fetch and returns the AudioBuffer.\n\t */\n\tstatic async load(url: string): Promise<AudioBuffer> {\n\n\t\t// test if the url contains multiple extensions\n\t\tconst matches = url.match(/\\[(.+\\|?)+\\]$/);\n\t\tif (matches) {\n\t\t\tconst extensions = matches[1].split(\"|\");\n\t\t\tlet extension = extensions[0];\n\t\t\tfor (const ext of extensions) {\n\t\t\t\tif (ToneAudioBuffer.supportsType(ext)) {\n\t\t\t\t\textension = ext;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\turl = url.replace(matches[0], extension);\n\t\t}\n\n\t\tconst response = await fetch(ToneAudioBuffer.baseUrl + url);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`could not load url: ${url}`);\n\t\t}\n\t\tconst arrayBuffer = await response.arrayBuffer();\n\n\t\tconst audioBuffer = await getContext().decodeAudioData(arrayBuffer);\n\n\t\treturn audioBuffer;\n\t}\n\n\t/**\n\t *  Checks a url's extension to see if the current browser can play that file type.\n\t *  @param url The url/extension to test\n\t *  @return If the file extension can be played\n\t *  @static\n\t *  @example\n\t * ToneAudioBuffer.supportsType(\"wav\"); //returns true\n\t * ToneAudioBuffer.supportsType(\"path/to/file.wav\"); //returns true\n\t */\n\tstatic supportsType(url: string): boolean {\n\t\tconst extensions = url.split(\".\");\n\t\tconst extension = extensions[extensions.length - 1];\n\t\tconst response = document.createElement(\"audio\").canPlayType(\"audio/\" + extension);\n\t\treturn response !== \"\";\n\t}\n\n\t/**\n\t *  Returns a Promise which resolves when all of the buffers have loaded\n\t */\n\tstatic async loaded(): Promise<void> {\n\t\tfor (const promise of ToneAudioBuffer.downloads) {\n\t\t\tawait promise;\n\t\t}\n\t}\n}\n","///////////////////////////////////////////////////////////////////////////\n// INITIALIZING NEW CONTEXT\n///////////////////////////////////////////////////////////////////////////\n\ntype Context = import(\"./Context\").Context;\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to setup a new Context\n */\nexport function onContextInit(cb: (ctx: Context) => void): void {\n\tnotifyNewContext.push(cb);\n}\n\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\nexport function initializeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyNewContext.forEach(cb => cb(ctx));\n}\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyCloseContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to tear down a Context\n */\nexport function onContextClose(cb: (ctx: Context) => void): void {\n\tnotifyCloseContext.push(cb);\n}\n\nexport function closeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyCloseContext.forEach(cb => cb(ctx));\n}\n","import { Ticker, TickerClockSource } from \"../clock/Ticker\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { Omit } from \"../util/Interface\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isString } from \"../util/TypeCheck\";\nimport { getAudioContext } from \"./AudioContext\";\nimport { closeContext, initializeContext } from \"./ContextInitialization\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Destination = import(\"./Destination\").Destination;\n\nexport type ContextLatencyHint = AudioContextLatencyCategory | \"fastest\";\n\n// these are either not used in Tone.js or deprecated and not implemented.\nexport type ExcludedFromBaseAudioContext = \"createScriptProcessor\" | \"onstatechange\" | \"addEventListener\"\n\t| \"removeEventListener\" | \"listener\" | \"dispatchEvent\" | \"audioWorklet\" | \"destination\";\n\n// the subset of the BaseAudioContext which Tone.Context implements.\nexport type BaseAudioContextSubset = Omit<BaseAudioContext, ExcludedFromBaseAudioContext>;\n\nexport interface ContextOptions {\n\tclockSource: TickerClockSource;\n\tlatencyHint: ContextLatencyHint;\n\tlookAhead: Seconds;\n\tupdateInterval: Seconds;\n\tcontext: BaseAudioContext;\n}\n\nexport interface ContextTimeoutEvent {\n\tcallback: (...args: any[]) => void;\n\tid: number;\n\ttime: Seconds;\n}\n\n/**\n * Wrapper around the native AudioContext.\n */\nexport class Context extends Emitter<\"statechange\" | \"tick\"> implements BaseAudioContextSubset {\n\n\tname = \"Context\";\n\n\t/**\n\t * The amount of time into the future events are scheduled. Giving Web Audio\n\t * a short amount of time into the future to schedule events can reduce clicks and\n\t * improve performance. This value can be set to 0 to get the lowest latency.\n\t */\n\tlookAhead: Seconds;\n\n\t/**\n\t * private reference to the BaseAudioContext\n\t */\n\tprotected readonly _context: BaseAudioContext;\n\n\t/**\n\t * A reliable callback method\n\t */\n\tprivate readonly _ticker: Ticker;\n\n\t/**\n\t *  The default latency hint\n\t */\n\tprivate _latencyHint: ContextLatencyHint | Seconds;\n\n\t/**\n\t *  An object containing all of the constants AudioBufferSourceNodes\n\t */\n\tprivate _constants = new Map<number, AudioBufferSourceNode>();\n\n\t/**\n\t *  All of the setTimeout events.\n\t */\n\tprivate _timeouts: Timeline<ContextTimeoutEvent> = new Timeline();\n\n\t/**\n\t *  The timeout id counter\n\t */\n\tprivate _timeoutIds = 0;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _transport!: Transport;\n\n\t/**\n\t * A reference the Destination singleton belonging to this context\n\t */\n\tprivate _destination!: Destination;\n\n\t/**\n\t * Private indicator if the context has been initialized\n\t */\n\tprivate _initialized: boolean = false;\n\n\tconstructor(context?: BaseAudioContext);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<ContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Context.getDefaults(), arguments, [\"context\"]);\n\n\t\tthis._context = options.context;\n\n\t\tthis._latencyHint = options.latencyHint;\n\t\tthis.lookAhead = options.lookAhead;\n\n\t\tthis._ticker = new Ticker(this.emit.bind(this, \"tick\"), options.clockSource, options.updateInterval);\n\t\tthis.on(\"tick\", this._timeoutLoop.bind(this));\n\n\t\t// fwd events from the context\n\t\tthis._context.addEventListener(\"statechange\", () => {\n\t\t\tthis.emit(\"statechange\", this.state);\n\t\t});\n\t}\n\n\tstatic getDefaults(): ContextOptions {\n\t\treturn {\n\t\t\tclockSource: \"worker\",\n\t\t\tcontext: getAudioContext(),\n\t\t\tlatencyHint: \"interactive\",\n\t\t\tlookAhead: 0.1,\n\t\t\tupdateInterval: 0.03,\n\t\t};\n\t}\n\n\t/**\n\t * Finish setting up the context. **You usually do not need to do this manually.**\n\t */\n\tinitialize(): this {\n\t\tif (!this._initialized) {\n\t\t\t// add any additional modules\n\t\t\tinitializeContext(this);\n\t\t\tthis._initialized = true;\n\t\t}\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// BASE AUDIO CONTEXT METHODS\n\t///////////////////////////////////////////////////////////////////////\n\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn this._context.createAnalyser();\n\t}\n\tcreateOscillator(): OscillatorNode {\n\t\treturn this._context.createOscillator();\n\t}\n\tcreateBufferSource(): AudioBufferSourceNode {\n\t\treturn this._context.createBufferSource();\n\t}\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn this._context.createBiquadFilter();\n\t}\n\tcreateBuffer(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer {\n\t\treturn this._context.createBuffer(numberOfChannels, length, sampleRate);\n\t}\n\tcreateChannelMerger(numberOfInputs?: number | undefined): ChannelMergerNode {\n\t\treturn this._context.createChannelMerger(numberOfInputs);\n\t}\n\tcreateChannelSplitter(numberOfOutputs?: number | undefined): ChannelSplitterNode {\n\t\treturn this._context.createChannelSplitter(numberOfOutputs);\n\t}\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn this._context.createConstantSource();\n\t}\n\tcreateConvolver(): ConvolverNode {\n\t\treturn this._context.createConvolver();\n\t}\n\tcreateDelay(maxDelayTime?: number | undefined): DelayNode {\n\t\treturn this._context.createDelay(maxDelayTime);\n\t}\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn this._context.createDynamicsCompressor();\n\t}\n\tcreateGain(): GainNode {\n\t\treturn this._context.createGain();\n\t}\n\tcreateIIRFilter(feedforward: number[], feedback: number[]): IIRFilterNode {\n\t\treturn this._context.createIIRFilter(feedforward, feedback);\n\t}\n\tcreatePanner(): PannerNode {\n\t\treturn this._context.createPanner();\n\t}\n\tcreatePeriodicWave(\n\t\treal: number[] | Float32Array,\n\t\timag: number[] | Float32Array,\n\t\tconstraints?: PeriodicWaveConstraints | undefined,\n\t): PeriodicWave {\n\t\treturn this._context.createPeriodicWave(real, imag, constraints);\n\t}\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn this._context.createStereoPanner();\n\t}\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn this._context.createWaveShaper();\n\t}\n\tdecodeAudioData(audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn this._context.decodeAudioData(audioData);\n\t}\n\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget state(): AudioContextState {\n\t\treturn this._context.state;\n\t}\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget sampleRate(): number {\n\t\treturn this._context.sampleRate;\n\t}\n\t/**\n\t *  The listener\n\t */\n\tget listener(): AudioListener {\n\t\treturn this._context.listener;\n\t}\n\n\t/**\n\t *  There is only one Transport per Context. It is created on initialization.\n\t */\n\tget transport(): Transport {\n\t\tthis.assert(this._initialized, \"The context must be initialized before being used by invoking context.initialize()\");\n\t\treturn this._transport;\n\t}\n\tset transport(t: Transport) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._transport = t;\n\t}\n\n\t/**\n\t *  A reference to the Context's destination node.\n\t */\n\tget destination(): Destination {\n\t\tthis.assert(this._initialized, \"The context must be initialized before being used by invoking context.initialize()\");\n\t\treturn this._destination;\n\t}\n\tset destination(d: Destination) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._destination = d;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// TICKER\n\t///////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  How often the interval callback is invoked.\n\t *  This number corresponds to how responsive the scheduling\n\t *  can be. context.updateInterval + context.lookAhead gives you the\n\t *  total latency between scheduling an event and hearing it.\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._ticker.updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._ticker.updateInterval = interval;\n\t}\n\n\t/**\n\t *  What the source of the clock is, either \"worker\" (default),\n\t *  \"timeout\", or \"offline\" (none).\n\t */\n\tget clockSource(): TickerClockSource {\n\t\treturn this._ticker.type;\n\t}\n\tset clockSource(type: TickerClockSource) {\n\t\tthis._ticker.type = type;\n\t}\n\n\t/**\n\t * The type of playback, which affects tradeoffs between audio\n\t * output latency and responsiveness.\n\t * In addition to setting the value in seconds, the latencyHint also\n\t * accepts the strings \"interactive\" (prioritizes low latency),\n\t * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t * latency and performance), and \"fastest\" (lowest latency, might glitch more often).\n\t * @example\n\t * //set the lookAhead to 0.3 seconds\n\t * Tone.context.latencyHint = 0.3;\n\t */\n\tget latencyHint(): ContextLatencyHint | Seconds {\n\t\treturn this._latencyHint;\n\t}\n\tset latencyHint(hint: ContextLatencyHint | Seconds) {\n\t\tlet lookAheadValue = 0;\n\t\tthis._latencyHint = hint;\n\t\tif (isString(hint)) {\n\t\t\tswitch (hint) {\n\t\t\t\tcase \"interactive\":\n\t\t\t\t\tlookAheadValue = 0.1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"playback\":\n\t\t\t\t\tlookAheadValue = 0.8;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"balanced\":\n\t\t\t\t\tlookAheadValue = 0.25;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"fastest\":\n\t\t\t\t\tlookAheadValue = 0.01;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.lookAhead = lookAheadValue;\n\t\tthis.updateInterval = lookAheadValue / 3;\n\t}\n\n\t/**\n\t *  The unwrapped AudioContext.\n\t */\n\tget rawContext(): BaseAudioContext {\n\t\treturn this._context;\n\t}\n\n\t/**\n\t * The current audio context time plus a short {@link lookAhead}.\n\t */\n\tnow(): Seconds {\n\t\treturn this._context.currentTime + this.lookAhead;\n\t}\n\n\t/**\n\t *  Starts the audio context from a suspended state. This is required\n\t *  to initially start the AudioContext.\n\t */\n\tresume(): Promise<void> {\n\t\tif (this._context.state === \"suspended\" && this._context instanceof AudioContext) {\n\t\t\treturn this._context.resume();\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t *  Promise which is invoked when the context is running.\n\t *  Tries to resume the context if it's not started.\n\t */\n\tasync close(): Promise<Context> {\n\t\tif (this._context instanceof AudioContext) {\n\t\t\tawait this._context.close();\n\t\t}\n\t\tif (this._initialized) {\n\t\t\tcloseContext(this);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Generate a looped buffer at some constant value.\n\t */\n\tgetConstant(val: number): AudioBufferSourceNode {\n\t\tif (this._constants.has(val)) {\n\t\t\treturn this._constants.get(val) as AudioBufferSourceNode;\n\t\t} else {\n\t\t\tconst buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t\t\tconst arr = buffer.getChannelData(0);\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = val;\n\t\t\t}\n\t\t\tconst constant = this._context.createBufferSource();\n\t\t\tconstant.channelCount = 1;\n\t\t\tconstant.channelCountMode = \"explicit\";\n\t\t\tconstant.buffer = buffer;\n\t\t\tconstant.loop = true;\n\t\t\tconstant.start(0);\n\t\t\tthis._constants.set(val, constant);\n\t\t\treturn constant;\n\t\t}\n\t}\n\n\t/**\n\t *  Clean up. Also closes the audio context.\n\t */\n\tdispose(): this {\n\t\tthis._ticker.dispose();\n\t\tthis._timeouts.dispose();\n\t\tObject.keys(this._constants).map(val => this._constants[val].disconnect());\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// TIMEOUTS\n\t///////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The private loop which keeps track of the context scheduled timeouts\n\t *  Is invoked from the clock source\n\t */\n\tprivate _timeoutLoop(): void  {\n\t\tconst now = this.now();\n\t\tlet firstEvent = this._timeouts.peek();\n\t\twhile (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n\t\t\t// invoke the callback\n\t\t\tfirstEvent.callback();\n\t\t\t// shift the first event off\n\t\t\tthis._timeouts.shift();\n\t\t\t// get the next one\n\t\t\tfirstEvent = this._timeouts.peek();\n\t\t}\n\t}\n\n\t/**\n\t *  A setTimeout which is guarented by the clock source.\n\t *  Also runs in the offline context.\n\t *  @param  fn       The callback to invoke\n\t *  @param  timeout  The timeout in seconds\n\t *  @returns ID to use when invoking Context.clearTimeout\n\t */\n\tsetTimeout(fn: (...args: any[]) => void, timeout: Seconds): number {\n\t\tthis._timeoutIds++;\n\t\tconst now = this.now();\n\t\tthis._timeouts.add({\n\t\t\tcallback : fn,\n\t\t\tid : this._timeoutIds,\n\t\t\ttime : now + timeout,\n\t\t});\n\t\treturn this._timeoutIds;\n\t}\n\n\t/**\n\t *  Clears a previously scheduled timeout with Tone.context.setTimeout\n\t *  @param  id  The ID returned from setTimeout\n\t */\n\tclearTimeout(id: number): Context {\n\t\tthis._timeouts.forEach(event => {\n\t\t\tif (event.id === id) {\n\t\t\t\tthis._timeouts.remove(event);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator, OscillatorInterface, ToneOscillatorOptions, ToneOscillatorType } from \"./Oscillator\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n\nexport interface PWMOscillatorOptions extends ToneOscillatorOptions {\n\tmodulationFrequency: Frequency;\n}\n\ntype PWMOscillatorType = \"pwm\";\n\n/**\n *  @class PWMOscillator modulates the width of a Tone.PulseOscillator\n *         at the modulationFrequency. This has the effect of continuously\n *         changing the timbre of the oscillator by altering the harmonics\n *         generated.\n *\n *  @extends {Tone.Source}\n *  @constructor\n *  @param {Frequency} frequency The starting frequency of the oscillator.\n *  @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse.\n *  @example\n *  var pwm = new PWMOscillator(\"Ab3\", 0.3).toMaster().start();\n */\nexport class PWMOscillator extends Source<PWMOscillatorOptions> implements OscillatorInterface {\n\n\tname = \"PWMOscillator\";\n\n\treadonly sourceType = \"pwm\";\n\n\t/**\n\t *  the pulse oscillator\n\t */\n\tprivate _pulse: PulseOscillator = new PulseOscillator({ context: this.context });\n\t/**\n\t *  the modulator\n\t *  @type {Tone.Oscillator}\n\t *  @private\n\t */\n\tprivate _modulator: Oscillator = new Oscillator({ context: this.context });\n\n\t/**\n\t *  Scale the oscillator so it doesn't go silent\n\t *  at the extreme values.\n\t */\n\tprivate _scale: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: 2,\n\t});\n\n\t/**\n\t *  The frequency control.\n\t */\n\treadonly frequency: Signal<Frequency> = this._modulator.frequency;\n\n\t/**\n\t *  The detune of the oscillator.\n\t */\n\treadonly detune: Signal<Cents> = this._modulator.detune;\n\n\t/**\n\t *  The modulation rate of the oscillator.\n\t */\n\treadonly modulationFrequency: Signal<Frequency> = this._pulse.frequency;\n\n\tconstructor(options?: Partial<PWMOscillatorOptions>);\n\tconstructor(frequency?: Frequency, modulationFrequency?: Frequency);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n\t\tconst options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n\n\t\t// change the pulse oscillator type\n\t\t// @ts-ignore\n\t\tthis._pulse._sawtooth.type = \"sine\";\n\n\t\tthis._pulse.frequency.setValueAtTime(options.modulationFrequency, 0);\n\t\tthis._modulator.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis._modulator.detune.setValueAtTime(options.detune, 0);\n\t\tthis._modulator.phase = options.phase;\n\n\t\t// connections\n\t\tthis._modulator.chain(this._scale, this._pulse.width);\n\t\tthis._pulse.connect(this.output);\n\t\treadOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PWMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tmodulationFrequency: 0.4,\n\t\t});\n\t}\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.start(time);\n\t\tthis._pulse.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.stop(time);\n\t\tthis._pulse.stop(time);\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._pulse.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pwm\".\n\t */\n\tget type(): PWMOscillatorType {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pwm\".\n\t */\n\tget baseType(): PWMOscillatorType {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._modulator.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._pulse.dispose();\n\t\tthis._scale.dispose();\n\t\tthis._modulator.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator, OscillatorInterface, ToneOscillatorOptions, ToneOscillatorType } from \"./Oscillator\";\n\nexport interface FatOscillatorOptions extends ToneOscillatorOptions {\n\tspread: Cents;\n\tcount: Positive;\n\ttype: ToneOscillatorType;\n}\n\n/**\n *  FatOscillator is an array of oscillators with detune spread between the oscillators\n *  @param frequency The oscillator's frequency.\n *  @param type The type of the oscillator.\n *  @param spread The detune spread between the oscillators.\n *  @example\n * var fatOsc = new FatOscillator(\"Ab3\", \"sine\", 40).toMaster().start();\n */\nexport class FatOscillator extends Source<FatOscillatorOptions> implements OscillatorInterface {\n\n\tname = \"FatOscillator\";\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"frequency\",\n\t});\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"cents\",\n\t});\n\n\t/**\n\t *  The array of oscillators\n\t */\n\tprivate _oscillators: Oscillator[] = [];\n\n\t/**\n\t *  The total spread of the oscillators\n\t */\n\tprivate _spread: Cents;\n\n\t/**\n\t *  The type of the oscillator\n\t */\n\tprivate _type: ToneOscillatorType;\n\n\t/**\n\t *  The phase of the oscillators\n\t */\n\tprivate _phase: Degrees;\n\n\t/**\n\t *  The partials array\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t *  The number of partials to use\n\t */\n\tprivate _partialCount: number;\n\n\tconstructor(options?: Partial<FatOscillatorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]));\n\t\tconst options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\n\t\tthis._spread = options.spread;\n\t\tthis._type = options.type;\n\t\tthis._phase = options.phase;\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\n\t\t// set the count initially\n\t\tthis.count = options.count;\n\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): FatOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tcount : 3,\n\t\t\tspread : 20,\n\t\t\ttype : \"sawtooth\",\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.start(time));\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.stop(time));\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.restart(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over all of the oscillators\n\t */\n\tprivate _forEach(iterator: (osc: Oscillator, index: number) => void): void {\n\t\tfor (let i = 0; i < this._oscillators.length; i++) {\n\t\t\titerator(this._oscillators[i], i);\n\t\t}\n\t}\n\n\t/**\n\t * The type of the oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\n\tset type(type: ToneOscillatorType) {\n\t\tthis._type = type;\n\t\tthis._forEach(osc => osc.type = type);\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents.\n\t */\n\tget spread(): Cents {\n\t\treturn this._spread;\n\t}\n\n\tset spread(spread: Cents) {\n\t\tthis._spread = spread;\n\t\tif (this._oscillators.length > 1) {\n\t\t\tconst start = -spread / 2;\n\t\t\tconst step = spread / (this._oscillators.length - 1);\n\t\t\tthis._forEach((osc, i) => osc.detune.value = start + step * i);\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators. Should be an integer greater than 1.\n\t */\n\tget count(): number {\n\t\treturn this._oscillators.length;\n\t}\n\n\tset count(count: number) {\n\t\tcount = Math.max(count, 1);\n\t\tif (this._oscillators.length !== count) {\n\t\t\t// dispose the previous oscillators\n\t\t\tthis._forEach(osc => osc.dispose());\n\t\t\tthis._oscillators = [];\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tconst osc = new Oscillator({\n\t\t\t\t\tcontext : this.context,\n\t\t\t\t});\n\t\t\t\tif (this.type === \"custom\") {\n\t\t\t\t\tosc.partials = this._partials;\n\t\t\t\t} else {\n\t\t\t\t\tosc.type = this._type;\n\t\t\t\t}\n\t\t\t\tosc.partialCount = this._partialCount;\n\t\t\t\tosc.phase = this._phase + (i / count) * 360;\n\t\t\t\tosc.volume.value = -6 - count * 1.1;\n\t\t\t\tthis.frequency.connect(osc.frequency);\n\t\t\t\tthis.detune.connect(osc.detune);\n\t\t\t\tosc.connect(this.output);\n\t\t\t\tthis._oscillators[i] = osc;\n\t\t\t}\n\t\t\t// set the spread\n\t\t\tthis.spread = this._spread;\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._forEach(osc => osc.start());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase;\n\t\tthis._forEach(osc => osc.phase = phase);\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._oscillators[0].baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._forEach(osc => osc.baseType = baseType);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @memberOf FatOscillator#\n\t * @type {Array}\n\t * @name partials\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillators[0].partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tif (partials.length) {\n\t\t\tthis._type = \"custom\";\n\t\t\tthis._forEach(osc => osc.partials = partials);\n\t\t}\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t * @memberOf FatOscillator#\n\t * @type {Number}\n\t * @name partialCount\n\t */\n\tget partialCount(): number {\n\t\treturn this._oscillators[0].partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._partialCount = partialCount;\n\t\tthis._forEach(osc => osc.partialCount = partialCount);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._forEach(osc => osc.dispose());\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator, OscillatorInterface, ToneOscillatorOptions, ToneOscillatorType } from \"./Oscillator\";\n\nexport interface FMOscillatorOptions extends ToneOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationIndex: Positive;\n\tmodulationType: ToneOscillatorType;\n}\n\n/**\n * FMOscillator implements a frequency modulation synthesis\n * <pre>\n *                                              +-------------+\n * +---------------+        +-------------+     | Carrier Osc |\n * | Modulator Osc +>-------> GainNode    |     |             +--->Output\n * +---------------+        |             +>----> frequency   |\n *                       +--> gain        |     +-------------+\n *                       |  +-------------+\n * +-----------------+   |\n * | modulationIndex +>--+\n * +-----------------+\n * </pre>\n * @param frequency The starting frequency of the oscillator.\n * @param type The type of the carrier oscillator.\n * @param modulationType The type of the modulator oscillator.\n * @example\n * //a sine oscillator frequency-modulated by a square wave\n * var fmOsc = new FMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n */\nexport class FMOscillator extends Source<FMOscillatorOptions> implements OscillatorInterface {\n\n\tname = \"FMOscillator\";\n\n\t/**\n\t *  The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator = new Oscillator({\n\t\tcontext : this.context,\n\t\tfrequency: 0,\n\t});\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"frequency\",\n\t});\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents> = this._carrier.detune;\n\n\t/**\n\t *  The modulating oscillator\n\t */\n\tprivate _modulator = new Oscillator({ context : this.context });\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave.\n\t *  @example\n\t * //pitch the modulator an octave below carrier\n\t * synth.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<Positive> = new Multiply({\n\t\tcontext: this.context,\n\t\tunits: \"positive\",\n\t});\n\n\t/**\n\t *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t *  modulating signal (ma) -- as in ma/mf.\n\t */\n\treadonly modulationIndex: Signal<Positive> = new Multiply({\n\t\tcontext: this.context,\n\t\tunits: \"positive\",\n\t});\n\n\t/**\n\t *  the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\tconstructor(options?: Partial<FMOscillatorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier.type = options.type;\n\t\tthis._modulator.type = options.modulationType;\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\t\tthis.harmonicity.setValueAtTime(options.harmonicity, 0);\n\t\tthis.modulationIndex.setValueAtTime(options.modulationIndex, 0);\n\n\t\t// connections\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t\tthis.detune.connect(this._modulator.detune);\n\n\t\tthis.phase = options.phase;\n\n\t\treadOnly(this, [\"modulationIndex\", \"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): FMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationIndex: 2,\n\t\t\tmodulationType: \"square\",\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t *  stop and restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t */\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis.modulationIndex.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isFunction, isUndef } from \"../core/util/TypeCheck\";\nimport { Signal, SignalOptions } from \"./Signal\";\nimport { SignalOperator } from \"./SignalOperator\";\n\ntype WaveShaperMappingFn = (value: number, index?: number) => number;\n\ntype WaveShaperMapping =  WaveShaperMappingFn | number[] | Float32Array;\n\ninterface WaveShaperOptions extends ToneAudioNodeOptions {\n\tmapping?: WaveShaperMapping;\n\tlength: number;\n\tcurve?: number[] | Float32Array;\n}\n\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n *  @param mapping The function used to define the values.\n *                 The mapping function should take two arguments:\n *                 the first is the value at the current position\n *                 and the second is the array position.\n *                 If the argument is an array, that array will be\n *                 set as the wave shaping function. The input\n *                 signal is an AudioRange [-1, 1] value and the output\n *                 signal can take on any numerical values.\n *\n *  @param bufferLen The length of the WaveShaperNode buffer.\n *  @example\n * var timesTwo = new WaveShaper(function(val){\n * \treturn val * 2;\n * }, 2048);\n *  @example\n * //a waveshaper can also be constructed with an array of values\n * var invert = new WaveShaper([1, -1]);\n */\nexport class WaveShaper extends SignalOperator<WaveShaperOptions> {\n\n\tname = \"WaveShaper\";\n\n\t/**\n\t *  the waveshaper node\n\t */\n\tprivate _shaper: WaveShaperNode = this.context.createWaveShaper();\n\n\t/**\n\t * The input to the waveshaper node.\n\t */\n\tinput = this._shaper;\n\n\t/**\n\t * The output from the waveshaper node\n\t */\n\toutput = this._shaper;\n\n\tprotected _internalChannels = [this._shaper];\n\n\tconstructor(options?: Partial<WaveShaperOptions>);\n\tconstructor(mapping?: WaveShaperMapping , length?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"])));\n\t\tconst options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n\n\t\tif (isArray(options.mapping) || options.mapping instanceof Float32Array) {\n\t\t\tthis.curve = Float32Array.from(options.mapping);\n\t\t} else if (isFunction(options.mapping)) {\n\t\t\tthis.setMap(options.mapping, options.length);\n\t\t}\n\t}\n\n\tstatic getDefaults(): WaveShaperOptions {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tlength: 1024,\n\t\t});\n\t}\n\n\t/**\n\t *  Uses a mapping function to set the value of the curve.\n\t *  @param mapping The function used to define the values.\n\t *                 The mapping function take two arguments:\n\t *                 the first is the value at the current position\n\t *                 which goes from -1 to 1 over the number of elements\n\t *                 in the curve array. The second argument is the array position.\n\t * @example\n\t * //map the input signal from [-1, 1] to [0, 10]\n\t * shaper.setMap(function(val, index){\n\t * \treturn (val + 1) * 5;\n\t * })\n\t */\n\tsetMap(mapping: WaveShaperMappingFn, length: number = 1024): this {\n\t\tconst array = new Float32Array(length);\n\t\tfor (let i = 0, len = length; i < len; i++) {\n\t\t\tconst normalized = (i / (len - 1)) * 2 - 1;\n\t\t\tarray[i] = mapping(normalized, i);\n\t\t}\n\t\tthis.curve = array;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The array to set as the waveshaper curve. For linear curves\n\t * array length does not make much difference, but for complex curves\n\t * longer arrays will provide smoother interpolation.\n\t */\n\tget curve(): Float32Array | null {\n\t\treturn this._shaper.curve;\n\t}\n\n\tset curve(mapping: Float32Array | null) {\n\t\tthis._shaper.curve = mapping;\n\t}\n\n\t/**\n\t * Specifies what type of oversampling (if any) should be used when\n\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n\t */\n\tget oversample(): OverSampleType {\n\t\treturn this._shaper.oversample;\n\t}\n\n\tset oversample(oversampling: OverSampleType) {\n\t\tconst isOverSampleType = [\"none\", \"2x\", \"4x\"].some(str => str.includes(oversampling));\n\t\tthis.assert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n\t\tthis._shaper.oversample = oversampling;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._shaper.disconnect();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"..//core/util/Defaults\";\nimport { Param } from \"../core/context/Param\";\nimport { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Signal } from \"./Signal\";\n/**\n * A signal operator has an input and output and modifies the signal.\n */\nexport abstract class SignalOperator<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\tconstructor(options?: Partial<Options>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(SignalOperator.getDefaults(), arguments, [\"context\"])));\n\t}\n\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tif (destination instanceof Param || destination instanceof AudioParam ||\n\t\t\t(destination instanceof Signal && destination.override)) {\n\t\t\t// cancel changes\n\t\t\tdestination.cancelScheduledValues(0);\n\t\t\t// reset the value\n\t\t\tdestination.setValueAtTime(0, 0);\n\t\t\t// mark the value as overridden\n\t\t\tif (destination instanceof Signal) {\n\t\t\t\tdestination.overridden = true;\n\t\t\t}\n\t\t}\n\t\tsuper.connect(destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator, OscillatorInterface, ToneOscillatorOptions, ToneOscillatorType } from \"./Oscillator\";\n\nexport interface AMOscillatorOptions extends ToneOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationType: ToneOscillatorType;\n}\n\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n *\n * <pre>\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * </pre>\n *\n * @param frequency The starting frequency of the oscillator.\n * @param type The type of the carrier oscillator.\n * @param modulationType The type of the modulator oscillator.\n * @example\n * //a sine oscillator frequency-modulated by a square wave\n * var fmOsc = new AMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n */\nexport class AMOscillator extends Source<AMOscillatorOptions> implements OscillatorInterface {\n\n\tname = \"AMOscillator\";\n\n\t/**\n\t *  The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator = new Oscillator({context : this.context });\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency> = this._carrier.frequency;\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents> = this._carrier.detune;\n\n\t/**\n\t *  The modulating oscillator\n\t */\n\tprivate _modulator = new Oscillator({ context : this.context });\n\n\t/**\n\t *  convert the -1,1 output to 0,1\n\t */\n\tprivate _modulationScale = new AudioToGain({ context: this.context });\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave.\n\t *  @example\n\t * //pitch the modulator an octave below carrier\n\t * synth.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<Positive> = new Multiply({\n\t\tcontext: this.context,\n\t\tunits: \"positive\",\n\t});\n\n\t/**\n\t *  the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t});\n\n\tconstructor(options?: Partial<AMOscillatorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier.type = options.type;\n\t\tthis._modulator.type = options.modulationType;\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\t\tthis.harmonicity.setValueAtTime(options.harmonicity, 0);\n\n\t\t// connections\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\n\t\tthis.phase = options.phase;\n\n\t\treadOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): AMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationType: \"square\",\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Seconds): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Seconds): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t */\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis._modulationScale.dispose();\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource, OneShotSourceOptions } from \"../OneShotSource\";\n\ninterface ToneOscillatorNodeOptions extends OneShotSourceOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\ttype: OscillatorType;\n}\n\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[Tone.Oscillator](Oscillator) is better for most use-cases***\n *  @extends {Tone.AudioNode}\n *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n *  @param  {Function}  onload  The callback to invoke when the\n *                               buffer is done playing.\n */\nexport class ToneOscillatorNode extends OneShotSource<ToneOscillatorNodeOptions> {\n\n\tname = \"ToneOscillatorNode\";\n\n\t/**\n\t *  The oscillator\n\t */\n\tprivate _oscillator = this.context.createOscillator();\n\tprotected _internalChannels = [this._gainNode, this._oscillator];\n\n\t/**\n\t *  The frequency of the oscillator\n\t */\n\treadonly frequency: Param<\"frequency\">;\n\n\t/**\n\t *  The detune of the oscillator\n\t */\n\treadonly detune: Param<\"cents\">;\n\n\tconstructor(options?: Partial<ToneOscillatorNodeOptions>);\n\tconstructor(\n\t\tfrequency: Frequency,\n\t\ttype: OscillatorType,\n\t);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tconnect(this._oscillator, this._gainNode);\n\n\t\tthis.type = options.type;\n\n\t\tthis.frequency = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._oscillator.frequency,\n\t\t\tunits : \"frequency\",\n\t\t\tvalue : this.toFrequency(options.frequency),\n\t\t});\n\n\t\tthis.detune = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._oscillator.detune,\n\t\t\tunits : \"cents\",\n\t\t\tvalue : options.detune,\n\t\t});\n\t}\n\n\tstatic getDefaults(): ToneOscillatorNodeOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\ttype: \"sine\" as OscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * Start the oscillator node at the given time\n\t * @param  time When to start the oscillator\n\t */\n\tstart(time?: Time): this {\n\t\tthis.log(\"start\", time);\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._startGain(computedTime);\n\t\tthis._oscillator.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\t/**\n\t * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n\t * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n\t */\n\tsetPeriodicWave(periodicWave: PeriodicWave): this {\n\t\tthis._oscillator.setPeriodicWave(periodicWave);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n\t */\n\tget type(): OscillatorType {\n\t\treturn this._oscillator.type;\n\t}\n\tset type(type: OscillatorType) {\n\t\tthis._oscillator.type = type;\n\t}\n\n\t/**\n\t *  Clean up.\n\t *  @return  {OscillatorNode}  this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { noOp } from \"../core/util/Interface\";\nimport { PlaybackState } from \"../core/util/StateTimeline\";\n\nexport interface OneShotSourceOptions extends ToneAudioNodeOptions {\n\tonended: () => void;\n}\n\nexport abstract class OneShotSource<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The callback to invoke after the\n\t *  source is done playing.\n\t */\n\tonended: () => void = noOp;\n\n\t/**\n\t * Sources do not have input nodes\n\t */\n\tinput: undefined;\n\n\t/**\n\t *  The start time\n\t */\n\tprotected _startTime: number = -1;\n\n\t/**\n\t *  The stop time\n\t */\n\tprotected _stopTime: number = -1;\n\n\t/**\n\t * The id of the timeout\n\t */\n\tprivate _timeout: number = -1;\n\n\t/**\n\t * The public output node\n\t */\n\toutput: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain : 0,\n\t});\n\n\t/**\n\t *  The output gain node.\n\t */\n\tprotected _gainNode = this.output;\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time = 0;\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time = 0;\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tprotected _curve: \"linear\" | \"exponential\" = \"linear\";\n\n\tstatic getDefaults(): OneShotSourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tonended : noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Stop the source node\n\t */\n\tprotected abstract _stopSource(time: Seconds): void;\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the node\n\t */\n\tprotected abstract start(time?: Time): this;\n\t/**\n\t * Start the source at the given time\n\t * @param  time When to start the source\n\t */\n\tprotected _startGain(time: Seconds, gain: GainFactor = 1): this {\n\t\tthis.assert(this._startTime === -1, \"Source cannot be started more than once\");\n\t\t// apply a fade in envelope\n\t\tconst fadeInTime = this.toSeconds(this._fadeIn);\n\n\t\t// record the start time\n\t\tthis._startTime = time + fadeInTime;\n\t\tthis._startTime = Math.max(this._startTime, this.context.currentTime);\n\n\t\t// schedule the envelope\n\t\tif (fadeInTime > 0) {\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._gainNode.gain.setValueAtTime(gain, time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source node at the given time.\n\t * @param time When to stop the source\n\t */\n\tstop(time?: Time): this {\n\t\tthis._stopGain(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source at the given time\n\t * @param  time When to stop the source\n\t */\n\tprotected _stopGain(time: Seconds): this {\n\t\tthis.assert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n\t\t// cancel the previous stop\n\t\tthis.cancelStop();\n\n\t\t// the fadeOut time\n\t\tconst fadeOutTime = this.toSeconds(this._fadeOut);\n\n\t\t// schedule the stop callback\n\t\tthis._stopTime = this.toSeconds(time) + fadeOutTime;\n\t\tthis._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\t\tif (fadeOutTime > 0) {\n\t\t\t// start the fade out curve at the given time\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// stop any ongoing ramps, and set the value to 0\n\t\t\tthis._gainNode.gain.cancelAndHoldAtTime(time);\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t}\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._timeout = this.context.setTimeout(() => {\n\t\t\tthis._stopSource(this.now());\n\t\t\tthis.onended();\n\t\t\t// disconnect when it's ended, to free up for garbage collection\n\t\t\tsetTimeout(() => this._gainNode.disconnect(), 100);\n\t\t}, this._stopTime - this.context.currentTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the playback state at the given time\n\t */\n\tgetStateAtTime = function(time: Time): PlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._startTime !== -1 && computedTime >= this._startTime &&\n\t\t\t(this._stopTime === -1 || computedTime <= this._stopTime)) {\n\t\t\treturn \"started\";\n\t\t} else {\n\t\t\treturn \"stopped\";\n\t\t}\n\t};\n\n\t/**\n\t * Get the playback state at the current time\n\t */\n\tget state(): PlaybackState {\n\t\treturn this.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t *  Cancel a scheduled stop event\n\t */\n\tcancelStop(): this {\n\t\tthis.assert(this._startTime !== -1, \"Source is not started\");\n\t\t// cancel the stop envelope\n\t\tthis._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._stopTime = -1;\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { OneShotSource, OneShotSourceOptions } from \"../OneShotSource\";\n\ninterface ToneBufferSourceOptions extends OneShotSourceOptions {\n\tbuffer: ToneAudioBuffer;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tloop: boolean;\n\tonload: () => void;\n}\n\n/**\n *  @class Wrapper around the native BufferSourceNode.\n *  @extends {Tone.AudioNode}\n *  @param  buffer   The buffer to play\n *  @param  onended  The callback to invoke when the buffer is done playing.\n */\nexport class ToneBufferSource extends OneShotSource<ToneBufferSourceOptions> {\n\n\tname = \"ToneBufferSource\";\n\n\t/**\n\t *  The oscillator\n\t */\n\tprivate _source = this.context.createBufferSource();\n\tprotected _internalChannels = [this._gainNode, this._source];\n\n\t/**\n\t *  The frequency of the oscillator\n\t */\n\treadonly playbackRate: Param<Positive>;\n\n\t/**\n\t * The private instance of the buffer object\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * indicators if the source has started/stopped\n\t */\n\tprivate _sourceStarted: boolean = false;\n\tprivate _sourceStopped: boolean = false;\n\n\tconstructor(options?: Partial<ToneBufferSourceOptions>);\n\tconstructor(buffer?: ToneAudioBuffer | AudioBuffer | string, onload?: () => void);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]));\n\t\tconst options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]);\n\n\t\tconnect(this._source, this._gainNode);\n\t\tthis._source.onended = this._stopSource.bind(this);\n\n\t\t/**\n\t\t *  The playbackRate of the buffer\n\t\t */\n\t\tthis.playbackRate = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._source.playbackRate,\n\t\t\tunits : \"positive\",\n\t\t\tvalue : options.playbackRate,\n\t\t});\n\n\t\t// set some values initially\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis._buffer = new ToneAudioBuffer(options.buffer, options.onload);\n\t}\n\n\tstatic getDefaults(): ToneBufferSourceOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tbuffer: new ToneAudioBuffer(),\n\t\t\tcurve: \"linear\",\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tloop: false,\n\t\t\tloopEnd : 0,\n\t\t\tloopStart : 0,\n\t\t\tonload: noOp,\n\t\t\tplaybackRate : 1,\n\t\t});\n\t}\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(t: Time) {\n\t\tthis._fadeIn = t;\n\t}\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(t: Time) {\n\t\tthis._fadeOut = t;\n\t}\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tget curve(): \"linear\" | \"exponential\" {\n\t\treturn this._curve;\n\t}\n\tset curve(t: \"linear\" | \"exponential\") {\n\t\tthis._curve = t;\n\t}\n\n\t/**\n\t *  Start the buffer\n\t *  @param  time When the player should start.\n\t *  @param  offset The offset from the beginning of the sample to start at.\n\t *  @param  duration How long the sample should play. If no duration\n\t *                   is given, it will default to the full length\n\t *                   of the sample (minus any offset)\n\t *  @param  gain  The gain to play the buffer back at.\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time, gain: GainFactor = 1): this {\n\t\tthis.assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n\t\ttime = this.toSeconds(time);\n\n\t\t// apply the gain envelope\n\t\tthis._startGain(time, gain);\n\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this.loop) {\n\t\t\toffset = defaultArg(offset, this.loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\t\toffset = this.toSeconds(offset);\n\t\t// make sure the offset is not less than 0\n\t\toffset = Math.max(offset, 0);\n\n\t\t// start the buffer source\n\t\tif (this.loop) {\n\t\t\t// modify the offset if it's greater than the loop time\n\t\t\tconst loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\t\tconst loopStart = this.toSeconds(this.loopStart);\n\t\t\tconst loopDuration = loopEnd - loopStart;\n\t\t\t// move the offset back\n\t\t\tif (offset >= loopEnd) {\n\t\t\t\toffset = ((offset - loopStart) % loopDuration) + loopStart;\n\t\t\t}\n\t\t}\n\n\t\t// this.buffer.loaded would have return false if the AudioBuffer was undefined\n\t\tthis._source.buffer = this.buffer.get() as AudioBuffer;\n\t\tthis._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\tif (offset < this.buffer.duration) {\n\t\t\tthis._sourceStarted = true;\n\t\t\tthis._source.start(time, offset);\n\t\t}\n\n\t\t// if a duration is given, schedule a stop\n\t\tif (isDefined(duration)) {\n\t\t\tlet computedDur = this.toSeconds(duration);\n\t\t\t// make sure it's never negative\n\t\t\tcomputedDur = Math.max(computedDur, 0);\n\t\t\tthis.stop(time + computedDur);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(): void {\n\t\tif (!this._sourceStopped) {\n\t\t\tthis._sourceStopped = true;\n\t\t\t// allow additional time for the exponential curve to fully decay\n\t\t\tconst additionalTail = this._curve === \"exponential\" ? this.toSeconds(this._fadeOut) * 2 : 0;\n\t\t\tif (this._sourceStarted && this._stopTime !== -1) {\n\t\t\t\tthis._source.stop(this._stopTime + additionalTail);\n\t\t\t}\n\n\t\t\tthis.onended();\n\t\t\t// remove the onended callback\n\t\t\tthis.onended = noOp;\n\n\t\t\t// dispose the source after it's come to a stop\n\t\t\tsetTimeout(() => {\n\t\t\t\t// if it hasn't already been disposed\n\t\t\t\tif (this._source) {\n\t\t\t\t\tthis._source.disconnect();\n\t\t\t\t\tthis._gainNode.disconnect();\n\t\t\t\t}\n\t\t\t}, additionalTail * 1000 + 100);\n\t\t}\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._source.loopStart;\n\t}\n\tset loopStart(loopStart: Time) {\n\t\tthis._source.loopStart = this.toSeconds(loopStart);\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._source.loopEnd;\n\t}\n\tset loopEnd(loopEnd: Time) {\n\t\tthis._source.loopEnd = this.toSeconds(loopEnd);\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t * @memberOf ToneBufferSource#\n\t * @type {Tone.Buffer}\n\t * @name buffer\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer: ToneAudioBuffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._source.loop;\n\t}\n\tset loop(loop: boolean) {\n\t\tthis._source.loop = loop;\n\t\tif (this._sourceStarted) {\n\t\t\tthis.cancelStop();\n\t\t}\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._source.onended = null;\n\t\tthis._source.disconnect();\n\t\tthis._buffer.dispose();\n\t\tthis.playbackRate.dispose();\n\t\treturn this;\n\t}\n}\n","import { noOp } from \"../util/Interface\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\nexport interface TransportEventOptions {\n\tcallback: (time: number) => void;\n\tonce: boolean;\n\ttime: Ticks;\n}\n\n/**\n * TransportEvent is an internal class used by (Tone.Transport)[Transport]\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n * @param Transport The transport object which the event belongs to\n */\nexport class TransportEvent {\n\n\t/**\n\t * Reference to the Transport that created it\n\t */\n\tprotected transport: Transport;\n\n\t/**\n\t * The unique id of the event\n\t */\n\tid: number = TransportEvent._eventId++;\n\n\t/**\n\t * The time the event starts\n\t */\n\ttime: Ticks;\n\n\t/**\n\t * The callback to invoke\n\t */\n\tprivate callback?: (time: Seconds) => void;\n\n\t/**\n\t * If the event should be removed after being invoked.\n\t */\n\tprivate _once: boolean;\n\n\tconstructor(transport: Transport, opts: Partial<TransportEventOptions>) {\n\n\t\tconst options: TransportEventOptions = Object.assign(TransportEvent.getDefaults(), opts);\n\n\t\tthis.transport = transport;\n\t\tthis.callback = options.callback;\n\t\tthis._once = options.once;\n\t\tthis.time = options.time;\n\t}\n\n\tstatic getDefaults(): TransportEventOptions {\n\t\treturn {\n\t\t\tcallback: noOp,\n\t\t\tonce: false,\n\t\t\ttime: 0,\n\t\t};\n\t}\n\n\t/**\n\t * Current ID counter\n\t */\n\tprivate static _eventId: number = 0;\n\n\t/**\n\t * Invoke the event callback.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\tif (this.callback) {\n\t\t\tthis.callback(time);\n\t\t\tif (this._once) {\n\t\t\t\tthis.transport.clear(this.id);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tthis.callback = undefined;\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface VolumeOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  @class Volume is a simple volume node, useful for creating a volume fader.\n *\n *  @extends {Tone.AudioNode}\n *  @constructor\n *  @param {Decibels} [volume=0] the initial volume\n *  @example\n * var vol = new Volume(-12);\n * instrument.chain(vol, Tone.Master);\n */\nexport class Volume extends ToneAudioNode<VolumeOptions> {\n\n\tname = \"Volume\";\n\n\t/**\n\t * the output node\n\t */\n\toutput: Gain<Decibels> = new Gain({\n\t\tcontext: this.context,\n\t\tunits: \"decibels\",\n\t});\n\tprotected _internalChannels = [this.output];\n\n\t/**\n\t * Input and output are the same\n\t */\n\tinput = this.output;\n\n\t/**\n\t * The unmuted volume\n\t */\n\tprivate _unmutedVolume: Decibels;\n\n\t/**\n\t *  The volume control in decibels.\n\t */\n\tvolume: Param<Decibels> = this.output.gain;\n\n\tconstructor(options?: Decibels | Partial<VolumeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n\n\t\tthis.volume.value = options.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis._unmutedVolume = options.volume;\n\n\t\t// set the mute initially\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): VolumeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * volume.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.volume.value === -Infinity;\n\t}\n\tset mute(mute: boolean) {\n\t\tif (!this.mute && mute) {\n\t\t\tthis._unmutedVolume = this.volume.value;\n\t\t\t// maybe it should ramp here?\n\t\t\tthis.volume.value = -Infinity;\n\t\t} else if (this.mute && !mute) {\n\t\t\tthis.volume.value = this._unmutedVolume;\n\t\t}\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tthis.input.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n","import { Tone } from \"../Tone\";\nimport { isDefined } from \"./TypeCheck\";\n\n/**\n * An IntervalTimeline event must have a time and duration\n */\nexport interface IntervalTimelineEvent {\n\ttime: number;\n\tduration: number;\n\t[propName: string]: any;\n}\n\n/**\n * Similar to Tone.Timeline, but all events represent\n * intervals with both \"time\" and \"duration\" times. The\n * events are placed in a tree structure optimized\n * for querying an intersection point with the timeline\n * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n * to represent the data.\n */\nexport class IntervalTimeline extends Tone {\n\n\tname = \"IntervalTimeline\";\n\n\t/**\n\t *  The root node of the inteval tree\n\t */\n\tprivate _root: IntervalNode | null = null;\n\n\t/**\n\t *  Keep track of the length of the timeline.\n\t */\n\tprivate _length: number = 0;\n\n\t/**\n\t *  The event to add to the timeline. All events must\n\t *  have a time and duration value\n\t *  @param  event  The event to add to the timeline\n\t */\n\tadd(event: IntervalTimelineEvent): this {\n\t\tthis.assert(isDefined(event.time), \"Events must have a time property\");\n\t\tthis.assert(isDefined(event.duration), \"Events must have a duration parameter\");\n\n\t\tevent.time = event.time.valueOf();\n\t\tlet node: IntervalNode | null = new IntervalNode(event.time, event.time + event.duration, event);\n\t\tif (this._root === null) {\n\t\t\tthis._root = node;\n\t\t} else {\n\t\t\tthis._root.insert(node);\n\t\t}\n\t\tthis._length++;\n\t\t// Restructure tree to be balanced\n\t\twhile (node !== null) {\n\t\t\tnode.updateHeight();\n\t\t\tnode.updateMax();\n\t\t\tthis._rebalance(node);\n\t\t\tnode = node.parent;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  event  The event to remove from the timeline\n\t */\n\tremove(event: IntervalTimelineEvent): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(event.time, results);\n\t\t\tfor (const node of results) {\n\t\t\t\tif (node.event === event) {\n\t\t\t\t\tthis._removeNode(node);\n\t\t\t\t\tthis._length--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The number of items in the timeline.\n\t *  @readOnly\n\t */\n\tget length(): number {\n\t\treturn this._length;\n\t}\n\n\t/**\n\t *  Remove events whose time time is after the given time\n\t *  @param  time  The time to query.\n\t */\n\tcancel(after: number): this {\n\t\tthis.forEachFrom(after, event => this.remove(event));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Set the root node as the given node\n\t */\n\tprivate _setRoot(node: IntervalNode | null): void {\n\t\tthis._root = node;\n\t\tif (this._root !== null) {\n\t\t\tthis._root.parent = null;\n\t\t}\n\t}\n\n\t/**\n\t *  Replace the references to the node in the node's parent\n\t *  with the replacement node.\n\t */\n\tprivate _replaceNodeInParent(node: IntervalNode, replacement: IntervalNode | null): void {\n\t\tif (node.parent !== null) {\n\t\t\tif (node.isLeftChild()) {\n\t\t\t\tnode.parent.left = replacement;\n\t\t\t} else {\n\t\t\t\tnode.parent.right = replacement;\n\t\t\t}\n\t\t\tthis._rebalance(node.parent);\n\t\t} else {\n\t\t\tthis._setRoot(replacement);\n\t\t}\n\t}\n\n\t/**\n\t *  Remove the node from the tree and replace it with\n\t *  a successor which follows the schema.\n\t */\n\tprivate _removeNode(node): void {\n\t\tif (node.left === null && node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, null);\n\t\t} else if (node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, node.left);\n\t\t} else if (node.left === null) {\n\t\t\tthis._replaceNodeInParent(node, node.right);\n\t\t} else {\n\t\t\tconst balance = node.getBalance();\n\t\t\tlet replacement: IntervalNode;\n\t\t\tlet temp: IntervalNode | null = null;\n\t\t\tif (balance > 0) {\n\t\t\t\tif (node.left.right === null) {\n\t\t\t\t\treplacement = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\ttemp = replacement;\n\t\t\t\t} else {\n\t\t\t\t\treplacement = node.left.right;\n\t\t\t\t\twhile (replacement.right !== null) {\n\t\t\t\t\t\treplacement = replacement.right;\n\t\t\t\t\t}\n\t\t\t\t\tif (replacement.parent) {\n\t\t\t\t\t\treplacement.parent.right = replacement.left;\n\t\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (node.right.left === null) {\n\t\t\t\treplacement = node.right;\n\t\t\t\treplacement.left = node.left;\n\t\t\t\ttemp = replacement;\n\t\t\t} else {\n\t\t\t\treplacement = node.right.left;\n\t\t\t\twhile (replacement.left !== null) {\n\t\t\t\t\treplacement = replacement.left;\n\t\t\t\t}\n\t\t\t\tif (replacement.parent) {\n\t\t\t\t\treplacement.parent.left = replacement.right;\n\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (node.parent !== null) {\n\t\t\t\tif (node.isLeftChild()) {\n\t\t\t\t\tnode.parent.left = replacement;\n\t\t\t\t} else {\n\t\t\t\t\tnode.parent.right = replacement;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._setRoot(replacement);\n\t\t\t}\n\t\t\tif (temp) {\n\t\t\t\tthis._rebalance(temp);\n\t\t\t}\n\t\t}\n\t\tnode.dispose();\n\t}\n\n\t/**\n\t *  Rotate the tree to the left\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\t_rotateLeft(node): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.right the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.right;\n\t\tnode.right = pivotNode.left;\n\t\tpivotNode.left = node;\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t *  Rotate the tree to the right\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\t_rotateRight(node): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.left the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.left;\n\t\tnode.left = pivotNode.right;\n\t\tpivotNode.right = node;\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t *  Balance the BST\n\t */\n\tprivate _rebalance(node: IntervalNode): void {\n\t\tconst balance = node.getBalance();\n\t\tif (balance > 1 && node.left) {\n\t\t\tif (node.left.getBalance() < 0) {\n\t\t\t\tthis._rotateLeft(node.left);\n\t\t\t} else {\n\t\t\t\tthis._rotateRight(node);\n\t\t\t}\n\t\t} else if (balance < -1 && node.right) {\n\t\t\tif (node.right.getBalance() > 0) {\n\t\t\t\tthis._rotateRight(node.right);\n\t\t\t} else {\n\t\t\t\tthis._rotateLeft(node);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Get an event whose time and duration span the give time. Will\n\t *  return the match whose \"time\" value is closest to the given time.\n\t *  @return  The event which spans the desired time\n\t */\n\tget(time: number): IntervalTimelineEvent | null {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tif (results.length > 0) {\n\t\t\t\tlet max = results[0];\n\t\t\t\tfor (let i = 1; i < results.length; i++) {\n\t\t\t\t\tif (results[i].low > max.low) {\n\t\t\t\t\t\tmax = results[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn max.event;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t *  Iterate over everything in the timeline.\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: IntervalTimelineEvent) => void): this {\n\t\tif (this._root !== null) {\n\t\t\tconst allNodes: IntervalNode[] = [];\n\t\t\tthis._root.traverse(node => allNodes.push(node));\n\t\t\tallNodes.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array in which the given time\n\t *  overlaps with the time and duration time of the event.\n\t *  @param  time The time to check if items are overlapping\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: IntervalTimelineEvent) => void): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array in which the time is greater\n\t *  than or equal to the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time, callback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.searchAfter(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tif (this._root !== null) {\n\t\t\tthis._root.traverse(node => node.dispose());\n\t\t}\n\t\tthis._root = null;\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tINTERVAL NODE HELPER\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Represents a node in the binary search tree, with the addition\n *  of a \"high\" value which keeps track of the highest value of\n *  its children.\n *  References:\n *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n *  @param low\n *  @param high\n */\n// tslint:disable-next-line: max-classes-per-file\nclass IntervalNode {\n\n\t// the event container\n\tevent: IntervalTimelineEvent | null;\n\t// the low value\n\tlow: number;\n\t// the high value\n\thigh: number;\n\t// the high value for this and all child nodes\n\tmax: number;\n\t// the nodes to the left\n\tprivate _left: IntervalNode | null = null;\n\t// the nodes to the right\n\tprivate _right: IntervalNode | null = null;\n\t// the parent node\n\tparent: IntervalNode | null = null;\n\t// the number of child nodes\n\theight: number = 0;\n\n\tconstructor(low, high, event) {\n\t\tthis.event = event;\n\t\t// the low value\n\t\tthis.low = low;\n\t\t// the high value\n\t\tthis.high = high;\n\t\t// the high value for this and all child nodes\n\t\tthis.max = this.high;\n\t}\n\n\t/**\n\t *  Insert a node into the correct spot in the tree\n\t */\n\tinsert(node: IntervalNode): void {\n\t\tif (node.low <= this.low) {\n\t\t\tif (this.left === null) {\n\t\t\t\tthis.left = node;\n\t\t\t} else {\n\t\t\t\tthis.left.insert(node);\n\t\t\t}\n\t\t} else if (this.right === null) {\n\t\t\tthis.right = node;\n\t\t} else {\n\t\t\tthis.right.insert(node);\n\t\t}\n\t}\n\n\t/**\n\t *  Search the tree for nodes which overlap\n\t *  with the given point\n\t *  @param  point  The point to query\n\t *  @param  results  The array to put the results\n\t */\n\tsearch(point: number, results: IntervalNode[]): void {\n\t\t// If p is to the right of the rightmost point of any interval\n\t\t// in this node and all children, there won't be any matches.\n\t\tif (point > this.max) {\n\t\t\treturn;\n\t\t}\n\t\t// Search left children\n\t\tif (this.left !== null) {\n\t\t\tthis.left.search(point, results);\n\t\t}\n\t\t// Check this node\n\t\tif (this.low <= point && this.high > point) {\n\t\t\tresults.push(this);\n\t\t}\n\t\t// If p is to the left of the time of this interval,\n\t\t// then it can't be in any child to the right.\n\t\tif (this.low > point) {\n\t\t\treturn;\n\t\t}\n\t\t// Search right children\n\t\tif (this.right !== null) {\n\t\t\tthis.right.search(point, results);\n\t\t}\n\t}\n\n\t/**\n\t *  Search the tree for nodes which are less\n\t *  than the given point\n\t *  @param  point  The point to query\n\t *  @param  results  The array to put the results\n\t */\n\tsearchAfter(point: number, results: IntervalNode[]): void {\n\t\t// Check this node\n\t\tif (this.low >= point) {\n\t\t\tresults.push(this);\n\t\t\tif (this.left !== null) {\n\t\t\t\tthis.left.searchAfter(point, results);\n\t\t\t}\n\t\t}\n\t\t// search the right side\n\t\tif (this.right !== null) {\n\t\t\tthis.right.searchAfter(point, results);\n\t\t}\n\t}\n\n\t/**\n\t *  Invoke the callback on this element and both it's branches\n\t *  @param  {Function}  callback\n\t */\n\ttraverse(callback: (self: IntervalNode) => void): void {\n\t\tcallback(this);\n\t\tif (this.left !== null) {\n\t\t\tthis.left.traverse(callback);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.right.traverse(callback);\n\t\t}\n\t}\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tupdateHeight(): void {\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tthis.height = Math.max(this.left.height, this.right.height) + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tthis.height = this.right.height + 1;\n\t\t} else if (this.left !== null) {\n\t\t\tthis.height = this.left.height + 1;\n\t\t} else {\n\t\t\tthis.height = 0;\n\t\t}\n\t}\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tupdateMax(): void {\n\t\tthis.max = this.high;\n\t\tif (this.left !== null) {\n\t\t\tthis.max = Math.max(this.max, this.left.max);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.max = Math.max(this.max, this.right.max);\n\t\t}\n\t}\n\n\t/**\n\t *  The balance is how the leafs are distributed on the node\n\t *  @return  Negative numbers are balanced to the right\n\t */\n\tgetBalance(): number {\n\t\tlet balance = 0;\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tbalance = this.left.height - this.right.height;\n\t\t} else if (this.left !== null) {\n\t\t\tbalance = this.left.height + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tbalance = -(this.right.height + 1);\n\t\t}\n\t\treturn balance;\n\t}\n\n\t/**\n\t *  @returns true if this node is the left child of its parent\n\t */\n\tisLeftChild(): boolean {\n\t\treturn this.parent !== null && this.parent.left === this;\n\t}\n\n\t/**\n\t *  get/set the left node\n\t */\n\tget left(): IntervalNode | null {\n\t\treturn this._left;\n\t}\n\n\tset left(node: IntervalNode | null) {\n\t\tthis._left = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t *  get/set the right node\n\t */\n\tget right(): IntervalNode | null {\n\t\treturn this._right;\n\t}\n\n\tset right(node: IntervalNode | null) {\n\t\tthis._right = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t *  null out references.\n\t */\n\tdispose(): void {\n\t\tthis.parent = null;\n\t\tthis._left = null;\n\t\tthis._right = null;\n\t\tthis.event = null;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter, EmitterEventObject } from \"../util/Emitter\";\nimport { noOp, readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline } from \"../util/StateTimeline\";\nimport { TickSignal } from \"./TickSignal\";\nimport { TickSource } from \"./TickSource\";\n\ntype ClockCallback = (time: Time, ticks?: Ticks) => void;\n\ninterface ClockOptions extends ToneWithContextOptions {\n\tfrequency: number;\n\tcallback: ClockCallback;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ntype ClockEvent = \"start\" | \"stop\" | \"pause\";\n\n/**\n * A sample accurate clock which provides a callback at the given rate.\n * While the callback is not sample-accurate (it is still susceptible to\n * loose JS timing), the time passed in as the argument to the callback\n * is precise. For most applications, it is better to use Tone.Transport\n * instead of the Clock by itself since you can synchronize multiple callbacks.\n *\n * @param callback The callback to be invoked with the time of the audio event\n * @param frequency The rate of the callback\n * @example\n * //the callback will be invoked approximately once a second\n * //and will print the time exactly once a second apart.\n * const clock = new Clock(time => {\n * \tconsole.log(time);\n * }, 1);\n */\nexport class Clock<Type extends BPM | Hertz = Hertz>\nextends ToneWithContext<ClockOptions> implements Emitter<ClockEvent> {\n\n\tname = \"Clock\";\n\n\t/**\n\t *  The callback function to invoke at the scheduled tick.\n\t */\n\tcallback: ClockCallback = noOp;\n\n\t/**\n\t *  The tick counter\n\t */\n\tprivate _tickSource: TickSource<Type>;\n\n\t/**\n\t *  The last time the loop callback was invoked\n\t */\n\tprivate _lastUpdate: number = 0;\n\n\t/**\n\t *  Keep track of the playback state\n\t */\n\tprivate _state: StateTimeline = new StateTimeline(\"stopped\");\n\n\t/**\n\t * Context bound reference to the _loop method\n\t * This is necessary to remove the event in the end.\n\t */\n\tprivate _boundLoop: () => void = this._loop.bind(this);\n\n\t/**\n\t *  The rate the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<Type>;\n\n\tconstructor(options: Partial<ClockOptions>);\n\tconstructor(callback?: ClockCallback, frequency?: Frequency);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]));\n\t\tconst options = optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]);\n\n\t\tthis.callback = options.callback;\n\t\tthis._tickSource = new TickSource({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tunits: options.units,\n\t\t});\n\t\tthis._lastUpdate = 0;\n\t\tthis.frequency = this._tickSource.frequency;\n\t\treadOnly(this, \"frequency\");\n\n\t\t// add an initial state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\n\t\t// bind a callback to the worker thread\n\t\tthis.context.on(\"tick\", this._boundLoop);\n\t}\n\n\tstatic getDefaults(): ClockOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback: noOp as ClockCallback,\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\",\n\t\t}) as ClockOptions;\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  time    The time the clock should start\n\t *  @param offset  Where the tick counter starts counting from.\n\t */\n\tstart(time?: Time, offset?: Ticks): this {\n\t\t// make sure the context is started\n\t\tthis.context.resume();\n\t\t// start the loop\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis._tickSource.start(computedTime, offset);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"start\", computedTime, offset);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t *  @param time The time when the clock should stop.\n\t *  @returns {Clock} this\n\t *  @example\n\t * clock.stop();\n\t */\n\tstop(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis._tickSource.stop(computedTime);\n\t\tif (computedTime < this._lastUpdate) {\n\t\t\tthis.emit(\"stop\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param time The time when the clock should stop.\n\t */\n\tpause(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t\tthis._tickSource.pause(computedTime);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"pause\", computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The number of times the callback was invoked. Starts counting at 0\n\t *  and increments after the callback was invoked.\n\t */\n\tget ticks(): Ticks {\n\t\treturn Math.ceil(this.getTicksAtTime(this.now()));\n\t}\n\tset ticks(t: Ticks) {\n\t\tthis._tickSource.ticks = t;\n\t}\n\n\t/**\n\t *  The time since ticks=0 that the Clock has been running. Accounts for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._tickSource.seconds;\n\t}\n\tset seconds(s: Seconds) {\n\t\tthis._tickSource.seconds = s;\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._tickSource.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\tthis._tickSource.setTicksAtTime(ticks, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\treturn this._tickSource.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the next tick\n\t * @param  ticks The tick number.\n\t */\n\tnextTickTime(offset: Ticks, when: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst currentTick = this.getTicksAtTime(computedTime);\n\t\treturn this._tickSource.getTimeOfTick(currentTick + offset, computedTime);\n\t}\n\n\t/**\n\t *  The scheduling loop.\n\t */\n\tprivate _loop(): void {\n\n\t\tconst startTime = this._lastUpdate;\n\t\tconst endTime = this.now();\n\t\tthis._lastUpdate = endTime;\n\n\t\tif (startTime !== endTime) {\n\t\t\t// the state change events\n\t\t\tthis._state.forEachBetween(startTime, endTime, e => {\n\t\t\t\tswitch (e.state) {\n\t\t\t\t\tcase \"started\" :\n\t\t\t\t\t\tconst offset = this._tickSource.getTicksAtTime(e.time);\n\t\t\t\t\t\tthis.emit(\"start\", e.time, offset);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"stopped\" :\n\t\t\t\t\t\tif (e.time !== 0) {\n\t\t\t\t\t\t\tthis.emit(\"stop\", e.time);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"paused\" :\n\t\t\t\t\t\tthis.emit(\"pause\", e.time);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t\t// the tick callbacks\n\t\t\tthis._tickSource.forEachTickBetween(startTime, endTime, (time, ticks) => {\n\t\t\t\tthis.callback(time, ticks);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Returns the scheduled state at the given time.\n\t * @param  time  The time to query.\n\t * @return  The name of the state input in setStateAtTime.\n\t * @example\n\t * clock.start(\"+0.1\");\n\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tgetStateAtTime(time: Time): PlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(computedTime);\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tthis.context.off(\"tick\", this._boundLoop);\n\t\tthis._tickSource.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t///////////////////////////////////////////////////////////////////////\n\n\ton!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\tonce!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\toff!: (event: ClockEvent, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Clock);\n","import { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions\";\nimport { ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\n\nexport type FrequencyUnit = TimeBaseUnit | \"midi\";\n\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `eval` method.\n * @example\n * Frequency(\"C3\") // 261\n * Frequency(38, \"midi\") //\n * Frequency(\"C3\").transpose(4);\n */\nexport class FrequencyClass<Type extends number = Hertz> extends TimeClass<Type, FrequencyUnit> {\n\n\tname = \"Frequency\";\n\n\treadonly defaultUnits: FrequencyUnit = \"hz\";\n\n\t/**\n\t * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n\t * to generate all the other pitch values from notes. A4's values in Hertz.\n\t */\n\tstatic get A4(): Hertz {\n\t\treturn getA4();\n\t}\n\tstatic set A4(freq: Hertz) {\n\t\tsetA4(freq);\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tAUGMENT BASE EXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign({}, super._getExpressions(), {\n\t\t\tmidi : {\n\t\t\t\tregexp : /^(\\d+(?:\\.\\d+)?midi)/,\n\t\t\t\tmethod(value): number {\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(value);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tnote : {\n\t\t\t\tregexp : /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t\t\t\tmethod(pitch, octave): number {\n\t\t\t\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\t\t\t\tconst noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn noteNumber;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(noteNumber);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\ttr : {\n\t\t\t\tregexp : /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t\t\tmethod(m, q, s): number {\n\t\t\t\t\tlet total = 1;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total;\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tEXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Transposes the frequency by the given number of semitones.\n\t *  @return  A new transposed frequency\n\t *  @example\n\t * Frequency(\"A4\").transpose(3); //\"C5\"\n\t */\n\ttranspose(interval: Interval): FrequencyClass {\n\t\treturn new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n\t}\n\n\t/**\n\t *  Takes an array of semitone intervals and returns\n\t *  an array of frequencies transposed by those intervals.\n\t *  @return  Returns an array of Frequencies\n\t *  @example\n\t * Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t */\n\tharmonize(intervals: Interval[]): FrequencyClass[] {\n\t\treturn intervals.map(interval => {\n\t\t\treturn this.transpose(interval);\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Return the value of the frequency as a MIDI note\n\t *  @return  {MIDI}\n\t *  @example\n\t * Frequency(\"C4\").toMidi(); //60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.valueOf());\n\t}\n\n\t/**\n\t *  Return the value of the frequency in Scientific Pitch Notation\n\t *  @return  {Note}\n\t *  @example\n\t * Frequency(69, \"midi\").toNote(); //\"A4\"\n\t */\n\ttoNote(): Note {\n\t\tconst freq = this.toFrequency();\n\t\tconst log = Math.log2(freq / FrequencyClass.A4);\n\t\tlet noteNumber = Math.round(12 * log) + 57;\n\t\tconst octave = Math.floor(noteNumber / 12);\n\t\tif (octave < 0) {\n\t\t\tnoteNumber += -12 * octave;\n\t\t}\n\t\tconst noteName = scaleIndexToNote[noteNumber % 12];\n\t\treturn noteName + octave.toString();\n\t}\n\n\t/**\n\t *  Return the duration of one cycle in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn 1 / super.toSeconds();\n\t}\n\n\t/**\n\t *  Return the duration of one cycle in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.floor(quarters * this._getPPQ());\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS HELPERS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  With no arguments, return 0\n\t */\n\tprotected _noArg(): Type {\n\t\treturn 0 as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn freq as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn 1 / ((ticks * 60) / (this._getBpm() * this._getPPQ())) as Type;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn 1 / super._beatsToUnits(beats) as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn 1 / seconds as Type;\n\t}\n\n\t/**\n\t * Convert a MIDI note to frequency value.\n\t * @param  midi The midi number to convert.\n\t * @return The corresponding frequency value\n\t * @example\n\t * FrequencyClass.mtof(69); // returns 440\n\t */\n\tstatic mtof(midi: MidiNote): Hertz {\n\t\treturn mtof(midi);\n\t}\n\n\t/**\n\t * Convert a frequency value to a MIDI note.\n\t * @param frequency The value to frequency value to convert.\n\t * @example\n\t * Frequency.ftom(440); // returns 69\n\t */\n\tstatic ftom(frequency: Hertz): MidiNote {\n\t\treturn ftom(frequency);\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tFREQUENCY CONVERSIONS\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Note to scale index\n *  @type  {Object}\n *  @private\n */\nconst noteToScaleIndex = {\n\t// tslint:disable-next-line\n\t\"cbb\" : -2, \"cb\" : -1, \"c\" : 0, \"c#\" : 1, \"cx\" : 2,\n\t\"dbb\" : 0, \"db\" : 1, \"d\" : 2, \"d#\" : 3, \"dx\" : 4,\n\t\"ebb\" : 2, \"eb\" : 3, \"e\" : 4, \"e#\" : 5, \"ex\" : 6,\n\t\"fbb\" : 3, \"fb\" : 4, \"f\" : 5, \"f#\" : 6, \"fx\" : 7,\n\t\"gbb\" : 5, \"gb\" : 6, \"g\" : 7, \"g#\" : 8, \"gx\" : 9,\n\t\"abb\" : 7, \"ab\" : 8, \"a\" : 9, \"a#\" : 10, \"ax\" : 11,\n\t\"bbb\" : 9, \"bb\" : 10, \"b\" : 11, \"b#\" : 12, \"bx\" : 13,\n};\n\n/**\n *  scale index to note (sharps)\n *  @type  {Array}\n *  @private\n */\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n/**\n * Convert a value into a FrequencyClass object.\n */\nexport function Frequency(value?: TimeValue | Frequency, units?: FrequencyUnit): FrequencyClass {\n\treturn new FrequencyClass(getContext(), value, units);\n}\n","export const version = \"14.0.9\";\n","import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isNumber, isString } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { AMOscillator, AMOscillatorOptions } from \"./AMOscillator\";\nimport { FatOscillator, FatOscillatorOptions } from \"./FatOscillator\";\nimport { FMOscillator, FMOscillatorOptions } from \"./FMOscillator\";\nimport { Oscillator, OscillatorInterface,\n\tToneOscillatorBaseType, ToneOscillatorOptions,\n\tToneOscillatorType } from \"./Oscillator\";\nimport { PulseOscillator, PulseOscillatorOptions } from \"./PulseOscillator\";\nimport { PWMOscillator, PWMOscillatorOptions } from \"./PWMOscillator\";\n\n/**\n * All of the oscillator types that OmniOscillator can take on\n */\ntype AnyOscillator = Oscillator | PWMOscillator | PulseOscillator | FatOscillator | AMOscillator | FMOscillator;\n\n/**\n * The constructor of each of the OmniOscillator types\n */\ntype TypeofAnyOscillator = typeof Oscillator | typeof PWMOscillator |\n\ttypeof PulseOscillator | typeof FatOscillator |\n\ttypeof AMOscillator | typeof FMOscillator;\n\n/**\n * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n * when it's not.\n */\ntype OmniOscillatorType = string;\n\ninterface OmniOscillatorOptions extends ToneOscillatorOptions {\n\ttype: OmniOscillatorType;\n}\n\n/**\n * Select the Oscillator's Options depending on the generic type.\n */\ntype ConditionalOptions<Osc extends AnyOscillator> =\n\tOsc extends FMOscillator ? FMOscillatorOptions :\n\tOsc extends Oscillator ? ToneOscillatorOptions :\n\tOsc extends AMOscillator ? AMOscillatorOptions :\n\tOsc extends FatOscillator ? FatOscillatorOptions :\n\tOsc extends PulseOscillator ? PulseOscillatorOptions :\n\tOsc extends PWMOscillator ? PWMOscillatorOptions :\n\tToneOscillatorOptions;\n\n/**\n * All of the Oscillator constructor types mapped to their name.\n */\ninterface OmniOscillatorSource {\n\t\"fm\": FMOscillator;\n\t\"am\": AMOscillator;\n\t\"pwm\": PWMOscillator;\n\t\"pulse\": PulseOscillator;\n\t\"oscillator\": Oscillator;\n\t\"fat\": FatOscillator;\n}\n\n/**\n * The available oscillator types.\n */\nexport type OmniOscSourceType = keyof OmniOscillatorSource;\n\n// Conditional Types\ntype IsAmOrFmOscillator<Osc, Ret> = Osc extends AMOscillator ? Ret : Osc extends FMOscillator ? Ret : undefined;\ntype IsFatOscillator<Osc, Ret> = Osc extends FatOscillator ? Ret : undefined;\ntype IsPWMOscillator<Osc, Ret> = Osc extends PWMOscillator ? Ret : undefined;\ntype IsPulseOscillator<Osc, Ret> = Osc extends PulseOscillator ? Ret : undefined;\ntype IsFMOscillator<Osc, Ret> = Osc extends FMOscillator ? Ret : undefined;\n\n// tslint:disable-next-line: variable-name\nconst OmniOscillatorSourceMap: {\n\t[key in OmniOscSourceType] : TypeofAnyOscillator\n} = {\n\tam: AMOscillator,\n\tfat: FatOscillator,\n\tfm: FMOscillator,\n\toscillator: Oscillator,\n\tpulse: PulseOscillator,\n\tpwm: PWMOscillator,\n};\n\n/**\n * OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n * Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n * into one class. The oscillator class can be changed by setting the `type`.\n * `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n * any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n * will use the FMOscillator, AMOscillator or FatOscillator respectively.\n * For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n * to a FatOscillator of type \"sawtooth\".\n *\n * @param frequency The initial frequency of the oscillator.\n * @param type The type of the oscillator.\n * @example\n * var omniOsc = new OmniOscillator(\"C#4\", \"pwm\");\n */\nexport class OmniOscillator<OscType extends AnyOscillator>\nextends Source<OmniOscillatorOptions> implements OscillatorInterface {\n\n\tname = \"OmniOscillator\";\n\n\t/**\n\t *  The frequency control.\n\t */\n\treadonly frequency: Signal<Frequency> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"frequency\",\n\t});\n\n\t/**\n\t *  The detune control.\n\t */\n\treadonly detune: Signal<Cents> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"cents\",\n\t});\n\n\t/**\n\t * The oscillator that can switch types\n\t */\n\tprivate _oscillator!: AnyOscillator;\n\n\t/**\n\t *  the type of the oscillator source\n\t */\n\tprivate _sourceType!: OmniOscSourceType;\n\n\tconstructor(options?: Partial<ConditionalOptions<OscType>>);\n\tconstructor(frequency?: Frequency, type?: OmniOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\n\t\t// // set the oscillator\n\t\t// this.type = options.type;\n\t\t// set the options\n\t\tthis.set<Oscillator>(options);\n\t}\n\n\tstatic getDefaults(): OmniOscillatorOptions {\n\t\treturn Oscillator.getDefaults();\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._oscillator.start(time);\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\trestart(time?: Time): this {\n\t\tthis._oscillator.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n\t * when it's not.\n\t * @example\n\t * omniOsc.type = \"pwm\";\n\t * //modulationFrequency is parameter which is available\n\t * //only when the type is \"pwm\".\n\t * omniOsc.modulationFrequency.value = 0.5;\n\t * @example\n\t * //an square wave frequency modulated by a sawtooth\n\t * omniOsc.type = \"fmsquare\";\n\t * omniOsc.modulationType = \"sawtooth\";\n\t */\n\tget type(): OmniOscillatorType {\n\t\tlet prefix = \"\";\n\t\tif ([\"am\", \"fm\", \"fat\"].some(p => this._sourceType === p)) {\n\t\t\tprefix = this._sourceType;\n\t\t}\n\t\treturn prefix + this._oscillator.type;\n\t}\n\tset type(type) {\n\t\tif (type.substr(0, 2) === \"fm\") {\n\t\t\tthis._createNewOscillator(\"fm\");\n\t\t\tthis._oscillator = this._oscillator as FMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2);\n\t\t} else if (type.substr(0, 2) === \"am\") {\n\t\t\tthis._createNewOscillator(\"am\");\n\t\t\tthis._oscillator = this._oscillator as AMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2);\n\t\t} else if (type.substr(0, 3) === \"fat\") {\n\t\t\tthis._createNewOscillator(\"fat\");\n\t\t\tthis._oscillator = this._oscillator as FatOscillator;\n\t\t\tthis._oscillator.type = type.substr(3);\n\t\t} else if (type === \"pwm\") {\n\t\t\tthis._createNewOscillator(\"pwm\");\n\t\t\tthis._oscillator = this._oscillator as PWMOscillator;\n\t\t} else if (type === \"pulse\") {\n\t\t\tthis._createNewOscillator(\"pulse\");\n\t\t} else {\n\t\t\tthis._createNewOscillator(\"oscillator\");\n\t\t\tthis._oscillator = this._oscillator as Oscillator;\n\t\t\tthis._oscillator.type = type;\n\t\t}\n\t}\n\n\t/**\n\t * The partials of the waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillator.partials;\n\t}\n\tset partials(partials) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partials = partials;\n\t\t}\n\t}\n\n\t/**\n\t * The partial count of the oscillator. This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * @example\n\t * //set the maximum number of partials\n\t * osc.partialCount = 0;\n\t */\n\tget partialCount(): number {\n\t\treturn this._oscillator.partialCount;\n\t}\n\tset partialCount(partialCount) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partialCount = partialCount;\n\t\t}\n\t}\n\n\t/**\n\t * Set the parameters at once. Either pass in an\n\t * object mapping parameters to values, or to set a\n\t * single parameter, by passing in a string and value.\n\t * The last argument is an optional ramp time which\n\t * will ramp any signal values to their destination value\n\t * over the duration of the rampTime.\n\t * @param  params\n\t * @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : \"highpass\"\n\t * });\n\t */\n\tset<Osc extends AnyOscillator = OscType>(props: Partial<ConditionalOptions<Osc>>): this {\n\t\t// make sure the type is set first\n\t\tif (Reflect.has(props, \"type\") && props.type) {\n\t\t\tthis.type = props.type;\n\t\t\t// delete props.type;\n\t\t}\n\t\t// then set the rest\n\t\tsuper.set(props);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the object's attributes. Given no arguments get\n\t *  will return all available object properties and their corresponding\n\t *  values. Pass in a single attribute to retrieve or an array\n\t *  of attributes. The attribute strings can also include a \".\"\n\t *  to access deeper properties.\n\t */\n\tget<Osc extends AnyOscillator = OscType>(): ConditionalOptions<Osc> {\n\t\tconst options = this._oscillator.get();\n\t\toptions.type = this.type;\n\t\treturn options as ConditionalOptions<Osc>;\n\t}\n\n\t/**\n\t *  connect the oscillator to the frequency and detune signals\n\t */\n\tprivate _createNewOscillator(oscType: OmniOscSourceType): void {\n\t\tif (oscType !== this._sourceType) {\n\t\t\tthis._sourceType = oscType;\n\t\t\tconst oscConstructor = OmniOscillatorSourceMap[oscType];\n\t\t\t// short delay to avoid clicks on the change\n\t\t\tconst now = this.now();\n\t\t\tif (this._oscillator) {\n\t\t\t\tconst oldOsc = this._oscillator;\n\t\t\t\toldOsc.stop(now);\n\t\t\t\t// dispose the old one\n\t\t\t\tthis.context.setTimeout(() => oldOsc.dispose(), this.blockTime);\n\t\t\t}\n\t\t\tthis._oscillator = new oscConstructor({\n\t\t\t\t// @ts-ignore\n\t\t\t\tcontext : this.context,\n\t\t\t});\n\t\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\t\tthis.detune.connect(this._oscillator.detune);\n\t\t\tthis._oscillator.connect(this.output);\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._oscillator.start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._oscillator.phase;\n\t}\n\tset phase(phase) {\n\t\tthis._oscillator.phase = phase;\n\t}\n\n\t/**\n\t * The source type of the oscillator.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"fmsquare\");\n\t * omniOsc.sourceType // 'fm'\n\t */\n\tget sourceType(): OmniOscSourceType {\n\t\treturn this._sourceType;\n\t}\n\tset sourceType(sType) {\n\t\t// the basetype defaults to sine\n\t\tlet baseType = \"sine\";\n\t\tif (this._oscillator.type !== \"pwm\" && this._oscillator.type !== \"pulse\") {\n\t\t\tbaseType = this._oscillator.type;\n\t\t}\n\n\t\t// set the type\n\t\tif (sType === \"fm\") {\n\t\t\tthis.type = \"fm\" + baseType;\n\t\t} else if (sType === \"am\") {\n\t\t\tthis.type = \"am\" + baseType;\n\t\t} else if (sType === \"fat\") {\n\t\t\tthis.type = \"fat\" + baseType;\n\t\t} else if (sType === \"oscillator\") {\n\t\t\tthis.type = baseType;\n\t\t} else if (sType === \"pulse\") {\n\t\t\tthis.type = \"pulse\";\n\t\t} else if (sType === \"pwm\") {\n\t\t\tthis.type = \"pwm\";\n\t\t}\n\t}\n\n\tprivate _getOscType<SourceType extends OmniOscSourceType>(\n\t\tosc: AnyOscillator,\n\t\tsourceType: SourceType,\n\t): osc is OmniOscillatorSource[SourceType] {\n\t\treturn osc instanceof OmniOscillatorSourceMap[sourceType];\n\t}\n\n\t/**\n\t * The base type of the oscillator.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"fmsquare4\");\n\t * omniOsc.sourceType // 'fm'\n\t * omniOsc.baseType //'square'\n\t * omniOsc.partialCount //4\n\t */\n\tget baseType(): ToneOscillatorBaseType {\n\t\treturn this._oscillator.baseType;\n\t}\n\tset baseType(baseType) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") &&\n\t\t\t!this._getOscType(this._oscillator, \"pwm\") &&\n\t\t\tbaseType !== \"pulse\" && baseType !== \"pwm\") {\n\t\t\tthis._oscillator.baseType = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * The width of the oscillator when sourceType === \"pulse\".\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"pulse\");\n\t * //can access the width attribute only if type === \"pulse\"\n\t * omniOsc.width.value = 0.2;\n\t */\n\tget width(): IsPulseOscillator<OscType, Signal<AudioRange>> {\n\t\tif (this._getOscType(this._oscillator, \"pulse\")) {\n\t\t\treturn this._oscillator.width as IsPulseOscillator<OscType, Signal<AudioRange>> ;\n\t\t} else {\n\t\t\treturn undefined as IsPulseOscillator<OscType, Signal<AudioRange>> ;\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators, when sourceType === \"fat\".\n\t */\n\tget count(): IsFatOscillator<OscType, number> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.count as IsFatOscillator<OscType, number>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, number>;\n\t\t}\n\t}\n\tset count(count) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(count)) {\n\t\t\tthis._oscillator.count = count;\n\t\t}\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents. See Tone.FatOscillator\n\t * for more info.\n\t */\n\tget spread(): IsFatOscillator<OscType, Cents> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.spread as IsFatOscillator<OscType, Cents>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, Cents>;\n\t\t}\n\t}\n\tset spread(spread) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(spread)) {\n\t\t\tthis._oscillator.spread = spread;\n\t\t}\n\t}\n\n\t/**\n\t * The type of the modulator oscillator. Only if the oscillator\n\t * is set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\n\t * for more info.\n\t */\n\tget modulationType(): IsAmOrFmOscillator<OscType, ToneOscillatorType> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.modulationType as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t}\n\t}\n\tset modulationType(mType) {\n\t\tif ((this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) && isString(mType)) {\n\t\t\tthis._oscillator.modulationType = mType;\n\t\t}\n\t}\n\n\t/**\n\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t * See Tone.FMOscillator for more info.\n\t */\n\tget modulationIndex(): IsFMOscillator<OscType, Signal<Positive>> {\n\t\tif (this._getOscType(this._oscillator, \"fm\")) {\n\t\t\treturn this._oscillator.modulationIndex as IsFMOscillator<OscType, Signal<Positive>>;\n\t\t} else {\n\t\t\treturn undefined as IsFMOscillator<OscType, Signal<Positive>>;\n\t\t}\n\t}\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n\t *  for more info.\n\t */\n\tget harmonicity(): IsAmOrFmOscillator<OscType, Signal<Positive>> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.harmonicity as IsAmOrFmOscillator<OscType, Signal<Positive>>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, Signal<Positive>>;\n\t\t}\n\t}\n\n\t/**\n\t * The modulationFrequency Signal of the oscillator\n\t * (only if the oscillator type is set to pwm). See\n\t * Tone.PWMOscillator for more info.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"pwm\");\n\t * //can access the modulationFrequency attribute only if type === \"pwm\"\n\t * omniOsc.modulationFrequency.value = 0.2;\n\t */\n\tget modulationFrequency(): IsPWMOscillator<OscType, Signal<Frequency>> {\n\t\tif (this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\treturn this._oscillator.modulationFrequency as IsPWMOscillator<OscType, Signal<Frequency>>;\n\t\t} else {\n\t\t\treturn undefined as IsPWMOscillator<OscType, Signal<Frequency>>;\n\t\t}\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis._oscillator.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n *  @class AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].\n *         See Tone.GainToAudio.\n *\n *  @extends {Tone.SignalBase}\n *  @constructor\n *  @example\n *  var a2g = new AudioToGain();\n */\nexport class AudioToGain extends SignalOperator<ToneAudioNodeOptions> {\n\n\tname = \"AudioToGain\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => (x + 1) / 2,\n\t});\n\tprotected _internalChannels = [this._norm];\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The GainRange output [0, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Source, SourceOptions } from \"../source/Source\";\nimport { ToneBufferSource } from \"./buffer/BufferSource\";\n\ntype NoiseType = \"white\" | \"brown\" | \"pink\";\n\ninterface NoiseOptions extends SourceOptions {\n\ttype: NoiseType;\n\tplaybackRate: Positive;\n}\n\n/**\n * Noise is a noise generator. It uses looped noise buffers to save on performance.\n * Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n *\n * @param type the noise type (white|pink|brown)\n * @example\n * //initialize the noise and start\n * var noise = new Noise(\"pink\").start();\n *\n * //make an autofilter to shape the noise\n * var autoFilter = new Tone.AutoFilter({\n * \t\"frequency\" : \"8m\",\n * \t\"min\" : 800,\n * \t\"max\" : 15000\n * }).connect(Tone.Master);\n *\n * //connect the noise\n * noise.connect(autoFilter);\n * //start the autofilter LFO\n * autoFilter.start()\n */\nexport class Noise extends Source<NoiseOptions> {\n\n\tname = \"Noise\";\n\n\t/**\n\t * Private reference to the source\n\t */\n\tprivate _source: ToneBufferSource | null = null;\n\n\t/**\n\t * private reference to the type\n\t */\n\tprivate _type!: NoiseType;\n\n\t/**\n\t *  The playback rate of the noise. Affects\n\t *  the \"frequency\" of the noise.\n\t */\n\tprivate _playbackRate: Positive;\n\n\tconstructor(options?: NoiseType | Partial<NoiseOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]));\n\t\tconst options = optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]);\n\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.type = options.type;\n\t}\n\n\tstatic getDefaults(): NoiseOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tplaybackRate: 1,\n\t\t\ttype: \"white\" as NoiseType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n\t * @example\n\t * noise.type = \"white\";\n\t */\n\tget type(): NoiseType {\n\t\treturn this._type;\n\t}\n\tset type(type: NoiseType) {\n\t\tthis.assert(type in _noiseBuffers, \"Noise: invalid type: \" + type);\n\t\tif (this._type !== type) {\n\t\t\tthis._type = type;\n\t\t\t// if it's playing, stop and restart it\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tconst now = this.now();\n\t\t\t\tthis._stop(now);\n\t\t\t\tthis._start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  The playback rate of the noise. Affects\n\t *  the \"frequency\" of the noise.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate: Positive) {\n\t\tthis._playbackRate = rate;\n\t\tif (this._source) {\n\t\t\tthis._source.playbackRate.value = rate;\n\t\t}\n\t}\n\n\t/**\n\t *  internal start method\n\t */\n\tprotected _start(time: Time): void {\n\t\tconst buffer = _noiseBuffers[this._type];\n\t\tthis._source = new ToneBufferSource(buffer).connect(this.output);\n\t\tthis._source.loop = true;\n\t\tthis._source.playbackRate.value = this._playbackRate;\n\t\tthis._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t}\n\n\t/**\n\t *  internal stop method\n\t *\n\t *  @param {Time} time\n\t *  @private\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tif (this._source) {\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._source = null;\n\t\t}\n\t}\n\n\t/**\n\t * Restarts the noise.\n\t * @param  time When to restart the noise.\n\t */\n\trestart(time?: Time): this {\n\t\t// TODO could be optimized by cancelling the buffer source 'stop'\n\t\t// stop and restart\n\t\tthis._stop(time);\n\t\tthis._start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._source) {\n\t\t\tthis._source.disconnect();\n\t\t}\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// THE NOISE BUFFERS\n///////////////////////////////////////////////////////////////////////////\n\n// Noise buffer stats\nconst BUFFER_LENGTH = 44100 * 5;\nconst NUM_CHANNELS = 2;\n\n/**\n * The cached noise buffers\n */\ninterface NoiseCache {\n\t[key: string]: ToneAudioBuffer | null;\n}\n\n/**\n * Cache the noise buffers\n */\nconst _noiseCache: NoiseCache = {\n\tbrown: null,\n\tpink: null,\n\twhite: null,\n};\n\n/**\n * The noise arrays. Generated on initialization.\n * borrowed heavily from https://github.com/zacharydenton/noise.js\n * (c) 2013 Zach Denton (MIT)\n */\nconst _noiseBuffers = {\n\tget brown(): ToneAudioBuffer {\n\t\tif (!_noiseCache.brown) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet lastOut = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tchannel[i] = (lastOut + (0.02 * white)) / 1.02;\n\t\t\t\t\tlastOut = channel[i];\n\t\t\t\t\tchannel[i] *= 3.5; // (roughly) compensate for gain\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.brown = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.brown;\n\t},\n\n\tget pink(): ToneAudioBuffer {\n\t\tif (!_noiseCache.pink) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\t// tslint:disable-next-line: one-variable-per-declaration\n\t\t\t\tlet b0, b1, b2, b3, b4, b5, b6;\n\t\t\t\tb0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tb0 = 0.99886 * b0 + white * 0.0555179;\n\t\t\t\t\tb1 = 0.99332 * b1 + white * 0.0750759;\n\t\t\t\t\tb2 = 0.96900 * b2 + white * 0.1538520;\n\t\t\t\t\tb3 = 0.86650 * b3 + white * 0.3104856;\n\t\t\t\t\tb4 = 0.55000 * b4 + white * 0.5329522;\n\t\t\t\t\tb5 = -0.7616 * b5 - white * 0.0168980;\n\t\t\t\t\tchannel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t\t\t\t\tchannel[i] *= 0.11; // (roughly) compensate for gain\n\t\t\t\t\tb6 = white * 0.115926;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.pink = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.pink;\n\t},\n\n\tget white(): ToneAudioBuffer {\n\t\tif (!_noiseCache.white) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tchannel[i] = Math.random() * 2 - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.white = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.white;\n\t},\n};\n","export { Noise } from \"./Noise\";\nexport { Oscillator } from \"./oscillator/Oscillator\";\nexport { AMOscillator } from \"./oscillator/AMOscillator\";\nexport { FMOscillator } from \"./oscillator/FMOscillator\";\nexport { PulseOscillator } from \"./oscillator/PulseOscillator\";\nexport { FatOscillator } from \"./oscillator/FatOscillator\";\nexport { PWMOscillator } from \"./oscillator/PWMOscillator\";\nexport { OmniOscillator } from \"./oscillator/OmniOscillator\";\nexport { ToneOscillatorNode } from \"./oscillator/OscillatorNode\";\nexport { ToneBufferSource } from \"./buffer/BufferSource\";\n","import { Context } from \"../context/Context\";\nimport { Ticks, TicksClass } from \"../type/Ticks\";\nimport { TransportEvent, TransportEventOptions } from \"./TransportEvent\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\ninterface TransportRepeatEventOptions extends TransportEventOptions {\n\tinterval: Ticks;\n\tduration: Ticks;\n}\n\n/**\n * TransportRepeatEvent is an internal class used by Tone.Transport\n * to schedule repeat events. This class should not be instantiated directly.\n */\nexport class TransportRepeatEvent extends TransportEvent {\n\n\t/**\n\t * When the event should stop repeating\n\t */\n\tprivate duration: Ticks;\n\n\t/**\n\t * The interval of the repeated event\n\t */\n\tprivate _interval: Ticks;\n\n\t/**\n\t * The ID of the current timeline event\n\t */\n\tprivate _currentId: number = -1;\n\n\t/**\n\t * The ID of the next timeline event\n\t */\n\tprivate _nextId: number = -1;\n\n\t/**\n\t * The time of the next event\n\t */\n\tprivate _nextTick = this.time;\n\n\t/**\n\t * a reference to the bound start method\n\t */\n\tprivate _boundRestart = this._restart.bind(this);\n\n\t/**\n\t * The audio context belonging to this event\n\t */\n\tprotected context: Context;\n\n\tconstructor(transport: Transport, opts: Partial<TransportRepeatEventOptions>) {\n\n\t\tsuper(transport, opts);\n\n\t\tconst options = Object.assign(TransportRepeatEvent.getDefaults(), opts);\n\n\t\tthis.duration = Ticks(options.duration).valueOf();\n\t\tthis._interval = Ticks(options.interval).valueOf();\n\t\tthis._nextTick = options.time;\n\t\tthis.transport.on(\"start\", this._boundRestart);\n\t\tthis.transport.on(\"loopStart\", this._boundRestart);\n\t\tthis.context = this.transport.context;\n\t\tthis._restart();\n\t}\n\n\tstatic getDefaults(): TransportRepeatEventOptions {\n\t\treturn Object.assign({}, TransportEvent.getDefaults(), {\n\t\t\tduration: Infinity,\n\t\t\tinterval: 1,\n\t\t\tonce: false,\n\t\t});\n\t}\n\n\t/**\n\t * Invoke the callback. Returns the tick time which\n\t * the next event should be scheduled at.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\t// create more events if necessary\n\t\tthis._createEvents(time);\n\t\t// call the super class\n\t\tsuper.invoke(time);\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _createEvents(time: Seconds): void {\n\t\t// schedule the next event\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n\t\t\tthis._nextTick += this._interval;\n\t\t\tthis._currentId = this._nextId;\n\t\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\t}\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _restart(time?: Time): void {\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis._nextTick = this.time;\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks > this.time) {\n\t\t\tthis._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n\t\t}\n\t\tthis._currentId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\tthis._nextTick += this._interval;\n\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis.transport.off(\"start\", this._boundRestart);\n\t\tthis.transport.off(\"loopStart\", this._boundRestart);\n\t\treturn this;\n\t}\n}\n","import { Time, TimeClass } from \"../../core/type/Time\";\nimport { PlaybackState } from \"../../core/util/StateTimeline\";\nimport { Signal } from \"../../signal/Signal\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\nimport { Gain } from \"../context/Gain\";\nimport { Param } from \"../context/Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { readOnly, writable } from \"../util/Interface\";\nimport { IntervalTimeline } from \"../util/IntervalTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isArray, isDefined } from \"../util/TypeCheck\";\nimport { Clock } from \"./Clock\";\nimport { TransportEvent } from \"./TransportEvent\";\nimport { TransportRepeatEvent } from \"./TransportRepeatEvent\";\n\ninterface TransportOptions extends ToneWithContextOptions {\n\tbpm: BPM;\n\tswing: NormalRange;\n\tswingSubdivision: Subdivision;\n\ttimeSignature: number;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tppq: number;\n}\n\ntype TransportEventNames = \"start\" | \"stop\" | \"pause\" | \"loop\" | \"loopEnd\" | \"loopStart\";\n\ninterface SyncedSignalEvent {\n\tsignal: Signal;\n\tinitial: number;\n\tratio: Gain;\n}\n\ntype TransportCallback = (time: Seconds) => void;\n\n/**\n * Transport for timing musical events.\n * Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n * Transport timing events pass in the exact time of the scheduled event\n * in the argument of the callback function. Pass that time value to the object\n * you're scheduling. <br><br>\n * A single transport is created for you when the library is initialized.\n * <br><br>\n * The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n * called with the time of that event as the argument.\n *\n * @example\n * //repeated event every 8th note\n * Transport.scheduleRepeat(function(time){\n * \t//do something with the time\n * }, \"8n\");\n * @example\n * //schedule an event on the 16th measure\n * Transport.schedule(function(time){\n * \t//do something with the time\n * }, \"16:0:0\");\n */\nexport class Transport extends ToneWithContext<TransportOptions> implements Emitter<TransportEventNames> {\n\n\tname = \"Transport\";\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tLOOPING\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * \tIf the transport loops or not.\n\t */\n\tloop: boolean = false;\n\n\t/**\n\t * \tThe loop start position in ticks\n\t */\n\tprivate _loopStart: Ticks = 0;\n\n\t/**\n\t * \tThe loop end position in ticks\n\t */\n\tprivate _loopEnd: Ticks = 0;\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tCLOCK/TEMPO\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Pulses per quarter is the number of ticks per quarter note.\n\t */\n\tprivate _ppq: number;\n\n\t/**\n\t *  watches the main oscillator for timing ticks\n\t *  initially starts at 120bpm\n\t */\n\tprivate _clock: Clock<BPM>;\n\n\t/**\n\t * The Beats Per Minute of the Transport.\n\t * @example\n\t * Transport.bpm.value = 80;\n\t * //ramp the bpm to 120 over 10 seconds\n\t * Transport.bpm.rampTo(120, 10);\n\t */\n\tbpm: Param<BPM>;\n\n\t/**\n\t *  The time signature, or more accurately the numerator\n\t *  of the time signature over a denominator of 4.\n\t */\n\tprivate _timeSignature: number;\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tTIMELINE EVENTS\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  All the events in an object to keep track by ID\n\t */\n\tprivate _scheduledEvents = {};\n\n\t/**\n\t * \tThe scheduled events.\n\t */\n\tprivate _timeline: Timeline<TransportEvent> = new Timeline();\n\n\t/**\n\t *  Repeated events\n\t */\n\tprivate _repeatedEvents: IntervalTimeline = new IntervalTimeline();\n\n\t/**\n\t *  All of the synced Signals\n\t */\n\tprivate _syncedSignals: SyncedSignalEvent[] = [];\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tSWING\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The subdivision of the swing\n\t */\n\tprivate _swingTicks: Ticks;\n\n\t/**\n\t *  The swing amount\n\t */\n\tprivate _swingAmount: NormalRange = 0;\n\n\tconstructor(options?: Partial<TransportOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Transport.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Transport.getDefaults(), arguments);\n\n\t\t// CLOCK/TEMPO\n\t\tthis._ppq = options.ppq;\n\t\tthis._clock = new Clock({\n\t\t\tcallback : this._processTick.bind(this),\n\t\t\tcontext: this.context,\n\t\t\tfrequency : 0,\n\t\t\tunits: \"bpm\",\n\t\t});\n\t\tthis._bindClockEvents();\n\t\tthis.bpm = this._clock.frequency;\n\t\tthis._clock.frequency.multiplier = options.ppq;\n\t\tthis.bpm.value = options.bpm;\n\t\treadOnly(this, \"bpm\");\n\t\tthis._timeSignature = options.timeSignature;\n\n\t\t// SWING\n\t\tthis._swingTicks = options.ppq / 2; // 8n\n\t}\n\n\tstatic getDefaults(): TransportOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tbpm: 120,\n\t\t\tloopEnd: \"4m\" as Subdivision,\n\t\t\tloopStart: 0,\n\t\t\tppq: 192,\n\t\t\tswing: 0,\n\t\t\tswingSubdivision: \"8n\" as Subdivision,\n\t\t\ttimeSignature: 4,\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tTICKS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  called on every tick\n\t *  @param  tickTime clock relative tick time\n\t *  @private\n\t */\n\tprivate _processTick(tickTime: Seconds, ticks: Ticks): void {\n\t\t// handle swing\n\t\tif (this._swingAmount > 0 &&\n\t\t\tticks % this._ppq !== 0 && // not on a downbeat\n\t\t\tticks % (this._swingTicks * 2) !== 0) {\n\t\t\t// add some swing\n\t\t\tconst progress = (ticks % (this._swingTicks * 2)) / (this._swingTicks * 2);\n\t\t\tconst amount = Math.sin((progress) * Math.PI) * this._swingAmount;\n\t\t\ttickTime += new TicksClass(this.context, this._swingTicks * 2 / 3).toSeconds() * amount;\n\t\t}\n\t\t// do the loop test\n\t\tif (this.loop) {\n\t\t\tif (ticks >= this._loopEnd) {\n\t\t\t\tthis.emit(\"loopEnd\", tickTime);\n\t\t\t\tthis._clock.setTicksAtTime(this._loopStart, tickTime);\n\t\t\t\tticks = this._loopStart;\n\t\t\t\tthis.emit(\"loopStart\", tickTime, this._clock.getSecondsAtTime(tickTime));\n\t\t\t\tthis.emit(\"loop\", tickTime);\n\t\t\t}\n\t\t}\n\t\t// invoke the timeline events scheduled on this tick\n\t\tthis._timeline.forEachAtTime(ticks, event => event.invoke(tickTime));\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSCHEDULABLE EVENTS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Schedule an event along the timeline.\n\t * @param callback The callback to be invoked at the time.\n\t * @param time The time to invoke the callback at.\n\t * @return The id of the event which can be used for canceling the event.\n\t * @example\n\t * //trigger the callback when the Transport reaches the desired time\n\t * Transport.schedule(function(time){\n\t * \tenvelope.triggerAttack(time);\n\t * }, \"128i\");\n\t */\n\tschedule(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\ttime : new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Schedule a repeated event along the timeline. The event will fire\n\t * at the `interval` starting at the `startTime` and for the specified\n\t * `duration`.\n\t * @param  callback   The callback to invoke.\n\t * @param  interval   The duration between successive callbacks. Must be a positive number.\n\t * @param  startTime  When along the timeline the events should start being invoked.\n\t * @param  duration How long the event should repeat.\n\t * @return  The ID of the scheduled event. Use this to cancel the event.\n\t * @example\n\t * //a callback invoked every eighth note after the first measure\n\t * Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t */\n\tscheduleRepeat(\n\t\tcallback: TransportCallback,\n\t\tinterval: Time,\n\t\tstartTime?: TransportTime | TransportTimeClass,\n\t\tduration: Time = Infinity,\n\t): number {\n\t\tconst event = new TransportRepeatEvent(this, {\n\t\t\tcallback,\n\t\t\tduration : new TimeClass(this.context, duration).toTicks(),\n\t\t\tinterval: new TimeClass(this.context, interval).toTicks(),\n\t\t\ttime : new TransportTimeClass(this.context, startTime).toTicks(),\n\t\t});\n\t\t// kick it off if the Transport is started\n\t\t// @ts-ignore\n\t\treturn this._addEvent(event, this._repeatedEvents);\n\t}\n\n\t/**\n\t *  Schedule an event that will be removed after it is invoked.\n\t *  @param callback The callback to invoke once.\n\t *  @param time The time the callback should be invoked.\n\t *  @returns The ID of the scheduled event.\n\t */\n\tscheduleOnce(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\tonce : true,\n\t\t\ttime : new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Clear the passed in event id from the timeline\n\t * @param eventId The id of the event.\n\t */\n\tclear(eventId: number): this {\n\t\tif (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t\t\tconst item = this._scheduledEvents[eventId.toString()];\n\t\t\titem.timeline.remove(item.event);\n\t\t\titem.event.dispose();\n\t\t\tdelete this._scheduledEvents[eventId.toString()];\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an event to the correct timeline. Keep track of the\n\t * timeline it was added to.\n\t * @returns the event id which was just added\n\t */\n\tprivate _addEvent(event: TransportEvent, timeline: Timeline<TransportEvent>): number {\n\t\tthis._scheduledEvents[event.id.toString()] = {\n\t\t\tevent,\n\t\t\ttimeline,\n\t\t};\n\t\ttimeline.add(event);\n\t\treturn event.id;\n\t}\n\n\t/**\n\t * Remove scheduled events from the timeline after\n\t * the given time. Repeated events will be removed\n\t * if their startTime is after the given time\n\t * @param after Clear all events after this time.\n\t */\n\tcancel(after: TransportTime = 0): this {\n\t\tconst computedAfter = this.toTicks(after);\n\t\tthis._timeline.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\tthis._repeatedEvents.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSTART/STOP/PAUSE\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Bind start/stop/pause events from the clock and emit them.\n\t */\n\tprivate _bindClockEvents(): void {\n\t\tthis._clock.on(\"start\", (time, offset) => {\n\t\t\toffset = new TicksClass(this.context, offset).toSeconds();\n\t\t\tthis.emit(\"start\", time, offset);\n\t\t});\n\n\t\tthis._clock.on(\"stop\", (time) => {\n\t\t\tthis.emit(\"stop\", time);\n\t\t});\n\n\t\tthis._clock.on(\"pause\", (time) => {\n\t\t\tthis.emit(\"pause\", time);\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._clock.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the transport and all sources synced to the transport.\n\t * @param  time The time when the transport should start.\n\t * @param  offset The timeline offset to start the transport.\n\t * @example\n\t * //start the transport in one second starting at beginning of the 5th measure.\n\t * Transport.start(\"+1\", \"4:0:0\");\n\t */\n\tstart(time?: Time, offset?: TransportTime): this {\n\t\tlet offsetTicks;\n\t\tif (isDefined(offset)) {\n\t\t\toffsetTicks = this.toTicks(offset);\n\t\t}\n\t\t// start the clock\n\t\tthis._clock.start(time, offsetTicks);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the transport and all sources synced to the transport.\n\t * @param time The time when the transport should stop.\n\t * @example\n\t * Transport.stop();\n\t */\n\tstop(time?: Time): this {\n\t\tthis._clock.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the transport and all sources synced to the transport.\n\t */\n\tpause(time?: Time): this {\n\t\tthis._clock.pause(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Toggle the current state of the transport. If it is\n\t * started, it will stop it, otherwise it will start the Transport.\n\t * @param  time The time of the event\n\t */\n\ttoggle(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tif (this._clock.getStateAtTime(time) !== \"started\") {\n\t\t\tthis.start(time);\n\t\t} else {\n\t\t\tthis.stop(time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSETTERS/GETTERS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * The time signature as just the numerator over 4.\n\t * For example 4/4 would be just 4 and 6/8 would be 3.\n\t * @example\n\t * //common time\n\t * Transport.timeSignature = 4;\n\t * // 7/8\n\t * Transport.timeSignature = [7, 8];\n\t * //this will be reduced to a single number\n\t * Transport.timeSignature; //returns 3.5\n\t */\n\tget timeSignature(): TimeSignature {\n\t\treturn this._timeSignature;\n\t}\n\tset timeSignature(timeSig: TimeSignature) {\n\t\tif (isArray(timeSig)) {\n\t\t\ttimeSig = (timeSig[0] / timeSig[1]) * 4;\n\t\t}\n\t\tthis._timeSignature = timeSig;\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the starting position of the loop.\n\t */\n\tget loopStart(): Time {\n\t\treturn Time(this._loopStart, \"i\").toSeconds();\n\t}\n\tset loopStart(startPosition: Time) {\n\t\tthis._loopStart = this.toTicks(startPosition);\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the ending position of the loop.\n\t */\n\tget loopEnd(): Time {\n\t\treturn Time(this._loopEnd, \"i\").toSeconds();\n\t}\n\tset loopEnd(endPosition: Time) {\n\t\tthis._loopEnd = this.toTicks(endPosition);\n\t}\n\n\t/**\n\t * Set the loop start and stop at the same time.\n\t * @example\n\t * //loop over the first measure\n\t * Transport.setLoopPoints(0, \"1m\");\n\t * Transport.loop = true;\n\t */\n\tsetLoopPoints(startPosition: TransportTime, endPosition: TransportTime): this {\n\t\tthis.loopStart = startPosition;\n\t\tthis.loopEnd = endPosition;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The swing value. Between 0-1 where 1 equal to the note + half the subdivision.\n\t */\n\tget swing(): NormalRange {\n\t\treturn this._swingAmount;\n\t}\n\tset swing(amount: NormalRange) {\n\t\t// scale the values to a normal range\n\t\tthis._swingAmount = amount;\n\t}\n\n\t/**\n\t * Set the subdivision which the swing will be applied to.\n\t * The default value is an 8th note. Value must be less\n\t * than a quarter note.\n\t */\n\tget swingSubdivision(): Subdivision {\n\t\treturn new TicksClass(this.context, this._swingTicks).toNotation();\n\t}\n\tset swingSubdivision(subdivision: Subdivision) {\n\t\tthis._swingTicks = this.toTicks(subdivision);\n\t}\n\n\t/**\n\t *  The Transport's position in Bars:Beats:Sixteenths.\n\t *  Setting the value will jump to that position right away.\n\t */\n\tget position(): BarsBeatsSixteenths | Time {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\treturn new TicksClass(this.context, ticks).toBarsBeatsSixteenths();\n\t}\n\tset position(progress: Time) {\n\t\tconst ticks = this.toTicks(progress);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t *  The Transport's position in seconds\n\t *  Setting the value will jump to that position right away.\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._clock.seconds;\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.frequency.timeToTicks(s, now);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t *  The Transport's loop position as a normalized value. Always\n\t *  returns 0 if the transport if loop is not true.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this.loop) {\n\t\t\tconst now = this.now();\n\t\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\t\treturn (ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t *  The transports current tick position.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this._clock.ticks;\n\t}\n\tset ticks(t: Ticks) {\n\t\tif (this._clock.ticks !== t) {\n\t\t\tconst now = this.now();\n\t\t\t// stop everything synced to the transport\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis.emit(\"stop\", now);\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t\t// restart it with the new time\n\t\t\t\tthis.emit(\"start\", now, this.seconds);\n\t\t\t} else {\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\treturn Math.round(this._clock.getTicksAtTime(time));\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._clock.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t *  Pulses Per Quarter note. This is the smallest resolution\n\t *  the Transport timing supports. This should be set once\n\t *  on initialization and not set again. Changing this value\n\t *  after other objects have been created can cause problems.\n\t */\n\tget PPQ(): number {\n\t\treturn this._clock.frequency.multiplier;\n\t}\n\tset PPQ(ppq: number) {\n\t\tthis._clock.frequency.multiplier = ppq;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSYNCING\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Returns the time aligned to the next subdivision\n\t * of the Transport. If the Transport is not started,\n\t * it will return 0.\n\t * Note: this will not work precisely during tempo ramps.\n\t * @param  subdivision  The subdivision to quantize to\n\t * @return  The context time of the next subdivision.\n\t * @example\n\t * Transport.start(); //the transport must be started\n\t * Transport.nextSubdivision(\"4n\");\n\t */\n\tnextSubdivision(subdivision?: Time): Seconds {\n\t\tsubdivision = this.toTicks(subdivision);\n\t\tif (this.state !== \"started\") {\n\t\t\t// if the transport's not started, return 0\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tconst now = this.now();\n\t\t\t// the remainder of the current ticks and the subdivision\n\t\t\tconst transportPos = this.getTicksAtTime(now);\n\t\t\tconst remainingTicks = subdivision - transportPos % subdivision;\n\t\t\treturn this._clock.nextTickTime(remainingTicks, now);\n\t\t}\n\t}\n\n\t/**\n\t *  Attaches the signal to the tempo control signal so that\n\t *  any changes in the tempo will change the signal in the same\n\t *  ratio.\n\t *\n\t *  @param signal\n\t *  @param ratio Optionally pass in the ratio between the two signals.\n\t * \t\t\t\tOtherwise it will be computed based on their current values.\n\t */\n\tsyncSignal(signal: Signal<any>, ratio?: number): this {\n\t\tif (!ratio) {\n\t\t\t// get the sync ratio\n\t\t\tconst now = this.now();\n\t\t\tif (signal.getValueAtTime(now) !== 0) {\n\t\t\t\tconst bpm = this.bpm.getValueAtTime(now);\n\t\t\t\tconst computedFreq = 1 / (60 / bpm / this.PPQ);\n\t\t\t\tratio = signal.getValueAtTime(now) / computedFreq;\n\t\t\t} else {\n\t\t\t\tratio = 0;\n\t\t\t}\n\t\t}\n\t\tconst ratioSignal = new Gain(ratio);\n\t\t// @ts-ignore\n\t\tthis.bpm.connect(ratioSignal);\n\t\t// @ts-ignore\n\t\tratioSignal.connect(signal._param);\n\t\tthis._syncedSignals.push({\n\t\t\tinitial : signal.value,\n\t\t\tratio : ratioSignal,\n\t\t\tsignal,\n\t\t});\n\t\tsignal.value = 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsyncs a previously synced signal from the transport's control.\n\t *  See Transport.syncSignal.\n\t */\n\tunsyncSignal(signal: Signal<any>): this {\n\t\tfor (let i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t\t\tconst syncedSignal = this._syncedSignals[i];\n\t\t\tif (syncedSignal.signal === signal) {\n\t\t\t\tsyncedSignal.ratio.dispose();\n\t\t\t\tsyncedSignal.signal.value = syncedSignal.initial;\n\t\t\t\tthis._syncedSignals.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tthis._clock.dispose();\n\t\twritable(this, \"bpm\");\n\t\tthis._timeline.dispose();\n\t\tthis._repeatedEvents.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t///////////////////////////////////////////////////////////////////////\n\n\ton!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\tonce!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\toff!: (event: TransportEventNames, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Transport);\n\n///////////////////////////////////////////////////////////////////////////////\n// \tINITIALIZATION\n///////////////////////////////////////////////////////////////////////////////\n\nonContextInit(context => {\n\tcontext.transport = new Transport({ context });\n});\n\nonContextClose(context => {\n\tcontext.transport.dispose();\n});\n","import { Volume } from \"../../component/channel/Volume\";\nimport { connectSeries } from \"../Connect\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { Param } from \"./Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface DestinationOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  A single master output which is connected to the\n *  AudioDestinationNode (aka your speakers).\n *  It provides useful conveniences such as the ability\n *  to set the volume and mute the entire application.\n *  It also gives you the ability to apply master effects to your application.\n *\n *  @example\n * //the audio will go from the oscillator to the speakers\n * oscillator.connect(Destination);\n * //a convenience for connecting to the master output is also provided:\n * oscillator.toMaster();\n * //the above two examples are equivalent.\n */\nexport class Destination extends ToneAudioNode<DestinationOptions> {\n\n\tname = \"Destination\";\n\n\tinput: Volume = new Volume({ context: this.context });\n\toutput: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The volume of the master output.\n\t */\n\tvolume: Param<Decibels> = this.input.volume;\n\t_internalChannels = [this.input, this.output];\n\n\tconstructor(options: Partial<DestinationOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Destination.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Destination.getDefaults(), arguments);\n\n\t\tconnectSeries(this.input, this.output, this.context.rawContext.destination);\n\n\t\tthis.volume.value = options.volume;\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): DestinationOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * Destination.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.input.mute;\n\t}\n\n\tset mute(mute: boolean) {\n\t\tthis.input.mute = mute;\n\t}\n\n\t/**\n\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t *  chained in the master effects chain.\n\t *  @param nodes All arguments will be connected in a row and the Master will be routed through it.\n\t *  @return  {Destination}  this\n\t *  @example\n\t * //some overall compression to keep the levels in check\n\t * var masterCompressor = new Tone.Compressor({\n\t * \t\"threshold\" : -6,\n\t * \t\"ratio\" : 3,\n\t * \t\"attack\" : 0.5,\n\t * \t\"release\" : 0.1\n\t * });\n\t * //give a little boost to the lows\n\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t * //route everything through the filter\n\t * //and compressor before going to the speakers\n\t * Destination.chain(lowBump, masterCompressor);\n\t */\n\tchain(...args: Array<AudioNode | ToneAudioNode>): this {\n\t\tthis.input.disconnect();\n\t\targs.unshift(this.input);\n\t\targs.push(this.output);\n\t\tconnectSeries(...args);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tINITIALIZATION\n///////////////////////////////////////////////////////////////////////////\n\nonContextInit(context => {\n\tcontext.destination = new Destination({ context });\n});\n\nonContextClose(context => {\n\tcontext.destination.dispose();\n});\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\n\ninterface DrawEvent extends TimelineEvent {\n\tcallback: () => void;\n}\n\n/**\n * Draw is useful for synchronizing visuals and audio events.\n * Callbacks from Tone.Transport or any of the Tone.Event classes\n * always happen _before_ the scheduled time and are not synchronized\n * to the animation frame so they are not good for triggering tightly\n * synchronized visuals and sound. Draw makes it easy to schedule\n * callbacks using the AudioContext time and uses requestAnimationFrame.\n * @example\n * Tone.Transport.schedule(function(time){\n * \t//use the time argument to schedule a callback with Draw\n * \tDraw.schedule(function(){\n * \t\t//do drawing or DOM manipulation here\n * \t}, time)\n * }, \"+0.5\")\n */\nexport class Draw extends ToneWithContext<ToneWithContextOptions> {\n\n\tname = \"Draw\";\n\n\t/**\n\t *  The duration after which events are not invoked.\n\t */\n\texpiration: Seconds = 0.25;\n\n\t/**\n\t *  The amount of time before the scheduled time\n\t *  that the callback can be invoked. Default is\n\t *  half the time of an animation frame (0.008 seconds).\n\t */\n\tanticipation: Seconds = 0.008;\n\n\t/**\n\t *  All of the events.\n\t */\n\tprivate _events: Timeline<DrawEvent> = new Timeline();\n\n\t/**\n\t *  The draw loop\n\t */\n\tprivate _boundDrawLoop = this._drawLoop.bind(this);\n\n\t/**\n\t * The animation frame id\n\t */\n\tprivate _animationFrame: number = -1;\n\n\t/**\n\t *  Schedule a function at the given time to be invoked\n\t *  on the nearest animation frame.\n\t *  @param  callback  Callback is invoked at the given time.\n\t *  @param  time      The time relative to the AudioContext time to invoke the callback.\n\t */\n\tschedule(callback: () => void, time: Time): this {\n\t\tthis._events.add({\n\t\t\tcallback,\n\t\t\ttime : this.toSeconds(time),\n\t\t});\n\t\t// start the draw loop on the first event\n\t\tif (this._events.length === 1) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel events scheduled after the given time\n\t *  @param  after  Time after which scheduled events will be removed from the scheduling timeline.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._events.cancel(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The draw loop\n\t */\n\tprivate _drawLoop(): void {\n\t\tconst now = this.context.currentTime;\n\t\twhile (this._events.length && (this._events.peek() as DrawEvent).time - this.anticipation <= now) {\n\t\t\tconst event = this._events.shift();\n\t\t\tif (event && now - event.time <= this.expiration) {\n\t\t\t\tevent.callback();\n\t\t\t}\n\t\t}\n\t\tif (this._events.length > 0) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tthis._events.dispose();\n\t\tcancelAnimationFrame(this._animationFrame);\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../Connect\";\nimport { AutomationEvent, Param, ParamOptions } from \"../context/Param\";\nimport { getContext } from \"../Global\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isUndef } from \"../util/TypeCheck\";\n\ninterface TickAutomationEvent extends AutomationEvent {\n\tticks: number;\n}\n\ninterface TickSignalOptions extends ParamOptions {\n\tvalue: Hertz | BPM;\n\tmultiplier: number;\n}\n\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n *\n * @param value The initial value of the signal\n */\nexport class TickSignal<Type extends Hertz | BPM> extends Param<Type> {\n\n\tname = \"TickSignal\";\n\n\tprotected _events: Timeline<TickAutomationEvent> = new Timeline(Infinity);\n\n\tprivate _sig: ConstantSourceNode = this.context.createConstantSource();\n\n\tprotected _param = this._sig.offset;\n\n\tprivate _multiplier: number = 1;\n\n\tconstructor(options: Partial<TickSignalOptions>);\n\tconstructor(value?: number);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis._sig = this.context.createConstantSource();\n\t\tthis._sig.start(0);\n\t\tthis._param = this._sig.offset;\n\n\t\t// set the multiplier\n\t\tthis.multiplier = options.multiplier;\n\n\t\t// clear the ticks from the beginning\n\t\tthis.cancelScheduledValues(0);\n\t\t// set an initial event\n\t\tthis._events.add({\n\t\t\tticks: 0,\n\t\t\ttime : 0,\n\t\t\ttype : \"setValue\",\n\t\t\tvalue: this._fromType(options.value as Type),\n\t\t});\n\t\tthis.setValueAtTime(options.value as Type, 0);\n\t}\n\n\tstatic getDefaults(): TickSignalOptions {\n\t\treturn Object.assign(Param.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tparam: getContext().createConstantSource().offset,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tsetTargetAtTime(value: Type, time: Time, constant: number): this {\n\t\t// approximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tthis.setRampPoint(time);\n\t\tconst computedValue = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\tconst segments = Math.round(Math.max(1 / constant, 1));\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = constant * i + time;\n\t\t\tconst rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.setValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.linearRampToValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: Type, time: Time): this {\n\t\t// aproximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tconst computedVal = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\t// approx 10 segments per second\n\t\tconst segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n\t\tconst segmentDur = ((time - prevEvent.time) / segments);\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = segmentDur * i + prevEvent.time;\n\t\t\tconst rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tprivate _getTicksUntilEvent(event: TickAutomationEvent | null, time: number): Ticks {\n\t\tif (event === null) {\n\t\t\tevent = {\n\t\t\t\tticks : 0,\n\t\t\t\ttime : 0,\n\t\t\t\ttype: \"setValue\",\n\t\t\t\tvalue: 0,\n\t\t\t};\n\t\t} else if (isUndef(event.ticks)) {\n\t\t\tconst previousEvent = this._events.previousEvent(event);\n\t\t\tevent.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n\t\t}\n\t\tconst val0 = this._fromType(this.getValueAtTime(event.time));\n\t\tlet val1 = this._fromType(this.getValueAtTime(time));\n\t\t// if it's right on the line, take the previous value\n\t\tconst onTheLineEvent = this._events.get(time);\n\t\tif (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === \"setValue\") {\n\t\t\tval1 = this._fromType(this.getValueAtTime(time - this.sampleTime));\n\t\t}\n\t\treturn 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst event = this._events.get(computedTime);\n\t\treturn Math.max(this._getTicksUntilEvent(event, computedTime), 0);\n\t}\n\n\t/**\n\t * Return the elapsed time of the number of ticks from the given time\n\t * @param ticks The number of ticks to calculate\n\t * @param  time The time to get the next tick from\n\t * @return The duration of the number of ticks from the given time in seconds\n\t */\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst currentTick = this.getTicksAtTime(time);\n\t\treturn this.getTimeOfTick(currentTick + ticks) - computedTime;\n\t}\n\n\t/**\n\t * Given a tick, returns the time that tick occurs at.\n\t * @return The time that the tick occurs.\n\t */\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\tconst before = this._events.get(tick, \"ticks\");\n\t\tconst after = this._events.getAfter(tick, \"ticks\");\n\t\tif (before && before.ticks === tick) {\n\t\t\treturn before.time;\n\t\t} else if (before && after &&\n\t\t\tafter.type === \"linear\" &&\n\t\t\tbefore.value !== after.value) {\n\t\t\tconst val0 = this._fromType(this.getValueAtTime(before.time));\n\t\t\tconst val1 = this._fromType(this.getValueAtTime(after.time));\n\t\t\tconst delta = (val1 - val0) / (after.time - before.time);\n\t\t\tconst k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n\t\t\tconst sol1 = (-val0 + k) / delta;\n\t\t\tconst sol2 = (-val0 - k) / delta;\n\t\t\treturn (sol1 > 0 ? sol1 : sol2) + before.time;\n\t\t} else if (before) {\n\t\t\tif (before.value === 0) {\n\t\t\t\treturn Infinity;\n\t\t\t} else {\n\t\t\t\treturn before.time + (tick - before.ticks) / before.value;\n\t\t\t}\n\t\t} else {\n\t\t\treturn tick / this._initialValue;\n\t\t}\n\t}\n\n\t/**\n\t * Convert some number of ticks their the duration in seconds accounting\n\t * for any automation curves starting at the given time.\n\t * @param  ticks The number of ticks to convert to seconds.\n\t * @param  when  When along the automation timeline to convert the ticks.\n\t * @return The duration in seconds of the ticks.\n\t */\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this.getDurationOfTicks(ticks, when);\n\t}\n\n\t/**\n\t * The inverse of [ticksToTime](#tickstotime). Convert a duration in\n\t * seconds to the corresponding number of ticks accounting for any\n\t * automation curves starting at the given time.\n\t * @param  duration The time interval to convert to ticks.\n\t * @param  when When along the automation timeline to convert the ticks.\n\t * @return The duration in ticks.\n\t */\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tconst startTicks = this.getTicksAtTime(computedTime);\n\t\tconst endTicks = this.getTicksAtTime(computedTime + computedDuration);\n\t\treturn endTicks - startTicks;\n\t}\n\n\t/**\n\t * Convert from the type when the unit value is BPM\n\t */\n\tprotected _fromType(val: Type): number {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn 1 / (60 / val / this.multiplier);\n\t\t} else {\n\t\t\treturn super._fromType(val);\n\t\t}\n\t}\n\n\t/**\n\t * Special case of type conversion where the units === \"bpm\"\n\t */\n\tprotected _toType(val: number): Type {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn (val / this.multiplier) * 60 as Type;\n\t\t} else {\n\t\t\treturn super._toType(val);\n\t\t}\n\t}\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\t// get and reset the current value with the new multipler\n\t\t// might be necessary to clear all the previous values\n\t\tconst currentVal = this.value;\n\t\tthis._multiplier = m;\n\t\tthis.value = currentVal;\n\t}\n\n\t/**\n\t * Connect the output signal\n\t */\n\tconnect(dstNode, outputNumber = 0, inputNumber = 0): this {\n\t\tconnect(this._sig, dstNode, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline, StateTimelineEvent } from \"../util/StateTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { TickSignal } from \"./TickSignal\";\n\ninterface TickSourceOptions extends ToneWithContextOptions {\n\tfrequency: Frequency;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ninterface TickSourceOffsetEvent {\n\tticks: number;\n\ttime: number;\n\tseconds: number;\n}\n\n/**\n *  Uses [TickSignal](TickSignal) to track elapsed ticks with complex automation curves.\n *\n *  @param frequency The initial frequency that the signal ticks at\n */\nexport class TickSource<Type extends BPM | Hertz> extends ToneWithContext<TickSourceOptions> {\n\n\tname = \"TickSource\";\n\n\t/**\n\t *  The frequency the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<Type>;\n\n\t/**\n\t *  The state timeline\n\t */\n\tprivate _state: StateTimeline = new StateTimeline();\n\n\t/**\n\t * The offset values of the ticks\n\t */\n\tprivate _tickOffset: Timeline<TickSourceOffsetEvent> = new Timeline();\n\n\tconstructor(frequency?: Frequency);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<TickSourceOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis.frequency = new TickSignal({\n\t\t\tcontext: this.context,\n\t\t\tunits: options.units,\n\t\t\tvalue: this.toFrequency(options.frequency),\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\t// set the inital state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\t\t// add the first event\n\t\tthis.setTicksAtTime(0, 0);\n\t}\n\n\tstatic getDefaults(): TickSourceOptions {\n\t\treturn Object.assign({\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\",\n\t\t}, ToneWithContext.getDefaults()) as TickSourceOptions;\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  time    The time the clock should start\n\t *  @param offset The number of ticks to start the source at\n\t */\n\tstart(time: Time, offset?: Ticks): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (isDefined(offset)) {\n\t\t\t\tthis.setTicksAtTime(offset, computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the clock. Stopping the clock resets the tick counter to 0.\n\t * @param time The time when the clock should stop.\n\t */\n\tstop(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// cancel the previous stop\n\t\tif (this._state.getValueAtTime(computedTime) === \"stopped\") {\n\t\t\tconst event = this._state.get(computedTime);\n\t\t\tif (event && event.time > 0) {\n\t\t\t\tthis._tickOffset.cancel(event.time);\n\t\t\t\tthis._state.cancel(event.time);\n\t\t\t}\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis.setTicksAtTime(0, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param time The time when the clock should stop.\n\t */\n\tpause(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel start/stop/pause and setTickAtTime events scheduled after the given time.\n\t *  @param time When to clear the events after\n\t */\n\tcancel(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._state.cancel(time);\n\t\tthis._tickOffset.cancel(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the elapsed ticks at the given time\n\t * @param  time  When to get the tick value\n\t * @return The number of ticks\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", computedTime) as StateTimelineEvent;\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state: \"paused\", time: computedTime};\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedTicks = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, computedTime + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedTicks = offsetEvent.ticks;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedTicks;\n\t}\n\n\t/**\n\t *  The number of times the callback was invoked. Starts counting at 0\n\t *  and increments after the callback was invoked. Returns -1 when stopped.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this.getTicksAtTime(this.now());\n\t}\n\n\tset ticks(t: Ticks) {\n\t\tthis.setTicksAtTime(t, this.now());\n\t}\n\n\t/**\n\t *  The time since ticks=0 that the TickSource has been running. Accounts\n\t *  for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this.getSecondsAtTime(this.now());\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this.frequency.timeToTicks(s, now);\n\t\tthis.setTicksAtTime(ticks, now);\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\ttime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", time) as StateTimelineEvent;\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state : \"paused\", time };\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedSeconds = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, time + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedSeconds = offsetEvent.seconds;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedSeconds += e.time - periodStartTime;\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedSeconds;\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._tickOffset.cancel(time);\n\t\tthis._tickOffset.add({\n\t\t\tseconds : this.frequency.getDurationOfTicks(ticks, time),\n\t\t\tticks,\n\t\t\ttime,\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Returns the scheduled state at the given time.\n\t *  @param  time  The time to query.\n\t *  @example\n\t * source.start(\"+0.1\");\n\t * source.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tgetStateAtTime(time): PlaybackState {\n\t\ttime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the given tick. The second argument\n\t * is when to test before. Since ticks can be set (with setTicksAtTime)\n\t * there may be multiple times for a given tick value.\n\t * @param  ticks The tick number.\n\t * @param  before When to measure the tick value from.\n\t * @return The time of the tick\n\t */\n\tgetTimeOfTick(tick: Ticks, before = this.now()): Seconds {\n\t\tconst offset = this._tickOffset.get(before) as TickSourceOffsetEvent;\n\t\tconst event = this._state.get(before) as StateTimelineEvent;\n\t\tconst startTime = Math.max(offset.time, event.time);\n\t\tconst absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;\n\t\treturn this.frequency.getTimeOfTick(absoluteTicks);\n\t}\n\n\t/**\n\t *  Invoke the callback event at all scheduled ticks between the\n\t *  start time and the end time\n\t *  @param  startTime  The beginning of the search range\n\t *  @param  endTime    The end of the search range\n\t *  @param  callback   The callback to invoke with each tick\n\t */\n\tforEachTickBetween(startTime: Time, endTime: Time, callback: (when: Seconds, ticks: Ticks) => void): this {\n\t\tconst computedStartTime = this.toSeconds(startTime);\n\t\tconst computedEndTime = this.toSeconds(endTime);\n\t\t// only iterate through the sections where it is \"started\"\n\t\tlet lastStateEvent = this._state.get(computedStartTime);\n\t\tthis._state.forEachBetween(computedStartTime, computedEndTime, event => {\n\t\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && event.state !== \"started\") {\n\t\t\t\tthis.forEachTickBetween(Math.max(lastStateEvent.time, computedStartTime), event.time - this.sampleTime, callback);\n\t\t\t}\n\t\t\tlastStateEvent = event;\n\t\t});\n\n\t\tlet error = null;\n\n\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && this._state) {\n\t\t\tconst maxStartTime = Math.max(lastStateEvent.time, computedStartTime);\n\t\t\t// figure out the difference between the frequency ticks and the\n\t\t\tconst startTicks = this.frequency.getTicksAtTime(maxStartTime);\n\t\t\tconst ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);\n\t\t\tconst diff = startTicks - ticksAtStart;\n\t\t\tlet offset = diff % 1;\n\t\t\tif (offset !== 0) {\n\t\t\t\toffset = 1 - offset;\n\t\t\t}\n\t\t\tlet nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);\n\t\t\twhile (nextTickTime < computedEndTime && this._state) {\n\t\t\t\ttry {\n\t\t\t\t\tcallback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\terror = e;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this._state) {\n\t\t\t\t\tnextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tthis._state.dispose();\n\t\tthis._tickOffset.dispose();\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n","import { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\nexport interface DelayOptions extends ToneAudioNodeOptions {\n\tdelayTime: number;\n\tmaxDelay: number;\n}\n\n/**\n *  Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n *  @param delayTime The delay applied to the incoming signal.\n *  @param maxDelay The maximum delay time.\n */\nexport class Delay extends ToneAudioNode<DelayOptions> {\n\n\tname = \"Delay\";\n\n\t/**\n\t * The maximum delay time. This cannot be changed after\n\t * the value is passed into the constructor.\n\t */\n\treadonly maxDelay: Time;\n\n\t/**\n\t *  The amount of time the incoming signal is delayed.\n\t */\n\treadonly delayTime: Param<Time>;\n\n\t/**\n\t * Private reference to the internal DelayNode\n\t */\n\tprivate _delayNode: DelayNode;\n\treadonly input: DelayNode;\n\treadonly output: DelayNode;\n\n\t/**\n\t * The internal channels for channel routing changes\n\t */\n\tprotected _internalChannels: AudioNode[];\n\n\tconstructor(options?: Partial<DelayOptions>)\n\tconstructor(delayTime?: Time, maxDelay?: Time)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]));\n\n\t\tconst options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n\n\t\tthis.maxDelay = Math.max(this.toSeconds(options.maxDelay), this.toSeconds(options.delayTime));\n\n\t\tthis._delayNode = this.input = this.output = this.context.createDelay(options.maxDelay);\n\t\tthis._internalChannels = [this._delayNode];\n\n\t\tthis.delayTime = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._delayNode.delayTime,\n\t\t\tunits : \"time\",\n\t\t\tvalue : options.delayTime,\n\t\t});\n\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): DelayOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdelayTime : 0,\n\t\t\tmaxDelay: 1,\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.disconnect();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { Context } from \"../context/Context\";\n\n/**\n *  Wrapper around the OfflineAudioContext\n *  @param  channels  The number of channels to render\n *  @param  duration  The duration to render in samples\n *  @param sampleRate the sample rate to render at\n */\nexport class OfflineContext extends Context {\n\n\tname = \"OfflineContext\";\n\n\t/**\n\t *  A private reference to the duration\n\t */\n\tprivate readonly _duration: Seconds;\n\n\t/**\n\t *  An artificial clock source\n\t */\n\tprivate _currentTime: Seconds = 0;\n\n\t/**\n\t * Private reference to the OfflineAudioContext.\n\t */\n\tprotected _context!: OfflineAudioContext;\n\n\tconstructor(channels: number | OfflineAudioContext, duration: Seconds, sampleRate: number) {\n\n\t\tsuper({\n\t\t\tclockSource: \"offline\",\n\t\t\tcontext: channels instanceof OfflineAudioContext ?\n\t\t\t\tchannels : new OfflineAudioContext(channels, duration * sampleRate, sampleRate),\n\t\t\tlookAhead: 0,\n\t\t\tupdateInterval: channels instanceof OfflineAudioContext ?\n\t\t\t\t\t128 / channels.sampleRate : 128 / sampleRate,\n\t\t});\n\n\t\tthis._duration = channels instanceof OfflineAudioContext ?\n\t\t\tchannels.length / channels.sampleRate : duration;\n\t}\n\n\t/**\n\t *  Override the now method to point to the internal clock time\n\t */\n\tnow(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t * Same as this.now()\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t *  Render the output of the OfflineContext\n\t */\n\trender(): Promise<AudioBuffer> {\n\t\twhile (this._duration - this._currentTime >= 0) {\n\t\t\t// invoke all the callbacks on that time\n\t\t\tthis.emit(\"tick\");\n\t\t\t// increment the clock in 5ms chunks\n\t\t\tthis._currentTime += 0.005;\n\t\t}\n\n\t\treturn this._context.startRendering();\n\t}\n\n\t/**\n\t *  Close the context\n\t */\n\tclose(): Promise<OfflineContext> {\n\t\treturn Promise.resolve(this);\n\t}\n}\n","import { Context } from \"../context/Context\";\nimport { Tone } from \"../Tone\";\nimport { isDefined, isObject , isString, isUndef } from \"../util/TypeCheck\";\n\nexport type TimeValue = Time | TimeBaseClass<any, any>;\n\n/**\n * The units that the TimeBase can accept. extended by other classes\n */\nexport type TimeBaseUnit = \"s\" | \"n\" | \"t\" | \"m\" | \"i\" | \"hz\" | \"tr\" | \"samples\" | \"number\";\n\nexport interface TypeFunction {\n\tregexp: RegExp;\n\tmethod: (value: string, ...args: string[]) => number;\n}\n\nexport interface TimeExpression<Type extends number> {\n\t[key: string]: {\n\t\tregexp: RegExp;\n\t\tmethod: (value: string, ...args: string[]) => Type;\n\t};\n}\n\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n * @param  val    The time value as a number, string or object\n * @param  units  Unit values\n * @example\n * new TimeBase(4, \"n\")\n * new TimeBase(2, \"t\")\n * new TimeBase(\"2t\")\n * new TimeBase({\"2t\" : 2})\n * new TimeBase(\"2t\") + new TimeBase(\"4n\");\n */\nexport abstract class TimeBaseClass<Type extends number, Unit extends string> extends Tone {\n\n\treadonly context: Context;\n\n\t/**\n\t * The value of the units\n\t */\n\tprotected _val?: TimeValue;\n\n\t/**\n\t * The units of time\n\t */\n\tprotected _units?: Unit;\n\n\t/**\n\t * All of the conversion expressions\n\t */\n\tprotected _expressions: TimeExpression<Type>;\n\n\t/**\n\t * The default units\n\t */\n\treadonly defaultUnits: Unit = \"s\" as Unit;\n\n\tconstructor(context: Context, value?: TimeValue, units?: Unit) {\n\t\tsuper();\n\n\t\tthis._val = value;\n\t\tthis._units = units;\n\t\tthis.context = context;\n\t\tthis._expressions = this._getExpressions();\n\t}\n\n\t/**\n\t * All of the time encoding expressions\n\t */\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn {\n\t\t\thz: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._frequencyToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)hz$/i,\n\t\t\t},\n\t\t\ti: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._ticksToUnits(parseInt(value, 10));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)i$/i,\n\t\t\t},\n\t\t\tm: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)m$/i,\n\t\t\t},\n\t\t\tn: {\n\t\t\t\tmethod: (value, dot) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\tconst scalar = dot === \".\" ? 1.5 : 1;\n\t\t\t\t\tif (numericValue === 1) {\n\t\t\t\t\t\treturn this._beatsToUnits(this._getTimeSignature()) * scalar as Type;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this._beatsToUnits(4 / numericValue) * scalar as Type;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)n(\\.?)$/i,\n\t\t\t},\n\t\t\tnumber: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._expressions[this.defaultUnits].method.call(this, value);\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)$/,\n\t\t\t},\n\t\t\ts: {\n\t\t\t\tmethod: (value): Type => {\n\t\t\t\t\treturn this._secondsToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)s$/,\n\t\t\t},\n\t\t\tsamples: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn parseInt(value, 10) / this.context.sampleRate as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)samples$/,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\treturn this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)t$/i,\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tmethod: (m, q, s) => {\n\t\t\t\t\tlet total = 0;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n\t\t\t},\n\t\t};\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tVALUE OF\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Evaluate the time value. Returns the time in seconds.\n\t */\n\tvalueOf(): Type {\n\t\tif (this._val instanceof TimeBaseClass) {\n\t\t\tthis.fromType(this._val);\n\t\t}\n\t\tif (isUndef(this._val)) {\n\t\t\treturn this._noArg();\n\t\t} else if (isString(this._val) && isUndef(this._units)) {\n\t\t\tfor (const units in this._expressions) {\n\t\t\t\tif (this._expressions[units].regexp.test(this._val.trim())) {\n\t\t\t\t\tthis._units = units as Unit;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isObject(this._val)) {\n\t\t\tlet total = 0;\n\t\t\tfor (const typeName in this._val) {\n\t\t\t\tif (isDefined(this._val[typeName])) {\n\t\t\t\t\tconst quantity = this._val[typeName];\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst time = (new this.constructor(this.context, typeName)).valueOf() * quantity;\n\t\t\t\t\ttotal += time;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn total as Type;\n\t\t}\n\t\tif (isDefined(this._units)) {\n\t\t\tconst expr = this._expressions[this._units];\n\t\t\tconst matching = this._val.toString().trim().match(expr.regexp);\n\t\t\tif (matching) {\n\t\t\t\treturn expr.method.apply(this, matching.slice(1));\n\t\t\t} else {\n\t\t\t\treturn expr.method.call(this, this._val);\n\t\t\t}\n\t\t} else if (isString(this._val)) {\n\t\t\treturn parseFloat(this._val) as Type;\n\t\t} else {\n\t\t\treturn this._val as Type;\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn 1 / freq as Type;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn (60 / this._getBpm()) * beats as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn seconds as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t *  @private\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn (ticks * (this._beatsToUnits(1)) / this._getPPQ()) as Type;\n\t}\n\n\t/**\n\t *  With no arguments, return 'now'\n\t */\n\tprotected _noArg(): Type {\n\t\treturn this._now();\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tTEMPO CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Return the bpm\n\t */\n\tprotected _getBpm(): BPM {\n\t\treturn this.context.transport.bpm.value;\n\t}\n\n\t/**\n\t * Return the timeSignature\n\t */\n\tprotected _getTimeSignature(): number {\n\t\treturn this.context.transport.timeSignature as number;\n\t}\n\n\t/**\n\t * Return the PPQ or 192 if Transport is not available\n\t */\n\tprotected _getPPQ(): number {\n\t\treturn this.context.transport.PPQ;\n\t}\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected abstract _now(): Type;\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tCONVERSION INTERFACE\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Coerce a time type into this units type.\n\t * @param type Any time type units\n\t */\n\tfromType(type: TimeBaseClass<any, any>): this {\n\t\tthis._units = undefined;\n\t\tswitch (this.defaultUnits) {\n\t\t\tcase \"s\":\n\t\t\t\tthis._val = type.toSeconds();\n\t\t\t\tbreak;\n\t\t\tcase \"i\":\n\t\t\t\tthis._val = type.toTicks();\n\t\t\t\tbreak;\n\t\t\tcase \"hz\":\n\t\t\t\tthis._val = type.toFrequency();\n\t\t\t\tbreak;\n\t\t\tcase \"midi\":\n\t\t\t\tthis._val = type.toMidi();\n\t\t\t\tbreak;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Return the value in seconds\n\t */\n\tabstract toSeconds(): Seconds;\n\n\t/**\n\t *  Return the value as a Midi note\n\t */\n\tabstract toMidi(): MidiNote;\n\n\t/**\n\t * Convert the value into ticks\n\t */\n\tabstract toTicks(): Ticks;\n\n\t/**\n\t *  Return the value in hertz\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn 1 / this.toSeconds();\n\t}\n\n\t/**\n\t *  Return the time in samples\n\t */\n\ttoSamples(): Samples {\n\t\treturn this.toSeconds() * this.context.sampleRate;\n\t}\n\n\t/**\n\t *  Return the time in milliseconds.\n\t */\n\ttoMilliseconds(): Milliseconds {\n\t\treturn this.toSeconds() * 1000;\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\treturn this;\n\t}\n}\n","export { Gain } from \"./context/Gain\";\nexport { Context } from \"./context/Context\";\nexport { OfflineContext } from \"./context/OfflineContext\";\nexport { ToneAudioBuffer } from \"./context/ToneAudioBuffer\";\nexport { Delay } from \"./context/Delay\";\nexport { Clock } from \"./clock/Clock\";\nexport { Frequency } from \"./type/Frequency\";\nexport { Time } from \"./type/Time\";\nexport { Ticks } from \"./type/Ticks\";\nexport { TransportTime } from \"./type/TransportTime\";\nexport { Draw } from \"./util/Draw\";\nexport { StateTimeline } from \"./util/StateTimeline\";\nexport { IntervalTimeline } from \"./util/IntervalTimeline\";\nexport { Timeline } from \"./util/Timeline\";\nexport { Emitter } from \"./util/Emitter\";\nexport { Tone } from \"./Tone\";\nexport { Destination } from \"./context/Destination\";\nexport { Transport } from \"./clock/Transport\";\n","/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext: BaseAudioContext;\n\n// @ts-ignore\nglobalContext = window.TONE_AUDIO_CONTEXT;\n\n/**\n * Returns the default system-wide AudioContext\n */\nexport function getAudioContext(): BaseAudioContext {\n\tif (!globalContext) {\n\t\tsetAudioContext(new AudioContext());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n */\nexport function setAudioContext(context: BaseAudioContext): void {\n\tglobalContext = context;\n\t// @ts-ignore\n\twindow.TONE_AUDIO_CONTEXT = globalContext;\n}\n","\nexport type TickerClockSource = \"worker\" | \"timeout\" | \"offline\";\n\n/**\n * A class which provides a reliable callback using either\n * a Web Worker, or if that isn't supported, falls back to setTimeout.\n */\nexport class Ticker {\n\n\t/**\n\t * Either \"worker\" or \"timeout\" or \"offline\"\n\t */\n\tprivate _type: TickerClockSource;\n\n\t/**\n\t * The update interval of the worker\n\t */\n\tprivate _updateInterval: Seconds;\n\n\t/**\n\t * The callback to invoke at regular intervals\n\t */\n\tprivate _callback: () => void;\n\n\t/**\n\t * track the callback interval\n\t */\n\tprivate _timeout!: number;\n\n\t/**\n\t * private reference to the worker\n\t */\n\tprivate _worker!: Worker;\n\n\tconstructor(callback: () => void, type: TickerClockSource, updateInterval: Seconds) {\n\n\t\tthis._callback = callback;\n\t\tthis._type = type;\n\t\tthis._updateInterval = updateInterval;\n\n\t\t// create the clock source for the first time\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t *  Generate a web worker\n\t */\n\tprivate _createWorker(): void {\n\n\t\tconst blob = new Blob([\n\t\t\t// the initial timeout time\n\t\t\t`var timeoutTime =  ${(this._updateInterval * 1000).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();`,\n\t\t]);\n\t\tconst blobUrl = window.URL.createObjectURL(blob);\n\t\tconst worker = new Worker(blobUrl);\n\n\t\tworker.onmessage = this._callback.bind(this);\n\n\t\tthis._worker = worker;\n\t}\n\n\t/**\n\t * Create a timeout loop\n\t */\n\tprivate _createTimeout(): void {\n\t\tthis._timeout = window.setTimeout(()  => {\n\t\t\tthis._createTimeout();\n\t\t\tthis._callback();\n\t\t}, this._updateInterval * 1000);\n\t}\n\n\t/**\n\t * Create the clock source.\n\t */\n\tprivate _createClock(): void {\n\t\tif (this._type === \"worker\") {\n\t\t\ttry {\n\t\t\t\tthis._createWorker();\n\t\t\t} catch (e) {\n\t\t\t\t// workers not supported, fallback to timeout\n\t\t\t\tthis._type = \"timeout\";\n\t\t\t\tthis._createClock();\n\t\t\t}\n\t\t} else if (this._type === \"timeout\") {\n\t\t\tthis._createTimeout();\n\t\t}\n\t}\n\n\t/**\n\t * Clean up the current clock source\n\t */\n\tprivate _disposeClock(): void {\n\t\tif (this._timeout) {\n\t\t\tclearTimeout(this._timeout);\n\t\t\tthis._timeout = 0;\n\t\t}\n\t\tif (this._worker) {\n\t\t\tthis._worker.terminate();\n\t\t\tthis._worker.onmessage = null;\n\t\t}\n\t}\n\n\t/**\n\t * The rate in seconds the ticker will update\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._updateInterval = Math.max(interval, 128 / 44100);\n\t\tif (this._type === \"worker\") {\n\t\t\tthis._worker.postMessage(Math.max(interval * 1000, 1));\n\t\t}\n\t}\n\n\t/**\n\t * The type of the ticker, either a worker or a timeout\n\t */\n\tget type(): TickerClockSource {\n\t\treturn this._type;\n\t}\n\tset type(type: TickerClockSource) {\n\t\tthis._disposeClock();\n\t\tthis._type = type;\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): void {\n\t\tthis._disposeClock();\n\t}\n}\n","export { getContext, setContext } from \"./core/Global\";\nexport * from \"./core/index\";\nexport * from \"./source/index\";\n\nimport { getContext } from \"./core/Global\";\n/**\n *  The current audio context time\n */\nexport function now(): Seconds {\n\treturn getContext().now();\n}\n"],"sourceRoot":""}