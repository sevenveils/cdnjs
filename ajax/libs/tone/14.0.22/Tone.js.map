{"version":3,"sources":["webpack://Tone/webpack/universalModuleDefinition","webpack://Tone/webpack/bootstrap","webpack://Tone/./Tone/core/util/Defaults.ts","webpack://Tone/./Tone/core/util/Interface.ts","webpack://Tone/./Tone/core/util/TypeCheck.ts","webpack://Tone/./Tone/core/context/ToneAudioNode.ts","webpack://Tone/./Tone/core/context/Gain.ts","webpack://Tone/./Tone/signal/Signal.ts","webpack://Tone/./Tone/source/Source.ts","webpack://Tone/./Tone/core/Global.ts","webpack://Tone/./Tone/core/util/Timeline.ts","webpack://Tone/./Tone/source/oscillator/Oscillator.ts","webpack://Tone/./Tone/core/Tone.ts","webpack://Tone/./Tone/core/context/ToneWithContext.ts","webpack://Tone/./Tone/core/context/Param.ts","webpack://Tone/./Tone/core/type/Time.ts","webpack://Tone/./Tone/core/Connect.ts","webpack://Tone/./Tone/core/util/StateTimeline.ts","webpack://Tone/./Tone/core/type/TransportTime.ts","webpack://Tone/./Tone/core/type/Conversions.ts","webpack://Tone/./Tone/core/util/Emitter.ts","webpack://Tone/./Tone/source/oscillator/PulseOscillator.ts","webpack://Tone/./Tone/signal/Multiply.ts","webpack://Tone/./Tone/component/channel/Volume.ts","webpack://Tone/./Tone/core/type/Ticks.ts","webpack://Tone/./Tone/core/context/ToneAudioBuffer.ts","webpack://Tone/./Tone/core/type/Frequency.ts","webpack://Tone/./Tone/core/context/ContextInitialization.ts","webpack://Tone/./Tone/core/context/Context.ts","webpack://Tone/./Tone/component/envelope/Envelope.ts","webpack://Tone/./Tone/source/oscillator/OmniOscillator.ts","webpack://Tone/./Tone/source/oscillator/PWMOscillator.ts","webpack://Tone/./Tone/source/oscillator/FatOscillator.ts","webpack://Tone/./Tone/source/oscillator/FMOscillator.ts","webpack://Tone/./Tone/signal/WaveShaper.ts","webpack://Tone/./Tone/signal/SignalOperator.ts","webpack://Tone/./Tone/source/oscillator/AMOscillator.ts","webpack://Tone/./Tone/source/oscillator/OscillatorNode.ts","webpack://Tone/./Tone/source/OneShotSource.ts","webpack://Tone/./Tone/source/buffer/BufferSource.ts","webpack://Tone/./Tone/core/clock/TransportEvent.ts","webpack://Tone/./Tone/core/util/IntervalTimeline.ts","webpack://Tone/./Tone/core/clock/Clock.ts","webpack://Tone/./Tone/version.ts","webpack://Tone/./Tone/instrument/Instrument.ts","webpack://Tone/./Tone/instrument/Monophonic.ts","webpack://Tone/./Tone/component/envelope/AmplitudeEnvelope.ts","webpack://Tone/./Tone/instrument/Synth.ts","webpack://Tone/./Tone/instrument/index.ts","webpack://Tone/./Tone/signal/AudioToGain.ts","webpack://Tone/./Tone/source/Noise.ts","webpack://Tone/./Tone/source/index.ts","webpack://Tone/./Tone/core/clock/TransportRepeatEvent.ts","webpack://Tone/./Tone/core/clock/Transport.ts","webpack://Tone/./Tone/core/context/Destination.ts","webpack://Tone/./Tone/core/util/Draw.ts","webpack://Tone/./Tone/core/clock/TickSignal.ts","webpack://Tone/./Tone/core/clock/TickSource.ts","webpack://Tone/./Tone/core/context/Delay.ts","webpack://Tone/./Tone/core/context/OfflineContext.ts","webpack://Tone/./Tone/core/type/TimeBase.ts","webpack://Tone/./Tone/core/index.ts","webpack://Tone/./Tone/core/context/AudioContext.ts","webpack://Tone/(webpack)/buildin/global.js","webpack://Tone/./Tone/core/clock/Ticker.ts","webpack://Tone/./Tone/index.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","TypeCheck_1","deepMerge","target","sources","_i","arguments","length","source","shift","isObject","key","assign","_a","_b","apply","concat","optionsFromArguments","defaults","argsArray","keys","objKey","opts","args","Array","from","Reflect","has","some","splice","indexOf","isDefined","getDefaultsFromInstance","instance","constructor","getDefaults","defaultArg","given","fallback","isUndef","omitFromObject","obj","omit","forEach","prop","readOnly","isArray","str","writable","noOp","arg","isString","isFunction","isNumber","toString","isBoolean","isNote","test","Defaults_1","ToneWithContext_1","ToneAudioNode","_super","_this","options","numberOfInputs","numberOfOutputs","__extends","ToneWithContext","channelCount","channelCountMode","channelInterpretation","createInsOuts","input","context","createGain","output","_setChannelProperties","_internalChannels","node","_getChannelProperties","props","connect","destination","outputNum","inputNum","toDestination","toMaster","disconnect","chain","nodes","connectSeries","fan","dispose","AudioNode","first","reduce","prev","current","srcNode","dstNode","outputNumber","inputNumber","AudioParam","assert","dst","e","Param_1","Interface_1","ToneAudioNode_1","Gain","_gainNode","gain","Param","convert","param","units","ToneAudioNode_2","Signal","override","_constantSource","createConstantSource","start","_param","offset","connectSignal","setValueAtTime","time","getValueAtTime","setRampPoint","linearRampToValueAtTime","exponentialRampToValueAtTime","exponentialRampTo","rampTime","startTime","linearRampTo","targetRampTo","exponentialApproachValueAtTime","setTargetAtTime","timeConstant","setValueCurveAtTime","values","duration","scaling","cancelScheduledValues","cancelAndHoldAtTime","rampTo","overridden","maxValue","minValue","signal","Volume_1","StateTimeline_1","Source","Volume","_volume","undefined","volume","_state","StateTimeline","_synced","_scheduled","_syncedStart","_syncedStop","memory","mute","transport","state","seconds","now","toSeconds","cancel","setStateAtTime","restart","event_1","sched","schedule","t","_start","push","stop","_stop","bind","sync","stateEvent","startOffset","getSecondsAtTime","Math","max","sampleTime","on","unsync","off","id","clear","globalContext","version_1","Context_1","setContext","initialize","window","TONE_CONTEXT","getContext","Context","resume","TONE_SILENCE_LOGGING","prefix","version","printString","console","log","Tone_1","Timeline","_timeline","Infinity","add","event","valueOf","index","_search","diff","remove","peek","getAfter","getBefore","len","after","slice","cancelBefore","previousEvent","beginning","end","midPoint","floor","nextEvent","_iterate","callback","lowerBound","upperBound","forEachBefore","forEachAfter","forEachBetween","endTime","forEachFrom","forEachAtTime","Tone","Signal_1","Source_1","OscillatorNode_1","Oscillator","_oscillator","frequency","detune","_partials","partials","_partialCount","partialCount","_phase","phase","_type","type","baseType","oscillator","ToneOscillatorNode","_wave","setPeriodicWave","onended","setTimeout","cancelStop","syncFrequency","syncSignal","unsyncFrequency","unsyncSignal","isBasicType","_getRealImaginary","real","imag","periodicWave","createPeriodicWave","replace","partial","exec","periodicWaveSize","fftSize","Float32Array","parseInt","piFactor","PI","b","TypeError","sin","cos","_inverseFFT","sum","_getInitialValue","twoPi","debug","_wasDisposed","global","TONE_DEBUG_CLASS","unshift","statement","error","Error","Global_1","Frequency_1","Time_1","TransportTime_1","defaultContext","currentTime","lookAhead","immediate","sampleRate","TimeClass","toFrequency","freq","FrequencyClass","toTicks","TransportTimeClass","attribute","member","set","Conversions_1","Timeline_1","_minOutput","_events","_initialValue","_fromType","_is","val","dbToGain","min","_toType","gainToDb","numericValue","computedTime","before","beforeValue","previous","_linearInterpolate","_exponentialInterpolate","previousVal","constant","_exponentialApproach","currentVal","startingValue","segTime","valueAtTime","t0","v0","v1","exp","t1","pow","_getExpressions","method","capture","_now","regexp","quantize","quantTo","_secondsToUnits","nextSubdivision","subdiv","percent","subdivision","round","toNotation","testNotations","power","closest","closestSeconds","notation","notationSeconds","abs","toBarsBeatsSixteenths","quarterTime","_beatsToUnits","quarters","parseFloat","toFixed","measures","_getTimeSignature","sixteenths","sixteenthString","join","_getPPQ","toMidi","ftom","TimeBaseClass","Time","initial","_initial","getLastState","getNextState","event_2","TransportTime","equalPowerScale","db","LN10","intervalToFrequencyRatio","interval","A4","getA4","setA4","log2","mtof","midi","Emitter","split","eventName","once","boundCallback","eventList","emit","mixin","constr","getOwnPropertyDescriptor","Gain_1","WaveShaper_1","Oscillator_1","PulseOscillator","width","_widthGate","_sawtooth","_thresh","WaveShaper","mapping","Multiply","_mult","factor","_unmutedVolume","TicksClass","defaultUnits","ticks","beats","_getBpm","_ticksToUnits","Ticks","ToneAudioBuffer","onload","reverse","url","AudioBuffer","load","catch","onerror","_buffer","buffer","loaded","_reversed","_reverse","promise","downloads","audioBuffer","sent","e_1","fromArray","array","isMultidimensional","channels","createBuffer","multiChannelArray","copyToChannel","toMono","chanNum","toArray","outputArray","numChannels_1","numberOfChannels","channel","channelArray","map","sample","getChannelData","ret","startSamples","endSamples","replacementArray","rev","fromUrl","matches","match","extensions","extension","extensions_1","ext","supportsType","fetch","baseUrl","response","ok","arrayBuffer","decodeAudioData","document","createElement","canPlayType","Conversions_2","note","pitch","octave","noteNumber","noteToScaleIndex","toLowerCase","tr","q","total","transpose","harmonize","intervals","toNote","scaleIndexToNote","_noArg","_frequencyToUnits","cbb","cb","c#","cx","dbb","d#","dx","ebb","eb","e#","ex","fbb","fb","f","f#","fx","gbb","gb","g","g#","gx","abb","ab","a","a#","ax","bbb","bb","b#","bx","Frequency","notifyNewContext","onContextInit","initializeContext","ctx","notifyCloseContext","onContextClose","closeContext","Ticker_1","Emitter_1","AudioContext_1","ContextInitialization_1","_constants","Map","_timeouts","_timeoutIds","_initialized","_context","_latencyHint","latencyHint","_ticker","Ticker","clockSource","updateInterval","_timeoutLoop","addEventListener","getAudioContext","createAnalyser","createOscillator","createBufferSource","createBiquadFilter","createChannelMerger","createChannelSplitter","createConvolver","createDelay","maxDelayTime","createDynamicsCompressor","createIIRFilter","feedforward","feedback","createPanner","constraints","createStereoPanner","createWaveShaper","audioData","listener","_transport","_destination","hint","lookAheadValue","AudioContext","Promise","resolve","close","getConstant","arr","loop","firstEvent","fn","timeout","clearTimeout","Envelope","_sig","attack","decay","sustain","release","attackCurve","releaseCurve","decayCurve","_getCurve","curve","direction","curveName","EnvelopeCurves","_setCurve","curveDef","_attackCurve","_releaseCurve","_decayCurve","triggerAttack","velocity","currentValue","decayValue","decayStart","triggerRelease","triggerAttackRelease","k","cosineCurve","rippleCurve","curveLen","sineWave","stairsCurve","ceil","sineCurve","bounceCurve","invertCurve","out","j","bounce","In","Out","cosine","exponential","linear","ripple","sine","step","AMOscillator_1","FatOscillator_1","FMOscillator_1","PulseOscillator_1","PWMOscillator_1","OmniOscillatorSourceMap","am","AMOscillator","fat","FatOscillator","fm","FMOscillator","pulse","pwm","PWMOscillator","OmniOscillator","_sourceType","substr","_createNewOscillator","_getOscType","oscType","oscConstructor","oldOsc_1","blockTime","sType","osc","sourceType","count","spread","modulationType","mType","modulationIndex","harmonicity","modulationFrequency","Multiply_1","_pulse","_modulator","_scale","_oscillators","_spread","_forEach","iterator","start_1","step_1","_carrier","_modulationNode","_shaper","setMap","normalized","oversample","oversampling","isOverSampleType","includes","SignalOperator","AudioToGain_1","_modulationScale","AudioToGain","Connect_1","OneShotSource_1","OneShotSource","_startGain","_stopSource","_startTime","_stopTime","_timeout","getStateAtTime","_fadeIn","fadeIn","_fadeOut","fadeOut","_curve","fadeInTime","_stopGain","fadeOutTime","additionalTail","_onended","ToneAudioBuffer_1","ToneBufferSource","_source","_sourceStarted","_sourceStopped","playbackRate","loopStart","loopEnd","computedDur","TransportEvent","_eventId","_once","invoke","IntervalTimeline","_root","_length","IntervalNode","insert","updateHeight","updateMax","_rebalance","parent","results","search","results_1","_removeNode","_setRoot","_replaceNodeInParent","replacement","isLeftChild","left","right","temp","getBalance","_rotateLeft","pivotNode","_rotateRight","balance","low","allNodes_1","traverse","searchAfter","high","_left","_right","height","point","TickSource_1","Clock","_lastUpdate","_boundLoop","_loop","_tickSource","TickSource","pause","getTicksAtTime","setTicksAtTime","nextTickTime","when","currentTick","getTimeOfTick","forEachTickBetween","Instrument","_scheduledEvents","_original_triggerAttack","_original_triggerRelease","_syncMethod","timePosition","originalMethod","computedDuration","Instrument_1","Monophonic","portamento","_triggerEnvelopeAttack","setNote","_triggerEnvelopeRelease","getLevelAtTime","envelope","computedFrequency","portTime","AmplitudeEnvelope","AmplitudeEnvelope_1","Envelope_1","OmniOscillator_1","Monophonic_1","Synth","computedAttack","computedDecay","Synth_1","SignalOperator_1","_norm","x","BufferSource_1","Noise","_playbackRate","_noiseBuffers","rate","random","_noiseCache","brown","pink","white","channelNum","lastOut","b0","b1","b2","b3","b4","b5","b6","Noise_1","Ticks_1","TransportEvent_1","TransportRepeatEvent","_currentId","_nextId","_nextTick","_boundRestart","_restart","_interval","_createEvents","scheduleOnce","IntervalTimeline_1","Clock_1","TransportRepeatEvent_1","Transport","_loopStart","_loopEnd","_repeatedEvents","_syncedSignals","_swingAmount","_ppq","ppq","_clock","_processTick","_bindClockEvents","bpm","multiplier","_timeSignature","timeSignature","_swingTicks","swing","swingSubdivision","tickTime","progress","amount","_addEvent","scheduleRepeat","eventId","item","timeline","computedAfter","offsetTicks","toggle","timeSig","startPosition","endPosition","setLoopPoints","timeToTicks","remainingTicks","ratio","computedFreq","PPQ","ratioSignal","syncedSignal","Destination","rawContext","Draw","expiration","anticipation","_boundDrawLoop","_drawLoop","_animationFrame","requestAnimationFrame","cancelAnimationFrame","TickSignal","_multiplier","computedValue","prevEvent","segments","rampVal","ticksUntilTime","_getTicksUntilEvent","computedVal","segmentDur","val0","val1","onTheLineEvent","getDurationOfTicks","tick","delta","sqrt","sol1","ticksToTime","startTicks","TickSignal_1","_tickOffset","stopEvent","tmpEvent","lastState","elapsedTicks","periodStartTime","offsetEvent","elapsedSeconds","absoluteTicks","computedStartTime","computedEndTime","lastStateEvent","maxStartTime","Delay","maxDelay","delayTime","_delayNode","OfflineContext","OfflineAudioContext","_currentTime","_duration","render","startRendering","_val","_units","_expressions","hz","dot","scalar","number","samples","fromType","trim","typeName","quantity","expr","matching","toSamples","toMilliseconds","OfflineContext_1","Delay_1","Draw_1","Destination_1","Transport_1","setAudioContext","TONE_AUDIO_CONTEXT","Function","eval","_callback","_updateInterval","_createClock","_createWorker","blob","Blob","blobUrl","URL","createObjectURL","worker","Worker","onmessage","_worker","_createTimeout","_disposeClock","terminate","postMessage","__export","Global_2"],"mappings":"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","file":"Tone.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Tone\"] = factory();\n\telse\n\t\troot[\"Tone\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 64);\n","// import { BaseToneOptions } from \"../Tone\";\nimport { isDefined, isObject, isUndef } from \"./TypeCheck\";\n\ntype BaseToneOptions = import(\"../Tone\").BaseToneOptions;\n\n/**\n * Recursively merge an object\n * @param target the object to merge into\n * @param sources the source objects to merge\n */\nexport function deepMerge<T>(target: T, ...sources: T[]): T {\n\tif (!sources.length) { return target; }\n\tconst source = sources.shift();\n\n\tif (isObject(target) && isObject(source)) {\n\t\tfor (const key in source) {\n\t\t\t// values with the key 'value' are an exception\n\t\t\t// they don't get deep merged\n\t\t\tif (key === \"value\") {\n\t\t\t\ttarget[key] = source[key];\n\t\t\t} else if (isObject(source[key])) {\n\t\t\t\tif (!target[key]) { Object.assign(target, { [key]: {} }); }\n\t\t\t\tdeepMerge(target[key], source[key] as any);\n\t\t\t} else {\n\t\t\t\tObject.assign(target, { [key]: source[key] as any });\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Convert an args array into an object.\n */\nexport function optionsFromArguments<T extends object>(\n\tdefaults: T,\n\targsArray: IArguments,\n\tkeys: string[] = [],\n\tobjKey?: string,\n): T {\n\tconst opts: any = {};\n\tconst args = Array.from(argsArray);\n\t// if the first argument is an object and has an object key\n\tif (isObject(args[0]) && objKey && !Reflect.has(args[0], objKey)) {\n\t\t// if it's not part of the defaults\n\t\tconst partOfDefaults = Object.keys(args[0]).some(key => Reflect.has(defaults, key));\n\t\tif (!partOfDefaults) {\n\t\t\t// merge that key\n\t\t\tdeepMerge(opts, {[objKey] : args[0]});\n\t\t\t// remove the obj key from the keys\n\t\t\tkeys.splice(keys.indexOf(objKey), 1);\n\t\t\t// shift the first argument off\n\t\t\targs.shift();\n\t\t}\n\t}\n\tif (args.length === 1 && isObject(args[0])) {\n\t\tdeepMerge(opts, args[0]);\n\t} else {\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tif (isDefined(args[i])) {\n\t\t\t\topts[keys[i]] = args[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn deepMerge(defaults, opts);\n}\n\n/**\n * Return this instances default values by calling Constructor.getDefaults()\n */\nexport function getDefaultsFromInstance<T>(instance: T): BaseToneOptions {\n\ttype ToneClass = {\n\t\tconstructor: ToneClass;\n\t\tgetDefaults: () => BaseToneOptions;\n\t} & T;\n\n\treturn (instance as ToneClass).constructor.getDefaults();\n}\n\n/**\n * Returns the fallback if the given object is undefined.\n * Take an array of arguments and return a formatted options object.\n */\nexport function defaultArg<T>(given: T, fallback: T): T {\n\tif (isUndef(given)) {\n\t\treturn fallback;\n\t} else {\n\t\treturn given;\n\t}\n}\n\n/**\n * Remove all of the properties belonging to omit from obj.\n */\nexport function omitFromObject<T extends object, O extends string[]>(obj: T, omit: O): Omit<T, keyof O> {\n\tomit.forEach(prop => {\n\t\tif (Reflect.has(obj, prop)) {\n\t\t\tdelete obj[prop];\n\t\t}\n\t});\n\treturn obj;\n}\n","import { isArray } from \"./TypeCheck\";\n\n// return an interface which excludes certain keys\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n *  Make the property not writable using `defineProperty`. Internal use only.\n */\nexport function readOnly(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => readOnly(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\tenumerable: true,\n\t\t\twritable: false,\n\t\t});\n\t}\n}\n\n/**\n *  Make an attribute writeable. Internal use only.\n */\nexport function writable(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => writable(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\twritable: true,\n\t\t});\n\t}\n}\n\nexport const noOp: (...args: any[]) => any = () => {\n\t// no op!\n};\n\n/**\n * Recursive Partial taken from here: https://stackoverflow.com/a/51365037\n */\nexport type RecursivePartial<T> = {\n\t[P in keyof T]?:\n\tT[P] extends Array<infer U> ? Array<RecursivePartial<U>> :\n\tT[P] extends object ? RecursivePartial<T[P]> :\n\tT[P];\n};\n","/**\n *  Test if the arg is undefined\n */\nexport function isUndef(arg: any): arg is undefined {\n\treturn typeof arg === \"undefined\";\n}\n\n/**\n *  Test if the arg is not undefined\n */\nexport function isDefined<T>(arg: T | undefined): arg is T {\n\treturn !isUndef(arg);\n}\n\n/**\n *  Test if the arg is a function\n */\nexport function isFunction(arg: any): arg is (a: any) => any {\n\treturn typeof arg === \"function\";\n}\n\n/**\n *  Test if the argument is a number.\n */\nexport function isNumber(arg: any): arg is number {\n\treturn (typeof arg === \"number\");\n}\n\n/**\n *  Test if the given argument is an object literal (i.e. `{}`);\n */\nexport function isObject(arg: any): arg is object {\n\treturn (Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object);\n}\n\n/**\n *  Test if the argument is a boolean.\n */\nexport function isBoolean(arg: any): arg is boolean {\n\treturn (typeof arg === \"boolean\");\n}\n\n/**\n *  Test if the argument is an Array\n */\nexport function isArray(arg: any): arg is any[] {\n\treturn (Array.isArray(arg));\n}\n\n/**\n *  Test if the argument is a string.\n */\nexport function isString(arg: any): arg is string {\n\treturn (typeof arg === \"string\");\n}\n\n/**\n *  Test if the argument is in the form of a note in scientific pitch notation.\n *  e.g. \"C4\"\n */\nexport function isNote(arg: any): arg is Note {\n\treturn isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}\n","import { optionsFromArguments } from \"../util/Defaults\";\nimport { isArray, isDefined, isNumber } from \"../util/TypeCheck\";\nimport { Param } from \"./Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\n\nexport type InputNode = ToneAudioNode | AudioNode | AudioParam | Param<Unit>;\nexport type OutputNode = ToneAudioNode | AudioNode;\n\nexport interface ChannelProperties {\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n * The possible options for this node\n */\nexport interface ToneAudioNodeOptions extends ToneWithContextOptions {\n\tnumberOfInputs: number;\n\tnumberOfOutputs: number;\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n *  ToneAudioNode is the base class for classes which process audio.\n */\nexport abstract class ToneAudioNode<Options extends ToneAudioNodeOptions = ToneAudioNodeOptions>\nextends ToneWithContext<Options> {\n\n\tabstract name = \"AudioNode\";\n\n\t/**\n\t * The input node or nodes. If the object is a source,\n\t * it does not have any input and this.input is undefined.\n\t */\n\tabstract input: InputNode | InputNode[] | undefined;\n\n\t/**\n\t * The output nodes. If the object is a sink,\n\t * it does not have any output and this.output is undefined.\n\t */\n\tabstract output: OutputNode | OutputNode[] | undefined;\n\n\t/**\n\t *  The number of inputs feeding into the AudioNode.\n\t *  For source nodes, this will be 0.\n\t */\n\treadonly numberOfInputs: number;\n\n\t/**\n\t *  The number of outputs of the AudioNode.\n\t */\n\treadonly numberOfOutputs: number;\n\n\t/**\n\t * List all of the node that must be set to match the ChannelProperties\n\t */\n\tprotected abstract _internalChannels: OutputNode[];\n\n\tstatic getDefaults(): ToneAudioNodeOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tchannelCount: 2,\n\t\t\tchannelCountMode: \"max\" as ChannelCountMode,\n\t\t\tchannelInterpretation: \"speakers\" as ChannelInterpretation,\n\t\t\tnumberOfInputs: 0,\n\t\t\tnumberOfOutputs: 0,\n\t\t});\n\t}\n\n\tconstructor(options: Partial<ToneAudioNodeOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(ToneAudioNode.getDefaults(), arguments, [\"context\"]));\n\n\t\tconst options = optionsFromArguments(ToneAudioNode.getDefaults(), arguments, [\"context\"]);\n\n\t\tthis.numberOfInputs = options.numberOfInputs;\n\t\tthis.numberOfOutputs = options.numberOfOutputs;\n\t}\n\n\tprotected createInsOuts(numberOfInputs: number = 0, numberOfOutputs: number = 0): void {\n\t\tif (numberOfInputs === 1) {\n\t\t\tthis.input = this.context.createGain();\n\t\t} else if (numberOfInputs > 1) {\n\t\t\tthis.input = [];\n\t\t\tfor (let i = 0; i < numberOfInputs; i++) {\n\t\t\t\tthis.input[i] = this.context.createGain();\n\t\t\t}\n\t\t}\n\n\t\tif (numberOfOutputs === 1) {\n\t\t\tthis.output = this.context.createGain();\n\t\t} else if (numberOfOutputs > 1) {\n\t\t\tthis.output = [];\n\t\t\tfor (let o = 0; o < numberOfOutputs; o++) {\n\t\t\t\tthis.output[o] = this.context.createGain();\n\t\t\t}\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// AUDIO PROPERTIES\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Set the audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t * @param options\n\t */\n\tprivate _setChannelProperties(options: ChannelProperties): void {\n\t\tif (this._internalChannels.length) {\n\t\t\tthis._internalChannels.forEach(node => {\n\t\t\t\tnode.channelCount = options.channelCount;\n\t\t\t\tnode.channelCountMode = options.channelCountMode;\n\t\t\t\tnode.channelInterpretation = options.channelInterpretation;\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Get the current audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t */\n\tprivate _getChannelProperties(): ChannelProperties {\n\t\tif (this._internalChannels.length) {\n\t\t\tconst node = this._internalChannels[0];\n\t\t\treturn {\n\t\t\t\tchannelCount: node.channelCount,\n\t\t\t\tchannelCountMode: node.channelCountMode,\n\t\t\t\tchannelInterpretation: node.channelInterpretation,\n\t\t\t};\n\t\t} else {\n\t\t\t// return the defaults\n\t\t\treturn {\n\t\t\t\tchannelCount: 2,\n\t\t\t\tchannelCountMode: \"max\",\n\t\t\t\tchannelInterpretation: \"speakers\",\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t *  channelCount is the number of channels used when up-mixing and down-mixing\n\t *  connections to any inputs to the node. The default value is 2 except for\n\t *  specific nodes where its value is specially determined.\n\t */\n\tget channelCount(): number {\n\t\treturn this._getChannelProperties().channelCount;\n\t}\n\tset channelCount(channelCount: number) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCount }));\n\t}\n\n\t/**\n\t *  channelCountMode determines how channels will be counted when up-mixing and\n\t *  down-mixing connections to any inputs to the node.\n\t *  The default value is \"max\". This attribute has no effect for nodes with no inputs.\n\t */\n\tget channelCountMode(): ChannelCountMode {\n\t\treturn this._getChannelProperties().channelCountMode;\n\t}\n\tset channelCountMode(channelCountMode: ChannelCountMode) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCountMode }));\n\t}\n\n\t/**\n\t *  channelInterpretation determines how individual channels will be treated\n\t *  when up-mixing and down-mixing connections to any inputs to the node.\n\t *  The default value is \"speakers\".\n\t */\n\tget channelInterpretation(): ChannelInterpretation {\n\t\treturn this._getChannelProperties().channelInterpretation;\n\t}\n\tset channelInterpretation(channelInterpretation: ChannelInterpretation) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelInterpretation }));\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONNECTIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n\t * @param unit The output to connect to\n\t * @param outputNum The output to connect from\n\t * @param inputNum The input to connect to\n\t */\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t */\n\ttoDestination(): this {\n\t\tthis.connect(this.context.destination);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t * alias for {@link toDestination}\n\t */\n\ttoMaster(): this {\n\t\treturn this.toDestination();\n\t}\n\n\t/**\n\t *  disconnect the output\n\t *  @param output Either the output index to disconnect if the output is an array, or the node to disconnect from.\n\t */\n\tdisconnect(destination?: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tdisconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Connect the output of this node to the rest of the nodes in series.\n\t *  @param nodes\n\t *  @example\n\t *  //connect a node to an effect, panVol and then to the master output\n\t *  node.chain(effect, panVol, Tone.Destination);\n\t */\n\tchain(...nodes: InputNode[]): this {\n\t\tconnectSeries(this, ...nodes);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  connect the output of this node to the rest of the nodes in parallel.\n\t *  @param nodes\n\t *  @returns this\n\t */\n\tfan(...nodes: InputNode[]): this {\n\t\tnodes.forEach(node => this.connect(node));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Dispose and disconnect\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (isDefined(this.input)) {\n\t\t\tif (isArray(this.input)) {\n\t\t\t\tthis.input.forEach(input => {\n\t\t\t\t\tif (input instanceof ToneAudioNode) {\n\t\t\t\t\t\tinput.dispose();\n\t\t\t\t\t} else if (input instanceof AudioNode) {\n\t\t\t\t\t\tinput.disconnect();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (this.input instanceof ToneAudioNode) {\n\t\t\t\tthis.input.dispose();\n\t\t\t} else if (this.input instanceof AudioNode) {\n\t\t\t\tthis.input.disconnect();\n\t\t\t}\n\t\t}\n\t\tif (isDefined(this.output)) {\n\t\t\tif (isArray(this.output)) {\n\t\t\t\tthis.output.forEach(output => {\n\t\t\t\t\tif (output instanceof ToneAudioNode) {\n\t\t\t\t\t\toutput.dispose();\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutput.disconnect();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (this.output instanceof ToneAudioNode) {\n\t\t\t\tthis.output.dispose();\n\t\t\t} else if (this.output instanceof AudioNode) {\n\t\t\t\tthis.output.disconnect();\n\t\t\t}\n\t\t}\n\t\tthis._internalChannels = [];\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// CONNECTIONS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n *  connect together all of the arguments in series\n *  @param nodes\n */\nexport function connectSeries(...nodes: InputNode[]): void {\n\tconst first = nodes.shift();\n\tnodes.reduce((prev, current) => {\n\t\tif (prev instanceof ToneAudioNode) {\n\t\t\tprev.connect(current);\n\t\t} else if (prev instanceof AudioNode) {\n\t\t\tconnect(prev, current);\n\t\t}\n\t\treturn current;\n\t}, first);\n}\n\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function connect(srcNode: OutputNode, dstNode: InputNode, outputNumber = 0, inputNumber = 0): void {\n\n\t// resolve the input of the dstNode\n\twhile (!(dstNode instanceof AudioNode || dstNode instanceof AudioParam)) {\n\t\tif (isArray(dstNode.input)) {\n\t\t\tthis.assert(dstNode.input.length < inputNumber, \"the output number is greater than the number of outputs\");\n\t\t\tdstNode = dstNode.input[inputNumber];\n\t\t} else if (isDefined(dstNode.input)) {\n\t\t\tdstNode = dstNode.input;\n\t\t}\n\t\tinputNumber = 0;\n\t}\n\n\tif (srcNode instanceof ToneAudioNode) {\n\t\tif (isArray(srcNode.output)) {\n\t\t\tthis.assert(srcNode.output.length < outputNumber, \"the output number is greater than the number of outputs\");\n\t\t\tsrcNode = srcNode.output[outputNumber];\n\t\t} else if (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t\toutputNumber = 0;\n\t}\n\n\t// make the connection\n\tif (dstNode instanceof AudioParam) {\n\t\tsrcNode.connect(dstNode, outputNumber);\n\t} else {\n\t\tsrcNode.connect(dstNode, outputNumber, inputNumber);\n\t}\n}\n\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function disconnect(\n\tsrcNode: OutputNode,\n\tdstNode?: InputNode,\n\toutputNumber = 0,\n\tinputNumber = 0,\n): void {\n\n\t// resolve the destination node\n\tif (isDefined(dstNode)) {\n\t\twhile (dstNode instanceof ToneAudioNode) {\n\t\t\tif (isArray(dstNode.input)) {\n\t\t\t\tif (isNumber(inputNumber)) {\n\t\t\t\t\tthis.assert(dstNode.input.length < inputNumber, \"the input number is greater than the number of inputs\");\n\t\t\t\t\tdstNode = dstNode.input[inputNumber];\n\t\t\t\t} else {\n\t\t\t\t\t// disconnect from all of the nodes\n\t\t\t\t\t// since we don't know which one was connected\n\t\t\t\t\tdstNode.input.forEach(dst => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// catch errors from disconnecting from nodes that are not connected\n\t\t\t\t\t\t\tdisconnect(srcNode, dst, outputNumber);\n\t\t\t\t\t\t\t// tslint:disable-next-line: no-empty\n\t\t\t\t\t\t} catch (e) { }\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tinputNumber = 0;\n\t\t\t} else if (dstNode.input) {\n\t\t\t\tdstNode = dstNode.input;\n\t\t\t}\n\t\t}\n\t}\n\n\t// resolve the src node\n\twhile (!(srcNode instanceof AudioNode)) {\n\t\tif (isArray(srcNode.output)) {\n\t\t\tthis.assert(srcNode.output.length < outputNumber, \"the output number is greater than the number of outputs\");\n\t\t\tsrcNode = srcNode.output[outputNumber];\n\t\t} else if (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t\toutputNumber = 0;\n\t}\n\n\tif (dstNode instanceof AudioParam) {\n\t\tsrcNode.disconnect(dstNode, outputNumber);\n\t} else if (dstNode instanceof AudioNode) {\n\t\tsrcNode.disconnect(dstNode, outputNumber, inputNumber);\n\t} else {\n\t\tsrcNode.disconnect();\n\t}\n}\n","import { Param } from \"../context/Param\";\nimport \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface GainOptions extends ToneAudioNodeOptions {\n\tgain: number;\n\tunits: UnitName;\n\tconvert: boolean;\n}\n\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @param  gain The initial gain of the GainNode\n * @param units The units of the gain parameter.\n */\nexport class Gain<Type extends Unit = GainFactor> extends ToneAudioNode<GainOptions> {\n\n\tname = \"Gain\";\n\n\t/**\n\t *  The gain parameter of the gain node.\n\t */\n\treadonly gain: Param<Type>;\n\n\t/**\n\t * The wrapped GainNode.\n\t */\n\tprivate _gainNode: GainNode = this.context.createGain();\n\n\t// input = output\n\treadonly input: GainNode = this._gainNode;\n\treadonly output: GainNode = this._gainNode;\n\n\t/**\n\t * Add all of the gain nodes\n\t */\n\tprotected _internalChannels: AudioNode[] = [this._gainNode];\n\n\tconstructor(gain?: GainFactor, units?: Unit);\n\tconstructor(options?: Partial<GainOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n\t\tconst options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n\n\t\tthis.gain = new Param({\n\t\t\tcontext : this.context,\n\t\t\tconvert : options.convert,\n\t\t\tparam : this._gainNode.gain,\n\t\t\tunits : options.units,\n\t\t\tvalue : options.gain,\n\t\t});\n\t\treadOnly(this, \"gain\");\n\t}\n\n\tstatic getDefaults(): GainOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert : true,\n\t\t\tgain : 1,\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tunits : \"gain\" as UnitName,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n","import { AbstractParam } from \"../core/context/AbstractParam\";\nimport { Param } from \"../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\n\nexport interface SignalOptions<Type> extends ToneAudioNodeOptions {\n\tvalue: Type;\n\tunits: UnitName;\n\tconvert: boolean;\n}\n\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *  @param value Initial value of the signal\n *  @param units unit The units the signal is in.\n * @example\n * const signal = new Tone.Signal(10);\n */\nexport class Signal<Type extends Unit = number> extends ToneAudioNode<SignalOptions<any>>\nimplements AbstractParam<Type> {\n\n\tname = \"Signal\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection.\n\t */\n\treadonly override: boolean = true;\n\n\t/**\n\t * The constant source node which generates the signal\n\t */\n\tprivate _constantSource: ConstantSourceNode = this.context.createConstantSource();\n\treadonly output: OutputNode = this._constantSource;\n\tprotected _param: Param<Type>;\n\treadonly input: InputNode;\n\tprotected _internalChannels = [this._constantSource];\n\n\tconstructor(value?: Type, units?: UnitName);\n\tconstructor(options?: Partial<SignalOptions<Type>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n\n\t\tconst options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]) as SignalOptions<Type>;\n\n\t\tthis._constantSource.start(0);\n\t\tthis.input = this._param = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._constantSource.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.value,\n\t\t});\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannelCount: 1,\n\t\t\tchannelCountMode: \"explicit\",\n\t\t\tchannelInterpretation: \"discrete\",\n\t\t\tconvert: true,\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tunits: \"number\" as UnitName,\n\t\t\tvalue: 0,\n\t\t}) as SignalOptions<any>;\n\t}\n\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// ABSTRACT PARAM INTERFACE\n\t// just a proxy for the ConstantSourceNode's offset AudioParam\n\t// all docs are generated from AbstractParam.ts\n\t///////////////////////////////////////////////////////////////////////////\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.setValueAtTime(value, time);\n\t\treturn this;\n\t}\n\tgetValueAtTime(time: Time): Type {\n\t\treturn this._param.getValueAtTime(time);\n\t}\n\tsetRampPoint(time: Time): this {\n\t\tthis._param.setRampPoint(time);\n\t\treturn this;\n\t}\n\tlinearRampToValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.linearRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampToValueAtTime(value: Type, time: Time): this {\n\t\tthis._param.exponentialRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.exponentialRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\tlinearRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.linearRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\ttargetRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.targetRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\texponentialApproachValueAtTime(value: Type, time: Time, rampTime: Time): this {\n\t\tthis._param.exponentialApproachValueAtTime(value, time, rampTime);\n\t\treturn this;\n\t}\n\tsetTargetAtTime(value: Type, startTime: Time, timeConstant: number): this {\n\t\tthis._param.setTargetAtTime(value, startTime, timeConstant);\n\t\treturn this;\n\t}\n\tsetValueCurveAtTime(values: Type[], startTime: Time, duration: Time, scaling?: number): this {\n\t\tthis._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\t\treturn this;\n\t}\n\tcancelScheduledValues(time: Time): this {\n\t\tthis._param.cancelScheduledValues(time);\n\t\treturn this;\n\t}\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tthis._param.cancelAndHoldAtTime(time);\n\t\treturn this;\n\t}\n\trampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tthis._param.rampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\n\tget value(): Type {\n\t\treturn this._param.value;\n\t}\n\tset value(value: Type) {\n\t\tthis._param.value = value;\n\t}\n\n\tget convert(): boolean {\n\t\treturn this._param.convert;\n\t}\n\tset convert(convert: boolean) {\n\t\tthis._param.convert = convert;\n\t}\n\n\tget units(): UnitName {\n\t\treturn this._param.units;\n\t}\n\n\tget overridden(): boolean {\n\t\treturn this._param.overridden;\n\t}\n\tset overridden(overridden: boolean) {\n\t\tthis._param.overridden = overridden;\n\t}\n\n\tget maxValue(): number {\n\t\treturn this._param.maxValue;\n\t}\n\tget minValue(): number {\n\t\treturn this._param.minValue;\n\t}\n}\n\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(signal: OutputNode, destination: InputNode, outputNum?: number, inputNum?: number): void {\n\tif (destination instanceof Param || destination instanceof AudioParam ||\n\t\t(destination instanceof Signal && destination.override)) {\n\t\t// cancel changes\n\t\tdestination.cancelScheduledValues(0);\n\t\t// reset the value\n\t\tdestination.setValueAtTime(0, 0);\n\t\t// mark the value as overridden\n\t\tif (destination instanceof Signal) {\n\t\t\tdestination.overridden = true;\n\t\t}\n\t}\n\tconnect(signal, destination, outputNum, inputNum);\n}\n","import { Volume } from \"../component/channel/Volume\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp, readOnly } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline } from \"../core/util/StateTimeline\";\nimport { isUndef } from \"../core/util/TypeCheck\";\n\nexport interface SourceOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  @class  Base class for sources. Sources have start/stop methods\n *          and the ability to be synced to the\n *          start/stop of this.context.transport.\n *\n *  @constructor\n *  @extends {Tone.AudioNode}\n *  @example\n * //Multiple state change events can be chained together,\n * //but must be set in the correct order and with ascending times\n *\n * // OK\n * state.start().stop(\"+0.2\");\n * // AND\n * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n *\n * // BAD\n * state.stop(\"+0.2\").start();\n * // OR\n * state.start(\"+0.3\").stop(\"+0.2\");\n *\n */\nexport abstract class Source<Options extends SourceOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The output volume node\n\t *  @type  {Tone.Volume}\n\t *  @private\n\t */\n\tprivate _volume: Volume = new Volume({\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * The output note\n\t */\n\toutput = this._volume;\n\tprotected _internalChannels = [this.output];\n\n\t/**\n\t * There is no input\n\t */\n\tinput = undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * source.volume.value = -6;\n\t */\n\tvolume = this._volume.volume;\n\n\t/**\n\t * \tKeep track of the scheduled state.\n\t *  @type {Tone.StateTimeline}\n\t *  @private\n\t */\n\tprotected _state: StateTimeline<{\n\t\tduration?: Seconds;\n\t\toffset?: Seconds;\n\t\t/**\n\t\t * Either the buffer is explicitly scheduled to end using the stop method,\n\t\t * or it's implicitly ended when the buffer is over.\n\t\t */\n\t\timplicitEnd?: boolean;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t *  The synced `start` callback function from the transport\n\t *  @type {Function}\n\t *  @private\n\t */\n\tprotected _synced = false;\n\n\t/**\n\t *  Keep track of all of the scheduled event ids\n\t */\n\tprivate _scheduled: number[] = [];\n\n\t/**\n\t * Placeholder functions for syncing/unsyncing to transport\n\t */\n\tprivate _syncedStart: (time: Seconds, offset: Seconds) => void = noOp;\n\tprivate _syncedStop: (time: Seconds) => void = noOp;\n\n\tconstructor(options: Partial<SourceOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n\n\t\treadOnly(this, \"volume\");\n\t\tthis._state.memory = 100;\n\t\tthis.volume.value = options.volume;\n\t\t// set mute initially\n\t\tthis.mute = options.mute;\n\n\t}\n\n\tstatic getDefaults(): SourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\tif (this._synced) {\n\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\treturn this._state.getValueAtTime(this.context.transport.seconds) as BasicPlaybackState;\n\t\t\t} else {\n\t\t\t\treturn \"stopped\";\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._state.getValueAtTime(this.now()) as BasicPlaybackState;\n\t\t}\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute: boolean) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t// overwrite these functions\n\tprotected abstract _start(time: Time, offset?: Time, duration?: Time): void;\n\tprotected abstract _stop(time: Time): void;\n\tabstract restart(time: Time, offset?: Time, duration?: Time): this;\n\n\t/**\n\t *  Start the source at the specified time. If no time is given,\n\t *  start the source now.\n\t *  @param  time When the source should be started.\n\t *  @returns {Source} this\n\t *  @example\n\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t */\n\tstart(time?: Time, offset?: Time, duration: Time = 0): this {\n\t\tif (isUndef(time) && this._synced) {\n\t\t\ttime = this.context.transport.seconds;\n\t\t} else {\n\t\t\ttime = this.toSeconds(time);\n\t\t}\n\t\t// if it's started, stop it and restart it\n\t\tif (this._state.getValueAtTime(time) === \"started\") {\n\t\t\tthis._state.cancel(time);\n\t\t\tthis._state.setStateAtTime(\"started\", time);\n\t\t\tthis.restart(time, offset, duration);\n\t\t} else {\n\t\t\tthis._state.setStateAtTime(\"started\", time);\n\t\t\tif (this._synced) {\n\t\t\t\t// add the offset time to the event\n\t\t\t\tconst event = this._state.get(time);\n\t\t\t\tif (event) {\n\t\t\t\t\tevent.offset = this.toSeconds(defaultArg(offset, 0));\n\t\t\t\t\tevent.duration = this.toSeconds(duration);\n\t\t\t\t}\n\t\t\t\tconst sched = this.context.transport.schedule(t => {\n\t\t\t\t\tthis._start(t, offset, duration);\n\t\t\t\t}, time);\n\t\t\t\tthis._scheduled.push(sched);\n\n\t\t\t\t// if it's already started\n\t\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\t\tthis._syncedStart(this.now(), this.context.transport.seconds);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._start.apply(this, arguments);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the source at the specified time. If no time is given,\n\t *  stop the source now.\n\t *  @param  {Time} [time=now] When the source should be stopped.\n\t *  @returns {Source} this\n\t *  @example\n\t * source.stop(); // stops the source immediately\n\t */\n\tstop(time?: Time): this {\n\t\tif (isUndef(time) && this._synced) {\n\t\t\ttime = this.context.transport.seconds;\n\t\t} else {\n\t\t\ttime = this.toSeconds(time);\n\t\t}\n\t\tif (!this._synced) {\n\t\t\tthis._stop.apply(this, arguments);\n\t\t} else {\n\t\t\tconst sched = this.context.transport.schedule(this._stop.bind(this), time);\n\t\t\tthis._scheduled.push(sched);\n\t\t}\n\t\tthis._state.cancel(time);\n\t\tthis._state.setStateAtTime(\"stopped\", time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Sync the source to the Transport so that all subsequent\n\t *  calls to `start` and `stop` are synced to the TransportTime\n\t *  instead of the AudioContext time.\n\t *\n\t * @example\n\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * source.sync().start(0).stop(0.3);\n\t * //start the transport.\n\t * this.context.transport.start();\n\t *\n\t * @example\n\t * //start the transport with an offset and the sync'ed sources\n\t * //will start in the correct position\n\t * source.sync().start(0.1);\n\t * //the source will be invoked with an offset of 0.4 = (0.5 - 0.1)\n\t * this.context.transport.start(\"+0.5\", 0.5);\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncedStart = (time, offset) => {\n\t\t\t\tif (offset > 0) {\n\t\t\t\t\t// get the playback state at that time\n\t\t\t\t\tconst stateEvent = this._state.get(offset);\n\t\t\t\t\t// listen for start events which may occur in the middle of the sync'ed time\n\t\t\t\t\tif (stateEvent && stateEvent.state === \"started\" && stateEvent.time !== offset) {\n\t\t\t\t\t\t// get the offset\n\t\t\t\t\t\tconst startOffset = offset - this.toSeconds(stateEvent.time);\n\t\t\t\t\t\tlet duration;\n\t\t\t\t\t\tif (stateEvent.duration) {\n\t\t\t\t\t\t\tduration = this.toSeconds(stateEvent.duration) - startOffset;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._syncedStop = time => {\n\t\t\t\tconst seconds = this.context.transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));\n\t\t\t\tif (this._state.getValueAtTime(seconds) === \"started\") {\n\t\t\t\t\tthis._stop(time);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.context.transport.on(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"loopStart\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"loopEnd\", this._syncedStop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsync the source to the Transport. See Source.sync\n\t */\n\tunsync(): this {\n\t\tif (this._synced) {\n\t\t\tthis.context.transport.off(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"loopEnd\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.off(\"loopStart\", this._syncedStart);\n\t\t}\n\t\tthis._synced = false;\n\t\t// clear all of the scheduled ids\n\t\tthis._scheduled.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduled = [];\n\t\tthis._state.cancel(0);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.unsync();\n\t\tthis._volume.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n","import { version } from \"../version\";\nimport { Context } from \"./context/Context\";\n\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext: Context;\n\n// @ts-ignore\nglobalContext = window.TONE_CONTEXT;\n\n/**\n * Returns the default system-wide AudioContext\n */\nexport function getContext(): Context {\n\tif (!globalContext) {\n\t\tsetContext(new Context());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n */\nexport function setContext(context: Context): void {\n\tglobalContext = context;\n\tcontext.initialize();\n\t// @ts-ignore\n\twindow.TONE_CONTEXT = context;\n}\n\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * document.querySelector('#playbutton').addEventListener('click', () => Tone.start())\n */\nexport function start(): Promise <void> {\n\treturn globalContext.resume();\n}\n\n/**\n * Log Tone.js + version in the console.\n */\nif (!this.TONE_SILENCE_LOGGING) {\n\tlet prefix = \"v\";\n\t// @ts-ignore\n\tif (version === \"dev\") {\n\t\tprefix = \"\";\n\t}\n\tconst printString = ` * Tone.js ${prefix}${version} * `;\n\t// tslint:disable-next-line: no-console\n\tconsole.log(`%c${printString}`, \"background: #000; color: #fff\");\n}\n","import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"./Defaults\";\n\ntype TimelineSearchParam = \"ticks\" | \"time\";\n\n/**\n * The options object for Timeline\n */\ninterface TimelineOptions {\n\tmemory: number;\n}\n\n/**\n * An event must have a time number\n */\nexport interface TimelineEvent {\n\ttime: number;\n}\n\n/**\n *  @class A Timeline class for scheduling and maintaining state\n *         along a timeline. All events must have a \"time\" property.\n *         Internally, events are stored in time order for fast\n *         retrieval.\n *  @param memory The number of previous events that are retained.\n */\nexport class Timeline<GenericEvent extends TimelineEvent> extends Tone {\n\n\tname = \"Timeline\";\n\n\t/**\n\t *  The memory of the timeline, i.e.\n\t *  how many events in the past it will retain\n\t */\n\tmemory: number;\n\n\t/**\n\t * The array of scheduled timeline events\n\t */\n\tprotected _timeline: GenericEvent[] = [];\n\n\tconstructor(options?: Partial<TimelineOptions>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(memory?: number);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Timeline.getDefaults(), arguments, [\"memory\"]);\n\n\t\tthis.memory = options.memory;\n\t}\n\n\tstatic getDefaults(): TimelineOptions {\n\t\treturn {\n\t\t\tmemory: Infinity,\n\t\t};\n\t}\n\n\t/**\n\t *  The number of items in the timeline.\n\t */\n\tget length(): number {\n\t\treturn this._timeline.length;\n\t}\n\n\t/**\n\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t *  @param event  The event object to insert into the timeline.\n\t */\n\tadd(event: GenericEvent): Timeline<GenericEvent> {\n\t\t// the event needs to have a time attribute\n\t\tthis.assert(Reflect.has(event, \"time\"), \"Timeline: events must have a time attribute\");\n\t\tevent.time = event.time.valueOf();\n\t\tconst index = this._search(event.time);\n\t\tthis._timeline.splice(index + 1, 0, event);\n\t\t// if the length is more than the memory, remove the previous ones\n\t\tif (this.length > this.memory) {\n\t\t\tconst diff = this.length - this.memory;\n\t\t\tthis._timeline.splice(0, diff);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  {Object}  event  The event object to remove from the list.\n\t *  @returns {Timeline} this\n\t */\n\tremove(event: GenericEvent): Timeline<GenericEvent> {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index !== -1) {\n\t\t\tthis._timeline.splice(index, 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the nearest event whose time is less than or equal to the given time.\n\t *  @param  time  The time to query.\n\t */\n\tget(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index !== -1) {\n\t\t\treturn this._timeline[index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Return the first event in the timeline without removing it\n\t *  @returns {Object} The first event object\n\t */\n\tpeek(): GenericEvent | undefined {\n\t\treturn this._timeline[0];\n\t}\n\n\t/**\n\t *  Return the first event in the timeline and remove it\n\t */\n\tshift(): GenericEvent | undefined {\n\t\treturn this._timeline.shift();\n\t}\n\n\t/**\n\t *  Get the event which is scheduled after the given time.\n\t *  @param  time  The time to query.\n\t */\n\tgetAfter(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index + 1 < this._timeline.length) {\n\t\t\treturn this._timeline[index + 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Get the event before the event at the given time.\n\t *  @param  time  The time to query.\n\t */\n\tgetBefore(time: number): GenericEvent | null {\n\t\tconst len = this._timeline.length;\n\t\t// if it's after the last item, return the last item\n\t\tif (len > 0 && this._timeline[len - 1].time < time) {\n\t\t\treturn this._timeline[len - 1];\n\t\t}\n\t\tconst index = this._search(time);\n\t\tif (index - 1 >= 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Cancel events at and after the given time\n\t *  @param  time  The time to query.\n\t */\n\tcancel(after: number): Timeline<GenericEvent> {\n\t\tif (this._timeline.length > 1) {\n\t\t\tlet index = this._search(after);\n\t\t\tif (index >= 0) {\n\t\t\t\tif (this._timeline[index].time === after) {\n\t\t\t\t\t// get the first item with that time\n\t\t\t\t\tfor (let i = index; i >= 0; i--) {\n\t\t\t\t\t\tif (this._timeline[i].time === after) {\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index);\n\t\t\t\t} else {\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t} else if (this._timeline.length === 1) {\n\t\t\t// the first item's time\n\t\t\tif (this._timeline[0].time >= after) {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel events before or equal to the given time.\n\t *  @param  {Number}  time  The time to cancel before.\n\t *  @returns {Timeline} this\n\t */\n\tcancelBefore(time): Timeline<GenericEvent> {\n\t\tconst index = this._search(time);\n\t\tif (index >= 0) {\n\t\t\tthis._timeline = this._timeline.slice(index + 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the previous event if there is one. null otherwise\n\t * @param  {Object} event The event to find the previous one of\n\t * @return {Object}       The event right before the given event\n\t */\n\tpreviousEvent(event): GenericEvent | null {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index > 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t *  Does a binary search on the timeline array and returns the\n\t *  nearest event index whose time is after or equal to the given time.\n\t *  If a time is searched before the first index in the timeline, -1 is returned.\n\t *  If the time is after the end, the index of the last item is returned.\n\t *  @param  time\n\t */\n\tprotected _search(time: number, param: TimelineSearchParam = \"time\"): number {\n\t\tif (this._timeline.length === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet beginning = 0;\n\t\tconst len = this._timeline.length;\n\t\tlet end = len;\n\t\tif (len > 0 && this._timeline[len - 1][param] <= time) {\n\t\t\treturn len - 1;\n\t\t}\n\t\twhile (beginning < end) {\n\t\t\t// calculate the midpoint for roughly equal partition\n\t\t\tlet midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\t\tconst event = this._timeline[midPoint];\n\t\t\tconst nextEvent = this._timeline[midPoint + 1];\n\t\t\tif (event[param] === time) {\n\t\t\t\t// choose the last one that has the same time\n\t\t\t\tfor (let i = midPoint; i < this._timeline.length; i++) {\n\t\t\t\t\tconst testEvent = this._timeline[i];\n\t\t\t\t\tif (testEvent[param] === time) {\n\t\t\t\t\t\tmidPoint = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[param] < time && nextEvent[param] > time) {\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[param] > time) {\n\t\t\t\t// search lower\n\t\t\t\tend = midPoint;\n\t\t\t} else {\n\t\t\t\t// search upper\n\t\t\t\tbeginning = midPoint + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t *  Internal iterator. Applies extra safety checks for\n\t *  removing items from the array.\n\t */\n\tprivate _iterate(\n\t\tcallback: (event: GenericEvent) => void,\n\t\tlowerBound = 0, upperBound = this._timeline.length - 1,\n\t): void {\n\t\tthis._timeline.slice(lowerBound, upperBound + 1).forEach(callback);\n\t}\n\n\t/**\n\t *  Iterate over everything in the array\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\tthis._iterate(callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at or before the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachBefore(time, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array after the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAfter(time, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst lowerBound = this._search(time);\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array between the startTime and endTime.\n\t *  The timerange is inclusive of the startTime, but exclusive of the endTime.\n\t *  range = [startTime, endTime).\n\t *  @param  startTime The time to check if items are before\n\t *  @param  endTime The end of the test interval.\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachBetween(startTime: number, endTime: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\tlet lowerBound = this._search(startTime);\n\t\tlet upperBound = this._search(endTime);\n\t\tif (lowerBound !== -1 && upperBound !== -1) {\n\t\t\tif (this._timeline[lowerBound].time !== startTime) {\n\t\t\t\tlowerBound += 1;\n\t\t\t}\n\t\t\t// exclusive of the end time\n\t\t\tif (this._timeline[upperBound].time === endTime) {\n\t\t\t\tupperBound -= 1;\n\t\t\t}\n\t\t\tthis._iterate(callback, lowerBound, upperBound);\n\t\t} else if (lowerBound === -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at or after the given time. Similar to\n\t *  forEachAfter, but includes the item(s) at the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tlet lowerBound = this._search(time);\n\t\t// work backwards until the event time is less than time\n\t\twhile (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t\t\tlowerBound--;\n\t\t}\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array at the given time\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: GenericEvent) => void): Timeline<GenericEvent> {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(event => {\n\t\t\t\tif (event.time === time) {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t}, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._timeline = [];\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { ToneOscillatorConstructorOptions, ToneOscillatorInterface,\n\tToneOscillatorOptions, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { ToneOscillatorNode } from \"./OscillatorNode\";\n\n/**\n *  Oscillator supports a number of features including\n *  phase rotation, multiple oscillator types (see Oscillator.type),\n *  and Transport syncing (see Oscillator.syncFrequency).\n *\n *  @param frequency Starting frequency\n *  @param type The oscillator type. Read more about type below.\n *  @example\n * //make and start a 440hz sine tone\n * var osc = new Oscillator(440, \"sine\").toMaster().start();\n */\nexport class Oscillator extends Source<ToneOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"Oscillator\";\n\n\t/**\n\t *  the main oscillator\n\t */\n\tprivate _oscillator: ToneOscillatorNode | null = null;\n\n\t/**\n\t *  The frequency control.\n\t */\n\tfrequency: Signal<Frequency>;\n\n\t/**\n\t *  The detune control signal.\n\t */\n\tdetune: Signal<Cents>;\n\n\t/**\n\t *  the periodic wave\n\t */\n\tprivate _wave?: PeriodicWave;\n\n\t/**\n\t *  The partials of the oscillator\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t *  The number of partials to limit or extend the periodic wave by\n\t */\n\tprivate _partialCount: number;\n\n\t/**\n\t *  the phase of the oscillator between 0 - 360\n\t */\n\tprivate _phase: Radians;\n\n\t/**\n\t *  the type of the oscillator\n\t *  @type {string}\n\t *  @private\n\t */\n\tprivate _type;\n\n\tconstructor(options?: Partial<ToneOscillatorConstructorOptions>)\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal<Frequency>({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\tthis.detune = new Signal<Cents>({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, \"detune\");\n\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\t\tthis._phase = options.phase;\n\t\tthis._type = options.type;\n\n\t\tif (options.partialCount && options.type !== \"custom\") {\n\t\t\tthis._type = this.baseType + options.partialCount.toString();\n\t\t}\n\t\tthis.phase = this._phase;\n\t}\n\n\tstatic getDefaults(): ToneOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tpartialCount: 0,\n\t\t\tpartials: [],\n\t\t\tphase: 0,\n\t\t\ttype: \"sine\",\n\t\t}) as ToneOscillatorOptions;\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time?: Time): void {\n\t\tthis.log(\"start\", time);\n\t\t// new oscillator with previous values\n\t\tconst oscillator = new ToneOscillatorNode({\n\t\t\tcontext: this.context,\n\t\t});\n\t\tthis._oscillator = oscillator;\n\t\tif (this._wave) {\n\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t} else {\n\t\t\tthis._oscillator.type = this._type;\n\t\t}\n\t\t// connect the control signal to the oscillator frequency & detune\n\t\tthis._oscillator.connect(this.output);\n\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\tthis.detune.connect(this._oscillator.detune);\n\n\t\t// disconnect onended\n\t\toscillator.onended = () => {\n\t\t\t// defer the callback for the offline context rendering\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.frequency.disconnect(oscillator.frequency);\n\t\t\t\tthis.detune.disconnect(oscillator.detune);\n\t\t\t}, 100);\n\t\t};\n\n\t\t// start the oscillator\n\t\ttime = this.toSeconds(time);\n\t\tthis._oscillator.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tthis.log(\"stop\", time);\n\t\tif (this._oscillator) {\n\t\t\ttime = this.toSeconds(time);\n\t\t\tthis._oscillator.stop(time);\n\t\t}\n\t}\n\n\t/**\n\t * Restart the oscillator. Does not stop the oscillator, but instead\n\t * just cancels any scheduled 'stop' from being invoked.\n\t */\n\trestart(time?: Time): this {\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.cancelStop();\n\t\t}\n\t\tthis._state.cancel(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t *  will also affect the oscillators frequency.\n\t *  @example\n\t * Tone.Transport.bpm.value = 120;\n\t * osc.frequency.value = 440;\n\t * //the ration between the bpm and the frequency will be maintained\n\t * osc.syncFrequency();\n\t * Tone.Transport.bpm.value = 240;\n\t * // the frequency of the oscillator is doubled to 880\n\t */\n\tsyncFrequency(): this {\n\t\tthis.context.transport.syncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsync the oscillator's frequency from the Transport.\n\t *  See Oscillator.syncFrequency\n\t */\n\tunsyncFrequency(): this {\n\t\tthis.context.transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/* tslint:disable */\n\t/**\n\t * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\n\t * setting the first x number of partials of the oscillator. For example: \"sine4\" would\n\t * set be the first 4 partials of the sine wave and \"triangle8\" would set the first\n\t * 8 partials of the triangle wave.\n\t * <br><br>\n\t * Uses PeriodicWave internally even for native types so that it can set the phase.\n\t * PeriodicWave equations are from the\n\t * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).\n\t *\n\t * @memberOf Oscillator#\n\t * @type {string}\n\t * @name type\n\t * @example\n\t * //set it to a square wave\n\t * osc.type = \"square\";\n\t * @example\n\t * //set the first 6 partials of a sawtooth wave\n\t * osc.type = \"sawtooth6\";\n\t */\n\t/* tslint:enable */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tconst isBasicType = [\"sine\", \"square\", \"sawtooth\", \"triangle\"].indexOf(type) !== -1;\n\t\tif (this._phase === 0 && isBasicType) {\n\t\t\tthis._wave = undefined;\n\t\t\tthis._partialCount = 0;\n\t\t\t// just go with the basic approach\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\t// already tested that it's a basic type\n\t\t\t\tthis._oscillator.type = type as OscillatorType;\n\t\t\t}\n\t\t} else {\n\t\t\tconst [real, imag] = this._getRealImaginary(type, this._phase);\n\t\t\tconst periodicWave = this.context.createPeriodicWave(real, imag);\n\t\t\tthis._wave = periodicWave;\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t}\n\t\t}\n\t\tthis._type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._type.replace(this.partialCount, \"\");\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tif (this.partialCount && this._type !== \"custom\" && baseType !== \"custom\") {\n\t\t\tthis.type = baseType + this.partialCount as ToneOscillatorType;\n\t\t} else {\n\t\t\tthis.type = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t * @example\n\t * osc.type = 'sine'\n\t * osc.partialCount = 3\n\t * //is equivalent to\n\t * osc.type = 'sine3'\n\t */\n\tget partialCount(): number {\n\t\treturn this._partialCount;\n\t}\n\tset partialCount(p: number) {\n\t\tlet type = this._type;\n\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(this._type);\n\t\tif (partial) {\n\t\t\ttype = partial[1];\n\t\t}\n\t\tif (this._type !== \"custom\") {\n\t\t\tif (p === 0) {\n\t\t\t\tthis.type = type;\n\t\t\t} else {\n\t\t\t\tthis.type = type + p.toString() as ToneOscillatorType;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Get the object's attributes. Given no arguments get\n\t *  will return all available object properties and their corresponding\n\t *  values.\n\t */\n\tget(): ToneOscillatorOptions {\n\t\tconst values = super.get();\n\t\tif (values.type !== \"custom\") {\n\t\t\tdelete values.partials;\n\t\t}\n\t\treturn values;\n\t}\n\n\t/**\n\t *  Returns the real and imaginary components based\n\t *  on the oscillator type.\n\t *  @returns [real: Float32Array, imaginary: Float32Array]\n\t *  @private\n\t */\n\tprivate _getRealImaginary(type: ToneOscillatorType, phase: Radians): Float32Array[] {\n\t\tconst fftSize = 4096;\n\t\tlet periodicWaveSize = fftSize / 2;\n\n\t\tconst real = new Float32Array(periodicWaveSize);\n\t\tconst imag = new Float32Array(periodicWaveSize);\n\n\t\tlet partialCount = 1;\n\t\tif (type === \"custom\") {\n\t\t\tpartialCount = this._partials.length + 1;\n\t\t\tthis._partialCount = this._partials.length;\n\t\t\tperiodicWaveSize = partialCount;\n\t\t} else {\n\t\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t\t\tif (partial) {\n\t\t\t\tpartialCount = parseInt(partial[2], 10) + 1;\n\t\t\t\tthis._partialCount = parseInt(partial[2], 10);\n\t\t\t\ttype = partial[1] as ToneOscillatorType;\n\t\t\t\tpartialCount = Math.max(partialCount, 2);\n\t\t\t\tperiodicWaveSize = partialCount;\n\t\t\t} else {\n\t\t\t\tthis._partialCount = 0;\n\t\t\t}\n\t\t\tthis._partials = [];\n\t\t}\n\n\t\t// tslint:disable: no-bitwise\n\t\tfor (let n = 1; n < periodicWaveSize; ++n) {\n\t\t\tconst piFactor = 2 / (n * Math.PI);\n\t\t\tlet b;\n\t\t\tswitch (type) {\n\t\t\t\tcase \"sine\":\n\t\t\t\t\tb = (n <= partialCount) ? 1 : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"square\":\n\t\t\t\t\tb = (n & 1) ? 2 * piFactor : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"sawtooth\":\n\t\t\t\t\tb = piFactor * ((n & 1) ? 1 : -1);\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"triangle\":\n\t\t\t\t\tif (n & 1) {\n\t\t\t\t\t\tb = 2 * (piFactor * piFactor) * ((((n - 1) >> 1) & 1) ? -1 : 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t}\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"custom\":\n\t\t\t\t\tb = this._partials[n - 1];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new TypeError(\"Oscillator: invalid type: \" + type);\n\t\t\t}\n\t\t\tif (b !== 0) {\n\t\t\t\treal[n] = -b * Math.sin(phase * n);\n\t\t\t\timag[n] = b * Math.cos(phase * n);\n\t\t\t} else {\n\t\t\t\treal[n] = 0;\n\t\t\t\timag[n] = 0;\n\t\t\t}\n\t\t}\n\t\treturn [real, imag];\n\t}\n\n\t/**\n\t *  Compute the inverse FFT for a given phase.\n\t */\n\tprivate _inverseFFT(real: Float32Array, imag: Float32Array, phase: Radians): number {\n\t\tlet sum = 0;\n\t\tconst len = real.length;\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tsum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t *  Returns the initial value of the oscillator.\n\t */\n\tprotected _getInitialValue(): AudioRange {\n\t\tconst [real, imag] = this._getRealImaginary(this._type, 0);\n\t\tlet maxValue = 0;\n\t\tconst twoPi = Math.PI * 2;\n\t\t// check for peaks in 8 places\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\tmaxValue = Math.max(this._inverseFFT(real, imag, (i / 8) * twoPi), maxValue);\n\t\t}\n\t\treturn -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t}\n\n\t/**\n\t * The partials of the waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tif (partials.length) {\n\t\t\tthis.type = \"custom\";\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t * @example\n\t * osc.phase = 180; //flips the phase of the oscillator\n\t */\n\tget phase(): Degrees {\n\t\treturn this._phase * (180 / Math.PI);\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase * Math.PI / 180;\n\t\t// reset the type\n\t\tthis.type = this._type;\n\t}\n\n\t/**\n\t *  Dispose and disconnect.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._oscillator !== null) {\n\t\t\tthis._oscillator.dispose();\n\t\t}\n\t\tthis._wave = undefined;\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","/**\n *  Tone.js\n *  @author Yotam Mann\n *  @license http://opensource.org/licenses/MIT MIT License\n *  @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\n// import { getContext } from \"./Global\";\nimport \"./type/Units\";\n\n///////////////////////////////////////////////////////////////////////////\n// \tTONE\n///////////////////////////////////////////////////////////////////////////\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseToneOptions {}\n\n/**\n *  @class  Tone is the base class of all other classes.\n *  @constructor\n */\nexport abstract class Tone {\n\n\t/**\n\t * The version number semver\n\t */\n\tstatic version: string = version;\n\n\t/**\n\t * The name of the class\n\t */\n\tprotected abstract name: string;\n\n\t/**\n\t * Takes a partial options an returns the completed options by filling in the defaults\n\t */\n\tstatic getDefaults(): BaseToneOptions {\n\t\treturn {};\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDEBUGGING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Set this debug flag to log all events that happen in this class.\n\t */\n\tdebug: boolean = false;\n\n\t/**\n\t * Prints the outputs to the console log for debugging purposes.\n\t * Prints the contents only if either the object has a property\n\t * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n\t * is set to the name of the class.\n\t * @param args\n\t *  @example\n\t * //prints all logs originating from Tone.OscillatorNode\n\t * Tone.global.TONE_DEBUG_CLASS = \"OscillatorNode\"\n\t */\n\tprotected log(...args): void {\n\t\t// if the object is either set to debug = true\n\t\t// or if there is a string on the Tone.global.with the class name\n\t\t// @ts-ignore\n\t\tif (this.debug || this.toString() === global.TONE_DEBUG_CLASS) {\n\t\t\targs.unshift(this.toString() + \":\");\n\t\t\t// tslint:disable-next-line: no-console\n\t\t\tconsole.log(...args);\n\t\t}\n\t}\n\n\t/**\n\t *  Assert that the statement is true, otherwise invoke the error.\n\t *  @param {Boolean} statement\n\t *  @param {String} error The message which is passed into an Error\n\t *  @private\n\t */\n\tprotected assert(statement: boolean, error: string): void {\n\t\tif (!statement) {\n\t\t\tthrow new Error(error);\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDISPOSING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Indicates if the instance was disposed\n\t */\n\tprivate _wasDisposed: boolean = false;\n\n\t/**\n\t *  disconnect and dispose.\n\t */\n\tdispose(): this {\n\t\tthis._wasDisposed = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Indicates if the instance was disposed. 'Disposing' an\n\t * instance means that all of the Web Audio nodes that were\n\t * created for the instance are disconnected and freed for garbage collection.\n\t */\n\tget disposed(): boolean {\n\t\treturn this._wasDisposed;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tDEFAULTS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  If the `given` parameter is undefined, use the `fallback`.\n\t *  If both `given` and `fallback` are object literals, it will\n\t *  return a deep copy which includes all of the parameters from both\n\t *  objects. If a parameter is undefined in given, it will return\n\t *  the fallback property.\n\t *  <br><br>\n\t *  WARNING: if object is self referential, it will go into an an\n\t *  infinite recursive loop.\n\t *  @memberOf Tone\n\t *  @param  {*} given\n\t *  @param  {*} fallback\n\t *  @return {*}\n\t */\n\t// static defaultArg(given, fallback) {\n\t\t// if (isObject(given) && isObject(fallback)) {\n\t\t// \tconst ret = {};\n\t\t// \t// make a deep copy of the given object\n\t\t// \tfor (const givenProp in given) {\n\t\t// \t\tret[givenProp] = Tone.defaultArg(fallback[givenProp], given[givenProp]);\n\t\t// \t}\n\t\t// \tfor (const fallbackProp in fallback) {\n\t\t// \t\tret[fallbackProp] = Tone.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t\t// \t}\n\t\t// \treturn ret;\n\t\t// } else {\n\t\t// \treturn isUndef(given) ? fallback : given;\n\t\t// }\n\t// }\n\n\t// protected options(argsArray: IArguments, keys: string[]): object {\n\t// \tlet options: any = {};\n\t// \tconst args = Array.from(argsArray);\n\t// \tif (args[0] instanceof BaseAudioContext) {\n\t// \t\toptions.context = args.shift();\n\t// \t}\n\t// \tif (args.length === 1 && isObject(args[0])) {\n\t// \t\toptions = Object.assign(options, args[0]);\n\t// \t} else {\n\t// \t\tfor (let i = 0; i < keys.length; i++) {\n\t// \t\t\tif (isDefined(args[i])) {\n\t// \t\t\t\toptions[keys[i]] = args[i];\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \treturn deepMerge(this.getDefaults(), options);\n\t// }\n\n\t/**\n\t * Convert the class to a string\n\t * @example\n\t * const osc = new Oscillator()\n\t * osc.toString() // \"Oscillator\"\n\t */\n\ttoString(): string {\n\t\treturn this.name;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tSTATIC\n\t///////////////////////////////////////////////////////////////////////////\n\n\t// static get context(): import(\"./context/Context\").Context {\n\t// \treturn getContext();\n\t// }\n\n\t// static now(): Seconds {\n\t// \treturn Tone.context.now();\n\t// }\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport \"../type/Units\";\nimport { getDefaultsFromInstance, omitFromObject, optionsFromArguments } from \"../util/Defaults\";\nimport { RecursivePartial } from \"../util/Interface\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck\";\nimport { Context } from \"./Context\";\n\n/**\n * A unit which process audio\n */\nexport interface ToneWithContextOptions {\n\tcontext: Context;\n}\n\n/**\n * The Base class for all nodes that have an AudioContext.\n */\nexport abstract class ToneWithContext<Options extends ToneWithContextOptions> extends Tone {\n\n\t/**\n\t * The context belonging to the node.\n\t */\n\treadonly context: Context;\n\n\t/**\n\t * The default context to use if no AudioContext is passed in to the constructor\n\t */\n\treadonly defaultContext?: Context;\n\n\tconstructor(context?: Context | Partial<ToneWithContextOptions>) {\n\t\tconst options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n\t\tsuper();\n\t\tif (this.defaultContext) {\n\t\t\tthis.context = this.defaultContext;\n\t\t} else {\n\t\t\tthis.context = options.context;\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneWithContextOptions {\n\t\treturn {\n\t\t\tcontext: getContext(),\n\t\t};\n\t}\n\n\t/**\n\t * Return the current time of the Context clock plus the lookAhead.\n\t */\n\tnow(): Seconds {\n\t\treturn this.context.currentTime + this.context.lookAhead;\n\t}\n\n\t/**\n\t * Return the current time of the Context clock without any lookAhead.\n\t */\n\timmediate(): Seconds {\n\t\treturn this.context.currentTime;\n\t}\n\n\t/**\n\t * The duration in seconds of one sample.\n\t */\n\tget sampleTime(): Seconds {\n\t\treturn 1 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * The number of seconds of 1 processing block (128 samples)\n\t */\n\tget blockTime(): Seconds {\n\t\treturn 128 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * Convert the incoming time to seconds\n\t */\n\ttoSeconds(time?: Time): Seconds {\n\t\treturn new TimeClass(this.context, time).toSeconds();\n\t}\n\n\t/**\n\t * Convert the input to a frequency number\n\t */\n\ttoFrequency(freq: Frequency): Hertz {\n\t\treturn new FrequencyClass(this.context, freq).toFrequency();\n\t}\n\n\t/**\n\t * Convert the input time into ticks\n\t */\n\ttoTicks(time: Time | TimeClass): Ticks {\n\t\treturn new TransportTimeClass(this.context, time).toTicks();\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tGET/SET\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Get the object's attributes.\n\t * @example\n\t * osc.get();\n\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t */\n\tget(): Options {\n\t\tconst defaults = getDefaultsFromInstance(this) as Options;\n\t\tObject.keys(defaults).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute)) {\n\t\t\t\tconst member = this[attribute];\n\t\t\t\tif (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n\t\t\t\t\tdefaults[attribute] = member.value;\n\t\t\t\t} else if (member instanceof ToneWithContext) {\n\t\t\t\t\tdefaults[attribute] = member.get();\n\t\t\t\t// otherwise make sure it's a serializable type\n\t\t\t\t} else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n\t\t\t\t\tdefaults[attribute] = member;\n\t\t\t\t} else {\n\t\t\t\t\t// remove all undefined and unserializable attributes\n\t\t\t\t\tdelete defaults[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn defaults;\n\t}\n\n\t/**\n\t * Set the parameters at once. Either pass in an\n\t * object mapping parameters to values, or to set a\n\t * single parameter, by passing in a string and value.\n\t * The last argument is an optional ramp time which\n\t * will ramp any signal values to their destination value\n\t * over the duration of the rampTime.\n\t * @param  params\n\t * @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : \"highpass\"\n\t * });\n\t */\n\tset(props: RecursivePartial<Options>): this {\n\t\tObject.keys(props).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute) && isDefined(this[attribute])) {\n\t\t\t\tif (this[attribute] && isDefined(this[attribute].value) && isDefined(this[attribute].setValueAtTime)) {\n\t\t\t\t\tthis[attribute].value = props[attribute];\n\t\t\t\t} else if (this[attribute] instanceof ToneWithContext) {\n\t\t\t\t\tthis[attribute].set(props[attribute]);\n\t\t\t\t} else {\n\t\t\t\t\tthis[attribute] = props[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n","import { AbstractParam } from \"../context/AbstractParam\";\nimport { dbToGain, gainToDb } from \"../type/Conversions\";\nimport \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined, isNumber } from \"../util/TypeCheck\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\n\nexport interface ParamOptions extends ToneWithContextOptions {\n\tunits: UnitName;\n\tvalue?: any;\n\tparam: AudioParam;\n\tconvert: boolean;\n}\n\n/**\n * the possible automation types\n */\ntype AutomationType = \"linear\" | \"exponential\" | \"setValue\" | \"setTarget\" | \"cancel\";\n\n/**\n * The events on the automation\n */\nexport interface AutomationEvent {\n\ttype: AutomationType;\n\ttime: number;\n\tvalue: number;\n\tconstant?: number;\n}\n\n/**\n *  Param wraps the native Web Audio's AudioParam to provide\n * additional unit conversion functionality. It also\n * serves as a base-class for classes which have a single,\n * automatable parameter.\n */\nexport class Param<Type extends Unit = number>\nextends ToneWithContext<ParamOptions>\nimplements AbstractParam<Type> {\n\n\tname = \"Param\";\n\n\tstatic getDefaults(): ParamOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t} as ParamOptions);\n\t}\n\n\t/**\n\t * The input connection\n\t */\n\treadonly input: AudioParam;\n\treadonly units: UnitName;\n\tconvert: boolean;\n\toverridden: boolean = false;\n\n\t/**\n\t * The timeline which tracks all of the automations.\n\t */\n\tprotected _events: Timeline<AutomationEvent>;\n\n\t/**\n\t *  The native parameter to control\n\t */\n\tprotected _param: AudioParam;\n\n\t/**\n\t *  The default value before anything is assigned\n\t */\n\tprotected _initialValue: number;\n\n\t/**\n\t *  The minimum output value\n\t */\n\tprivate _minOutput = 1e-5;\n\n\tconstructor(param: AudioParam, units?: Unit, convert?: boolean);\n\tconstructor(options: Partial<ParamOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]));\n\n\t\tconst options = optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]);\n\n\t\tthis.assert(isDefined(options.param) && options.param instanceof AudioParam, \"param must be an AudioParam\");\n\n\t\t// initialize\n\t\tthis._param = this.input = options.param;\n\t\tthis._events = new Timeline<AutomationEvent>(1000);\n\t\tthis._initialValue = this._param.value;\n\t\tthis.units = options.units;\n\t\tthis.convert = options.convert;\n\n\t\t// if the value is defined, set it immediately\n\t\tif (isDefined(options.value)) {\n\t\t\tthis.setValueAtTime(options.value, 0);\n\t\t}\n\t}\n\n\tget value(): Type {\n\t\tconst now = this.now();\n\t\treturn this.getValueAtTime(now);\n\t}\n\tset value(value: Type) {\n\t\tthis._initialValue = this._fromType(value);\n\t\tthis.cancelScheduledValues(this.now());\n\t\tthis.setValueAtTime(value, this.now());\n\t}\n\n\tget minValue(): number {\n\t\tif (this.units === \"time\" || this.units === \"frequency\" ||\n\t\t\tthis.units === \"normalRange\" || this.units === \"positive\" ||\n\t\t\tthis.units === \"transportTime\" || this.units === \"ticks\" ||\n\t\t\tthis.units === \"bpm\" || this.units === \"hertz\" || this.units === \"samples\") {\n\t\t\treturn 0;\n\t\t} else if (this.units === \"audioRange\") {\n\t\t\treturn -1;\n\t\t} else if (this.units === \"decibels\") {\n\t\t\treturn -Infinity;\n\t\t} else {\n\t\t\treturn this._param.minValue;\n\t\t}\n\t}\n\n\tget maxValue(): number {\n\t\tif (this.units === \"normalRange\" ||\n\t\t\tthis.units === \"audioRange\") {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn this._param.maxValue;\n\t\t}\n\t}\n\n\t/**\n\t * Type guard based on the unit name\n\t */\n\tprivate _is<T>(arg: any, type: UnitName): arg is T {\n\t\treturn this.units === type;\n\t}\n\n\t/**\n\t *  Convert the given value from the type specified by Param.units\n\t *  into the destination value (such as Gain or Frequency).\n\t */\n\tprotected _fromType(val: Type): number {\n\t\tif (this.convert && !this.overridden) {\n\t\t\tif (this._is<Time>(val, \"time\")) {\n\t\t\t\treturn this.toSeconds(val);\n\t\t\t} else if (this._is<Decibels>(val, \"decibels\")) {\n\t\t\t\treturn dbToGain(val);\n\t\t\t} else if (this._is<Frequency>(val, \"frequency\")) {\n\t\t\t\treturn this.toFrequency(val);\n\t\t\t} else if (this._is<NormalRange>(val, \"normalRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, 0), 1);\n\t\t\t} else if (this._is<AudioRange>(val, \"audioRange\")) {\n\t\t\t\treturn Math.min(Math.max(val, -1), 1);\n\t\t\t} else if (this._is<Positive>(val, \"positive\")) {\n\t\t\t\treturn Math.max(val, 0);\n\t\t\t} else if (this._is<number>(val, \"number\")) {\n\t\t\t\treturn val;\n\t\t\t} else {\n\t\t\t\treturn val as number;\n\t\t\t}\n\t\t} else {\n\t\t\treturn val as number;\n\t\t}\n\t}\n\n\t/**\n\t * Convert the parameters value into the units specified by Param.units.\n\t */\n\tprotected _toType(val: number): Type {\n\t\tif (this.convert && this.units === \"decibels\") {\n\t\t\treturn gainToDb(val) as Type;\n\t\t} else {\n\t\t\treturn val as Type;\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// ABSTRACT PARAM INTERFACE\n\t// all docs are generated from ParamInterface.ts\n\t///////////////////////////////////////////////////////////////////////////\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tconst numericValue = this._fromType(value);\n\t\tthis._events.add({\n\t\t\ttime,\n\t\t\ttype: \"setValue\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(\"setValue\", value, time);\n\t\tthis.assert(isNumber(numericValue) && isNumber(time),\n\t\t\t`Invalid argument to setValueAtTime: ${numericValue}, ${time}`);\n\t\tthis._param.setValueAtTime(numericValue, time);\n\t\treturn this;\n\t}\n\n\tgetValueAtTime(time: Time): Type {\n\t\tconst computedTime = Math.max(this.toSeconds(time), 0);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tconst before = this._events.get(computedTime);\n\t\tlet value = this._initialValue;\n\t\t// if it was set by\n\t\tif (before === null) {\n\t\t\tvalue = this._initialValue;\n\t\t} else if (before.type === \"setTarget\" && (after === null || after.type === \"setValue\")) {\n\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\tlet previousVal;\n\t\t\tif (previous === null) {\n\t\t\t\tpreviousVal = this._initialValue;\n\t\t\t} else {\n\t\t\t\tpreviousVal = previous.value;\n\t\t\t}\n\t\t\tif (isDefined(before.constant)) {\n\t\t\t\tvalue = this._exponentialApproach(before.time, previousVal, before.value, before.constant, computedTime);\n\t\t\t}\n\t\t} else if (after === null) {\n\t\t\tvalue = before.value;\n\t\t} else if (after.type === \"linear\" || after.type === \"exponential\") {\n\t\t\tlet beforeValue = before.value;\n\t\t\tif (before.type === \"setTarget\") {\n\t\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\t\tif (previous === null) {\n\t\t\t\t\tbeforeValue = this._initialValue;\n\t\t\t\t} else {\n\t\t\t\t\tbeforeValue = previous.value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (after.type === \"linear\") {\n\t\t\t\tvalue = this._linearInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t} else {\n\t\t\t\tvalue = this._exponentialInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = before.value;\n\t\t}\n\t\treturn this._toType(value);\n\t}\n\n\tsetRampPoint(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tlet currentVal = this.getValueAtTime(time);\n\t\tthis.cancelAndHoldAtTime(time);\n\t\tif (this._fromType(currentVal) === 0) {\n\t\t\tcurrentVal = this._toType(this._minOutput);\n\t\t}\n\t\tthis.setValueAtTime(currentVal, time);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: Type, endTime: Time): this {\n\t\tconst numericValue = this._fromType(value);\n\t\tendTime = this.toSeconds(endTime);\n\t\tthis._events.add({\n\t\t\ttime: endTime,\n\t\t\ttype: \"linear\",\n\t\t\tvalue : numericValue,\n\t\t});\n\t\tthis.log(\"linear\", value, endTime);\n\t\tthis.assert(isNumber(numericValue) && isNumber(endTime),\n\t\t\t`Invalid argument(s) to linearRampToValueAtTime: ${numericValue}, ${endTime}`);\n\t\tthis._param.linearRampToValueAtTime(numericValue, endTime);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: Type, endTime: Time): this {\n\t\tlet numericValue = this._fromType(value);\n\t\tnumericValue = Math.max(this._minOutput, numericValue);\n\t\tendTime = this.toSeconds(endTime);\n\t\t// store the event\n\t\tthis._events.add({\n\t\t\ttime: endTime,\n\t\t\ttype: \"exponential\",\n\t\t\tvalue : numericValue,\n\t\t});\n\t\tthis.log(\"exponential\", value, endTime);\n\t\tthis.assert(isNumber(numericValue) && isNumber(endTime),\n\t\t\t`Invalid argument(s) to exponentialRampToValueAtTime: ${numericValue}, ${endTime}`);\n\t\tthis._param.exponentialRampToValueAtTime(numericValue, endTime);\n\t\treturn this;\n\t}\n\n\texponentialRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\tlinearRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\ttargetRampTo(value: Type, rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialApproachValueAtTime(value, startTime, rampTime);\n\t\treturn this;\n\t}\n\n\texponentialApproachValueAtTime(value: Type, time: Time, rampTime: Time): this {\n\t\tconst timeConstant = Math.log(this.toSeconds(rampTime) + 1) / Math.log(200);\n\t\ttime = this.toSeconds(time);\n\t\treturn this.setTargetAtTime(value, time, timeConstant);\n\t}\n\n\tsetTargetAtTime(value: Type, startTime: Time, timeConstant: Positive): this {\n\t\tconst numericValue = this._fromType(value);\n\t\t// The value will never be able to approach without timeConstant > 0.\n\t\tthis.assert(timeConstant > 0, \"timeConstant must be greater than 0\");\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis._events.add({\n\t\t\tconstant: timeConstant,\n\t\t\ttime: startTime,\n\t\t\ttype: \"setTarget\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(\"setTarget\", value, startTime, timeConstant);\n\t\tthis.assert(isNumber(numericValue) && isNumber(startTime),\n\t\t\t`Invalid argument(s) to setTargetAtTime: ${numericValue}, ${startTime}`);\n\t\tthis._param.setTargetAtTime(numericValue, startTime, timeConstant);\n\t\treturn this;\n\t}\n\n\tsetValueCurveAtTime(values: Type[], startTime: Time, duration: Time, scaling: number = 1): this {\n\t\tduration = this.toSeconds(duration);\n\t\tstartTime = this.toSeconds(startTime);\n\t\tconst startingValue = this._fromType(values[0]) * scaling;\n\t\tthis.setValueAtTime(this._toType(startingValue), startTime);\n\t\tconst segTime = duration / (values.length - 1);\n\t\tfor (let i = 1; i < values.length; i++) {\n\t\t\tconst numericValue = this._fromType(values[i]) * scaling;\n\t\t\tthis.linearRampToValueAtTime(this._toType(numericValue), startTime + i * segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tcancelScheduledValues(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._events.cancel(time);\n\t\tthis.assert(isNumber(time), `Invalid argument to cancelScheduledValues: ${time}`);\n\t\tthis._param.cancelScheduledValues(time);\n\t\tthis.log(\"cancel\", time);\n\t\treturn this;\n\t}\n\n\tcancelAndHoldAtTime(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tconst valueAtTime = this._fromType(this.getValueAtTime(time));\n\t\tthis.log(\"cancelAndHoldAtTime\", time, \"value=\" + valueAtTime);\n\n\t\t// remove the schedule events\n\t\tthis._param.cancelScheduledValues(time);\n\n\t\t// if there is an event at the given time\n\t\t// and that even is not a \"set\"\n\t\tconst before = this._events.get(time);\n\t\tconst after = this._events.getAfter(time);\n\t\tif (before && before.time === time) {\n\t\t\t// remove everything after\n\t\t\tif (after) {\n\t\t\t\tthis._events.cancel(after.time);\n\t\t\t} else {\n\t\t\t\tthis._events.cancel(time + this.sampleTime);\n\t\t\t}\n\t\t} else if (after) {\n\t\t\t// cancel the next event(s)\n\t\t\tthis._events.cancel(after.time);\n\t\t\tif (after.type === \"linear\") {\n\t\t\t\tthis.linearRampToValueAtTime(this._toType(valueAtTime), time);\n\t\t\t} else if (after.type === \"exponential\") {\n\t\t\t\tthis.exponentialRampToValueAtTime(this._toType(valueAtTime), time);\n\t\t\t}\n\t\t}\n\n\t\t// set the value at the given time\n\t\tthis._events.add({\n\t\t\ttime,\n\t\t\ttype: \"setValue\",\n\t\t\tvalue: valueAtTime,\n\t\t});\n\t\tthis._param.setValueAtTime(valueAtTime, time);\n\t\treturn this;\n\t}\n\n\trampTo(value: Type, rampTime: Time = 0.1, startTime?: Time): this {\n\t\tif (this.units === \"frequency\" || this.units === \"bpm\" || this.units === \"decibels\") {\n\t\t\tthis.exponentialRampTo(value, rampTime, startTime);\n\t\t} else {\n\t\t\tthis.linearRampTo(value, rampTime, startTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tAUTOMATION CURVE CALCULATIONS\n\t// \tMIT License, copyright (c) 2014 Jordan Santell\n\t///////////////////////////////////////////////////////////////////////////\n\n\t// Calculates the the value along the curve produced by setTargetAtTime\n\tprotected _exponentialApproach(t0: number, v0: number, v1: number, timeConstant: number, t: number): number {\n\t\treturn v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t}\n\n\t// Calculates the the value along the curve produced by linearRampToValueAtTime\n\tprotected _linearInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t}\n\n\t// Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\tprotected _exponentialInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { ftom } from \"./Conversions\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\n\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * var t = Time(\"4n\");//a quarter note\n */\nexport class TimeClass<Type extends Seconds | Ticks = Seconds, Unit extends string = TimeBaseUnit>\nextends TimeBaseClass<Type, Unit> {\n\n\tname = \"Time\";\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign(super._getExpressions(), {\n\t\t\tnow: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\treturn this._now() + new (this.constructor as typeof TimeClass)(this.context, capture).valueOf() as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^\\+(.+)/,\n\t\t\t},\n\t\t\tquantize: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\tconst quantTo = new TimeClass(this.context, capture).valueOf();\n\t\t\t\t\treturn this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));\n\t\t\t\t},\n\t\t\t\tregexp: /^@(.+)/,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Quantize the time by the given subdivision. Optionally add a\n\t * percentage which will move the time value towards the ideal\n\t * quantized value by that percentage.\n\t * @param  val    The subdivision to quantize to\n\t * @param  percent  Move the time value towards the quantized value by a percentage.\n\t * @example\n\t * Time(21).quantize(2) //returns 22\n\t * Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t */\n\tquantize(subdiv: number | Subdivision | TimeObject, percent = 1): Type {\n\t\tconst subdivision = new (this.constructor as typeof TimeClass)(this.context, subdiv).valueOf();\n\t\tconst value = this.valueOf();\n\t\tconst multiple = Math.round(value / subdivision);\n\t\tconst ideal = multiple * subdivision;\n\t\tconst diff = ideal - value;\n\t\treturn value + diff * percent as Type;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\t/**\n\t *  Convert a Time to Notation. The notation values are will be the\n\t *  closest representation between 1m to 128th note.\n\t *  @return {Notation}\n\t *  @example\n\t * //if the Transport is at 120bpm:\n\t * Time(2).toNotation();//returns \"1m\"\n\t */\n\ttoNotation(): Subdivision {\n\t\tconst time = this.toSeconds();\n\t\tconst testNotations: Subdivision[] = [\"1m\"];\n\t\tfor (let power = 1; power < 9; power++) {\n\t\t\tconst subdiv = Math.pow(2, power);\n\t\t\ttestNotations.push(subdiv + \"n.\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"n\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"t\" as Subdivision);\n\t\t}\n\t\ttestNotations.push(\"0\");\n\t\t// find the closets notation representation\n\t\tlet closest = testNotations[0];\n\t\tlet closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n\t\ttestNotations.forEach(notation => {\n\t\t\tconst notationSeconds = new TimeClass(this.context, notation).toSeconds();\n\t\t\tif (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n\t\t\t\tclosest = notation;\n\t\t\t\tclosestSeconds = notationSeconds;\n\t\t\t}\n\t\t});\n\t\treturn closest;\n\t}\n\n\t/**\n\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t */\n\ttoBarsBeatsSixteenths(): BarsBeatsSixteenths {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tlet quarters = this.valueOf() / quarterTime;\n\t\tquarters = parseFloat(quarters.toFixed(4));\n\t\tconst measures = Math.floor(quarters / this._getTimeSignature());\n\t\tlet sixteenths = (quarters % 1) * 4;\n\t\tquarters = Math.floor(quarters) % this._getTimeSignature();\n\t\tconst sixteenthString = sixteenths.toString();\n\t\tif (sixteenthString.length > 3) {\n\t\t\t// the additional parseFloat removes insignificant trailing zeroes\n\t\t\tsixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n\t\t}\n\t\tconst progress = [measures, quarters, sixteenths];\n\t\treturn progress.join(\":\");\n\t}\n\n\t/**\n\t *  Return the time in ticks.\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.round(quarters * this._getPPQ());\n\t}\n\n\t/**\n\t *  Return the time in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t *  Return the value as a midi note.\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.toFrequency());\n\t}\n\n\tprotected _now(): Type {\n\t\treturn this.context.now() as Type;\n\t}\n}\n\n/**\n * Create a TimeClass from a time string or number.\n * @param value A value which reprsents time\n * @param units The value's units if they can't be inferred by the value.\n */\nexport function Time(value?: TimeValue, units?: TimeBaseUnit): TimeClass<Seconds> {\n\treturn new TimeClass(getContext(), value, units);\n}\n","export { connect, disconnect, connectSeries } from \"./context/ToneAudioNode\";\n","// import \"../type/Type\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\n\nexport type BasicPlaybackState = \"started\" | \"stopped\";\nexport type PlaybackState = BasicPlaybackState | \"paused\";\n\nexport interface StateTimelineEvent extends TimelineEvent {\n\tstate: PlaybackState;\n}\n\n/**\n *  A Timeline State. Provides the methods: `setStateAtTime(\"state\", time)` and `getValueAtTime(time)`\n *  @param initial The initial state of the StateTimeline.  Defaults to `undefined`\n */\nexport class StateTimeline<AdditionalOptions extends {} = {}> extends Timeline<StateTimelineEvent & AdditionalOptions> {\n\n\t/**\n\t *  The initial state\n\t */\n\tprivate _initial: PlaybackState;\n\n\tconstructor(initial: PlaybackState = \"stopped\") {\n\t\tsuper();\n\t\tthis._initial = initial;\n\t}\n\n\t/**\n\t *  Returns the scheduled state scheduled before or at\n\t *  the given time.\n\t *  @param  time  The time to query.\n\t *  @return  The name of the state input in setStateAtTime.\n\t */\n\tgetValueAtTime(time: Seconds): PlaybackState {\n\t\tconst event = this.get(time);\n\t\tif (event !== null) {\n\t\t\treturn event.state;\n\t\t} else {\n\t\t\treturn this._initial;\n\t\t}\n\t}\n\n\t/**\n\t *  Add a state to the timeline.\n\t * @param  state The name of the state to set.\n\t * @param  time  The time to query.\n\t * @param options Any additional options that are needed in the timeline.\n\t */\n\tsetStateAtTime(state: PlaybackState, time: Seconds, options?: AdditionalOptions): this {\n\t\t// all state changes need to be >= the previous state time\n\t\t// TODO throw error if time < the previous event time\n\t\tthis.add(Object.assign({}, options, {\n\t\t\tstate,\n\t\t\ttime,\n\t\t}));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Return the event before the time with the given state\n\t *  @param  state The state to look for\n\t *  @param  time  When to check before\n\t *  @return  The event with the given state before the time\n\t */\n\tgetLastState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tfor (let i = index; i >= 0; i--) {\n\t\t\tconst event = this._timeline[i];\n\t\t\tif (event.state === state) {\n\t\t\t\treturn event;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Return the event after the time with the given state\n\t *  @param  state The state to look for\n\t *  @param  time  When to check from\n\t *  @return  The event with the given state after the time\n\t */\n\tgetNextState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tif (index !== -1) {\n\t\t\tfor (let i = index; i < this._timeline.length; i++) {\n\t\t\t\tconst event = this._timeline[i];\n\t\t\t\tif (event.state === state) {\n\t\t\t\t\treturn event;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n */\nexport class TransportTimeClass<Type extends Seconds | Ticks = Seconds> extends TimeClass<Type> {\n\n\tname = \"TransportTime\";\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected _now(): Type {\n\t\treturn this.context.transport.seconds as Type;\n\t}\n}\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n */\nexport function TransportTime(value?: TimeValue, units?: TimeBaseUnit): TransportTimeClass {\n\treturn new TransportTimeClass(getContext(), value, units);\n}\n","import \"./Units\";\n\n/**\n *  Equal power gain scale. Good for cross-fading.\n *  @param  percent (0-1)\n */\nexport function equalPowerScale(percent: NormalRange): number {\n\tconst piFactor = 0.5 * Math.PI;\n\treturn Math.sin(percent * piFactor);\n}\n\n/**\n *  Convert decibels into gain.\n */\nexport function dbToGain(db: Decibels): GainFactor {\n\treturn Math.pow(10, db / 20);\n}\n\n/**\n *  Convert gain to decibels.\n */\nexport function gainToDb(gain: GainFactor): Decibels {\n\treturn 20 * (Math.log(gain) / Math.LN10);\n}\n\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * tone.intervalToFrequencyRatio(0); // 1\n * tone.intervalToFrequencyRatio(12); // 2\n * tone.intervalToFrequencyRatio(-12); // 0.5\n */\nexport function intervalToFrequencyRatio(interval: Interval): number {\n\treturn Math.pow(2, (interval / 12));\n}\n\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\nlet A4: Hertz = 440;\n\nexport function getA4(): Hertz {\n\treturn A4;\n}\n\nexport function setA4(freq: Hertz): void {\n\tA4 = freq;\n}\n\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * ftom(440); // returns 69\n */\nexport function ftom(frequency: Hertz): MidiNote {\n\treturn 69 + Math.round(12 * Math.log2(frequency / A4));\n}\n\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n */\nexport function mtof(midi: MidiNote): Hertz {\n\treturn A4 * Math.pow(2, (midi - 69) / 12);\n}\n","import { Tone } from \"../Tone\";\nimport { isUndef } from \"./TypeCheck\";\n\nexport interface EmitterEventObject {\n\t[event: string]: Array<(...args: any[]) => void>;\n}\n\n/**\n * Emitter gives classes which extend it\n * the ability to listen for and emit events.\n * Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n * MIT (c) 2011 Jerome Etienne.\n */\nexport class Emitter<EventType extends string = string> extends Tone {\n\n\tname = \"Emitter\";\n\n\t/**\n\t * Private container for the events\n\t */\n\tprivate _events?: EmitterEventObject;\n\n\t/**\n\t *  Bind a callback to a specific event.\n\t *  @param  event     The name of the event to listen for.\n\t *  @param  callback  The callback to invoke when the event is emitted\n\t */\n\ton(event: EventType, callback: (...args: any[]) => void): this {\n\t\t// split the event\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (!this._events.hasOwnProperty(eventName)) {\n\t\t\t\tthis._events[eventName] = [];\n\t\t\t}\n\t\t\tthis._events[eventName].push(callback);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Bind a callback which is only invoked once\n\t *  @param  event     The name of the event to listen for.\n\t *  @param  callback  The callback to invoke when the event is emitted\n\t */\n\tonce(event: EventType, callback: (...args: any[]) => void): this {\n\t\tconst boundCallback = (...args: any[])  => {\n\t\t\t// invoke the callback\n\t\t\tcallback(...args);\n\t\t\t// remove the event\n\t\t\tthis.off(event, boundCallback);\n\t\t};\n\t\tthis.on(event, boundCallback);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove the event listener.\n\t *  @param  event     The event to stop listening to.\n\t *  @param  callback  The callback which was bound to the event with Emitter.on.\n\t *                    If no callback is given, all callbacks events are removed.\n\t */\n\toff(event: EventType, callback?: (...args: any[]) => void): this {\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tif (isUndef(callback)) {\n\t\t\t\t\tthis._events[event] = [];\n\t\t\t\t} else {\n\t\t\t\t\tconst eventList = this._events[event];\n\t\t\t\t\tfor (let i = 0; i < eventList.length; i++) {\n\t\t\t\t\t\tif (eventList[i] === callback) {\n\t\t\t\t\t\t\teventList.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Invoke all of the callbacks bound to the event\n\t *  with any arguments passed in.\n\t *  @param  event  The name of the event.\n\t *  @param args The arguments to pass to the functions listening.\n\t */\n\temit(event, ...args: any[]): this {\n\t\tif (this._events) {\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tconst eventList = this._events[event].slice(0);\n\t\t\t\tfor (let i = 0, len = eventList.length; i < len; i++) {\n\t\t\t\t\teventList[i].apply(this, args);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Add Emitter functions (on/off/emit) to the object\n\t */\n\tstatic mixin(constr: any): void {\n\t\t// instance._events = {};\n\t\t[\"on\", \"once\", \"off\", \"emit\"].forEach(name => {\n\t\t\tconst property = Object.getOwnPropertyDescriptor(Emitter.prototype, name) as PropertyDescriptor;\n\t\t\tObject.defineProperty(constr.prototype, name, property);\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events = undefined;\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { PulseOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\n\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @param frequency The frequency of the oscillator\n * @param width The width of the pulse\n * @example\n * var pulse = new PulseOscillator(\"E5\", 0.4).toMaster().start();\n */\nexport class PulseOscillator extends Source<PulseOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"PulseOscillator\";\n\n\t/**\n\t *  The width of the pulse.\n\t */\n\twidth: Signal<AudioRange> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"audioRange\",\n\t});\n\n\t/**\n\t *  gate the width amount\n\t */\n\tprivate _widthGate: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t *  the sawtooth oscillator\n\t */\n\tprivate _sawtooth: Oscillator = new Oscillator({\n\t\tcontext: this.context,\n\t\ttype : \"sawtooth\",\n\t});\n\n\t/**\n\t *  The frequency control.\n\t */\n\tfrequency: Signal<Frequency> = this._sawtooth.frequency;\n\n\t/**\n\t *  The detune in cents.\n\t */\n\tdetune: Signal<Cents> = this._sawtooth.detune;\n\n\t/**\n\t *  Threshold the signal to turn it into a square\n\t */\n\tprivate _thresh = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => val <= 0 ? -1 : 1,\n\t});\n\n\tconstructor(options?: Partial<PulseOscillatorOptions>);\n\tconstructor(frequency?: Frequency, width?: AudioRange);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]));\n\t\tconst options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n\n\t\tthis.width.setValueAtTime(options.width, 0);\n\t\tthis._sawtooth.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis._sawtooth.detune.setValueAtTime(options.detune, 0);\n\t\tthis._sawtooth.phase = options.phase;\n\n\t\t// connections\n\t\tthis._sawtooth.chain(this._thresh, this.output);\n\t\tthis.width.chain(this._widthGate, this._thresh);\n\t\treadOnly(this, [\"width\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PulseOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tphase: 0,\n\t\t\ttype: \"pulse\" as \"pulse\",\n\t\t\twidth: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.start(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.stop(time);\n\t\t// the width is still connected to the output.\n\t\t// that needs to be stopped also\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(0, time);\n\t}\n\n\t/**\n\t *  Restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._sawtooth.restart(computedTime);\n\t\tthis._widthGate.gain.cancelScheduledValues(computedTime);\n\t\tthis._widthGate.gain.setValueAtTime(1, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._sawtooth.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._sawtooth.phase = phase;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pulse\".\n\t */\n\tget type(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pulse\".\n\t */\n\tget baseType(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t *  Clean up method.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sawtooth.dispose();\n\t\tthis.width.dispose();\n\t\tthis._widthGate.dispose();\n\t\tthis._thresh.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\n\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @param {number=} value Constant value to multiple\n * @example\n * const mult = new Multiply();\n * const sigA = new Tone.Signal(3);\n * const sigB = new Tone.Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * //output of mult is 12.\n *  @example\n * const mult = new Multiply(10);\n * const sig = new Tone.Signal(2).connect(mult);\n * //the output of mult is 20.\n */\nexport class Multiply extends Signal<number> {\n\n\tname = \"Multiply\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection\n\t */\n\treadonly override = false;\n\n\t/**\n\t * the input gain node\n\t */\n\tprivate _mult: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The multiplcant input.\n\t */\n\tinput = this._mult;\n\n\t/**\n\t * The product of the input and {@link factor}\n\t */\n\toutput = this._mult;\n\n\t/**\n\t * The multiplication factor. Can be set directly or a signal can be connected to it.\n\t */\n\tfactor: Param<number>;\n\n\tconstructor(options?: Partial<SignalOptions<number>>);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(value?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis.factor = this._param = this._mult.gain as unknown as Param<number>;\n\t\tthis.factor.setValueAtTime(options.value, 0);\n\t}\n\n\tstatic getDefaults(): SignalOptions<number> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._mult.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface VolumeOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  @class Volume is a simple volume node, useful for creating a volume fader.\n *\n *  @extends {Tone.AudioNode}\n *  @constructor\n *  @param {Decibels} [volume=0] the initial volume\n *  @example\n * var vol = new Volume(-12);\n * instrument.chain(vol, Tone.Master);\n */\nexport class Volume extends ToneAudioNode<VolumeOptions> {\n\n\tname = \"Volume\";\n\n\t/**\n\t * the output node\n\t */\n\toutput: Gain<Decibels> = new Gain({\n\t\tcontext: this.context,\n\t\tunits: \"decibels\",\n\t});\n\tprotected _internalChannels = [this.output];\n\n\t/**\n\t * Input and output are the same\n\t */\n\tinput = this.output;\n\n\t/**\n\t * The unmuted volume\n\t */\n\tprivate _unmutedVolume: Decibels;\n\n\t/**\n\t *  The volume control in decibels.\n\t */\n\tvolume: Param<Decibels> = this.output.gain;\n\n\tconstructor(options?: Decibels | Partial<VolumeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n\n\t\tthis.volume.value = options.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis._unmutedVolume = options.volume;\n\n\t\t// set the mute initially\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): VolumeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * volume.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.volume.value === -Infinity;\n\t}\n\tset mute(mute: boolean) {\n\t\tif (!this.mute && mute) {\n\t\t\tthis._unmutedVolume = this.volume.value;\n\t\t\t// maybe it should ramp here?\n\t\t\tthis.volume.value = -Infinity;\n\t\t} else if (this.mute && !mute) {\n\t\t\tthis.volume.value = this._unmutedVolume;\n\t\t}\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\nimport { TransportTimeClass } from \"./TransportTime\";\n\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * const t = Ticks(\"4n\"); //a quarter note as ticks\n */\nexport class TicksClass extends TransportTimeClass<Ticks> {\n\n\tname = \"Ticks\";\n\n\treadonly defaultUnits: TimeBaseUnit = \"i\";\n\n\t/**\n\t * Get the current time in the given units\n\t */\n\tprotected _now(): Ticks {\n\t\treturn this.context.transport.ticks;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Ticks {\n\t\treturn this._getPPQ() * beats;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Ticks {\n\t\treturn Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Ticks {\n\t\treturn ticks;\n\t}\n\n\t/**\n\t *  Return the time in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\treturn this.valueOf() as Ticks;\n\t}\n\n\t/**\n\t *  Return the time in seconds\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn (this.valueOf() / this._getPPQ()) * (60 / this._getBpm());\n\t}\n}\n\nexport function Ticks(value?: TimeValue, units?: TimeBaseUnit): TicksClass {\n\treturn new TicksClass(getContext(), value, units);\n}\n","import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck\";\n\ninterface ToneAudioBufferOptions {\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n\treverse: boolean;\n\tonload: (buffer?: ToneAudioBuffer) => void;\n\tonerror: (error: Error) => void;\n}\n\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n *\n * Aside from load callbacks from individual buffers, ToneAudioBuffer\n * provides events which keep track of the loading progress\n * of _all_ of the buffers. These are ToneAudioBuffer.on(\"load\" / \"progress\" / \"error\")\n *\n * @param url The url to load, or the audio buffer to set.\n * @param onload A callback which is invoked after the buffer is loaded.\n *                            It's recommended to use `ToneAudioBuffer.on('load', callback)` instead\n *                            since it will give you a callback when _all_ buffers are loaded.\n * @param onerror The callback to invoke if there is an error\n * @example\n * var buffer = new ToneAudioBuffer(\"path/to/sound.mp3\", function(){\n * \t//the buffer is now available.\n * \tvar buff = buffer.get();\n * });\n * @example\n * //can load provide fallback extension types if the first type is not supported.\n * var buffer = new ToneAudioBuffer(\"path/to/sound.[mp3|ogg|wav]\");\n */\nexport class ToneAudioBuffer extends Tone {\n\n\tname = \"ToneAudioBuffer\";\n\n\t/**\n\t *  stores the loaded AudioBuffer\n\t */\n\tprivate _buffer?: AudioBuffer;\n\n\t/**\n\t *  indicates if the buffer should be reversed or not\n\t */\n\tprivate _reversed!: boolean;\n\n\t/**\n\t * Callback when the buffer is loaded.\n\t */\n\tonload: (buffer: ToneAudioBuffer) => void = noOp;\n\n\tconstructor(options?: Partial<ToneAudioBufferOptions>);\n\tconstructor(\n\t\turl?: string | ToneAudioBuffer | AudioBuffer,\n\t\tonload?: (buffer: ToneAudioBuffer) => void,\n\t\tonerror?: (error: Error) => void,\n\t);\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tconst options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, [\"url\", \"onload\", \"onerror\"]);\n\n\t\tthis.reverse = options.reverse;\n\t\tthis.onload = options.onload;\n\n\t\tif (options.url && options.url instanceof AudioBuffer || options.url instanceof ToneAudioBuffer) {\n\t\t\tthis.set(options.url);\n\t\t} else if (isString(options.url)) {\n\t\t\t// initiate the download\n\t\t\tthis.load(options.url).catch(options.onerror);\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneAudioBufferOptions {\n\t\treturn {\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\treverse: false,\n\t\t};\n\t}\n\n\t/**\n\t * The sample rate of the AudioBuffer\n\t */\n\tget sampleRate(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.sampleRate;\n\t\t} else {\n\t\t\treturn getContext().sampleRate;\n\t\t}\n\t}\n\n\t/**\n\t *  Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n\t */\n\tset(buffer: AudioBuffer | ToneAudioBuffer): this {\n\t\tif (buffer instanceof ToneAudioBuffer) {\n\t\t\t// if it's loaded, set it\n\t\t\tif (buffer.loaded) {\n\t\t\t\tthis._buffer = buffer.get();\n\t\t\t} else {\n\t\t\t\t// otherwise when it's loaded, invoke it's callback\n\t\t\t\tbuffer.onload = () => {\n\t\t\t\t\tthis.set(buffer);\n\t\t\t\t\tthis.onload(this);\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tthis._buffer = buffer;\n\t\t}\n\t\t// reverse it initially\n\t\tif (this._reversed) {\n\t\t\tthis._reverse();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The audio buffer stored in the object.\n\t */\n\tget(): AudioBuffer | undefined {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t *  Makes an fetch request for the selected url then decodes the file as an audio buffer.\n\t * \tInvokes the callback once the audio buffer loads.\n\t *  @param url The url of the buffer to load. filetype support depends on the browser.\n\t *  @returns A Promise which resolves with this ToneAudioBuffer\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tconst promise = ToneAudioBuffer.load(url);\n\t\tToneAudioBuffer.downloads.push(promise);\n\t\ttry {\n\t\t\tconst audioBuffer = await promise;\n\t\t\tthis.set(audioBuffer);\n\t\t\t// invoke the onload method\n\t\t\tthis.onload(this);\n\t\t} catch (e) {\n\t\t\t// remove the failed file before throwing error\n\t\t\tconst index = ToneAudioBuffer.downloads.indexOf(promise);\n\t\t\tToneAudioBuffer.downloads.splice(index, 1);\n\t\t\tthrow e;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the audio buffer from the array.\n\t * To create a multichannel AudioBuffer, pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t */\n\tfromArray(array: Float32Array | Float32Array[]): this {\n\t\tconst isMultidimensional = isArray(array) && array[0].length > 0;\n\t\tconst channels = isMultidimensional ? array.length : 1;\n\t\tconst len = isMultidimensional ? (array[0] as Float32Array).length : array.length;\n\t\tconst context = getContext();\n\t\tconst buffer = context.createBuffer(channels, len, context.sampleRate);\n\t\tconst multiChannelArray: Float32Array[] = !isMultidimensional && channels === 1 ?\n\t\t\t[array as Float32Array] : array as Float32Array[];\n\n\t\tfor (let c = 0; c < channels; c++) {\n\t\t\tbuffer.copyToChannel(multiChannelArray[c], c);\n\t\t}\n\t\tthis._buffer = buffer;\n\t\treturn this;\n\t}\n\n\t/**\n\t * \tSums multiple channels into 1 channel\n\t *  @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoMono(chanNum?: number): this {\n\t\tif (isNumber(chanNum)) {\n\t\t\tthis.fromArray(this.toArray(chanNum));\n\t\t} else {\n\t\t\tlet outputArray = new Float32Array(this.length as number);\n\t\t\tconst numChannels = this.numberOfChannels;\n\t\t\tfor (let channel = 0; channel < numChannels; channel++) {\n\t\t\t\tconst channelArray = this.toArray(channel) as Float32Array;\n\t\t\t\tfor (let i = 0; i < channelArray.length; i++) {\n\t\t\t\t\toutputArray[i] += channelArray[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// divide by the number of channels\n\t\t\toutputArray = outputArray.map(sample => sample / numChannels);\n\t\t\tthis.fromArray(outputArray);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * \tGet the buffer as an array. Single channel buffers will return a 1-dimensional\n\t * \tFloat32Array, and multichannel buffers will return multidimensional arrays.\n\t *  @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoArray(channel?: number): Float32Array | Float32Array[] {\n\t\tif (isNumber(channel)) {\n\t\t\treturn this.getChannelData(channel);\n\t\t} else if (this.numberOfChannels === 1) {\n\t\t\treturn this.toArray(0);\n\t\t} else {\n\t\t\tconst ret: Float32Array[] = [];\n\t\t\tfor (let c = 0; c < this.numberOfChannels; c++) {\n\t\t\t\tret[c] = this.getChannelData(c);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t/**\n\t *  Returns the Float32Array representing the PCM audio data for the specific channel.\n\t *  @param  channel  The channel number to return\n\t *  @return The audio as a TypedArray\n\t */\n\tgetChannelData(channel: number): Float32Array {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.getChannelData(channel);\n\t\t} else {\n\t\t\treturn new Float32Array(0);\n\t\t}\n\t}\n\n\t/**\n\t *  Cut a subsection of the array and return a buffer of the\n\t *  subsection. Does not modify the original buffer\n\t *  @param start The time to start the slice\n\t *  @param end The end time to slice. If none is given will default to the end of the buffer\n\t */\n\tslice(start: Seconds, end: Seconds = this.duration): ToneAudioBuffer {\n\t\tconst startSamples = Math.floor(start * this.sampleRate);\n\t\tconst endSamples = Math.floor(end * this.sampleRate);\n\t\tconst replacementArray: Float32Array[] = [];\n\t\tfor (let i = 0; i < this.numberOfChannels; i++) {\n\t\t\treplacementArray[i] = this.toArray(i).slice(startSamples, endSamples) as Float32Array;\n\t\t}\n\t\tconst retBuffer = new ToneAudioBuffer().fromArray(replacementArray);\n\t\treturn retBuffer;\n\t}\n\n\t/**\n\t *  Reverse the buffer.\n\t */\n\tprivate _reverse(): this {\n\t\tif (this.loaded) {\n\t\t\tfor (let i = 0; i < this.numberOfChannels; i++) {\n\t\t\t\tArray.prototype.reverse.call(this.getChannelData(i));\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffer is loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this.length > 0;\n\t}\n\n\t/**\n\t * The duration of the buffer in seconds.\n\t */\n\tget duration(): Seconds {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.duration;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The length of the buffer in samples\n\t */\n\tget length(): Samples {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n\t */\n\tget numberOfChannels(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.numberOfChannels;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tget reverse(): boolean {\n\t\treturn this._reversed;\n\t}\n\tset reverse(rev: boolean) {\n\t\tif (this._reversed !== rev) {\n\t\t\tthis._reversed = rev;\n\t\t\tthis._reverse();\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// STATIC METHODS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  A path which is prefixed before every url.\n\t */\n\tstatic baseUrl = \"\";\n\n\t/**\n\t *  Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n\t *  pass in a multidimensional array.\n\t *  @param array The array to fill the audio buffer\n\t *  @return A ToneAudioBuffer created from the array\n\t */\n\tstatic fromArray(array: Float32Array | Float32Array[]): ToneAudioBuffer {\n\t\treturn (new ToneAudioBuffer()).fromArray(array);\n\t}\n\n\t/**\n\t * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n\t * @param  url The url to load.\n\t * @return A promise which resolves to a ToneAudioBuffer\n\t */\n\tstatic async fromUrl(url: string): Promise<ToneAudioBuffer> {\n\t\tconst buffer = new ToneAudioBuffer();\n\t\treturn await buffer.load(url);\n\t}\n\n\t/**\n\t * All of the downloads\n\t */\n\tstatic downloads: Array<Promise<AudioBuffer>> = [];\n\n\t/**\n\t *  Loads a url using fetch and returns the AudioBuffer.\n\t */\n\tstatic async load(url: string): Promise<AudioBuffer> {\n\n\t\t// test if the url contains multiple extensions\n\t\tconst matches = url.match(/\\[(.+\\|?)+\\]$/);\n\t\tif (matches) {\n\t\t\tconst extensions = matches[1].split(\"|\");\n\t\t\tlet extension = extensions[0];\n\t\t\tfor (const ext of extensions) {\n\t\t\t\tif (ToneAudioBuffer.supportsType(ext)) {\n\t\t\t\t\textension = ext;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\turl = url.replace(matches[0], extension);\n\t\t}\n\n\t\tconst response = await fetch(ToneAudioBuffer.baseUrl + url);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`could not load url: ${url}`);\n\t\t}\n\t\tconst arrayBuffer = await response.arrayBuffer();\n\n\t\tconst audioBuffer = await getContext().decodeAudioData(arrayBuffer);\n\n\t\treturn audioBuffer;\n\t}\n\n\t/**\n\t *  Checks a url's extension to see if the current browser can play that file type.\n\t *  @param url The url/extension to test\n\t *  @return If the file extension can be played\n\t *  @static\n\t *  @example\n\t * ToneAudioBuffer.supportsType(\"wav\"); //returns true\n\t * ToneAudioBuffer.supportsType(\"path/to/file.wav\"); //returns true\n\t */\n\tstatic supportsType(url: string): boolean {\n\t\tconst extensions = url.split(\".\");\n\t\tconst extension = extensions[extensions.length - 1];\n\t\tconst response = document.createElement(\"audio\").canPlayType(\"audio/\" + extension);\n\t\treturn response !== \"\";\n\t}\n\n\t/**\n\t *  Returns a Promise which resolves when all of the buffers have loaded\n\t */\n\tstatic async loaded(): Promise<void> {\n\t\tfor (const promise of ToneAudioBuffer.downloads) {\n\t\t\tawait promise;\n\t\t}\n\t}\n}\n","import { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions\";\nimport { ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\n\nexport type FrequencyUnit = TimeBaseUnit | \"midi\";\n\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `eval` method.\n * @example\n * Frequency(\"C3\") // 261\n * Frequency(38, \"midi\") //\n * Frequency(\"C3\").transpose(4);\n */\nexport class FrequencyClass<Type extends number = Hertz> extends TimeClass<Type, FrequencyUnit> {\n\n\tname = \"Frequency\";\n\n\treadonly defaultUnits: FrequencyUnit = \"hz\";\n\n\t/**\n\t * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n\t * to generate all the other pitch values from notes. A4's values in Hertz.\n\t */\n\tstatic get A4(): Hertz {\n\t\treturn getA4();\n\t}\n\tstatic set A4(freq: Hertz) {\n\t\tsetA4(freq);\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tAUGMENT BASE EXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign({}, super._getExpressions(), {\n\t\t\tmidi : {\n\t\t\t\tregexp : /^(\\d+(?:\\.\\d+)?midi)/,\n\t\t\t\tmethod(value): number {\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(value);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tnote : {\n\t\t\t\tregexp : /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t\t\t\tmethod(pitch, octave): number {\n\t\t\t\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\t\t\t\tconst noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn noteNumber;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(noteNumber);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\ttr : {\n\t\t\t\tregexp : /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t\t\tmethod(m, q, s): number {\n\t\t\t\t\tlet total = 1;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total;\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tEXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Transposes the frequency by the given number of semitones.\n\t *  @return  A new transposed frequency\n\t *  @example\n\t * Frequency(\"A4\").transpose(3); //\"C5\"\n\t */\n\ttranspose(interval: Interval): FrequencyClass {\n\t\treturn new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n\t}\n\n\t/**\n\t *  Takes an array of semitone intervals and returns\n\t *  an array of frequencies transposed by those intervals.\n\t *  @return  Returns an array of Frequencies\n\t *  @example\n\t * Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t */\n\tharmonize(intervals: Interval[]): FrequencyClass[] {\n\t\treturn intervals.map(interval => {\n\t\t\treturn this.transpose(interval);\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Return the value of the frequency as a MIDI note\n\t *  @return  {MIDI}\n\t *  @example\n\t * Frequency(\"C4\").toMidi(); //60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.valueOf());\n\t}\n\n\t/**\n\t *  Return the value of the frequency in Scientific Pitch Notation\n\t *  @return  {Note}\n\t *  @example\n\t * Frequency(69, \"midi\").toNote(); //\"A4\"\n\t */\n\ttoNote(): Note {\n\t\tconst freq = this.toFrequency();\n\t\tconst log = Math.log2(freq / FrequencyClass.A4);\n\t\tlet noteNumber = Math.round(12 * log) + 57;\n\t\tconst octave = Math.floor(noteNumber / 12);\n\t\tif (octave < 0) {\n\t\t\tnoteNumber += -12 * octave;\n\t\t}\n\t\tconst noteName = scaleIndexToNote[noteNumber % 12];\n\t\treturn noteName + octave.toString();\n\t}\n\n\t/**\n\t *  Return the duration of one cycle in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn 1 / super.toSeconds();\n\t}\n\n\t/**\n\t *  Return the duration of one cycle in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.floor(quarters * this._getPPQ());\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS HELPERS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  With no arguments, return 0\n\t */\n\tprotected _noArg(): Type {\n\t\treturn 0 as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn freq as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn 1 / ((ticks * 60) / (this._getBpm() * this._getPPQ())) as Type;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn 1 / super._beatsToUnits(beats) as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn 1 / seconds as Type;\n\t}\n\n\t/**\n\t * Convert a MIDI note to frequency value.\n\t * @param  midi The midi number to convert.\n\t * @return The corresponding frequency value\n\t * @example\n\t * FrequencyClass.mtof(69); // returns 440\n\t */\n\tstatic mtof(midi: MidiNote): Hertz {\n\t\treturn mtof(midi);\n\t}\n\n\t/**\n\t * Convert a frequency value to a MIDI note.\n\t * @param frequency The value to frequency value to convert.\n\t * @example\n\t * Frequency.ftom(440); // returns 69\n\t */\n\tstatic ftom(frequency: Hertz): MidiNote {\n\t\treturn ftom(frequency);\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tFREQUENCY CONVERSIONS\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Note to scale index\n *  @type  {Object}\n *  @private\n */\nconst noteToScaleIndex = {\n\t// tslint:disable-next-line\n\t\"cbb\" : -2, \"cb\" : -1, \"c\" : 0, \"c#\" : 1, \"cx\" : 2,\n\t\"dbb\" : 0, \"db\" : 1, \"d\" : 2, \"d#\" : 3, \"dx\" : 4,\n\t\"ebb\" : 2, \"eb\" : 3, \"e\" : 4, \"e#\" : 5, \"ex\" : 6,\n\t\"fbb\" : 3, \"fb\" : 4, \"f\" : 5, \"f#\" : 6, \"fx\" : 7,\n\t\"gbb\" : 5, \"gb\" : 6, \"g\" : 7, \"g#\" : 8, \"gx\" : 9,\n\t\"abb\" : 7, \"ab\" : 8, \"a\" : 9, \"a#\" : 10, \"ax\" : 11,\n\t\"bbb\" : 9, \"bb\" : 10, \"b\" : 11, \"b#\" : 12, \"bx\" : 13,\n};\n\n/**\n *  scale index to note (sharps)\n *  @type  {Array}\n *  @private\n */\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n/**\n * Convert a value into a FrequencyClass object.\n */\nexport function Frequency(value?: TimeValue | Frequency, units?: FrequencyUnit): FrequencyClass {\n\treturn new FrequencyClass(getContext(), value, units);\n}\n","///////////////////////////////////////////////////////////////////////////\n// INITIALIZING NEW CONTEXT\n///////////////////////////////////////////////////////////////////////////\n\ntype Context = import(\"./Context\").Context;\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to setup a new Context\n */\nexport function onContextInit(cb: (ctx: Context) => void): void {\n\tnotifyNewContext.push(cb);\n}\n\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\nexport function initializeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyNewContext.forEach(cb => cb(ctx));\n}\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyCloseContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to tear down a Context\n */\nexport function onContextClose(cb: (ctx: Context) => void): void {\n\tnotifyCloseContext.push(cb);\n}\n\nexport function closeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyCloseContext.forEach(cb => cb(ctx));\n}\n","import { Ticker, TickerClockSource } from \"../clock/Ticker\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { Omit } from \"../util/Interface\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isString } from \"../util/TypeCheck\";\nimport { getAudioContext } from \"./AudioContext\";\nimport { closeContext, initializeContext } from \"./ContextInitialization\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Destination = import(\"./Destination\").Destination;\n\nexport type ContextLatencyHint = AudioContextLatencyCategory | \"fastest\";\n\n// these are either not used in Tone.js or deprecated and not implemented.\nexport type ExcludedFromBaseAudioContext = \"createScriptProcessor\" | \"onstatechange\" | \"addEventListener\"\n\t| \"removeEventListener\" | \"listener\" | \"dispatchEvent\" | \"audioWorklet\" | \"destination\";\n\n// the subset of the BaseAudioContext which Tone.Context implements.\nexport type BaseAudioContextSubset = Omit<BaseAudioContext, ExcludedFromBaseAudioContext>;\n\nexport interface ContextOptions {\n\tclockSource: TickerClockSource;\n\tlatencyHint: ContextLatencyHint;\n\tlookAhead: Seconds;\n\tupdateInterval: Seconds;\n\tcontext: BaseAudioContext;\n}\n\nexport interface ContextTimeoutEvent {\n\tcallback: (...args: any[]) => void;\n\tid: number;\n\ttime: Seconds;\n}\n\n/**\n * Wrapper around the native AudioContext.\n */\nexport class Context extends Emitter<\"statechange\" | \"tick\"> implements BaseAudioContextSubset {\n\n\tname = \"Context\";\n\n\t/**\n\t * The amount of time into the future events are scheduled. Giving Web Audio\n\t * a short amount of time into the future to schedule events can reduce clicks and\n\t * improve performance. This value can be set to 0 to get the lowest latency.\n\t */\n\tlookAhead: Seconds;\n\n\t/**\n\t * private reference to the BaseAudioContext\n\t */\n\tprotected readonly _context: BaseAudioContext;\n\n\t/**\n\t * A reliable callback method\n\t */\n\tprivate readonly _ticker: Ticker;\n\n\t/**\n\t *  The default latency hint\n\t */\n\tprivate _latencyHint: ContextLatencyHint | Seconds;\n\n\t/**\n\t *  An object containing all of the constants AudioBufferSourceNodes\n\t */\n\tprivate _constants = new Map<number, AudioBufferSourceNode>();\n\n\t/**\n\t *  All of the setTimeout events.\n\t */\n\tprivate _timeouts: Timeline<ContextTimeoutEvent> = new Timeline();\n\n\t/**\n\t *  The timeout id counter\n\t */\n\tprivate _timeoutIds = 0;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _transport!: Transport;\n\n\t/**\n\t * A reference the Destination singleton belonging to this context\n\t */\n\tprivate _destination!: Destination;\n\n\t/**\n\t * Private indicator if the context has been initialized\n\t */\n\tprivate _initialized: boolean = false;\n\n\tconstructor(context?: BaseAudioContext);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<ContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Context.getDefaults(), arguments, [\"context\"]);\n\n\t\tthis._context = options.context;\n\n\t\tthis._latencyHint = options.latencyHint;\n\t\tthis.lookAhead = options.lookAhead;\n\n\t\tthis._ticker = new Ticker(this.emit.bind(this, \"tick\"), options.clockSource, options.updateInterval);\n\t\tthis.on(\"tick\", this._timeoutLoop.bind(this));\n\n\t\t// fwd events from the context\n\t\tthis._context.addEventListener(\"statechange\", () => {\n\t\t\tthis.emit(\"statechange\", this.state);\n\t\t});\n\t}\n\n\tstatic getDefaults(): ContextOptions {\n\t\treturn {\n\t\t\tclockSource: \"worker\",\n\t\t\tcontext: getAudioContext(),\n\t\t\tlatencyHint: \"interactive\",\n\t\t\tlookAhead: 0.1,\n\t\t\tupdateInterval: 0.03,\n\t\t};\n\t}\n\n\t/**\n\t * Finish setting up the context. **You usually do not need to do this manually.**\n\t */\n\tinitialize(): this {\n\t\tif (!this._initialized) {\n\t\t\t// add any additional modules\n\t\t\tinitializeContext(this);\n\t\t\tthis._initialized = true;\n\t\t}\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// BASE AUDIO CONTEXT METHODS\n\t///////////////////////////////////////////////////////////////////////\n\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn this._context.createAnalyser();\n\t}\n\tcreateOscillator(): OscillatorNode {\n\t\treturn this._context.createOscillator();\n\t}\n\tcreateBufferSource(): AudioBufferSourceNode {\n\t\treturn this._context.createBufferSource();\n\t}\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn this._context.createBiquadFilter();\n\t}\n\tcreateBuffer(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer {\n\t\treturn this._context.createBuffer(numberOfChannels, length, sampleRate);\n\t}\n\tcreateChannelMerger(numberOfInputs?: number | undefined): ChannelMergerNode {\n\t\treturn this._context.createChannelMerger(numberOfInputs);\n\t}\n\tcreateChannelSplitter(numberOfOutputs?: number | undefined): ChannelSplitterNode {\n\t\treturn this._context.createChannelSplitter(numberOfOutputs);\n\t}\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn this._context.createConstantSource();\n\t}\n\tcreateConvolver(): ConvolverNode {\n\t\treturn this._context.createConvolver();\n\t}\n\tcreateDelay(maxDelayTime?: number | undefined): DelayNode {\n\t\treturn this._context.createDelay(maxDelayTime);\n\t}\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn this._context.createDynamicsCompressor();\n\t}\n\tcreateGain(): GainNode {\n\t\treturn this._context.createGain();\n\t}\n\tcreateIIRFilter(feedforward: number[], feedback: number[]): IIRFilterNode {\n\t\treturn this._context.createIIRFilter(feedforward, feedback);\n\t}\n\tcreatePanner(): PannerNode {\n\t\treturn this._context.createPanner();\n\t}\n\tcreatePeriodicWave(\n\t\treal: number[] | Float32Array,\n\t\timag: number[] | Float32Array,\n\t\tconstraints?: PeriodicWaveConstraints | undefined,\n\t): PeriodicWave {\n\t\treturn this._context.createPeriodicWave(real, imag, constraints);\n\t}\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn this._context.createStereoPanner();\n\t}\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn this._context.createWaveShaper();\n\t}\n\tdecodeAudioData(audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn this._context.decodeAudioData(audioData);\n\t}\n\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget state(): AudioContextState {\n\t\treturn this._context.state;\n\t}\n\t/**\n\t *  The current time in seconds of the AudioContext.\n\t */\n\tget sampleRate(): number {\n\t\treturn this._context.sampleRate;\n\t}\n\t/**\n\t *  The listener\n\t */\n\tget listener(): AudioListener {\n\t\treturn this._context.listener;\n\t}\n\n\t/**\n\t *  There is only one Transport per Context. It is created on initialization.\n\t */\n\tget transport(): Transport {\n\t\tthis.assert(this._initialized, \"The context must be initialized before being used by invoking context.initialize()\");\n\t\treturn this._transport;\n\t}\n\tset transport(t: Transport) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._transport = t;\n\t}\n\n\t/**\n\t *  A reference to the Context's destination node.\n\t */\n\tget destination(): Destination {\n\t\tthis.assert(this._initialized, \"The context must be initialized before being used by invoking context.initialize()\");\n\t\treturn this._destination;\n\t}\n\tset destination(d: Destination) {\n\t\tthis.assert(!this._initialized, \"The transport cannot be set after initialization.\");\n\t\tthis._destination = d;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// TICKER\n\t///////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  How often the interval callback is invoked.\n\t *  This number corresponds to how responsive the scheduling\n\t *  can be. context.updateInterval + context.lookAhead gives you the\n\t *  total latency between scheduling an event and hearing it.\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._ticker.updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._ticker.updateInterval = interval;\n\t}\n\n\t/**\n\t *  What the source of the clock is, either \"worker\" (default),\n\t *  \"timeout\", or \"offline\" (none).\n\t */\n\tget clockSource(): TickerClockSource {\n\t\treturn this._ticker.type;\n\t}\n\tset clockSource(type: TickerClockSource) {\n\t\tthis._ticker.type = type;\n\t}\n\n\t/**\n\t * The type of playback, which affects tradeoffs between audio\n\t * output latency and responsiveness.\n\t * In addition to setting the value in seconds, the latencyHint also\n\t * accepts the strings \"interactive\" (prioritizes low latency),\n\t * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t * latency and performance), and \"fastest\" (lowest latency, might glitch more often).\n\t * @example\n\t * //set the lookAhead to 0.3 seconds\n\t * Tone.context.latencyHint = 0.3;\n\t */\n\tget latencyHint(): ContextLatencyHint | Seconds {\n\t\treturn this._latencyHint;\n\t}\n\tset latencyHint(hint: ContextLatencyHint | Seconds) {\n\t\tlet lookAheadValue = 0;\n\t\tthis._latencyHint = hint;\n\t\tif (isString(hint)) {\n\t\t\tswitch (hint) {\n\t\t\t\tcase \"interactive\":\n\t\t\t\t\tlookAheadValue = 0.1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"playback\":\n\t\t\t\t\tlookAheadValue = 0.8;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"balanced\":\n\t\t\t\t\tlookAheadValue = 0.25;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"fastest\":\n\t\t\t\t\tlookAheadValue = 0.01;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.lookAhead = lookAheadValue;\n\t\tthis.updateInterval = lookAheadValue / 3;\n\t}\n\n\t/**\n\t *  The unwrapped AudioContext.\n\t */\n\tget rawContext(): BaseAudioContext {\n\t\treturn this._context;\n\t}\n\n\t/**\n\t * The current audio context time plus a short {@link lookAhead}.\n\t */\n\tnow(): Seconds {\n\t\treturn this._context.currentTime + this.lookAhead;\n\t}\n\n\t/**\n\t *  Starts the audio context from a suspended state. This is required\n\t *  to initially start the AudioContext.\n\t */\n\tresume(): Promise<void> {\n\t\tif (this._context.state === \"suspended\" && this._context instanceof AudioContext) {\n\t\t\treturn this._context.resume();\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t *  Promise which is invoked when the context is running.\n\t *  Tries to resume the context if it's not started.\n\t */\n\tasync close(): Promise<Context> {\n\t\tif (this._context instanceof AudioContext) {\n\t\t\tawait this._context.close();\n\t\t}\n\t\tif (this._initialized) {\n\t\t\tcloseContext(this);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Generate a looped buffer at some constant value.\n\t */\n\tgetConstant(val: number): AudioBufferSourceNode {\n\t\tif (this._constants.has(val)) {\n\t\t\treturn this._constants.get(val) as AudioBufferSourceNode;\n\t\t} else {\n\t\t\tconst buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t\t\tconst arr = buffer.getChannelData(0);\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = val;\n\t\t\t}\n\t\t\tconst constant = this._context.createBufferSource();\n\t\t\tconstant.channelCount = 1;\n\t\t\tconstant.channelCountMode = \"explicit\";\n\t\t\tconstant.buffer = buffer;\n\t\t\tconstant.loop = true;\n\t\t\tconstant.start(0);\n\t\t\tthis._constants.set(val, constant);\n\t\t\treturn constant;\n\t\t}\n\t}\n\n\t/**\n\t *  Clean up. Also closes the audio context.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._ticker.dispose();\n\t\tthis._timeouts.dispose();\n\t\tObject.keys(this._constants).map(val => this._constants[val].disconnect());\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// TIMEOUTS\n\t///////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The private loop which keeps track of the context scheduled timeouts\n\t *  Is invoked from the clock source\n\t */\n\tprivate _timeoutLoop(): void  {\n\t\tconst now = this.now();\n\t\tlet firstEvent = this._timeouts.peek();\n\t\twhile (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n\t\t\t// invoke the callback\n\t\t\tfirstEvent.callback();\n\t\t\t// shift the first event off\n\t\t\tthis._timeouts.shift();\n\t\t\t// get the next one\n\t\t\tfirstEvent = this._timeouts.peek();\n\t\t}\n\t}\n\n\t/**\n\t *  A setTimeout which is guarented by the clock source.\n\t *  Also runs in the offline context.\n\t *  @param  fn       The callback to invoke\n\t *  @param  timeout  The timeout in seconds\n\t *  @returns ID to use when invoking Context.clearTimeout\n\t */\n\tsetTimeout(fn: (...args: any[]) => void, timeout: Seconds): number {\n\t\tthis._timeoutIds++;\n\t\tconst now = this.now();\n\t\tthis._timeouts.add({\n\t\t\tcallback : fn,\n\t\t\tid : this._timeoutIds,\n\t\t\ttime : now + timeout,\n\t\t});\n\t\treturn this._timeoutIds;\n\t}\n\n\t/**\n\t *  Clears a previously scheduled timeout with Tone.context.setTimeout\n\t *  @param  id  The ID returned from setTimeout\n\t */\n\tclearTimeout(id: number): Context {\n\t\tthis._timeouts.forEach(event => {\n\t\t\tif (event.id === id) {\n\t\t\t\tthis._timeouts.remove(event);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n","import { InputNode, OutputNode } from \"Tone/core/context/ToneAudioNode\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { isArray, isObject, isString } from \"../../core/util/TypeCheck\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\n\ntype BasicEnvelopeCurve = \"linear\" | \"exponential\";\ntype InternalEnvelopeCurve = BasicEnvelopeCurve | number[];\nexport type EnvelopeCurve = EnvelopeCurveName | number[];\n\nexport interface EnvelopeOptions extends ToneAudioNodeOptions {\n\tattack: Time;\n\tdecay: Time;\n\tsustain: NormalRange;\n\trelease: Time;\n\tattackCurve: EnvelopeCurve;\n\treleaseCurve: EnvelopeCurve;\n\tdecayCurve: BasicEnvelopeCurve;\n}\n\n/**\n *  Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n *  envelope generator. Envelope outputs a signal which\n *  can be connected to an AudioParam or Tone.Signal.\n *  <img src=\"https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg\">\n *\n *  @param attack The amount of time it takes for the envelope to go from\n *                         0 to it's maximum value.\n *  @param decay\tThe period of time after the attack that it takes for the envelope\n *                       \tto fall to the sustain value. Value must be greater than 0.\n *  @param sustain\tThe percent of the maximum value that the envelope rests at until\n *                                \tthe release is triggered.\n *  @param release\tThe amount of time after the release is triggered it takes to reach 0.\n *                         \tValue must be greater than 0.\n *  @example\n * //an amplitude envelope\n * var gainNode = Tone.context.createGain();\n * var env = new Envelope({\n * \t\"attack\" : 0.1,\n * \t\"decay\" : 0.2,\n * \t\"sustain\" : 1,\n * \t\"release\" : 0.8,\n * });\n * env.connect(gainNode.gain);\n */\nexport class Envelope extends ToneAudioNode<EnvelopeOptions> {\n\n\tname = \"Envelope\";\n\n\t/**\n\t *  When triggerAttack is called, the attack time is the amount of\n\t *  time it takes for the envelope to reach it's maximum value.\n\t */\n\tattack: Time;\n\n\t/**\n\t *  After the attack portion of the envelope, the value will fall\n\t *  over the duration of the decay time to it's sustain value.\n\t */\n\tdecay: Time;\n\n\t/**\n\t * \tThe sustain value is the value\n\t * \twhich the envelope rests at after triggerAttack is\n\t * \tcalled, but before triggerRelease is invoked.\n\t */\n\tsustain: NormalRange;\n\n\t/**\n\t *  After triggerRelease is called, the envelope's\n\t *  value will fall to it's miminum value over the\n\t *  duration of the release time.\n\t */\n\trelease: Time;\n\n\t/**\n\t *  The automation curve type for the attack\n\t */\n\tprivate _attackCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t *  The automation curve type for the decay\n\t */\n\tprivate _decayCurve!: BasicEnvelopeCurve;\n\n\t/**\n\t *  The automation curve type for the release\n\t */\n\tprivate _releaseCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t *  the signal which is output.\n\t */\n\tprotected _sig: Signal<NormalRange> = new Signal({\n\t\tcontext: this.context,\n\t\tvalue: 0,\n\t});\n\tprotected _internalChannels = [this._sig];\n\n\t/**\n\t * The output signal of the envelope\n\t */\n\toutput: OutputNode = this._sig;\n\n\t/**\n\t * Envelope has no input\n\t */\n\tinput: InputNode | undefined = undefined;\n\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tconst options = optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n\n\t\tthis.attack = options.attack;\n\t\tthis.decay = options.decay;\n\t\tthis.sustain = options.sustain;\n\t\tthis.release = options.release;\n\t\tthis.attackCurve = options.attackCurve;\n\t\tthis.releaseCurve = options.releaseCurve;\n\t\tthis.decayCurve = options.decayCurve;\n\t}\n\n\tstatic getDefaults(): EnvelopeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tattack : 0.01,\n\t\t\tattackCurve : \"linear\" as EnvelopeCurveName,\n\t\t\tdecay : 0.1,\n\t\t\tdecayCurve : \"exponential\" as BasicEnvelopeCurve,\n\t\t\trelease : 1,\n\t\t\treleaseCurve : \"exponential\" as EnvelopeCurveName,\n\t\t\tsustain : 0.5,\n\t\t});\n\t}\n\n\t/**\n\t * Read the current value of the envelope. Useful for\n\t * syncronizing visual output to the envelope.\n\t */\n\tget value(): NormalRange {\n\t\treturn this.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Get the curve\n\t *  @param  curve\n\t *  @param  direction  In/Out\n\t *  @return  {String}  The curve name\n\t *  @private\n\t */\n\tprivate _getCurve(curve: InternalEnvelopeCurve, direction: EnvelopeDirection): EnvelopeCurve {\n\t\tif (isString(curve)) {\n\t\t\treturn curve;\n\t\t} else {\n\t\t\t// look up the name in the curves array\n\t\t\tlet curveName: EnvelopeCurveName;\n\t\t\tfor (curveName in EnvelopeCurves) {\n\t\t\t\tif (EnvelopeCurves[curveName][direction] === curve) {\n\t\t\t\t\treturn curveName;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// return the custom curve\n\t\t\treturn curve;\n\t\t}\n\t}\n\n\t/**\n\t *  Assign a the curve to the given name using the direction\n\t *  @param  name\n\t *  @param  direction In/Out\n\t *  @param  curve\n\t *  @private\n\t */\n\tprivate _setCurve(\n\t\tname: \"_attackCurve\" | \"_decayCurve\" | \"_releaseCurve\",\n\t\tdirection: EnvelopeDirection,\n\t\tcurve: EnvelopeCurve,\n\t): void {\n\t\t// check if it's a valid type\n\t\tif (isString(curve) && Reflect.has(EnvelopeCurves, curve)) {\n\t\t\tconst curveDef = EnvelopeCurves[curve];\n\t\t\tif (isObject(curveDef)) {\n\t\t\t\tif (name !== \"_decayCurve\") {\n\t\t\t\t\tthis[name] = curveDef[direction];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis[name] = curveDef;\n\t\t\t}\n\t\t} else if (isArray(curve) && name !== \"_decayCurve\") {\n\t\t\tthis[name] = curve;\n\t\t} else {\n\t\t\tthrow new Error(\"Envelope: invalid curve: \" + curve);\n\t\t}\n\t}\n\n\t/**\n\t * The shape of the attack.\n\t * Can be any of these strings:\n\t * * linear\n\t * * exponential\n\t * * sine\n\t * * cosine\n\t * * bounce\n\t * * ripple\n\t * * step\n\t * Can also be an array which describes the curve. Values\n\t * in the array are evenly subdivided and linearly\n\t * interpolated over the duration of the attack.\n\t * @memberOf Envelope#\n\t * @type {String|Array}\n\t * @name attackCurve\n\t * @example\n\t * env.attackCurve = \"linear\";\n\t * @example\n\t * //can also be an array\n\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]\n\t */\n\tget attackCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._attackCurve, \"In\");\n\t}\n\tset attackCurve(curve) {\n\t\tthis._setCurve(\"_attackCurve\", \"In\", curve);\n\t}\n\n\t/**\n\t * The shape of the release. See the attack curve types.\n\t * @memberOf Envelope#\n\t * @type {String|Array}\n\t * @name releaseCurve\n\t * @example\n\t * env.releaseCurve = \"linear\";\n\t */\n\tget releaseCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._releaseCurve, \"Out\");\n\t}\n\tset releaseCurve(curve) {\n\t\tthis._setCurve(\"_releaseCurve\", \"Out\", curve);\n\t}\n\n\t/**\n\t * The shape of the decay either \"linear\" or \"exponential\"\n\t * @memberOf Envelope#\n\t * @type {String}\n\t * @name decayCurve\n\t * @example\n\t * env.decayCurve = \"linear\";\n\t */\n\tget decayCurve(): BasicEnvelopeCurve {\n\t\treturn this._decayCurve;\n\t}\n\tset decayCurve(curve) {\n\t\tthis.assert([\"linear\", \"exponential\"].some(c => c === curve), `Invalid envelope curve: ${curve}`);\n\t\tthis._decayCurve = curve;\n\t}\n\n\t/**\n\t * Trigger the attack/decay portion of the ADSR envelope.\n\t * @param  time When the attack should start.\n\t * @param velocity The velocity of the envelope scales the vales.\n\t *                              number between 0-1\n\t * @example\n\t * //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t * env.triggerAttack(\"+0.5\", 0.2);\n\t */\n\ttriggerAttack(time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", time, velocity);\n\t\ttime = this.toSeconds(time);\n\t\tconst originalAttack = this.toSeconds(this.attack);\n\t\tlet attack = originalAttack;\n\t\tconst decay = this.toSeconds(this.decay);\n\t\t// check if it's not a complete attack\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\t// subtract the current value from the attack time\n\t\t\tconst attackRate = 1 / attack;\n\t\t\tconst remainingDistance = 1 - currentValue;\n\t\t\t// the attack is now the remaining time\n\t\t\tattack = remainingDistance / attackRate;\n\t\t}\n\t\t// attack\n\t\tif (attack === 0) {\n\t\t\t// case where the attack time is 0 should set instantly\n\t\t\tthis._sig.setValueAtTime(velocity, time);\n\t\t} else if (this._attackCurve === \"linear\") {\n\t\t\tthis._sig.linearRampTo(velocity, attack, time);\n\t\t} else if (this._attackCurve === \"exponential\") {\n\t\t\tthis._sig.targetRampTo(velocity, attack, time);\n\t\t} else if (attack > 0) {\n\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\tlet curve = this._attackCurve;\n\t\t\t// find the starting position in the curve\n\t\t\tfor (let i = 1; i < curve.length; i++) {\n\t\t\t\t// the starting index is between the two values\n\t\t\t\tif (curve[i - 1] <= currentValue && currentValue <= curve[i]) {\n\t\t\t\t\tcurve = this._attackCurve.slice(i);\n\t\t\t\t\t// the first index is the current value\n\t\t\t\t\tcurve[0] = currentValue;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t\t}\n\t\t// decay\n\t\tif (decay) {\n\t\t\tconst decayValue = velocity * this.sustain;\n\t\t\tconst decayStart = time + attack;\n\t\t\tthis.log(\"decay\", decayStart);\n\t\t\tif (this._decayCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(decayValue, decay, decayStart + this.sampleTime);\n\t\t\t} else if (this._decayCurve === \"exponential\") {\n\t\t\t\tthis._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Triggers the release of the envelope.\n\t *  @param  time When the release portion of the envelope should start.\n\t *  @example\n\t *  //trigger release immediately\n\t *  env.triggerRelease();\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\ttime = this.toSeconds(time);\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\tconst release = this.toSeconds(this.release);\n\t\t\tif (this._releaseCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(0, release, time);\n\t\t\t} else if (this._releaseCurve === \"exponential\") {\n\t\t\t\tthis._sig.targetRampTo(0, release, time);\n\t\t\t} else {\n\t\t\t\tif (isArray(this._releaseCurve)) {\n\t\t\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\t\t\tthis._sig.setValueCurveAtTime(this._releaseCurve, time, release, currentValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Get the scheduled value at the given time. This will\n\t *  return the unconverted (raw) value.\n\t */\n\tgetValueAtTime(time: Time): NormalRange {\n\t\treturn this._sig.getValueAtTime(time);\n\t}\n\n\t/**\n\t *  triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t *  some duration, then triggerRelease.\n\t *  @param duration The duration of the sustain.\n\t *  @param time When the attack should be triggered.\n\t *  @param velocity The velocity of the envelope.\n\t *  @example\n\t * //trigger the attack and then the release after 0.6 seconds.\n\t * env.triggerAttackRelease(0.6);\n\t */\n\ttriggerAttackRelease(duration: Time, time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis.triggerAttack(time, velocity);\n\t\tthis.triggerRelease(time + this.toSeconds(duration));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancels all scheduled envelope changes after the given time.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._sig.cancelScheduledValues(after);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the envelope to a destination node.\n\t */\n\tconnect(destination: InputNode, outputNumber: number = 0, inputNumber: number = 0): this {\n\t\tconnectSignal(this, destination, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sig.dispose();\n\t\treturn this;\n\t}\n}\n\ninterface EnvelopeCurveObject {\n\tIn: number[];\n\tOut: number[];\n}\n\ntype EnvelopeDirection = keyof EnvelopeCurveObject;\n\ninterface EnvelopeCurveMap {\n\tlinear: \"linear\";\n\texponential: \"exponential\";\n\tbounce: EnvelopeCurveObject;\n\tcosine: EnvelopeCurveObject;\n\tsine: EnvelopeCurveObject;\n\tripple: EnvelopeCurveObject;\n\tstep: EnvelopeCurveObject;\n}\n\ntype EnvelopeCurveName =  keyof EnvelopeCurveMap;\n\n/**\n *  Generate some complex envelope curves.\n */\n// tslint:disable-next-line: variable-name\nconst EnvelopeCurves: EnvelopeCurveMap = (() => {\n\n\tconst curveLen = 128;\n\n\tlet i: number;\n\tlet k: number;\n\n\t// cosine curve\n\tconst cosineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tcosineCurve[i] = Math.sin((i / (curveLen - 1)) * (Math.PI / 2));\n\t}\n\n\t// ripple curve\n\tconst rippleCurve: number[] = [];\n\tconst rippleCurveFreq = 6.4;\n\tfor (i = 0; i < curveLen - 1; i++) {\n\t\tk = (i / (curveLen - 1));\n\t\tconst sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t\trippleCurve[i] = sineWave / 10 + k * 0.83;\n\t}\n\trippleCurve[curveLen - 1] = 1;\n\n\t// stairs curve\n\tconst stairsCurve: number[] = [];\n\tconst steps = 5;\n\tfor (i = 0; i < curveLen; i++) {\n\t\tstairsCurve[i] = Math.ceil((i / (curveLen - 1)) * steps) / steps;\n\t}\n\n\t// in-out easing curve\n\tconst sineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tsineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t}\n\n\t// a bounce curve\n\tconst bounceCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tconst freq = Math.pow(k, 3) * 4 + 0.2;\n\t\tconst val = Math.cos(freq * Math.PI * 2 * k);\n\t\tbounceCurve[i] = Math.abs(val * (1 - k));\n\t}\n\n\t/**\n\t *  Invert a value curve to make it work for the release\n\t */\n\tfunction invertCurve(curve: number[]): number[] {\n\t\tconst out = new Array(curve.length);\n\t\tfor (let j = 0; j < curve.length; j++) {\n\t\t\tout[j] = 1 - curve[j];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t *  reverse the curve\n\t */\n\tfunction reverseCurve(curve: number[]): number[] {\n\t\treturn curve.slice(0).reverse();\n\t}\n\n\t/**\n\t *  attack and release curve arrays\n\t */\n\treturn {\n\t\tbounce : {\n\t\t\tIn : invertCurve(bounceCurve),\n\t\t\tOut : bounceCurve,\n\t\t},\n\t\tcosine : {\n\t\t\tIn : cosineCurve,\n\t\t\tOut : reverseCurve(cosineCurve),\n\t\t},\n\t\texponential : \"exponential\" as \"exponential\",\n\t\tlinear : \"linear\" as \"linear\",\n\t\tripple : {\n\t\t\tIn : rippleCurve,\n\t\t\tOut : invertCurve(rippleCurve),\n\t\t},\n\t\tsine : {\n\t\t\tIn : sineCurve,\n\t\t\tOut : invertCurve(sineCurve),\n\t\t},\n\t\tstep : {\n\t\t\tIn : stairsCurve,\n\t\t\tOut : invertCurve(stairsCurve),\n\t\t},\n\t};\n})();\n","import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isNumber, isString } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { AMOscillator } from \"./AMOscillator\";\nimport { FatOscillator } from \"./FatOscillator\";\nimport { FMOscillator } from \"./FMOscillator\";\nimport { Oscillator } from \"./Oscillator\";\nimport { AMOscillatorOptions, FatOscillatorOptions,\n\tFMOscillatorOptions, OmniOscillatorConstructorOptions,\n\tOmniOscillatorOptions, OmniOscillatorType,\n\tPulseOscillatorOptions, PWMOscillatorOptions,\n\tToneOscillatorInterface, ToneOscillatorOptions, ToneOscillatorType } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\nimport { PWMOscillator } from \"./PWMOscillator\";\n\n/**\n * All of the oscillator types that OmniOscillator can take on\n */\ntype AnyOscillator = Oscillator | PWMOscillator | PulseOscillator | FatOscillator | AMOscillator | FMOscillator;\n\n/**\n * The constructor of each of the OmniOscillator types\n */\ntype TypeofAnyOscillator = typeof Oscillator | typeof PWMOscillator |\n\ttypeof PulseOscillator | typeof FatOscillator |\n\ttypeof AMOscillator | typeof FMOscillator;\n\n/**\n * Select the Oscillator's Options depending on the generic type.\n */\ntype ConditionalOptions<Osc extends AnyOscillator> =\n\tOsc extends FMOscillator ? FMOscillatorOptions :\n\tOsc extends Oscillator ? ToneOscillatorOptions :\n\tOsc extends AMOscillator ? AMOscillatorOptions :\n\tOsc extends FatOscillator ? FatOscillatorOptions :\n\tOsc extends PulseOscillator ? PulseOscillatorOptions :\n\tOsc extends PWMOscillator ? PWMOscillatorOptions :\n\tToneOscillatorOptions;\n\n/**\n * The aggregate options of all of the oscillators\n */\n// export type OmniOscillatorOptions = ConditionalOptions<AnyOscillator>;\n\n/**\n * All of the Oscillator constructor types mapped to their name.\n */\ninterface OmniOscillatorSource {\n\t\"fm\": FMOscillator;\n\t\"am\": AMOscillator;\n\t\"pwm\": PWMOscillator;\n\t\"pulse\": PulseOscillator;\n\t\"oscillator\": Oscillator;\n\t\"fat\": FatOscillator;\n}\n\n/**\n * The available oscillator types.\n */\nexport type OmniOscSourceType = keyof OmniOscillatorSource;\n\n// Conditional Types\ntype IsAmOrFmOscillator<Osc, Ret> = Osc extends AMOscillator ? Ret : Osc extends FMOscillator ? Ret : undefined;\ntype IsFatOscillator<Osc, Ret> = Osc extends FatOscillator ? Ret : undefined;\ntype IsPWMOscillator<Osc, Ret> = Osc extends PWMOscillator ? Ret : undefined;\ntype IsPulseOscillator<Osc, Ret> = Osc extends PulseOscillator ? Ret : undefined;\ntype IsFMOscillator<Osc, Ret> = Osc extends FMOscillator ? Ret : undefined;\n\n// tslint:disable-next-line: variable-name\nconst OmniOscillatorSourceMap: {\n\t[key in OmniOscSourceType] : TypeofAnyOscillator\n} = {\n\tam: AMOscillator,\n\tfat: FatOscillator,\n\tfm: FMOscillator,\n\toscillator: Oscillator,\n\tpulse: PulseOscillator,\n\tpwm: PWMOscillator,\n};\n\n/**\n * OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n * Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n * into one class. The oscillator class can be changed by setting the `type`.\n * `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n * any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n * will use the FMOscillator, AMOscillator or FatOscillator respectively.\n * For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n * to a FatOscillator of type \"sawtooth\".\n *\n * @param frequency The initial frequency of the oscillator.\n * @param type The type of the oscillator.\n * @example\n * var omniOsc = new OmniOscillator(\"C#4\", \"pwm\");\n */\nexport class OmniOscillator<OscType extends AnyOscillator>\nextends Source<OmniOscillatorConstructorOptions>\nimplements Omit<ToneOscillatorInterface, \"type\"> {\n\n\tname = \"OmniOscillator\";\n\n\t/**\n\t *  The frequency control.\n\t */\n\treadonly frequency: Signal<Frequency> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"frequency\",\n\t});\n\n\t/**\n\t *  The detune control.\n\t */\n\treadonly detune: Signal<Cents> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"cents\",\n\t});\n\n\t/**\n\t * The oscillator that can switch types\n\t */\n\tprivate _oscillator!: AnyOscillator;\n\n\t/**\n\t *  the type of the oscillator source\n\t */\n\tprivate _sourceType!: OmniOscSourceType;\n\n\tconstructor(options?: Partial<OmniOscillatorConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: OmniOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\n\t\t// set the options\n\t\tthis.set(options);\n\t}\n\n\tstatic getDefaults(): OmniOscillatorOptions {\n\t\treturn Object.assign(\n\t\t\tOscillator.getDefaults(),\n\t\t\tFMOscillator.getDefaults(),\n\t\t\tAMOscillator.getDefaults(),\n\t\t\tFatOscillator.getDefaults(),\n\t\t\tPulseOscillator.getDefaults(),\n\t\t\tPWMOscillator.getDefaults(),\n\t\t);\n\t\t// return Oscillator.getDefaults() as OmniOscillatorConstructorOptions;\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._oscillator.start(time);\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\trestart(time?: Time): this {\n\t\tthis._oscillator.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n\t * when it's not.\n\t * @example\n\t * omniOsc.type = \"pwm\";\n\t * //modulationFrequency is parameter which is available\n\t * //only when the type is \"pwm\".\n\t * omniOsc.modulationFrequency.value = 0.5;\n\t * @example\n\t * //an square wave frequency modulated by a sawtooth\n\t * omniOsc.type = \"fmsquare\";\n\t * omniOsc.modulationType = \"sawtooth\";\n\t */\n\tget type(): OmniOscillatorType {\n\t\tlet prefix = \"\";\n\t\tif ([\"am\", \"fm\", \"fat\"].some(p => this._sourceType === p)) {\n\t\t\tprefix = this._sourceType;\n\t\t}\n\t\treturn prefix + this._oscillator.type as OmniOscillatorType;\n\t}\n\tset type(type) {\n\t\tif (type.substr(0, 2) === \"fm\") {\n\t\t\tthis._createNewOscillator(\"fm\");\n\t\t\tthis._oscillator = this._oscillator as FMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2) as ToneOscillatorType;\n\t\t} else if (type.substr(0, 2) === \"am\") {\n\t\t\tthis._createNewOscillator(\"am\");\n\t\t\tthis._oscillator = this._oscillator as AMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2)  as ToneOscillatorType;\n\t\t} else if (type.substr(0, 3) === \"fat\") {\n\t\t\tthis._createNewOscillator(\"fat\");\n\t\t\tthis._oscillator = this._oscillator as FatOscillator;\n\t\t\tthis._oscillator.type = type.substr(3)  as ToneOscillatorType;\n\t\t} else if (type === \"pwm\") {\n\t\t\tthis._createNewOscillator(\"pwm\");\n\t\t\tthis._oscillator = this._oscillator as PWMOscillator;\n\t\t} else if (type === \"pulse\") {\n\t\t\tthis._createNewOscillator(\"pulse\");\n\t\t} else {\n\t\t\tthis._createNewOscillator(\"oscillator\");\n\t\t\tthis._oscillator = this._oscillator as Oscillator;\n\t\t\tthis._oscillator.type = (type as ToneOscillatorType);\n\t\t}\n\t}\n\n\t/**\n\t * The partials of the waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillator.partials;\n\t}\n\tset partials(partials) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partials = partials;\n\t\t}\n\t}\n\n\t/**\n\t * The partial count of the oscillator. This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * @example\n\t * //set the maximum number of partials\n\t * osc.partialCount = 0;\n\t */\n\tget partialCount(): number {\n\t\treturn this._oscillator.partialCount;\n\t}\n\tset partialCount(partialCount) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partialCount = partialCount;\n\t\t}\n\t}\n\n\t/**\n\t * Set the parameters at once. Either pass in an\n\t * object mapping parameters to values, or to set a\n\t * single parameter, by passing in a string and value.\n\t * The last argument is an optional ramp time which\n\t * will ramp any signal values to their destination value\n\t * over the duration of the rampTime.\n\t * @param  params\n\t * @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : \"highpass\"\n\t * });\n\t */\n\tset(props: Partial<OmniOscillatorConstructorOptions>): this {\n\t\t// make sure the type is set first\n\t\tif (Reflect.has(props, \"type\") && props.type) {\n\t\t\tthis.type = props.type;\n\t\t\t// delete props.type;\n\t\t}\n\t\t// then set the rest\n\t\tsuper.set(props);\n\t\treturn this;\n\t}\n\n\tget(): OmniOscillatorConstructorOptions {\n\t\tconst options = this._oscillator.get();\n\t\t// @ts-ignore\n\t\toptions.type = this.type;\n\t\treturn options as OmniOscillatorOptions;\n\t}\n\n\t/**\n\t *  connect the oscillator to the frequency and detune signals\n\t */\n\tprivate _createNewOscillator(oscType: OmniOscSourceType): void {\n\t\tif (oscType !== this._sourceType) {\n\t\t\tthis._sourceType = oscType;\n\t\t\tconst oscConstructor = OmniOscillatorSourceMap[oscType];\n\t\t\t// short delay to avoid clicks on the change\n\t\t\tconst now = this.now();\n\t\t\tif (this._oscillator) {\n\t\t\t\tconst oldOsc = this._oscillator;\n\t\t\t\toldOsc.stop(now);\n\t\t\t\t// dispose the old one\n\t\t\t\tthis.context.setTimeout(() => oldOsc.dispose(), this.blockTime);\n\t\t\t}\n\t\t\t// @ts-ignore\n\t\t\tthis._oscillator = new oscConstructor({\n\t\t\t\tcontext : this.context,\n\t\t\t});\n\t\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\t\tthis.detune.connect(this._oscillator.detune);\n\t\t\tthis._oscillator.connect(this.output);\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._oscillator.start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._oscillator.phase;\n\t}\n\tset phase(phase) {\n\t\tthis._oscillator.phase = phase;\n\t}\n\n\t/**\n\t * The source type of the oscillator.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"fmsquare\");\n\t * omniOsc.sourceType // 'fm'\n\t */\n\tget sourceType(): OmniOscSourceType {\n\t\treturn this._sourceType;\n\t}\n\tset sourceType(sType) {\n\t\t// the basetype defaults to sine\n\t\tlet baseType = \"sine\";\n\t\tif (this._oscillator.type !== \"pwm\" && this._oscillator.type !== \"pulse\") {\n\t\t\tbaseType = this._oscillator.type;\n\t\t}\n\n\t\t// set the type\n\t\tif (sType === \"fm\") {\n\t\t\tthis.type = \"fm\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"am\") {\n\t\t\tthis.type = \"am\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"fat\") {\n\t\t\tthis.type = \"fat\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"oscillator\") {\n\t\t\tthis.type = baseType as OmniOscillatorType;\n\t\t} else if (sType === \"pulse\") {\n\t\t\tthis.type = \"pulse\";\n\t\t} else if (sType === \"pwm\") {\n\t\t\tthis.type = \"pwm\";\n\t\t}\n\t}\n\n\tprivate _getOscType<SourceType extends OmniOscSourceType>(\n\t\tosc: AnyOscillator,\n\t\tsourceType: SourceType,\n\t): osc is OmniOscillatorSource[SourceType] {\n\t\treturn osc instanceof OmniOscillatorSourceMap[sourceType];\n\t}\n\n\t/**\n\t * The base type of the oscillator.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"fmsquare4\");\n\t * omniOsc.sourceType // 'fm'\n\t * omniOsc.baseType //'square'\n\t * omniOsc.partialCount //4\n\t */\n\tget baseType(): OscillatorType | \"pwm\" | \"pulse\" {\n\t\treturn this._oscillator.baseType;\n\t}\n\tset baseType(baseType) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") &&\n\t\t\t!this._getOscType(this._oscillator, \"pwm\") &&\n\t\t\tbaseType !== \"pulse\" && baseType !== \"pwm\") {\n\t\t\tthis._oscillator.baseType = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * The width of the oscillator when sourceType === \"pulse\".\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"pulse\");\n\t * //can access the width attribute only if type === \"pulse\"\n\t * omniOsc.width.value = 0.2;\n\t */\n\tget width(): IsPulseOscillator<OscType, Signal<AudioRange>> {\n\t\tif (this._getOscType(this._oscillator, \"pulse\")) {\n\t\t\treturn this._oscillator.width as IsPulseOscillator<OscType, Signal<AudioRange>> ;\n\t\t} else {\n\t\t\treturn undefined as IsPulseOscillator<OscType, Signal<AudioRange>> ;\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators, when sourceType === \"fat\".\n\t */\n\tget count(): IsFatOscillator<OscType, number> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.count as IsFatOscillator<OscType, number>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, number>;\n\t\t}\n\t}\n\tset count(count) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(count)) {\n\t\t\tthis._oscillator.count = count;\n\t\t}\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents. See Tone.FatOscillator\n\t * for more info.\n\t */\n\tget spread(): IsFatOscillator<OscType, Cents> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.spread as IsFatOscillator<OscType, Cents>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, Cents>;\n\t\t}\n\t}\n\tset spread(spread) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(spread)) {\n\t\t\tthis._oscillator.spread = spread;\n\t\t}\n\t}\n\n\t/**\n\t * The type of the modulator oscillator. Only if the oscillator\n\t * is set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\n\t * for more info.\n\t */\n\tget modulationType(): IsAmOrFmOscillator<OscType, ToneOscillatorType> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.modulationType as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t}\n\t}\n\tset modulationType(mType) {\n\t\tif ((this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) && isString(mType)) {\n\t\t\tthis._oscillator.modulationType = mType;\n\t\t}\n\t}\n\n\t/**\n\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t * See Tone.FMOscillator for more info.\n\t */\n\tget modulationIndex(): IsFMOscillator<OscType, Signal<Positive>> {\n\t\tif (this._getOscType(this._oscillator, \"fm\")) {\n\t\t\treturn this._oscillator.modulationIndex as IsFMOscillator<OscType, Signal<Positive>>;\n\t\t} else {\n\t\t\treturn undefined as IsFMOscillator<OscType, Signal<Positive>>;\n\t\t}\n\t}\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n\t *  for more info.\n\t */\n\tget harmonicity(): IsAmOrFmOscillator<OscType, Signal<Positive>> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.harmonicity as IsAmOrFmOscillator<OscType, Signal<Positive>>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, Signal<Positive>>;\n\t\t}\n\t}\n\n\t/**\n\t * The modulationFrequency Signal of the oscillator\n\t * (only if the oscillator type is set to pwm). See\n\t * Tone.PWMOscillator for more info.\n\t * @example\n\t * var omniOsc = new OmniOscillator(440, \"pwm\");\n\t * //can access the modulationFrequency attribute only if type === \"pwm\"\n\t * omniOsc.modulationFrequency.value = 0.2;\n\t */\n\tget modulationFrequency(): IsPWMOscillator<OscType, Signal<Frequency>> {\n\t\tif (this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\treturn this._oscillator.modulationFrequency as IsPWMOscillator<OscType, Signal<Frequency>>;\n\t\t} else {\n\t\t\treturn undefined as IsPWMOscillator<OscType, Signal<Frequency>>;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis._oscillator.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { PWMOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n *\n * @param {Frequency} frequency The starting frequency of the oscillator.\n * @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse.\n * @example\n *  var pwm = new PWMOscillator(\"Ab3\", 0.3).toMaster().start();\n */\nexport class PWMOscillator extends Source<PWMOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"PWMOscillator\";\n\n\treadonly sourceType = \"pwm\";\n\n\t/**\n\t *  the pulse oscillator\n\t */\n\tprivate _pulse: PulseOscillator = new PulseOscillator({ context: this.context });\n\t/**\n\t *  the modulator\n\t *  @type {Tone.Oscillator}\n\t *  @private\n\t */\n\tprivate _modulator: Oscillator = new Oscillator({ context: this.context });\n\n\t/**\n\t *  Scale the oscillator so it doesn't go silent\n\t *  at the extreme values.\n\t */\n\tprivate _scale: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: 2,\n\t});\n\n\t/**\n\t *  The frequency control.\n\t */\n\treadonly frequency: Signal<Frequency> = this._modulator.frequency;\n\n\t/**\n\t *  The detune of the oscillator.\n\t */\n\treadonly detune: Signal<Cents> = this._modulator.detune;\n\n\t/**\n\t *  The modulation rate of the oscillator.\n\t */\n\treadonly modulationFrequency: Signal<Frequency> = this._pulse.frequency;\n\n\tconstructor(options?: Partial<PWMOscillatorOptions>);\n\tconstructor(frequency?: Frequency, modulationFrequency?: Frequency);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n\t\tconst options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n\n\t\t// change the pulse oscillator type\n\t\t// @ts-ignore\n\t\tthis._pulse._sawtooth.type = \"sine\";\n\n\t\tthis._pulse.frequency.setValueAtTime(options.modulationFrequency, 0);\n\t\tthis._modulator.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis._modulator.detune.setValueAtTime(options.detune, 0);\n\t\tthis._modulator.phase = options.phase;\n\n\t\t// connections\n\t\tthis._modulator.chain(this._scale, this._pulse.width);\n\t\tthis._pulse.connect(this.output);\n\t\treadOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PWMOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tmodulationFrequency: 0.4,\n\t\t\tphase: 0,\n\t\t\ttype: \"pwm\" as \"pwm\",\n\t\t});\n\t}\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.start(time);\n\t\tthis._pulse.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.stop(time);\n\t\tthis._pulse.stop(time);\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._pulse.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pwm\".\n\t */\n\tget type(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pwm\".\n\t */\n\tget baseType(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._modulator.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._pulse.dispose();\n\t\tthis._scale.dispose();\n\t\tthis._modulator.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { FatConstructorOptions, FatOscillatorOptions,\n\tToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\n\n/**\n *  FatOscillator is an array of oscillators with detune spread between the oscillators\n *  @param frequency The oscillator's frequency.\n *  @param type The type of the oscillator.\n *  @param spread The detune spread between the oscillators.\n *  @example\n * var fatOsc = new FatOscillator(\"Ab3\", \"sine\", 40).toMaster().start();\n */\nexport class FatOscillator extends Source<FatOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"FatOscillator\";\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"frequency\",\n\t});\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"cents\",\n\t});\n\n\t/**\n\t *  The array of oscillators\n\t */\n\tprivate _oscillators: Oscillator[] = [];\n\n\t/**\n\t *  The total spread of the oscillators\n\t */\n\tprivate _spread: Cents;\n\n\t/**\n\t *  The type of the oscillator\n\t */\n\tprivate _type: ToneOscillatorType;\n\n\t/**\n\t *  The phase of the oscillators\n\t */\n\tprivate _phase: Degrees;\n\n\t/**\n\t *  The partials array\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t *  The number of partials to use\n\t */\n\tprivate _partialCount: number;\n\n\tconstructor(options?: Partial<FatConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]));\n\t\tconst options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\n\t\tthis._spread = options.spread;\n\t\tthis._type = options.type;\n\t\tthis._phase = options.phase;\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\n\t\t// set the count initially\n\t\tthis.count = options.count;\n\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): FatOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tcount : 3,\n\t\t\tspread : 20,\n\t\t\ttype : \"sawtooth\",\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.start(time));\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.stop(time));\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.restart(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over all of the oscillators\n\t */\n\tprivate _forEach(iterator: (osc: Oscillator, index: number) => void): void {\n\t\tfor (let i = 0; i < this._oscillators.length; i++) {\n\t\t\titerator(this._oscillators[i], i);\n\t\t}\n\t}\n\n\t/**\n\t * The type of the oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\n\tset type(type: ToneOscillatorType) {\n\t\tthis._type = type;\n\t\tthis._forEach(osc => osc.type = type);\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents.\n\t */\n\tget spread(): Cents {\n\t\treturn this._spread;\n\t}\n\n\tset spread(spread: Cents) {\n\t\tthis._spread = spread;\n\t\tif (this._oscillators.length > 1) {\n\t\t\tconst start = -spread / 2;\n\t\t\tconst step = spread / (this._oscillators.length - 1);\n\t\t\tthis._forEach((osc, i) => osc.detune.value = start + step * i);\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators. Should be an integer greater than 1.\n\t */\n\tget count(): number {\n\t\treturn this._oscillators.length;\n\t}\n\n\tset count(count: number) {\n\t\tcount = Math.max(count, 1);\n\t\tif (this._oscillators.length !== count) {\n\t\t\t// dispose the previous oscillators\n\t\t\tthis._forEach(osc => osc.dispose());\n\t\t\tthis._oscillators = [];\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tconst osc = new Oscillator({\n\t\t\t\t\tcontext : this.context,\n\t\t\t\t});\n\t\t\t\tif (this.type === \"custom\") {\n\t\t\t\t\tosc.partials = this._partials;\n\t\t\t\t} else {\n\t\t\t\t\tosc.type = this._type;\n\t\t\t\t}\n\t\t\t\tosc.partialCount = this._partialCount;\n\t\t\t\tosc.phase = this._phase + (i / count) * 360;\n\t\t\t\tosc.volume.value = -6 - count * 1.1;\n\t\t\t\tthis.frequency.connect(osc.frequency);\n\t\t\t\tthis.detune.connect(osc.detune);\n\t\t\t\tosc.connect(this.output);\n\t\t\t\tthis._oscillators[i] = osc;\n\t\t\t}\n\t\t\t// set the spread\n\t\t\tthis.spread = this._spread;\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._forEach(osc => osc.start());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase;\n\t\tthis._forEach(osc => osc.phase = phase);\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._oscillators[0].baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._forEach(osc => osc.baseType = baseType);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @memberOf FatOscillator#\n\t * @type {Array}\n\t * @name partials\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillators[0].partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tif (partials.length) {\n\t\t\tthis._type = \"custom\";\n\t\t\tthis._forEach(osc => osc.partials = partials);\n\t\t}\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t * @memberOf FatOscillator#\n\t * @type {Number}\n\t * @name partialCount\n\t */\n\tget partialCount(): number {\n\t\treturn this._oscillators[0].partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._partialCount = partialCount;\n\t\tthis._forEach(osc => osc.partialCount = partialCount);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._forEach(osc => osc.dispose());\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { FMConstructorOptions, FMOscillatorOptions,\n\tNonCustomOscillatorType, ToneOscillatorInterface, ToneOscillatorType } from \"./OscillatorInterface\";\n\n/**\n * FMOscillator implements a frequency modulation synthesis\n * ```\n *                                              +-------------+\n * +---------------+        +-------------+     | Carrier Osc |\n * | Modulator Osc +>-------> GainNode    |     |             +--->Output\n * +---------------+        |             +>----> frequency   |\n *                       +--> gain        |     +-------------+\n *                       |  +-------------+\n * +-----------------+   |\n * | modulationIndex +>--+\n * +-----------------+\n * ```\n *\n * @param frequency The starting frequency of the oscillator.\n * @param type The type of the carrier oscillator.\n * @param modulationType The type of the modulator oscillator.\n * @example\n * //a sine oscillator frequency-modulated by a square wave\n * var fmOsc = new FMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n */\nexport class FMOscillator extends Source<FMOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"FMOscillator\";\n\n\t/**\n\t *  The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator = new Oscillator({\n\t\tcontext : this.context,\n\t\tfrequency: 0,\n\t});\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency> = new Signal({\n\t\tcontext: this.context,\n\t\tunits: \"frequency\",\n\t});\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents> = this._carrier.detune;\n\n\t/**\n\t *  The modulating oscillator\n\t */\n\tprivate _modulator = new Oscillator({ context : this.context });\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave.\n\t *  @example\n\t * //pitch the modulator an octave below carrier\n\t * synth.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<Positive> = new Multiply({\n\t\tcontext: this.context,\n\t\tunits: \"positive\",\n\t});\n\n\t/**\n\t *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t *  modulating signal (ma) -- as in ma/mf.\n\t */\n\treadonly modulationIndex: Signal<Positive> = new Multiply({\n\t\tcontext: this.context,\n\t\tunits: \"positive\",\n\t});\n\n\t/**\n\t *  the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\tconstructor(options?: Partial<FMConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier.type = options.type;\n\t\tthis._modulator.type = options.modulationType;\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\t\tthis.harmonicity.setValueAtTime(options.harmonicity, 0);\n\t\tthis.modulationIndex.setValueAtTime(options.modulationIndex, 0);\n\n\t\t// connections\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t\tthis.detune.connect(this._modulator.detune);\n\n\t\tthis.phase = options.phase;\n\n\t\treadOnly(this, [\"modulationIndex\", \"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): FMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationIndex: 2,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t *  stop and restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t */\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis.modulationIndex.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isFunction, isUndef } from \"../core/util/TypeCheck\";\nimport { Signal, SignalOptions } from \"./Signal\";\nimport { SignalOperator } from \"./SignalOperator\";\n\ntype WaveShaperMappingFn = (value: number, index?: number) => number;\n\ntype WaveShaperMapping =  WaveShaperMappingFn | number[] | Float32Array;\n\ninterface WaveShaperOptions extends ToneAudioNodeOptions {\n\tmapping?: WaveShaperMapping;\n\tlength: number;\n\tcurve?: number[] | Float32Array;\n}\n\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n *  @param mapping The function used to define the values.\n *                 The mapping function should take two arguments:\n *                 the first is the value at the current position\n *                 and the second is the array position.\n *                 If the argument is an array, that array will be\n *                 set as the wave shaping function. The input\n *                 signal is an AudioRange [-1, 1] value and the output\n *                 signal can take on any numerical values.\n *\n *  @param bufferLen The length of the WaveShaperNode buffer.\n *  @example\n * var timesTwo = new WaveShaper(function(val){\n * \treturn val * 2;\n * }, 2048);\n *  @example\n * //a waveshaper can also be constructed with an array of values\n * var invert = new WaveShaper([1, -1]);\n */\nexport class WaveShaper extends SignalOperator<WaveShaperOptions> {\n\n\tname = \"WaveShaper\";\n\n\t/**\n\t *  the waveshaper node\n\t */\n\tprivate _shaper: WaveShaperNode = this.context.createWaveShaper();\n\n\t/**\n\t * The input to the waveshaper node.\n\t */\n\tinput = this._shaper;\n\n\t/**\n\t * The output from the waveshaper node\n\t */\n\toutput = this._shaper;\n\n\tprotected _internalChannels = [this._shaper];\n\n\tconstructor(options?: Partial<WaveShaperOptions>);\n\tconstructor(mapping?: WaveShaperMapping , length?: number);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"])));\n\t\tconst options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n\n\t\tif (isArray(options.mapping) || options.mapping instanceof Float32Array) {\n\t\t\tthis.curve = Float32Array.from(options.mapping);\n\t\t} else if (isFunction(options.mapping)) {\n\t\t\tthis.setMap(options.mapping, options.length);\n\t\t}\n\t}\n\n\tstatic getDefaults(): WaveShaperOptions {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tlength: 1024,\n\t\t});\n\t}\n\n\t/**\n\t *  Uses a mapping function to set the value of the curve.\n\t *  @param mapping The function used to define the values.\n\t *                 The mapping function take two arguments:\n\t *                 the first is the value at the current position\n\t *                 which goes from -1 to 1 over the number of elements\n\t *                 in the curve array. The second argument is the array position.\n\t * @example\n\t * //map the input signal from [-1, 1] to [0, 10]\n\t * shaper.setMap(function(val, index){\n\t * \treturn (val + 1) * 5;\n\t * })\n\t */\n\tsetMap(mapping: WaveShaperMappingFn, length: number = 1024): this {\n\t\tconst array = new Float32Array(length);\n\t\tfor (let i = 0, len = length; i < len; i++) {\n\t\t\tconst normalized = (i / (len - 1)) * 2 - 1;\n\t\t\tarray[i] = mapping(normalized, i);\n\t\t}\n\t\tthis.curve = array;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The array to set as the waveshaper curve. For linear curves\n\t * array length does not make much difference, but for complex curves\n\t * longer arrays will provide smoother interpolation.\n\t */\n\tget curve(): Float32Array | null {\n\t\treturn this._shaper.curve;\n\t}\n\n\tset curve(mapping: Float32Array | null) {\n\t\tthis._shaper.curve = mapping;\n\t}\n\n\t/**\n\t * Specifies what type of oversampling (if any) should be used when\n\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n\t */\n\tget oversample(): OverSampleType {\n\t\treturn this._shaper.oversample;\n\t}\n\n\tset oversample(oversampling: OverSampleType) {\n\t\tconst isOverSampleType = [\"none\", \"2x\", \"4x\"].some(str => str.includes(oversampling));\n\t\tthis.assert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n\t\tthis._shaper.oversample = oversampling;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._shaper.disconnect();\n\t\treturn this;\n\t}\n}\n","import { optionsFromArguments } from \"..//core/util/Defaults\";\nimport { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connectSignal } from \"./Signal\";\n/**\n * A signal operator has an input and output and modifies the signal.\n */\nexport abstract class SignalOperator<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\tconstructor(options?: Partial<Options>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(SignalOperator.getDefaults(), arguments, [\"context\"])));\n\t}\n\n\tconnect(destination: InputNode, outputNum: number = 0, inputNum: number = 0): this {\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { AMConstructorOptions, AMOscillatorOptions,\n\tNonCustomOscillatorType, ToneOscillatorInterface,\n\tToneOscillatorType } from \"./OscillatorInterface\";\n\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n *\n * @param frequency The starting frequency of the oscillator.\n * @param type The type of the carrier oscillator.\n * @param modulationType The type of the modulator oscillator.\n * @example\n * //a sine oscillator frequency-modulated by a square wave\n * var fmOsc = new AMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n */\nexport class AMOscillator extends Source<AMOscillatorOptions> implements ToneOscillatorInterface {\n\n\tname = \"AMOscillator\";\n\n\t/**\n\t *  The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator = new Oscillator({context : this.context });\n\n\t/**\n\t *  The oscillator's frequency\n\t */\n\treadonly frequency: Signal<Frequency> = this._carrier.frequency;\n\n\t/**\n\t *  The detune control signal.\n\t */\n\treadonly detune: Signal<Cents> = this._carrier.detune;\n\n\t/**\n\t *  The modulating oscillator\n\t */\n\tprivate _modulator = new Oscillator({ context : this.context });\n\n\t/**\n\t *  convert the -1,1 output to 0,1\n\t */\n\tprivate _modulationScale = new AudioToGain({ context: this.context });\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave.\n\t *  @example\n\t * //pitch the modulator an octave below carrier\n\t * synth.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<Positive> = new Multiply({\n\t\tcontext: this.context,\n\t\tunits: \"positive\",\n\t});\n\n\t/**\n\t *  the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t});\n\n\tconstructor(options?: Partial<AMConstructorOptions>);\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier.type = options.type;\n\t\tthis._modulator.type = options.modulationType;\n\t\tthis.frequency.setValueAtTime(options.frequency, 0);\n\t\tthis.detune.setValueAtTime(options.detune, 0);\n\t\tthis.harmonicity.setValueAtTime(options.harmonicity, 0);\n\n\t\t// connections\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\n\t\tthis.phase = options.phase;\n\n\t\treadOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): AMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t *  start the oscillator\n\t */\n\tprotected _start(time: Seconds): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t *  stop the oscillator\n\t */\n\tprotected _stop(time: Seconds): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\t/**\n\t *  restart the oscillator\n\t */\n\trestart(time?: Time): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array.\n\t */\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis._modulationScale.dispose();\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource, OneShotSourceOptions } from \"../OneShotSource\";\n\ninterface ToneOscillatorNodeOptions extends OneShotSourceOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\ttype: OscillatorType;\n}\n\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[Tone.Oscillator](Oscillator) is better for most use-cases***\n *  @extends {Tone.AudioNode}\n *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n *  @param  {Function}  onload  The callback to invoke when the\n *                               buffer is done playing.\n */\nexport class ToneOscillatorNode extends OneShotSource<ToneOscillatorNodeOptions> {\n\n\tname = \"ToneOscillatorNode\";\n\n\t/**\n\t *  The oscillator\n\t */\n\tprivate _oscillator = this.context.createOscillator();\n\tprotected _internalChannels = [this._gainNode, this._oscillator];\n\n\t/**\n\t *  The frequency of the oscillator\n\t */\n\treadonly frequency: Param<\"frequency\">;\n\n\t/**\n\t *  The detune of the oscillator\n\t */\n\treadonly detune: Param<\"cents\">;\n\n\tconstructor(options?: Partial<ToneOscillatorNodeOptions>);\n\tconstructor(\n\t\tfrequency: Frequency,\n\t\ttype: OscillatorType,\n\t);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tconnect(this._oscillator, this._gainNode);\n\n\t\tthis.type = options.type;\n\n\t\tthis.frequency = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._oscillator.frequency,\n\t\t\tunits : \"frequency\",\n\t\t\tvalue : this.toFrequency(options.frequency),\n\t\t});\n\n\t\tthis.detune = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._oscillator.detune,\n\t\t\tunits : \"cents\",\n\t\t\tvalue : options.detune,\n\t\t});\n\t}\n\n\tstatic getDefaults(): ToneOscillatorNodeOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\ttype: \"sine\" as OscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * Start the oscillator node at the given time\n\t * @param  time When to start the oscillator\n\t */\n\tstart(time?: Time): this {\n\t\tthis.log(\"start\", time);\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._startGain(computedTime);\n\t\tthis._oscillator.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\t/**\n\t * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n\t * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n\t */\n\tsetPeriodicWave(periodicWave: PeriodicWave): this {\n\t\tthis._oscillator.setPeriodicWave(periodicWave);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n\t */\n\tget type(): OscillatorType {\n\t\treturn this._oscillator.type;\n\t}\n\tset type(type: OscillatorType) {\n\t\tthis._oscillator.type = type;\n\t}\n\n\t/**\n\t *  Clean up.\n\t *  @return  {OscillatorNode}  this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState } from \"../core/util/StateTimeline\";\n\nexport type OneShotSourceCurve = \"linear\" | \"exponential\";\n\nexport interface OneShotSourceOptions extends ToneAudioNodeOptions {\n\tonended: () => void;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tcurve: OneShotSourceCurve;\n}\n\nexport abstract class OneShotSource<Options extends ToneAudioNodeOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The callback to invoke after the\n\t *  source is done playing.\n\t */\n\tonended: () => void = noOp;\n\n\t/**\n\t * Sources do not have input nodes\n\t */\n\tinput: undefined;\n\n\t/**\n\t *  The start time\n\t */\n\tprotected _startTime: number = -1;\n\n\t/**\n\t *  The stop time\n\t */\n\tprotected _stopTime: number = -1;\n\n\t/**\n\t * The id of the timeout\n\t */\n\tprivate _timeout: number = -1;\n\n\t/**\n\t * The public output node\n\t */\n\toutput: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain : 0,\n\t});\n\n\t/**\n\t *  The output gain node.\n\t */\n\tprotected _gainNode = this.output;\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time;\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time;\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tprotected _curve: OneShotSourceCurve;\n\n\tconstructor(options: OneShotSourceOptions) {\n\t\tsuper(options);\n\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t\tthis._curve = options.curve;\n\t}\n\n\tstatic getDefaults(): OneShotSourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tcurve: \"linear\" as OneShotSourceCurve,\n\t\t\tfadeIn : 0,\n\t\t\tfadeOut: 0,\n\t\t\tonended : noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Stop the source node\n\t */\n\tprotected abstract _stopSource(time: Seconds): void;\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the node\n\t */\n\tprotected abstract start(time?: Time): this;\n\t/**\n\t * Start the source at the given time\n\t * @param  time When to start the source\n\t */\n\tprotected _startGain(time: Seconds, gain: GainFactor = 1): this {\n\t\tthis.assert(this._startTime === -1, \"Source cannot be started more than once\");\n\t\t// apply a fade in envelope\n\t\tconst fadeInTime = this.toSeconds(this._fadeIn);\n\n\t\t// record the start time\n\t\tthis._startTime = time + fadeInTime;\n\t\tthis._startTime = Math.max(this._startTime, this.context.currentTime);\n\n\t\t// schedule the envelope\n\t\tif (fadeInTime > 0) {\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._gainNode.gain.setValueAtTime(gain, time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source node at the given time.\n\t * @param time When to stop the source\n\t */\n\tstop(time?: Time): this {\n\t\tthis._stopGain(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source at the given time\n\t * @param  time When to stop the source\n\t */\n\tprotected _stopGain(time: Seconds): this {\n\t\tthis.assert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n\t\t// cancel the previous stop\n\t\tthis.cancelStop();\n\n\t\t// the fadeOut time\n\t\tconst fadeOutTime = this.toSeconds(this._fadeOut);\n\n\t\t// schedule the stop callback\n\t\tthis._stopTime = this.toSeconds(time) + fadeOutTime;\n\t\tthis._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\t\tif (fadeOutTime > 0) {\n\t\t\t// start the fade out curve at the given time\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// stop any ongoing ramps, and set the value to 0\n\t\t\tthis._gainNode.gain.cancelAndHoldAtTime(time);\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t}\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._timeout = this.context.setTimeout(() => {\n\t\t\t// allow additional time for the exponential curve to fully decay\n\t\t\tconst additionalTail = this._curve === \"exponential\" ? this.toSeconds(this._fadeOut) * 2 : 0;\n\t\t\tthis._stopSource(this.now() + additionalTail);\n\t\t\tthis._onended();\n\t\t}, this._stopTime - this.context.currentTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the onended callback\n\t */\n\tprotected _onended(): void {\n\t\tif (this.onended !== noOp) {\n\t\t\tthis.onended();\n\t\t\t// overwrite onended to make sure it only is called once\n\t\t\tthis.onended = noOp;\n\t\t\t// dispose when it's ended to free up for garbage collection\n\t\t\tsetTimeout(() => this.dispose(), 1000);\n\t\t}\n\t}\n\n\t/**\n\t *  Get the playback state at the given time\n\t */\n\tgetStateAtTime = function(time: Time): BasicPlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._startTime !== -1 && computedTime >= this._startTime &&\n\t\t\t(this._stopTime === -1 || computedTime <= this._stopTime)) {\n\t\t\treturn \"started\";\n\t\t} else {\n\t\t\treturn \"stopped\";\n\t\t}\n\t};\n\n\t/**\n\t * Get the playback state at the current time\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t *  Cancel a scheduled stop event\n\t */\n\tcancelStop(): this {\n\t\tthis.assert(this._startTime !== -1, \"Source is not started\");\n\t\t// cancel the stop envelope\n\t\tthis._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._stopTime = -1;\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../../core/Connect\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { OneShotSource, OneShotSourceCurve, OneShotSourceOptions } from \"../OneShotSource\";\n\nexport type ToneBufferSourceCurve = OneShotSourceCurve;\n\ninterface ToneBufferSourceOptions extends OneShotSourceOptions {\n\tbuffer: ToneAudioBuffer;\n\tcurve: ToneBufferSourceCurve;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tloop: boolean;\n\tonload: () => void;\n}\n\n/**\n *  Wrapper around the native BufferSourceNode.\n *  @param  buffer   The buffer to play\n *  @param  onended  The callback to invoke when the buffer is done playing.\n */\nexport class ToneBufferSource extends OneShotSource<ToneBufferSourceOptions> {\n\n\tname = \"ToneBufferSource\";\n\n\t/**\n\t *  The oscillator\n\t */\n\tprivate _source = this.context.createBufferSource();\n\tprotected _internalChannels = [this._gainNode, this._source];\n\n\t/**\n\t *  The frequency of the oscillator\n\t */\n\treadonly playbackRate: Param<Positive>;\n\n\t/**\n\t * The private instance of the buffer object\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * indicators if the source has started/stopped\n\t */\n\tprivate _sourceStarted: boolean = false;\n\tprivate _sourceStopped: boolean = false;\n\n\tconstructor(buffer?: ToneAudioBuffer | AudioBuffer | string, onload?: () => void);\n\tconstructor(options?: Partial<ToneBufferSourceOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]));\n\t\tconst options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"buffer\", \"onload\"]);\n\n\t\tconnect(this._source, this._gainNode);\n\t\tthis._source.onended = () => this._stopSource();\n\n\t\t/**\n\t\t *  The playbackRate of the buffer\n\t\t */\n\t\tthis.playbackRate = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._source.playbackRate,\n\t\t\tunits : \"positive\",\n\t\t\tvalue : options.playbackRate,\n\t\t});\n\n\t\t// set some values initially\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis._buffer = new ToneAudioBuffer(options.buffer, options.onload);\n\t}\n\n\tstatic getDefaults(): ToneBufferSourceOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tbuffer: new ToneAudioBuffer(),\n\t\t\tloop: false,\n\t\t\tloopEnd : 0,\n\t\t\tloopStart : 0,\n\t\t\tonload: noOp,\n\t\t\tplaybackRate : 1,\n\t\t});\n\t}\n\n\t/**\n\t *  The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(t: Time) {\n\t\tthis._fadeIn = t;\n\t}\n\n\t/**\n\t *  The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(t: Time) {\n\t\tthis._fadeOut = t;\n\t}\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tget curve(): ToneBufferSourceCurve {\n\t\treturn this._curve;\n\t}\n\tset curve(t) {\n\t\tthis._curve = t;\n\t}\n\n\t/**\n\t *  Start the buffer\n\t *  @param  time When the player should start.\n\t *  @param  offset The offset from the beginning of the sample to start at.\n\t *  @param  duration How long the sample should play. If no duration\n\t *                   is given, it will default to the full length\n\t *                   of the sample (minus any offset)\n\t *  @param  gain  The gain to play the buffer back at.\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time, gain: GainFactor = 1): this {\n\t\tthis.assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n\t\ttime = this.toSeconds(time);\n\n\t\t// apply the gain envelope\n\t\tthis._startGain(time, gain);\n\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this.loop) {\n\t\t\toffset = defaultArg(offset, this.loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\t\toffset = this.toSeconds(offset);\n\t\t// make sure the offset is not less than 0\n\t\toffset = Math.max(offset, 0);\n\n\t\t// start the buffer source\n\t\tif (this.loop) {\n\t\t\t// modify the offset if it's greater than the loop time\n\t\t\tconst loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\t\tconst loopStart = this.toSeconds(this.loopStart);\n\t\t\tconst loopDuration = loopEnd - loopStart;\n\t\t\t// move the offset back\n\t\t\tif (offset >= loopEnd) {\n\t\t\t\toffset = ((offset - loopStart) % loopDuration) + loopStart;\n\t\t\t}\n\t\t}\n\n\t\t// this.buffer.loaded would have return false if the AudioBuffer was undefined\n\t\tthis._source.buffer = this.buffer.get() as AudioBuffer;\n\t\tthis._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\tif (offset < this.buffer.duration) {\n\t\t\tthis._sourceStarted = true;\n\t\t\tthis._source.start(time, offset);\n\t\t}\n\n\t\t// if a duration is given, schedule a stop\n\t\tif (isDefined(duration)) {\n\t\t\tlet computedDur = this.toSeconds(duration);\n\t\t\t// make sure it's never negative\n\t\t\tcomputedDur = Math.max(computedDur, 0);\n\t\t\tthis.stop(time + computedDur);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tif (!this._sourceStopped) {\n\t\t\tthis._sourceStopped = true;\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._onended();\n\t\t}\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._source.loopStart;\n\t}\n\tset loopStart(loopStart: Time) {\n\t\tthis._source.loopStart = this.toSeconds(loopStart);\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._source.loopEnd;\n\t}\n\tset loopEnd(loopEnd: Time) {\n\t\tthis._source.loopEnd = this.toSeconds(loopEnd);\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer: ToneAudioBuffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._source.loop;\n\t}\n\tset loop(loop: boolean) {\n\t\tthis._source.loop = loop;\n\t\tif (this._sourceStarted) {\n\t\t\tthis.cancelStop();\n\t\t}\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._source.onended = null;\n\t\tthis._source.disconnect();\n\t\tthis._buffer.dispose();\n\t\tthis.playbackRate.dispose();\n\t\treturn this;\n\t}\n}\n","import { noOp } from \"../util/Interface\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\nexport interface TransportEventOptions {\n\tcallback: (time: number) => void;\n\tonce: boolean;\n\ttime: Ticks;\n}\n\n/**\n * TransportEvent is an internal class used by (Tone.Transport)[Transport]\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n * @param Transport The transport object which the event belongs to\n */\nexport class TransportEvent {\n\n\t/**\n\t * Reference to the Transport that created it\n\t */\n\tprotected transport: Transport;\n\n\t/**\n\t * The unique id of the event\n\t */\n\tid: number = TransportEvent._eventId++;\n\n\t/**\n\t * The time the event starts\n\t */\n\ttime: Ticks;\n\n\t/**\n\t * The callback to invoke\n\t */\n\tprivate callback?: (time: Seconds) => void;\n\n\t/**\n\t * If the event should be removed after being invoked.\n\t */\n\tprivate _once: boolean;\n\n\tconstructor(transport: Transport, opts: Partial<TransportEventOptions>) {\n\n\t\tconst options: TransportEventOptions = Object.assign(TransportEvent.getDefaults(), opts);\n\n\t\tthis.transport = transport;\n\t\tthis.callback = options.callback;\n\t\tthis._once = options.once;\n\t\tthis.time = options.time;\n\t}\n\n\tstatic getDefaults(): TransportEventOptions {\n\t\treturn {\n\t\t\tcallback: noOp,\n\t\t\tonce: false,\n\t\t\ttime: 0,\n\t\t};\n\t}\n\n\t/**\n\t * Current ID counter\n\t */\n\tprivate static _eventId: number = 0;\n\n\t/**\n\t * Invoke the event callback.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\tif (this.callback) {\n\t\t\tthis.callback(time);\n\t\t\tif (this._once) {\n\t\t\t\tthis.transport.clear(this.id);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tthis.callback = undefined;\n\t\treturn this;\n\t}\n}\n","import { Tone } from \"../Tone\";\nimport { isDefined } from \"./TypeCheck\";\n\n/**\n * An IntervalTimeline event must have a time and duration\n */\nexport interface IntervalTimelineEvent {\n\ttime: number;\n\tduration: number;\n\t[propName: string]: any;\n}\n\n/**\n * Similar to Tone.Timeline, but all events represent\n * intervals with both \"time\" and \"duration\" times. The\n * events are placed in a tree structure optimized\n * for querying an intersection point with the timeline\n * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n * to represent the data.\n */\nexport class IntervalTimeline extends Tone {\n\n\tname = \"IntervalTimeline\";\n\n\t/**\n\t *  The root node of the inteval tree\n\t */\n\tprivate _root: IntervalNode | null = null;\n\n\t/**\n\t *  Keep track of the length of the timeline.\n\t */\n\tprivate _length: number = 0;\n\n\t/**\n\t *  The event to add to the timeline. All events must\n\t *  have a time and duration value\n\t *  @param  event  The event to add to the timeline\n\t */\n\tadd(event: IntervalTimelineEvent): this {\n\t\tthis.assert(isDefined(event.time), \"Events must have a time property\");\n\t\tthis.assert(isDefined(event.duration), \"Events must have a duration parameter\");\n\n\t\tevent.time = event.time.valueOf();\n\t\tlet node: IntervalNode | null = new IntervalNode(event.time, event.time + event.duration, event);\n\t\tif (this._root === null) {\n\t\t\tthis._root = node;\n\t\t} else {\n\t\t\tthis._root.insert(node);\n\t\t}\n\t\tthis._length++;\n\t\t// Restructure tree to be balanced\n\t\twhile (node !== null) {\n\t\t\tnode.updateHeight();\n\t\t\tnode.updateMax();\n\t\t\tthis._rebalance(node);\n\t\t\tnode = node.parent;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  event  The event to remove from the timeline\n\t */\n\tremove(event: IntervalTimelineEvent): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(event.time, results);\n\t\t\tfor (const node of results) {\n\t\t\t\tif (node.event === event) {\n\t\t\t\t\tthis._removeNode(node);\n\t\t\t\t\tthis._length--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The number of items in the timeline.\n\t *  @readOnly\n\t */\n\tget length(): number {\n\t\treturn this._length;\n\t}\n\n\t/**\n\t *  Remove events whose time time is after the given time\n\t *  @param  time  The time to query.\n\t */\n\tcancel(after: number): this {\n\t\tthis.forEachFrom(after, event => this.remove(event));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Set the root node as the given node\n\t */\n\tprivate _setRoot(node: IntervalNode | null): void {\n\t\tthis._root = node;\n\t\tif (this._root !== null) {\n\t\t\tthis._root.parent = null;\n\t\t}\n\t}\n\n\t/**\n\t *  Replace the references to the node in the node's parent\n\t *  with the replacement node.\n\t */\n\tprivate _replaceNodeInParent(node: IntervalNode, replacement: IntervalNode | null): void {\n\t\tif (node.parent !== null) {\n\t\t\tif (node.isLeftChild()) {\n\t\t\t\tnode.parent.left = replacement;\n\t\t\t} else {\n\t\t\t\tnode.parent.right = replacement;\n\t\t\t}\n\t\t\tthis._rebalance(node.parent);\n\t\t} else {\n\t\t\tthis._setRoot(replacement);\n\t\t}\n\t}\n\n\t/**\n\t *  Remove the node from the tree and replace it with\n\t *  a successor which follows the schema.\n\t */\n\tprivate _removeNode(node): void {\n\t\tif (node.left === null && node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, null);\n\t\t} else if (node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, node.left);\n\t\t} else if (node.left === null) {\n\t\t\tthis._replaceNodeInParent(node, node.right);\n\t\t} else {\n\t\t\tconst balance = node.getBalance();\n\t\t\tlet replacement: IntervalNode;\n\t\t\tlet temp: IntervalNode | null = null;\n\t\t\tif (balance > 0) {\n\t\t\t\tif (node.left.right === null) {\n\t\t\t\t\treplacement = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\ttemp = replacement;\n\t\t\t\t} else {\n\t\t\t\t\treplacement = node.left.right;\n\t\t\t\t\twhile (replacement.right !== null) {\n\t\t\t\t\t\treplacement = replacement.right;\n\t\t\t\t\t}\n\t\t\t\t\tif (replacement.parent) {\n\t\t\t\t\t\treplacement.parent.right = replacement.left;\n\t\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (node.right.left === null) {\n\t\t\t\treplacement = node.right;\n\t\t\t\treplacement.left = node.left;\n\t\t\t\ttemp = replacement;\n\t\t\t} else {\n\t\t\t\treplacement = node.right.left;\n\t\t\t\twhile (replacement.left !== null) {\n\t\t\t\t\treplacement = replacement.left;\n\t\t\t\t}\n\t\t\t\tif (replacement.parent) {\n\t\t\t\t\treplacement.parent.left = replacement.right;\n\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (node.parent !== null) {\n\t\t\t\tif (node.isLeftChild()) {\n\t\t\t\t\tnode.parent.left = replacement;\n\t\t\t\t} else {\n\t\t\t\t\tnode.parent.right = replacement;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._setRoot(replacement);\n\t\t\t}\n\t\t\tif (temp) {\n\t\t\t\tthis._rebalance(temp);\n\t\t\t}\n\t\t}\n\t\tnode.dispose();\n\t}\n\n\t/**\n\t *  Rotate the tree to the left\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\t_rotateLeft(node): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.right the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.right;\n\t\tnode.right = pivotNode.left;\n\t\tpivotNode.left = node;\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t *  Rotate the tree to the right\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\t_rotateRight(node): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.left the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.left;\n\t\tnode.left = pivotNode.right;\n\t\tpivotNode.right = node;\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t *  Balance the BST\n\t */\n\tprivate _rebalance(node: IntervalNode): void {\n\t\tconst balance = node.getBalance();\n\t\tif (balance > 1 && node.left) {\n\t\t\tif (node.left.getBalance() < 0) {\n\t\t\t\tthis._rotateLeft(node.left);\n\t\t\t} else {\n\t\t\t\tthis._rotateRight(node);\n\t\t\t}\n\t\t} else if (balance < -1 && node.right) {\n\t\t\tif (node.right.getBalance() > 0) {\n\t\t\t\tthis._rotateRight(node.right);\n\t\t\t} else {\n\t\t\t\tthis._rotateLeft(node);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  Get an event whose time and duration span the give time. Will\n\t *  return the match whose \"time\" value is closest to the given time.\n\t *  @return  The event which spans the desired time\n\t */\n\tget(time: number): IntervalTimelineEvent | null {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tif (results.length > 0) {\n\t\t\t\tlet max = results[0];\n\t\t\t\tfor (let i = 1; i < results.length; i++) {\n\t\t\t\t\tif (results[i].low > max.low) {\n\t\t\t\t\t\tmax = results[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn max.event;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t *  Iterate over everything in the timeline.\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: IntervalTimelineEvent) => void): this {\n\t\tif (this._root !== null) {\n\t\t\tconst allNodes: IntervalNode[] = [];\n\t\t\tthis._root.traverse(node => allNodes.push(node));\n\t\t\tallNodes.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array in which the given time\n\t *  overlaps with the time and duration time of the event.\n\t *  @param  time The time to check if items are overlapping\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: IntervalTimelineEvent) => void): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Iterate over everything in the array in which the time is greater\n\t *  than or equal to the given time.\n\t *  @param  time The time to check if items are before\n\t *  @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time, callback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.searchAfter(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._root !== null) {\n\t\t\tthis._root.traverse(node => node.dispose());\n\t\t}\n\t\tthis._root = null;\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tINTERVAL NODE HELPER\n///////////////////////////////////////////////////////////////////////////\n\n/**\n *  Represents a node in the binary search tree, with the addition\n *  of a \"high\" value which keeps track of the highest value of\n *  its children.\n *  References:\n *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n *  @param low\n *  @param high\n */\n// tslint:disable-next-line: max-classes-per-file\nclass IntervalNode {\n\n\t// the event container\n\tevent: IntervalTimelineEvent | null;\n\t// the low value\n\tlow: number;\n\t// the high value\n\thigh: number;\n\t// the high value for this and all child nodes\n\tmax: number;\n\t// the nodes to the left\n\tprivate _left: IntervalNode | null = null;\n\t// the nodes to the right\n\tprivate _right: IntervalNode | null = null;\n\t// the parent node\n\tparent: IntervalNode | null = null;\n\t// the number of child nodes\n\theight: number = 0;\n\n\tconstructor(low, high, event) {\n\t\tthis.event = event;\n\t\t// the low value\n\t\tthis.low = low;\n\t\t// the high value\n\t\tthis.high = high;\n\t\t// the high value for this and all child nodes\n\t\tthis.max = this.high;\n\t}\n\n\t/**\n\t *  Insert a node into the correct spot in the tree\n\t */\n\tinsert(node: IntervalNode): void {\n\t\tif (node.low <= this.low) {\n\t\t\tif (this.left === null) {\n\t\t\t\tthis.left = node;\n\t\t\t} else {\n\t\t\t\tthis.left.insert(node);\n\t\t\t}\n\t\t} else if (this.right === null) {\n\t\t\tthis.right = node;\n\t\t} else {\n\t\t\tthis.right.insert(node);\n\t\t}\n\t}\n\n\t/**\n\t *  Search the tree for nodes which overlap\n\t *  with the given point\n\t *  @param  point  The point to query\n\t *  @param  results  The array to put the results\n\t */\n\tsearch(point: number, results: IntervalNode[]): void {\n\t\t// If p is to the right of the rightmost point of any interval\n\t\t// in this node and all children, there won't be any matches.\n\t\tif (point > this.max) {\n\t\t\treturn;\n\t\t}\n\t\t// Search left children\n\t\tif (this.left !== null) {\n\t\t\tthis.left.search(point, results);\n\t\t}\n\t\t// Check this node\n\t\tif (this.low <= point && this.high > point) {\n\t\t\tresults.push(this);\n\t\t}\n\t\t// If p is to the left of the time of this interval,\n\t\t// then it can't be in any child to the right.\n\t\tif (this.low > point) {\n\t\t\treturn;\n\t\t}\n\t\t// Search right children\n\t\tif (this.right !== null) {\n\t\t\tthis.right.search(point, results);\n\t\t}\n\t}\n\n\t/**\n\t *  Search the tree for nodes which are less\n\t *  than the given point\n\t *  @param  point  The point to query\n\t *  @param  results  The array to put the results\n\t */\n\tsearchAfter(point: number, results: IntervalNode[]): void {\n\t\t// Check this node\n\t\tif (this.low >= point) {\n\t\t\tresults.push(this);\n\t\t\tif (this.left !== null) {\n\t\t\t\tthis.left.searchAfter(point, results);\n\t\t\t}\n\t\t}\n\t\t// search the right side\n\t\tif (this.right !== null) {\n\t\t\tthis.right.searchAfter(point, results);\n\t\t}\n\t}\n\n\t/**\n\t *  Invoke the callback on this element and both it's branches\n\t *  @param  {Function}  callback\n\t */\n\ttraverse(callback: (self: IntervalNode) => void): void {\n\t\tcallback(this);\n\t\tif (this.left !== null) {\n\t\t\tthis.left.traverse(callback);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.right.traverse(callback);\n\t\t}\n\t}\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tupdateHeight(): void {\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tthis.height = Math.max(this.left.height, this.right.height) + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tthis.height = this.right.height + 1;\n\t\t} else if (this.left !== null) {\n\t\t\tthis.height = this.left.height + 1;\n\t\t} else {\n\t\t\tthis.height = 0;\n\t\t}\n\t}\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tupdateMax(): void {\n\t\tthis.max = this.high;\n\t\tif (this.left !== null) {\n\t\t\tthis.max = Math.max(this.max, this.left.max);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.max = Math.max(this.max, this.right.max);\n\t\t}\n\t}\n\n\t/**\n\t *  The balance is how the leafs are distributed on the node\n\t *  @return  Negative numbers are balanced to the right\n\t */\n\tgetBalance(): number {\n\t\tlet balance = 0;\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tbalance = this.left.height - this.right.height;\n\t\t} else if (this.left !== null) {\n\t\t\tbalance = this.left.height + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tbalance = -(this.right.height + 1);\n\t\t}\n\t\treturn balance;\n\t}\n\n\t/**\n\t *  @returns true if this node is the left child of its parent\n\t */\n\tisLeftChild(): boolean {\n\t\treturn this.parent !== null && this.parent.left === this;\n\t}\n\n\t/**\n\t *  get/set the left node\n\t */\n\tget left(): IntervalNode | null {\n\t\treturn this._left;\n\t}\n\n\tset left(node: IntervalNode | null) {\n\t\tthis._left = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t *  get/set the right node\n\t */\n\tget right(): IntervalNode | null {\n\t\treturn this._right;\n\t}\n\n\tset right(node: IntervalNode | null) {\n\t\tthis._right = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t *  null out references.\n\t */\n\tdispose(): void {\n\t\tthis.parent = null;\n\t\tthis._left = null;\n\t\tthis._right = null;\n\t\tthis.event = null;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter, EmitterEventObject } from \"../util/Emitter\";\nimport { noOp, readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline } from \"../util/StateTimeline\";\nimport { TickSignal } from \"./TickSignal\";\nimport { TickSource } from \"./TickSource\";\n\ntype ClockCallback = (time: Time, ticks?: Ticks) => void;\n\ninterface ClockOptions extends ToneWithContextOptions {\n\tfrequency: number;\n\tcallback: ClockCallback;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ntype ClockEvent = \"start\" | \"stop\" | \"pause\";\n\n/**\n * A sample accurate clock which provides a callback at the given rate.\n * While the callback is not sample-accurate (it is still susceptible to\n * loose JS timing), the time passed in as the argument to the callback\n * is precise. For most applications, it is better to use Tone.Transport\n * instead of the Clock by itself since you can synchronize multiple callbacks.\n *\n * @param callback The callback to be invoked with the time of the audio event\n * @param frequency The rate of the callback\n * @example\n * //the callback will be invoked approximately once a second\n * //and will print the time exactly once a second apart.\n * const clock = new Clock(time => {\n * \tconsole.log(time);\n * }, 1);\n */\nexport class Clock<Type extends BPM | Hertz = Hertz>\nextends ToneWithContext<ClockOptions> implements Emitter<ClockEvent> {\n\n\tname = \"Clock\";\n\n\t/**\n\t *  The callback function to invoke at the scheduled tick.\n\t */\n\tcallback: ClockCallback = noOp;\n\n\t/**\n\t *  The tick counter\n\t */\n\tprivate _tickSource: TickSource<Type>;\n\n\t/**\n\t *  The last time the loop callback was invoked\n\t */\n\tprivate _lastUpdate: number = 0;\n\n\t/**\n\t *  Keep track of the playback state\n\t */\n\tprivate _state: StateTimeline = new StateTimeline(\"stopped\");\n\n\t/**\n\t * Context bound reference to the _loop method\n\t * This is necessary to remove the event in the end.\n\t */\n\tprivate _boundLoop: () => void = this._loop.bind(this);\n\n\t/**\n\t *  The rate the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<Type>;\n\n\tconstructor(options: Partial<ClockOptions>);\n\tconstructor(callback?: ClockCallback, frequency?: Frequency);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]));\n\t\tconst options = optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]);\n\n\t\tthis.callback = options.callback;\n\t\tthis._tickSource = new TickSource({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tunits: options.units,\n\t\t});\n\t\tthis._lastUpdate = 0;\n\t\tthis.frequency = this._tickSource.frequency;\n\t\treadOnly(this, \"frequency\");\n\n\t\t// add an initial state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\n\t\t// bind a callback to the worker thread\n\t\tthis.context.on(\"tick\", this._boundLoop);\n\t}\n\n\tstatic getDefaults(): ClockOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback: noOp as ClockCallback,\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\",\n\t\t}) as ClockOptions;\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  time    The time the clock should start\n\t *  @param offset  Where the tick counter starts counting from.\n\t */\n\tstart(time?: Time, offset?: Ticks): this {\n\t\t// make sure the context is started\n\t\tthis.context.resume();\n\t\t// start the loop\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis._tickSource.start(computedTime, offset);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"start\", computedTime, offset);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t *  @param time The time when the clock should stop.\n\t *  @returns {Clock} this\n\t *  @example\n\t * clock.stop();\n\t */\n\tstop(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis._tickSource.stop(computedTime);\n\t\tif (computedTime < this._lastUpdate) {\n\t\t\tthis.emit(\"stop\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param time The time when the clock should stop.\n\t */\n\tpause(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t\tthis._tickSource.pause(computedTime);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"pause\", computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The number of times the callback was invoked. Starts counting at 0\n\t *  and increments after the callback was invoked.\n\t */\n\tget ticks(): Ticks {\n\t\treturn Math.ceil(this.getTicksAtTime(this.now()));\n\t}\n\tset ticks(t: Ticks) {\n\t\tthis._tickSource.ticks = t;\n\t}\n\n\t/**\n\t *  The time since ticks=0 that the Clock has been running. Accounts for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._tickSource.seconds;\n\t}\n\tset seconds(s: Seconds) {\n\t\tthis._tickSource.seconds = s;\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._tickSource.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\tthis._tickSource.setTicksAtTime(ticks, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\treturn this._tickSource.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the next tick\n\t * @param  ticks The tick number.\n\t */\n\tnextTickTime(offset: Ticks, when: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst currentTick = this.getTicksAtTime(computedTime);\n\t\treturn this._tickSource.getTimeOfTick(currentTick + offset, computedTime);\n\t}\n\n\t/**\n\t *  The scheduling loop.\n\t */\n\tprivate _loop(): void {\n\n\t\tconst startTime = this._lastUpdate;\n\t\tconst endTime = this.now();\n\t\tthis._lastUpdate = endTime;\n\n\t\tif (startTime !== endTime) {\n\t\t\t// the state change events\n\t\t\tthis._state.forEachBetween(startTime, endTime, e => {\n\t\t\t\tswitch (e.state) {\n\t\t\t\t\tcase \"started\" :\n\t\t\t\t\t\tconst offset = this._tickSource.getTicksAtTime(e.time);\n\t\t\t\t\t\tthis.emit(\"start\", e.time, offset);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"stopped\" :\n\t\t\t\t\t\tif (e.time !== 0) {\n\t\t\t\t\t\t\tthis.emit(\"stop\", e.time);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"paused\" :\n\t\t\t\t\t\tthis.emit(\"pause\", e.time);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t\t// the tick callbacks\n\t\t\tthis._tickSource.forEachTickBetween(startTime, endTime, (time, ticks) => {\n\t\t\t\tthis.callback(time, ticks);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Returns the scheduled state at the given time.\n\t * @param  time  The time to query.\n\t * @return  The name of the state input in setStateAtTime.\n\t * @example\n\t * clock.start(\"+0.1\");\n\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tgetStateAtTime(time: Time): PlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(computedTime);\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.context.off(\"tick\", this._boundLoop);\n\t\tthis._tickSource.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t///////////////////////////////////////////////////////////////////////\n\n\ton!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\tonce!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\toff!: (event: ClockEvent, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Clock);\n","export const version = \"14.0.22\";\n","import { Volume } from \"../component/channel/Volume\";\nimport { Param } from \"../core/context/Param\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface InstrumentOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n}\n\n/**\n *  Base-class for all instruments\n */\nexport abstract class Instrument<Options extends InstrumentOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t *  The output and volume triming node\n\t */\n\tprivate _volume: Volume;\n\toutput: OutputNode;\n\n\t/**\n\t * The instrument only has an output\n\t */\n\tinput: undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * source.volume.value = -6;\n\t */\n\tvolume: Param<Decibels>;\n\n\t/**\n\t * Keep track of all events scheduled to the transport\n\t * when the instrument is 'synced'\n\t */\n\tprivate _scheduledEvents: number[] = [];\n\n\t/**\n\t * If the instrument is currently synced\n\t */\n\tprivate _synced: boolean = false;\n\n\tconstructor(options?: Partial<InstrumentOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Instrument.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Instrument.getDefaults(), arguments);\n\n\t\tthis._volume = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\tthis.output = this._volume;\n\t\treadOnly(this, \"volume\");\n\t}\n\n\tstatic getDefaults(): InstrumentOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tnumberOfOutputs: 1,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n\t * will be scheduled along the transport.\n\t * @example\n\t * instrument.sync()\n\t * //schedule 3 notes when the transport first starts\n\t * instrument.triggerAttackRelease('C4', '8n', 0)\n\t * instrument.triggerAttackRelease('E4', '8n', '8n')\n\t * instrument.triggerAttackRelease('G4', '8n', '4n')\n\t * //start the transport to hear the notes\n\t * Transport.start()\n\t * @returns {Instrument} this\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\t\tthis._syncMethod(\"triggerRelease\", 0);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Wrap the given method so that it can be synchronized\n\t * @param method Which method to wrap and sync\n\t * @param  timePosition What position the time argument appears in\n\t */\n\tprotected _syncMethod(method: string, timePosition: number): void {\n\t\tconst originalMethod = this[\"_original_\" + method] = this[method];\n\t\tthis[method] = (...args: any[]) => {\n\t\t\tconst time = args[timePosition];\n\t\t\tconst id = this.context.transport.schedule((t) => {\n\t\t\t\targs[timePosition] = t;\n\t\t\t\toriginalMethod.apply(this, args);\n\t\t\t}, time);\n\t\t\tthis._scheduledEvents.push(id);\n\t\t};\n\t}\n\n\t/**\n\t * Unsync the instrument from the Transport\n\t */\n\tunsync(): this {\n\t\tthis._scheduledEvents.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduledEvents = [];\n\t\tif (this._synced) {\n\t\t\tthis._synced = false;\n\t\t\tthis.triggerAttack = this._original_triggerAttack;\n\t\t\tthis.triggerRelease = this._original_triggerRelease;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Trigger the attack and then the release after the duration.\n\t *  @param  note     The note to trigger.\n\t *  @param  duration How long the note should be held for before\n\t *                          triggering the release. This value must be greater than 0.\n\t *  @param time  When the note should be triggered.\n\t *  @param  velocity The velocity the note should be triggered at.\n\t *  @example\n\t * //trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */\n\ttriggerAttackRelease(note: Frequency, duration: Time, time?: Time, velocity?: NormalRange): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tthis.triggerAttack(note, computedTime, velocity);\n\t\tthis.triggerRelease(computedTime + computedDuration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the instrument's note.\n\t * @param note the note to trigger\n\t * @param time the time to trigger the ntoe\n\t * @param velocity the velocity to trigger the note (betwee 0-1)\n\t */\n\tabstract triggerAttack(note: Frequency, time?: Time, velocity?: NormalRange): this;\n\t// tslint:disable-next-line: variable-name\n\tprivate _original_triggerAttack = this.triggerAttack;\n\n\t/**\n\t * Trigger the release phase of the current note.\n\t *  @param time when to trigger the release\n\t */\n\tabstract triggerRelease(...args: any[]): this;\n\t// tslint:disable-next-line: variable-name\n\tprivate _original_triggerRelease = this.triggerRelease;\n\n\t/**\n\t *  clean up\n\t *  @returns {Instrument} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.unsync();\n\t\tthis._scheduledEvents = [];\n\t\treturn this;\n\t}\n}\n","import { FrequencyClass } from \"../core/type/Frequency\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { Signal } from \"../signal/Signal\";\n\nexport interface MonophonicOptions extends InstrumentOptions {\n\tportamento: Seconds;\n}\n\n/**\n * Abstract base class for other monophonic instruments to extend.\n */\nexport abstract class Monophonic<Options extends MonophonicOptions> extends Instrument<Options> {\n\n\t/**\n\t *  The glide time between notes.\n\t */\n\tportamento: Seconds;\n\n\t/**\n\t * The instrument's envelope\n\t */\n\tabstract envelope: any;\n\n\t/**\n\t * The instrument's frequency signal.\n\t */\n\tabstract readonly frequency: Signal<Frequency>;\n\n\t/**\n\t * The instrument's detune control signal.\n\t */\n\tabstract readonly detune: Signal<Cents>;\n\n\tconstructor(options?: Partial<MonophonicOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Monophonic.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Monophonic.getDefaults(), arguments);\n\n\t\tthis.portamento = options.portamento;\n\n\t}\n\n\tstatic getDefaults(): MonophonicOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tportamento: 0,\n\t\t});\n\t}\n\n\t/**\n\t *  Trigger the attack of the note optionally with a given velocity.\n\t *\n\t *\n\t *  @param  note The note to trigger.\n\t *  @param  time When the note should start.\n\t *  @param  velocity The velocity scaler determines how \"loud\" the note\n\t *                   will be triggered.\n\t *  @example\n\t * synth.triggerAttack(\"C4\");\n\t *  @example\n\t * //trigger the note a half second from now at half velocity\n\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t */\n\ttriggerAttack(note: Frequency | FrequencyClass, time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", note, time, velocity);\n\t\ttime = this.toSeconds(time);\n\t\tthis._triggerEnvelopeAttack(time, velocity);\n\t\tthis.setNote(note, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Trigger the release portion of the envelope\n\t *  @param  {Time} [time=now] If no time is given, the release happens immediatly\n\t *  @returns {Monophonic} this\n\t *  @example\n\t * synth.triggerRelease();\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\ttime = this.toSeconds(time);\n\t\tthis._triggerEnvelopeRelease(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Internal method which starts the envelope attack\n\t */\n\tprotected abstract _triggerEnvelopeAttack(time: Seconds, velocity: NormalRange): void;\n\n\t/**\n\t *  Internal method which starts the envelope release\n\t */\n\tprotected abstract _triggerEnvelopeRelease(time: Seconds): void;\n\n\t/**\n\t *  Get the level of the output at the given time. Measures\n\t *  the envelope(s) value at the time.\n\t *  @param time The time to query the envelope value\n\t *  @return The output level between 0-1\n\t */\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\t/**\n\t *  Set the note at the given time. If no time is given, the note\n\t *  will set immediately.\n\t *  @param note The note to change to.\n\t *  @param  time The time when the note should be set.\n\t * @example\n\t * //change to F#6 in one quarter note from now.\n\t * synth.setNote(\"F#6\", \"+4n\");\n\t * @example\n\t * //change to Bb4 right now\n\t * synth.setNote(\"Bb4\");\n\t */\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tconst computedFrequency = note instanceof FrequencyClass ? note.toFrequency() : note;\n\t\tif (this.portamento > 0 && this.getLevelAtTime(time) > 0.05) {\n\t\t\tconst portTime = this.toSeconds(this.portamento);\n\t\t\tthis.frequency.exponentialRampTo(computedFrequency, portTime, time);\n\t\t} else {\n\t\t\tthis.frequency.setValueAtTime(computedFrequency, time);\n\t\t}\n\t\treturn this;\n\t}\n}\n","import { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope, EnvelopeOptions } from \"./Envelope\";\n\n/**\n * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts\n * an audio signal as the input and will apply the envelope to the amplitude\n * of the signal.\n * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n *\n * @param attack The amount of time it takes for the envelope to go from 0 to it's maximum value.\n * @param decay\tThe period of time after the attack that it takes for the envelope\n *                       \tto fall to the sustain value. Value must be greater than 0.\n * @param sustain\tThe percent of the maximum value that the envelope rests at until\n *                                \tthe release is triggered.\n * @param release\tThe amount of time after the release is triggered it takes to reach 0.\n *                         \tValue must be greater than 0.\n *  @example\n * var ampEnv = new AmplitudeEnvelope({\n * \t\"attack\": 0.1,\n * \t\"decay\": 0.2,\n * \t\"sustain\": 1.0,\n * \t\"release\": 0.8\n * }).toMaster();\n * //create an oscillator and connect it\n * var osc = new Tone.Oscillator().connect(ampEnv).start();\n * //trigger the envelopes attack and release \"8t\" apart\n * ampEnv.triggerAttackRelease(\"8t\");\n */\nexport class AmplitudeEnvelope extends Envelope {\n\n\tname = \"AmplitudeEnvelope\";\n\n\tprivate _gainNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\toutput: Gain = this._gainNode;\n\tinput: Gain = this._gainNode;\n\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tthis._sig.connect(this._gainNode.gain);\n\t\tthis.output = this._gainNode;\n\t\tthis.input = this._gainNode;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.dispose();\n\t\treturn this;\n\t}\n}\n","import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { OmniOscillatorConstructorOptions } from \"../source/oscillator/OscillatorInterface\";\nimport { Source } from \"../source/Source\";\nimport { Monophonic, MonophonicOptions } from \"./Monophonic\";\n\nexport interface SynthOptions extends MonophonicOptions {\n\toscillator: OmniOscillatorConstructorOptions;\n\tenvelope: EnvelopeOptions;\n}\n\n/**\n *  Synth is composed simply of a Tone.OmniOscillator routed through a Tone.AmplitudeEnvelope.\n * ```\n * +----------------+     +-------------------+\n * | OmniOscillator +>----> AmplitudeEnvelope +>-->Output\n * +----------------+     +-------------------+\n * ```\n *  @constructor\n *  @param options the options available for the synth.\n *  @example\n * var synth = new Synth().toMaster();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n */\nexport class Synth extends Monophonic<SynthOptions> {\n\n\tname = \"Synth\";\n\n\t/**\n\t *  The oscillator.\n\t */\n\treadonly oscillator = new OmniOscillator({ context: this.context });\n\n\t/**\n\t * The frequency signal\n\t */\n\treadonly frequency = this.oscillator.frequency;\n\n\t/**\n\t * The detune signal\n\t */\n\treadonly detune = this.oscillator.detune;\n\n\t/**\n\t * The envelope\n\t */\n\treadonly envelope: AmplitudeEnvelope = new AmplitudeEnvelope({ context: this.context });\n\n\tprotected _internalChannels = [this.oscillator, this.envelope, this.output];\n\n\tconstructor(options?: RecursivePartial<SynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Synth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Synth.getDefaults(), arguments);\n\n\t\tthis.oscillator.set(options.oscillator);\n\t\tthis.envelope.set(options.envelope);\n\n\t\t// connect the oscillators to the output\n\t\tthis.oscillator.chain(this.envelope, this.output);\n\t\treadOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): SynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(Source.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack : 0.005,\n\t\t\t\t\tdecay : 0.1,\n\t\t\t\t\trelease : 1,\n\t\t\t\t\tsustain : 0.3,\n\t\t\t\t},\n\t\t\t),\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), Object.keys(Source.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\ttype: \"triangle\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t}\n\n\t/**\n\t *  start the attack portion of the envelope\n\t *  @param time the time the attack should start\n\t *  @param velocity the velocity of the note (0-1)\n\t */\n\tprotected _triggerEnvelopeAttack(time?: Time, velocity: number = 1): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// the envelopes\n\t\tthis.envelope.triggerAttack(computedTime, velocity);\n\t\tthis.oscillator.start(computedTime);\n\t\t// if there is no release portion, stop the oscillator\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tconst computedAttack = this.toSeconds(this.envelope.attack);\n\t\t\tconst computedDecay = this.toSeconds(this.envelope.decay);\n\t\t\tthis.oscillator.stop(computedTime + computedAttack + computedDecay);\n\t\t}\n\t}\n\n\t/**\n\t *  start the release portion of the envelope\n\t *  @param time the time the release should start\n\t */\n\tprotected _triggerEnvelopeRelease(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.oscillator.stop(time + this.toSeconds(this.envelope.release));\n\t}\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.oscillator.dispose();\n\t\tthis.envelope.dispose();\n\t\treturn this;\n\t}\n}\n","export { Synth } from \"./Synth\";\n","import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n *  @class AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].\n *         See Tone.GainToAudio.\n *\n *  @extends {Tone.SignalBase}\n *  @constructor\n *  @example\n *  var a2g = new AudioToGain();\n */\nexport class AudioToGain extends SignalOperator<ToneAudioNodeOptions> {\n\n\tname = \"AudioToGain\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => (x + 1) / 2,\n\t});\n\tprotected _internalChannels = [this._norm];\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The GainRange output [0, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t *  clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n","import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Source, SourceOptions } from \"../source/Source\";\nimport { ToneBufferSource } from \"./buffer/BufferSource\";\n\ntype NoiseType = \"white\" | \"brown\" | \"pink\";\n\ninterface NoiseOptions extends SourceOptions {\n\ttype: NoiseType;\n\tplaybackRate: Positive;\n}\n\n/**\n * Noise is a noise generator. It uses looped noise buffers to save on performance.\n * Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n *\n * @param type the noise type (white|pink|brown)\n * @example\n * //initialize the noise and start\n * var noise = new Noise(\"pink\").start();\n *\n * //make an autofilter to shape the noise\n * var autoFilter = new Tone.AutoFilter({\n * \t\"frequency\" : \"8m\",\n * \t\"min\" : 800,\n * \t\"max\" : 15000\n * }).connect(Tone.Master);\n *\n * //connect the noise\n * noise.connect(autoFilter);\n * //start the autofilter LFO\n * autoFilter.start()\n */\nexport class Noise extends Source<NoiseOptions> {\n\n\tname = \"Noise\";\n\n\t/**\n\t * Private reference to the source\n\t */\n\tprivate _source: ToneBufferSource | null = null;\n\n\t/**\n\t * private reference to the type\n\t */\n\tprivate _type!: NoiseType;\n\n\t/**\n\t *  The playback rate of the noise. Affects\n\t *  the \"frequency\" of the noise.\n\t */\n\tprivate _playbackRate: Positive;\n\n\tconstructor(options?: NoiseType | Partial<NoiseOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]));\n\t\tconst options = optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]);\n\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.type = options.type;\n\t}\n\n\tstatic getDefaults(): NoiseOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tplaybackRate: 1,\n\t\t\ttype: \"white\" as NoiseType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n\t * @example\n\t * noise.type = \"white\";\n\t */\n\tget type(): NoiseType {\n\t\treturn this._type;\n\t}\n\tset type(type: NoiseType) {\n\t\tthis.assert(type in _noiseBuffers, \"Noise: invalid type: \" + type);\n\t\tif (this._type !== type) {\n\t\t\tthis._type = type;\n\t\t\t// if it's playing, stop and restart it\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tconst now = this.now();\n\t\t\t\tthis._stop(now);\n\t\t\t\tthis._start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  The playback rate of the noise. Affects\n\t *  the \"frequency\" of the noise.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate: Positive) {\n\t\tthis._playbackRate = rate;\n\t\tif (this._source) {\n\t\t\tthis._source.playbackRate.value = rate;\n\t\t}\n\t}\n\n\t/**\n\t *  internal start method\n\t */\n\tprotected _start(time?: Time): void {\n\t\tconst buffer = _noiseBuffers[this._type];\n\t\tthis._source = new ToneBufferSource(buffer).connect(this.output);\n\t\tthis._source.loop = true;\n\t\tthis._source.playbackRate.value = this._playbackRate;\n\t\tthis._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t}\n\n\t/**\n\t *  internal stop method\n\t *\n\t *  @param {Time} time\n\t *  @private\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tif (this._source) {\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._source = null;\n\t\t}\n\t}\n\n\t/**\n\t * Restarts the noise.\n\t * @param  time When to restart the noise.\n\t */\n\trestart(time?: Time): this {\n\t\t// TODO could be optimized by cancelling the buffer source 'stop'\n\t\t// stop and restart\n\t\tthis._stop(time);\n\t\tthis._start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._source) {\n\t\t\tthis._source.disconnect();\n\t\t}\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// THE NOISE BUFFERS\n///////////////////////////////////////////////////////////////////////////\n\n// Noise buffer stats\nconst BUFFER_LENGTH = 44100 * 5;\nconst NUM_CHANNELS = 2;\n\n/**\n * The cached noise buffers\n */\ninterface NoiseCache {\n\t[key: string]: ToneAudioBuffer | null;\n}\n\n/**\n * Cache the noise buffers\n */\nconst _noiseCache: NoiseCache = {\n\tbrown: null,\n\tpink: null,\n\twhite: null,\n};\n\n/**\n * The noise arrays. Generated on initialization.\n * borrowed heavily from https://github.com/zacharydenton/noise.js\n * (c) 2013 Zach Denton (MIT)\n */\nconst _noiseBuffers = {\n\tget brown(): ToneAudioBuffer {\n\t\tif (!_noiseCache.brown) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet lastOut = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tchannel[i] = (lastOut + (0.02 * white)) / 1.02;\n\t\t\t\t\tlastOut = channel[i];\n\t\t\t\t\tchannel[i] *= 3.5; // (roughly) compensate for gain\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.brown = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.brown;\n\t},\n\n\tget pink(): ToneAudioBuffer {\n\t\tif (!_noiseCache.pink) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\t// tslint:disable-next-line: one-variable-per-declaration\n\t\t\t\tlet b0, b1, b2, b3, b4, b5, b6;\n\t\t\t\tb0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tb0 = 0.99886 * b0 + white * 0.0555179;\n\t\t\t\t\tb1 = 0.99332 * b1 + white * 0.0750759;\n\t\t\t\t\tb2 = 0.96900 * b2 + white * 0.1538520;\n\t\t\t\t\tb3 = 0.86650 * b3 + white * 0.3104856;\n\t\t\t\t\tb4 = 0.55000 * b4 + white * 0.5329522;\n\t\t\t\t\tb5 = -0.7616 * b5 - white * 0.0168980;\n\t\t\t\t\tchannel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t\t\t\t\tchannel[i] *= 0.11; // (roughly) compensate for gain\n\t\t\t\t\tb6 = white * 0.115926;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.pink = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.pink;\n\t},\n\n\tget white(): ToneAudioBuffer {\n\t\tif (!_noiseCache.white) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tchannel[i] = Math.random() * 2 - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.white = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.white;\n\t},\n};\n","export { Noise } from \"./Noise\";\nexport { Oscillator } from \"./oscillator/Oscillator\";\nexport { AMOscillator } from \"./oscillator/AMOscillator\";\nexport { FMOscillator } from \"./oscillator/FMOscillator\";\nexport { PulseOscillator } from \"./oscillator/PulseOscillator\";\nexport { FatOscillator } from \"./oscillator/FatOscillator\";\nexport { PWMOscillator } from \"./oscillator/PWMOscillator\";\nexport { OmniOscillator } from \"./oscillator/OmniOscillator\";\nexport { ToneOscillatorNode } from \"./oscillator/OscillatorNode\";\nexport { ToneBufferSource } from \"./buffer/BufferSource\";\n","import { Context } from \"../context/Context\";\nimport { Ticks, TicksClass } from \"../type/Ticks\";\nimport { TransportEvent, TransportEventOptions } from \"./TransportEvent\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\ninterface TransportRepeatEventOptions extends TransportEventOptions {\n\tinterval: Ticks;\n\tduration: Ticks;\n}\n\n/**\n * TransportRepeatEvent is an internal class used by Tone.Transport\n * to schedule repeat events. This class should not be instantiated directly.\n */\nexport class TransportRepeatEvent extends TransportEvent {\n\n\t/**\n\t * When the event should stop repeating\n\t */\n\tprivate duration: Ticks;\n\n\t/**\n\t * The interval of the repeated event\n\t */\n\tprivate _interval: Ticks;\n\n\t/**\n\t * The ID of the current timeline event\n\t */\n\tprivate _currentId: number = -1;\n\n\t/**\n\t * The ID of the next timeline event\n\t */\n\tprivate _nextId: number = -1;\n\n\t/**\n\t * The time of the next event\n\t */\n\tprivate _nextTick = this.time;\n\n\t/**\n\t * a reference to the bound start method\n\t */\n\tprivate _boundRestart = this._restart.bind(this);\n\n\t/**\n\t * The audio context belonging to this event\n\t */\n\tprotected context: Context;\n\n\tconstructor(transport: Transport, opts: Partial<TransportRepeatEventOptions>) {\n\n\t\tsuper(transport, opts);\n\n\t\tconst options = Object.assign(TransportRepeatEvent.getDefaults(), opts);\n\n\t\tthis.duration = Ticks(options.duration).valueOf();\n\t\tthis._interval = Ticks(options.interval).valueOf();\n\t\tthis._nextTick = options.time;\n\t\tthis.transport.on(\"start\", this._boundRestart);\n\t\tthis.transport.on(\"loopStart\", this._boundRestart);\n\t\tthis.context = this.transport.context;\n\t\tthis._restart();\n\t}\n\n\tstatic getDefaults(): TransportRepeatEventOptions {\n\t\treturn Object.assign({}, TransportEvent.getDefaults(), {\n\t\t\tduration: Infinity,\n\t\t\tinterval: 1,\n\t\t\tonce: false,\n\t\t});\n\t}\n\n\t/**\n\t * Invoke the callback. Returns the tick time which\n\t * the next event should be scheduled at.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\t// create more events if necessary\n\t\tthis._createEvents(time);\n\t\t// call the super class\n\t\tsuper.invoke(time);\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _createEvents(time: Seconds): void {\n\t\t// schedule the next event\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n\t\t\tthis._nextTick += this._interval;\n\t\t\tthis._currentId = this._nextId;\n\t\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\t}\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _restart(time?: Time): void {\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis._nextTick = this.time;\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks > this.time) {\n\t\t\tthis._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n\t\t}\n\t\tthis._currentId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\tthis._nextTick += this._interval;\n\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis.transport.off(\"start\", this._boundRestart);\n\t\tthis.transport.off(\"loopStart\", this._boundRestart);\n\t\treturn this;\n\t}\n}\n","import { Time, TimeClass } from \"../../core/type/Time\";\nimport { PlaybackState } from \"../../core/util/StateTimeline\";\nimport { Signal } from \"../../signal/Signal\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\nimport { Gain } from \"../context/Gain\";\nimport { Param } from \"../context/Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { readOnly, writable } from \"../util/Interface\";\nimport { IntervalTimeline } from \"../util/IntervalTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isArray, isDefined } from \"../util/TypeCheck\";\nimport { Clock } from \"./Clock\";\nimport { TransportEvent } from \"./TransportEvent\";\nimport { TransportRepeatEvent } from \"./TransportRepeatEvent\";\n\ninterface TransportOptions extends ToneWithContextOptions {\n\tbpm: BPM;\n\tswing: NormalRange;\n\tswingSubdivision: Subdivision;\n\ttimeSignature: number;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tppq: number;\n}\n\ntype TransportEventNames = \"start\" | \"stop\" | \"pause\" | \"loop\" | \"loopEnd\" | \"loopStart\";\n\ninterface SyncedSignalEvent {\n\tsignal: Signal;\n\tinitial: number;\n\tratio: Gain;\n}\n\ntype TransportCallback = (time: Seconds) => void;\n\n/**\n * Transport for timing musical events.\n * Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n * Transport timing events pass in the exact time of the scheduled event\n * in the argument of the callback function. Pass that time value to the object\n * you're scheduling. <br><br>\n * A single transport is created for you when the library is initialized.\n * <br><br>\n * The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n * called with the time of that event as the argument.\n *\n * @example\n * //repeated event every 8th note\n * Transport.scheduleRepeat(function(time){\n * \t//do something with the time\n * }, \"8n\");\n * @example\n * //schedule an event on the 16th measure\n * Transport.schedule(function(time){\n * \t//do something with the time\n * }, \"16:0:0\");\n */\nexport class Transport extends ToneWithContext<TransportOptions> implements Emitter<TransportEventNames> {\n\n\tname = \"Transport\";\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tLOOPING\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * \tIf the transport loops or not.\n\t */\n\tloop: boolean = false;\n\n\t/**\n\t * \tThe loop start position in ticks\n\t */\n\tprivate _loopStart: Ticks = 0;\n\n\t/**\n\t * \tThe loop end position in ticks\n\t */\n\tprivate _loopEnd: Ticks = 0;\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tCLOCK/TEMPO\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Pulses per quarter is the number of ticks per quarter note.\n\t */\n\tprivate _ppq: number;\n\n\t/**\n\t *  watches the main oscillator for timing ticks\n\t *  initially starts at 120bpm\n\t */\n\tprivate _clock: Clock<BPM>;\n\n\t/**\n\t * The Beats Per Minute of the Transport.\n\t * @example\n\t * Transport.bpm.value = 80;\n\t * //ramp the bpm to 120 over 10 seconds\n\t * Transport.bpm.rampTo(120, 10);\n\t */\n\tbpm: Param<BPM>;\n\n\t/**\n\t *  The time signature, or more accurately the numerator\n\t *  of the time signature over a denominator of 4.\n\t */\n\tprivate _timeSignature: number;\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tTIMELINE EVENTS\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  All the events in an object to keep track by ID\n\t */\n\tprivate _scheduledEvents = {};\n\n\t/**\n\t * \tThe scheduled events.\n\t */\n\tprivate _timeline: Timeline<TransportEvent> = new Timeline();\n\n\t/**\n\t *  Repeated events\n\t */\n\tprivate _repeatedEvents: IntervalTimeline = new IntervalTimeline();\n\n\t/**\n\t *  All of the synced Signals\n\t */\n\tprivate _syncedSignals: SyncedSignalEvent[] = [];\n\n\t///////////////////////////////////////////////////////////////////////\n\t// \tSWING\n\t//////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The subdivision of the swing\n\t */\n\tprivate _swingTicks: Ticks;\n\n\t/**\n\t *  The swing amount\n\t */\n\tprivate _swingAmount: NormalRange = 0;\n\n\tconstructor(options?: Partial<TransportOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Transport.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Transport.getDefaults(), arguments);\n\n\t\t// CLOCK/TEMPO\n\t\tthis._ppq = options.ppq;\n\t\tthis._clock = new Clock({\n\t\t\tcallback : this._processTick.bind(this),\n\t\t\tcontext: this.context,\n\t\t\tfrequency : 0,\n\t\t\tunits: \"bpm\",\n\t\t});\n\t\tthis._bindClockEvents();\n\t\tthis.bpm = this._clock.frequency;\n\t\tthis._clock.frequency.multiplier = options.ppq;\n\t\tthis.bpm.value = options.bpm;\n\t\treadOnly(this, \"bpm\");\n\t\tthis._timeSignature = options.timeSignature;\n\n\t\t// SWING\n\t\tthis._swingTicks = options.ppq / 2; // 8n\n\t}\n\n\tstatic getDefaults(): TransportOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tbpm: 120,\n\t\t\tloopEnd: \"4m\" as Subdivision,\n\t\t\tloopStart: 0,\n\t\t\tppq: 192,\n\t\t\tswing: 0,\n\t\t\tswingSubdivision: \"8n\" as Subdivision,\n\t\t\ttimeSignature: 4,\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tTICKS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  called on every tick\n\t *  @param  tickTime clock relative tick time\n\t *  @private\n\t */\n\tprivate _processTick(tickTime: Seconds, ticks: Ticks): void {\n\t\t// handle swing\n\t\tif (this._swingAmount > 0 &&\n\t\t\tticks % this._ppq !== 0 && // not on a downbeat\n\t\t\tticks % (this._swingTicks * 2) !== 0) {\n\t\t\t// add some swing\n\t\t\tconst progress = (ticks % (this._swingTicks * 2)) / (this._swingTicks * 2);\n\t\t\tconst amount = Math.sin((progress) * Math.PI) * this._swingAmount;\n\t\t\ttickTime += new TicksClass(this.context, this._swingTicks * 2 / 3).toSeconds() * amount;\n\t\t}\n\t\t// do the loop test\n\t\tif (this.loop) {\n\t\t\tif (ticks >= this._loopEnd) {\n\t\t\t\tthis.emit(\"loopEnd\", tickTime);\n\t\t\t\tthis._clock.setTicksAtTime(this._loopStart, tickTime);\n\t\t\t\tticks = this._loopStart;\n\t\t\t\tthis.emit(\"loopStart\", tickTime, this._clock.getSecondsAtTime(tickTime));\n\t\t\t\tthis.emit(\"loop\", tickTime);\n\t\t\t}\n\t\t}\n\t\t// invoke the timeline events scheduled on this tick\n\t\tthis._timeline.forEachAtTime(ticks, event => event.invoke(tickTime));\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSCHEDULABLE EVENTS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Schedule an event along the timeline.\n\t * @param callback The callback to be invoked at the time.\n\t * @param time The time to invoke the callback at.\n\t * @return The id of the event which can be used for canceling the event.\n\t * @example\n\t * //trigger the callback when the Transport reaches the desired time\n\t * Transport.schedule(function(time){\n\t * \tenvelope.triggerAttack(time);\n\t * }, \"128i\");\n\t */\n\tschedule(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\ttime : new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Schedule a repeated event along the timeline. The event will fire\n\t * at the `interval` starting at the `startTime` and for the specified\n\t * `duration`.\n\t * @param  callback   The callback to invoke.\n\t * @param  interval   The duration between successive callbacks. Must be a positive number.\n\t * @param  startTime  When along the timeline the events should start being invoked.\n\t * @param  duration How long the event should repeat.\n\t * @return  The ID of the scheduled event. Use this to cancel the event.\n\t * @example\n\t * //a callback invoked every eighth note after the first measure\n\t * Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t */\n\tscheduleRepeat(\n\t\tcallback: TransportCallback,\n\t\tinterval: Time | TimeClass,\n\t\tstartTime?: TransportTime | TransportTimeClass,\n\t\tduration: Time = Infinity,\n\t): number {\n\t\tconst event = new TransportRepeatEvent(this, {\n\t\t\tcallback,\n\t\t\tduration : new TimeClass(this.context, duration).toTicks(),\n\t\t\tinterval: new TimeClass(this.context, interval).toTicks(),\n\t\t\ttime : new TransportTimeClass(this.context, startTime).toTicks(),\n\t\t});\n\t\t// kick it off if the Transport is started\n\t\t// @ts-ignore\n\t\treturn this._addEvent(event, this._repeatedEvents);\n\t}\n\n\t/**\n\t *  Schedule an event that will be removed after it is invoked.\n\t *  @param callback The callback to invoke once.\n\t *  @param time The time the callback should be invoked.\n\t *  @returns The ID of the scheduled event.\n\t */\n\tscheduleOnce(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\tonce : true,\n\t\t\ttime : new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Clear the passed in event id from the timeline\n\t * @param eventId The id of the event.\n\t */\n\tclear(eventId: number): this {\n\t\tif (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t\t\tconst item = this._scheduledEvents[eventId.toString()];\n\t\t\titem.timeline.remove(item.event);\n\t\t\titem.event.dispose();\n\t\t\tdelete this._scheduledEvents[eventId.toString()];\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an event to the correct timeline. Keep track of the\n\t * timeline it was added to.\n\t * @returns the event id which was just added\n\t */\n\tprivate _addEvent(event: TransportEvent, timeline: Timeline<TransportEvent>): number {\n\t\tthis._scheduledEvents[event.id.toString()] = {\n\t\t\tevent,\n\t\t\ttimeline,\n\t\t};\n\t\ttimeline.add(event);\n\t\treturn event.id;\n\t}\n\n\t/**\n\t * Remove scheduled events from the timeline after\n\t * the given time. Repeated events will be removed\n\t * if their startTime is after the given time\n\t * @param after Clear all events after this time.\n\t */\n\tcancel(after: TransportTime = 0): this {\n\t\tconst computedAfter = this.toTicks(after);\n\t\tthis._timeline.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\tthis._repeatedEvents.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSTART/STOP/PAUSE\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Bind start/stop/pause events from the clock and emit them.\n\t */\n\tprivate _bindClockEvents(): void {\n\t\tthis._clock.on(\"start\", (time, offset) => {\n\t\t\toffset = new TicksClass(this.context, offset).toSeconds();\n\t\t\tthis.emit(\"start\", time, offset);\n\t\t});\n\n\t\tthis._clock.on(\"stop\", (time) => {\n\t\t\tthis.emit(\"stop\", time);\n\t\t});\n\n\t\tthis._clock.on(\"pause\", (time) => {\n\t\t\tthis.emit(\"pause\", time);\n\t\t});\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._clock.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the transport and all sources synced to the transport.\n\t * @param  time The time when the transport should start.\n\t * @param  offset The timeline offset to start the transport.\n\t * @example\n\t * //start the transport in one second starting at beginning of the 5th measure.\n\t * Transport.start(\"+1\", \"4:0:0\");\n\t */\n\tstart(time?: Time, offset?: TransportTime): this {\n\t\tlet offsetTicks;\n\t\tif (isDefined(offset)) {\n\t\t\toffsetTicks = this.toTicks(offset);\n\t\t}\n\t\t// start the clock\n\t\tthis._clock.start(time, offsetTicks);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the transport and all sources synced to the transport.\n\t * @param time The time when the transport should stop.\n\t * @example\n\t * Transport.stop();\n\t */\n\tstop(time?: Time): this {\n\t\tthis._clock.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the transport and all sources synced to the transport.\n\t */\n\tpause(time?: Time): this {\n\t\tthis._clock.pause(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Toggle the current state of the transport. If it is\n\t * started, it will stop it, otherwise it will start the Transport.\n\t * @param  time The time of the event\n\t */\n\ttoggle(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tif (this._clock.getStateAtTime(time) !== \"started\") {\n\t\t\tthis.start(time);\n\t\t} else {\n\t\t\tthis.stop(time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSETTERS/GETTERS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * The time signature as just the numerator over 4.\n\t * For example 4/4 would be just 4 and 6/8 would be 3.\n\t * @example\n\t * //common time\n\t * Transport.timeSignature = 4;\n\t * // 7/8\n\t * Transport.timeSignature = [7, 8];\n\t * //this will be reduced to a single number\n\t * Transport.timeSignature; //returns 3.5\n\t */\n\tget timeSignature(): TimeSignature {\n\t\treturn this._timeSignature;\n\t}\n\tset timeSignature(timeSig: TimeSignature) {\n\t\tif (isArray(timeSig)) {\n\t\t\ttimeSig = (timeSig[0] / timeSig[1]) * 4;\n\t\t}\n\t\tthis._timeSignature = timeSig;\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the starting position of the loop.\n\t */\n\tget loopStart(): Time {\n\t\treturn Time(this._loopStart, \"i\").toSeconds();\n\t}\n\tset loopStart(startPosition: Time) {\n\t\tthis._loopStart = this.toTicks(startPosition);\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the ending position of the loop.\n\t */\n\tget loopEnd(): Time {\n\t\treturn Time(this._loopEnd, \"i\").toSeconds();\n\t}\n\tset loopEnd(endPosition: Time) {\n\t\tthis._loopEnd = this.toTicks(endPosition);\n\t}\n\n\t/**\n\t * Set the loop start and stop at the same time.\n\t * @example\n\t * //loop over the first measure\n\t * Transport.setLoopPoints(0, \"1m\");\n\t * Transport.loop = true;\n\t */\n\tsetLoopPoints(startPosition: TransportTime, endPosition: TransportTime): this {\n\t\tthis.loopStart = startPosition;\n\t\tthis.loopEnd = endPosition;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The swing value. Between 0-1 where 1 equal to the note + half the subdivision.\n\t */\n\tget swing(): NormalRange {\n\t\treturn this._swingAmount;\n\t}\n\tset swing(amount: NormalRange) {\n\t\t// scale the values to a normal range\n\t\tthis._swingAmount = amount;\n\t}\n\n\t/**\n\t * Set the subdivision which the swing will be applied to.\n\t * The default value is an 8th note. Value must be less\n\t * than a quarter note.\n\t */\n\tget swingSubdivision(): Subdivision {\n\t\treturn new TicksClass(this.context, this._swingTicks).toNotation();\n\t}\n\tset swingSubdivision(subdivision: Subdivision) {\n\t\tthis._swingTicks = this.toTicks(subdivision);\n\t}\n\n\t/**\n\t *  The Transport's position in Bars:Beats:Sixteenths.\n\t *  Setting the value will jump to that position right away.\n\t */\n\tget position(): BarsBeatsSixteenths | Time {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\treturn new TicksClass(this.context, ticks).toBarsBeatsSixteenths();\n\t}\n\tset position(progress: Time) {\n\t\tconst ticks = this.toTicks(progress);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t *  The Transport's position in seconds\n\t *  Setting the value will jump to that position right away.\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._clock.seconds;\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.frequency.timeToTicks(s, now);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t *  The Transport's loop position as a normalized value. Always\n\t *  returns 0 if the transport if loop is not true.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this.loop) {\n\t\t\tconst now = this.now();\n\t\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\t\treturn (ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t *  The transports current tick position.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this._clock.ticks;\n\t}\n\tset ticks(t: Ticks) {\n\t\tif (this._clock.ticks !== t) {\n\t\t\tconst now = this.now();\n\t\t\t// stop everything synced to the transport\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis.emit(\"stop\", now);\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t\t// restart it with the new time\n\t\t\t\tthis.emit(\"start\", now, this.seconds);\n\t\t\t} else {\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\treturn Math.round(this._clock.getTicksAtTime(time));\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._clock.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t *  Pulses Per Quarter note. This is the smallest resolution\n\t *  the Transport timing supports. This should be set once\n\t *  on initialization and not set again. Changing this value\n\t *  after other objects have been created can cause problems.\n\t */\n\tget PPQ(): number {\n\t\treturn this._clock.frequency.multiplier;\n\t}\n\tset PPQ(ppq: number) {\n\t\tthis._clock.frequency.multiplier = ppq;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// \tSYNCING\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Returns the time aligned to the next subdivision\n\t * of the Transport. If the Transport is not started,\n\t * it will return 0.\n\t * Note: this will not work precisely during tempo ramps.\n\t * @param  subdivision  The subdivision to quantize to\n\t * @return  The context time of the next subdivision.\n\t * @example\n\t * Transport.start(); //the transport must be started\n\t * Transport.nextSubdivision(\"4n\");\n\t */\n\tnextSubdivision(subdivision?: Time): Seconds {\n\t\tsubdivision = this.toTicks(subdivision);\n\t\tif (this.state !== \"started\") {\n\t\t\t// if the transport's not started, return 0\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tconst now = this.now();\n\t\t\t// the remainder of the current ticks and the subdivision\n\t\t\tconst transportPos = this.getTicksAtTime(now);\n\t\t\tconst remainingTicks = subdivision - transportPos % subdivision;\n\t\t\treturn this._clock.nextTickTime(remainingTicks, now);\n\t\t}\n\t}\n\n\t/**\n\t *  Attaches the signal to the tempo control signal so that\n\t *  any changes in the tempo will change the signal in the same\n\t *  ratio.\n\t *\n\t *  @param signal\n\t *  @param ratio Optionally pass in the ratio between the two signals.\n\t * \t\t\t\tOtherwise it will be computed based on their current values.\n\t */\n\tsyncSignal(signal: Signal<any>, ratio?: number): this {\n\t\tif (!ratio) {\n\t\t\t// get the sync ratio\n\t\t\tconst now = this.now();\n\t\t\tif (signal.getValueAtTime(now) !== 0) {\n\t\t\t\tconst bpm = this.bpm.getValueAtTime(now);\n\t\t\t\tconst computedFreq = 1 / (60 / bpm / this.PPQ);\n\t\t\t\tratio = signal.getValueAtTime(now) / computedFreq;\n\t\t\t} else {\n\t\t\t\tratio = 0;\n\t\t\t}\n\t\t}\n\t\tconst ratioSignal = new Gain(ratio);\n\t\t// @ts-ignore\n\t\tthis.bpm.connect(ratioSignal);\n\t\t// @ts-ignore\n\t\tratioSignal.connect(signal._param);\n\t\tthis._syncedSignals.push({\n\t\t\tinitial : signal.value,\n\t\t\tratio : ratioSignal,\n\t\t\tsignal,\n\t\t});\n\t\tsignal.value = 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Unsyncs a previously synced signal from the transport's control.\n\t *  See Transport.syncSignal.\n\t */\n\tunsyncSignal(signal: Signal<any>): this {\n\t\tfor (let i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t\t\tconst syncedSignal = this._syncedSignals[i];\n\t\t\tif (syncedSignal.signal === signal) {\n\t\t\t\tsyncedSignal.ratio.dispose();\n\t\t\t\tsyncedSignal.signal.value = syncedSignal.initial;\n\t\t\t\tthis._syncedSignals.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._clock.dispose();\n\t\twritable(this, \"bpm\");\n\t\tthis._timeline.dispose();\n\t\tthis._repeatedEvents.dispose();\n\t\treturn this;\n\t}\n\n\t///////////////////////////////////////////////////////////////////////\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t///////////////////////////////////////////////////////////////////////\n\n\ton!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\tonce!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\toff!: (event: TransportEventNames, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Transport);\n\n///////////////////////////////////////////////////////////////////////////////\n// \tINITIALIZATION\n///////////////////////////////////////////////////////////////////////////////\n\nonContextInit(context => {\n\tcontext.transport = new Transport({ context });\n});\n\nonContextClose(context => {\n\tcontext.transport.dispose();\n});\n","import { Volume } from \"../../component/channel/Volume\";\nimport { connectSeries } from \"../Connect\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { Param } from \"./Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface DestinationOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n *  A single master output which is connected to the\n *  AudioDestinationNode (aka your speakers).\n *  It provides useful conveniences such as the ability\n *  to set the volume and mute the entire application.\n *  It also gives you the ability to apply master effects to your application.\n *\n *  @example\n * //the audio will go from the oscillator to the speakers\n * oscillator.connect(Destination);\n * //a convenience for connecting to the master output is also provided:\n * oscillator.toMaster();\n * //the above two examples are equivalent.\n */\nexport class Destination extends ToneAudioNode<DestinationOptions> {\n\n\tname = \"Destination\";\n\n\tinput: Volume = new Volume({ context: this.context });\n\toutput: Gain = new Gain({ context : this.context });\n\n\t/**\n\t * The volume of the master output.\n\t */\n\tvolume: Param<Decibels> = this.input.volume;\n\t_internalChannels = [this.input, this.output];\n\n\tconstructor(options: Partial<DestinationOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Destination.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Destination.getDefaults(), arguments);\n\n\t\tconnectSeries(this.input, this.output, this.context.rawContext.destination);\n\n\t\tthis.volume.value = options.volume;\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): DestinationOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * //mute the output\n\t * Destination.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.input.mute;\n\t}\n\n\tset mute(mute: boolean) {\n\t\tthis.input.mute = mute;\n\t}\n\n\t/**\n\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t *  chained in the master effects chain.\n\t *  @param nodes All arguments will be connected in a row and the Master will be routed through it.\n\t *  @return  {Destination}  this\n\t *  @example\n\t * //some overall compression to keep the levels in check\n\t * var masterCompressor = new Tone.Compressor({\n\t * \t\"threshold\" : -6,\n\t * \t\"ratio\" : 3,\n\t * \t\"attack\" : 0.5,\n\t * \t\"release\" : 0.1\n\t * });\n\t * //give a little boost to the lows\n\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t * //route everything through the filter\n\t * //and compressor before going to the speakers\n\t * Destination.chain(lowBump, masterCompressor);\n\t */\n\tchain(...args: Array<AudioNode | ToneAudioNode>): this {\n\t\tthis.input.disconnect();\n\t\targs.unshift(this.input);\n\t\targs.push(this.output);\n\t\tconnectSeries(...args);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n// \tINITIALIZATION\n///////////////////////////////////////////////////////////////////////////\n\nonContextInit(context => {\n\tcontext.destination = new Destination({ context });\n});\n\nonContextClose(context => {\n\tcontext.destination.dispose();\n});\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\n\ninterface DrawEvent extends TimelineEvent {\n\tcallback: () => void;\n}\n\n/**\n * Draw is useful for synchronizing visuals and audio events.\n * Callbacks from Tone.Transport or any of the Tone.Event classes\n * always happen _before_ the scheduled time and are not synchronized\n * to the animation frame so they are not good for triggering tightly\n * synchronized visuals and sound. Draw makes it easy to schedule\n * callbacks using the AudioContext time and uses requestAnimationFrame.\n * @example\n * Tone.Transport.schedule(function(time){\n * \t//use the time argument to schedule a callback with Draw\n * \tDraw.schedule(function(){\n * \t\t//do drawing or DOM manipulation here\n * \t}, time)\n * }, \"+0.5\")\n */\nexport class Draw extends ToneWithContext<ToneWithContextOptions> {\n\n\tname = \"Draw\";\n\n\t/**\n\t *  The duration after which events are not invoked.\n\t */\n\texpiration: Seconds = 0.25;\n\n\t/**\n\t *  The amount of time before the scheduled time\n\t *  that the callback can be invoked. Default is\n\t *  half the time of an animation frame (0.008 seconds).\n\t */\n\tanticipation: Seconds = 0.008;\n\n\t/**\n\t *  All of the events.\n\t */\n\tprivate _events: Timeline<DrawEvent> = new Timeline();\n\n\t/**\n\t *  The draw loop\n\t */\n\tprivate _boundDrawLoop = this._drawLoop.bind(this);\n\n\t/**\n\t * The animation frame id\n\t */\n\tprivate _animationFrame: number = -1;\n\n\t/**\n\t *  Schedule a function at the given time to be invoked\n\t *  on the nearest animation frame.\n\t *  @param  callback  Callback is invoked at the given time.\n\t *  @param  time      The time relative to the AudioContext time to invoke the callback.\n\t */\n\tschedule(callback: () => void, time: Time): this {\n\t\tthis._events.add({\n\t\t\tcallback,\n\t\t\ttime : this.toSeconds(time),\n\t\t});\n\t\t// start the draw loop on the first event\n\t\tif (this._events.length === 1) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel events scheduled after the given time\n\t *  @param  after  Time after which scheduled events will be removed from the scheduling timeline.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._events.cancel(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t *  The draw loop\n\t */\n\tprivate _drawLoop(): void {\n\t\tconst now = this.context.currentTime;\n\t\twhile (this._events.length && (this._events.peek() as DrawEvent).time - this.anticipation <= now) {\n\t\t\tconst event = this._events.shift();\n\t\t\tif (event && now - event.time <= this.expiration) {\n\t\t\t\tevent.callback();\n\t\t\t}\n\t\t}\n\t\tif (this._events.length > 0) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\tcancelAnimationFrame(this._animationFrame);\n\t\treturn this;\n\t}\n}\n","import { connect } from \"../Connect\";\nimport { AutomationEvent, Param, ParamOptions } from \"../context/Param\";\nimport { getContext } from \"../Global\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isUndef } from \"../util/TypeCheck\";\n\ninterface TickAutomationEvent extends AutomationEvent {\n\tticks: number;\n}\n\ninterface TickSignalOptions extends ParamOptions {\n\tvalue: Hertz | BPM;\n\tmultiplier: number;\n}\n\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n *\n * @param value The initial value of the signal\n */\nexport class TickSignal<Type extends Hertz | BPM> extends Param<Type> {\n\n\tname = \"TickSignal\";\n\n\tprotected _events: Timeline<TickAutomationEvent> = new Timeline(Infinity);\n\n\tprivate _sig: ConstantSourceNode = this.context.createConstantSource();\n\n\tprotected _param = this._sig.offset;\n\n\tprivate _multiplier: number = 1;\n\n\tconstructor(options: Partial<TickSignalOptions>);\n\tconstructor(value?: number);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis._sig = this.context.createConstantSource();\n\t\tthis._sig.start(0);\n\t\tthis._param = this._sig.offset;\n\n\t\t// set the multiplier\n\t\tthis.multiplier = options.multiplier;\n\n\t\t// clear the ticks from the beginning\n\t\tthis.cancelScheduledValues(0);\n\t\t// set an initial event\n\t\tthis._events.add({\n\t\t\tticks: 0,\n\t\t\ttime : 0,\n\t\t\ttype : \"setValue\",\n\t\t\tvalue: this._fromType(options.value as Type),\n\t\t});\n\t\tthis.setValueAtTime(options.value as Type, 0);\n\t}\n\n\tstatic getDefaults(): TickSignalOptions {\n\t\treturn Object.assign(Param.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tparam: getContext().createConstantSource().offset,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tsetTargetAtTime(value: Type, time: Time, constant: number): this {\n\t\t// approximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tthis.setRampPoint(time);\n\t\tconst computedValue = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\tconst segments = Math.round(Math.max(1 / constant, 1));\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = constant * i + time;\n\t\t\tconst rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tsetValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.setValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: Type, time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.linearRampToValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: Type, time: Time): this {\n\t\t// aproximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tconst computedVal = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\t// approx 10 segments per second\n\t\tconst segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n\t\tconst segmentDur = ((time - prevEvent.time) / segments);\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = segmentDur * i + prevEvent.time;\n\t\t\tconst rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tprivate _getTicksUntilEvent(event: TickAutomationEvent | null, time: number): Ticks {\n\t\tif (event === null) {\n\t\t\tevent = {\n\t\t\t\tticks : 0,\n\t\t\t\ttime : 0,\n\t\t\t\ttype: \"setValue\",\n\t\t\t\tvalue: 0,\n\t\t\t};\n\t\t} else if (isUndef(event.ticks)) {\n\t\t\tconst previousEvent = this._events.previousEvent(event);\n\t\t\tevent.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n\t\t}\n\t\tconst val0 = this._fromType(this.getValueAtTime(event.time));\n\t\tlet val1 = this._fromType(this.getValueAtTime(time));\n\t\t// if it's right on the line, take the previous value\n\t\tconst onTheLineEvent = this._events.get(time);\n\t\tif (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === \"setValue\") {\n\t\t\tval1 = this._fromType(this.getValueAtTime(time - this.sampleTime));\n\t\t}\n\t\treturn 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst event = this._events.get(computedTime);\n\t\treturn Math.max(this._getTicksUntilEvent(event, computedTime), 0);\n\t}\n\n\t/**\n\t * Return the elapsed time of the number of ticks from the given time\n\t * @param ticks The number of ticks to calculate\n\t * @param  time The time to get the next tick from\n\t * @return The duration of the number of ticks from the given time in seconds\n\t */\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst currentTick = this.getTicksAtTime(time);\n\t\treturn this.getTimeOfTick(currentTick + ticks) - computedTime;\n\t}\n\n\t/**\n\t * Given a tick, returns the time that tick occurs at.\n\t * @return The time that the tick occurs.\n\t */\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\tconst before = this._events.get(tick, \"ticks\");\n\t\tconst after = this._events.getAfter(tick, \"ticks\");\n\t\tif (before && before.ticks === tick) {\n\t\t\treturn before.time;\n\t\t} else if (before && after &&\n\t\t\tafter.type === \"linear\" &&\n\t\t\tbefore.value !== after.value) {\n\t\t\tconst val0 = this._fromType(this.getValueAtTime(before.time));\n\t\t\tconst val1 = this._fromType(this.getValueAtTime(after.time));\n\t\t\tconst delta = (val1 - val0) / (after.time - before.time);\n\t\t\tconst k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n\t\t\tconst sol1 = (-val0 + k) / delta;\n\t\t\tconst sol2 = (-val0 - k) / delta;\n\t\t\treturn (sol1 > 0 ? sol1 : sol2) + before.time;\n\t\t} else if (before) {\n\t\t\tif (before.value === 0) {\n\t\t\t\treturn Infinity;\n\t\t\t} else {\n\t\t\t\treturn before.time + (tick - before.ticks) / before.value;\n\t\t\t}\n\t\t} else {\n\t\t\treturn tick / this._initialValue;\n\t\t}\n\t}\n\n\t/**\n\t * Convert some number of ticks their the duration in seconds accounting\n\t * for any automation curves starting at the given time.\n\t * @param  ticks The number of ticks to convert to seconds.\n\t * @param  when  When along the automation timeline to convert the ticks.\n\t * @return The duration in seconds of the ticks.\n\t */\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this.getDurationOfTicks(ticks, when);\n\t}\n\n\t/**\n\t * The inverse of [ticksToTime](#tickstotime). Convert a duration in\n\t * seconds to the corresponding number of ticks accounting for any\n\t * automation curves starting at the given time.\n\t * @param  duration The time interval to convert to ticks.\n\t * @param  when When along the automation timeline to convert the ticks.\n\t * @return The duration in ticks.\n\t */\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tconst startTicks = this.getTicksAtTime(computedTime);\n\t\tconst endTicks = this.getTicksAtTime(computedTime + computedDuration);\n\t\treturn endTicks - startTicks;\n\t}\n\n\t/**\n\t * Convert from the type when the unit value is BPM\n\t */\n\tprotected _fromType(val: Type): number {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn 1 / (60 / val / this.multiplier);\n\t\t} else {\n\t\t\treturn super._fromType(val);\n\t\t}\n\t}\n\n\t/**\n\t * Special case of type conversion where the units === \"bpm\"\n\t */\n\tprotected _toType(val: number): Type {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn (val / this.multiplier) * 60 as Type;\n\t\t} else {\n\t\t\treturn super._toType(val);\n\t\t}\n\t}\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\t// get and reset the current value with the new multipler\n\t\t// might be necessary to clear all the previous values\n\t\tconst currentVal = this.value;\n\t\tthis._multiplier = m;\n\t\tthis.value = currentVal;\n\t}\n\n\t/**\n\t * Connect the output signal\n\t */\n\tconnect(dstNode, outputNumber = 0, inputNumber = 0): this {\n\t\tconnect(this._sig, dstNode, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n}\n","import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline, StateTimelineEvent } from \"../util/StateTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { TickSignal } from \"./TickSignal\";\n\ninterface TickSourceOptions extends ToneWithContextOptions {\n\tfrequency: Frequency;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ninterface TickSourceOffsetEvent {\n\tticks: number;\n\ttime: number;\n\tseconds: number;\n}\n\n/**\n *  Uses [TickSignal](TickSignal) to track elapsed ticks with complex automation curves.\n *\n *  @param frequency The initial frequency that the signal ticks at\n */\nexport class TickSource<Type extends BPM | Hertz> extends ToneWithContext<TickSourceOptions> {\n\n\tname = \"TickSource\";\n\n\t/**\n\t *  The frequency the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<Type>;\n\n\t/**\n\t *  The state timeline\n\t */\n\tprivate _state: StateTimeline = new StateTimeline();\n\n\t/**\n\t * The offset values of the ticks\n\t */\n\tprivate _tickOffset: Timeline<TickSourceOffsetEvent> = new Timeline();\n\n\tconstructor(frequency?: Frequency);\n\t// tslint:disable-next-line: unified-signatures\n\tconstructor(options?: Partial<TickSourceOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis.frequency = new TickSignal({\n\t\t\tcontext: this.context,\n\t\t\tunits: options.units,\n\t\t\tvalue: this.toFrequency(options.frequency),\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\t// set the inital state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\t\t// add the first event\n\t\tthis.setTicksAtTime(0, 0);\n\t}\n\n\tstatic getDefaults(): TickSourceOptions {\n\t\treturn Object.assign({\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\" as \"hertz\",\n\t\t}, ToneWithContext.getDefaults());\n\t}\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  time    The time the clock should start\n\t *  @param offset The number of ticks to start the source at\n\t */\n\tstart(time: Time, offset?: Ticks): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (isDefined(offset)) {\n\t\t\t\tthis.setTicksAtTime(offset, computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the clock. Stopping the clock resets the tick counter to 0.\n\t * @param time The time when the clock should stop.\n\t */\n\tstop(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// cancel the previous stop\n\t\tif (this._state.getValueAtTime(computedTime) === \"stopped\") {\n\t\t\tconst event = this._state.get(computedTime);\n\t\t\tif (event && event.time > 0) {\n\t\t\t\tthis._tickOffset.cancel(event.time);\n\t\t\t\tthis._state.cancel(event.time);\n\t\t\t}\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis.setTicksAtTime(0, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param time The time when the clock should stop.\n\t */\n\tpause(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Cancel start/stop/pause and setTickAtTime events scheduled after the given time.\n\t *  @param time When to clear the events after\n\t */\n\tcancel(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._state.cancel(time);\n\t\tthis._tickOffset.cancel(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the elapsed ticks at the given time\n\t * @param  time  When to get the tick value\n\t * @return The number of ticks\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", computedTime);\n\t\tif (!stopEvent) {\n\t\t\treturn 0;\n\t\t}\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state: \"paused\", time: computedTime};\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedTicks = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, computedTime + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedTicks = offsetEvent.ticks;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedTicks;\n\t}\n\n\t/**\n\t *  The number of times the callback was invoked. Starts counting at 0\n\t *  and increments after the callback was invoked. Returns -1 when stopped.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this.getTicksAtTime(this.now());\n\t}\n\n\tset ticks(t: Ticks) {\n\t\tthis.setTicksAtTime(t, this.now());\n\t}\n\n\t/**\n\t *  The time since ticks=0 that the TickSource has been running. Accounts\n\t *  for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this.getSecondsAtTime(this.now());\n\t}\n\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this.frequency.timeToTicks(s, now);\n\t\tthis.setTicksAtTime(ticks, now);\n\t}\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  time  When to get the elapsed seconds\n\t *  @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\ttime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", time);\n\t\tif (!stopEvent) {\n\t\t\treturn 0;\n\t\t}\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state : \"paused\", time };\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedSeconds = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, time + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedSeconds = offsetEvent.seconds;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedSeconds += e.time - periodStartTime;\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedSeconds;\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._tickOffset.cancel(time);\n\t\tthis._tickOffset.add({\n\t\t\tseconds : this.frequency.getDurationOfTicks(ticks, time),\n\t\t\tticks,\n\t\t\ttime,\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Returns the scheduled state at the given time.\n\t *  @param  time  The time to query.\n\t *  @example\n\t * source.start(\"+0.1\");\n\t * source.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tgetStateAtTime(time): PlaybackState {\n\t\ttime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the given tick. The second argument\n\t * is when to test before. Since ticks can be set (with setTicksAtTime)\n\t * there may be multiple times for a given tick value.\n\t * @param  ticks The tick number.\n\t * @param  before When to measure the tick value from.\n\t * @return The time of the tick\n\t */\n\tgetTimeOfTick(tick: Ticks, before = this.now()): Seconds {\n\t\tconst offset = this._tickOffset.get(before) as TickSourceOffsetEvent;\n\t\tconst event = this._state.get(before) as StateTimelineEvent;\n\t\tconst startTime = Math.max(offset.time, event.time);\n\t\tconst absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;\n\t\treturn this.frequency.getTimeOfTick(absoluteTicks);\n\t}\n\n\t/**\n\t *  Invoke the callback event at all scheduled ticks between the\n\t *  start time and the end time\n\t *  @param  startTime  The beginning of the search range\n\t *  @param  endTime    The end of the search range\n\t *  @param  callback   The callback to invoke with each tick\n\t */\n\tforEachTickBetween(startTime: Time, endTime: Time, callback: (when: Seconds, ticks: Ticks) => void): this {\n\t\tconst computedStartTime = this.toSeconds(startTime);\n\t\tconst computedEndTime = this.toSeconds(endTime);\n\t\t// only iterate through the sections where it is \"started\"\n\t\tlet lastStateEvent = this._state.get(computedStartTime);\n\t\tthis._state.forEachBetween(computedStartTime, computedEndTime, event => {\n\t\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && event.state !== \"started\") {\n\t\t\t\tthis.forEachTickBetween(Math.max(lastStateEvent.time, computedStartTime), event.time - this.sampleTime, callback);\n\t\t\t}\n\t\t\tlastStateEvent = event;\n\t\t});\n\n\t\tlet error = null;\n\n\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && this._state) {\n\t\t\tconst maxStartTime = Math.max(lastStateEvent.time, computedStartTime);\n\t\t\t// figure out the difference between the frequency ticks and the\n\t\t\tconst startTicks = this.frequency.getTicksAtTime(maxStartTime);\n\t\t\tconst ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);\n\t\t\tconst diff = startTicks - ticksAtStart;\n\t\t\tlet offset = diff % 1;\n\t\t\tif (offset !== 0) {\n\t\t\t\toffset = 1 - offset;\n\t\t\t}\n\t\t\tlet nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);\n\t\t\twhile (nextTickTime < computedEndTime && this._state) {\n\t\t\t\ttry {\n\t\t\t\t\tcallback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\terror = e;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this._state) {\n\t\t\t\t\tnextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._state.dispose();\n\t\tthis._tickOffset.dispose();\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n","import { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\nexport interface DelayOptions extends ToneAudioNodeOptions {\n\tdelayTime: number;\n\tmaxDelay: number;\n}\n\n/**\n *  Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n *  @param delayTime The delay applied to the incoming signal.\n *  @param maxDelay The maximum delay time.\n */\nexport class Delay extends ToneAudioNode<DelayOptions> {\n\n\tname = \"Delay\";\n\n\t/**\n\t * The maximum delay time. This cannot be changed after\n\t * the value is passed into the constructor.\n\t */\n\treadonly maxDelay: Time;\n\n\t/**\n\t *  The amount of time the incoming signal is delayed.\n\t */\n\treadonly delayTime: Param<Time>;\n\n\t/**\n\t * Private reference to the internal DelayNode\n\t */\n\tprivate _delayNode: DelayNode;\n\treadonly input: DelayNode;\n\treadonly output: DelayNode;\n\n\t/**\n\t * The internal channels for channel routing changes\n\t */\n\tprotected _internalChannels: AudioNode[];\n\n\tconstructor(options?: Partial<DelayOptions>)\n\tconstructor(delayTime?: Time, maxDelay?: Time)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]));\n\n\t\tconst options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n\n\t\tthis.maxDelay = Math.max(this.toSeconds(options.maxDelay), this.toSeconds(options.delayTime));\n\n\t\tthis._delayNode = this.input = this.output = this.context.createDelay(options.maxDelay);\n\t\tthis._internalChannels = [this._delayNode];\n\n\t\tthis.delayTime = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam : this._delayNode.delayTime,\n\t\t\tunits : \"time\",\n\t\t\tvalue : options.delayTime,\n\t\t});\n\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): DelayOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdelayTime : 0,\n\t\t\tmaxDelay: 1,\n\t\t\tnumberOfInputs: 1,\n\t\t\tnumberOfOutputs: 1,\n\t\t});\n\t}\n\n\t/**\n\t *  Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.disconnect();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n","import { Context } from \"../context/Context\";\n\n/**\n *  Wrapper around the OfflineAudioContext\n *  @param  channels  The number of channels to render\n *  @param  duration  The duration to render in samples\n *  @param sampleRate the sample rate to render at\n */\nexport class OfflineContext extends Context {\n\n\tname = \"OfflineContext\";\n\n\t/**\n\t *  A private reference to the duration\n\t */\n\tprivate readonly _duration: Seconds;\n\n\t/**\n\t *  An artificial clock source\n\t */\n\tprivate _currentTime: Seconds = 0;\n\n\t/**\n\t * Private reference to the OfflineAudioContext.\n\t */\n\tprotected _context!: OfflineAudioContext;\n\n\tconstructor(channels: number | OfflineAudioContext, duration: Seconds, sampleRate: number) {\n\n\t\tsuper({\n\t\t\tclockSource: \"offline\",\n\t\t\tcontext: channels instanceof OfflineAudioContext ?\n\t\t\t\tchannels : new OfflineAudioContext(channels, duration * sampleRate, sampleRate),\n\t\t\tlookAhead: 0,\n\t\t\tupdateInterval: channels instanceof OfflineAudioContext ?\n\t\t\t\t\t128 / channels.sampleRate : 128 / sampleRate,\n\t\t});\n\n\t\tthis._duration = channels instanceof OfflineAudioContext ?\n\t\t\tchannels.length / channels.sampleRate : duration;\n\t}\n\n\t/**\n\t *  Override the now method to point to the internal clock time\n\t */\n\tnow(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t * Same as this.now()\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t *  Render the output of the OfflineContext\n\t */\n\trender(): Promise<AudioBuffer> {\n\t\twhile (this._duration - this._currentTime >= 0) {\n\t\t\t// invoke all the callbacks on that time\n\t\t\tthis.emit(\"tick\");\n\t\t\t// increment the clock in 5ms chunks\n\t\t\tthis._currentTime += 0.005;\n\t\t}\n\n\t\treturn this._context.startRendering();\n\t}\n\n\t/**\n\t *  Close the context\n\t */\n\tclose(): Promise<OfflineContext> {\n\t\treturn Promise.resolve(this);\n\t}\n}\n","import { Context } from \"../context/Context\";\nimport { Tone } from \"../Tone\";\nimport { isDefined, isObject , isString, isUndef } from \"../util/TypeCheck\";\n\nexport type TimeValue = Time | TimeBaseClass<any, any>;\n\n/**\n * The units that the TimeBase can accept. extended by other classes\n */\nexport type TimeBaseUnit = \"s\" | \"n\" | \"t\" | \"m\" | \"i\" | \"hz\" | \"tr\" | \"samples\" | \"number\";\n\nexport interface TypeFunction {\n\tregexp: RegExp;\n\tmethod: (value: string, ...args: string[]) => number;\n}\n\nexport interface TimeExpression<Type extends number> {\n\t[key: string]: {\n\t\tregexp: RegExp;\n\t\tmethod: (value: string, ...args: string[]) => Type;\n\t};\n}\n\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n * @param  val    The time value as a number, string or object\n * @param  units  Unit values\n * @example\n * new TimeBase(4, \"n\")\n * new TimeBase(2, \"t\")\n * new TimeBase(\"2t\")\n * new TimeBase({\"2t\" : 2})\n * new TimeBase(\"2t\") + new TimeBase(\"4n\");\n */\nexport abstract class TimeBaseClass<Type extends number, Unit extends string> extends Tone {\n\n\treadonly context: Context;\n\n\t/**\n\t * The value of the units\n\t */\n\tprotected _val?: TimeValue;\n\n\t/**\n\t * The units of time\n\t */\n\tprotected _units?: Unit;\n\n\t/**\n\t * All of the conversion expressions\n\t */\n\tprotected _expressions: TimeExpression<Type>;\n\n\t/**\n\t * The default units\n\t */\n\treadonly defaultUnits: Unit = \"s\" as Unit;\n\n\tconstructor(context: Context, value?: TimeValue, units?: Unit) {\n\t\tsuper();\n\n\t\tthis._val = value;\n\t\tthis._units = units;\n\t\tthis.context = context;\n\t\tthis._expressions = this._getExpressions();\n\t}\n\n\t/**\n\t * All of the time encoding expressions\n\t */\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn {\n\t\t\thz: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._frequencyToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)hz$/i,\n\t\t\t},\n\t\t\ti: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._ticksToUnits(parseInt(value, 10));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)i$/i,\n\t\t\t},\n\t\t\tm: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)m$/i,\n\t\t\t},\n\t\t\tn: {\n\t\t\t\tmethod: (value, dot) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\tconst scalar = dot === \".\" ? 1.5 : 1;\n\t\t\t\t\tif (numericValue === 1) {\n\t\t\t\t\t\treturn this._beatsToUnits(this._getTimeSignature()) * scalar as Type;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this._beatsToUnits(4 / numericValue) * scalar as Type;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)n(\\.?)$/i,\n\t\t\t},\n\t\t\tnumber: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._expressions[this.defaultUnits].method.call(this, value);\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)$/,\n\t\t\t},\n\t\t\ts: {\n\t\t\t\tmethod: (value): Type => {\n\t\t\t\t\treturn this._secondsToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)s$/,\n\t\t\t},\n\t\t\tsamples: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn parseInt(value, 10) / this.context.sampleRate as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)samples$/,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\treturn this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)t$/i,\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tmethod: (m, q, s) => {\n\t\t\t\t\tlet total = 0;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n\t\t\t},\n\t\t};\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tVALUE OF\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Evaluate the time value. Returns the time in seconds.\n\t */\n\tvalueOf(): Type {\n\t\tif (this._val instanceof TimeBaseClass) {\n\t\t\tthis.fromType(this._val);\n\t\t}\n\t\tif (isUndef(this._val)) {\n\t\t\treturn this._noArg();\n\t\t} else if (isString(this._val) && isUndef(this._units)) {\n\t\t\tfor (const units in this._expressions) {\n\t\t\t\tif (this._expressions[units].regexp.test(this._val.trim())) {\n\t\t\t\t\tthis._units = units as Unit;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isObject(this._val)) {\n\t\t\tlet total = 0;\n\t\t\tfor (const typeName in this._val) {\n\t\t\t\tif (isDefined(this._val[typeName])) {\n\t\t\t\t\tconst quantity = this._val[typeName];\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst time = (new this.constructor(this.context, typeName)).valueOf() * quantity;\n\t\t\t\t\ttotal += time;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn total as Type;\n\t\t}\n\t\tif (isDefined(this._units)) {\n\t\t\tconst expr = this._expressions[this._units];\n\t\t\tconst matching = this._val.toString().trim().match(expr.regexp);\n\t\t\tif (matching) {\n\t\t\t\treturn expr.method.apply(this, matching.slice(1));\n\t\t\t} else {\n\t\t\t\treturn expr.method.call(this, this._val);\n\t\t\t}\n\t\t} else if (isString(this._val)) {\n\t\t\treturn parseFloat(this._val) as Type;\n\t\t} else {\n\t\t\treturn this._val as Type;\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn 1 / freq as Type;\n\t}\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn (60 / this._getBpm()) * beats as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn seconds as Type;\n\t}\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t *  @private\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn (ticks * (this._beatsToUnits(1)) / this._getPPQ()) as Type;\n\t}\n\n\t/**\n\t *  With no arguments, return 'now'\n\t */\n\tprotected _noArg(): Type {\n\t\treturn this._now();\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tTEMPO CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Return the bpm\n\t */\n\tprotected _getBpm(): BPM {\n\t\treturn this.context.transport.bpm.value;\n\t}\n\n\t/**\n\t * Return the timeSignature\n\t */\n\tprotected _getTimeSignature(): number {\n\t\treturn this.context.transport.timeSignature as number;\n\t}\n\n\t/**\n\t * Return the PPQ or 192 if Transport is not available\n\t */\n\tprotected _getPPQ(): number {\n\t\treturn this.context.transport.PPQ;\n\t}\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected abstract _now(): Type;\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// \tCONVERSION INTERFACE\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Coerce a time type into this units type.\n\t * @param type Any time type units\n\t */\n\tfromType(type: TimeBaseClass<any, any>): this {\n\t\tthis._units = undefined;\n\t\tswitch (this.defaultUnits) {\n\t\t\tcase \"s\":\n\t\t\t\tthis._val = type.toSeconds();\n\t\t\t\tbreak;\n\t\t\tcase \"i\":\n\t\t\t\tthis._val = type.toTicks();\n\t\t\t\tbreak;\n\t\t\tcase \"hz\":\n\t\t\t\tthis._val = type.toFrequency();\n\t\t\t\tbreak;\n\t\t\tcase \"midi\":\n\t\t\t\tthis._val = type.toMidi();\n\t\t\t\tbreak;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *  Return the value in seconds\n\t */\n\tabstract toSeconds(): Seconds;\n\n\t/**\n\t *  Return the value as a Midi note\n\t */\n\tabstract toMidi(): MidiNote;\n\n\t/**\n\t * Convert the value into ticks\n\t */\n\tabstract toTicks(): Ticks;\n\n\t/**\n\t *  Return the value in hertz\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn 1 / this.toSeconds();\n\t}\n\n\t/**\n\t *  Return the time in samples\n\t */\n\ttoSamples(): Samples {\n\t\treturn this.toSeconds() * this.context.sampleRate;\n\t}\n\n\t/**\n\t *  Return the time in milliseconds.\n\t */\n\ttoMilliseconds(): Milliseconds {\n\t\treturn this.toSeconds() * 1000;\n\t}\n}\n","export { Gain } from \"./context/Gain\";\nexport { Context } from \"./context/Context\";\nexport { OfflineContext } from \"./context/OfflineContext\";\nexport { ToneAudioBuffer } from \"./context/ToneAudioBuffer\";\nexport { Delay } from \"./context/Delay\";\nexport { Clock } from \"./clock/Clock\";\nexport { Frequency } from \"./type/Frequency\";\nexport { Time } from \"./type/Time\";\nexport { Ticks } from \"./type/Ticks\";\nexport { TransportTime } from \"./type/TransportTime\";\nexport { Draw } from \"./util/Draw\";\nexport { StateTimeline } from \"./util/StateTimeline\";\nexport { IntervalTimeline } from \"./util/IntervalTimeline\";\nexport { Timeline } from \"./util/Timeline\";\nexport { Emitter } from \"./util/Emitter\";\nexport { Tone } from \"./Tone\";\nexport { Destination } from \"./context/Destination\";\nexport { Transport } from \"./clock/Transport\";\n","/**\n * The global audio context which is getable and assignable through\n * getAudioContext and setAudioContext\n */\nlet globalContext: BaseAudioContext;\n\n// @ts-ignore\nglobalContext = window.TONE_AUDIO_CONTEXT;\n\n/**\n * Returns the default system-wide AudioContext\n */\nexport function getAudioContext(): BaseAudioContext {\n\tif (!globalContext) {\n\t\tsetAudioContext(new AudioContext());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n */\nexport function setAudioContext(context: BaseAudioContext): void {\n\tglobalContext = context;\n\t// @ts-ignore\n\twindow.TONE_AUDIO_CONTEXT = globalContext;\n}\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","\nexport type TickerClockSource = \"worker\" | \"timeout\" | \"offline\";\n\n/**\n * A class which provides a reliable callback using either\n * a Web Worker, or if that isn't supported, falls back to setTimeout.\n */\nexport class Ticker {\n\n\t/**\n\t * Either \"worker\" or \"timeout\" or \"offline\"\n\t */\n\tprivate _type: TickerClockSource;\n\n\t/**\n\t * The update interval of the worker\n\t */\n\tprivate _updateInterval: Seconds;\n\n\t/**\n\t * The callback to invoke at regular intervals\n\t */\n\tprivate _callback: () => void;\n\n\t/**\n\t * track the callback interval\n\t */\n\tprivate _timeout!: number;\n\n\t/**\n\t * private reference to the worker\n\t */\n\tprivate _worker!: Worker;\n\n\tconstructor(callback: () => void, type: TickerClockSource, updateInterval: Seconds) {\n\n\t\tthis._callback = callback;\n\t\tthis._type = type;\n\t\tthis._updateInterval = updateInterval;\n\n\t\t// create the clock source for the first time\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t *  Generate a web worker\n\t */\n\tprivate _createWorker(): void {\n\n\t\tconst blob = new Blob([\n\t\t\t// the initial timeout time\n\t\t\t`var timeoutTime =  ${(this._updateInterval * 1000).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();`,\n\t\t]);\n\t\tconst blobUrl = window.URL.createObjectURL(blob);\n\t\tconst worker = new Worker(blobUrl);\n\n\t\tworker.onmessage = this._callback.bind(this);\n\n\t\tthis._worker = worker;\n\t}\n\n\t/**\n\t * Create a timeout loop\n\t */\n\tprivate _createTimeout(): void {\n\t\tthis._timeout = window.setTimeout(()  => {\n\t\t\tthis._createTimeout();\n\t\t\tthis._callback();\n\t\t}, this._updateInterval * 1000);\n\t}\n\n\t/**\n\t * Create the clock source.\n\t */\n\tprivate _createClock(): void {\n\t\tif (this._type === \"worker\") {\n\t\t\ttry {\n\t\t\t\tthis._createWorker();\n\t\t\t} catch (e) {\n\t\t\t\t// workers not supported, fallback to timeout\n\t\t\t\tthis._type = \"timeout\";\n\t\t\t\tthis._createClock();\n\t\t\t}\n\t\t} else if (this._type === \"timeout\") {\n\t\t\tthis._createTimeout();\n\t\t}\n\t}\n\n\t/**\n\t * Clean up the current clock source\n\t */\n\tprivate _disposeClock(): void {\n\t\tif (this._timeout) {\n\t\t\tclearTimeout(this._timeout);\n\t\t\tthis._timeout = 0;\n\t\t}\n\t\tif (this._worker) {\n\t\t\tthis._worker.terminate();\n\t\t\tthis._worker.onmessage = null;\n\t\t}\n\t}\n\n\t/**\n\t * The rate in seconds the ticker will update\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._updateInterval = Math.max(interval, 128 / 44100);\n\t\tif (this._type === \"worker\") {\n\t\t\tthis._worker.postMessage(Math.max(interval * 1000, 1));\n\t\t}\n\t}\n\n\t/**\n\t * The type of the ticker, either a worker or a timeout\n\t */\n\tget type(): TickerClockSource {\n\t\treturn this._type;\n\t}\n\tset type(type: TickerClockSource) {\n\t\tthis._disposeClock();\n\t\tthis._type = type;\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): void {\n\t\tthis._disposeClock();\n\t}\n}\n","export { getContext, setContext } from \"./core/Global\";\nexport * from \"./core/index\";\nexport * from \"./source/index\";\nexport * from \"./instrument/index\";\n\nimport { getContext } from \"./core/Global\";\n/**\n *  The current audio context time\n */\nexport function now(): Seconds {\n\treturn getContext().now();\n}\n"],"sourceRoot":""}