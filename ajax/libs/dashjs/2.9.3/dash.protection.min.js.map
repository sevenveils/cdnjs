{"version":3,"sources":["../node_modules/grunt-browserify/node_modules/browser-pack/_prelude.js","core/errors/ErrorsBase.js","core/events/EventsBase.js","streaming/constants/ProtectionConstants.js","streaming/protection/CommonEncryption.js","streaming/protection/Protection.js","streaming/protection/ProtectionEvents.js","streaming/protection/controllers/ProtectionController.js","streaming/protection/controllers/ProtectionKeyController.js","streaming/protection/drm/KeySystemClearKey.js","streaming/protection/drm/KeySystemPlayReady.js","streaming/protection/drm/KeySystemW3CClearKey.js","streaming/protection/drm/KeySystemWidevine.js","streaming/protection/errors/ProtectionErrors.js","streaming/protection/models/ProtectionModel_01b.js","streaming/protection/models/ProtectionModel_21Jan2015.js","streaming/protection/models/ProtectionModel_3Feb2014.js","streaming/protection/servers/ClearKey.js","streaming/protection/servers/DRMToday.js","streaming/protection/servers/PlayReady.js","streaming/protection/servers/Widevine.js","streaming/protection/vo/ClearKeyKeySet.js","streaming/protection/vo/KeyMessage.js","streaming/protection/vo/KeyPair.js","streaming/protection/vo/KeySystemAccess.js","streaming/protection/vo/KeySystemConfiguration.js","streaming/protection/vo/MediaCapability.js","streaming/protection/vo/NeedKey.js","streaming/vo/DashJSError.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","dashjs","Protection","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","ErrorsBase","errors","config","override","publicOnly","err","hasOwnProperty","indexOf","EventsBase","events","evt","ProtectionConstants","init","CLEARKEY_KEYSTEM_STRING","WIDEVINE_KEYSTEM_STRING","PLAYREADY_KEYSTEM_STRING","constants","CommonEncryption","cpArray","retVal","cp","schemeIdUri","toLowerCase","value","pssh","offset","view","DataView","version","getUint8","getUint32","slice","keySystem","initData","psshList","parsePSSHList","uuid","cpData","BASE64","decodeArray","__text","buffer","data","dv","done","byteCursor","size","undefined","nextBox","systemID","boxStart","byteLength","val","toString","createProtectionSystem","controller","protectionKeyController","_controllersProtectionKeyController2","context","getInstance","setConfig","debug","initialize","protectionModel","getProtectionModel","_controllersProtectionController2","create","eventBus","capabilities","setEncryptedMediaSupported","logger","getLogger","instance","errHandler","videoElement","videoModel","getElement","onencrypted","mediaKeys","getAPI","APIS_ProtectionModel_3Feb2014","info","_modelsProtectionModel_3Feb20142","api","APIS_ProtectionModel_01b","_modelsProtectionModel_01b2","warn","_modelsProtectionModel_21Jan20152","apis","Object","keys","generateKeyRequest","addKey","cancelKeyRequest","needkey","keyerror","keyadded","keymessage","setMediaKeys","MediaKeys","release","error","message","ready","close","__dashjs_factory_name","factory","FactoryMaker","getClassFactory","_ProtectionEvents2","_errorsProtectionErrors2","updateClassFactory","ProtectionEvents","_EventsBase","_get","getPrototypeOf","prototype","INTERNAL_KEY_MESSAGE","INTERNAL_KEY_SYSTEM_SELECTED","INTERNAL_KEY_STATUS_CHANGED","KEY_ADDED","KEY_ERROR","KEY_MESSAGE","KEY_SESSION_CLOSED","KEY_SESSION_CREATED","KEY_SESSION_REMOVED","KEY_STATUSES_CHANGED","KEY_SYSTEM_ACCESS_COMPLETE","KEY_SYSTEM_SELECTED","LICENSE_REQUEST_COMPLETE","NEED_KEY","PROTECTION_CREATED","PROTECTION_DESTROYED","SERVER_CERTIFICATE_UPDATED","TEARDOWN_COMPLETE","VIDEO_ELEMENT_SELECTED","protectionEvents","ProtectionController","setup","pendingNeedKeyData","mediaInfoArr","sessionType","robustnessLevel","checkConfig","initializeForMedia","mediaInfo","on","onKeyMessage","onKeyStatusChanged","push","supportedKS","getSupportedKeySystemsFromContentProtection","contentProtection","selectKeySystem","cps","createKeySession","cdmData","initDataForKS","_CommonEncryption2","getPSSHForKeySystem","protData","getProtData","currentInitData","getAllInitData","initDataEquals","getSessionType","trigger","_voDashJSError2","KEY_SESSION_CREATED_ERROR_CODE","KEY_SESSION_CREATED_ERROR_MESSAGE","systemString","loadKeySession","sessionID","removeKeySession","sessionToken","closeKeySession","setServerCertificate","serverCertificate","setMediaElement","element","onNeedKey","off","setSessionType","setRobustnessLevel","level","setProtectionData","protDataSet","stop","reset","needkeyRetries","forEach","retryTimeout","clearTimeout","keySystemString","getKeySystemConfiguration","audioCapabilities","videoCapabilities","audioRobustness","videoRobustness","ksSessionType","distinctiveIdentifier","persistentState","media","type","AUDIO","_voMediaCapability2","codec","VIDEO","_voKeySystemConfiguration2","fromManifest","requestedKeySystems","ksIdx","ks","configs","onKeySystemAccessComplete","event","KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE","KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE","sessionId","requestKeySystemAccess","onKeySystemSelected","keySystemAccess","getKeySystem","isClearKey","kids","clearkeys","TextEncoder","encode","JSON","stringify","sendLicenseRequestCompleteEvent","status","keyMessage","messageType","licenseServerData","getLicenseServer","eventData","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE","getSessionID","processClearKeyLicenseRequest","updateKeySession","url","serverURL","laURL","getLicenseServerURLFromInitData","getPSSHData","getServerURLFromMessage","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE","reqHeaders","withCredentials","updateHeaders","headers","key","httpRequestHeaders","getRequestHeadersFromMessage","reportError","xhr","errorMsg","response","getErrorResponse","MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE","MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE","statusText","readyState","onLoad","licenseMessage","getLicenseMessage","onAbort","onError","reqPayload","getLicenseRequestFromMessage","reqMethod","getHTTPMethod","responseType","getResponseType","timeout","isNaN","httpTimeout","LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT","doLicenseRequest","LICENSE_SERVER_REQUEST_RETRIES","method","payload","retriesCount","XMLHttpRequest","open","setRequestHeader","retryRequest","setTimeout","LICENSE_SERVER_REQUEST_RETRY_INTERVAL","onload","ontimeout","onerror","onabort","send","retry","initDataType","NEEDKEY_BEFORE_INITIALIZE_RETRIES","NEEDKEY_BEFORE_INITIALIZE_TIMEOUT","abInitData","ArrayBuffer","isView","String","fromCharCode","apply","Uint8Array","getSupportedKeySystems","getKeySystems","ProtectionKeyController","keySystems","_drmKeySystemPlayReady2","_drmKeySystemWidevine2","_drmKeySystemClearKey2","clearkeyKeySystem","_drmKeySystemW3CClearKey2","clearkeyW3CKeySystem","getKeySystemBySystemString","initData1","initData2","data1","data2","j","cpIdx","schemeIdURI","getInitData","getCDMData","getSessionId","shouldNotFilterOutKeySystem","_serversDRMToday2","_constantsProtectionConstants2","_serversWidevine2","_serversPlayReady2","_serversClearKey2","getClearKeysFromProtectionData","protectionDataSet","getProtectionData","getSingletonFactory","KeySystemClearKey","protectionData","clearkeySet","jsonMsg","parse","keyPairs","clearkeyID","clearkey","_voKeyPair2","_voClearKeyKeySet2","parseInitDataFromContentProtection","KeySystemPlayReady","msg","xmlDoc","parser","DOMParser","dataview","messageFormat","Uint16Array","parseFromString","headerNameList","getElementsByTagName","headerValueList","childNodes","nodeValue","Content","licenseRequest","Challenge","decode","numRecords","getUint16","recordType","recordLength","recordData","record","laurl","luiurl","PSSHBoxType","playreadySystemID","uint8arraydecodedPROHeader","PROSize","PSSHSize","PSSHBoxBuffer","PSSHBox","PSSHData","pro","prheader","setUint32","set","setPlayReadyMessageFormat","format","customData","cdmDataBytes","charCodeAt","PRCDMData","replace","KeySystemW3CClearKey","KeySystemWidevine","ProtectionErrors","_ErrorsBase","MEDIA_KEYERR_CODE","MEDIA_KEYERR_UNKNOWN_CODE","MEDIA_KEYERR_CLIENT_CODE","MEDIA_KEYERR_SERVICE_CODE","MEDIA_KEYERR_OUTPUT_CODE","MEDIA_KEYERR_HARDWARECHANGE_CODE","MEDIA_KEYERR_DOMAIN_CODE","MEDIA_KEY_MESSAGE_ERROR_CODE","SERVER_CERTIFICATE_UPDATED_ERROR_CODE","KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE","MEDIA_KEYERR_UNKNOWN_MESSAGE","MEDIA_KEYERR_CLIENT_MESSAGE","MEDIA_KEYERR_SERVICE_MESSAGE","MEDIA_KEYERR_OUTPUT_MESSAGE","MEDIA_KEYERR_HARDWARECHANGE_MESSAGE","MEDIA_KEYERR_DOMAIN_MESSAGE","MEDIA_KEY_MESSAGE_ERROR_MESSAGE","SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE","KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE","protectionErrors","ProtectionModel_01b","pendingSessions","sessions","eventHandler","createEventHandler","removeEventListeners","ksConfigurations","ve","document","createElement","found","supportedAudio","supportedVideo","configIdx","videos","videoIdx","canPlayType","contentType","ksConfig","_voKeySystemAccess2","mediaElement","addEventListener","moreSessionsAllowed","newSession","getExpirationTime","NaN","keyID","handleEvent","_voNeedKey2","findSessionByID","errorCode","systemCode","shift","mediaKeyMessageError","_voKeyMessage2","defaultURL","sessionArray","len","removeEventListener","ProtectionModel_21Jan2015","numSessions","session","removeSession","then","closed","closeKeySessionInternal","getUsable","requestKeySystemAccessInternal","mksa","createMediaKeys","mkeys","name","createSession","createSessionToken","dataType","generateRequest","toJWK","update","load","success","remove","idx","navigator","requestMediaKeySystemAccess","mediaKeySystemAccess","configuration","getConfiguration","token","splice","parseKeyStatus","args","keyId","target","keyStatuses","keyStatus","arguments","expiration","getKeyStatuses","usable","ProtectionModel_3Feb2014","audios","audioIdx","isTypeSupported","ksAccess","ksConfiguration","boundDoSetKeys","doSetKeys","bind","keySession","destinationURL","ClearKey","substring","serverResponse","keypair","keyid","kid","k","DRMToday","keySystemStr","license","PlayReady","uintToString","arrayBuffer","encodedString","decodeURIComponent","escape","parseServerResponse","stringResponse","envelope","getElementsByTagNameNS","soap","body","parseErrorResponse","faultstring","statusCode","idStart","idEnd","fault","detail","exception","node","firstChild","lastIndexOf","errorString","Widevine","ClearKeyKeySet","numKeys","jwk","kty","alg","jwkString","buf","bView","KeyMessage","KeyPair","KeySystemAccess","KeySystemConfiguration","sessionTypes","initDataTypes","MediaCapability","robustness","NeedKey","DashJSError"],"mappings":"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","file":"dash.protection.min.js","sourceRoot":"./src/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass ErrorsBase {\n    extend (errors, config) {\n        if (!errors) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const err in errors) {\n            if (!errors.hasOwnProperty(err) || (this[err] && !override)) continue;\n            if (publicOnly && errors[err].indexOf('public_') === -1) continue;\n            this[err] = errors[err];\n\n        }\n    }\n}\n\nexport default ErrorsBase;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass EventsBase {\n    extend (events, config) {\n        if (!events) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const evt in events) {\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\n            this[evt] = events[evt];\n\n        }\n    }\n}\n\nexport default EventsBase;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Protection Constants declaration\n * @class\n * @ignore\n */\nclass ProtectionConstants {\n\n    init () {\n        this.CLEARKEY_KEYSTEM_STRING = 'org.w3.clearkey';\n        this.WIDEVINE_KEYSTEM_STRING = 'com.widevine.alpha';\n        this.PLAYREADY_KEYSTEM_STRING = 'com.microsoft.playready';\n    }\n\n    constructor () {\n        this.init();\n    }\n}\n\nlet constants = new ProtectionConstants();\nexport default constants;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nclass CommonEncryption {\n    /**\n     * Find and return the ContentProtection element in the given array\n     * that indicates support for MPEG Common Encryption\n     *\n     * @param {Array} cpArray array of content protection elements\n     * @returns {Object|null} the Common Encryption content protection element or\n     * null if one was not found\n     */\n    static findCencContentProtection(cpArray) {\n        let retVal = null;\n        for (let i = 0; i < cpArray.length; ++i) {\n            let cp = cpArray[i];\n            if (cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' &&\n                    cp.value.toLowerCase() === 'cenc')\n                retVal = cp;\n        }\n        return retVal;\n    }\n\n    /**\n     * Returns just the data portion of a single PSSH\n     *\n     * @param {ArrayBuffer} pssh - the PSSH\n     * @return {ArrayBuffer} data portion of the PSSH\n     */\n    static getPSSHData(pssh) {\n        let offset = 8; // Box size and type fields\n        let view = new DataView(pssh);\n\n        // Read version\n        let version = view.getUint8(offset);\n\n        offset += 20; // Version (1), flags (3), system ID (16)\n\n        if (version > 0) {\n            offset += 4 + (16 * view.getUint32(offset)); // Key ID count (4) and All key IDs (16*count)\n        }\n\n        offset += 4; // Data size\n        return pssh.slice(offset);\n    }\n\n    /**\n     * Returns the PSSH associated with the given key system from the concatenated\n     * list of PSSH boxes in the given initData\n     *\n     * @param {KeySystem} keySystem the desired\n     * key system\n     * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.\n     * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found\n     * or null if a valid association could not be found.\n     */\n    static getPSSHForKeySystem(keySystem, initData) {\n        let psshList = CommonEncryption.parsePSSHList(initData);\n        if (psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {\n            return psshList[keySystem.uuid.toLowerCase()];\n        }\n        return null;\n    }\n\n    /**\n     * Parse a standard common encryption PSSH which contains a simple\n     * base64-encoding of the init data\n     *\n     * @param {Object} cpData the ContentProtection element\n     * @param {BASE64} BASE64 reference\n     * @returns {ArrayBuffer|null} the init data or null if not found\n     */\n    static parseInitDataFromContentProtection(cpData, BASE64) {\n        if ('pssh' in cpData) {\n            return BASE64.decodeArray(cpData.pssh.__text).buffer;\n        }\n        return null;\n    }\n\n    /**\n     * Parses list of PSSH boxes into keysystem-specific PSSH data\n     *\n     * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by\n     * CDM as initialization data when CommonEncryption content is detected\n     * @returns {Object|Array} an object that has a property named according to each of\n     * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)\n     * and a ArrayBuffer (the entire PSSH box) as the property value\n     */\n    static parsePSSHList(data) {\n\n        if (data === null)\n            return [];\n\n        let dv = new DataView(data.buffer || data); // data.buffer first for Uint8Array support\n        let done = false;\n        let pssh = {};\n\n        // TODO: Need to check every data read for end of buffer\n        let byteCursor = 0;\n        while (!done) {\n\n            let size,\n                nextBox,\n                version,\n                systemID,\n                psshDataSize;\n            let boxStart = byteCursor;\n\n            if (byteCursor >= dv.buffer.byteLength)\n                break;\n\n            /* Box size */\n            size = dv.getUint32(byteCursor);\n            nextBox = byteCursor + size;\n            byteCursor += 4;\n\n            /* Verify PSSH */\n            if (dv.getUint32(byteCursor) !== 0x70737368) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor += 4;\n\n            /* Version must be 0 or 1 */\n            version = dv.getUint8(byteCursor);\n            if (version !== 0 && version !== 1) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor++;\n\n            byteCursor += 3; /* skip flags */\n\n            // 16-byte UUID/SystemID\n            systemID = '';\n            let i, val;\n            for (i = 0; i < 4; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 4;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 6; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 6;\n\n            systemID = systemID.toLowerCase();\n\n            /* PSSH Data Size */\n            psshDataSize = dv.getUint32(byteCursor);\n            byteCursor += 4;\n\n            /* PSSH Data */\n            pssh[systemID] = dv.buffer.slice(boxStart, nextBox);\n            byteCursor = nextBox;\n        }\n\n        return pssh;\n    }\n}\n\nexport default CommonEncryption;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport ProtectionController from './controllers/ProtectionController';\nimport ProtectionKeyController from './controllers/ProtectionKeyController';\nimport ProtectionEvents from './ProtectionEvents';\nimport ProtectionErrors from './errors/ProtectionErrors';\nimport ProtectionModel_21Jan2015 from './models/ProtectionModel_21Jan2015';\nimport ProtectionModel_3Feb2014 from './models/ProtectionModel_3Feb2014';\nimport ProtectionModel_01b from './models/ProtectionModel_01b';\n\nconst APIS_ProtectionModel_01b = [\n    // Un-prefixed as per spec\n    {\n        // Video Element\n        generateKeyRequest: 'generateKeyRequest',\n        addKey: 'addKey',\n        cancelKeyRequest: 'cancelKeyRequest',\n\n        // Events\n        needkey: 'needkey',\n        keyerror: 'keyerror',\n        keyadded: 'keyadded',\n        keymessage: 'keymessage'\n    },\n    // Webkit-prefixed (early Chrome versions and Chrome with EME disabled in chrome://flags)\n    {\n        // Video Element\n        generateKeyRequest: 'webkitGenerateKeyRequest',\n        addKey: 'webkitAddKey',\n        cancelKeyRequest: 'webkitCancelKeyRequest',\n\n        // Events\n        needkey: 'webkitneedkey',\n        keyerror: 'webkitkeyerror',\n        keyadded: 'webkitkeyadded',\n        keymessage: 'webkitkeymessage'\n    }\n];\n\nconst APIS_ProtectionModel_3Feb2014 = [\n    // Un-prefixed as per spec\n    // Chrome 38-39 (and some earlier versions) with chrome://flags -- Enable Encrypted Media Extensions\n    {\n        // Video Element\n        setMediaKeys: 'setMediaKeys',\n        // MediaKeys\n        MediaKeys: 'MediaKeys',\n        // MediaKeySession\n        release: 'close',\n\n        // Events\n        needkey: 'needkey',\n        error: 'keyerror',\n        message: 'keymessage',\n        ready: 'keyadded',\n        close: 'keyclose'\n    },\n    // MS-prefixed (IE11, Windows 8.1)\n    {\n        // Video Element\n        setMediaKeys: 'msSetMediaKeys',\n        // MediaKeys\n        MediaKeys: 'MSMediaKeys',\n        // MediaKeySession\n        release: 'close',\n        // Events\n        needkey: 'msneedkey',\n        error: 'mskeyerror',\n        message: 'mskeymessage',\n        ready: 'mskeyadded',\n        close: 'mskeyclose'\n    }\n];\n\nfunction Protection() {\n    let instance;\n    const context = this.context;\n\n    /**\n     * Create a ProtectionController and associated ProtectionModel for use with\n     * a single piece of content.\n     *\n     * @param {Object} config\n     * @return {ProtectionController} protection controller\n     *\n     */\n    function createProtectionSystem(config) {\n        let controller = null;\n\n        const protectionKeyController = ProtectionKeyController(context).getInstance();\n        protectionKeyController.setConfig({ debug: config.debug, BASE64: config.BASE64 });\n        protectionKeyController.initialize();\n\n        let protectionModel =  getProtectionModel(config);\n\n        if (!controller && protectionModel) {//TODO add ability to set external controller if still needed at all?\n            controller = ProtectionController(context).create({\n                protectionModel: protectionModel,\n                protectionKeyController: protectionKeyController,\n                eventBus: config.eventBus,\n                debug: config.debug,\n                events: config.events,\n                BASE64: config.BASE64,\n                constants: config.constants\n            });\n            config.capabilities.setEncryptedMediaSupported(true);\n        }\n        return controller;\n    }\n\n    function getProtectionModel(config) {\n        const debug = config.debug;\n        const logger = debug.getLogger(instance);\n        const eventBus = config.eventBus;\n        const errHandler = config.errHandler;\n        const videoElement = config.videoModel ? config.videoModel.getElement() : null;\n\n        if ((!videoElement || videoElement.onencrypted !== undefined) &&\n            (!videoElement || videoElement.mediaKeys !== undefined)) {\n            logger.info('EME detected on this user agent! (ProtectionModel_21Jan2015)');\n            return ProtectionModel_21Jan2015(context).create({ debug: debug, eventBus: eventBus, events: config.events });\n        } else if (getAPI(videoElement, APIS_ProtectionModel_3Feb2014)) {\n            logger.info('EME detected on this user agent! (ProtectionModel_3Feb2014)');\n            return ProtectionModel_3Feb2014(context).create({ debug: debug, eventBus: eventBus, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_3Feb2014) });\n        } else if (getAPI(videoElement, APIS_ProtectionModel_01b)) {\n            logger.info('EME detected on this user agent! (ProtectionModel_01b)');\n            return ProtectionModel_01b(context).create({ debug: debug, eventBus: eventBus, errHandler: errHandler, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_01b) });\n        } else {\n            logger.warn('No supported version of EME detected on this user agent! - Attempts to play encrypted content will fail!');\n            return null;\n        }\n    }\n\n    function getAPI(videoElement, apis) {\n        for (let i = 0; i < apis.length; i++) {\n            const api = apis[i];\n            // detect if api is supported by browser\n            // check only first function in api -> should be fine\n            if (typeof videoElement[api[Object.keys(api)[0]]] !== 'function') {\n                continue;\n            }\n\n            return api;\n        }\n\n        return null;\n    }\n\n    instance = {\n        createProtectionSystem: createProtectionSystem\n    };\n\n    return instance;\n}\n\nProtection.__dashjs_factory_name = 'Protection';\nconst factory = dashjs.FactoryMaker.getClassFactory(Protection); /* jshint ignore:line */\nfactory.events = ProtectionEvents;\nfactory.errors = ProtectionErrors;\ndashjs.FactoryMaker.updateClassFactory(Protection.__dashjs_factory_name, factory); /* jshint ignore:line */\nexport default factory;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from '../../core/events/EventsBase';\n/**\n * @class\n *\n */\nclass ProtectionEvents extends EventsBase {\n    /**\n     * @description Public facing external events to be used when including protection package.\n     * All public events will be aggregated into the MediaPlayerEvents Class and can be accessed\n     * via MediaPlayer.events.  public_ is the prefix that we use to move event names to MediaPlayerEvents.\n     */\n    constructor () {\n        super();\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         *\n         * @ignore\n         */\n        this.INTERNAL_KEY_MESSAGE = 'internalKeyMessage';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @ignore\n         */\n        this.INTERNAL_KEY_SYSTEM_SELECTED = 'internalKeySystemSelected';\n\n        /**\n         * Event ID for events delivered when the status of one decryption keys has changed\n         * @ignore\n         */\n        this.INTERNAL_KEY_STATUS_CHANGED = 'internalkeyStatusChanged';\n\n        /**\n         * Event ID for events delivered when a new key has been added\n         *\n         * @constant\n         * @deprecated The latest versions of the EME specification no longer\n         * use this event.  {@MediaPlayer.models.protectionModel.eventList.KEY_STATUSES_CHANGED}\n         * is preferred.\n         * @event ProtectionEvents#KEY_ADDED\n         */\n        this.KEY_ADDED = 'public_keyAdded';\n        /**\n         * Event ID for events delivered when an error is encountered by the CDM\n         * while processing a license server response message\n         * @event ProtectionEvents#KEY_ERROR\n         */\n        this.KEY_ERROR = 'public_keyError';\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         * @event ProtectionEvents#KEY_MESSAGE\n         */\n        this.KEY_MESSAGE = 'public_keyMessage';\n\n        /**\n         * Event ID for events delivered when a key session close\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CLOSED\n         */\n        this.KEY_SESSION_CLOSED = 'public_keySessionClosed';\n\n        /**\n         * Event ID for events delivered when a new key sessions creation\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CREATED\n         */\n        this.KEY_SESSION_CREATED = 'public_keySessionCreated';\n\n        /**\n         * Event ID for events delivered when a key session removal\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_REMOVED\n         */\n        this.KEY_SESSION_REMOVED = 'public_keySessionRemoved';\n\n        /**\n         * Event ID for events delivered when the status of one or more\n         * decryption keys has changed\n         * @event ProtectionEvents#KEY_STATUSES_CHANGED\n         */\n        this.KEY_STATUSES_CHANGED = 'public_keyStatusesChanged';\n\n        /**\n         * Event ID for events delivered when a key system access procedure\n         * has completed\n         * @ignore\n         */\n        this.KEY_SYSTEM_ACCESS_COMPLETE = 'public_keySystemAccessComplete';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @event ProtectionEvents#KEY_SYSTEM_SELECTED\n         */\n        this.KEY_SYSTEM_SELECTED = 'public_keySystemSelected';\n\n        /**\n         * Event ID for events delivered when a license request procedure\n         * has completed\n         * @event ProtectionEvents#LICENSE_REQUEST_COMPLETE\n         */\n        this.LICENSE_REQUEST_COMPLETE = 'public_licenseRequestComplete';\n\n        /**\n         * Event ID for needkey/encrypted events\n         * @ignore\n         */\n        this.NEED_KEY = 'needkey';\n\n        /**\n         * Event ID for events delivered when the Protection system is detected and created.\n         * @event ProtectionEvents#PROTECTION_CREATED\n         */\n        this.PROTECTION_CREATED = 'public_protectioncreated';\n\n        /**\n         * Event ID for events delivered when the Protection system is destroyed.\n         * @event ProtectionEvents#PROTECTION_DESTROYED\n         */\n        this.PROTECTION_DESTROYED = 'public_protectiondestroyed';\n\n        /**\n         * Event ID for events delivered when a new server certificate has\n         * been delivered to the CDM\n         * @ignore\n         */\n        this.SERVER_CERTIFICATE_UPDATED = 'serverCertificateUpdated';\n\n        /**\n         * Event ID for events delivered when the process of shutting down\n         * a protection set has completed\n         * @ignore\n         */\n        this.TEARDOWN_COMPLETE =  'protectionTeardownComplete';\n\n        /**\n         * Event ID for events delivered when a HTMLMediaElement has been\n         * associated with the protection set\n         * @ignore\n         */\n        this.VIDEO_ELEMENT_SELECTED = 'videoElementSelected';\n    }\n}\n\nlet protectionEvents = new ProtectionEvents();\nexport default protectionEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport CommonEncryption from '../CommonEncryption';\nimport MediaCapability from '../vo/MediaCapability';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport ProtectionErrors from '../errors/ProtectionErrors';\nimport DashJSError from '../../vo/DashJSError';\n\nconst NEEDKEY_BEFORE_INITIALIZE_RETRIES = 5;\nconst NEEDKEY_BEFORE_INITIALIZE_TIMEOUT = 500;\n\nconst LICENSE_SERVER_REQUEST_RETRIES = 3;\nconst LICENSE_SERVER_REQUEST_RETRY_INTERVAL = 1000;\nconst LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT = 8000;\n\n/**\n * @module ProtectionController\n * @description Provides access to media protection information and functionality.  Each\n * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}\n * which encapsulates a set of protection information (EME APIs, selected key system,\n * key sessions).  The APIs of ProtectionController mostly align with the latest EME\n * APIs.  Key system selection is mostly automated when combined with app-overrideable\n * functionality provided in {@link ProtectionKeyController}.\n * @todo ProtectionController does almost all of its tasks automatically after init() is\n * called.  Applications might want more control over this process and want to go through\n * each step manually (key system selection, session creation, session maintenance).\n * @param {Object} config\n */\n\nfunction ProtectionController(config) {\n\n    config = config || {};\n    const protectionKeyController = config.protectionKeyController;\n    let protectionModel = config.protectionModel;\n    const eventBus = config.eventBus;\n    const events = config.events;\n    const debug = config.debug;\n    const BASE64 = config.BASE64;\n    const constants = config.constants;\n    let needkeyRetries = [];\n\n    let instance,\n        logger,\n        pendingNeedKeyData,\n        mediaInfoArr,\n        protDataSet,\n        sessionType,\n        robustnessLevel,\n        keySystem;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        pendingNeedKeyData = [];\n        mediaInfoArr = [];\n        sessionType = 'temporary';\n        robustnessLevel = '';\n    }\n\n    function checkConfig() {\n        if (!eventBus || !eventBus.hasOwnProperty('on') || !protectionKeyController || !protectionKeyController.hasOwnProperty('getSupportedKeySystemsFromContentProtection')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    /**\n     * Initialize this protection system with a given audio\n     * or video stream information.\n     *\n     * @param {StreamInfo} [mediaInfo] Media information\n     * @memberof module:ProtectionController\n     * @instance\n     * @todo This API will change when we have better support for allowing applications\n     * to select different adaptation sets for playback.  Right now it is clunky for\n     * applications to create {@link StreamInfo} with the right information,\n     */\n    function initializeForMedia(mediaInfo) {\n        // Not checking here if a session for similar KS/KID combination is already created\n        // because still don't know which keysystem will be selected.\n        // Once Keysystem is selected and before creating the session, we will do that check\n        // so we create the strictly necessary DRM sessions\n        if (!mediaInfo) {\n            throw new Error('mediaInfo can not be null or undefined');\n        }\n\n        checkConfig();\n\n        eventBus.on(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        eventBus.on(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\n\n        mediaInfoArr.push(mediaInfo);\n\n        // ContentProtection elements are specified at the AdaptationSet level, so the CP for audio\n        // and video will be the same.  Just use one valid MediaInfo object\n        const supportedKS = protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection);\n        if (supportedKS && supportedKS.length > 0) {\n            selectKeySystem(supportedKS, true);\n        }\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        return protectionKeyController.getSupportedKeySystemsFromContentProtection(cps);\n    }\n\n    /**\n     * Create a new key session associated with the given initialization data from\n     * the MPD or from the PSSH box in the media\n     *\n     * @param {ArrayBuffer} initData the initialization data\n     * @param {Uint8Array} cdmData the custom data to provide to licenser\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     * @todo In older versions of the EME spec, there was a one-to-one relationship between\n     * initialization data and key sessions.  That is no longer true in the latest APIs.  This\n     * API will need to modified (and a new \"generateRequest(keySession, initData)\" API created)\n     * to come up to speed with the latest EME standard\n     */\n    function createKeySession(initData, cdmData) {\n        const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, initData);\n        const protData = getProtData(keySystem);\n        if (initDataForKS) {\n\n            // Check for duplicate initData\n            const currentInitData = protectionModel.getAllInitData();\n            for (let i = 0; i < currentInitData.length; i++) {\n                if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\n                    logger.warn('DRM: Ignoring initData because we have already seen it!');\n                    return;\n                }\n            }\n            try {\n                protectionModel.createKeySession(initDataForKS, protData, getSessionType(keySystem), cdmData);\n            } catch (error) {\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + error.message)});\n            }\n        } else if (initData) {\n            protectionModel.createKeySession(initData, protData, getSessionType(keySystem), cdmData);\n        } else {\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Selected key system is ' + keySystem.systemString + '.  needkey/encrypted event contains no initData corresponding to that key system!')});\n        }\n    }\n\n    /**\n     * Loads a key session with the given session ID from persistent storage.  This\n     * essentially creates a new key session\n     *\n     * @param {string} sessionID\n     * @param {string} initData\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     */\n    function loadKeySession(sessionID, initData) {\n        protectionModel.loadKeySession(sessionID, initData, getSessionType(keySystem));\n    }\n\n    /**\n     * Removes the given key session from persistent storage and closes the session\n     * as if {@link ProtectionController#closeKeySession}\n     * was called\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionRemoved\n     * @fires ProtectionController#KeySessionClosed\n     */\n    function removeKeySession(sessionToken) {\n        protectionModel.removeKeySession(sessionToken);\n    }\n\n    /**\n     * Closes the key session and releases all associated decryption keys.  These\n     * keys will no longer be available for decrypting media\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionClosed\n     */\n    function closeKeySession(sessionToken) {\n        protectionModel.closeKeySession(sessionToken);\n    }\n\n    /**\n     * Sets a server certificate for use by the CDM when signing key messages\n     * intended for a particular license server.  This will fire\n     * an error event if a key system has not yet been selected.\n     *\n     * @param {ArrayBuffer} serverCertificate a CDM-specific license server\n     * certificate\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#ServerCertificateUpdated\n     */\n    function setServerCertificate(serverCertificate) {\n        protectionModel.setServerCertificate(serverCertificate);\n    }\n\n    /**\n     * Associate this protection system with the given HTMLMediaElement.  This\n     * causes the system to register for needkey/encrypted events from the given\n     * element and provides a destination for setting of MediaKeys\n     *\n     * @param {HTMLMediaElement} element the media element to which the protection\n     * system should be associated\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setMediaElement(element) {\n        if (element) {\n            protectionModel.setMediaElement(element);\n            eventBus.on(events.NEED_KEY, onNeedKey, this);\n        } else if (element === null) {\n            protectionModel.setMediaElement(element);\n            eventBus.off(events.NEED_KEY, onNeedKey, this);\n        }\n    }\n\n    /**\n     * Sets the session type to use when creating key sessions.  Either \"temporary\" or\n     * \"persistent-license\".  Default is \"temporary\".\n     *\n     * @param {string} value the session type\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setSessionType(value) {\n        sessionType = value;\n    }\n\n    /**\n     * Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.\n     * Possible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.\n     *\n     * @param {string} level the robustness level\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setRobustnessLevel(level) {\n        robustnessLevel = level;\n    }\n\n    /**\n     * Attach KeySystem-specific data to use for license acquisition with EME\n     *\n     * @param {Object} data an object containing property names corresponding to\n     * key system name strings (e.g. \"org.w3.clearkey\") and associated values\n     * being instances of {@link ProtectionData}\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setProtectionData(data) {\n        protDataSet = data;\n        protectionKeyController.setProtectionData(data);\n    }\n\n    /**\n     * Stop method is called when current playback is stopped/resetted.\n     *\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function stop() {\n        if (protectionModel) {\n            protectionModel.stop();\n        }\n    }\n\n\n    /**\n     * Destroys all protection data associated with this protection set.  This includes\n     * deleting all key sessions. In the case of persistent key sessions, the sessions\n     * will simply be unloaded and not deleted.  Additionally, if this protection set is\n     * associated with a HTMLMediaElement, it will be detached from that element.\n     *\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function reset() {\n\n        eventBus.off(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        eventBus.off(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\n\n        setMediaElement(null);\n\n        keySystem = undefined;//TODO-Refactor look at why undefined is needed for this. refactor\n\n        if (protectionModel) {\n            protectionModel.reset();\n            protectionModel = null;\n        }\n\n        needkeyRetries.forEach( retryTimeout => clearTimeout(retryTimeout));\n        needkeyRetries = [];\n\n        mediaInfoArr = [];\n    }\n\n    ///////////////\n    // Private\n    ///////////////\n\n    function getProtData(keySystem) {\n        let protData = null;\n        if (keySystem) {\n            const keySystemString = keySystem.systemString;\n\n            if (protDataSet) {\n                protData = (keySystemString in protDataSet) ? protDataSet[keySystemString] : null;\n            }\n        }\n        return protData;\n    }\n\n    function getKeySystemConfiguration(keySystem) {\n        const protData = getProtData(keySystem);\n        const audioCapabilities = [];\n        const videoCapabilities = [];\n        const audioRobustness = (protData && protData.audioRobustness && protData.audioRobustness.length > 0) ? protData.audioRobustness : robustnessLevel;\n        const videoRobustness = (protData && protData.videoRobustness && protData.videoRobustness.length > 0) ? protData.videoRobustness : robustnessLevel;\n        const ksSessionType = getSessionType(keySystem);\n        const distinctiveIdentifier = (protData && protData.distinctiveIdentifier) ? protData.distinctiveIdentifier : 'optional';\n        const persistentState = (protData && protData.persistentState) ? protData.persistentState : (ksSessionType === 'temporary') ? 'optional' : 'required';\n\n        mediaInfoArr.forEach((media) => {\n            if (media.type === constants.AUDIO) {\n                audioCapabilities.push(new MediaCapability(media.codec, audioRobustness));\n            } else if (media.type === constants.VIDEO) {\n                videoCapabilities.push(new MediaCapability(media.codec, videoRobustness));\n            }\n        });\n\n        return new KeySystemConfiguration(\n            audioCapabilities, videoCapabilities, distinctiveIdentifier,\n            persistentState,\n            [ksSessionType]);\n    }\n\n    function getSessionType(keySystem) {\n        const protData = getProtData(keySystem);\n        const ksSessionType = (protData && protData.sessionType) ? protData.sessionType : sessionType;\n        return ksSessionType;\n    }\n\n    function selectKeySystem(supportedKS, fromManifest) {\n        const self = this;\n        const requestedKeySystems = [];\n\n        let ksIdx;\n        if (keySystem) {\n            // We have a key system\n            for (ksIdx = 0; ksIdx < supportedKS.length; ksIdx++) {\n                if (keySystem === supportedKS[ksIdx].ks) {\n\n                    requestedKeySystems.push({ks: supportedKS[ksIdx].ks, configs: [getKeySystemConfiguration(keySystem)]});\n\n                    // Ensure that we would be granted key system access using the key\n                    // system and codec information\n                    const onKeySystemAccessComplete = function (event) {\n                        eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                        if (event.error) {\n                            if (!fromManifest) {\n                                eventBus.trigger(events.KEY_SYSTEM_SELECTED, {error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error)});\n                            }\n                        } else {\n                            logger.info('DRM: KeySystem Access Granted');\n                            eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: event.data});\n                            if (supportedKS[ksIdx].sessionId) {\n                                // Load MediaKeySession with sessionId\n                                loadKeySession(supportedKS[ksIdx].sessionId, supportedKS[ksIdx].initData);\n                            } else if (supportedKS[ksIdx].initData) {\n                                // Create new MediaKeySession with initData\n                                createKeySession(supportedKS[ksIdx].initData, supportedKS[ksIdx].cdmData);\n                            }\n                        }\n                    };\n                    eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                    protectionModel.requestKeySystemAccess(requestedKeySystems);\n                    break;\n                }\n            }\n        }\n        else if (keySystem === undefined) {\n            // First time through, so we need to select a key system\n            keySystem = null;\n            pendingNeedKeyData.push(supportedKS);\n\n            // Add all key systems to our request list since we have yet to select a key system\n            for (let i = 0; i < supportedKS.length; i++) {\n                requestedKeySystems.push({ks: supportedKS[i].ks, configs: [getKeySystemConfiguration(supportedKS[i].ks)]});\n            }\n\n            let keySystemAccess;\n            const onKeySystemAccessComplete = function (event) {\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                if (event.error) {\n                    keySystem = undefined;\n                    eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n                    if (!fromManifest) {\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error)});\n                    }\n                } else {\n                    keySystemAccess = event.data;\n                    logger.info('DRM: KeySystem Access Granted (' + keySystemAccess.keySystem.systemString + ')!  Selecting key system...');\n                    protectionModel.selectKeySystem(keySystemAccess);\n                }\n            };\n            var onKeySystemSelected = function (event) {\n                eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                if (!event.error) {\n                    if (!protectionModel) {\n                        return;\n                    }\n                    keySystem = protectionModel.getKeySystem();\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: keySystemAccess});\n                    // Set server certificate from protData\n                    const protData = getProtData(keySystem);\n                    if (protData && protData.serverCertificate && protData.serverCertificate.length > 0) {\n                        protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);\n                    }\n                    for (let i = 0; i < pendingNeedKeyData.length; i++) {\n                        for (ksIdx = 0; ksIdx < pendingNeedKeyData[i].length; ksIdx++) {\n                            if (keySystem === pendingNeedKeyData[i][ksIdx].ks) {\n                                // For Clearkey: if parameters for generating init data was provided by the user, use them for generating\n                                // initData and overwrite possible initData indicated in encrypted event (EME)\n                                if (protectionKeyController.isClearKey(keySystem) && protData && protData.hasOwnProperty('clearkeys')) {\n                                    const initData = { kids: Object.keys(protData.clearkeys) };\n                                    pendingNeedKeyData[i][ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));\n                                }\n                                if (pendingNeedKeyData[i][ksIdx].sessionId) {\n                                    // Load MediaKeySession with sessionId\n                                    loadKeySession(pendingNeedKeyData[i][ksIdx].sessionId, pendingNeedKeyData[i][ksIdx].initData);\n                                } else if (pendingNeedKeyData[i][ksIdx].initData !== null) {\n                                    // Create new MediaKeySession with initData\n                                    createKeySession(pendingNeedKeyData[i][ksIdx].initData, pendingNeedKeyData[i][ksIdx].cdmData);\n                                }\n                                break;\n                            }\n                        }\n                    }\n                } else {\n                    keySystem = undefined;\n                    if (!fromManifest) {\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + 'Error selecting key system! -- ' + event.error)});\n                    }\n                }\n            };\n            eventBus.on(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n            eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n            protectionModel.requestKeySystemAccess(requestedKeySystems);\n        } else {\n            // We are in the process of selecting a key system, so just save the data\n            pendingNeedKeyData.push(supportedKS);\n        }\n    }\n\n    function sendLicenseRequestCompleteEvent(data, error) {\n        eventBus.trigger(events.LICENSE_REQUEST_COMPLETE, {data: data, error: error});\n    }\n\n    function onKeyStatusChanged(e) {\n        if (e.error) {\n            eventBus.trigger(events.KEY_STATUSES_CHANGED, {data: null, error: e.error});\n        } else {\n            logger.debug('DRM: key status = ' + e.status);\n        }\n    }\n\n    function onKeyMessage(e) {\n        logger.debug('DRM: onKeyMessage');\n\n        // Dispatch event to applications indicating we received a key message\n        const keyMessage = e.data;\n        eventBus.trigger(events.KEY_MESSAGE, {data: keyMessage});\n        const messageType = (keyMessage.messageType) ? keyMessage.messageType : 'license-request';\n        const message = keyMessage.message;\n        const sessionToken = keyMessage.sessionToken;\n        const protData = getProtData(keySystem);\n        const keySystemString = keySystem ? keySystem.systemString : null;\n        const licenseServerData = protectionKeyController.getLicenseServer(keySystem, protData, messageType);\n        const eventData = { sessionToken: sessionToken, messageType: messageType };\n\n        // Ensure message from CDM is not empty\n        if (!message || message.byteLength === 0) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE));\n            return;\n        }\n\n        // Message not destined for license server\n        if (!licenseServerData) {\n            logger.debug('DRM: License server request not required for this message (type = ' + e.data.messageType + ').  Session ID = ' + sessionToken.getSessionID());\n            sendLicenseRequestCompleteEvent(eventData);\n            return;\n        }\n\n        // Perform any special handling for ClearKey\n        if (protectionKeyController.isClearKey(keySystem)) {\n            const clearkeys = protectionKeyController.processClearKeyLicenseRequest(keySystem, protData, message);\n            if (clearkeys)  {\n                logger.debug('DRM: ClearKey license request handled by application!');\n                sendLicenseRequestCompleteEvent(eventData);\n                protectionModel.updateKeySession(sessionToken, clearkeys);\n                return;\n            }\n        }\n\n        // All remaining key system scenarios require a request to a remote license server\n        // Determine license server URL\n        let url = null;\n        if (protData && protData.serverURL) {\n            const serverURL = protData.serverURL;\n            if (typeof serverURL === 'string' && serverURL !== '') {\n                url = serverURL;\n            } else if (typeof serverURL === 'object' && serverURL.hasOwnProperty(messageType)) {\n                url = serverURL[messageType];\n            }\n        } else if (protData && protData.laURL && protData.laURL !== '') {\n            // TODO: Deprecated!\n            url = protData.laURL;\n        } else {\n            url = keySystem.getLicenseServerURLFromInitData(CommonEncryption.getPSSHData(sessionToken.initData));\n            if (!url) {\n                url = e.data.laURL;\n            }\n        }\n        // Possibly update or override the URL based on the message\n        url = licenseServerData.getServerURLFromMessage(url, message, messageType);\n\n        // Ensure valid license server URL\n        if (!url) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE));\n            return;\n        }\n\n        // Set optional XMLHttpRequest headers from protection data and message\n        const reqHeaders = {};\n        let withCredentials = false;\n        const updateHeaders = function (headers) {\n            if (headers) {\n                for (const key in headers) {\n                    if ('authorization' === key.toLowerCase()) {\n                        withCredentials = true;\n                    }\n                    reqHeaders[key] = headers[key];\n                }\n            }\n        };\n        if (protData) {\n            updateHeaders(protData.httpRequestHeaders);\n        }\n        updateHeaders(keySystem.getRequestHeadersFromMessage(message));\n\n        // Overwrite withCredentials property from protData if present\n        if (protData && typeof protData.withCredentials == 'boolean') {\n            withCredentials = protData.withCredentials;\n        }\n\n        const reportError = function (xhr, eventData, keySystemString, messageType) {\n            const errorMsg = ((xhr.response) ? licenseServerData.getErrorResponse(xhr.response, keySystemString, messageType) : 'NONE');\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR complete. status is \"' +\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState + '.  Response is ' + errorMsg));\n        };\n\n        const onLoad = function (xhr) {\n            if (!protectionModel) {\n                return;\n            }\n\n            if (xhr.status === 200) {\n                const licenseMessage = licenseServerData.getLicenseMessage(xhr.response, keySystemString, messageType);\n                if (licenseMessage !== null) {\n                    sendLicenseRequestCompleteEvent(eventData);\n                    protectionModel.updateKeySession(sessionToken, licenseMessage);\n                } else {\n                    reportError(xhr, eventData, keySystemString, messageType);\n                }\n            } else {\n                reportError(xhr, eventData, keySystemString, messageType);\n            }\n        };\n\n        const onAbort = function (xhr) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR aborted. status is \"' +\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\n        };\n\n        const onError = function (xhr) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR error. status is \"' +\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\n        };\n\n        const reqPayload = keySystem.getLicenseRequestFromMessage(message);\n        const reqMethod = licenseServerData.getHTTPMethod(messageType);\n        const responseType = licenseServerData.getResponseType(keySystemString, messageType);\n        const timeout = protData && !isNaN(protData.httpTimeout) ? protData.httpTimeout : LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT;\n\n        doLicenseRequest(url, reqHeaders, reqMethod, responseType, withCredentials, reqPayload,\n            LICENSE_SERVER_REQUEST_RETRIES, timeout, onLoad, onAbort, onError);\n    }\n\n    // Implement license requests with a retry mechanism to avoid temporary network issues to affect playback experience\n    function doLicenseRequest(url, headers, method, responseType, withCredentials, payload, retriesCount, timeout, onLoad, onAbort, onError) {\n        const xhr = new XMLHttpRequest();\n\n        xhr.open(method, url, true);\n        xhr.responseType = responseType;\n        xhr.withCredentials = withCredentials;\n        if (timeout > 0) {\n            xhr.timeout = timeout;\n        }\n        for (const key in headers) {\n            xhr.setRequestHeader(key, headers[key]);\n        }\n\n        const retryRequest = function () {\n            // fail silently and retry\n            retriesCount--;\n            setTimeout(function () {\n                doLicenseRequest(url, headers, method, responseType, withCredentials, payload,\n                    retriesCount, timeout, onLoad, onAbort, onError);\n            }, LICENSE_SERVER_REQUEST_RETRY_INTERVAL);\n        };\n\n        xhr.onload = function () {\n            if (this.status === 200 || retriesCount <= 0) {\n                onLoad(this);\n            } else {\n                logger.warn('License request failed (' + this.status + '). Retrying it... Pending retries: ' + retriesCount);\n                retryRequest();\n            }\n        };\n\n        xhr.ontimeout = xhr.onerror = function () {\n            if (retriesCount <= 0) {\n                onError(this);\n            } else {\n                logger.warn('License request network request failed . Retrying it... Pending retries: ' + retriesCount);\n                retryRequest();\n            }\n        };\n\n        xhr.onabort = function () {\n            onAbort(this);\n        };\n\n        xhr.send(payload);\n    }\n\n    function onNeedKey(event, retry) {\n        logger.debug('DRM: onNeedKey');\n        // Ignore non-cenc initData\n        if (event.key.initDataType !== 'cenc') {\n            logger.warn('DRM:  Only \\'cenc\\' initData is supported!  Ignoring initData of type: ' + event.key.initDataType);\n            return;\n        }\n\n        if (mediaInfoArr.length === 0) {\n            logger.warn('DRM: onNeedKey called before initializeForMedia, wait until initialized');\n            retry = typeof retry === 'undefined' ? 1 : retry + 1;\n            if (retry < NEEDKEY_BEFORE_INITIALIZE_RETRIES) {\n                needkeyRetries.push(setTimeout(() => {\n                    onNeedKey(event, retry);\n                }, NEEDKEY_BEFORE_INITIALIZE_TIMEOUT));\n                return;\n            }\n\n        }\n\n        // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).\n        // Convert to ArrayBuffer\n        let abInitData = event.key.initData;\n        if (ArrayBuffer.isView(abInitData)) {\n            abInitData = abInitData.buffer;\n        }\n\n        // If key system has already been selected and initData already seen, then do nothing\n        if (keySystem) {\n            const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, abInitData);\n            if (initDataForKS) {\n\n                // Check for duplicate initData\n                const currentInitData = protectionModel.getAllInitData();\n                for (let i = 0; i < currentInitData.length; i++) {\n                    if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\n                        logger.warn('DRM: Ignoring initData because we have already seen it!');\n                        return;\n                    }\n                }\n            }\n        }\n\n        logger.debug('DRM: initData:', String.fromCharCode.apply(null, new Uint8Array(abInitData)));\n\n        const supportedKS = protectionKeyController.getSupportedKeySystems(abInitData, protDataSet);\n        if (supportedKS.length === 0) {\n            logger.debug('DRM: Received needkey event with initData, but we don\\'t support any of the key systems!');\n            return;\n        }\n\n        selectKeySystem(supportedKS, false);\n    }\n\n    function getKeySystems() {\n        return protectionKeyController ? protectionKeyController.getKeySystems() : [];\n    }\n\n    instance = {\n        initializeForMedia: initializeForMedia,\n        createKeySession: createKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        setMediaElement: setMediaElement,\n        setSessionType: setSessionType,\n        setRobustnessLevel: setRobustnessLevel,\n        setProtectionData: setProtectionData,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getKeySystems: getKeySystems,\n        stop: stop,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nProtectionController.__dashjs_factory_name = 'ProtectionController';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport CommonEncryption from './../CommonEncryption';\nimport KeySystemClearKey from './../drm/KeySystemClearKey';\nimport KeySystemW3CClearKey from './../drm/KeySystemW3CClearKey';\nimport KeySystemWidevine from './../drm/KeySystemWidevine';\nimport KeySystemPlayReady from './../drm/KeySystemPlayReady';\nimport DRMToday from './../servers/DRMToday';\nimport PlayReady from './../servers/PlayReady';\nimport Widevine from './../servers/Widevine';\nimport ClearKey from './../servers/ClearKey';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\n/**\n * @module ProtectionKeyController\n * @description Media protection key system functionality that can be modified/overridden by applications\n */\nfunction ProtectionKeyController() {\n\n    let context = this.context;\n\n    let instance,\n        debug,\n        logger,\n        keySystems,\n        BASE64,\n        clearkeyKeySystem,\n        clearkeyW3CKeySystem;\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.debug) {\n            debug = config.debug;\n            logger = debug.getLogger(instance);\n        }\n\n        if (config.BASE64) {\n            BASE64 = config.BASE64;\n        }\n    }\n\n    function initialize() {\n        keySystems = [];\n\n        let keySystem;\n\n        // PlayReady\n        keySystem = KeySystemPlayReady(context).getInstance({ BASE64: BASE64 });\n        keySystems.push(keySystem);\n\n        // Widevine\n        keySystem = KeySystemWidevine(context).getInstance({ BASE64: BASE64 });\n        keySystems.push(keySystem);\n\n        // ClearKey\n        keySystem = KeySystemClearKey(context).getInstance({ BASE64: BASE64 });\n        keySystems.push(keySystem);\n        clearkeyKeySystem = keySystem;\n\n        // W3C ClearKey\n        keySystem = KeySystemW3CClearKey(context).getInstance({ BASE64: BASE64, debug: debug });\n        keySystems.push(keySystem);\n        clearkeyW3CKeySystem = keySystem;\n    }\n\n    /**\n     * Returns a prioritized list of key systems supported\n     * by this player (not necessarily those supported by the\n     * user agent)\n     *\n     * @returns {Array.<KeySystem>} a prioritized\n     * list of key systems\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystems() {\n        return keySystems;\n    }\n\n    /**\n     * Returns the key system associated with the given key system string\n     * name (i.e. 'org.w3.clearkey')\n     *\n     * @param {string} systemString the system string\n     * @returns {KeySystem|null} the key system\n     * or null if no supported key system is associated with the given key\n     * system string\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystemBySystemString(systemString) {\n        for (let i = 0; i < keySystems.length; i++) {\n            if (keySystems[i].systemString === systemString) {\n                return keySystems[i];\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Determines whether the given key system is ClearKey.  This is\n     * necessary because the EME spec defines ClearKey and its method\n     * for providing keys to the key session; and this method has changed\n     * between the various API versions.  Our EME-specific ProtectionModels\n     * must know if the system is ClearKey so that it can format the keys\n     * according to the particular spec version.\n     *\n     * @param {Object} keySystem the key\n     * @returns {boolean} true if this is the ClearKey key system, false\n     * otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function isClearKey(keySystem) {\n        return (keySystem === clearkeyKeySystem || keySystem === clearkeyW3CKeySystem);\n    }\n\n    /**\n     * Check equality of initData array buffers.\n     *\n     * @param {ArrayBuffer} initData1 - first initData\n     * @param {ArrayBuffer} initData2 - second initData\n     * @returns {boolean} true if the initData arrays are equal in size and\n     * contents, false otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function initDataEquals(initData1, initData2) {\n        if (initData1.byteLength === initData2.byteLength) {\n            let data1 = new Uint8Array(initData1);\n            let data2 = new Uint8Array(initData2);\n\n            for (let j = 0; j < data1.length; j++) {\n                if (data1[j] !== data2[j]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        let cp, ks, ksIdx, cpIdx;\n        let supportedKS = [];\n\n        if (cps) {\n            for (ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n                ks = keySystems[ksIdx];\n                for (cpIdx = 0; cpIdx < cps.length; ++cpIdx) {\n                    cp = cps[cpIdx];\n                    if (cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {\n                        // Look for DRM-specific ContentProtection\n                        let initData = ks.getInitData(cp);\n                        if (!!initData) {\n                            supportedKS.push({\n                                ks: keySystems[ksIdx],\n                                initData: initData,\n                                cdmData: ks.getCDMData(),\n                                sessionId: ks.getSessionId(cp)\n                            });\n                        } else if (this.isClearKey(ks)) {\n                            supportedKS.push({\n                                ks: ks,\n                                initData: null\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns key systems supported by this player for the given PSSH\n     * initializationData. Only key systems supported by this player\n     * that have protection data present will be returned.  Key systems are returned in priority order\n     * (highest priority first)\n     *\n     * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs\n     * supported by the content\n     * @param {ProtectionData} protDataSet user specified protection data - license server url etc\n     * supported by the content\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystems(initData, protDataSet) {\n        let supportedKS = [];\n        let pssh = CommonEncryption.parsePSSHList(initData);\n        let ks, keySystemString, shouldNotFilterOutKeySystem;\n\n        for (let ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n            ks = keySystems[ksIdx];\n            keySystemString = ks.systemString;\n            shouldNotFilterOutKeySystem = (protDataSet) ? keySystemString in protDataSet : true;\n\n            if (ks.uuid in pssh && shouldNotFilterOutKeySystem) {\n                supportedKS.push({\n                    ks: ks,\n                    initData: pssh[ks.uuid],\n                    cdmData: ks.getCDMData(),\n                    sessionId: ks.getSessionId()\n                });\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns the license server implementation data that should be used for this request.\n     *\n     * @param {KeySystem} keySystem the key system\n     * associated with this license request\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {string} [messageType=\"license-request\"] the message type associated with this\n     * request.  Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @returns {LicenseServer|null} the license server\n     * implementation that should be used for this request or null if the player should not\n     * pass messages of the given type to a license server\n     * @memberof module:ProtectionKeyController\n     * @instance\n     *\n     */\n    function getLicenseServer(keySystem, protData, messageType) {\n\n        // Our default server implementations do not do anything with \"license-release\" or\n        // \"individualization-request\" messages, so we just send a success event\n        if (messageType === 'license-release' || messageType === 'individualization-request') {\n            return null;\n        }\n\n        let licenseServerData = null;\n        if (protData && protData.hasOwnProperty('drmtoday')) {\n            licenseServerData = DRMToday(context).getInstance({ BASE64: BASE64 });\n        } else if (keySystem.systemString === ProtectionConstants.WIDEVINE_KEYSTEM_STRING) {\n            licenseServerData = Widevine(context).getInstance();\n        } else if (keySystem.systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING) {\n            licenseServerData = PlayReady(context).getInstance();\n        } else if (keySystem.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING) {\n            licenseServerData = ClearKey(context).getInstance();\n        }\n\n        return licenseServerData;\n    }\n\n    /**\n     * Allows application-specific retrieval of ClearKey keys.\n     *\n     * @param {KeySystem} clearkeyKeySystem They exact ClearKey System to be used\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {ArrayBuffer} message the key message from the CDM\n     * @return {ClearKeyKeySet|null} the clear keys associated with\n     * the request or null if no keys can be returned by this function\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function processClearKeyLicenseRequest(clearkeyKeySystem, protData, message) {\n        try {\n            return clearkeyKeySystem.getClearKeysFromProtectionData(protData, message);\n        } catch (error) {\n            logger.error('Failed to retrieve clearkeys from ProtectionData');\n            return null;\n        }\n    }\n\n    function setProtectionData(protectionDataSet) {\n        var getProtectionData = function (keySystemString) {\n            var protData = null;\n            if (protectionDataSet) {\n                protData = (keySystemString in protectionDataSet) ? protectionDataSet[keySystemString] : null;\n            }\n            return protData;\n        };\n\n        for (var i = 0; i < keySystems.length; i++) {\n            var keySystem = keySystems[i];\n            if (keySystem.hasOwnProperty('init')) {\n                keySystem.init(getProtectionData(keySystem.systemString));\n            }\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        setProtectionData: setProtectionData,\n        isClearKey: isClearKey,\n        initDataEquals: initDataEquals,\n        getKeySystems: getKeySystems,\n        getKeySystemBySystemString: getKeySystemBySystemString,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getSupportedKeySystems: getSupportedKeySystems,\n        getLicenseServer: getLicenseServer,\n        processClearKeyLicenseRequest: processClearKeyLicenseRequest,\n        setConfig: setConfig\n    };\n\n    return instance;\n}\n\nProtectionKeyController.__dashjs_factory_name = 'ProtectionKeyController';\nexport default dashjs.FactoryMaker.getSingletonFactory(ProtectionKeyController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = 'e2719d58-a985-b3c9-781a-b030af78d30e';\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemClearKey(config) {\n\n    config = config || {};\n    let instance;\n    const BASE64 = config.BASE64;\n\n    /**\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\n     *\n     * @param {ProtectionData} protectionData the protection data\n     * @param {ArrayBuffer} message the ClearKey CDM message\n     * @returns {ClearKeyKeySet} the key set or null if none found\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\n     * protection data\n     * @memberof KeySystemClearKey\n     */\n    function getClearKeysFromProtectionData(protectionData, message) {\n        let clearkeySet = null;\n        if (protectionData) {\n            // ClearKey is the only system that does not require a license server URL, so we\n            // handle it here when keys are specified in protection data\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n            const keyPairs = [];\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\n                const clearkeyID = jsonMsg.kids[i];\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\n                if (!clearkey) {\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n                }\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\n            }\n            clearkeySet = new ClearKeyKeySet(keyPairs);\n        }\n        return clearkeySet;\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getSessionId(/*cp*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\n    };\n\n    return instance;\n}\n\nKeySystemClearKey.__dashjs_factory_name = 'KeySystemClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemClearKey); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Microsoft PlayReady DRM\n *\n * @class\n * @implements KeySystem\n */\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = '9a04f079-9840-4286-ab92-e65be0885f95';\nconst systemString = ProtectionConstants.PLAYREADY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\nconst PRCDMData = '<PlayReadyCDMData type=\"LicenseAcquisition\"><LicenseAcquisition version=\"1.0\" Proactive=\"false\"><CustomData encoding=\"base64encoded\">%CUSTOMDATA%</CustomData></LicenseAcquisition></PlayReadyCDMData>';\nlet protData;\n\nfunction KeySystemPlayReady(config) {\n\n    config = config || {};\n    let instance;\n    let messageFormat = 'utf16';\n    const BASE64 = config.BASE64;\n\n    function checkConfig() {\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray') || !BASE64.hasOwnProperty('decodeArray') ) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getRequestHeadersFromMessage(message) {\n        let msg,\n            xmlDoc;\n        const headers = {};\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        msg = String.fromCharCode.apply(null, dataview);\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        const headerNameList = xmlDoc.getElementsByTagName('name');\n        const headerValueList = xmlDoc.getElementsByTagName('value');\n        for (let i = 0; i < headerNameList.length; i++) {\n            headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;\n        }\n        // some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\n        // this is NOT w3c conform and license servers may reject the request!\n        // -> rename it to proper w3c definition!\n        if (headers.hasOwnProperty('Content')) {\n            headers['Content-Type'] = headers.Content;\n            delete headers.Content;\n        }\n        // some devices (Ex: LG SmartTVs) require content-type to be defined\n        if (!headers.hasOwnProperty('Content-Type')) {\n            headers['Content-Type'] = 'text/xml; charset=' + messageFormat;\n        }\n        return headers;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        let licenseRequest = null;\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        checkConfig();\n        const msg = String.fromCharCode.apply(null, dataview);\n        const xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        if (xmlDoc.getElementsByTagName('Challenge')[0]) {\n            const Challenge = xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;\n            if (Challenge) {\n                licenseRequest = BASE64.decode(Challenge);\n            }\n        } else if (xmlDoc.getElementsByTagName('parsererror').length) {\n            // In case it is not an XML doc, return the message itself\n            // There are CDM implementations of some devices (example: some smartTVs) that\n            // return directly the challenge without wrapping it in an xml doc\n            return message;\n        }\n\n        return licenseRequest;\n    }\n\n    function getLicenseServerURLFromInitData(initData) {\n        if (initData) {\n            const data = new DataView(initData);\n            const numRecords = data.getUint16(4, true);\n            let offset = 6;\n            const parser = new DOMParser();\n\n            for (let i = 0; i < numRecords; i++) {\n                // Parse the PlayReady Record header\n                const recordType = data.getUint16(offset, true);\n                offset += 2;\n                const recordLength = data.getUint16(offset, true);\n                offset += 2;\n                if (recordType !== 0x0001) {\n                    offset += recordLength;\n                    continue;\n                }\n\n                const recordData = initData.slice(offset, offset + recordLength);\n                const record = String.fromCharCode.apply(null, new Uint16Array(recordData));\n                const xmlDoc = parser.parseFromString(record, 'application/xml');\n\n                // First try <LA_URL>\n                if (xmlDoc.getElementsByTagName('LA_URL')[0]) {\n                    const laurl = xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;\n                    if (laurl) {\n                        return laurl;\n                    }\n                }\n\n                // Optionally, try <LUI_URL>\n                if (xmlDoc.getElementsByTagName('LUI_URL')[0]) {\n                    const luiurl = xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;\n                    if (luiurl) {\n                        return luiurl;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    function getInitData(cpData) {\n        // * desc@ getInitData\n        // *   generate PSSH data from PROHeader defined in MPD file\n        // *   PSSH format:\n        // *   size (4)\n        // *   box type(PSSH) (8)\n        // *   Protection SystemID (16)\n        // *   protection system data size (4) - length of decoded PROHeader\n        // *   decoded PROHeader data from MPD file\n        const PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes\n        const playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\n\n        let byteCursor = 0;\n        let uint8arraydecodedPROHeader = null;\n\n        let PROSize,\n            PSSHSize,\n            PSSHBoxBuffer,\n            PSSHBox,\n            PSSHData;\n\n        checkConfig();\n        // Handle common encryption PSSH\n        if ('pssh' in cpData) {\n            return CommonEncryption.parseInitDataFromContentProtection(cpData, BASE64);\n        }\n        // Handle native MS PlayReady ContentProtection elements\n        if ('pro' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\n        }\n        else if ('prheader' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\n        }\n        else {\n            return null;\n        }\n\n        PROSize = uint8arraydecodedPROHeader.length;\n        PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\n\n        PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\n\n        PSSHBox = new Uint8Array(PSSHBoxBuffer);\n        PSSHData = new DataView(PSSHBoxBuffer);\n\n        PSSHData.setUint32(byteCursor, PSSHSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(PSSHBoxType, byteCursor);\n        byteCursor += PSSHBoxType.length;\n\n        PSSHBox.set(playreadySystemID, byteCursor);\n        byteCursor += playreadySystemID.length;\n\n        PSSHData.setUint32(byteCursor, PROSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\n        byteCursor += PROSize;\n\n        return PSSHBox.buffer;\n    }\n\n    /**\n     * It seems that some PlayReady implementations return their XML-based CDM\n     * messages using UTF16, while others return them as UTF8.  Use this function\n     * to modify the message format to expect when parsing CDM messages.\n     *\n     * @param {string} format the expected message format.  Either \"utf8\" or \"utf16\".\n     * @throws {Error} Specified message format is not one of \"utf8\" or \"utf16\"\n     */\n    function setPlayReadyMessageFormat(format) {\n        if (format !== 'utf8' && format !== 'utf16') {\n            throw new Error('Illegal PlayReady message format! -- ' + format);\n        }\n        messageFormat = format;\n    }\n\n    /**\n     * Initialize the Key system with protection data\n     * @param {Object} protectionData the protection data\n     */\n    function init(protectionData) {\n        if (protectionData) {\n            protData = protectionData;\n        }\n    }\n\n\n    /**\n     * Get Playready Custom data\n     */\n    function getCDMData() {\n        let customData,\n            cdmData,\n            cdmDataBytes,\n            i;\n\n        checkConfig();\n        if (protData && protData.cdmData) {\n            // Convert custom data into multibyte string\n            customData = [];\n            for (i = 0; i < protData.cdmData.length; ++i) {\n                customData.push(protData.cdmData.charCodeAt(i));\n                customData.push(0);\n            }\n            customData = String.fromCharCode.apply(null, customData);\n\n            // Encode in Base 64 the custom data string\n            customData = BASE64.encode(customData);\n\n            // Initialize CDM data with Base 64 encoded custom data\n            // (see https://msdn.microsoft.com/en-us/library/dn457361.aspx)\n            cdmData = PRCDMData.replace('%CUSTOMDATA%', customData);\n\n            // Convert CDM data into multibyte characters\n            cdmDataBytes = [];\n            for (i = 0; i < cdmData.length; ++i) {\n                cdmDataBytes.push(cdmData.charCodeAt(i));\n                cdmDataBytes.push(0);\n            }\n\n            return new Uint8Array(cdmDataBytes).buffer;\n        }\n\n        return null;\n    }\n\n    function getSessionId(cp) {\n        // Get sessionId from protectionData or from manifest\n        if (protData && protData.sessionId) {\n            return protData.sessionId;\n        } else if (cp && cp.sessionId) {\n            return cp.sessionId;\n        }\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        setPlayReadyMessageFormat: setPlayReadyMessageFormat,\n        init: init\n    };\n\n    return instance;\n}\n\nKeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = '1077efec-c0b2-4d02-ace3-3c1e52e2fb4b';\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemW3CClearKey(config) {\n    let instance;\n    const BASE64 = config.BASE64;\n    const logger = config.debug.getLogger(instance);\n    /**\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\n     *\n     * @param {ProtectionData} protectionData the protection data\n     * @param {ArrayBuffer} message the ClearKey CDM message\n     * @returns {ClearKeyKeySet} the key set or null if none found\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\n     * protection data\n     * @memberof KeySystemClearKey\n     */\n    function getClearKeysFromProtectionData(protectionData, message) {\n        let clearkeySet = null;\n        if (protectionData) {\n            // ClearKey is the only system that does not require a license server URL, so we\n            // handle it here when keys are specified in protection data\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n            const keyPairs = [];\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\n                const clearkeyID = jsonMsg.kids[i];\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\n                if (!clearkey) {\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n                }\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\n            }\n            clearkeySet = new ClearKeyKeySet(keyPairs);\n\n            logger.warn('ClearKey schemeIdURI is using W3C Common PSSH systemID (1077efec-c0b2-4d02-ace3-3c1e52e2fb4b) in Content Protection. See DASH-IF IOP v4.1 section 7.6.2.4');\n        }\n        return clearkeySet;\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getSessionId(/*cp*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\n    };\n\n    return instance;\n}\n\nKeySystemW3CClearKey.__dashjs_factory_name = 'KeySystemW3CClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemW3CClearKey); /* jshint ignore:line */\n\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Google Widevine DRM\n *\n * @class\n * @implements MediaPlayer.dependencies.protection.KeySystem\n */\n\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = 'edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\nconst systemString = ProtectionConstants.WIDEVINE_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemWidevine(config) {\n\n    config = config || {};\n    let instance;\n    let protData = null;\n    const BASE64 = config.BASE64;\n\n    function init(protectionData) {\n        if (protectionData) {\n            protData = protectionData;\n        }\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n    }\n\n    function getRequestHeadersFromMessage( /*message*/ ) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData( /*initData*/ ) {\n        return null;\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getSessionId(cp) {\n        // Get sessionId from protectionData or from manifest\n        if (protData && protData.sessionId) {\n            return protData.sessionId;\n        } else if (cp && cp.sessionId) {\n            return cp.sessionId;\n        }\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        init: init,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId\n    };\n\n    return instance;\n}\n\nKeySystemWidevine.__dashjs_factory_name = 'KeySystemWidevine';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemWidevine); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport ErrorsBase from '../../../core/errors/ErrorsBase';\n/**\n * @class\n *\n */\nclass ProtectionErrors extends ErrorsBase {\n\tconstructor () {\n        super();\n\n        /**\n         *  Generid key Error code\n         */\n        this.MEDIA_KEYERR_CODE = 100;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_UNKNOWN_CODE = 101;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_CLIENT_CODE = 102;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_SERVICE_CODE = 103;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_OUTPUT_CODE = 104;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_HARDWARECHANGE_CODE = 105;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_DOMAIN_CODE = 106;\n\n        /**\n         *  Error code returned when an error occured in keymessage event for ProtectionModel_01b\n         */\n        this.MEDIA_KEY_MESSAGE_ERROR_CODE = 107;\n        /**\n         *  Error code returned when challenge is invalid in keymessage event (event triggered by CDM)\n         */\n        this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE = 108;\n        /**\n         *  Error code returned when License server certificate has not been successfully updated\n         */\n        this.SERVER_CERTIFICATE_UPDATED_ERROR_CODE = 109;\n        /**\n         *  Error code returned when license validity has expired\n         */\n        this.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE = 110;\n        /**\n         *  Error code returned when no licenser url is defined\n         */\n        this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE = 111;\n        /**\n         *  Error code returned when key system access is denied\n         */\n        this.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE = 112;\n        /**\n         *  Error code returned when key session has not been successfully created\n         */\n        this.KEY_SESSION_CREATED_ERROR_CODE = 113;\n        /**\n         *  Error code returned when license request failed after a keymessage event has been triggered\n         */\n        this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE = 114;\n\n        this.MEDIA_KEYERR_UNKNOWN_MESSAGE = 'An unspecified error occurred. This value is used for errors that don\\'t match any of the other codes.';\n        this.MEDIA_KEYERR_CLIENT_MESSAGE = 'The Key System could not be installed or updated.';\n        this.MEDIA_KEYERR_SERVICE_MESSAGE = 'The message passed into update indicated an error from the license service.';\n        this.MEDIA_KEYERR_OUTPUT_MESSAGE = 'There is no available output device with the required characteristics for the content protection system.';\n        this.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE = 'A hardware configuration change caused a content protection error.';\n        this.MEDIA_KEYERR_DOMAIN_MESSAGE = 'An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.';\n        this.MEDIA_KEY_MESSAGE_ERROR_MESSAGE = 'Multiple key sessions were creates with a user-agent that does not support sessionIDs!! Unpredictable behavior ahead!';\n        this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE = 'DRM: Empty key message from CDM';\n        this.SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE = 'Error updating server certificate -- ';\n        this.KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE = 'DRM: KeyStatusChange error! -- License has expired';\n        this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE = 'DRM: No license server URL specified!';\n        this.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE = 'DRM: KeySystem Access Denied! -- ';\n        this.KEY_SESSION_CREATED_ERROR_MESSAGE = 'DRM: unable to create session! --';\n        this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE = 'DRM: licenser error! --';\n    }\n}\n\nlet protectionErrors = new ProtectionErrors();\nexport default protectionErrors;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Initial implementation of EME\n *\n * Implemented by Google Chrome prior to v36\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport DashJSError from '../../vo/DashJSError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\nimport ProtectionErrors from '../errors/ProtectionErrors';\n\nfunction ProtectionModel_01b(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const debug = config.debug;\n    const api = config.api;\n    const errHandler = config.errHandler;\n\n    let instance,\n        logger,\n        videoElement,\n        keySystem,\n        protectionKeyController,\n\n        // With this version of the EME APIs, sessionIDs are not assigned to\n        // sessions until the first key message is received.  We are assuming\n        // that in the case of multiple sessions, key messages will be received\n        // in the order that generateKeyRequest() is called.\n        // Holding spot for newly-created sessions until we determine whether or\n        // not the CDM supports sessionIDs\n        pendingSessions,\n\n        // List of sessions that have been initialized.  Only the first position will\n        // be used in the case that the CDM does not support sessionIDs\n        sessions,\n\n        // Not all CDMs support the notion of sessionIDs.  Without sessionIDs\n        // there is no way for us to differentiate between sessions, therefore\n        // we must only allow a single session.  Once we receive the first key\n        // message we can set this flag to determine if more sessions are allowed\n        moreSessionsAllowed,\n\n        // This is our main event handler for all desired HTMLMediaElement events\n        // related to EME.  These events are translated into our API-independent\n        // versions of the same events\n        eventHandler;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        videoElement = null;\n        keySystem = null;\n        pendingSessions = [];\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        if (videoElement) {\n            removeEventListeners();\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            closeKeySession(sessions[i]);\n        }\n        eventBus.trigger(events.TEARDOWN_COMPLETE);\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < pendingSessions.length; i++) {\n            retVal.push(pendingSessions[i].initData);\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        let ve = videoElement;\n        if (!ve) { // Must have a video element to do this capability tests\n            ve = document.createElement('video');\n        }\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\n            const configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                //let audios = configs[configIdx].audioCapabilities;\n                const videos = configs[configIdx].videoCapabilities;\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (ve.canPlayType(videos[videoIdx].contentType, systemString) !== '') {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied! -- No valid audio/video content configurations detected!'});\n        }\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystem = keySystemAccess.keySystem;\n        eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement) {\n            return;\n        }\n\n        // Replacing the previous element\n        if (videoElement) {\n            removeEventListeners();\n\n            // Close any open sessions - avoids memory leak on LG webOS 2016/2017 TVs\n            for (var i = 0; i < sessions.length; i++) {\n                closeKeySession(sessions[i]);\n            }\n            sessions = [];\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.keyerror, eventHandler);\n            videoElement.addEventListener(api.needkey, eventHandler);\n            videoElement.addEventListener(api.keymessage, eventHandler);\n            videoElement.addEventListener(api.keyadded, eventHandler);\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n        }\n    }\n\n    function createKeySession(initData /*, protData, keySystemType */) {\n        if (!keySystem) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Determine if creating a new session is allowed\n        if (moreSessionsAllowed || sessions.length === 0) {\n            const newSession = { // Implements SessionToken\n                sessionID: null,\n                initData: initData,\n                getSessionID: function () {\n                    return this.sessionID;\n                },\n\n                getExpirationTime: function () {\n                    return NaN;\n                },\n\n                getSessionType: function () {\n                    return 'temporary';\n                }\n            };\n            pendingSessions.push(newSession);\n\n            // Send our request to the CDM\n            videoElement[api.generateKeyRequest](keySystem.systemString, new Uint8Array(initData));\n\n            return newSession;\n\n        } else {\n            throw new Error('Multiple sessions not allowed!');\n        }\n\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const sessionID = sessionToken.sessionID;\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the CDM\n            videoElement[api.addKey](keySystem.systemString,\n                new Uint8Array(message), new Uint8Array(sessionToken.initData), sessionID);\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            for (let i = 0; i < message.keyPairs.length; i++) {\n                videoElement[api.addKey](keySystem.systemString,\n                    message.keyPairs[i].key, message.keyPairs[i].keyID, sessionID);\n            }\n        }\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the CDM\n        try {\n            videoElement[api.cancelKeyRequest](keySystem.systemString, sessionToken.sessionID);\n        } catch (error) {\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {data: null, error: 'Error closing session (' + sessionToken.sessionID + ') ' + error.message});\n        }\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                let sessionToken = null;\n                switch (event.type) {\n                    case api.needkey:\n                        let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                        eventBus.trigger(events.NEED_KEY, {key: new NeedKey(initData, 'cenc')});\n                        break;\n\n                    case api.keyerror:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            let code = ProtectionErrors.MEDIA_KEYERR_CODE;\n                            let msg = '';\n                            switch (event.errorCode.code) {\n                                case 1:\n                                    code = ProtectionErrors.MEDIA_KEYERR_UNKNOWN_CODE;\n                                    msg += 'MEDIA_KEYERR_UNKNOWN - ' + ProtectionErrors.MEDIA_KEYERR_UNKNOWN_MESSAGE;\n                                    break;\n                                case 2:\n                                    code = ProtectionErrors.MEDIA_KEYERR_CLIENT_CODE;\n                                    msg += 'MEDIA_KEYERR_CLIENT - ' + ProtectionErrors.MEDIA_KEYERR_CLIENT_MESSAGE;\n                                    break;\n                                case 3:\n                                    code = ProtectionErrors.MEDIA_KEYERR_SERVICE_CODE;\n                                    msg += 'MEDIA_KEYERR_SERVICE - ' + ProtectionErrors.MEDIA_KEYERR_SERVICE_MESSAGE;\n                                    break;\n                                case 4:\n                                    code = ProtectionErrors.MEDIA_KEYERR_OUTPUT_CODE;\n                                    msg += 'MEDIA_KEYERR_OUTPUT - ' + ProtectionErrors.MEDIA_KEYERR_OUTPUT_MESSAGE;\n                                    break;\n                                case 5:\n                                    code = ProtectionErrors.MEDIA_KEYERR_HARDWARECHANGE_CODE;\n                                    msg += 'MEDIA_KEYERR_HARDWARECHANGE - ' + ProtectionErrors.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE;\n                                    break;\n                                case 6:\n                                    code = ProtectionErrors.MEDIA_KEYERR_DOMAIN_CODE;\n                                    msg += 'MEDIA_KEYERR_DOMAIN - ' + ProtectionErrors.MEDIA_KEYERR_DOMAIN_MESSAGE;\n                                    break;\n                            }\n                            msg += '  System Code = ' + event.systemCode;\n                            // TODO: Build error string based on key error\n                            eventBus.trigger(events.KEY_ERROR, {data: new DashJSError(code, msg, sessionToken)});\n                        } else {\n                            logger.error('No session token found for key error');\n                        }\n                        break;\n\n                    case api.keyadded:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            logger.debug('DRM: Key added.');\n                            eventBus.trigger(events.KEY_ADDED, {data: sessionToken});//TODO not sure anything is using sessionToken? why there?\n                        } else {\n                            logger.debug('No session token found for key added');\n                        }\n                        break;\n\n                    case api.keymessage:\n                        // If this CDM does not support session IDs, we will be limited\n                        // to a single session\n                        moreSessionsAllowed = (event.sessionId !== null) && (event.sessionId !== undefined);\n\n                        // SessionIDs supported\n                        if (moreSessionsAllowed) {\n                            // Attempt to find an uninitialized token with this sessionID\n                            sessionToken = findSessionByID(sessions, event.sessionId);\n                            if (!sessionToken && pendingSessions.length > 0) {\n\n                                // This is the first message for our latest session, so set the\n                                // sessionID and add it to our list\n                                sessionToken = pendingSessions.shift();\n                                sessions.push(sessionToken);\n                                sessionToken.sessionID = event.sessionId;\n\n                                eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\n                            }\n                        } else if (pendingSessions.length > 0) { // SessionIDs not supported\n                            sessionToken = pendingSessions.shift();\n                            sessions.push(sessionToken);\n\n                            if (pendingSessions.length !== 0) {\n                                errHandler.mediaKeyMessageError(ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_MESSAGE);\n                                errHandler.error(new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_MESSAGE));\n                            }\n                        }\n\n                        if (sessionToken) {\n                            let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n\n                            // For ClearKey, the spec mandates that you pass this message to the\n                            // addKey method, so we always save it to the token since there is no\n                            // way to tell which key system is in use\n                            sessionToken.keyMessage = message;\n                            eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {data: new KeyMessage(sessionToken, message, event.defaultURL)});\n\n                        } else {\n                            logger.warn('No session token found for key message');\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    /**\n     * Helper function to retrieve the stored session token based on a given\n     * sessionID value\n     *\n     * @param {Array} sessionArray - the array of sessions to search\n     * @param {*} sessionID - the sessionID to search for\n     * @returns {*} the session token with the given sessionID\n     */\n    function findSessionByID(sessionArray, sessionID) {\n        if (!sessionID || !sessionArray) {\n            return null;\n        } else {\n            const len = sessionArray.length;\n            for (let i = 0; i < len; i++) {\n                if (sessionArray[i].sessionID == sessionID) {\n                    return sessionArray[i];\n                }\n            }\n            return null;\n        }\n    }\n\n    function removeEventListeners() {\n        videoElement.removeEventListener(api.keyerror, eventHandler);\n        videoElement.removeEventListener(api.needkey, eventHandler);\n        videoElement.removeEventListener(api.keymessage, eventHandler);\n        videoElement.removeEventListener(api.keyadded, eventHandler);\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        stop: reset,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_01b.__dashjs_factory_name = 'ProtectionModel_01b';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_01b); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Most recent EME implementation\n *\n * Implemented by Google Chrome v36+ (Windows, OSX, Linux)\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport ProtectionErrors from '../errors/ProtectionErrors';\nimport DashJSError from '../../vo/DashJSError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemAccess from '../vo/KeySystemAccess';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nfunction ProtectionModel_21Jan2015(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const debug = config.debug;\n\n    let instance,\n        logger,\n        keySystem,\n        videoElement,\n        mediaKeys,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        keySystem = null;\n        videoElement = null;\n        mediaKeys = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        const numSessions = sessions.length;\n        let session;\n\n        if (numSessions !== 0) {\n            // Called when we are done closing a session.  Success or fail\n            const done = function (session) {\n                removeSession(session);\n                if (sessions.length === 0) {\n                    if (videoElement) {\n                        videoElement.removeEventListener('encrypted', eventHandler);\n                        videoElement.setMediaKeys(null).then(function () {\n                            eventBus.trigger(events.TEARDOWN_COMPLETE);\n                        });\n                    } else {\n                        eventBus.trigger(events.TEARDOWN_COMPLETE);\n                    }\n                }\n            };\n            for (let i = 0; i < numSessions; i++) {\n                session = sessions[i];\n                (function (s) {\n                    // Override closed promise resolver\n                    session.session.closed.then(function () {\n                        done(s);\n                    });\n                    // Close the session and handle errors, otherwise promise\n                    // resolver above will be called\n                    closeKeySessionInternal(session).catch(function () {\n                        done(s);\n                    });\n\n                })(session);\n            }\n        } else {\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\n        }\n    }\n\n    function stop() {\n        // Close and remove not usable sessions\n        let session;\n        for (let i = 0; i < sessions.length; i++) {\n            session = sessions[i];\n            if (!session.getUsable()) {\n                closeKeySessionInternal(session).catch(function () {\n                    removeSession(session);\n                });\n            }\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i].initData) {\n                retVal.push(sessions[i].initData);\n            }\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        requestKeySystemAccessInternal(ksConfigurations, 0);\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystemAccess.mksa.createMediaKeys().then(function (mkeys) {\n            keySystem = keySystemAccess.keySystem;\n            mediaKeys = mkeys;\n            if (videoElement) {\n                videoElement.setMediaKeys(mediaKeys).then(function () {\n                    eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n                });\n            } else {\n                eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n            }\n\n        }).catch(function () {\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, {error: 'Error selecting keys system (' + keySystemAccess.keySystem.systemString + ')! Could not create MediaKeys -- TODO'});\n        });\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener('encrypted', eventHandler);\n            if (videoElement.setMediaKeys) {\n                videoElement.setMediaKeys(null);\n            }\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener('encrypted', eventHandler);\n            if (videoElement.setMediaKeys && mediaKeys) {\n                videoElement.setMediaKeys(mediaKeys);\n            }\n        }\n    }\n\n    function setServerCertificate(serverCertificate) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not set server certificate until you have selected a key system');\n        }\n        mediaKeys.setServerCertificate(serverCertificate).then(function () {\n            logger.info('DRM: License server certificate successfully updated.');\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED);\n        }).catch(function (error) {\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED, {error: new DashJSError(ProtectionErrors.SERVER_CERTIFICATE_UPDATED_ERROR_CODE, ProtectionErrors.SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE + error.name)});\n        });\n    }\n\n    function createKeySession(initData, protData, sessionType) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        const session = mediaKeys.createSession(sessionType);\n        const sessionToken = createSessionToken(session, initData, sessionType);\n        const ks = this.getKeySystem();\n\n        // Generate initial key request.\n        // keyids type is used for clearkey when keys are provided directly in the protection data and then request to a license server is not needed\n        const dataType = ks.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING && protData && protData.clearkeys ? 'keyids' : 'cenc';\n        session.generateRequest(dataType, initData).then(function () {\n            logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\n        }).catch(function (error) {\n            // TODO: Better error string\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Error generating key request -- ' + error.name)});\n        });\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const session = sessionToken.session;\n\n        // Send our request to the key session\n        if (protectionKeyController.isClearKey(keySystem)) {\n            message = message.toJWK();\n        }\n        session.update(message).catch(function (error) {\n            eventBus.trigger(events.KEY_ERROR, {data: new DashJSError(ProtectionErrors.MEDIA_KEYERR_CODE, 'Error sending update() message! ' + error.name, sessionToken)});\n        });\n    }\n\n    function loadKeySession(sessionID, initData, sessionType) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not load sessions until you have selected a key system');\n        }\n\n        // Check if session Id is not already loaded or loading\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessionID === sessions[i].sessionId) {\n                logger.warn('DRM: Ignoring session ID because we have already seen it!');\n                return;\n            }\n        }\n\n        const session = mediaKeys.createSession(sessionType);\n        const sessionToken = createSessionToken(session, initData, sessionType, sessionID);\n\n        // Load persisted session data into our newly created session object\n        session.load(sessionID).then(function (success) {\n            if (success) {\n                logger.debug('DRM: Session loaded.  SessionID = ' + sessionToken.getSessionID());\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\n            } else {\n                removeSession(sessionToken);\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session! Invalid Session ID (' + sessionID + ')')});\n            }\n        }).catch(function (error) {\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session (' + sessionID + ')! ' + error.name)});\n        });\n    }\n\n    function removeKeySession(sessionToken) {\n        const session = sessionToken.session;\n\n        session.remove().then(function () {\n            logger.debug('DRM: Session removed.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_REMOVED, {data: sessionToken.getSessionID()});\n        }, function (error) {\n            eventBus.trigger(events.KEY_SESSION_REMOVED, {data: null, error: 'Error removing session (' + sessionToken.getSessionID() + '). ' + error.name});\n\n        });\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the key session\n        closeKeySessionInternal(sessionToken).catch(function (error) {\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {data: null, error: 'Error closing session (' + sessionToken.getSessionID() + ') ' + error.name});\n        });\n    }\n\n    function requestKeySystemAccessInternal(ksConfigurations, idx) {\n\n        if (navigator.requestMediaKeySystemAccess === undefined ||\n            typeof navigator.requestMediaKeySystemAccess !== 'function') {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Insecure origins are not allowed'});\n            return;\n        }\n\n        (function (i) {\n            const keySystem = ksConfigurations[i].ks;\n            const configs = ksConfigurations[i].configs;\n            let systemString = keySystem.systemString;\n\n            // PATCH to support persistent licenses on Edge browser (see issue #2658)\n            if (systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING && configs[0].persistentState === 'required') {\n                systemString += '.recommendation';\n            }\n\n            navigator.requestMediaKeySystemAccess(systemString, configs).then(function (mediaKeySystemAccess) {\n                // Chrome 40 does not currently implement MediaKeySystemAccess.getConfiguration()\n                const configuration = (typeof mediaKeySystemAccess.getConfiguration === 'function') ?\n                        mediaKeySystemAccess.getConfiguration() : null;\n                const keySystemAccess = new KeySystemAccess(keySystem, configuration);\n                keySystemAccess.mksa = mediaKeySystemAccess;\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {data: keySystemAccess});\n\n            }).catch(function (error) {\n                if (++i < ksConfigurations.length) {\n                    requestKeySystemAccessInternal(ksConfigurations, i);\n                } else {\n                    eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied! ' + error.message});\n                }\n            });\n        })(idx);\n    }\n\n    function closeKeySessionInternal(sessionToken) {\n        const session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener('keystatuseschange', sessionToken);\n        session.removeEventListener('message', sessionToken);\n\n        // Send our request to the key session\n        return session.close();\n    }\n\n    // This is our main event handler for all desired HTMLMediaElement events\n    // related to EME.  These events are translated into our API-independent\n    // versions of the same events\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case 'encrypted':\n                        if (event.initData) {\n                            let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(events.NEED_KEY, {key: new NeedKey(initData, event.initDataType)});\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n    function removeSession(token) {\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === token) {\n                sessions.splice(i,1);\n                break;\n            }\n        }\n    }\n\n    function parseKeyStatus(args) {\n        // Edge and Chrome implement different version of keystatues, param are not on same order\n        let status, keyId;\n        if (args && args.length > 0) {\n            if (args[0]) {\n                if (typeof args[0] === 'string') {\n                    status = args[0];\n                } else {\n                    keyId = args[0];\n                }\n            }\n\n            if (args[1]) {\n                if (typeof args[1] === 'string') {\n                    status = args[1];\n                } else {\n                    keyId = args[1];\n                }\n            }\n        }\n        return {\n            status: status,\n            keyId: keyId\n        };\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(session, initData, sessionType, sessionID) {\n        const token = { // Implements SessionToken\n            session: session,\n            initData: initData,\n            sessionId: sessionID,\n\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case 'keystatuseschange':\n                        eventBus.trigger(events.KEY_STATUSES_CHANGED, {data: this});\n                        event.target.keyStatuses.forEach(function () {\n                            let keyStatus = parseKeyStatus(arguments);\n                            switch (keyStatus.status) {\n                                case 'expired':\n                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, {error: new DashJSError(ProtectionErrors.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE, ProtectionErrors.KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE)});\n                                    break;\n                                default:\n                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, keyStatus);\n                                    break;\n                            }\n                        });\n                        break;\n\n                    case 'message':\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {data: new KeyMessage(this, message, undefined, event.messageType)});\n                        break;\n                }\n            },\n\n            getSessionID: function () {\n                return session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return session.expiration;\n            },\n\n            getKeyStatuses: function () {\n                return session.keyStatuses;\n            },\n\n            getUsable: function () {\n                let usable  = false;\n                session.keyStatuses.forEach(function () {\n                    let keyStatus = parseKeyStatus(arguments);\n                    if (keyStatus.status === 'usable') {\n                        usable = true;\n                    }\n                });\n                return usable;\n            },\n\n            getSessionType: function () {\n                return sessionType;\n            }\n        };\n\n        // Add all event listeners\n        session.addEventListener('keystatuseschange', token);\n        session.addEventListener('message', token);\n\n        // Register callback for session closed Promise\n        session.closed.then(function () {\n            removeSession(token);\n            logger.debug('DRM: Session closed.  SessionID = ' + token.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {data: token.getSessionID()});\n        });\n\n        // Add to our session list\n        sessions.push(token);\n\n        return token;\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        setServerCertificate: setServerCertificate,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        stop: stop,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_21Jan2015.__dashjs_factory_name = 'ProtectionModel_21Jan2015';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_21Jan2015); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Implementation of the EME APIs as of the 3 Feb 2014 state of the specification.\n *\n * Implemented by Internet Explorer 11 (Windows 8.1)\n *\n * @implements ProtectionModel\n * @class\n */\n\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport DashJSError from '../../vo/DashJSError';\nimport ProtectionErrors from '../errors/ProtectionErrors';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\n\nfunction ProtectionModel_3Feb2014(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const debug = config.debug;\n    const api = config.api;\n\n    let instance,\n        logger,\n        videoElement,\n        keySystem,\n        mediaKeys,\n        keySystemAccess,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        videoElement = null;\n        keySystem = null;\n        mediaKeys = null;\n        keySystemAccess = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        try {\n            for (let i = 0; i < sessions.length; i++) {\n                closeKeySession(sessions[i]);\n            }\n            if (videoElement) {\n                videoElement.removeEventListener(api.needkey, eventHandler);\n            }\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\n        } catch (error) {\n            eventBus.trigger(events.TEARDOWN_COMPLETE, { error: 'Error tearing down key sessions and MediaKeys! -- ' + error.message });\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\n            const configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                const audios = configs[configIdx].audioCapabilities;\n                const videos = configs[configIdx].videoCapabilities;\n\n                // Look for supported audio container/codecs\n                if (audios && audios.length !== 0) {\n                    supportedAudio = []; // Indicates that we have a requested audio config\n                    for (let audioIdx = 0; audioIdx < audios.length; audioIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, audios[audioIdx].contentType)) {\n                            supportedAudio.push(audios[audioIdx]);\n                        }\n                    }\n                }\n\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, videos[videoIdx].contentType)) {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! -- No valid audio/video content configurations detected!' });\n        }\n    }\n\n    function selectKeySystem(ksAccess) {\n        try {\n            mediaKeys = ksAccess.mediaKeys = new window[api.MediaKeys](ksAccess.keySystem.systemString);\n            keySystem = ksAccess.keySystem;\n            keySystemAccess = ksAccess;\n            if (videoElement) {\n                setMediaKeys();\n            }\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n        } catch (error) {\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, { error: 'Error selecting keys system (' + keySystem.systemString + ')! Could not create MediaKeys -- TODO' });\n        }\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener(api.needkey, eventHandler);\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.needkey, eventHandler);\n            if (mediaKeys) {\n                setMediaKeys();\n            }\n        }\n    }\n\n    function createKeySession(initData, protData, sessionType, cdmData) {\n        if (!keySystem || !mediaKeys || !keySystemAccess) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Use the first video capability for the contentType.\n        // TODO:  Not sure if there is a way to concatenate all capability data into a RFC6386-compatible format\n\n        // If player is trying to playback Audio only stream - don't error out.\n        let capabilities = null;\n\n        if (keySystemAccess.ksConfiguration.videoCapabilities && keySystemAccess.ksConfiguration.videoCapabilities.length > 0) {\n            capabilities = keySystemAccess.ksConfiguration.videoCapabilities[0];\n        }\n\n        if (capabilities === null && keySystemAccess.ksConfiguration.audioCapabilities && keySystemAccess.ksConfiguration.audioCapabilities.length > 0) {\n            capabilities = keySystemAccess.ksConfiguration.audioCapabilities[0];\n        }\n\n        if (capabilities === null) {\n            throw new Error('Can not create sessions for unknown content types.');\n        }\n\n        const contentType = capabilities.contentType;\n        const session = mediaKeys.createSession(contentType, new Uint8Array(initData), cdmData ? new Uint8Array(cdmData) : null);\n        const sessionToken = createSessionToken(session, initData);\n\n        // Add all event listeners\n        session.addEventListener(api.error, sessionToken);\n        session.addEventListener(api.message, sessionToken);\n        session.addEventListener(api.ready, sessionToken);\n        session.addEventListener(api.close, sessionToken);\n\n        // Add to our session list\n        sessions.push(sessionToken);\n        logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n        eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const session = sessionToken.session;\n\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the key session\n            session.update(new Uint8Array(message));\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            session.update(new Uint8Array(message.toJWK()));\n        }\n    }\n\n    /**\n     * Close the given session and release all associated keys.  Following\n     * this call, the sessionToken becomes invalid\n     *\n     * @param {Object} sessionToken - the session token\n     */\n    function closeKeySession(sessionToken) {\n        const session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener(api.error, sessionToken);\n        session.removeEventListener(api.message, sessionToken);\n        session.removeEventListener(api.ready, sessionToken);\n        session.removeEventListener(api.close, sessionToken);\n\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === sessionToken) {\n                sessions.splice(i, 1);\n                break;\n            }\n        }\n\n        // Send our request to the key session\n        session[api.release]();\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n\n                    case api.needkey:\n                        if (event.initData) {\n                            const initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, 'cenc') });\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    // IE11 does not let you set MediaKeys until it has entered a certain\n    // readyState, so we need this logic to ensure we don't set the keys\n    // too early\n    function setMediaKeys() {\n        let boundDoSetKeys = null;\n        const doSetKeys = function () {\n            videoElement.removeEventListener('loadedmetadata', boundDoSetKeys);\n            videoElement[api.setMediaKeys](mediaKeys);\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n        };\n        if (videoElement.readyState >= 1) {\n            doSetKeys();\n        } else {\n            boundDoSetKeys = doSetKeys.bind(this);\n            videoElement.addEventListener('loadedmetadata', boundDoSetKeys);\n        }\n\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(keySession, initData) {\n        return {\n            // Implements SessionToken\n            session: keySession,\n            initData: initData,\n\n            getSessionID: function () {\n                return this.session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return NaN;\n            },\n\n            getSessionType: function () {\n                return 'temporary';\n            },\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case api.error:\n                        let errorStr = 'KeyError'; // TODO: Make better string from event\n                        eventBus.trigger(events.KEY_ERROR, { data: new DashJSError(ProtectionErrors.MEDIA_KEYERR_CODE, errorStr, this) });\n                        break;\n                    case api.message:\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(this, message, event.destinationURL) });\n                        break;\n                    case api.ready:\n                        logger.debug('DRM: Key added.');\n                        eventBus.trigger(events.KEY_ADDED);\n                        break;\n\n                    case api.close:\n                        logger.debug('DRM: Session closed.  SessionID = ' + this.getSessionID());\n                        eventBus.trigger(events.KEY_SESSION_CLOSED, { data: this.getSessionID() });\n                        break;\n                }\n            }\n        };\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        stop: reset,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_3Feb2014.__dashjs_factory_name = 'ProtectionModel_3Feb2014';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_3Feb2014); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CableLabs ClearKey license server implementation\n *\n * For testing purposes and evaluating potential uses for ClearKey, we have developed\n * a dirt-simple API for requesting ClearKey licenses from a remote server.\n *\n * @implements LicenseServer\n * @class\n */\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\n\nfunction ClearKey() {\n\n    let instance;\n\n    function getServerURLFromMessage(url, message/*, messageType*/) {\n        // Build ClearKey server query string\n        const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n        url += '/?';\n        for (let i = 0; i < jsonMsg.kids.length; i++) {\n            url += jsonMsg.kids[i] + '&';\n        }\n        url = url.substring(0, url.length - 1);\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'GET';\n    }\n\n    function getResponseType(/*keySystemStr*/) {\n        return 'json';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        if (!serverResponse.hasOwnProperty('keys')) {\n            return null;\n        }\n        let keyPairs = [];\n        for (let i = 0; i < serverResponse.keys.length; i++) {\n            let keypair = serverResponse.keys[i];\n            let keyid = keypair.kid.replace(/=/g, '');\n            let key = keypair.k.replace(/=/g, '');\n\n            keyPairs.push(new KeyPair(keyid, key));\n        }\n        return new ClearKeyKeySet(keyPairs);\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nClearKey.__dashjs_factory_name = 'ClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(ClearKey); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CastLabs DRMToday License Server implementation\n *\n * @implements LicenseServer\n * @class\n */\n\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nfunction DRMToday(config) {\n\n    config = config || {};\n    const BASE64 = config.BASE64;\n\n    const keySystems = {};\n    keySystems[ProtectionConstants.WIDEVINE_KEYSTEM_STRING] = {\n        responseType: 'json',\n        getLicenseMessage: function (response) {\n            return BASE64.decodeArray(response.license);\n        },\n        getErrorResponse: function (response) {\n            return response;\n        }\n    };\n    keySystems[ProtectionConstants.PLAYREADY_KEYSTEM_STRING] = {\n        responseType: 'arraybuffer',\n        getLicenseMessage: function (response) {\n            return response;\n        },\n        getErrorResponse: function (response) {\n            return String.fromCharCode.apply(null, new Uint8Array(response));\n        }\n    };\n\n    let instance;\n\n    function checkConfig() {\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].responseType;\n    }\n\n    function getLicenseMessage(serverResponse, keySystemStr/*, messageType*/) {\n        checkConfig();\n        return keySystems[keySystemStr].getLicenseMessage(serverResponse);\n    }\n\n    function getErrorResponse(serverResponse, keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].getErrorResponse(serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nDRMToday.__dashjs_factory_name = 'DRMToday';\nexport default dashjs.FactoryMaker.getSingletonFactory(DRMToday); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global escape: true */\n\n/**\n * Microsoft PlayReady Test License Server\n *\n * For testing content that uses the PlayReady test server at\n *\n * @implements LicenseServer\n * @class\n */\n\nfunction PlayReady() {\n\n    let instance;\n\n    const soap = 'http://schemas.xmlsoap.org/soap/envelope/';\n\n    function uintToString(arrayBuffer) {\n        const encodedString = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));\n        const decodedString = decodeURIComponent(escape(encodedString));\n        return decodedString;\n    }\n\n    function parseServerResponse(serverResponse) {\n        if (window.DOMParser) {\n            const stringResponse = uintToString(serverResponse);\n            const parser = new window.DOMParser();\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n\n            if (fault) {\n                return null;\n            }\n        }\n        return serverResponse;\n    }\n\n    function parseErrorResponse(serverResponse) {\n        let faultstring = '';\n        let statusCode = '';\n        let message = '';\n        let idStart = -1;\n        let idEnd = -1;\n\n        if (window.DOMParser) {\n            const stringResponse = uintToString(serverResponse);\n            const parser = new window.DOMParser();\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n            const detail = fault ? fault.getElementsByTagName('detail')[0] : null;\n            const exception = detail ? detail.getElementsByTagName('Exception')[0] : null;\n            let node = null;\n\n            if (fault === null) {\n                return stringResponse;\n            }\n\n            node = fault.getElementsByTagName('faultstring')[0].firstChild;\n            faultstring = node ? node.nodeValue : null;\n\n            if (exception !== null) {\n                node = exception.getElementsByTagName('StatusCode')[0];\n                statusCode = node ? node.firstChild.nodeValue : null;\n                node = exception.getElementsByTagName('Message')[0];\n                message = node ? node.firstChild.nodeValue : null;\n                idStart = message ? message.lastIndexOf('[') + 1 : -1;\n                idEnd = message ? message.indexOf(']') : -1;\n                message = message ? message.substring(idStart, idEnd) : '';\n            }\n        }\n\n        let errorString = `code: ${statusCode}, name: ${faultstring}`;\n        if (message) {\n            errorString += `, message: ${message}`;\n        }\n\n        return errorString;\n    }\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return parseServerResponse.call(this, serverResponse);\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return parseErrorResponse.call(this, serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nPlayReady.__dashjs_factory_name = 'PlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(PlayReady); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nfunction Widevine() {\n\n    let instance;\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return serverResponse;\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nWidevine.__dashjs_factory_name = 'Widevine';\nexport default dashjs.FactoryMaker.getSingletonFactory(Widevine); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc A collection of ClearKey encryption keys with an (optional) associated\n *  type\n * @ignore\n */\nclass ClearKeyKeySet {\n    /**\n     * @param {Array.<KeyPair>} keyPairs\n     * @param {string} type the type of keys in this set.  One of either 'persistent'\n     * or 'temporary'.  Can also be null or undefined.\n     * @class\n     * @ignore\n     */\n    constructor(keyPairs, type) {\n        if (type && type !== 'persistent' && type !== 'temporary')\n            throw new Error('Invalid ClearKey key set type!  Must be one of \\'persistent\\' or \\'temporary\\'');\n        this.keyPairs = keyPairs;\n        this.type = type;\n    }\n\n    /**\n     * Convert this key set to its JSON Web Key (JWK) representation\n     *\n     * @return {ArrayBuffer} JWK object UTF-8 encoded as ArrayBuffer\n     */\n    toJWK() {\n        let i;\n        let numKeys = this.keyPairs.length;\n        let jwk = {keys: []};\n\n        for (i = 0; i < numKeys; i++) {\n            let key = {\n                kty: 'oct',\n                alg: 'A128KW',\n                kid: this.keyPairs[i].keyID,\n                k: this.keyPairs[i].key\n            };\n            jwk.keys.push(key);\n        }\n        if (this.type) {\n            jwk.type = this.type;\n        }\n        let jwkString = JSON.stringify(jwk);\n        const len = jwkString.length;\n\n        // Convert JSON string to ArrayBuffer\n        let buf = new ArrayBuffer(len);\n        let bView = new Uint8Array(buf);\n        for (i = 0; i < len; i++)\n            bView[i] = jwkString.charCodeAt(i);\n        return buf;\n    }\n}\n\nexport default ClearKeyKeySet;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc EME-independent KeyMessage\n * @ignore\n */\nclass KeyMessage {\n    /**\n     * @param {SessionToken} sessionToken the session\n     * to which the key message is associated\n     * @param {ArrayBuffer} message the key message\n     * @param {string} defaultURL license acquisition URL provided by the CDM\n     * @param {string} messageType Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @class\n     */\n    constructor(sessionToken, message, defaultURL, messageType) {\n        this.sessionToken = sessionToken;\n        this.message = message;\n        this.defaultURL = defaultURL;\n        this.messageType = messageType ? messageType : 'license-request';\n    }\n}\n\nexport default KeyMessage;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Represents a 128-bit keyID and 128-bit encryption key\n * @ignore\n */\nclass KeyPair {\n    /**\n     * @param {string} keyID 128-bit key ID, base64 encoded, with no padding\n     * @param {string} key 128-bit encryption key, base64 encoded, with no padding\n     * @class\n     * @ignore\n     */\n    constructor(keyID, key) {\n        this.keyID = keyID;\n        this.key = key;\n    }\n}\n\nexport default KeyPair;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Creates a new key system access token.  Represents a valid key system for\n * given piece of content and key system requirements.  Used to initialize license\n * acquisition operations.\n * @ignore\n */\nclass KeySystemAccess {\n    /**\n     * @param {MediaPlayer.dependencies.protection.KeySystem} keySystem the key system\n     * @param {KeySystemConfiguration} ksConfiguration the\n     * subset of configurations passed to the key system access request that are supported\n     * by this user agent\n     * @class\n     * @ignore\n     */\n    constructor(keySystem, ksConfiguration) {\n        this.keySystem = keySystem;\n        this.ksConfiguration = ksConfiguration;\n    }\n}\n\nexport default KeySystemAccess;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc Represents a set of configurations that describe the capabilities desired for\n *  support by a given CDM\n * @ignore\n */\nclass KeySystemConfiguration {\n    /**\n     * @param {Array.<MediaCapability>} audioCapabilities array of\n     * desired audio capabilities.  Higher preference capabilities should be placed earlier\n     * in the array.\n     * @param {Array.<MediaCapability>} videoCapabilities array of\n     * desired video capabilities.  Higher preference capabilities should be placed earlier\n     * in the array.\n     * @param {string} distinctiveIdentifier desired use of distinctive identifiers.\n     * One of \"required\", \"optional\", or \"not-allowed\"\n     * @param {string} persistentState desired support for persistent storage of\n     * key systems.  One of \"required\", \"optional\", or \"not-allowed\"\n     * @param {Array.<string>} sessionTypes List of session types that must\n     * be supported by the key system\n     * @class\n     */\n    constructor(audioCapabilities, videoCapabilities, distinctiveIdentifier, persistentState, sessionTypes) {\n        this.initDataTypes = [ 'cenc' ];\n        if (audioCapabilities && audioCapabilities.length) {\n            this.audioCapabilities = audioCapabilities;\n        }\n        if (videoCapabilities && videoCapabilities.length) {\n            this.videoCapabilities = videoCapabilities;\n        }\n        this.distinctiveIdentifier = distinctiveIdentifier;\n        this.persistentState = persistentState;\n        this.sessionTypes = sessionTypes;\n    }\n}\n\nexport default KeySystemConfiguration;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc A media capability\n * @ignore\n */\nclass MediaCapability {\n    /**\n     * @param {string} contentType MIME type and codecs (RFC6386)\n     * @param {string} robustness\n     * @class\n     * @ignore\n     */\n    constructor(contentType, robustness) {\n        this.contentType = contentType;\n        this.robustness = robustness;\n    }\n}\n\nexport default MediaCapability;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc NeedKey\n * @ignore\n */\nclass NeedKey {\n    /**\n     * @param {ArrayBuffer} initData the initialization data\n     * @param {string} initDataType initialization data type\n     * @class\n     */\n    constructor(initData, initDataType) {\n        this.initData = initData;\n        this.initDataType = initDataType;\n    }\n}\n\nexport default NeedKey;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass DashJSError {\n    constructor(code, message, data) {\n        this.code = code || null;\n        this.message = message || null;\n        this.data = data || null;\n    }\n}\n\nexport default DashJSError;"]}