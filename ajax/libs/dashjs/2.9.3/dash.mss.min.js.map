{"version":3,"sources":["../node_modules/grunt-browserify/node_modules/browser-pack/_prelude.js","core/errors/ErrorsBase.js","core/events/EventsBase.js","mss/MssEvents.js","mss/MssFragmentInfoController.js","mss/MssFragmentMoofProcessor.js","mss/MssFragmentMoovProcessor.js","mss/MssFragmentProcessor.js","mss/MssHandler.js","mss/errors/MssErrors.js","mss/index.js","mss/parser/MssParser.js","streaming/MediaPlayerEvents.js","streaming/vo/DashJSError.js","streaming/vo/DataChunk.js","streaming/vo/FragmentRequest.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","_dereq_","module","ErrorsBase","errors","config","override","publicOnly","err","hasOwnProperty","this","indexOf","EventsBase","events","evt","MssEvents","_EventsBase","_get","Object","getPrototypeOf","prototype","FRAGMENT_INFO_LOADING_COMPLETED","mssEvents","MssFragmentInfoController","setup","logger","debug","getLogger","instance","initialize","started","startTime","startFragmentTime","streamProcessor","registerExternalController","type","getType","fragmentModel","getFragmentModel","doStart","eventBus","on","_MssEvents2","onFragmentInfoLoadedCompleted","Date","getTime","index","loadNextFragmentInfo","doStop","off","clearTimeout","bufferTimeout","reset","unregisterExternalController","representation","getCurrentRepresentation","manifest","adaptation","period","mpd","Period_asArray","AdaptationSet_asArray","segments","SegmentTemplate","SegmentTimeline","S_asArray","segment","timescale","request","getRequestForSegment","requestFragment","delayLoadNextFragmentInfo","delay","setTimeout","_streamingVoFragmentRequest2","mediaType","duration","d","quality","mediaInfo","getMediaInfo","adaptationIndex","representationId","id","url","baseURLController","resolve","path","media","replace","bandwidth","tManifest","getRepresentationController","isFragmentLoadedOrPending","executeRequest","fragmentInfo","response","error","deltaFragmentTime","undefined","deltaTime","_MssFragmentMoofProcessor2","context","create","metricsModel","playbackController","ISOBoxer","updateSegmentList","Math","max","fatal","controllerType","start","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory","MssFragmentMoofProcessor","processTfrf","tfrf","tfdt","representationController","indexHandler","getIndexHandler","timeShiftBufferDepth","errorHandler","_streamingVoDashJSError2","_errorsMssErrors2","MSS_NO_TFRF_CODE","MSS_NO_TFRF_MESSAGE","S","entries","entry","segmentTime","range","availabilityStartTime","parseFloat","fragment_absolute_time","end","baseMediaDecodeTime","updateDVR","getStreamInfo","manifestInfo","fragment_duration","push","round","splice","trigger","_streamingMediaPlayerEvents2","MANIFEST_VALIDITY_CHANGED","sender","newDuration","dvrInfos","getMetricsFor","DVRInfo","addDVRInfo","getBoxOffset","parent","offset","boxes","size","convertFragment","sp","isoFile","parseBuffer","tfhd","fetch","track_ID","traf","createFullBox","version","flags","floor","trun","tfxd","_parent","sepiff","usertype","_saio","entry_count","saiz","sample_count","default_sample_info_size","sample_info_size","NumberOfEntries","moof","getLength","data_offset","saio","trafPosInMoof","sencPosInTraf","write","errHandler","MssFragmentMoovProcessor","createFtypBox","ftyp","createBox","major_brand","minor_version","compatible_brands","createMoovBox","moov","createMvhdBox","trak","createTkhdBox","mdia","createMdhdBox","createHdlrBox","minf","adaptationSet","constants","VIDEO","createVmhdBox","AUDIO","createSmhdBox","createDrefBox","stbl","_data","createStsdBox","createTrexBox","contentProtection","protectionController","createProtectionSystemSpecificHeaderBox","getSupportedKeySystemsFromContentProtection","mvhd","creation_time","modification_time","rate","volume","reserved1","reserved2","matrix","pre_defined","next_track_ID","trackId","tkhd","layer","alternate_group","reserved3","width","height","mdhd","language","lang","hdlr","handler_type","name","reserved","vmhd","graphicsmode","opcolor","smhd","balance","dinf","dref","location","stsd","createSampleEntry","codec","codecs","substring","createAVCVisualSampleEntry","createMP4AudioSampleEntry","MSS_UNSUPPORTED_CODEC_CODE","message","MSS_UNSUPPORTED_CODEC_MESSAGE","data","avc1","data_reference_index","pre_defined1","pre_defined2","horizresolution","vertresolution","frame_count","compressorname","depth","pre_defined3","createAVC1ConfigurationRecord","sinf","createOriginalFormatBox","createSchemeTypeBox","createSchemeInformationBox","avcC","avcCLength","sps","pps","AVCProfileIndication","AVCLevelIndication","profile_compatibility","nalus","codecPrivateData","split","slice","naluBytes","_i","hexStringtoBuffer","NALUTYPE_SPS","NALUTYPE_PPS","Uint8Array","set","mp4a","channelcount","audioChannels","samplesize","reserved_3","samplerate","audioSamplingRate","esds","createMPEG4AACESDescriptor","audioSpecificConfig","esdsLength","data_format","stringToCharCode","schm","scheme_type","scheme_version","createTrackEncryptionBox","keySystems","pssh_bytes","pssh","parsedBuffer","initData","Utils","appendBox","schi","tenc","default_IsEncrypted","default_IV_size","default_KID","trex","default_sample_description_index","default_sample_duration","default_sample_size","default_sample_flags","str","buf","parseInt","charCodeAt","generateMoov","rep","ContentProtection","createFile","arrayEqual","arr1","arr2","every","element","saioProcessor","_procFullBox","_procField","_procFieldArray","saizProcessor","sencProcessor","_procEntries","_procEntryField","_procSubEntries","clearAndCryptedData","uuidProcessor","tfxdUserType","tfrfUserType","sepiffUserType","_parsing","fragment_count","MssFragmentProcessor","addBoxProcessor","mssFragmentMoovProcessor","_MssFragmentMoovProcessor2","mssFragmentMoofProcessor","processFragment","MssHandler","onInitializationRequested","getStreamProcessor","initSegmentType","chunk","createDataChunk","FRAGMENT_LOADING_PROGRESS","bytes","mssFragmentProcessor","INIT_FRAGMENT_LOADED","streamId","endFragment","_streamingVoDataChunk2","segmentType","startFragmentInfoControllers","streamController","getStreamController","getActiveStreamProcessors","forEach","processor","FRAGMENTED_TEXT","alreadyRegistered","externalControllers","getExternalControllers","fragmentInfoController","_MssFragmentInfoController2","onSegmentMediaLoaded","streamInfo","isDynamic","DVRWindowSize","Infinity","onPlaybackPaused","getIsDynamic","onPlaybackSeekAsked","onTTMLPreProcess","ttmlSubtitles","registerEvents","INIT_REQUESTED","getSingletonFactoryByName","getClassName","EVENT_PRIORITY_HIGH","PLAYBACK_PAUSED","PLAYBACK_SEEK_ASKED","FRAGMENT_LOADING_COMPLETED","TTML_TO_PARSE","createMssParser","mssParser","_parserMssParser2","_MssFragmentProcessor2","factory","updateClassFactory","MssErrors","_ErrorsBase","mssErrors","window","global","_MssHandler2","MssParser","mediaPlayerModel","mapPeriod","smoothStreamingMedia","streams","getElementsByTagName","mapAdaptationSet","AdaptationSet","streamIndex","representations","segmentTemplate","qualityLevels","getAttribute","contentType","mimeType","mimeTypeMap","subType","maxWidth","maxHeight","ROLE","role","schemeIdUri","value","Role","Role_asArray","ACCESSIBILITY","accessibility","Accessibility","Accessibility_asArray","mapSegmentTemplate","BaseURL","Id","mapRepresentation","Representation","Representation_asArray","qualityLevel","fourCCValue","SUPPORTED_CODECS","toUpperCase","warn","getH264Codec","getAACCodec","STPP","toString","nalHeader","exec","substr","samplingRate","objectType","codecPrivateDataHex","arr16","indexFreq","extensionSamplingFrequencyIndex","samplingFrequencyIndex","Channels","Uint16Array","setAttribute","mediaUrl","streamIndexTimeScale","mapSegmentTimeline","segmentTimeline","chunks","prevSegment","j","getKIDFromProtectionHeader","protectionHeader","prHeader","wrmHeader","xmlReader","KID","BASE64","decodeArray","firstChild","getWRMHeaderFromPRHeader","buffer","String","fromCharCode","apply","DOMParser","parseFromString","querySelector","textContent","convertUuidEndianness","recordType","recordLength","recordValue","subarray","uuid","swapBytes","pos1","pos2","temp","createPRContentProtection","pro","__text","__prefix","pro_asArray","createWidevineContentProtection","wvCencHeader","encodeASCII","processManifest","xmlDoc","manifestLoadedTime","contentProtections","protection","adaptations","timestampOffset","protocol","profiles","DEFAULT_TIME_SCALE","dvrWindowLength","mediaPresentationDuration","minBufferTime","getStableBufferTime","ttmlTimeIsRelative","refreshManifestOnSwitchTrack","doNotUpdateDVRWindowOnBufferUpdated","ignorePostponeTimePeriod","Period","ContentProtection_asArray","initialization","prevManifest","manifestModel","getValue","min","presentationTimeOffset","parseDOM","getMatchers","getIron","internalParse","performance","now","xmlParseTime","mss2dashTime","info","toPrecision","SUBT","CAPT","DESC","96000","88200","64000","48000","44100","32000","24000","22050","16000","12000","11025","8000","7350","video","audio","text","parse","MediaPlayerEvents","AST_IN_FUTURE","BUFFER_EMPTY","BUFFER_LOADED","BUFFER_LEVEL_STATE_CHANGED","ERROR","FRAGMENT_LOADING_STARTED","FRAGMENT_LOADING_ABANDONED","LOG","MANIFEST_LOADED","METRICS_CHANGED","METRIC_CHANGED","METRIC_ADDED","METRIC_UPDATED","PERIOD_SWITCH_COMPLETED","PERIOD_SWITCH_STARTED","QUALITY_CHANGE_REQUESTED","QUALITY_CHANGE_RENDERED","TRACK_CHANGE_RENDERED","SOURCE_INITIALIZED","STREAM_INITIALIZED","STREAM_TEARDOWN_COMPLETE","TEXT_TRACKS_ADDED","TEXT_TRACK_ADDED","TTML_PARSED","CAPTION_RENDERED","CAPTION_CONTAINER_RESIZE","CAN_PLAY","PLAYBACK_ENDED","PLAYBACK_ERROR","PLAYBACK_NOT_ALLOWED","PLAYBACK_METADATA_LOADED","PLAYBACK_PLAYING","PLAYBACK_PROGRESS","PLAYBACK_RATE_CHANGED","PLAYBACK_SEEKED","PLAYBACK_SEEKING","PLAYBACK_STALLED","PLAYBACK_STARTED","PLAYBACK_TIME_UPDATED","PLAYBACK_WAITING","mediaPlayerEvents","DashJSError","DataChunk","NaN","FragmentRequest","action","ACTION_DOWNLOAD","serviceLocation","requestStartDate","firstByteDate","requestEndDate","availabilityEndTime","wallStartTime","bytesLoaded","bytesTotal","delayLoadingTime","responseType","ACTION_COMPLETE"],"mappings":"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","file":"dash.mss.min.js","sourceRoot":"./src/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass ErrorsBase {\n    extend (errors, config) {\n        if (!errors) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const err in errors) {\n            if (!errors.hasOwnProperty(err) || (this[err] && !override)) continue;\n            if (publicOnly && errors[err].indexOf('public_') === -1) continue;\n            this[err] = errors[err];\n\n        }\n    }\n}\n\nexport default ErrorsBase;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass EventsBase {\n    extend (events, config) {\n        if (!events) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const evt in events) {\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\n            this[evt] = events[evt];\n\n        }\n    }\n}\n\nexport default EventsBase;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from '../core/events/EventsBase';\n\nclass MssEvents extends EventsBase {\n\n    constructor() {\n        super();\n\n        this.FRAGMENT_INFO_LOADING_COMPLETED = 'fragmentInfoLoadingCompleted';\n    }\n}\n\nlet mssEvents = new MssEvents();\nexport default mssEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MssEvents from './MssEvents';\nimport MSSFragmentMoofProcessor from './MssFragmentMoofProcessor';\nimport FragmentRequest from '../streaming/vo/FragmentRequest';\n\nfunction MssFragmentInfoController(config) {\n\n    config = config || {};\n    const context = this.context;\n\n    let instance,\n        logger,\n        fragmentModel,\n        started,\n        type,\n        bufferTimeout,\n        startTime,\n        startFragmentTime,\n        index;\n\n    const streamProcessor = config.streamProcessor;\n    const eventBus = config.eventBus;\n    const metricsModel = config.metricsModel;\n    const playbackController = config.playbackController;\n    const ISOBoxer = config.ISOBoxer;\n    const baseURLController = config.baseURLController;\n    const debug = config.debug;\n    const controllerType = 'MssFragmentInfoController';\n\n    function setup() {\n        logger = debug.getLogger(instance);\n    }\n\n    function initialize() {\n        started = false;\n\n        startTime = null;\n        startFragmentTime = null;\n\n        // Register to StreamProcessor as external controller\n        streamProcessor.registerExternalController(instance);\n        type = streamProcessor.getType();\n        fragmentModel = streamProcessor.getFragmentModel();\n    }\n\n    function doStart() {\n        if (started === true) {\n            return;\n        }\n\n        logger.debug('Do start');\n\n        eventBus.on(MssEvents.FRAGMENT_INFO_LOADING_COMPLETED, onFragmentInfoLoadedCompleted, instance);\n\n        started = true;\n        startTime = new Date().getTime();\n        index = 0;\n\n        loadNextFragmentInfo();\n    }\n\n    function doStop() {\n        if (!started) {\n            return;\n        }\n        logger.debug('Do stop');\n\n        eventBus.off(MssEvents.FRAGMENT_INFO_LOADING_COMPLETED, onFragmentInfoLoadedCompleted, instance);\n\n        // Stop buffering process\n        clearTimeout(bufferTimeout);\n        started = false;\n\n        startTime = null;\n        startFragmentTime = null;\n    }\n\n    function reset() {\n        doStop();\n        streamProcessor.unregisterExternalController(instance);\n    }\n\n    function loadNextFragmentInfo() {\n        // Check if running state\n        if (!started) {\n            return;\n        }\n\n        // Get last segment from SegmentTimeline\n        const representation = getCurrentRepresentation();\n        const manifest = representation.adaptation.period.mpd.manifest;\n        const adaptation = manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index];\n        const segments = adaptation.SegmentTemplate.SegmentTimeline.S_asArray;\n        const segment = segments[segments.length - 1];\n\n        logger.debug('Last fragment time: ' + (segment.t / adaptation.SegmentTemplate.timescale));\n\n        // Generate segment request\n        const request = getRequestForSegment(adaptation, representation, segment);\n\n        // Send segment request\n        requestFragment.call(this, request);\n    }\n\n    function delayLoadNextFragmentInfo(delay) {\n        clearTimeout(bufferTimeout);\n        bufferTimeout = setTimeout(function () {\n            bufferTimeout = null;\n            loadNextFragmentInfo();\n        }, delay * 1000);\n    }\n\n    function getRequestForSegment(adaptation, representation, segment) {\n        let timescale = adaptation.SegmentTemplate.timescale;\n        let request = new FragmentRequest();\n\n        request.mediaType = type;\n        request.type = 'FragmentInfoSegment';\n        // request.range = segment.mediaRange;\n        request.startTime = segment.t / timescale;\n        request.duration = segment.d / timescale;\n        request.timescale = timescale;\n        // request.availabilityStartTime = segment.availabilityStartTime;\n        // request.availabilityEndTime = segment.availabilityEndTime;\n        // request.wallStartTime = segment.wallStartTime;\n        request.quality = representation.index;\n        request.index = index++;\n        request.mediaInfo = streamProcessor.getMediaInfo();\n        request.adaptationIndex = representation.adaptation.index;\n        request.representationId = representation.id;\n        request.url = baseURLController.resolve(representation.path).url + adaptation.SegmentTemplate.media;\n        request.url = request.url.replace('$Bandwidth$', representation.bandwidth);\n        request.url = request.url.replace('$Time$', segment.tManifest ? segment.tManifest : segment.t);\n        request.url = request.url.replace('/Fragments(', '/FragmentInfo(');\n\n        return request;\n    }\n\n    function getCurrentRepresentation() {\n        const representationController = streamProcessor.getRepresentationController();\n        const representation = representationController.getCurrentRepresentation();\n\n        return representation;\n    }\n\n    function requestFragment(request) {\n\n        logger.debug('Load fragment for time: ' + request.startTime);\n        if (streamProcessor.getFragmentModel().isFragmentLoadedOrPending(request)) {\n            // We may have reached end of timeline in case of start-over streams\n            logger.debug('No more fragments');\n            return;\n        }\n\n        fragmentModel.executeRequest(request);\n    }\n\n    function onFragmentInfoLoadedCompleted(e) {\n        if (e.streamProcessor !== streamProcessor) {\n            return;\n        }\n\n        const request = e.fragmentInfo.request;\n        if (!e.fragmentInfo.response) {\n            logger.error('Load error', request.url);\n            return;\n        }\n\n        let deltaFragmentTime,\n            deltaTime;\n\n        logger.debug('FragmentInfo loaded: ', request.url);\n\n        if (!startFragmentTime) {\n            startFragmentTime = request.startTime;\n        }\n\n        try {\n            // Process FramgentInfo in order to update segment timeline (DVR window)\n            const mssFragmentMoofProcessor = MSSFragmentMoofProcessor(context).create({\n                metricsModel: metricsModel,\n                playbackController: playbackController,\n                ISOBoxer: ISOBoxer,\n                eventBus: eventBus,\n                debug: debug\n            });\n            mssFragmentMoofProcessor.updateSegmentList(e.fragmentInfo, streamProcessor);\n\n            deltaTime = (new Date().getTime() - startTime) / 1000;\n            deltaFragmentTime = (request.startTime + request.duration) - startFragmentTime;\n            delayLoadNextFragmentInfo(Math.max(0, (deltaFragmentTime - deltaTime)));\n        } catch (e) {\n            logger.fatal('Internal error while processing fragment info segment ');\n        }\n    }\n\n    function getType() {\n        return type;\n    }\n\n    instance = {\n        initialize: initialize,\n        controllerType: controllerType,\n        start: doStart,\n        getType: getType,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nMssFragmentInfoController.__dashjs_factory_name = 'MssFragmentInfoController';\nexport default dashjs.FactoryMaker.getClassFactory(MssFragmentInfoController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport DashJSError from '../streaming/vo/DashJSError';\nimport MssErrors from './errors/MssErrors';\n\nimport Events from '../streaming/MediaPlayerEvents';\n\n/**\n * @module MssFragmentMoovProcessor\n * @param {Object} config object\n */\nfunction MssFragmentMoofProcessor(config) {\n\n    config = config || {};\n    let instance,\n        type,\n        logger;\n    const metricsModel = config.metricsModel;\n    const playbackController = config.playbackController;\n    const errorHandler = config.errHandler;\n    const eventBus = config.eventBus;\n    const ISOBoxer = config.ISOBoxer;\n    const debug = config.debug;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        type = '';\n    }\n\n    function processTfrf(request, tfrf, tfdt, streamProcessor) {\n        const representationController = streamProcessor.getRepresentationController();\n        const representation = representationController.getCurrentRepresentation();\n        const indexHandler = streamProcessor.getIndexHandler();\n\n        const manifest = representation.adaptation.period.mpd.manifest;\n        const adaptation = manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index];\n        const timescale = adaptation.SegmentTemplate.timescale;\n\n        type = streamProcessor.getType();\n\n        if (manifest.type !== 'dynamic' && !manifest.timeShiftBufferDepth) {\n            return;\n        }\n\n        if (!tfrf) {\n            errorHandler.error(new DashJSError(MssErrors.MSS_NO_TFRF_CODE, MssErrors.MSS_NO_TFRF_MESSAGE));\n            return;\n        }\n\n        // Get adaptation's segment timeline (always a SegmentTimeline in Smooth Streaming use case)\n        const segments = adaptation.SegmentTemplate.SegmentTimeline.S;\n        const entries = tfrf.entry;\n        let entry,\n            segmentTime,\n            range;\n        let segment = null;\n        let t = 0;\n        let availabilityStartTime = null;\n\n        if (entries.length === 0) {\n            return;\n        }\n\n        // Consider only first tfrf entry (to avoid pre-condition failure on fragment info requests)\n        entry = entries[0];\n\n        // In case of start-over streams, check if we have reached end of original manifest duration (set in timeShiftBufferDepth)\n        // => then do not update anymore timeline\n        if (manifest.type === 'static') {\n            // Get first segment time\n            segmentTime = segments[0].tManifest ? parseFloat(segments[0].tManifest) : segments[0].t;\n            if (entry.fragment_absolute_time > (segmentTime + (manifest.timeShiftBufferDepth * timescale))) {\n                return;\n            }\n        }\n\n        logger.debug('entry - t = ', (entry.fragment_absolute_time / timescale));\n\n        // Get last segment time\n        segmentTime = segments[segments.length - 1].tManifest ? parseFloat(segments[segments.length - 1].tManifest) : segments[segments.length - 1].t;\n        logger.debug('Last segment - t = ', (segmentTime / timescale));\n\n        // Check if we have to append new segment to timeline\n        if (entry.fragment_absolute_time <= segmentTime) {\n            // Update DVR window range\n            // => set range end to end time of current segment\n            range = {\n                start: segments[0].t / timescale,\n                end: (tfdt.baseMediaDecodeTime / timescale) + request.duration\n            };\n\n            updateDVR(request.mediaType, range, streamProcessor.getStreamInfo().manifestInfo);\n            return;\n        }\n\n        logger.debug('Add new segment - t = ', (entry.fragment_absolute_time / timescale));\n        segment = {};\n        segment.t = entry.fragment_absolute_time;\n        segment.d = entry.fragment_duration;\n        // If timestamps starts at 0 relative to 1st segment (dynamic to static) then update segment time\n        if (segments[0].tManifest) {\n            segment.t -= parseFloat(segments[0].tManifest) - segments[0].t;\n            segment.tManifest = entry.fragment_absolute_time;\n        }\n        segments.push(segment);\n\n        // In case of static start-over streams, update content duration\n        if (manifest.type === 'static') {\n            if (type === 'video') {\n                segment = segments[segments.length - 1];\n                var end = (segment.t + segment.d) / timescale;\n                if (end > representation.adaptation.period.duration) {\n                    eventBus.trigger(Events.MANIFEST_VALIDITY_CHANGED, { sender: this, newDuration: end });\n                }\n            }\n            return;\n        }\n        // In case of live streams, update segment timeline according to DVR window\n        else if (manifest.timeShiftBufferDepth && manifest.timeShiftBufferDepth > 0) {\n            // Get timestamp of the last segment\n            segment = segments[segments.length - 1];\n            t = segment.t;\n\n            // Determine the segments' availability start time\n            availabilityStartTime = Math.round((t - (manifest.timeShiftBufferDepth * timescale)) / timescale);\n\n            // Remove segments prior to availability start time\n            segment = segments[0];\n            while (Math.round(segment.t / timescale) < availabilityStartTime) {\n                logger.debug('Remove segment  - t = ' + (segment.t / timescale));\n                segments.splice(0, 1);\n                segment = segments[0];\n            }\n\n            // Update DVR window range => set range end to end time of current segment\n            range = {\n                start: segments[0].t / timescale,\n                end: (tfdt.baseMediaDecodeTime / timescale) + request.duration\n            };\n\n            updateDVR(type, range, streamProcessor.getStreamInfo().manifestInfo);\n        }\n\n        indexHandler.updateSegmentList(representation);\n    }\n\n    function updateDVR(type, range, manifestInfo) {\n        const dvrInfos = metricsModel.getMetricsFor(type).DVRInfo;\n        if (dvrInfos) {\n            if (dvrInfos.length === 0 || (dvrInfos.length > 0 && range.end > dvrInfos[dvrInfos.length - 1].range.end)) {\n                logger.debug('Update DVR Infos [' + range.start + ' - ' + range.end + ']');\n                metricsModel.addDVRInfo(type, playbackController.getTime(), manifestInfo, range);\n            }\n        }\n    }\n\n    // This function returns the offset of the 1st byte of a child box within a container box\n    function getBoxOffset(parent, type) {\n        let offset = 8;\n        let i = 0;\n\n        for (i = 0; i < parent.boxes.length; i++) {\n            if (parent.boxes[i].type === type) {\n                return offset;\n            }\n            offset += parent.boxes[i].size;\n        }\n        return offset;\n    }\n\n    function convertFragment(e, sp) {\n        let i;\n\n        // e.request contains request description object\n        // e.response contains fragment bytes\n        const isoFile = ISOBoxer.parseBuffer(e.response);\n        // Update track_Id in tfhd box\n        const tfhd = isoFile.fetch('tfhd');\n        tfhd.track_ID = e.request.mediaInfo.index + 1;\n\n        // Add tfdt box\n        let tfdt = isoFile.fetch('tfdt');\n        const traf = isoFile.fetch('traf');\n        if (tfdt === null) {\n            tfdt = ISOBoxer.createFullBox('tfdt', traf, tfhd);\n            tfdt.version = 1;\n            tfdt.flags = 0;\n            tfdt.baseMediaDecodeTime = Math.floor(e.request.startTime * e.request.timescale);\n        }\n\n        const trun = isoFile.fetch('trun');\n\n        // Process tfxd boxes\n        // This box provide absolute timestamp but we take the segment start time for tfdt\n        let tfxd = isoFile.fetch('tfxd');\n        if (tfxd) {\n            tfxd._parent.boxes.splice(tfxd._parent.boxes.indexOf(tfxd), 1);\n            tfxd = null;\n        }\n        let tfrf = isoFile.fetch('tfrf');\n        processTfrf(e.request, tfrf, tfdt, sp);\n        if (tfrf) {\n            tfrf._parent.boxes.splice(tfrf._parent.boxes.indexOf(tfrf), 1);\n            tfrf = null;\n        }\n\n        // If protected content in PIFF1.1 format (sepiff box = Sample Encryption PIFF)\n        // => convert sepiff box it into a senc box\n        // => create saio and saiz boxes (if not already present)\n        const sepiff = isoFile.fetch('sepiff');\n        if (sepiff !== null) {\n            sepiff.type = 'senc';\n            sepiff.usertype = undefined;\n\n            let saio = isoFile.fetch('saio');\n            if (saio === null) {\n                // Create Sample Auxiliary Information Offsets Box box (saio)\n                saio = ISOBoxer.createFullBox('saio', traf);\n                saio.version = 0;\n                saio.flags = 0;\n                saio.entry_count = 1;\n                saio.offset = [0];\n\n                const saiz = ISOBoxer.createFullBox('saiz', traf);\n                saiz.version = 0;\n                saiz.flags = 0;\n                saiz.sample_count = sepiff.sample_count;\n                saiz.default_sample_info_size = 0;\n                saiz.sample_info_size = [];\n\n                if (sepiff.flags & 0x02) {\n                    // Sub-sample encryption => set sample_info_size for each sample\n                    for (i = 0; i < sepiff.sample_count; i += 1) {\n                        // 10 = 8 (InitializationVector field size) + 2 (subsample_count field size)\n                        // 6 = 2 (BytesOfClearData field size) + 4 (BytesOfEncryptedData field size)\n                        saiz.sample_info_size[i] = 10 + (6 * sepiff.entry[i].NumberOfEntries);\n                    }\n                } else {\n                    // No sub-sample encryption => set default sample_info_size = InitializationVector field size (8)\n                    saiz.default_sample_info_size = 8;\n                }\n            }\n        }\n\n        tfhd.flags &= 0xFFFFFE; // set tfhd.base-data-offset-present to false\n        tfhd.flags |= 0x020000; // set tfhd.default-base-is-moof to true\n        trun.flags |= 0x000001; // set trun.data-offset-present to true\n\n        // Update trun.data_offset field that corresponds to first data byte (inside mdat box)\n        const moof = isoFile.fetch('moof');\n        let length = moof.getLength();\n        trun.data_offset = length + 8;\n\n        // Update saio box offset field according to new senc box offset\n        let saio = isoFile.fetch('saio');\n        if (saio !== null) {\n            let trafPosInMoof = getBoxOffset(moof, 'traf');\n            let sencPosInTraf = getBoxOffset(traf, 'senc');\n            // Set offset from begin fragment to the first IV field in senc box\n            saio.offset[0] = trafPosInMoof + sencPosInTraf + 16; // 16 = box header (12) + sample_count field size (4)\n        }\n\n        // Write transformed/processed fragment into request reponse data\n        e.response = isoFile.write();\n    }\n\n    function updateSegmentList(e, sp) {\n        // e.request contains request description object\n        // e.response contains fragment bytes\n        if (!e.response) {\n            throw new Error('e.response parameter is missing');\n        }\n\n        const isoFile = ISOBoxer.parseBuffer(e.response);\n        // Update track_Id in tfhd box\n        const tfhd = isoFile.fetch('tfhd');\n        tfhd.track_ID = e.request.mediaInfo.index + 1;\n\n        // Add tfdt box\n        let tfdt = isoFile.fetch('tfdt');\n        let traf = isoFile.fetch('traf');\n        if (tfdt === null) {\n            tfdt = ISOBoxer.createFullBox('tfdt', traf, tfhd);\n            tfdt.version = 1;\n            tfdt.flags = 0;\n            tfdt.baseMediaDecodeTime = Math.floor(e.request.startTime * e.request.timescale);\n        }\n\n        let tfrf = isoFile.fetch('tfrf');\n        processTfrf(e.request, tfrf, tfdt, sp);\n        if (tfrf) {\n            tfrf._parent.boxes.splice(tfrf._parent.boxes.indexOf(tfrf), 1);\n            tfrf = null;\n        }\n    }\n\n    function getType() {\n        return type;\n    }\n\n    instance = {\n        convertFragment: convertFragment,\n        updateSegmentList: updateSegmentList,\n        getType: getType\n    };\n\n    setup();\n    return instance;\n}\n\nMssFragmentMoofProcessor.__dashjs_factory_name = 'MssFragmentMoofProcessor';\nexport default dashjs.FactoryMaker.getClassFactory(MssFragmentMoofProcessor); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n import MssErrors from './errors/MssErrors';\n\n/**\n * @module MssFragmentMoovProcessor\n * @param {Object} config object\n */\nfunction MssFragmentMoovProcessor(config) {\n    config = config || {};\n    const NALUTYPE_SPS = 7;\n    const NALUTYPE_PPS = 8;\n    const constants = config.constants;\n    const ISOBoxer = config.ISOBoxer;\n\n    let protectionController = config.protectionController;\n    let instance,\n        period,\n        adaptationSet,\n        representation,\n        contentProtection,\n        timescale,\n        trackId;\n\n    function createFtypBox(isoFile) {\n        let ftyp = ISOBoxer.createBox('ftyp', isoFile);\n        ftyp.major_brand = 'iso6';\n        ftyp.minor_version = 1; // is an informative integer for the minor version of the major brand\n        ftyp.compatible_brands = []; //is a list, to the end of the box, of brands isom, iso6 and msdh\n        ftyp.compatible_brands[0] = 'isom'; // => decimal ASCII value for isom\n        ftyp.compatible_brands[1] = 'iso6'; // => decimal ASCII value for iso6\n        ftyp.compatible_brands[2] = 'msdh'; // => decimal ASCII value for msdh\n\n        return ftyp;\n    }\n\n    function createMoovBox(isoFile) {\n\n        // moov box\n        let moov = ISOBoxer.createBox('moov', isoFile);\n\n        // moov/mvhd\n        createMvhdBox(moov);\n\n        // moov/trak\n        let trak = ISOBoxer.createBox('trak', moov);\n\n        // moov/trak/tkhd\n        createTkhdBox(trak);\n\n        // moov/trak/mdia\n        let mdia = ISOBoxer.createBox('mdia', trak);\n\n        // moov/trak/mdia/mdhd\n        createMdhdBox(mdia);\n\n        // moov/trak/mdia/hdlr\n        createHdlrBox(mdia);\n\n        // moov/trak/mdia/minf\n        let minf = ISOBoxer.createBox('minf', mdia);\n\n        switch (adaptationSet.type) {\n            case constants.VIDEO:\n                // moov/trak/mdia/minf/vmhd\n                createVmhdBox(minf);\n                break;\n            case constants.AUDIO:\n                // moov/trak/mdia/minf/smhd\n                createSmhdBox(minf);\n                break;\n            default:\n                break;\n        }\n\n        // moov/trak/mdia/minf/dinf\n        let dinf = ISOBoxer.createBox('dinf', minf);\n\n        // moov/trak/mdia/minf/dinf/dref\n        createDrefBox(dinf);\n\n        // moov/trak/mdia/minf/stbl\n        let stbl = ISOBoxer.createBox('stbl', minf);\n\n        // Create empty stts, stsc, stco and stsz boxes\n        // Use data field as for codem-isoboxer unknown boxes for setting fields value\n\n        // moov/trak/mdia/minf/stbl/stts\n        let stts = ISOBoxer.createFullBox('stts', stbl);\n        stts._data = [0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, entry_count = 0\n\n        // moov/trak/mdia/minf/stbl/stsc\n        let stsc = ISOBoxer.createFullBox('stsc', stbl);\n        stsc._data = [0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, entry_count = 0\n\n        // moov/trak/mdia/minf/stbl/stco\n        let stco = ISOBoxer.createFullBox('stco', stbl);\n        stco._data = [0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, entry_count = 0\n\n        // moov/trak/mdia/minf/stbl/stsz\n        let stsz = ISOBoxer.createFullBox('stsz', stbl);\n        stsz._data = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, sample_size = 0, sample_count = 0\n\n        // moov/trak/mdia/minf/stbl/stsd\n        createStsdBox(stbl);\n\n        // moov/mvex\n        let mvex = ISOBoxer.createBox('mvex', moov);\n\n        // moov/mvex/trex\n        createTrexBox(mvex);\n\n        if (contentProtection && protectionController) {\n            let supportedKS = protectionController.getSupportedKeySystemsFromContentProtection(contentProtection);\n            createProtectionSystemSpecificHeaderBox(moov, supportedKS);\n        }\n    }\n\n    function createMvhdBox(moov) {\n\n        let mvhd = ISOBoxer.createFullBox('mvhd', moov);\n\n        mvhd.version = 1; // version = 1  in order to have 64bits duration value\n\n        mvhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\n        mvhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\n        mvhd.timescale = timescale; // the time-scale for the entire presentation => 10000000 for MSS\n        mvhd.duration = Math.round(period.duration * timescale); // the length of the presentation (in the indicated timescale) =>  take duration of period\n        mvhd.rate = 1.0; // 16.16 number, '1.0' = normal playback\n        mvhd.volume = 1.0; // 8.8 number, '1.0' = full volume\n        mvhd.reserved1 = 0;\n        mvhd.reserved2 = [0x0, 0x0];\n        mvhd.matrix = [\n            1, 0, 0, // provides a transformation matrix for the video;\n            0, 1, 0, // (u,v,w) are restricted here to (0,0,1)\n            0, 0, 16384\n        ];\n        mvhd.pre_defined = [0, 0, 0, 0, 0, 0];\n        mvhd.next_track_ID = trackId + 1; // indicates a value to use for the track ID of the next track to be added to this presentation\n\n        return mvhd;\n    }\n\n    function createTkhdBox(trak) {\n\n        let tkhd = ISOBoxer.createFullBox('tkhd', trak);\n\n        tkhd.version = 1; // version = 1  in order to have 64bits duration value\n        tkhd.flags = 0x1 | // Track_enabled (0x000001): Indicates that the track is enabled\n            0x2 | // Track_in_movie (0x000002):  Indicates that the track is used in the presentation\n            0x4; // Track_in_preview (0x000004):  Indicates that the track is used when previewing the presentation\n\n        tkhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\n        tkhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\n        tkhd.track_ID = trackId; // uniquely identifies this track over the entire life-time of this presentation\n        tkhd.reserved1 = 0;\n        tkhd.duration = Math.round(period.duration * timescale); // the duration of this track (in the timescale indicated in the Movie Header Box) =>  take duration of period\n        tkhd.reserved2 = [0x0, 0x0];\n        tkhd.layer = 0; // specifies the front-to-back ordering of video tracks; tracks with lower numbers are closer to the viewer => 0 since only one video track\n        tkhd.alternate_group = 0; // specifies a group or collection of tracks => ignore\n        tkhd.volume = 1.0; // '1.0' = full volume\n        tkhd.reserved3 = 0;\n        tkhd.matrix = [\n            1, 0, 0, // provides a transformation matrix for the video;\n            0, 1, 0, // (u,v,w) are restricted here to (0,0,1)\n            0, 0, 16384\n        ];\n        tkhd.width = representation.width; // visual presentation width\n        tkhd.height = representation.height; // visual presentation height\n\n        return tkhd;\n    }\n\n    function createMdhdBox(mdia) {\n\n        let mdhd = ISOBoxer.createFullBox('mdhd', mdia);\n\n        mdhd.version = 1; // version = 1  in order to have 64bits duration value\n\n        mdhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\n        mdhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\n        mdhd.timescale = timescale; // the time-scale for the entire presentation\n        mdhd.duration = Math.round(period.duration * timescale); // the duration of this media (in the scale of the timescale). If the duration cannot be determined then duration is set to all 1s.\n        mdhd.language = adaptationSet.lang || 'und'; // declares the language code for this media (see getLanguageCode())\n        mdhd.pre_defined = 0;\n\n        return mdhd;\n    }\n\n    function createHdlrBox(mdia) {\n\n        let hdlr = ISOBoxer.createFullBox('hdlr', mdia);\n\n        hdlr.pre_defined = 0;\n        switch (adaptationSet.type) {\n            case constants.VIDEO:\n                hdlr.handler_type = 'vide';\n                break;\n            case constants.AUDIO:\n                hdlr.handler_type = 'soun';\n                break;\n            default:\n                hdlr.handler_type = 'meta';\n                break;\n        }\n        hdlr.name = representation.id;\n        hdlr.reserved = [0, 0, 0];\n\n        return hdlr;\n    }\n\n    function createVmhdBox(minf) {\n\n        let vmhd = ISOBoxer.createFullBox('vmhd', minf);\n\n        vmhd.flags = 1;\n\n        vmhd.graphicsmode = 0; // specifies a composition mode for this video track, from the following enumerated set, which may be extended by derived specifications: copy = 0 copy over the existing image\n        vmhd.opcolor = [0, 0, 0]; // is a set of 3 colour values (red, green, blue) available for use by graphics modes\n\n        return vmhd;\n    }\n\n    function createSmhdBox(minf) {\n\n        let smhd = ISOBoxer.createFullBox('smhd', minf);\n\n        smhd.flags = 1;\n\n        smhd.balance = 0; // is a fixed-point 8.8 number that places mono audio tracks in a stereo space; 0 is centre (the normal value); full left is -1.0 and full right is 1.0.\n        smhd.reserved = 0;\n\n        return smhd;\n    }\n\n    function createDrefBox(dinf) {\n\n        let dref = ISOBoxer.createFullBox('dref', dinf);\n\n        dref.entry_count = 1;\n        dref.entries = [];\n\n        let url = ISOBoxer.createFullBox('url ', dref, false);\n        url.location = '';\n        url.flags = 1;\n\n        dref.entries.push(url);\n\n        return dref;\n    }\n\n    function createStsdBox(stbl) {\n\n        let stsd = ISOBoxer.createFullBox('stsd', stbl);\n\n        stsd.entries = [];\n        switch (adaptationSet.type) {\n            case constants.VIDEO:\n            case constants.AUDIO:\n                stsd.entries.push(createSampleEntry(stsd));\n                break;\n            default:\n                break;\n        }\n\n        stsd.entry_count = stsd.entries.length; // is an integer that counts the actual entries\n        return stsd;\n    }\n\n    function createSampleEntry(stsd) {\n        let codec = representation.codecs.substring(0, representation.codecs.indexOf('.'));\n\n        switch (codec) {\n            case 'avc1':\n                return createAVCVisualSampleEntry(stsd, codec);\n            case 'mp4a':\n                return createMP4AudioSampleEntry(stsd, codec);\n            default:\n                throw {\n                    code: MssErrors.MSS_UNSUPPORTED_CODEC_CODE,\n                    message: MssErrors.MSS_UNSUPPORTED_CODEC_MESSAGE,\n                    data: {\n                        codec: codec\n                    }\n                };\n        }\n    }\n\n    function createAVCVisualSampleEntry(stsd, codec) {\n        let avc1;\n\n        if (contentProtection) {\n            avc1 = ISOBoxer.createBox('encv', stsd, false);\n        } else {\n            avc1 = ISOBoxer.createBox('avc1', stsd, false);\n        }\n\n        // SampleEntry fields\n        avc1.reserved1 = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\n        avc1.data_reference_index = 1;\n\n        // VisualSampleEntry fields\n        avc1.pre_defined1 = 0;\n        avc1.reserved2 = 0;\n        avc1.pre_defined2 = [0, 0, 0];\n        avc1.height = representation.height;\n        avc1.width = representation.width;\n        avc1.horizresolution = 72; // 72 dpi\n        avc1.vertresolution = 72; // 72 dpi\n        avc1.reserved3 = 0;\n        avc1.frame_count = 1; // 1 compressed video frame per sample\n        avc1.compressorname = [\n            0x0A, 0x41, 0x56, 0x43, 0x20, 0x43, 0x6F, 0x64, // = 'AVC Coding';\n            0x69, 0x6E, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n        ];\n        avc1.depth = 0x0018; // 0x0018 – images are in colour with no alpha.\n        avc1.pre_defined3 = 65535;\n        avc1.config = createAVC1ConfigurationRecord();\n        if (contentProtection) {\n            // Create and add Protection Scheme Info Box\n            let sinf = ISOBoxer.createBox('sinf', avc1);\n\n            // Create and add Original Format Box => indicate codec type of the encrypted content\n            createOriginalFormatBox(sinf, codec);\n\n            // Create and add Scheme Type box\n            createSchemeTypeBox(sinf);\n\n            // Create and add Scheme Information Box\n            createSchemeInformationBox(sinf);\n        }\n\n        return avc1;\n    }\n\n    function createAVC1ConfigurationRecord() {\n\n        let avcC = null;\n        let avcCLength = 15; // length = 15 by default (0 SPS and 0 PPS)\n\n        // First get all SPS and PPS from codecPrivateData\n        let sps = [];\n        let pps = [];\n        let AVCProfileIndication = 0;\n        let AVCLevelIndication = 0;\n        let profile_compatibility = 0;\n\n        let nalus = representation.codecPrivateData.split('00000001').slice(1);\n        let naluBytes, naluType;\n\n        for (let i = 0; i < nalus.length; i++) {\n            naluBytes = hexStringtoBuffer(nalus[i]);\n\n            naluType = naluBytes[0] & 0x1F;\n\n            switch (naluType) {\n                case NALUTYPE_SPS:\n                    sps.push(naluBytes);\n                    avcCLength += naluBytes.length + 2; // 2 = sequenceParameterSetLength field length\n                    break;\n                case NALUTYPE_PPS:\n                    pps.push(naluBytes);\n                    avcCLength += naluBytes.length + 2; // 2 = pictureParameterSetLength field length\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        // Get profile and level from SPS\n        if (sps.length > 0) {\n            AVCProfileIndication = sps[0][1];\n            profile_compatibility = sps[0][2];\n            AVCLevelIndication = sps[0][3];\n        }\n\n        // Generate avcC buffer\n        avcC = new Uint8Array(avcCLength);\n\n        let i = 0;\n        // length\n        avcC[i++] = (avcCLength & 0xFF000000) >> 24;\n        avcC[i++] = (avcCLength & 0x00FF0000) >> 16;\n        avcC[i++] = (avcCLength & 0x0000FF00) >> 8;\n        avcC[i++] = (avcCLength & 0x000000FF);\n        avcC.set([0x61, 0x76, 0x63, 0x43], i); // type = 'avcC'\n        i += 4;\n        avcC[i++] = 1; // configurationVersion = 1\n        avcC[i++] = AVCProfileIndication;\n        avcC[i++] = profile_compatibility;\n        avcC[i++] = AVCLevelIndication;\n        avcC[i++] = 0xFF; // '11111' + lengthSizeMinusOne = 3\n        avcC[i++] = 0xE0 | sps.length; // '111' + numOfSequenceParameterSets\n        for (let n = 0; n < sps.length; n++) {\n            avcC[i++] = (sps[n].length & 0xFF00) >> 8;\n            avcC[i++] = (sps[n].length & 0x00FF);\n            avcC.set(sps[n], i);\n            i += sps[n].length;\n        }\n        avcC[i++] = pps.length; // numOfPictureParameterSets\n        for (let n = 0; n < pps.length; n++) {\n            avcC[i++] = (pps[n].length & 0xFF00) >> 8;\n            avcC[i++] = (pps[n].length & 0x00FF);\n            avcC.set(pps[n], i);\n            i += pps[n].length;\n        }\n\n        return avcC;\n    }\n\n    function createMP4AudioSampleEntry(stsd, codec) {\n        let mp4a;\n\n        if (contentProtection) {\n            mp4a = ISOBoxer.createBox('enca', stsd, false);\n        } else {\n            mp4a = ISOBoxer.createBox('mp4a', stsd, false);\n        }\n\n        // SampleEntry fields\n        mp4a.reserved1 = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\n        mp4a.data_reference_index = 1;\n\n        // AudioSampleEntry fields\n        mp4a.reserved2 = [0x0, 0x0];\n        mp4a.channelcount = representation.audioChannels;\n        mp4a.samplesize = 16;\n        mp4a.pre_defined = 0;\n        mp4a.reserved_3 = 0;\n        mp4a.samplerate = representation.audioSamplingRate << 16;\n\n        mp4a.esds = createMPEG4AACESDescriptor();\n\n        if (contentProtection) {\n            // Create and add Protection Scheme Info Box\n            let sinf = ISOBoxer.createBox('sinf', mp4a);\n\n            // Create and add Original Format Box => indicate codec type of the encrypted content\n            createOriginalFormatBox(sinf, codec);\n\n            // Create and add Scheme Type box\n            createSchemeTypeBox(sinf);\n\n            // Create and add Scheme Information Box\n            createSchemeInformationBox(sinf);\n        }\n\n        return mp4a;\n    }\n\n    function createMPEG4AACESDescriptor() {\n\n        // AudioSpecificConfig (see ISO/IEC 14496-3, subpart 1) => corresponds to hex bytes contained in 'codecPrivateData' field\n        let audioSpecificConfig = hexStringtoBuffer(representation.codecPrivateData);\n\n        // ESDS length = esds box header length (= 12) +\n        //               ES_Descriptor header length (= 5) +\n        //               DecoderConfigDescriptor header length (= 15) +\n        //               decoderSpecificInfo header length (= 2) +\n        //               AudioSpecificConfig length (= codecPrivateData length)\n        let esdsLength = 34 + audioSpecificConfig.length;\n        let esds = new Uint8Array(esdsLength);\n\n        let i = 0;\n        // esds box\n        esds[i++] = (esdsLength & 0xFF000000) >> 24; // esds box length\n        esds[i++] = (esdsLength & 0x00FF0000) >> 16; // ''\n        esds[i++] = (esdsLength & 0x0000FF00) >> 8; // ''\n        esds[i++] = (esdsLength & 0x000000FF); // ''\n        esds.set([0x65, 0x73, 0x64, 0x73], i); // type = 'esds'\n        i += 4;\n        esds.set([0, 0, 0, 0], i); // version = 0, flags = 0\n        i += 4;\n        // ES_Descriptor (see ISO/IEC 14496-1 (Systems))\n        esds[i++] = 0x03; // tag = 0x03 (ES_DescrTag)\n        esds[i++] = 20 + audioSpecificConfig.length; // size\n        esds[i++] = (trackId & 0xFF00) >> 8; // ES_ID = track_id\n        esds[i++] = (trackId & 0x00FF); // ''\n        esds[i++] = 0; // flags and streamPriority\n\n        // DecoderConfigDescriptor (see ISO/IEC 14496-1 (Systems))\n        esds[i++] = 0x04; // tag = 0x04 (DecoderConfigDescrTag)\n        esds[i++] = 15 + audioSpecificConfig.length; // size\n        esds[i++] = 0x40; // objectTypeIndication = 0x40 (MPEG-4 AAC)\n        esds[i] = 0x05 << 2; // streamType = 0x05 (Audiostream)\n        esds[i] |= 0 << 1; // upStream = 0\n        esds[i++] |= 1; // reserved = 1\n        esds[i++] = 0xFF; // buffersizeDB = undefined\n        esds[i++] = 0xFF; // ''\n        esds[i++] = 0xFF; // ''\n        esds[i++] = (representation.bandwidth & 0xFF000000) >> 24; // maxBitrate\n        esds[i++] = (representation.bandwidth & 0x00FF0000) >> 16; // ''\n        esds[i++] = (representation.bandwidth & 0x0000FF00) >> 8; // ''\n        esds[i++] = (representation.bandwidth & 0x000000FF); // ''\n        esds[i++] = (representation.bandwidth & 0xFF000000) >> 24; // avgbitrate\n        esds[i++] = (representation.bandwidth & 0x00FF0000) >> 16; // ''\n        esds[i++] = (representation.bandwidth & 0x0000FF00) >> 8; // ''\n        esds[i++] = (representation.bandwidth & 0x000000FF); // ''\n\n        // DecoderSpecificInfo (see ISO/IEC 14496-1 (Systems))\n        esds[i++] = 0x05; // tag = 0x05 (DecSpecificInfoTag)\n        esds[i++] = audioSpecificConfig.length; // size\n        esds.set(audioSpecificConfig, i); // AudioSpecificConfig bytes\n\n        return esds;\n    }\n\n    function createOriginalFormatBox(sinf, codec) {\n        let frma = ISOBoxer.createBox('frma', sinf);\n        frma.data_format = stringToCharCode(codec);\n    }\n\n    function createSchemeTypeBox(sinf) {\n        let schm = ISOBoxer.createFullBox('schm', sinf);\n\n        schm.flags = 0;\n        schm.version = 0;\n        schm.scheme_type = 0x63656E63; // 'cenc' => common encryption\n        schm.scheme_version = 0x00010000; // version set to 0x00010000 (Major version 1, Minor version 0)\n    }\n\n    function createSchemeInformationBox(sinf) {\n        let schi = ISOBoxer.createBox('schi', sinf);\n\n        // Create and add Track Encryption Box\n        createTrackEncryptionBox(schi);\n    }\n\n    function createProtectionSystemSpecificHeaderBox(moov, keySystems) {\n        let pssh_bytes,\n            pssh,\n            i,\n            parsedBuffer;\n\n        for (i = 0; i < keySystems.length; i += 1) {\n            pssh_bytes = keySystems[i].initData;\n            parsedBuffer = ISOBoxer.parseBuffer(pssh_bytes);\n            pssh = parsedBuffer.fetch('pssh');\n            if (pssh) {\n                ISOBoxer.Utils.appendBox(moov, pssh);\n            }\n        }\n    }\n\n    function createTrackEncryptionBox(schi) {\n        let tenc = ISOBoxer.createFullBox('tenc', schi);\n\n        tenc.flags = 0;\n        tenc.version = 0;\n\n        tenc.default_IsEncrypted = 0x1;\n        tenc.default_IV_size = 8;\n        tenc.default_KID = (contentProtection && (contentProtection.length) > 0 && contentProtection[0]['cenc:default_KID']) ?\n            contentProtection[0]['cenc:default_KID'] : [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\n    }\n\n    function createTrexBox(moov) {\n        let trex = ISOBoxer.createFullBox('trex', moov);\n\n        trex.track_ID = trackId;\n        trex.default_sample_description_index = 1;\n        trex.default_sample_duration = 0;\n        trex.default_sample_size = 0;\n        trex.default_sample_flags = 0;\n\n        return trex;\n    }\n\n    function hexStringtoBuffer(str) {\n        let buf = new Uint8Array(str.length / 2);\n        let i;\n\n        for (i = 0; i < str.length / 2; i += 1) {\n            buf[i] = parseInt('' + str[i * 2] + str[i * 2 + 1], 16);\n        }\n        return buf;\n    }\n\n    function stringToCharCode(str) {\n        let code = 0;\n        let i;\n\n        for (i = 0; i < str.length; i += 1) {\n            code |= str.charCodeAt(i) << ((str.length - i - 1) * 8);\n        }\n        return code;\n    }\n\n    function generateMoov(rep) {\n        if (!rep || !rep.adaptation) {\n            return;\n        }\n\n        let isoFile,\n            arrayBuffer;\n\n        representation = rep;\n        adaptationSet = representation.adaptation;\n\n        period = adaptationSet.period;\n        trackId = adaptationSet.index + 1;\n        contentProtection = period.mpd.manifest.Period_asArray[period.index].AdaptationSet_asArray[adaptationSet.index].ContentProtection;\n\n        timescale = period.mpd.manifest.Period_asArray[period.index].AdaptationSet_asArray[adaptationSet.index].SegmentTemplate.timescale;\n\n        isoFile = ISOBoxer.createFile();\n        createFtypBox(isoFile);\n        createMoovBox(isoFile);\n\n        arrayBuffer = isoFile.write();\n\n        return arrayBuffer;\n    }\n\n    instance = {\n        generateMoov: generateMoov\n    };\n\n    return instance;\n}\n\nMssFragmentMoovProcessor.__dashjs_factory_name = 'MssFragmentMoovProcessor';\nexport default dashjs.FactoryMaker.getClassFactory(MssFragmentMoovProcessor); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MSSFragmentMoofProcessor from './MssFragmentMoofProcessor';\nimport MSSFragmentMoovProcessor from './MssFragmentMoovProcessor';\nimport MssEvents from './MssEvents';\n\n\n// Add specific box processors not provided by codem-isoboxer library\n\nfunction arrayEqual(arr1, arr2) {\n    return (arr1.length === arr2.length) && arr1.every(function (element, index) {\n        return element === arr2[index];\n    });\n}\n\nfunction saioProcessor() {\n    this._procFullBox();\n    if (this.flags & 1) {\n        this._procField('aux_info_type', 'uint', 32);\n        this._procField('aux_info_type_parameter', 'uint', 32);\n    }\n    this._procField('entry_count', 'uint', 32);\n    this._procFieldArray('offset', this.entry_count, 'uint', (this.version === 1) ? 64 : 32);\n}\n\nfunction saizProcessor() {\n    this._procFullBox();\n    if (this.flags & 1) {\n        this._procField('aux_info_type', 'uint', 32);\n        this._procField('aux_info_type_parameter', 'uint', 32);\n    }\n    this._procField('default_sample_info_size', 'uint', 8);\n    this._procField('sample_count', 'uint', 32);\n    if (this.default_sample_info_size === 0) {\n        this._procFieldArray('sample_info_size', this.sample_count, 'uint', 8);\n    }\n}\n\nfunction sencProcessor() {\n    this._procFullBox();\n    this._procField('sample_count', 'uint', 32);\n    if (this.flags & 1) {\n        this._procField('IV_size', 'uint', 8);\n    }\n    this._procEntries('entry', this.sample_count, function (entry) {\n        this._procEntryField(entry, 'InitializationVector', 'data', 8);\n        if (this.flags & 2) {\n            this._procEntryField(entry, 'NumberOfEntries', 'uint', 16);\n            this._procSubEntries(entry, 'clearAndCryptedData', entry.NumberOfEntries, function (clearAndCryptedData) {\n                this._procEntryField(clearAndCryptedData, 'BytesOfClearData', 'uint', 16);\n                this._procEntryField(clearAndCryptedData, 'BytesOfEncryptedData', 'uint', 32);\n            });\n        }\n    });\n}\n\nfunction uuidProcessor() {\n    let tfxdUserType = [0x6D, 0x1D, 0x9B, 0x05, 0x42, 0xD5, 0x44, 0xE6, 0x80, 0xE2, 0x14, 0x1D, 0xAF, 0xF7, 0x57, 0xB2];\n    let tfrfUserType = [0xD4, 0x80, 0x7E, 0xF2, 0xCA, 0x39, 0x46, 0x95, 0x8E, 0x54, 0x26, 0xCB, 0x9E, 0x46, 0xA7, 0x9F];\n    let sepiffUserType = [0xA2, 0x39, 0x4F, 0x52, 0x5A, 0x9B, 0x4f, 0x14, 0xA2, 0x44, 0x6C, 0x42, 0x7C, 0x64, 0x8D, 0xF4];\n\n    if (arrayEqual(this.usertype, tfxdUserType)) {\n        this._procFullBox();\n        if (this._parsing) {\n            this.type = 'tfxd';\n        }\n        this._procField('fragment_absolute_time', 'uint', (this.version === 1) ? 64 : 32);\n        this._procField('fragment_duration', 'uint', (this.version === 1) ? 64 : 32);\n    }\n\n    if (arrayEqual(this.usertype, tfrfUserType)) {\n        this._procFullBox();\n        if (this._parsing) {\n            this.type = 'tfrf';\n        }\n        this._procField('fragment_count', 'uint', 8);\n        this._procEntries('entry', this.fragment_count, function (entry) {\n            this._procEntryField(entry, 'fragment_absolute_time', 'uint', (this.version === 1) ? 64 : 32);\n            this._procEntryField(entry, 'fragment_duration', 'uint', (this.version === 1) ? 64 : 32);\n        });\n    }\n\n    if (arrayEqual(this.usertype, sepiffUserType)) {\n        if (this._parsing) {\n            this.type = 'sepiff';\n        }\n        sencProcessor.call(this);\n    }\n}\n\nfunction MssFragmentProcessor(config) {\n\n    config = config || {};\n    const context = this.context;\n    const metricsModel = config.metricsModel;\n    const playbackController = config.playbackController;\n    const eventBus = config.eventBus;\n    const protectionController = config.protectionController;\n    const ISOBoxer = config.ISOBoxer;\n    const debug = config.debug;\n    let mssFragmentMoovProcessor,\n        mssFragmentMoofProcessor,\n        instance;\n\n    function setup() {\n        ISOBoxer.addBoxProcessor('uuid', uuidProcessor);\n        ISOBoxer.addBoxProcessor('saio', saioProcessor);\n        ISOBoxer.addBoxProcessor('saiz', saizProcessor);\n        ISOBoxer.addBoxProcessor('senc', sencProcessor);\n\n        mssFragmentMoovProcessor = MSSFragmentMoovProcessor(context).create({protectionController: protectionController,\n            constants: config.constants, ISOBoxer: ISOBoxer});\n\n        mssFragmentMoofProcessor = MSSFragmentMoofProcessor(context).create({\n                metricsModel: metricsModel,\n                playbackController: playbackController,\n                ISOBoxer: ISOBoxer,\n                eventBus: eventBus,\n                debug: debug,\n                errHandler: config.errHandler\n            });\n    }\n\n    function generateMoov(rep) {\n        return mssFragmentMoovProcessor.generateMoov(rep);\n    }\n\n    function processFragment(e, sp) {\n        if (!e || !e.request || !e.response) {\n            throw new Error('e parameter is missing or malformed');\n        }\n\n        let request = e.request;\n\n        if (request.type === 'MediaSegment') {\n            // it's a MediaSegment, let's convert fragment\n            mssFragmentMoofProcessor.convertFragment(e, sp);\n\n        } else if (request.type === 'FragmentInfoSegment') {\n\n            // it's a FragmentInfo, ask relative fragment info controller to handle it\n            eventBus.trigger(MssEvents.FRAGMENT_INFO_LOADING_COMPLETED, {\n                fragmentInfo: e,\n                streamProcessor: sp\n            });\n\n            // Change the sender value to stop event to be propagated (fragment info must not be added to buffer)\n            e.sender = null;\n        }\n    }\n\n    instance = {\n        generateMoov: generateMoov,\n        processFragment: processFragment\n    };\n\n    setup();\n\n    return instance;\n}\n\nMssFragmentProcessor.__dashjs_factory_name = 'MssFragmentProcessor';\nexport default dashjs.FactoryMaker.getClassFactory(MssFragmentProcessor); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DataChunk from '../streaming/vo/DataChunk';\nimport FragmentRequest from '../streaming/vo/FragmentRequest';\nimport MssFragmentInfoController from './MssFragmentInfoController';\nimport MssFragmentProcessor from './MssFragmentProcessor';\nimport MssParser from './parser/MssParser';\nimport MssErrors from './errors/MssErrors';\nimport DashJSError from '../streaming/vo/DashJSError';\n\nfunction MssHandler(config) {\n\n    config = config || {};\n    let context = this.context;\n    let eventBus = config.eventBus;\n    const events = config.events;\n    const constants = config.constants;\n    const initSegmentType = config.initSegmentType;\n    let metricsModel = config.metricsModel;\n    let playbackController = config.playbackController;\n    let protectionController = config.protectionController;\n    let mssFragmentProcessor = MssFragmentProcessor(context).create({\n        metricsModel: metricsModel,\n        playbackController: playbackController,\n        protectionController: protectionController,\n        eventBus: eventBus,\n        constants: constants,\n        ISOBoxer: config.ISOBoxer,\n        debug: config.debug,\n        errHandler: config.errHandler\n    });\n    let mssParser,\n        instance;\n\n    function setup() {}\n\n    function onInitializationRequested(e) {\n        let streamProcessor = e.sender.getStreamProcessor();\n        let request = new FragmentRequest();\n        let representationController = streamProcessor.getRepresentationController();\n        let representation = representationController.getCurrentRepresentation();\n\n        request.mediaType = representation.adaptation.type;\n        request.type = initSegmentType;\n        request.range = representation.range;\n        request.quality = representation.index;\n        request.mediaInfo = streamProcessor.getMediaInfo();\n        request.representationId = representation.id;\n\n        const chunk = createDataChunk(request, streamProcessor.getStreamInfo().id, e.type !== events.FRAGMENT_LOADING_PROGRESS);\n\n        try {\n            // Generate initialization segment (moov)\n            chunk.bytes = mssFragmentProcessor.generateMoov(representation);\n        } catch (e) {\n            config.errHandler.error(new DashJSError(e.code, e.message, e.data));\n        }\n\n        eventBus.trigger(events.INIT_FRAGMENT_LOADED, {\n            chunk: chunk,\n            fragmentModel: streamProcessor.getFragmentModel()\n        });\n\n        // Change the sender value to stop event to be propagated\n        e.sender = null;\n    }\n\n    function createDataChunk(request, streamId, endFragment) {\n        const chunk = new DataChunk();\n\n        chunk.streamId = streamId;\n        chunk.mediaInfo = request.mediaInfo;\n        chunk.segmentType = request.type;\n        chunk.start = request.startTime;\n        chunk.duration = request.duration;\n        chunk.end = chunk.start + chunk.duration;\n        chunk.index = request.index;\n        chunk.quality = request.quality;\n        chunk.representationId = request.representationId;\n        chunk.endFragment = endFragment;\n\n        return chunk;\n    }\n\n    function startFragmentInfoControllers() {\n\n        let streamController = playbackController.getStreamController();\n        if (!streamController) {\n            return;\n        }\n\n        // Create MssFragmentInfoControllers for each StreamProcessor of active stream (only for audio, video or fragmentedText)\n        let processors = streamController.getActiveStreamProcessors();\n        processors.forEach(function (processor) {\n            if (processor.getType() === constants.VIDEO ||\n                processor.getType() === constants.AUDIO ||\n                processor.getType() === constants.FRAGMENTED_TEXT) {\n\n                // Check MssFragmentInfoController already registered to StreamProcessor\n                let i;\n                let alreadyRegistered = false;\n                let externalControllers = processor.getExternalControllers();\n                for (i = 0; i < externalControllers.length; i++) {\n                    if (externalControllers[i].controllerType &&\n                        externalControllers[i].controllerType === 'MssFragmentInfoController') {\n                        alreadyRegistered = true;\n                    }\n                }\n\n                if (!alreadyRegistered) {\n                    let fragmentInfoController = MssFragmentInfoController(context).create({\n                        streamProcessor: processor,\n                        eventBus: eventBus,\n                        metricsModel: metricsModel,\n                        playbackController: playbackController,\n                        baseURLController: config.baseURLController,\n                        ISOBoxer: config.ISOBoxer,\n                        debug: config.debug\n                    });\n                    fragmentInfoController.initialize();\n                    fragmentInfoController.start();\n                }\n            }\n        });\n    }\n\n    function onSegmentMediaLoaded(e) {\n        if (e.error) {\n            return;\n        }\n        // Process moof to transcode it from MSS to DASH\n        let streamProcessor = e.sender.getStreamProcessor();\n        mssFragmentProcessor.processFragment(e, streamProcessor);\n\n        // Start MssFragmentInfoControllers in case of start-over streams\n        let streamInfo = streamProcessor.getStreamInfo();\n        if (!streamInfo.manifestInfo.isDynamic && streamInfo.manifestInfo.DVRWindowSize !== Infinity) {\n            startFragmentInfoControllers();\n        }\n    }\n\n    function onPlaybackPaused() {\n        if (playbackController.getIsDynamic() && playbackController.getTime() !== 0) {\n            startFragmentInfoControllers();\n        }\n    }\n\n    function onPlaybackSeekAsked() {\n        if (playbackController.getIsDynamic() && playbackController.getTime() !== 0) {\n            startFragmentInfoControllers();\n        }\n    }\n\n    function onTTMLPreProcess(ttmlSubtitles) {\n        if (!ttmlSubtitles || !ttmlSubtitles.data) {\n            return;\n        }\n\n        ttmlSubtitles.data = ttmlSubtitles.data.replace(/http:\\/\\/www.w3.org\\/2006\\/10\\/ttaf1/gi, 'http://www.w3.org/ns/ttml');\n    }\n\n    function registerEvents() {\n        eventBus.on(events.INIT_REQUESTED, onInitializationRequested, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\n        eventBus.on(events.PLAYBACK_PAUSED, onPlaybackPaused, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\n        eventBus.on(events.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\n        eventBus.on(events.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\n        eventBus.on(events.TTML_TO_PARSE, onTTMLPreProcess, instance);\n    }\n\n    function reset() {\n        eventBus.off(events.INIT_REQUESTED, onInitializationRequested, this);\n        eventBus.off(events.PLAYBACK_PAUSED, onPlaybackPaused, this);\n        eventBus.off(events.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, this);\n        eventBus.off(events.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, this);\n        eventBus.off(events.TTML_TO_PARSE, onTTMLPreProcess, this);\n    }\n\n    function createMssParser() {\n        mssParser = MssParser(context).create(config);\n        return mssParser;\n    }\n\n    instance = {\n        reset: reset,\n        createMssParser: createMssParser,\n        registerEvents: registerEvents\n    };\n\n    setup();\n\n    return instance;\n}\n\nMssHandler.__dashjs_factory_name = 'MssHandler';\nconst factory = dashjs.FactoryMaker.getClassFactory(MssHandler); /* jshint ignore:line */\nfactory.errors = MssErrors;\ndashjs.FactoryMaker.updateClassFactory(MssHandler.__dashjs_factory_name, factory); /* jshint ignore:line */\nexport default factory; /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport ErrorsBase from '../../core/errors/ErrorsBase';\n/**\n * @class\n *\n */\nclass MssErrors extends ErrorsBase {\n\tconstructor () {\n        super();\n        /**\n         * Error code returned when no tfrf box is detected in MSS live stream\n         */\n        this.MSS_NO_TFRF_CODE = 200;\n        this.MSS_UNSUPPORTED_CODEC_CODE = 201;\n        /**\n         * Error message returned when no tfrf box is detected in MSS live stream\n         */\n        this.MSS_NO_TFRF_MESSAGE = 'Missing tfrf in live media segment';\n        this.MSS_UNSUPPORTED_CODEC_MESSAGE = 'Unsupported codec';\n    }\n}\n\nlet mssErrors = new MssErrors();\nexport default mssErrors;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MssHandler from './MssHandler';\n\n// Shove both of these into the global scope\nvar context = (typeof window !== 'undefined' && window) || global;\n\nvar dashjs = context.dashjs;\nif (!dashjs) {\n    dashjs = context.dashjs = {};\n}\n\ndashjs.MssHandler = MssHandler;\n\nexport default dashjs;\nexport { MssHandler };\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @module MssParser\n * @param {Object} config object\n */\nfunction MssParser(config) {\n    config = config || {};\n    const BASE64 = config.BASE64;\n    const debug = config.debug;\n    const constants = config.constants;\n    const manifestModel = config.manifestModel;\n\n    const DEFAULT_TIME_SCALE = 10000000.0;\n    const SUPPORTED_CODECS = ['AAC', 'AACL', 'AVC1', 'H264', 'TTML', 'DFXP'];\n    // MPEG-DASH Role and accessibility mapping according to ETSI TS 103 285 v1.1.1 (section 7.1.2)\n    const ROLE = {\n        'SUBT': 'alternate',\n        'CAPT': 'alternate', // 'CAPT' is commonly equivalent to 'SUBT'\n        'DESC': 'main'\n    };\n    const ACCESSIBILITY = {\n        'DESC': '2'\n    };\n    const samplingFrequencyIndex = {\n        96000: 0x0,\n        88200: 0x1,\n        64000: 0x2,\n        48000: 0x3,\n        44100: 0x4,\n        32000: 0x5,\n        24000: 0x6,\n        22050: 0x7,\n        16000: 0x8,\n        12000: 0x9,\n        11025: 0xA,\n        8000: 0xB,\n        7350: 0xC\n    };\n    const mimeTypeMap = {\n        'video': 'video/mp4',\n        'audio': 'audio/mp4',\n        'text': 'application/mp4'\n    };\n\n    let instance,\n        logger,\n        mediaPlayerModel;\n\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        mediaPlayerModel = config.mediaPlayerModel;\n    }\n\n    function mapPeriod(smoothStreamingMedia, timescale) {\n        const period = {};\n        let streams,\n            adaptation;\n\n        // For each StreamIndex node, create an AdaptationSet element\n        period.AdaptationSet_asArray = [];\n        streams = smoothStreamingMedia.getElementsByTagName('StreamIndex');\n        for (let i = 0; i < streams.length; i++) {\n            adaptation = mapAdaptationSet(streams[i], timescale);\n            if (adaptation !== null) {\n                period.AdaptationSet_asArray.push(adaptation);\n            }\n        }\n\n        if (period.AdaptationSet_asArray.length > 0) {\n            period.AdaptationSet = (period.AdaptationSet_asArray.length > 1) ? period.AdaptationSet_asArray : period.AdaptationSet_asArray[0];\n        }\n\n        return period;\n    }\n\n    function mapAdaptationSet(streamIndex, timescale) {\n        const adaptationSet = {};\n        const representations = [];\n        let segmentTemplate;\n        let qualityLevels,\n            representation,\n            segments,\n            i;\n\n        adaptationSet.id = streamIndex.getAttribute('Name') ? streamIndex.getAttribute('Name') : streamIndex.getAttribute('Type');\n        adaptationSet.contentType = streamIndex.getAttribute('Type');\n        adaptationSet.lang = streamIndex.getAttribute('Language') || 'und';\n        adaptationSet.mimeType = mimeTypeMap[adaptationSet.contentType];\n        adaptationSet.subType = streamIndex.getAttribute('Subtype');\n        adaptationSet.maxWidth = streamIndex.getAttribute('MaxWidth');\n        adaptationSet.maxHeight = streamIndex.getAttribute('MaxHeight');\n\n        // Map subTypes to MPEG-DASH AdaptationSet role and accessibility (see ETSI TS 103 285 v1.1.1, section 7.1.2)\n        if (adaptationSet.subType) {\n            if (ROLE[adaptationSet.subType]) {\n                let role = {\n                    schemeIdUri: 'urn:mpeg:dash:role:2011',\n                    value: ROLE[adaptationSet.subType]\n                };\n                adaptationSet.Role = role;\n                adaptationSet.Role_asArray = [role];\n            }\n            if (ACCESSIBILITY[adaptationSet.subType]) {\n                let accessibility = {\n                    schemeIdUri: 'urn:tva:metadata:cs:AudioPurposeCS:2007',\n                    value: ACCESSIBILITY[adaptationSet.subType]\n                };\n                adaptationSet.Accessibility = accessibility;\n                adaptationSet.Accessibility_asArray = [accessibility];\n            }\n        }\n\n        // Create a SegmentTemplate with a SegmentTimeline\n        segmentTemplate = mapSegmentTemplate(streamIndex, timescale);\n\n        qualityLevels = streamIndex.getElementsByTagName('QualityLevel');\n        // For each QualityLevel node, create a Representation element\n        for (i = 0; i < qualityLevels.length; i++) {\n            // Propagate BaseURL and mimeType\n            qualityLevels[i].BaseURL = adaptationSet.BaseURL;\n            qualityLevels[i].mimeType = adaptationSet.mimeType;\n\n            // Set quality level id\n            qualityLevels[i].Id = adaptationSet.id + '_' + qualityLevels[i].getAttribute('Index');\n\n            // Map Representation to QualityLevel\n            representation = mapRepresentation(qualityLevels[i], streamIndex);\n\n            if (representation !== null) {\n                // Copy SegmentTemplate into Representation\n                representation.SegmentTemplate = segmentTemplate;\n\n                representations.push(representation);\n            }\n        }\n\n        if (representations.length === 0) {\n            return null;\n        }\n\n        adaptationSet.Representation = (representations.length > 1) ? representations : representations[0];\n        adaptationSet.Representation_asArray = representations;\n\n        // Set SegmentTemplate\n        adaptationSet.SegmentTemplate = segmentTemplate;\n\n        segments = segmentTemplate.SegmentTimeline.S_asArray;\n\n        return adaptationSet;\n    }\n\n    function mapRepresentation(qualityLevel, streamIndex) {\n        const representation = {};\n        const type = streamIndex.getAttribute('Type');\n        let fourCCValue = null;\n\n        representation.id = qualityLevel.Id;\n        representation.bandwidth = parseInt(qualityLevel.getAttribute('Bitrate'), 10);\n        representation.mimeType = qualityLevel.mimeType;\n        representation.width = parseInt(qualityLevel.getAttribute('MaxWidth'), 10);\n        representation.height = parseInt(qualityLevel.getAttribute('MaxHeight'), 10);\n\n        fourCCValue = qualityLevel.getAttribute('FourCC');\n\n        // If FourCC not defined at QualityLevel level, then get it from StreamIndex level\n        if (fourCCValue === null || fourCCValue === '') {\n            fourCCValue = streamIndex.getAttribute('FourCC');\n        }\n\n        // If still not defined (optionnal for audio stream, see https://msdn.microsoft.com/en-us/library/ff728116%28v=vs.95%29.aspx),\n        // then we consider the stream is an audio AAC stream\n        if (fourCCValue === null || fourCCValue === '') {\n            if (type === 'audio') {\n                fourCCValue = 'AAC';\n            } else if (type === 'video') {\n                logger.debug('FourCC is not defined whereas it is required for a QualityLevel element for a StreamIndex of type \"video\"');\n                return null;\n            }\n        }\n\n        // Check if codec is supported\n        if (SUPPORTED_CODECS.indexOf(fourCCValue.toUpperCase()) === -1) {\n            // Do not send warning\n            logger.warn('Codec not supported: ' + fourCCValue);\n            return null;\n        }\n\n        // Get codecs value according to FourCC field\n        if (fourCCValue === 'H264' || fourCCValue === 'AVC1') {\n            representation.codecs = getH264Codec(qualityLevel);\n        } else if (fourCCValue.indexOf('AAC') >= 0) {\n            representation.codecs = getAACCodec(qualityLevel, fourCCValue);\n            representation.audioSamplingRate = parseInt(qualityLevel.getAttribute('SamplingRate'), 10);\n            representation.audioChannels = parseInt(qualityLevel.getAttribute('Channels'), 10);\n        } else if (fourCCValue.indexOf('TTML') || fourCCValue.indexOf('DFXP')) {\n            representation.codecs = constants.STPP;\n        }\n\n        representation.codecPrivateData = '' + qualityLevel.getAttribute('CodecPrivateData');\n        representation.BaseURL = qualityLevel.BaseURL;\n\n        return representation;\n    }\n\n    function getH264Codec(qualityLevel) {\n        let codecPrivateData = qualityLevel.getAttribute('CodecPrivateData').toString();\n        let nalHeader,\n            avcoti;\n\n\n        // Extract from the CodecPrivateData field the hexadecimal representation of the following\n        // three bytes in the sequence parameter set NAL unit.\n        // => Find the SPS nal header\n        nalHeader = /00000001[0-9]7/.exec(codecPrivateData);\n        // => Find the 6 characters after the SPS nalHeader (if it exists)\n        avcoti = nalHeader && nalHeader[0] ? (codecPrivateData.substr(codecPrivateData.indexOf(nalHeader[0]) + 10, 6)) : undefined;\n\n        return 'avc1.' + avcoti;\n    }\n\n    function getAACCodec(qualityLevel, fourCCValue) {\n        const samplingRate = parseInt(qualityLevel.getAttribute('SamplingRate'), 10);\n        let codecPrivateData = qualityLevel.getAttribute('CodecPrivateData').toString();\n        let objectType = 0;\n        let codecPrivateDataHex,\n            arr16,\n            indexFreq,\n            extensionSamplingFrequencyIndex;\n\n        //chrome problem, in implicit AAC HE definition, so when AACH is detected in FourCC\n        //set objectType to 5 => strange, it should be 2\n        if (fourCCValue === 'AACH') {\n            objectType = 0x05;\n        }\n        //if codecPrivateData is empty, build it :\n        if (codecPrivateData === undefined || codecPrivateData === '') {\n            objectType = 0x02; //AAC Main Low Complexity => object Type = 2\n            indexFreq = samplingFrequencyIndex[samplingRate];\n            if (fourCCValue === 'AACH') {\n                // 4 bytes :     XXXXX         XXXX          XXXX             XXXX                  XXXXX      XXX   XXXXXXX\n                //           ' ObjectType' 'Freq Index' 'Channels value'   'Extens Sampl Freq'  'ObjectType'  'GAS' 'alignment = 0'\n                objectType = 0x05; // High Efficiency AAC Profile = object Type = 5 SBR\n                codecPrivateData = new Uint8Array(4);\n                extensionSamplingFrequencyIndex = samplingFrequencyIndex[samplingRate * 2]; // in HE AAC Extension Sampling frequence\n                // equals to SamplingRate*2\n                //Freq Index is present for 3 bits in the first byte, last bit is in the second\n                codecPrivateData[0] = (objectType << 3) | (indexFreq >> 1);\n                codecPrivateData[1] = (indexFreq << 7) | (qualityLevel.Channels << 3) | (extensionSamplingFrequencyIndex >> 1);\n                codecPrivateData[2] = (extensionSamplingFrequencyIndex << 7) | (0x02 << 2); // origin object type equals to 2 => AAC Main Low Complexity\n                codecPrivateData[3] = 0x0; //alignment bits\n\n                arr16 = new Uint16Array(2);\n                arr16[0] = (codecPrivateData[0] << 8) + codecPrivateData[1];\n                arr16[1] = (codecPrivateData[2] << 8) + codecPrivateData[3];\n                //convert decimal to hex value\n                codecPrivateDataHex = arr16[0].toString(16);\n                codecPrivateDataHex = arr16[0].toString(16) + arr16[1].toString(16);\n\n            } else {\n                // 2 bytes :     XXXXX         XXXX          XXXX              XXX\n                //           ' ObjectType' 'Freq Index' 'Channels value'   'GAS = 000'\n                codecPrivateData = new Uint8Array(2);\n                //Freq Index is present for 3 bits in the first byte, last bit is in the second\n                codecPrivateData[0] = (objectType << 3) | (indexFreq >> 1);\n                codecPrivateData[1] = (indexFreq << 7) | (parseInt(qualityLevel.getAttribute('Channels'), 10) << 3);\n                // put the 2 bytes in an 16 bits array\n                arr16 = new Uint16Array(1);\n                arr16[0] = (codecPrivateData[0] << 8) + codecPrivateData[1];\n                //convert decimal to hex value\n                codecPrivateDataHex = arr16[0].toString(16);\n            }\n\n            codecPrivateData = '' + codecPrivateDataHex;\n            codecPrivateData = codecPrivateData.toUpperCase();\n            qualityLevel.setAttribute('CodecPrivateData', codecPrivateData);\n        } else if (objectType === 0) {\n            objectType = (parseInt(codecPrivateData.substr(0, 2), 16) & 0xF8) >> 3;\n        }\n\n        return 'mp4a.40.' + objectType;\n    }\n\n    function mapSegmentTemplate(streamIndex, timescale) {\n        const segmentTemplate = {};\n        let mediaUrl,\n            streamIndexTimeScale;\n\n        mediaUrl = streamIndex.getAttribute('Url').replace('{bitrate}', '$Bandwidth$');\n        mediaUrl = mediaUrl.replace('{start time}', '$Time$');\n\n        streamIndexTimeScale = streamIndex.getAttribute('TimeScale');\n        streamIndexTimeScale = streamIndexTimeScale ? parseFloat(streamIndexTimeScale) : timescale;\n\n        segmentTemplate.media = mediaUrl;\n        segmentTemplate.timescale = streamIndexTimeScale;\n\n        segmentTemplate.SegmentTimeline = mapSegmentTimeline(streamIndex, segmentTemplate.timescale);\n\n        return segmentTemplate;\n    }\n\n    function mapSegmentTimeline(streamIndex, timescale) {\n        const segmentTimeline = {};\n        const chunks = streamIndex.getElementsByTagName('c');\n        const segments = [];\n        let segment,\n            prevSegment,\n            tManifest,\n            i,j,r;\n        let duration = 0;\n\n        for (i = 0; i < chunks.length; i++) {\n            segment = {};\n\n            // Get time 't' attribute value\n            tManifest = chunks[i].getAttribute('t');\n\n            // => segment.tManifest = original timestamp value as a string (for constructing the fragment request url, see DashHandler)\n            // => segment.t = number value of timestamp (maybe rounded value, but only for 0.1 microsecond)\n            segment.tManifest = parseFloat(tManifest);\n            segment.t = parseFloat(tManifest);\n\n            // Get duration 'd' attribute value\n            segment.d = parseFloat(chunks[i].getAttribute('d'));\n\n            // If 't' not defined for first segment then t=0\n            if ((i === 0) && !segment.t) {\n                segment.t = 0;\n            }\n\n            if (i > 0) {\n                prevSegment = segments[segments.length - 1];\n                // Update previous segment duration if not defined\n                if (!prevSegment.d) {\n                    if (prevSegment.tManifest) {\n                        prevSegment.d = parseFloat(tManifest) - parseFloat(prevSegment.tManifest);\n                    } else {\n                        prevSegment.d = segment.t - prevSegment.t;\n                    }\n                    duration += prevSegment.d;\n                }\n                // Set segment absolute timestamp if not set in manifest\n                if (!segment.t) {\n                    if (prevSegment.tManifest) {\n                        segment.tManifest = parseFloat(prevSegment.tManifest) + prevSegment.d;\n                        segment.t = parseFloat(segment.tManifest);\n                    } else {\n                        segment.t = prevSegment.t + prevSegment.d;\n                    }\n                }\n            }\n\n            if (segment.d) {\n                duration += segment.d;\n            }\n\n            // Create new segment\n            segments.push(segment);\n\n            // Support for 'r' attribute (i.e. \"repeat\" as in MPEG-DASH)\n            r = parseFloat(chunks[i].getAttribute('r'));\n            if (r) {\n\n                for (j = 0; j < (r - 1); j++) {\n                    prevSegment = segments[segments.length - 1];\n                    segment = {};\n                    segment.t = prevSegment.t + prevSegment.d;\n                    segment.d = prevSegment.d;\n                    if (prevSegment.tManifest) {\n                        segment.tManifest  = parseFloat(prevSegment.tManifest) + prevSegment.d;\n                    }\n                    duration += segment.d;\n                    segments.push(segment);\n                }\n            }\n        }\n\n        segmentTimeline.S = segments;\n        segmentTimeline.S_asArray = segments;\n        segmentTimeline.duration = duration / timescale;\n\n        return segmentTimeline;\n    }\n\n    function getKIDFromProtectionHeader(protectionHeader) {\n        let prHeader,\n            wrmHeader,\n            xmlReader,\n            KID;\n\n        // Get PlayReady header as byte array (base64 decoded)\n        prHeader = BASE64.decodeArray(protectionHeader.firstChild.data);\n\n        // Get Right Management header (WRMHEADER) from PlayReady header\n        wrmHeader = getWRMHeaderFromPRHeader(prHeader);\n\n        // Convert from multi-byte to unicode\n        wrmHeader = new Uint16Array(wrmHeader.buffer);\n\n        // Convert to string\n        wrmHeader = String.fromCharCode.apply(null, wrmHeader);\n\n        // Parse <WRMHeader> to get KID field value\n        xmlReader = (new DOMParser()).parseFromString(wrmHeader, 'application/xml');\n        KID = xmlReader.querySelector('KID').textContent;\n\n        // Get KID (base64 decoded) as byte array\n        KID = BASE64.decodeArray(KID);\n\n        // Convert UUID from little-endian to big-endian\n        convertUuidEndianness(KID);\n\n        return KID;\n    }\n\n    function getWRMHeaderFromPRHeader(prHeader) {\n        let length,\n            recordCount,\n            recordType,\n            recordLength,\n            recordValue;\n        let i = 0;\n\n        // Parse PlayReady header\n\n        // Length - 32 bits (LE format)\n        length = (prHeader[i + 3] << 24) + (prHeader[i + 2] << 16) + (prHeader[i + 1] << 8) + prHeader[i];\n        i += 4;\n\n        // Record count - 16 bits (LE format)\n        recordCount = (prHeader[i + 1] << 8) + prHeader[i];\n        i += 2;\n\n        // Parse records\n        while (i < prHeader.length) {\n            // Record type - 16 bits (LE format)\n            recordType = (prHeader[i + 1] << 8) + prHeader[i];\n            i += 2;\n\n            // Check if Rights Management header (record type = 0x01)\n            if (recordType === 0x01) {\n\n                // Record length - 16 bits (LE format)\n                recordLength = (prHeader[i + 1] << 8) + prHeader[i];\n                i += 2;\n\n                // Record value => contains <WRMHEADER>\n                recordValue = new Uint8Array(recordLength);\n                recordValue.set(prHeader.subarray(i, i + recordLength));\n                return recordValue;\n            }\n        }\n\n        return null;\n    }\n\n    function convertUuidEndianness(uuid) {\n        swapBytes(uuid, 0, 3);\n        swapBytes(uuid, 1, 2);\n        swapBytes(uuid, 4, 5);\n        swapBytes(uuid, 6, 7);\n    }\n\n    function swapBytes(bytes, pos1, pos2) {\n        const temp = bytes[pos1];\n        bytes[pos1] = bytes[pos2];\n        bytes[pos2] = temp;\n    }\n\n\n    function createPRContentProtection(protectionHeader) {\n        let pro = {\n            __text: protectionHeader.firstChild.data,\n            __prefix: 'mspr'\n        };\n        return {\n            schemeIdUri: 'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95',\n            value: 'com.microsoft.playready',\n            pro: pro,\n            pro_asArray: pro\n        };\n    }\n\n    function createWidevineContentProtection(protectionHeader, KID) {\n        // Create Widevine CENC header (Protocol Buffer) with KID value\n        const wvCencHeader = new Uint8Array(2 + KID.length);\n        wvCencHeader[0] = 0x12;\n        wvCencHeader[1] = 0x10;\n        wvCencHeader.set(KID, 2);\n\n        // Create a pssh box\n        const length = 12 /* box length, type, version and flags */ + 16 /* SystemID */ + 4 /* data length */ + wvCencHeader.length;\n        let pssh = new Uint8Array(length);\n        let i = 0;\n\n        // Set box length value\n        pssh[i++] = (length & 0xFF000000) >> 24;\n        pssh[i++] = (length & 0x00FF0000) >> 16;\n        pssh[i++] = (length & 0x0000FF00) >> 8;\n        pssh[i++] = (length & 0x000000FF);\n\n        // Set type ('pssh'), version (0) and flags (0)\n        pssh.set([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00], i);\n        i += 8;\n\n        // Set SystemID ('edef8ba9-79d6-4ace-a3c8-27dcd51d21ed')\n        pssh.set([0xed, 0xef, 0x8b, 0xa9,  0x79, 0xd6, 0x4a, 0xce, 0xa3, 0xc8, 0x27, 0xdc, 0xd5, 0x1d, 0x21, 0xed], i);\n        i += 16;\n\n        // Set data length value\n        pssh[i++] = (wvCencHeader.length & 0xFF000000) >> 24;\n        pssh[i++] = (wvCencHeader.length & 0x00FF0000) >> 16;\n        pssh[i++] = (wvCencHeader.length & 0x0000FF00) >> 8;\n        pssh[i++] = (wvCencHeader.length & 0x000000FF);\n\n        // Copy Widevine CENC header\n        pssh.set(wvCencHeader, i);\n\n        // Convert to BASE64 string\n        pssh = String.fromCharCode.apply(null, pssh);\n        pssh = BASE64.encodeASCII(pssh);\n\n        return {\n            schemeIdUri: 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed',\n            value: 'com.widevine.alpha',\n            pssh: {\n                __text: pssh\n            }\n        };\n    }\n\n    function processManifest(xmlDoc, manifestLoadedTime) {\n        const manifest = {};\n        const contentProtections = [];\n        const smoothStreamingMedia = xmlDoc.getElementsByTagName('SmoothStreamingMedia')[0];\n        const protection = xmlDoc.getElementsByTagName('Protection')[0];\n        let protectionHeader = null;\n        let period,\n            adaptations,\n            contentProtection,\n            KID,\n            timestampOffset,\n            startTime,\n            segments,\n            timescale,\n            i, j;\n\n        // Set manifest node properties\n        manifest.protocol = 'MSS';\n        manifest.profiles = 'urn:mpeg:dash:profile:isoff-live:2011';\n        manifest.type = smoothStreamingMedia.getAttribute('IsLive') === 'TRUE' ? 'dynamic' : 'static';\n        timescale =  smoothStreamingMedia.getAttribute('TimeScale');\n        manifest.timescale = timescale ? parseFloat(timescale) : DEFAULT_TIME_SCALE;\n        let dvrWindowLength = parseFloat(smoothStreamingMedia.getAttribute('DVRWindowLength'));\n        if (dvrWindowLength === 0 && smoothStreamingMedia.getAttribute('CanSeek') === 'TRUE') {\n            dvrWindowLength = Infinity;\n        }\n        if (dvrWindowLength > 0) {\n            manifest.timeShiftBufferDepth = dvrWindowLength / manifest.timescale;\n        }\n\n        let duration = parseFloat(smoothStreamingMedia.getAttribute('Duration'));\n        manifest.mediaPresentationDuration = (duration === 0) ? Infinity : duration / manifest.timescale;\n        manifest.minBufferTime = mediaPlayerModel.getStableBufferTime();\n        manifest.ttmlTimeIsRelative = true;\n\n        // Live manifest with Duration = start-over\n        if (manifest.type === 'dynamic' && duration > 0) {\n            manifest.type = 'static';\n            // We set timeShiftBufferDepth to initial duration, to be used by MssFragmentController to update segment timeline\n            manifest.timeShiftBufferDepth = duration / manifest.timescale;\n            // Duration will be set according to current segment timeline duration (see below)\n        }\n\n        // In case of live streams, set availabilityStartTime property according to DVRWindowLength\n        if (manifest.type === 'dynamic'  && manifest.timeShiftBufferDepth < Infinity) {\n            manifest.availabilityStartTime = new Date(manifestLoadedTime.getTime() - (manifest.timeShiftBufferDepth * 1000));\n            manifest.refreshManifestOnSwitchTrack = true;\n            manifest.doNotUpdateDVRWindowOnBufferUpdated = true; // DVRWindow is update by MssFragmentMoofPocessor based on tfrf boxes\n            manifest.ignorePostponeTimePeriod = true; // Never update manifest\n        }\n\n        // Map period node to manifest root node\n        manifest.Period = mapPeriod(smoothStreamingMedia, manifest.timescale);\n        manifest.Period_asArray = [manifest.Period];\n\n        // Initialize period start time\n        period = manifest.Period;\n        period.start = 0;\n\n        // Uncomment to test live to static manifests\n        // if (manifest.type !== 'static') {\n        //     manifest.type = 'static';\n        //     manifest.mediaPresentationDuration = manifest.timeShiftBufferDepth;\n        //     manifest.timeShiftBufferDepth = null;\n        // }\n\n        // ContentProtection node\n        if (protection !== undefined) {\n            protectionHeader = xmlDoc.getElementsByTagName('ProtectionHeader')[0];\n\n            // Some packagers put newlines into the ProtectionHeader base64 string, which is not good\n            // because this cannot be correctly parsed. Let's just filter out any newlines found in there.\n            protectionHeader.firstChild.data = protectionHeader.firstChild.data.replace(/\\n|\\r/g, '');\n\n            // Get KID (in CENC format) from protection header\n            KID = getKIDFromProtectionHeader(protectionHeader);\n\n            // Create ContentProtection for PlayReady\n            contentProtection = createPRContentProtection(protectionHeader);\n            contentProtection['cenc:default_KID'] = KID;\n            contentProtections.push(contentProtection);\n\n            // Create ContentProtection for Widevine (as a CENC protection)\n            contentProtection = createWidevineContentProtection(protectionHeader, KID);\n            contentProtection['cenc:default_KID'] = KID;\n            contentProtections.push(contentProtection);\n\n            manifest.ContentProtection = contentProtections;\n            manifest.ContentProtection_asArray = contentProtections;\n        }\n\n        adaptations = period.AdaptationSet_asArray;\n\n        for (i = 0; i < adaptations.length; i += 1) {\n            adaptations[i].SegmentTemplate.initialization = '$Bandwidth$';\n            // Propagate content protection information into each adaptation\n            if (manifest.ContentProtection !== undefined) {\n                adaptations[i].ContentProtection = manifest.ContentProtection;\n                adaptations[i].ContentProtection_asArray = manifest.ContentProtection_asArray;\n            }\n\n            if (manifest.type === 'dynamic') {\n                // Set availabilityStartTime for infinite DVR Window from segment timeline duration\n                if (manifest.timeShiftBufferDepth === Infinity) {\n                    manifest.availabilityStartTime = new Date(manifestLoadedTime.getTime() - (adaptations[i].SegmentTemplate.SegmentTimeline.duration * 1000));\n                }\n                // Match timeShiftBufferDepth to video segment timeline duration\n                if (manifest.timeShiftBufferDepth > 0 &&\n                    manifest.timeShiftBufferDepth !== Infinity &&\n                    adaptations[i].contentType === 'video' &&\n                    manifest.timeShiftBufferDepth > adaptations[i].SegmentTemplate.SegmentTimeline.duration) {\n                    manifest.timeShiftBufferDepth = adaptations[i].SegmentTemplate.SegmentTimeline.duration;\n                }\n            }\n        }\n\n        if (manifest.timeShiftBufferDepth < manifest.minBufferTime) {\n            manifest.minBufferTime = manifest.timeShiftBufferDepth;\n        }\n\n        // Delete Content Protection under root manifest node\n        delete manifest.ContentProtection;\n        delete manifest.ContentProtection_asArray;\n\n        // In case of VOD streams, check if start time is greater than 0\n        // Then determine timestamp offset according to higher audio/video start time\n        // (use case = live stream delinearization)\n        if (manifest.type === 'static') {\n            // In case of start-over stream and manifest reloading (due to track switch)\n            // we consider previous timestampOffset to keep timelines synchronized\n            var prevManifest = manifestModel.getValue();\n            if (prevManifest && prevManifest.timestampOffset) {\n                timestampOffset = prevManifest.timestampOffset;\n            } else {\n                for (i = 0; i < adaptations.length; i++) {\n                    if (adaptations[i].contentType === 'audio' || adaptations[i].contentType === 'video') {\n                        segments = adaptations[i].SegmentTemplate.SegmentTimeline.S_asArray;\n                        startTime = segments[0].t / adaptations[i].SegmentTemplate.timescale;\n                        if (timestampOffset === undefined) {\n                            timestampOffset = startTime;\n                        }\n                        timestampOffset = Math.min(timestampOffset, startTime);\n                        // Correct content duration according to minimum adaptation's segment timeline duration\n                        // in order to force <video> element sending 'ended' event\n                        manifest.mediaPresentationDuration = Math.min(manifest.mediaPresentationDuration, adaptations[i].SegmentTemplate.SegmentTimeline.duration);\n                    }\n                }\n            }\n            // Patch segment templates timestamps and determine period start time (since audio/video should not be aligned to 0)\n            if (timestampOffset > 0) {\n                manifest.timestampOffset = timestampOffset;\n                for (i = 0; i < adaptations.length; i++) {\n                    segments = adaptations[i].SegmentTemplate.SegmentTimeline.S_asArray;\n                    for (j = 0; j < segments.length; j++) {\n                        if (!segments[j].tManifest) {\n                            segments[j].tManifest = segments[j].t;\n                        }\n                        segments[j].t -= (timestampOffset * adaptations[i].SegmentTemplate.timescale);\n                    }\n                    if (adaptations[i].contentType === 'audio' || adaptations[i].contentType === 'video') {\n                        period.start = Math.max(segments[0].t, period.start);\n                        adaptations[i].SegmentTemplate.presentationTimeOffset = period.start;\n                    }\n                }\n                period.start /= manifest.timescale;\n            }\n        }\n\n        // Floor the duration to get around precision differences between segments timestamps and MSE buffer timestamps\n        // and the avoid 'ended' event not being raised\n        manifest.mediaPresentationDuration = Math.floor(manifest.mediaPresentationDuration * 1000) / 1000;\n        period.duration = manifest.mediaPresentationDuration;\n\n        return manifest;\n    }\n\n    function parseDOM(data) {\n        let xmlDoc = null;\n\n        if (window.DOMParser) {\n            const parser = new window.DOMParser();\n\n            xmlDoc = parser.parseFromString(data, 'text/xml');\n            if (xmlDoc.getElementsByTagName('parsererror').length > 0) {\n                throw new Error('parsing the manifest failed');\n            }\n        }\n\n        return xmlDoc;\n    }\n\n    function getMatchers() {\n        return null;\n    }\n\n    function getIron() {\n        return null;\n    }\n\n    function internalParse(data) {\n        let xmlDoc = null;\n        let manifest = null;\n\n        const startTime = window.performance.now();\n\n        // Parse the MSS XML manifest\n        xmlDoc = parseDOM(data);\n\n        const xmlParseTime = window.performance.now();\n\n        if (xmlDoc === null) {\n            return null;\n        }\n\n        // Convert MSS manifest into DASH manifest\n        manifest = processManifest(xmlDoc, new Date());\n\n        const mss2dashTime = window.performance.now();\n\n        logger.info('Parsing complete: (xmlParsing: ' + (xmlParseTime - startTime).toPrecision(3) + 'ms, mss2dash: ' + (mss2dashTime - xmlParseTime).toPrecision(3) + 'ms, total: ' + ((mss2dashTime - startTime) / 1000).toPrecision(3) + 's)');\n\n        return manifest;\n    }\n\n    instance = {\n        parse: internalParse,\n        getMatchers: getMatchers,\n        getIron: getIron\n    };\n\n    setup();\n\n    return instance;\n}\n\nMssParser.__dashjs_factory_name = 'MssParser';\nexport default dashjs.FactoryMaker.getClassFactory(MssParser); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from '../core/events/EventsBase';\n/**\n * @class\n *\n */\nclass MediaPlayerEvents extends EventsBase {\n\n    /**\n     * @description Public facing external events to be used when developing a player that implements dash.js.\n     */\n    constructor() {\n        super();\n        /**\n         * Triggered when playback will not start yet\n         * as the MPD's availabilityStartTime is in the future.\n         * Check delay property in payload to determine time before playback will start.\n         */\n        this.AST_IN_FUTURE = 'astInFuture';\n\n        /**\n         * Triggered when the video element's buffer state changes to stalled.\n         * Check mediaType in payload to determine type (Video, Audio, FragmentedText).\n         * @event MediaPlayerEvents#BUFFER_EMPTY\n         */\n        this.BUFFER_EMPTY = 'bufferStalled';\n\n        /**\n         * Triggered when the video element's buffer state changes to loaded.\n         * Check mediaType in payload to determine type (Video, Audio, FragmentedText).\n         * @event MediaPlayerEvents#BUFFER_LOADED\n         */\n        this.BUFFER_LOADED = 'bufferLoaded';\n\n        /**\n         * Triggered when the video element's buffer state changes, either stalled or loaded. Check payload for state.\n         * @event MediaPlayerEvents#BUFFER_LEVEL_STATE_CHANGED\n         */\n        this.BUFFER_LEVEL_STATE_CHANGED = 'bufferStateChanged';\n\n        /**\n         * Triggered when there is an error from the element or MSE source buffer.\n         * @event MediaPlayerEvents#ERROR\n         */\n        this.ERROR = 'error';\n\n        /**\n         * Triggered when a fragment download has completed.\n         * @event MediaPlayerEvents#FRAGMENT_LOADING_COMPLETED\n         */\n        this.FRAGMENT_LOADING_COMPLETED = 'fragmentLoadingCompleted';\n\n        /**\n         * Triggered when a partial fragment download has completed.\n         * @event MediaPlayerEvents#FRAGMENT_LOADING_PROGRESS\n         */\n        this.FRAGMENT_LOADING_PROGRESS = 'fragmentLoadingProgress';\n        /**\n         * Triggered when a fragment download has started.\n         * @event MediaPlayerEvents#FRAGMENT_LOADING_STARTED\n         */\n        this.FRAGMENT_LOADING_STARTED = 'fragmentLoadingStarted';\n\n        /**\n         * Triggered when a fragment download is abandoned due to detection of slow download base on the ABR abandon rule..\n         * @event MediaPlayerEvents#FRAGMENT_LOADING_ABANDONED\n         */\n        this.FRAGMENT_LOADING_ABANDONED = 'fragmentLoadingAbandoned';\n\n        /**\n         * Triggered when {@link module:Debug} logger methods are called.\n         * @event MediaPlayerEvents#LOG\n         */\n        this.LOG = 'log';\n\n        //TODO refactor with internal event\n        /**\n         * Triggered when the manifest load is complete\n         * @event MediaPlayerEvents#MANIFEST_LOADED\n         */\n        this.MANIFEST_LOADED = 'manifestLoaded';\n\n        /**\n         * Triggered anytime there is a change to the overall metrics.\n         * @event MediaPlayerEvents#METRICS_CHANGED\n         */\n        this.METRICS_CHANGED = 'metricsChanged';\n\n        /**\n         * Triggered when an individual metric is added, updated or cleared.\n         * @event MediaPlayerEvents#METRIC_CHANGED\n         */\n        this.METRIC_CHANGED = 'metricChanged';\n\n        /**\n         * Triggered every time a new metric is added.\n         * @event MediaPlayerEvents#METRIC_ADDED\n         */\n        this.METRIC_ADDED = 'metricAdded';\n\n        /**\n         * Triggered every time a metric is updated.\n         * @event MediaPlayerEvents#METRIC_UPDATED\n         */\n        this.METRIC_UPDATED = 'metricUpdated';\n\n        /**\n         * Triggered at the stream end of a period.\n         * @event MediaPlayerEvents#PERIOD_SWITCH_COMPLETED\n         */\n        this.PERIOD_SWITCH_COMPLETED = 'periodSwitchCompleted';\n\n        /**\n         * Triggered when a new period starts.\n         * @event MediaPlayerEvents#PERIOD_SWITCH_STARTED\n         */\n        this.PERIOD_SWITCH_STARTED = 'periodSwitchStarted';\n\n        /**\n         * Triggered when an ABR up /down switch is initiated; either by user in manual mode or auto mode via ABR rules.\n         * @event MediaPlayerEvents#QUALITY_CHANGE_REQUESTED\n         */\n        this.QUALITY_CHANGE_REQUESTED = 'qualityChangeRequested';\n\n        /**\n         * Triggered when the new ABR quality is being rendered on-screen.\n         * @event MediaPlayerEvents#QUALITY_CHANGE_RENDERED\n         */\n        this.QUALITY_CHANGE_RENDERED = 'qualityChangeRendered';\n\n        /**\n         * Triggered when the new track is being rendered.\n         * @event MediaPlayerEvents#TRACK_CHANGE_RENDERED\n         */\n        this.TRACK_CHANGE_RENDERED = 'trackChangeRendered';\n\n        /**\n         * Triggered when the source is setup and ready.\n         * @event MediaPlayerEvents#SOURCE_INITIALIZED\n         */\n        this.SOURCE_INITIALIZED = 'sourceInitialized';\n\n        /**\n         * Triggered when a stream (period) is loaded\n         * @event MediaPlayerEvents#STREAM_INITIALIZED\n         */\n        this.STREAM_INITIALIZED = 'streamInitialized';\n\n        /**\n         * Triggered when the player has been reset.\n         * @event MediaPlayerEvents#STREAM_TEARDOWN_COMPLETE\n         */\n        this.STREAM_TEARDOWN_COMPLETE = 'streamTeardownComplete';\n\n        /**\n         * Triggered once all text tracks detected in the MPD are added to the video element.\n         * @event MediaPlayerEvents#TEXT_TRACKS_ADDED\n         */\n        this.TEXT_TRACKS_ADDED = 'allTextTracksAdded';\n\n        /**\n         * Triggered when a text track is added to the video element's TextTrackList\n         * @event MediaPlayerEvents#TEXT_TRACK_ADDED\n         */\n        this.TEXT_TRACK_ADDED = 'textTrackAdded';\n\n        /**\n         * Triggered when a ttml chunk is parsed.\n         * @event MediaPlayerEvents#TTML_PARSED\n         */\n        this.TTML_PARSED = 'ttmlParsed';\n\n        /**\n         * Triggered when a ttml chunk has to be parsed.\n         * @event MediaPlayerEvents#TTML_TO_PARSE\n         */\n        this.TTML_TO_PARSE = 'ttmlToParse';\n\n        /**\n         * Triggered when a caption is rendered.\n         * @event MediaPlayerEvents#CAPTION_RENDERED\n         */\n        this.CAPTION_RENDERED = 'captionRendered';\n\n        /**\n         * Triggered when the caption container is resized.\n         * @event MediaPlayerEvents#CAPTION_CONTAINER_RESIZE\n         */\n        this.CAPTION_CONTAINER_RESIZE = 'captionContainerResize';\n\n        /**\n         * Sent when enough data is available that the media can be played,\n         * at least for a couple of frames.  This corresponds to the\n         * HAVE_ENOUGH_DATA readyState.\n         * @event MediaPlayerEvents#CAN_PLAY\n         */\n        this.CAN_PLAY = 'canPlay';\n\n        /**\n         * Sent when playback completes.\n         * @event MediaPlayerEvents#PLAYBACK_ENDED\n         */\n        this.PLAYBACK_ENDED = 'playbackEnded';\n\n        /**\n         * Sent when an error occurs.  The element's error\n         * attribute contains more information.\n         * @event MediaPlayerEvents#PLAYBACK_ERROR\n         */\n        this.PLAYBACK_ERROR = 'playbackError';\n\n        /**\n         * Sent when playback is not allowed (for example if user gesture is needed).\n         * @event MediaPlayerEvents#PLAYBACK_NOT_ALLOWED\n         */\n        this.PLAYBACK_NOT_ALLOWED = 'playbackNotAllowed';\n\n        /**\n         * The media's metadata has finished loading; all attributes now\n         * contain as much useful information as they're going to.\n         * @event MediaPlayerEvents#PLAYBACK_METADATA_LOADED\n         */\n        this.PLAYBACK_METADATA_LOADED = 'playbackMetaDataLoaded';\n\n        /**\n         * Sent when playback is paused.\n         * @event MediaPlayerEvents#PLAYBACK_PAUSED\n         */\n        this.PLAYBACK_PAUSED = 'playbackPaused';\n\n        /**\n         * Sent when the media begins to play (either for the first time, after having been paused,\n         * or after ending and then restarting).\n         *\n         * @event MediaPlayerEvents#PLAYBACK_PLAYING\n         */\n        this.PLAYBACK_PLAYING = 'playbackPlaying';\n\n        /**\n         * Sent periodically to inform interested parties of progress downloading\n         * the media. Information about the current amount of the media that has\n         * been downloaded is available in the media element's buffered attribute.\n         * @event MediaPlayerEvents#PLAYBACK_PROGRESS\n         */\n        this.PLAYBACK_PROGRESS = 'playbackProgress';\n\n        /**\n         * Sent when the playback speed changes.\n         * @event MediaPlayerEvents#PLAYBACK_RATE_CHANGED\n         */\n        this.PLAYBACK_RATE_CHANGED = 'playbackRateChanged';\n\n        /**\n         * Sent when a seek operation completes.\n         * @event MediaPlayerEvents#PLAYBACK_SEEKED\n         */\n        this.PLAYBACK_SEEKED = 'playbackSeeked';\n\n        /**\n         * Sent when a seek operation begins.\n         * @event MediaPlayerEvents#PLAYBACK_SEEKING\n         */\n        this.PLAYBACK_SEEKING = 'playbackSeeking';\n\n        /**\n         * Sent when a seek operation has been asked.\n         * @event MediaPlayerEvents#PLAYBACK_SEEK_ASKED\n         */\n        this.PLAYBACK_SEEK_ASKED = 'playbackSeekAsked';\n\n        /**\n         * Sent when the video element reports stalled\n         * @event MediaPlayerEvents#PLAYBACK_STALLED\n         */\n        this.PLAYBACK_STALLED = 'playbackStalled';\n\n        /**\n         * Sent when playback of the media starts after having been paused;\n         * that is, when playback is resumed after a prior pause event.\n         *\n         * @event MediaPlayerEvents#PLAYBACK_STARTED\n         */\n        this.PLAYBACK_STARTED = 'playbackStarted';\n\n        /**\n         * The time indicated by the element's currentTime attribute has changed.\n         * @event MediaPlayerEvents#PLAYBACK_TIME_UPDATED\n         */\n        this.PLAYBACK_TIME_UPDATED = 'playbackTimeUpdated';\n\n        /**\n         * Sent when the media playback has stopped because of a temporary lack of data.\n         *\n         * @event MediaPlayerEvents#PLAYBACK_WAITING\n         */\n        this.PLAYBACK_WAITING = 'playbackWaiting';\n\n        /**\n         * Manifest validity changed - As a result of an MPD validity expiration event.\n         * @event MediaPlayerEvents#MANIFEST_VALIDITY_CHANGED\n         */\n        this.MANIFEST_VALIDITY_CHANGED = 'manifestValidityChanged';\n    }\n}\n\nlet mediaPlayerEvents = new MediaPlayerEvents();\nexport default mediaPlayerEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass DashJSError {\n    constructor(code, message, data) {\n        this.code = code || null;\n        this.message = message || null;\n        this.data = data || null;\n    }\n}\n\nexport default DashJSError;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @class\n * @ignore\n */\nclass DataChunk {\n    //Represents a data structure that keep all the necessary info about a single init/media segment\n    constructor() {\n        this.streamId = null;\n        this.mediaInfo = null;\n        this.segmentType = null;\n        this.quality = NaN;\n        this.index = NaN;\n        this.bytes = null;\n        this.start = NaN;\n        this.end = NaN;\n        this.duration = NaN;\n        this.representationId = null;\n        this.endFragment = null;\n    }\n}\n\nexport default DataChunk;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass FragmentRequest {\n    constructor() {\n        this.action = FragmentRequest.ACTION_DOWNLOAD;\n        this.startTime = NaN;\n        this.mediaType = null;\n        this.mediaInfo = null;\n        this.type = null;\n        this.duration = NaN;\n        this.timescale = NaN;\n        this.range = null;\n        this.url = null;\n        this.serviceLocation = null;\n        this.requestStartDate = null;\n        this.firstByteDate = null;\n        this.requestEndDate = null;\n        this.quality = NaN;\n        this.index = NaN;\n        this.availabilityStartTime = null;\n        this.availabilityEndTime = null;\n        this.wallStartTime = null;\n        this.bytesLoaded = NaN;\n        this.bytesTotal = NaN;\n        this.delayLoadingTime = NaN;\n        this.responseType = 'arraybuffer';\n        this.representationId = null;\n    }\n}\n\nFragmentRequest.ACTION_DOWNLOAD = 'download';\nFragmentRequest.ACTION_COMPLETE = 'complete';\n\nexport default FragmentRequest;\n"]}