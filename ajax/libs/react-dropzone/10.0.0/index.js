!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("react"),require("prop-types")):"function"==typeof define&&define.amd?define(["exports","react","prop-types"],n):n((e=e||self).reactDropzone={},e.React,e.PropTypes)}(this,function(e,X,n){"use strict";var r="default"in X?X.default:X;function Y(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function Z(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.forEach(function(e){Y(n,e,t[e])})}return n}function ee(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],0<=n.indexOf(t)||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],0<=n.indexOf(t)||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}function ne(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=[],r=!0,o=!1,i=void 0;try{for(var u,c=e[Symbol.iterator]();!(r=(u=c.next()).done)&&(t.push(u.value),!n||t.length!==n);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return t}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function te(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function f(i,u,c,a){return new(c||(c=Promise))(function(e,n){function t(e){try{o(a.next(e))}catch(e){n(e)}}function r(e){try{o(a.throw(e))}catch(e){n(e)}}function o(n){n.done?e(n.value):new c(function(e){e(n.value)}).then(t,r)}o((a=a.apply(i,u||[])).next())})}function l(t,r){var o,i,u,e,c={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]};return e={next:n(0),throw:n(1),return:n(2)},"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function n(n){return function(e){return function(n){if(o)throw new TypeError("Generator is already executing.");for(;c;)try{if(o=1,i&&(u=2&n[0]?i.return:n[0]?i.throw||((u=i.return)&&u.call(i),0):i.next)&&!(u=u.call(i,n[1])).done)return u;switch(i=0,u&&(n=[2&n[0],u.value]),n[0]){case 0:case 1:u=n;break;case 4:return c.label++,{value:n[1],done:!1};case 5:c.label++,i=n[1],n=[0];continue;case 7:n=c.ops.pop(),c.trys.pop();continue;default:if(!(u=0<(u=c.trys).length&&u[u.length-1])&&(6===n[0]||2===n[0])){c=0;continue}if(3===n[0]&&(!u||n[1]>u[0]&&n[1]<u[3])){c.label=n[1];break}if(6===n[0]&&c.label<u[1]){c.label=u[1],u=n;break}if(u&&c.label<u[2]){c.label=u[2],c.ops.push(n);break}u[2]&&c.ops.pop(),c.trys.pop();continue}n=r.call(t,c)}catch(e){n=[6,e],i=0}finally{o=u=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,e])}}}function t(e,n){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var r,o,i=t.call(e),u=[];try{for(;(void 0===n||0<n--)&&!(r=i.next()).done;)u.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u}function i(){for(var e=[],n=0;n<arguments.length;n++)e=e.concat(t(arguments[n]));return e}n=n&&n.hasOwnProperty("default")?n.default:n;var u=new Map([["avi","video/avi"],["gif","image/gif"],["ico","image/x-icon"],["jpeg","image/jpeg"],["jpg","image/jpeg"],["mkv","video/x-matroska"],["mov","video/quicktime"],["mp4","video/mp4"],["pdf","application/pdf"],["png","image/png"],["zip","application/zip"],["doc","application/msword"],["docx","application/vnd.openxmlformats-officedocument.wordprocessingml.document"]]);function c(e,n){var t=function(e){var n=e.name;if(n&&-1!==n.lastIndexOf(".")&&!e.type){var t=n.split(".").pop().toLowerCase(),r=u.get(t);r&&Object.defineProperty(e,"type",{value:r,writable:!1,configurable:!1,enumerable:!0})}return e}(e),r=e.webkitRelativePath;return Object.defineProperty(t,"path",{value:"string"==typeof n?n:"string"==typeof r&&0<r.length?r:e.name,writable:!1,configurable:!1,enumerable:!0}),t}var a=[".DS_Store","Thumbs.db"];function re(o){return f(this,void 0,void 0,function(){return l(this,function(e){return[2,(r=o,r.dataTransfer&&o.dataTransfer?function(t,r){return f(this,void 0,void 0,function(){var n;return l(this,function(e){switch(e.label){case 0:return n=Array.from(t.items).filter(function(e){return"file"===e.kind}),"drop"!==r?[3,2]:[4,Promise.all(n.map(function(e){return function(e){if("function"!=typeof e.webkitGetAsEntry)return s(e);var n=e.webkitGetAsEntry();if(n&&n.isDirectory)return d(n);return s(e)}(e)}))];case 1:return[2,function t(e){return e.reduce(function(e,n){return i(e,Array.isArray(n)?t(n):[n])},[])}(e.sent()).filter(function(e){return!a.includes(e.name)})];case 2:return[2,n]}})})}(o.dataTransfer,o.type):(n=o,(t=n.target,null!==t&&n.target.files?Array.from(n.target.files):[]).map(function(e){return c(e)})))];var n,t,r})})}function s(e){var n=e.getAsFile();if(!n)return Promise.reject(e+" is not a File");var t=c(n);return Promise.resolve(t)}function p(n){return f(this,void 0,void 0,function(){return l(this,function(e){return[2,n.isDirectory?d(n):function(r){return f(this,void 0,void 0,function(){return l(this,function(e){return[2,new Promise(function(t,n){r.file(function(e){var n=c(e,r.fullPath);t(n)},function(e){n(e)})})]})})}(n)]})})}function d(e){var n=e.createReader();return new Promise(function(u,c){var a=[];!function i(){var e=this;n.readEntries(function(o){return f(e,void 0,void 0,function(){var n,t,r;return l(this,function(e){switch(e.label){case 0:if(o.length)return[3,5];e.label=1;case 1:return e.trys.push([1,3,,4]),[4,Promise.all(a)];case 2:return n=e.sent(),u(n),[3,4];case 3:return t=e.sent(),c(t),[3,4];case 4:return[3,6];case 5:r=Promise.all(o.map(p)),a.push(r),i(),e.label=6;case 6:return[2]}})})},function(e){c(e)})}()})}var v,y,g=(function(e){e.exports=function(t){function r(e){if(o[e])return o[e].exports;var n=o[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,r),n.l=!0,n.exports}var o={};return r.m=t,r.c=o,r.d=function(e,n,t){r.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:t})},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="",r(r.s=13)}([function(e,n){var t=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=t)},function(e,n){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,n){var t=e.exports={version:"2.5.0"};"number"==typeof __e&&(__e=t)},function(e,n,t){e.exports=!t(4)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,n){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,n){var t={}.toString;e.exports=function(e){return t.call(e).slice(8,-1)}},function(e,n,t){var r=t(32)("wks"),o=t(9),i=t(0).Symbol,u="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=u&&i[e]||(u?i:o)("Symbol."+e))}).store=r},function(e,n,t){var y=t(0),g=t(2),h=t(8),m=t(22),b=t(10),x=function(e,n,t){var r,o,i,u,c=e&x.F,a=e&x.G,f=e&x.S,l=e&x.P,s=e&x.B,p=a?y:f?y[n]||(y[n]={}):(y[n]||{}).prototype,d=a?g:g[n]||(g[n]={}),v=d.prototype||(d.prototype={});for(r in a&&(t=n),t)i=((o=!c&&p&&void 0!==p[r])?p:t)[r],u=s&&o?b(i,y):l&&"function"==typeof i?b(Function.call,i):i,p&&m(p,r,i,e&x.U),d[r]!=i&&h(d,r,u),l&&v[r]!=i&&(v[r]=i)};y.core=g,x.F=1,x.G=2,x.S=4,x.P=8,x.B=16,x.W=32,x.U=64,x.R=128,e.exports=x},function(e,n,t){var r=t(16),o=t(21);e.exports=t(3)?function(e,n,t){return r.f(e,n,o(1,t))}:function(e,n,t){return e[n]=t,e}},function(e,n){var t=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++t+r).toString(36))}},function(e,n,t){var i=t(24);e.exports=function(r,o,e){if(i(r),void 0===o)return r;switch(e){case 1:return function(e){return r.call(o,e)};case 2:return function(e,n){return r.call(o,e,n)};case 3:return function(e,n,t){return r.call(o,e,n,t)}}return function(){return r.apply(o,arguments)}}},function(e,n){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,n,t){var r=t(28),o=Math.min;e.exports=function(e){return 0<e?o(r(e),9007199254740991):0}},function(e,n,t){n.__esModule=!0,n.default=function(e,n){if(e&&n){var t=Array.isArray(n)?n:n.split(","),r=e.name||"",o=e.type||"",i=o.replace(/\/.*$/,"");return t.some(function(e){var n=e.trim();return"."===n.charAt(0)?r.toLowerCase().endsWith(n.toLowerCase()):n.endsWith("/*")?i===n.replace(/\/.*$/,""):o===n})}return!0},t(14),t(34)},function(e,n,t){t(15),e.exports=t(2).Array.some},function(e,n,t){var r=t(7),o=t(25)(3);r(r.P+r.F*!t(33)([].some,!0),"Array",{some:function(e){return o(this,e,arguments[1])}})},function(e,n,t){var r=t(17),o=t(18),i=t(20),u=Object.defineProperty;n.f=t(3)?Object.defineProperty:function(e,n,t){if(r(e),n=i(n,!0),r(t),o)try{return u(e,n,t)}catch(e){}if("get"in t||"set"in t)throw TypeError("Accessors not supported!");return"value"in t&&(e[n]=t.value),e}},function(e,n,t){var r=t(1);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,n,t){e.exports=!t(3)&&!t(4)(function(){return 7!=Object.defineProperty(t(19)("div"),"a",{get:function(){return 7}}).a})},function(e,n,t){var r=t(1),o=t(0).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,n,t){var o=t(1);e.exports=function(e,n){if(!o(e))return e;var t,r;if(n&&"function"==typeof(t=e.toString)&&!o(r=t.call(e)))return r;if("function"==typeof(t=e.valueOf)&&!o(r=t.call(e)))return r;if(!n&&"function"==typeof(t=e.toString)&&!o(r=t.call(e)))return r;throw TypeError("Can't convert object to primitive value")}},function(e,n){e.exports=function(e,n){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:n}}},function(e,n,t){var i=t(0),u=t(8),c=t(23),a=t(9)("src"),r=Function.toString,f=(""+r).split("toString");t(2).inspectSource=function(e){return r.call(e)},(e.exports=function(e,n,t,r){var o="function"==typeof t;o&&(c(t,"name")||u(t,"name",n)),e[n]!==t&&(o&&(c(t,a)||u(t,a,e[n]?""+e[n]:f.join(String(n)))),e===i?e[n]=t:r?e[n]?e[n]=t:u(e,n,t):(delete e[n],u(e,n,t)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[a]||r.call(this)})},function(e,n){var t={}.hasOwnProperty;e.exports=function(e,n){return t.call(e,n)}},function(e,n){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,n,t){var b=t(10),x=t(26),w=t(27),D=t(12),r=t(29);e.exports=function(s,e){var p=1==s,d=2==s,v=3==s,y=4==s,g=6==s,h=5==s||g,m=e||r;return function(e,n,t){for(var r,o,i=w(e),u=x(i),c=b(n,t,3),a=D(u.length),f=0,l=p?m(e,a):d?m(e,0):void 0;f<a;f++)if((h||f in u)&&(o=c(r=u[f],f,i),s))if(p)l[f]=o;else if(o)switch(s){case 3:return!0;case 5:return r;case 6:return f;case 2:l.push(r)}else if(y)return!1;return g?-1:v||y?y:l}}},function(e,n,t){var r=t(5);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,n,t){var r=t(11);e.exports=function(e){return Object(r(e))}},function(e,n){var t=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(0<e?r:t)(e)}},function(e,n,t){var r=t(30);e.exports=function(e,n){return new(r(e))(n)}},function(e,n,t){var r=t(1),o=t(31),i=t(6)("species");e.exports=function(e){var n;return o(e)&&("function"!=typeof(n=e.constructor)||n!==Array&&!o(n.prototype)||(n=void 0),r(n)&&null===(n=n[i])&&(n=void 0)),void 0===n?Array:n}},function(e,n,t){var r=t(5);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,n,t){var r=t(0),o=r["__core-js_shared__"]||(r["__core-js_shared__"]={});e.exports=function(e){return o[e]||(o[e]={})}},function(e,n,t){var r=t(4);e.exports=function(e,n){return!!e&&r(function(){n?e.call(null,function(){},1):e.call(null)})}},function(e,n,t){t(35),e.exports=t(2).String.endsWith},function(e,n,t){var r=t(7),u=t(12),c=t(36),a="".endsWith;r(r.P+r.F*t(38)("endsWith"),"String",{endsWith:function(e){var n=c(this,e,"endsWith"),t=1<arguments.length?arguments[1]:void 0,r=u(n.length),o=void 0===t?r:Math.min(u(t),r),i=String(e);return a?a.call(n,i,o):n.slice(o-i.length,o)===i}})},function(e,n,t){var r=t(37),o=t(11);e.exports=function(e,n,t){if(r(n))throw TypeError("String#"+t+" doesn't accept regex!");return String(o(e))}},function(e,n,t){var r=t(1),o=t(5),i=t(6)("match");e.exports=function(e){var n;return r(e)&&(void 0!==(n=e[i])?!!n:"RegExp"==o(e))}},function(e,n,t){var r=t(6)("match");e.exports=function(n){var t=/./;try{"/./"[n](t)}catch(e){try{return t[r]=!1,!"/./"[n](t)}catch(n){}}return!0}}])}(v={exports:{}},v.exports),v.exports),h=(y=g)&&y.__esModule&&Object.prototype.hasOwnProperty.call(y,"default")?y.default:y,oe="multiple"in document.createElement("input");function ie(e,n){return"application/x-moz-file"===e.type||h(e,n)}function ue(e){return"function"==typeof e.isPropagationStopped?e.isPropagationStopped():void 0!==e.cancelBubble&&e.cancelBubble}function ce(e){return e.dataTransfer?Array.prototype.some.call(e.dataTransfer.types,function(e){return"Files"===e||"application/x-moz-file"===e}):!!e.target&&!!e.target.files}function ae(e){e.preventDefault()}function fe(){for(var e=arguments.length,o=new Array(e),n=0;n<e;n++)o[n]=arguments[n];return function(n){for(var e=arguments.length,t=new Array(1<e?e-1:0),r=1;r<e;r++)t[r-1]=arguments[r];return o.some(function(e){return!ue(n)&&e&&e.apply(void 0,[n].concat(t)),ue(n)})}}function m(e){var n=e.children,t=o({},b(ee(e,["children"])));return r.createElement(X.Fragment,null,n(t))}var le={isFocused:!(m.propTypes={children:n.func,accept:n.oneOfType([n.string,n.arrayOf(n.string)]),multiple:n.bool,preventDropOnDocument:n.bool,minSize:n.number,maxSize:n.number,disabled:n.bool,getFilesFromEvent:n.func,onFileDialogCancel:n.func,onDragEnter:n.func,onDragLeave:n.func,onDragOver:n.func,onDrop:n.func,onDropAccepted:n.func,onDropRejected:n.func}),isFileDialogActive:!1,isDragActive:!1,isDragAccept:!1,isDragReject:!1,draggedFiles:[],acceptedFiles:[],rejectedFiles:[]};function b(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},u=e.accept,n=e.disabled,d=void 0!==n&&n,t=e.getFilesFromEvent,r=void 0===t?re:t,o=e.maxSize,c=void 0===o?1/0:o,i=e.minSize,a=void 0===i?0:i,f=e.multiple,l=void 0===f||f,s=e.onDragEnter,p=e.onDragLeave,v=e.onDragOver,y=e.onDrop,g=e.onDropAccepted,h=e.onDropRejected,m=e.onFileDialogCancel,b=e.preventDropOnDocument,x=void 0===b||b,w=X.useRef(null),D=X.useRef(null),O=ne(X.useReducer(se,le),2),F=O[0],j=O[1],A=F.isFocused,P=F.isFileDialogActive,S=F.draggedFiles,E=function(){D.current&&(j({type:"openDialog"}),D.current.value=null,D.current.click())},k=function(){P&&setTimeout(function(){D.current&&(D.current.files.length||(j({type:"closeDialog"}),"function"==typeof m&&m()))},300)};X.useEffect(function(){return window.addEventListener("focus",k,!1),function(){window.removeEventListener("focus",k,!1)}},[D,P,m]);var C=X.useCallback(function(e){w.current&&w.current.isEqualNode(e.target)&&(32!==e.keyCode&&13!==e.keyCode||(e.preventDefault(),E()))},[w,D]),_=X.useCallback(function(){j({type:"focus"})},[]),T=X.useCallback(function(){j({type:"blur"})},[]),M=X.useCallback(function(){!function(){var e,n=0<arguments.length&&void 0!==arguments[0]?arguments[0]:window.navigator.userAgent;return-1!==(e=n).indexOf("MSIE")||-1!==e.indexOf("Trident/")||-1!==n.indexOf("Edge/")}()?E():setTimeout(E,0)},[D]),R=ne(X.useState([]),2),L=R[0],z=R[1],I=function(e){w.current&&w.current.contains(e.target)||(e.preventDefault(),z([]))};X.useEffect(function(){return x&&(document.addEventListener("dragover",ae,!1),document.addEventListener("drop",I,!1)),function(){x&&(document.removeEventListener("dragover",ae),document.removeEventListener("drop",I))}},[w,x]);var W,B=X.useCallback(function(n){n.preventDefault(),n.persist(),-1===L.indexOf(n.target)&&z([].concat(te(L),[n.target])),ce(n)&&Promise.resolve(r(n)).then(function(e){ue(n)||(j({draggedFiles:e,type:"setDraggedFiles"}),s&&s(n))})},[L,r,s]),K=X.useCallback(function(e){return e.preventDefault(),e.persist(),e.dataTransfer&&(e.dataTransfer.dropEffect="copy"),ce(e)&&v&&v(e),!1},[v]),G=X.useCallback(function(n){n.preventDefault(),n.persist();var e=te(L.filter(function(e){return e!==n.target&&w.current&&w.current.contains(e)}));z(e),0<e.length||(j({type:"setDraggedFiles",draggedFiles:[]}),ce(n)&&p&&p(n))},[w,L,p]),q=X.useCallback(function(n){n.preventDefault(),n.persist(),z([]),j({type:"reset"}),ce(n)&&Promise.resolve(r(n)).then(function(e){if(!ue(n)){var o=[],i=[];e.forEach(function(e){var n,t,r;ie(e,u)&&(t=c,r=a,(n=e).size<=t&&n.size>=r)?o.push(e):i.push(e)}),!l&&1<o.length&&i.push.apply(i,te(o.splice(0))),j({acceptedFiles:o,rejectedFiles:i,type:"setFiles"}),y&&y(o,i,n),0<i.length&&h&&h(i,n),0<o.length&&g&&g(o,n)}})},[l,u,a,c,r,y,g,h]),N=function(e){return d?null:e},U=X.useMemo(function(){return function(){var e,n=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},t=n.refKey,r=void 0===t?"ref":t,o=n.onKeyDown,i=n.onFocus,u=n.onBlur,c=n.onClick,a=n.onDragEnter,f=n.onDragOver,l=n.onDragLeave,s=n.onDrop,p=ee(n,["refKey","onKeyDown","onFocus","onBlur","onClick","onDragEnter","onDragOver","onDragLeave","onDrop"]);return Z((Y(e={onKeyDown:N(fe(o,C)),onFocus:N(fe(i,_)),onBlur:N(fe(u,T)),onClick:N(fe(c,M)),onDragEnter:N(fe(a,B)),onDragOver:N(fe(f,K)),onDragLeave:N(fe(l,G)),onDrop:N(fe(s,q))},r,w),Y(e,"tabIndex",d?-1:0),e),p)}},[w,C,_,T,M,B,K,G,q,d]),$=X.useCallback(function(e){e.stopPropagation()},[]),H=X.useMemo(function(){return function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},n=e.refKey,t=void 0===n?"ref":n,r=e.onChange,o=e.onClick,i=ee(e,["refKey","onChange","onClick"]);return Z({},Y({accept:u,type:"file",style:{display:"none"},multiple:oe&&l,onChange:N(fe(r,q)),onClick:N(fe(o,$)),autoComplete:"off",tabIndex:-1},t,D),i)}},[D,u,l,q,d]),J=S.length,Q=l||J<=1,V=0<J&&(W=u,S.every(function(e){return ie(e,W)}));return Z({},F,{isDragAccept:V,isDragReject:0<J&&(!V||!Q),isFocused:A&&!d,getRootProps:U,getInputProps:H,rootRef:w,inputRef:D,open:N(E)})}function se(e,n){switch(n.type){case"focus":return Z({},e,{isFocused:!0});case"blur":return Z({},e,{isFocused:!1});case"openDialog":return Z({},e,{isFileDialogActive:!0});case"closeDialog":return Z({},e,{isFileDialogActive:!1});case"setDraggedFiles":var t=n.draggedFiles;return Z({},e,{draggedFiles:t,isDragActive:0<t.length});case"setFiles":return Z({},e,{acceptedFiles:n.acceptedFiles,rejectedFiles:n.rejectedFiles});case"reset":return Z({},e,{isFileDialogActive:!1,isDragActive:!1,draggedFiles:[]});default:return e}}e.default=m,e.useDropzone=b,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
