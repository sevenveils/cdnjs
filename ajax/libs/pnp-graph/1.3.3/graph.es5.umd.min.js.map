{"version":3,"file":"graph.es5.umd.min.js","sources":["../../../../node_modules/tslib/tslib.es6.js","../../../../packages/graph/src/config/graphlibconfig.ts","../../../../packages/graph/src/net/graphhttpclient.ts","../../../../packages/graph/src/types.ts","../../../../packages/graph/src/graphqueryable.ts","../../../../packages/graph/src/members.ts","../../../../packages/graph/src/calendars.ts","../../../../packages/graph/src/attachments.ts","../../../../packages/graph/src/conversations.ts","../../../../packages/graph/src/planner.ts","../../../../packages/graph/src/photos.ts","../../../../packages/graph/src/teams.ts","../../../../packages/graph/src/groups.ts","../../../../packages/graph/src/contacts.ts","../../../../packages/graph/src/onenote.ts","../../../../packages/graph/src/onedrive.ts","../../../../packages/graph/src/messages.ts","../../../../packages/graph/src/directoryobjects.ts","../../../../packages/graph/src/people.ts","../../../../packages/graph/src/insights.ts","../../../../packages/graph/src/users.ts","../../../../packages/graph/src/batch.ts","../../../../packages/graph/src/invitations.ts","../../../../packages/graph/src/subscriptions.ts","../../../../packages/graph/src/security.ts","../../../../packages/graph/src/sites.ts","../../../../packages/graph/src/rest.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { LibraryConfiguration, TypedHash, RuntimeConfig, HttpClientImpl, AdalClient } from \"@pnp/common\";\n\nexport interface GraphConfigurationPart {\n    graph?: {\n        /**\n         * Any headers to apply to all requests\n         */\n        headers?: TypedHash<string>;\n\n        /**\n         * Defines a factory method used to create fetch clients\n         */\n        fetchClientFactory?: () => HttpClientImpl;\n    };\n}\n\nexport interface GraphConfiguration extends LibraryConfiguration, GraphConfigurationPart { }\n\nexport function setup(config: GraphConfiguration): void {\n    RuntimeConfig.extend(config);\n}\n\nexport class GraphRuntimeConfigImpl {\n\n    public get headers(): TypedHash<string> {\n\n        const graphPart = RuntimeConfig.get(\"graph\");\n        if (graphPart !== undefined && graphPart !== null && graphPart.headers !== undefined) {\n            return graphPart.headers;\n        }\n\n        return {};\n    }\n\n    public get fetchClientFactory(): () => HttpClientImpl {\n\n        const graphPart = RuntimeConfig.get(\"graph\");\n        // use a configured factory firt\n        if (graphPart !== undefined && graphPart !== null && graphPart.fetchClientFactory !== undefined) {\n            return graphPart.fetchClientFactory;\n        }\n\n        // then try and use spfx context if available\n        if (RuntimeConfig.spfxContext !== undefined) {\n            return () => AdalClient.fromSPFxContext(RuntimeConfig.spfxContext);\n        }\n\n        throw Error(\"There is no Graph Client available, either set one using configuraiton or provide a valid SPFx Context using setup.\");\n    }\n}\n\nexport let GraphRuntimeConfig = new GraphRuntimeConfigImpl();\n","import {\n    extend,\n    RequestClient,\n    mergeHeaders,\n    FetchOptions,\n    HttpClientImpl,\n    getCtxCallback,\n} from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"../config/graphlibconfig\";\n\nexport class GraphHttpClient implements RequestClient {\n\n    private _impl: HttpClientImpl;\n\n    constructor() {\n\n        this._impl = GraphRuntimeConfig.fetchClientFactory();\n    }\n\n    public fetch(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        const headers = new Headers();\n\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\n        mergeHeaders(headers, GraphRuntimeConfig.headers);\n\n        // second we add the local options so we can overwrite the globals\n        mergeHeaders(headers, options.headers);\n\n        if (!headers.has(\"Content-Type\")) {\n            headers.append(\"Content-Type\", \"application/json\");\n        }\n\n        const opts = extend(options, { headers: headers });\n\n        return this.fetchRaw(url, opts);\n    }\n\n    public fetchRaw(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        // here we need to normalize the headers\n        const rawHeaders = new Headers();\n        mergeHeaders(rawHeaders, options.headers);\n        options = extend(options, { headers: rawHeaders });\n\n        const retry = (ctx: RetryContext): void => {\n\n            this._impl.fetch(url, options).then((response) => ctx.resolve(response)).catch((response) => {\n\n                // Check if request was throttled - http status code 429\n                // Check if request failed due to server unavailable - http status code 503\n                if (response.status !== 429 && response.status !== 503) {\n                    ctx.reject(response);\n                }\n\n                // grab our current delay\n                const delay = ctx.delay;\n\n                // Increment our counters.\n                ctx.delay *= 2;\n                ctx.attempts++;\n\n                // If we have exceeded the retry count, reject.\n                if (ctx.retryCount <= ctx.attempts) {\n                    ctx.reject(response);\n                }\n\n                // Set our retry timeout for {delay} milliseconds.\n                setTimeout(getCtxCallback(this, retry, ctx), delay);\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n\n            const retryContext: RetryContext = {\n                attempts: 0,\n                delay: 100,\n                reject: reject,\n                resolve: resolve,\n                retryCount: 7,\n            };\n\n            retry.call(this, retryContext);\n        });\n    }\n\n    public get(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"GET\" });\n        return this.fetch(url, opts);\n    }\n\n    public post(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"POST\" });\n        return this.fetch(url, opts);\n    }\n\n    public patch(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"PATCH\" });\n        return this.fetch(url, opts);\n    }\n\n    public delete(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"DELETE\" });\n        return this.fetch(url, opts);\n    }\n}\n\ninterface RetryContext {\n    attempts: number;\n    delay: number;\n    reject: (reason?: any) => void;\n    resolve: (value?: Response | PromiseLike<Response>) => void;\n    retryCount: number;\n}\n","export class GraphEndpoints {\n\n    public static Beta = \"beta\";\n    public static V1 = \"v1.0\";\n\n    /**\n     * \n     * @param url The url to set the endpoint \n     */\n    public static ensure(url: string, endpoint: string): string {\n        const all = [GraphEndpoints.Beta, GraphEndpoints.V1];\n        let regex = new RegExp(endpoint, \"i\");\n        const replaces = all.filter(s => !regex.test(s)).map(s => s.replace(\".\", \"\\\\.\"));\n        regex = new RegExp(`/?(${replaces.join(\"|\")})/`, \"ig\");\n        return url.replace(regex, `/${endpoint}/`);\n    }\n}\n\n/**\n * Defines the properties for a Team\n * \n * TODO:: remove this once typings are present in graph types package\n */\nexport interface TeamProperties {\n\n    memberSettings?: {\n        \"allowCreateUpdateChannels\"?: boolean;\n        \"allowDeleteChannels\"?: boolean;\n        \"allowAddRemoveApps\"?: boolean;\n        \"allowCreateUpdateRemoveTabs\"?: boolean;\n        \"allowCreateUpdateRemoveConnectors\"?: boolean;\n    };\n\n    guestSettings?: {\n        \"allowCreateUpdateChannels\"?: boolean;\n        \"allowDeleteChannels\"?: boolean;\n    };\n\n    messagingSettings?: {\n        \"allowUserEditMessages\"?: boolean;\n        \"allowUserDeleteMessages\"?: boolean;\n        \"allowOwnerDeleteMessages\"?: boolean;\n        \"allowTeamMentions\"?: boolean;\n        \"allowChannelMentions\"?: boolean;\n    };\n\n    funSettings?: {\n        \"allowGiphy\"?: boolean;\n        \"giphyContentRating\"?: \"strict\" | string,\n        \"allowStickersAndMemes\"?: boolean;\n        \"allowCustomMemes\"?: boolean;\n    };\n}\n\nexport interface TabsConfiguration {\n\n    configuration: {\n        \"entityId\": string;\n        \"contentUrl\": string;\n        \"websiteUrl\": string;\n        \"removeUrl\": string;\n\n    };\n}\n","import {\n    combine,\n    extend,\n    isUrlAbsolute,\n    FetchOptions,\n    getGUID,\n} from \"@pnp/common\";\nimport {\n    ODataParser,\n    ODataQueryable,\n    RequestContext,\n} from \"@pnp/odata\";\nimport { GraphHttpClient } from \"./net/graphhttpclient\";\nimport { GraphBatch } from \"./batch\";\nimport { GraphEndpoints } from \"./types\";\n\nexport interface GraphQueryableConstructor<T> {\n    new(baseUrl: string | GraphQueryable, path?: string): T;\n}\n\n/**\n * Queryable Base Class\n *\n */\nexport class GraphQueryable<GetType = any> extends ODataQueryable<GraphBatch, GetType> {\n\n    /**\n     * Creates a new instance of the Queryable class\n     *\n     * @constructor\n     * @param baseUrl A string or Queryable that should form the base part of the url\n     *\n     */\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super();\n\n        if (typeof baseUrl === \"string\") {\n\n            const urlStr = baseUrl as string;\n            this._parentUrl = urlStr;\n            this._url = combine(urlStr, path);\n        } else {\n            this.extend(baseUrl as GraphQueryable, path);\n        }\n    }\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this.query.set(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this.query.set(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Creates a new instance of the supplied factory and extends this into that new instance\n     *\n     * @param factory constructor for the new queryable\n     */\n    public as<T>(factory: GraphQueryableConstructor<T>): T {\n        const o = <T>new factory(this._url, null);\n        return extend(o, this, true);\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public toUrlAndQuery(): string {\n\n        let url = this.toUrl();\n\n        if (!isUrlAbsolute(url)) {\n            url = combine(\"https://graph.microsoft.com\", url);\n        }\n\n        if (this.query.size > 0) {\n            const char = url.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n            url += `${char}${Array.from(this.query).map((v: [string, string]) => v[0] + \"=\" + v[1]).join(\"&\")}`;\n        }\n\n        return url;\n    }\n\n    /**\n     * Gets a parent for this instance as specified\n     *\n     * @param factory The contructor for the class to create\n     */\n    protected getParent<T extends GraphQueryable>(\n        factory: GraphQueryableConstructor<T>,\n        baseUrl: string | GraphQueryable = this.parentUrl,\n        path?: string): T {\n\n        return new factory(baseUrl, path);\n    }\n\n    /**\n     * Clones this queryable into a new queryable instance of T\n     * @param factory Constructor used to create the new instance\n     * @param additionalPath Any additional path to include in the clone\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\n     */\n    protected clone<T extends GraphQueryable>(factory: GraphQueryableConstructor<T>, additionalPath?: string, includeBatch = true): T {\n\n        return <T>super._clone(new factory(this, additionalPath), { includeBatch });\n    }\n\n    protected setEndpoint(endpoint: string): this {\n\n        this._url = GraphEndpoints.ensure(this._url, endpoint);\n        return this;\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected toRequestContext<T>(\n        verb: string,\n        options: FetchOptions = {},\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>): Promise<RequestContext<T>> {\n\n        const dependencyDispose = this.hasBatch ? this._batchDependency : () => { return; };\n\n        return Promise.resolve({\n            batch: this.batch,\n            batchDependency: dependencyDispose,\n            cachingOptions: this._cachingOptions,\n            clientFactory: () => new GraphHttpClient(),\n            isBatched: this.hasBatch,\n            isCached: /^get$/i.test(verb) && this._useCaching,\n            options: options,\n            parser: parser,\n            pipeline: pipeline,\n            requestAbsoluteUrl: this.toUrlAndQuery(),\n            requestId: getGUID(),\n            verb: verb,\n        });\n    }\n}\n\n/**\n * Represents a REST collection which can be filtered, paged, and selected\n *\n */\nexport class GraphQueryableCollection<GetType = any[]> extends GraphQueryable<GetType> {\n\n    /**\n     *\n     * @param filter The string representing the filter query\n     */\n    public filter(filter: string): this {\n        this.query.set(\"$filter\", filter);\n        return this;\n    }\n\n    /**\n     * Orders based on the supplied fields\n     *\n     * @param orderby The name of the field on which to sort\n     * @param ascending If false DESC is appended, otherwise ASC (default)\n     */\n    public orderBy(orderBy: string, ascending = true): this {\n        const o = \"$orderby\";\n        const query = this.query.has(o) ? this.query.get(o).split(\",\") : [];\n        query.push(`${orderBy} ${ascending ? \"asc\" : \"desc\"}`);\n        this.query.set(o, query.join(\",\"));\n        return this;\n    }\n\n    /**\n     * Limits the query to only return the specified number of items\n     *\n     * @param top The query row limit\n     */\n    public top(top: number): this {\n        this.query.set(\"$top\", top.toString());\n        return this;\n    }\n\n    /**\n     * Skips a set number of items in the return set\n     *\n     * @param num Number of items to skip\n     */\n    public skip(num: number): this {\n        this.query.set(\"$skip\", num.toString());\n        return this;\n    }\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public skipToken(token: string): this {\n        this.query.set(\"$skiptoken\", token);\n        return this;\n    }\n\n    /**\n     * \tRetrieves the total count of matching resources\n     */\n    public get count(): this {\n        this.query.set(\"$count\", \"true\");\n        return this;\n    }\n}\n\nexport class GraphQueryableSearchableCollection extends GraphQueryableCollection {\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public search(query: string): this {\n        this.query.set(\"$search\", query);\n        return this;\n    }\n}\n\n/**\n * Represents an instance that can be selected\n *\n */\nexport class GraphQueryableInstance<GetType = any> extends GraphQueryable<GetType> { }\n\n/**\n * Decorator used to specify the default path for Queryable objects\n * \n * @param path \n */\nexport function defaultPath(path: string) {\n\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\n\n        return class extends target {\n            constructor(...args: any[]) {\n                super(args[0], args.length > 1 && args[1] !== undefined ? args[1] : path);\n            }\n        };\n    };\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS } from \"@pnp/common\";\nimport { User as IMember } from \"@microsoft/microsoft-graph-types\";\n\n@defaultPath(\"members\")\nexport class Members extends GraphQueryableCollection<IMember[]> {\n\n    /**\n     * Use this API to add a member to an Office 365 group, a security group or a mail-enabled security group through\n     * the members navigation property. You can add users or other groups.\n     * Important: You can add only users to Office 365 groups.\n     * \n     * @param id Full @odata.id of the directoryObject, user, or group object you want to add (ex: https://graph.microsoft.com/v1.0/directoryObjects/${id})\n     */\n    public add(id: string): Promise<any> {\n\n        return this.clone(Members, \"$ref\").postCore({\n            body: jsS({\n                \"@odata.id\": id,\n            }),\n        });\n    }\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Member {\n        return new Member(this, id);\n    }\n}\n\nexport class Member extends GraphQueryableInstance<IMember> {\n    /**\n     * Removes this Member\n     */\n    public remove(): Promise<void> {\n        return this.clone(Member, \"$ref\").deleteCore();\n    }\n}\n\n@defaultPath(\"owners\")\nexport class Owners extends Members { }\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { TypedHash, jsS } from \"@pnp/common\";\nimport { Event as IEvent, Calendar as ICalendar } from \"@microsoft/microsoft-graph-types\";\n// import { Attachments } from \"./attachments\";\n\n@defaultPath(\"calendars\")\nexport class Calendars extends GraphQueryableCollection<ICalendar[]> {}\n\nexport class Calendar extends GraphQueryableInstance<ICalendar> {\n\n    public get events(): Events {\n        return new Events(this);\n    }\n}\n\n@defaultPath(\"events\")\nexport class Events extends GraphQueryableCollection<IEvent[]> {\n\n    public getById(id: string): Event {\n        return new Event(this, id);\n    }\n\n    /**\n     * Adds a new event to the collection\n     * \n     * @param properties The set of properties used to create the event\n     */\n    public add(properties: Event): Promise<EventAddResult> {\n\n        return this.postCore({\n            body: jsS(properties),\n        }).then(r => {\n            return {\n                data: r,\n                event: this.getById(r.id),\n            };\n        });\n    }\n}\n\nexport interface EventAddResult {\n    data: IEvent;\n    event: Event;\n}\n\nexport class Event extends GraphQueryableInstance<IEvent> {\n\n    // TODO:: when supported\n    // /**\n    //  * Gets the collection of attachments for this event\n    //  */\n    // public get attachments(): Attachments {\n    //     return new Attachments(this);\n    // }\n\n    /**\n     * Update the properties of an event object\n     * \n     * @param properties Set of properties of this event to update\n     */\n    public update(properties: TypedHash<any>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Deletes this event\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { Attachment as IAttachment } from \"@microsoft/microsoft-graph-types\";\nimport { jsS } from \"@pnp/common\";\n\n@defaultPath(\"attachments\")\nexport class Attachments extends GraphQueryableCollection<IAttachment[]> {\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Attachment id\n     */\n    public getById(id: string): Attachment {\n        return new Attachment(this, id);\n    }\n\n    /**\n     * Add attachment to this collection\n     * \n     * @param name Name given to the attachment file\n     * @param bytes File content\n     */\n    public addFile(name: string, bytes: string | Blob): Promise<IAttachment> {\n\n        return this.postCore({\n            body: jsS({\n                \"@odata.type\": \"#microsoft.graph.fileAttachment\",\n                contentBytes: bytes,\n                name: name,\n            }),\n        });\n    }\n}\n\nexport class Attachment extends GraphQueryableInstance<IAttachment> {\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { TypedHash, jsS } from \"@pnp/common\";\nimport { Attachments } from \"./attachments\";\nimport {\n    ConversationThread as IConversationThread,\n    Post as IPost,\n    Recipient as IRecipient,\n    Conversation as IConversation,\n    User as IUser,\n} from \"@microsoft/microsoft-graph-types\";\n\n/**\n * Information used to forward a post\n */\nexport interface PostForwardInfo {\n    comment?: string;\n    toRecipients: IRecipient[];\n}\n\n@defaultPath(\"conversations\")\nexport class Conversations extends GraphQueryableCollection<IConversation[]> {\n\n    /**\n     * Create a new conversation by including a thread and a post.\n     * \n     * @param properties Properties used to create the new conversation\n     */\n    public add(properties: TypedHash<any>): Promise<any> {\n\n        return this.postCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Gets a conversation from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Conversation {\n        return new Conversation(this, id);\n    }\n}\n\n@defaultPath(\"threads\")\nexport class Threads extends GraphQueryableCollection<IConversationThread[]> {\n\n    /**\n     * Gets a thread from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Thread {\n        return new Thread(this, id);\n    }\n\n    /**\n     * Adds a new thread to this collection\n     * \n     * @param properties properties used to create the new thread\n     * @returns Id of the new thread\n     */\n    public add(properties: IConversationThread): Promise<{ id: string }> {\n\n        return this.postCore({\n            body: jsS(properties),\n        });\n    }\n}\n\n@defaultPath(\"posts\")\nexport class Posts extends GraphQueryableCollection<IPost[]> {\n\n    /**\n     * Gets a thread from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Post {\n        return new Post(this, id);\n    }\n\n    /**\n     * Adds a new thread to this collection\n     * \n     * @param properties properties used to create the new thread\n     * @returns Id of the new thread\n     */\n    public add(properties: IPost): Promise<{ id: string }> {\n\n        return this.postCore({\n            body: jsS(properties),\n        });\n    }\n}\n\nexport class Conversation extends GraphQueryableInstance<IConversation> {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get threads(): Threads {\n        return new Threads(this);\n    }\n\n    /**\n     * Updates this conversation\n     */\n    public update(properties: TypedHash<any>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Deletes this member from the group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport class Thread extends GraphQueryableInstance {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get posts(): Posts {\n        return new Posts(this);\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPost): Promise<void> {\n\n        return this.clone(Thread, \"reply\").postCore({\n            body: jsS({\n                post: post,\n            }),\n        });\n    }\n\n    /**\n     * Deletes this member from the group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport class Post extends GraphQueryableInstance<IPost> {\n\n    public get attachments(): Attachments {\n        return new Attachments(this);\n    }\n\n    /**\n     * Deletes this post\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Forward a post to a recipient\n     */\n    public forward(info: PostForwardInfo): Promise<void> {\n        return this.clone(Post, \"forward\").postCore({\n            body: jsS(info),\n        });\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPost): Promise<void> {\n\n        return this.clone(Post, \"reply\").postCore({\n            body: jsS({\n                post: post,\n            }),\n        });\n    }\n}\n\nexport class Senders extends GraphQueryableCollection<IUser[]> {\n\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Add a new user or group to this senders collection\n     * @param id The full @odata.id value to add (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public add(id: string): Promise<any> {\n\n        return this.clone(Senders, \"$ref\").postCore({\n            body: jsS({\n                \"@odata.id\": id,\n            }),\n        });\n    }\n\n    /**\n     * Removes the entity from the collection\n     * \n     * @param id The full @odata.id value to remove (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public remove(id: string): Promise<void> {\n\n        const remover = this.clone(Senders, \"$ref\");\n        remover.query.set(\"$id\", id);\n        return remover.deleteCore();\n    }\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS, TypedHash, extend } from \"@pnp/common\";\nimport {\n    PlannerPlan as IPlannerPlan,\n    PlannerTask as IPlannerTask,\n    PlannerBucket as IPlannerBucket,\n    Planner as IPlanner,\n    PlannerPlanDetails as IPlannerPlanDetails,\n} from \"@microsoft/microsoft-graph-types\";\n\n// Should not be able to use the planner.get()\nexport interface IPlannerMethods {\n    plans: Plans;\n    tasks: Tasks;\n    buckets: Buckets;\n}\n\n@defaultPath(\"planner\")\nexport class Planner extends GraphQueryableInstance<IPlanner> implements IPlannerMethods {\n\n    // Should Only be able to get by id, or else error occur\n    public get plans(): Plans {\n        return new Plans(this);\n    }\n\n    // Should Only be able to get by id, or else error occur\n    public get tasks(): Tasks {\n        return new Tasks(this);\n    }\n\n    // Should Only be able to get by id, or else error occur\n    public get buckets(): Buckets {\n        return new Buckets(this);\n    }\n}\n\n@defaultPath(\"plans\")\nexport class Plans extends GraphQueryableCollection<IPlannerPlan[]> {\n    public getById(id: string): Plan {\n        return new Plan(this, id);\n    }\n\n    /**\n     * Create a new Planner Plan.\n     * \n     * @param owner Id of Group object.\n     * @param title The Title of the Plan.\n     */\n    public add(owner: string, title: string): Promise<PlanAddResult> {\n\n        const postBody = {\n            owner: owner,\n            title: title,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                plan: this.getById(r.id),\n            };\n        });\n    }\n\n}\n\n/**\n * Should not be able to get by Id\n */\n\nexport class Plan extends GraphQueryableInstance<IPlannerPlan> {\n\n    public get tasks(): Tasks {\n        return new Tasks(this);\n    }\n\n    public get buckets(): Buckets {\n        return new Buckets(this);\n    }\n\n    public get details(): Details {\n        return new Details(this);\n    }\n\n    /**\n     * Deletes this Plan\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a Plan\n     * \n     * @param properties Set of properties of this Plan to update\n     */\n    public update(properties: IPlanner): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n}\n\n@defaultPath(\"tasks\")\nexport class Tasks extends GraphQueryableCollection<IPlannerTask[]> {\n    public getById(id: string): Task {\n        return new Task(this, id);\n    }\n\n    /**\n     * Create a new Planner Task.\n     * \n     * @param planId Id of Plan.\n     * @param title The Title of the Task.\n     * @param assignments Assign the task\n     * @param bucketId Id of Bucket\n     */\n    public add(planId: string, title: string, assignments?: TypedHash<any>, bucketId?: string): Promise<TaskAddResult> {\n\n        let postBody = extend({\n            planId: planId,\n            title: title,\n        }, assignments);\n\n        if (bucketId) {\n            postBody = extend(postBody, {\n                bucketId: bucketId,\n            });\n        }\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                task: this.getById(r.id),\n            };\n        });\n    }\n\n}\n\nexport class Task extends GraphQueryableInstance<IPlannerTask> {\n    /**\n     * Deletes this Task\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a Task\n     * \n     * @param properties Set of properties of this Task to update\n     */\n    public update(properties: IPlannerTask): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    public get details(): Details {\n        return new Details(this);\n    }\n}\n\n@defaultPath(\"buckets\")\nexport class Buckets extends GraphQueryableCollection<IPlannerBucket[]> {\n    /**\n     * Create a new Bucket.\n     * \n     * @param name Name of Bucket object.\n     * @param planId The Id of the Plan.\n     * @param oderHint Hint used to order items of this type in a list view.\n     */\n    public add(name: string, planId: string, orderHint?: string): Promise<BucketAddResult> {\n\n        const postBody = {\n            name: name,\n            orderHint: orderHint ? orderHint : \"\",\n            planId: planId,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                bucket: this.getById(r.id),\n                data: r,\n            };\n        });\n    }\n\n    public getById(id: string): Bucket {\n        return new Bucket(this, id);\n    }\n\n}\n\nexport class Bucket extends GraphQueryableInstance<IPlannerBucket> {\n    /**\n     * Deletes this Bucket\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a Bucket\n     * \n     * @param properties Set of properties of this Bucket to update\n     */\n    public update(properties: IPlannerBucket): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    public get tasks(): Tasks {\n        return new Tasks(this);\n    }\n}\n\n@defaultPath(\"details\")\nexport class Details extends GraphQueryableCollection<IPlannerPlanDetails> {}\n\nexport interface BucketAddResult {\n    data: IPlannerBucket;\n    bucket: Bucket;\n}\n\nexport interface PlanAddResult {\n    data: IPlannerPlan;\n    plan: Plan;\n}\n\nexport interface TaskAddResult {\n    data: IPlannerTask;\n    task: Task;\n}\n","import { GraphQueryableInstance, defaultPath } from \"./graphqueryable\";\nimport { BlobParser, BufferParser } from \"@pnp/odata\";\nimport { Photo as IPhoto } from \"@microsoft/microsoft-graph-types\";\n\n@defaultPath(\"photo\")\nexport class Photo extends GraphQueryableInstance<IPhoto> {\n\n    /**\n     * Gets the image bytes as a blob (browser)\n     */\n    public getBlob(): Promise<Blob> {\n        return this.clone(Photo, \"$value\", false).get(new BlobParser());\n    }\n\n    /**\n     * Gets the image file byets as a Buffer (node.js)\n     */\n    public getBuffer(): Promise<ArrayBuffer> {\n        return this.clone(Photo, \"$value\", false).get(new BufferParser());\n    }\n\n    /**\n     * Sets the file bytes\n     * \n     * @param content Image file contents, max 4 MB\n     */\n    public setContent(content: ArrayBuffer | Blob): Promise<void> {\n\n        return this.clone(Photo, \"$value\", false).patchCore({\n            body: content,\n        });\n    }\n}\n","import { graph } from \"./rest\";\nimport { Group, GroupType, GroupAddResult } from \"./groups\";\nimport { GraphQueryableInstance, defaultPath, GraphQueryableCollection } from \"./graphqueryable\";\nimport { TeamProperties, TabsConfiguration } from \"./types\";\nimport { ODataParser, ODataDefaultParser } from \"@pnp/odata\";\nimport { FetchOptions, jsS, extend, TypedHash } from \"@pnp/common\";\n\n@defaultPath(\"teams\")\nexport class Teams extends GraphQueryableCollection {\n\n    /**\n     * Creates a new team and associated Group with the given information\n     * @param name The name of the new Group\n     * @param description Optional description of the group\n     * @param ownerId Add an owner with a user id from the graph\n     */\n    public create(name: string, description = \"\", ownerId: string, teamProperties: TeamProperties = {}): Promise<TeamCreateResult> {\n\n        const groupProps = {\n            \"description\": description && description.length > 0 ? description : \"\",\n            \"owners@odata.bind\": [\n                `https://graph.microsoft.com/v1.0/users/${ownerId}`,\n            ],\n        };\n\n        return graph.groups.add(name, name, GroupType.Office365, groupProps).then((gar: GroupAddResult) => {\n            return gar.group.createTeam(teamProperties).then(data => {\n                return {\n                    data: data,\n                    group: gar.group,\n                    team: new Team(gar.group),\n                };\n            });\n        });\n    }\n\n    public getById(id: string): Team {\n        return new Team(this, id);\n    }\n\n}\n\n/**\n * Represents a Microsoft Team\n */\n@defaultPath(\"team\")\nexport class Team extends GraphQueryableInstance<TeamProperties> {\n\n    public get channels(): Channels {\n        return new Channels(this);\n    }\n\n    public get installedApps(): Apps {\n        return new Apps(this);\n    }\n\n    /**\n     * Updates this team instance's properties\n     * \n     * @param properties The set of properties to update\n     */\n    // TODO:: update properties to be typed once type is available in graph-types\n    public update(properties: TeamProperties): Promise<TeamUpdateResult> {\n\n        return this.clone(Team, \"\").patchCore({\n            body: jsS(properties),\n        }).then(data => {\n            return {\n                data: data,\n                team: this,\n            };\n        });\n    }\n\n    /**\n     * Archives this Team\n     * \n     * @param shouldSetSpoSiteReadOnlyForMembers Should members have Read-only in associated Team Site\n     */\n    // TODO:: update properties to be typed once type is available in graph-types\n    public archive(shouldSetSpoSiteReadOnlyForMembers?: boolean): Promise<TeamUpdateResult> {\n\n        let postBody;\n\n        if (shouldSetSpoSiteReadOnlyForMembers != null) {\n            postBody = extend(postBody, {\n                shouldSetSpoSiteReadOnlyForMembers: shouldSetSpoSiteReadOnlyForMembers,\n            });\n        }\n        return this.clone(Team, \"archive\").postCore({\n            body: jsS(postBody),\n        }).then(data => {\n            return {\n                data: data,\n                team: this,\n            };\n        });\n    }\n\n    /**\n    * Unarchives this Team\n    * \n    */\n    // TODO:: update properties to be typed once type is available in graph-types\n    public unarchive(): Promise<TeamUpdateResult> {\n\n        return this.clone(Team, \"unarchive\").postCore({\n        }).then(data => {\n            return {\n                data: data,\n                team: this,\n            };\n        });\n    }\n\n    /**\n     * Clones this Team\n     * @param name The name of the new Group\n     * @param description Optional description of the group\n     * @param partsToClone Parts to clone ex: apps,tabs,settings,channels,members\n     * @param visibility Set visibility to public or private \n     */\n    // TODO:: update properties to be typed once type is available in graph-types\n    public cloneTeam(name: string, description = \"\", partsToClone: string, visibility: string): Promise<TeamUpdateResult> {\n\n        const postBody = {\n            description: description ? description : \"\",\n            displayName: name,\n            mailNickname: name,\n            partsToClone: partsToClone,\n            visibility: visibility,\n        };\n\n        return this.clone(Team, \"clone\").postCore({\n            body: jsS(postBody),\n        }).then(data => {\n            return {\n                data: data,\n                team: this,\n            };\n        });\n    }\n\n    /**\n     * Executes the currently built request\n     *\n     * @param parser Allows you to specify a parser to handle the result\n     * @param getOptions The options used for this request\n     */\n    public get<T = TeamProperties>(parser: ODataParser<T> = new ODataDefaultParser(), options: FetchOptions = {}): Promise<T> {\n        return this.clone(Team, \"\").getCore(parser, options);\n    }\n}\n\n@defaultPath(\"channels\")\nexport class Channels extends GraphQueryableCollection {\n\n    /**\n     * Creates a new Channel in the Team\n     * @param name The display name of the new channel\n     * @param description Optional description of the channel\n     * \n     */\n    public create(name: string, description = \"\"): Promise<ChannelCreateResult> {\n\n        const postBody = {\n            description: description && description.length > 0 ? description : \"\",\n            displayName: name,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                channel: this.getById(r.id),\n                data: r,\n            };\n        });\n    }\n\n    public getById(id: string): Channel {\n        return new Channel(this, id);\n    }\n\n}\n\nexport class Channel extends GraphQueryableInstance {\n    public get tabs(): Tabs {\n        return new Tabs(this);\n    }\n}\n\n@defaultPath(\"installedApps\")\nexport class Apps extends GraphQueryableCollection {\n\n    /**\n     * Creates a new App in the Team\n     * @param appUrl The url to an app ex: https://graph.microsoft.com/beta/appCatalogs/teamsApps/12345678-9abc-def0-123456789a\n     * \n     */\n    public add(appUrl: string): Promise<any> {\n\n        const postBody = {\n            \"teamsApp@odata.bind\": appUrl,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n            };\n        });\n    }\n\n    /**\n     * Deletes this app\n     */\n    public remove(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\n@defaultPath(\"tabs\")\nexport class Tabs extends GraphQueryableCollection {\n\n    /**\n     * Adds a tab to the cahnnel\n     * @param name The name of the new Tab\n     * @param appUrl The url to an app ex: https://graph.microsoft.com/beta/appCatalogs/teamsApps/12345678-9abc-def0-123456789a\n     * @param tabsConfiguration visit https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/teamstab_add for reference\n     */\n    public add(name: string, appUrl: string, properties: TabsConfiguration): Promise<TabCreateResult> {\n\n        const postBody = extend({\n            name: name,\n            \"teamsApp@odata.bind\": appUrl,\n        }, properties);\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                tab: this.getById(r.id),\n            };\n        });\n\n    }\n\n    public getById(id: string): Tab {\n        return new Tab(this, id);\n    }\n\n}\n\n/**\n * Represents a Microsoft Team\n */\n@defaultPath(\"tab\")\nexport class Tab extends GraphQueryableInstance<TeamProperties> {\n\n    /**\n     * Updates this tab\n     * \n     * @param properties The set of properties to update\n     */\n    // TODO:: update properties to be typed once type is available in graph-types\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<TabUpdateResult> {\n\n        return this.clone(Tab, \"\").patchCore({\n            body: jsS(properties),\n        }).then(data => {\n            return {\n                data: data,\n                tab: this,\n            };\n        });\n    }\n\n    /**\n     * Deletes this tab\n     */\n    public remove(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport interface TeamUpdateResult {\n    data: any;\n    team: Team;\n}\n\nexport interface TeamCreateResult {\n    data: any;\n    group: Group;\n    team: Team;\n}\n\nexport interface ChannelCreateResult {\n    data: any;\n    channel: Channel;\n}\n\nexport interface TabCreateResult {\n    data: any;\n    tab: Tab;\n}\n\nexport interface TabUpdateResult {\n    data: any;\n    tab: Tab;\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { Members, Owners } from \"./members\";\nimport { extend, TypedHash, jsS } from \"@pnp/common\";\nimport { Calendar, Events } from \"./calendars\";\nimport { Conversations, Senders } from \"./conversations\";\nimport { Event as IEvent, Group as IGroup } from \"@microsoft/microsoft-graph-types\";\nimport { Plans } from \"./planner\";\nimport { Photo } from \"./photos\";\nimport { Team } from \"./teams\";\nimport { TeamProperties } from \"./types\";\n\nexport enum GroupType {\n    /**\n     * Office 365 (aka unified group)\n     */\n    Office365,\n    /**\n     * Dynamic membership\n     */\n    Dynamic,\n    /**\n     * Security\n     */\n    Security,\n}\n\n/**\n * Describes a collection of Field objects\n *\n */\n@defaultPath(\"groups\")\nexport class Groups extends GraphQueryableCollection<IGroup[]> {\n\n    /**\n     * Gets a group from the collection using the specified id\n     * \n     * @param id Id of the group to get from this collection\n     */\n    public getById(id: string): Group {\n        return new Group(this, id);\n    }\n\n    /**\n     * Create a new group as specified in the request body.\n     * \n     * @param name Name to display in the address book for the group\n     * @param mailNickname Mail alias for the group\n     * @param groupType Type of group being created\n     * @param additionalProperties A plain object collection of additional properties you want to set on the new group\n     */\n    public add(name: string, mailNickname: string, groupType: GroupType, additionalProperties: TypedHash<any> = {}): Promise<GroupAddResult> {\n\n        let postBody = extend({\n            displayName: name,\n            mailEnabled: groupType === GroupType.Office365,\n            mailNickname: mailNickname,\n            securityEnabled: groupType !== GroupType.Office365,\n        }, additionalProperties);\n\n        // include a group type if required\n        if (groupType !== GroupType.Security) {\n\n            postBody = extend(postBody, {\n                groupTypes: groupType === GroupType.Office365 ? [\"Unified\"] : [\"DynamicMembership\"],\n            });\n        }\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                group: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Represents a group entity\n */\nexport class Group extends GraphQueryableInstance<IGroup> {\n\n    /**\n     * The calendar associated with this group\n     */\n    public get calendar(): Calendar {\n        return new Calendar(this, \"calendar\");\n    }\n\n    /**\n     * Retrieve a list of event objects\n     */\n    public get events(): Events {\n        return new Events(this);\n    }\n\n    /**\n     * Gets the collection of owners for this group\n     */\n    public get owners(): Owners {\n        return new Owners(this);\n    }\n\n    /**\n     * The collection of plans for this group\n     */\n    public get plans(): Plans {\n        return new Plans(this, \"planner/plans\");\n    }\n\n    /**\n     * Gets the collection of members for this group\n     */\n    public get members(): Members {\n        return new Members(this);\n    }\n\n    /**\n     * Gets the conversations collection for this group\n     */\n    public get conversations(): Conversations {\n        return new Conversations(this);\n    }\n\n    /**\n     * Gets the collection of accepted senders for this group\n     */\n    public get acceptedSenders(): Senders {\n        return new Senders(this, \"acceptedsenders\");\n    }\n\n    /**\n     * Gets the collection of rejected senders for this group\n     */\n    public get rejectedSenders(): Senders {\n        return new Senders(this, \"rejectedsenders\");\n    }\n\n    /**\n     * The photo associated with the group\n     */\n    public get photo(): Photo {\n        return new Photo(this);\n    }\n\n    /**\n     * Gets the team associated with this group, if it exists\n     */\n    public get team(): Team {\n        return new Team(this);\n    }\n\n    /**\n     * Add the group to the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public addFavorite(): Promise<void> {\n        return this.clone(Group, \"addFavorite\").postCore();\n    }\n\n    /**\n     * Creates a Microsoft Team associated with this group\n     * \n     * @param properties Initial properties for the new Team\n     */\n    public createTeam(properties: TeamProperties): Promise<any> {\n\n        return this.clone(Group, \"team\").putCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Returns all the groups and directory roles that the specified group is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberObjects(securityEnabledOnly = false): Promise<{ value: string[] }> {\n        return this.clone(Group, \"getMemberObjects\").postCore({\n            body: jsS({\n                securityEnabledOnly: securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Return all the groups that the specified group is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberGroups(securityEnabledOnly = false): Promise<{ value: string[] }> {\n\n        return this.clone(Group, \"getMemberGroups\").postCore({\n            body: jsS({\n                securityEnabledOnly: securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Check for membership in a specified list of groups, and returns from that list those groups of which the specified user, group, or directory object is a member. \n     * This function is transitive.\n     * @param groupIds A collection that contains the object IDs of the groups in which to check membership. Up to 20 groups may be specified.\n     */\n    public checkMemberGroups(groupIds: String[]): Promise<{ value: string[] }> {\n        return this.clone(Group, \"checkMemberGroups\").postCore({\n            body: jsS({\n                groupIds: groupIds,\n            }),\n        });\n    }\n\n    /**\n     * Deletes this group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a group object\n     * \n     * @param properties Set of properties of this group to update\n     */\n    public update(properties: IGroup): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Remove the group from the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public removeFavorite(): Promise<void> {\n\n        return this.clone(Group, \"removeFavorite\").postCore();\n    }\n\n    /**\n     * Reset the unseenCount of all the posts that the current user has not seen since their last visit\n     */\n    public resetUnseenCount(): Promise<void> {\n        return this.clone(Group, \"resetUnseenCount\").postCore();\n    }\n\n    /**\n     * Calling this method will enable the current user to receive email notifications for this group,\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public subscribeByMail(): Promise<void> {\n        return this.clone(Group, \"subscribeByMail\").postCore();\n    }\n\n    /**\n     * Calling this method will prevent the current user from receiving email notifications for this group\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public unsubscribeByMail(): Promise<void> {\n        return this.clone(Group, \"unsubscribeByMail\").postCore();\n    }\n\n    /**\n     * Get the occurrences, exceptions, and single instances of events in a calendar view defined by a time range, from the default calendar of a group\n     * \n     * @param start Start date and time of the time range\n     * @param end End date and time of the time range\n     */\n    public getCalendarView(start: Date, end: Date): Promise<IEvent[]> {\n\n        const view = this.clone(Group, \"calendarView\");\n        view.query.set(\"startDateTime\", start.toISOString());\n        view.query.set(\"endDateTime\", end.toISOString());\n        return view.get();\n    }\n}\n\nexport interface GroupAddResult {\n    group: Group;\n    data: any;\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS, TypedHash, extend } from \"@pnp/common\";\nimport {\n    Contact as IContact,\n    ContactFolder as IContactFolder,\n    EmailAddress,\n} from \"@microsoft/microsoft-graph-types\";\n\n@defaultPath(\"contacts\")\nexport class Contacts extends GraphQueryableCollection<IContact[]> {\n\n    public getById(id: string): Contact {\n        return new Contact(this, id);\n    }\n\n    /**\n    * Create a new Contact for the user.\n    * \n    * @param givenName The contact's given name.\n    * @param surName The contact's surname.\n    * @param emailAddresses The contact's email addresses.\n    * @param businessPhones The contact's business phone numbers.\n    * @param additionalProperties A plain object collection of additional properties you want to set on the new contact\n    */\n    public add(givenName: string, surName: string, emailAddresses: EmailAddress[], businessPhones: string[], additionalProperties: TypedHash<any> = {}): Promise<ContactAddResult> {\n\n        const postBody = extend({\n            businessPhones: businessPhones,\n            emailAddresses: emailAddresses,\n            givenName: givenName,\n            surName: surName,\n        }, additionalProperties);\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                contact: this.getById(r.id),\n                data: r,\n            };\n        });\n    }\n}\n\nexport class Contact extends GraphQueryableInstance<IContact> {\n    /**\n     * Deletes this contact\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a contact object\n     * \n     * @param properties Set of properties of this contact to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n}\n\n@defaultPath(\"contactFolders\")\nexport class ContactFolders extends GraphQueryableCollection<IContactFolder[]> {\n\n    public getById(id: string): ContactFolder {\n        return new ContactFolder(this, id);\n    }\n\n    /**\n     * Create a new Contact Folder for the user.\n     * \n     * @param displayName The folder's display name.\n     * @param parentFolderId The ID of the folder's parent folder.\n     */\n    public add(displayName: string, parentFolderId?: string): Promise<ContactFolderAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n            parentFolderId: parentFolderId,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                contactFolder: this.getById(r.id),\n                data: r,\n            };\n        });\n    }\n}\n\nexport class ContactFolder extends GraphQueryableInstance<IContactFolder> {\n    /**\n     * Gets the contacts in this contact folder\n     */\n    public get contacts(): Contacts {\n        return new Contacts(this);\n    }\n\n    /**\n    * Gets the contacts in this contact folder\n    */\n    public get childFolders(): ContactFolders {\n        return new ContactFolders(this, \"childFolders\");\n    }\n\n    /**\n     * Deletes this contact folder\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a contact folder\n     * \n     * @param properties Set of properties of this contact folder to update\n     */\n    public update(properties: IContactFolder): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n}\n\nexport interface ContactFolderAddResult {\n    data: IContactFolder;\n    contactFolder: ContactFolder;\n}\n\nexport interface ContactAddResult {\n    data: IContact;\n    contact: Contact;\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS } from \"@pnp/common\";\nimport { Notebook as INotebook, Onenote as IOnenote, OnenoteSection as ISection } from \"@microsoft/microsoft-graph-types\";\n\nexport interface OneNoteMethods {\n    notebooks: Notebooks;\n    sections: Sections;\n    pages: Pages;\n}\n\n/**\n * Represents a onenote entity\n */\n@defaultPath(\"onenote\")\nexport class OneNote extends GraphQueryableInstance<IOnenote> implements OneNoteMethods {\n\n    public get notebooks(): Notebooks {\n        return new Notebooks(this);\n    }\n\n    public get sections(): Sections {\n        return new Sections(this);\n    }\n\n    public get pages(): Pages {\n        return new Pages(this);\n    }\n}\n\n/**\n * Describes a collection of Notebook objects\n *\n */\n@defaultPath(\"notebooks\")\nexport class Notebooks extends GraphQueryableCollection<INotebook[]> {\n\n    /**\n     * Gets a notebook instance by id\n     * \n     * @param id Notebook id\n     */\n    public getById(id: string): Notebook {\n        return new Notebook(this, id);\n    }\n\n    /**\n     * Create a new notebook as specified in the request body.\n     * \n     * @param displayName Notebook display name\n     */\n    public add(displayName: string): Promise<NotebookAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                notebook: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Describes a notebook instance\n *\n */\nexport class Notebook extends GraphQueryableInstance<INotebook> {\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    public get sections(): Sections {\n        return new Sections(this);\n    }\n}\n\n/**\n * Describes a collection of Sections objects\n *\n */\n@defaultPath(\"sections\")\nexport class Sections extends GraphQueryableCollection<ISection[]> {\n\n    /**\n     * Gets a section instance by id\n     * \n     * @param id Section id\n     */\n    public getById(id: string): Section {\n        return new Section(this, id);\n    }\n\n    /**\n     * Adds a new section\n     * \n     * @param displayName New section display name\n     */\n    public add(displayName: string): Promise<SectionAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                section: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Describes a sections instance\n *\n */\nexport class Section extends GraphQueryableInstance<ISection> {\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n}\n\n/**\n * Describes a collection of Pages objects\n *\n */\n@defaultPath(\"pages\")\nexport class Pages extends GraphQueryableCollection { }\n\nexport interface NotebookAddResult {\n    data: any;\n    notebook: Notebook;\n}\n\nexport interface SectionAddResult {\n    data: any;\n    section: Section;\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { Drive as IDrive } from \"@microsoft/microsoft-graph-types\";\nimport { jsS, TypedHash, extend } from \"@pnp/common\";\n\nexport interface IDriveItemsMethods {\n    getById(id: string): DriveItem;\n}\n\n/**\n * Describes a collection of Drive objects\n *\n */\n@defaultPath(\"drives\")\nexport class Drives extends GraphQueryableCollection<IDrive[]> {\n\n    /**\n     * Gets a Drive instance by id\n     * \n     * @param id Drive id\n     */\n    public getById(id: string): Drive {\n        return new Drive(this, id);\n    }\n}\n\n/**\n * Describes a Drive instance\n *\n */\n@defaultPath(\"drive\")\nexport class Drive extends GraphQueryableInstance<IDrive> {\n\n    public get root(): Root {\n        return new Root(this);\n    }\n\n    public get items(): IDriveItemsMethods {\n        return new DriveItems(this);\n    }\n\n    public get list(): DriveList {\n        return new DriveList(this);\n    }\n\n    public get recent(): Recent {\n        return new Recent(this);\n    }\n\n    public get sharedWithMe(): SharedWithMe {\n        return new SharedWithMe(this);\n    }\n\n}\n\n/**\n * Describes a Root instance\n *\n */\n@defaultPath(\"root\")\nexport class Root extends GraphQueryableInstance<IDrive> {\n\n    public get children(): Children {\n        return new Children(this);\n    }\n\n    public search(query: string): DriveSearch {\n        return new DriveSearch(this, `search(q='${query}')`);\n    }\n}\n\n/**\n * Describes a collection of Drive Item objects\n *\n */\n@defaultPath(\"items\")\nexport class DriveItems extends GraphQueryableCollection implements IDriveItemsMethods {\n    /**\n     * Gets a Drive Item instance by id\n     * \n     * @param id Drive Item id\n     */\n    public getById(id: string): DriveItem {\n        return new DriveItem(this, id);\n    }\n}\n\n/**\n * Describes a Drive Item instance\n *\n */\nexport class DriveItem extends GraphQueryableInstance<any> {\n\n    public get children(): Children {\n        return new Children(this);\n    }\n\n    public get thumbnails(): Thumbnails {\n        return new Thumbnails(this);\n    }\n\n    /**\n     * Deletes this Drive Item\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a Drive item\n     * \n     * @param properties Set of properties of this Drive Item to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Move the Drive item and optionally update the properties\n     * \n     * @param parentReference Should contain Id of new parent folder\n     * @param properties Optional set of properties of this Drive Item to update\n     */\n    public move(parentReference: TypedHash<any>, properties?: TypedHash<string | number | boolean | string[]>): Promise<void> {\n        let patchBody = extend({\n        }, parentReference);\n\n        if (properties) {\n            patchBody = extend({\n            }, properties);\n        }\n\n        return this.patchCore({\n            body: jsS(patchBody),\n        });\n    }\n}\n\n/**\n * Return a collection of DriveItems in the children relationship of a DriveItem\n *\n */\n@defaultPath(\"children\")\nexport class Children extends GraphQueryableCollection {\n    /**\n    * Create a new folder or DriveItem in a Drive with a specified parent item or path\n    * Currently only Folder or File works\n    * @param name The name of the Drive Item.\n    * @param properties Type of Drive Item to create.\n    * */\n    public add(name: string, driveItemType: any): Promise<IDriveItemAddResult> {\n\n        const postBody = extend({\n            name: name,\n        }, driveItemType);\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                driveItem: new DriveItem(this, r.id),\n            };\n        });\n    }\n}\n\n@defaultPath(\"list\")\nexport class DriveList extends GraphQueryableCollection { }\n\n@defaultPath(\"recent\")\nexport class Recent extends GraphQueryableInstance { }\n\n@defaultPath(\"sharedWithMe\")\nexport class SharedWithMe extends GraphQueryableInstance { }\n\n@defaultPath(\"search\")\nexport class DriveSearch extends GraphQueryableInstance { }\n\n@defaultPath(\"thumbnails\")\nexport class Thumbnails extends GraphQueryableInstance { }\n\nexport interface IDriveItemAddResult {\n    data: any;\n    driveItem: DriveItem;\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport {\n    Message as IMessage,\n    MailFolder as IMailFolder,\n    MailboxSettings as IMailboxSettings,\n} from \"@microsoft/microsoft-graph-types\";\nimport { jsS } from \"@pnp/common\";\n\n@defaultPath(\"messages\")\nexport class Messages extends GraphQueryableCollection<IMessage[]> {\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Attachment id\n     */\n    public getById(id: string): Message {\n        return new Message(this, id);\n    }\n\n    /**\n     * Add a message to this collection\n     * \n     * @param message The message details\n     */\n    public add(message: IMessage): Promise<IMessage> {\n\n        return this.postCore({\n            body: jsS(message),\n        });\n    }\n}\n\nexport class Message extends GraphQueryableInstance<IMessage> { }\n\n@defaultPath(\"mailFolders\")\nexport class MailFolders extends GraphQueryableCollection<IMailFolder[]> {\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Attachment id\n     */\n    public getById(id: string): MailFolder {\n        return new MailFolder(this, id);\n    }\n\n    /**\n     * Add a mail folder to this collection\n     * \n     * @param message The message details\n     */\n    public add(mailFolder: IMailFolder): Promise<IMailFolder> {\n\n        return this.postCore({\n            body: jsS(mailFolder),\n        });\n    }\n}\n\nexport class MailFolder extends GraphQueryableInstance<IMailFolder> { }\n\n@defaultPath(\"mailboxSettings\")\nexport class MailboxSettings extends GraphQueryableInstance<IMailboxSettings> {\n\n    public update(settings: IMailboxSettings): Promise<void> {\n        return this.patchCore({\n            body: jsS(settings),\n        });\n    }\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS } from \"@pnp/common\";\nimport { DirectoryObject as IDirectoryObject } from \"@microsoft/microsoft-graph-types\";\n\nexport enum DirectoryObjectType {\n    /**\n     * Directory Objects\n     */\n    directoryObject,\n    /**\n     * User\n     */\n    user,\n    /**\n     * Group\n     */\n    group,\n    /**\n     * Device\n     */\n    device,\n}\n\n/**\n * Describes a collection of Directory Objects\n *\n */\n@defaultPath(\"directoryObjects\")\nexport class DirectoryObjects extends GraphQueryableCollection<IDirectoryObject[]> {\n\n    /**\n     * Gets a directoryObject from the collection using the specified id\n     * \n     * @param id Id of the Directory Object to get from this collection\n     */\n    public getById(id: string): DirectoryObject {\n        return new DirectoryObject(this, id);\n    }\n\n    /**\n    * Returns the directory objects specified in a list of ids. NOTE: The directory objects returned are the full objects containing all their properties. \n    * The $select query option is not available for this operation.\n    * \n    * @param ids A collection of ids for which to return objects. You can specify up to 1000 ids.\n    * @param type A collection of resource types that specifies the set of resource collections to search. Default is directoryObject.\n    */\n    public getByIds(ids: string[], type: DirectoryObjectType = DirectoryObjectType.directoryObject): Promise<DirectoryObject[]> {\n        return this.clone(DirectoryObjects, \"getByIds\").postCore({\n            body: jsS({\n                ids,\n                type,\n            }),\n        });\n    }\n}\n\n/**\n * Represents a Directory Object entity\n */\nexport class DirectoryObject extends GraphQueryableInstance<IDirectoryObject> {\n\n    /**\n     * Deletes this group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Returns all the groups and directory roles that the specified Directory Object is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberObjects(securityEnabledOnly = false): Promise<{ value: string[] }> {\n        return this.clone(DirectoryObject, \"getMemberObjects\").postCore({\n            body: jsS({\n                securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Returns all the groups that the specified Directory Object is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberGroups(securityEnabledOnly = false): Promise<{ value: string[] }> {\n\n        return this.clone(DirectoryObject, \"getMemberGroups\").postCore({\n            body: jsS({\n                securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Check for membership in a specified list of groups, and returns from that list those groups of which the specified user, group, or directory object is a member. \n     * This function is transitive.\n     * @param groupIds A collection that contains the object IDs of the groups in which to check membership. Up to 20 groups may be specified.\n     */\n    public checkMemberGroups(groupIds: String[]): Promise<{ value: string[] }> {\n        return this.clone(DirectoryObject, \"checkMemberGroups\").postCore({\n            body: jsS({\n                groupIds,\n            }),\n        });\n    }\n}\n","import { GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { Person as IPerson } from \"@microsoft/microsoft-graph-types\";\n\n@defaultPath(\"people\")\nexport class People extends GraphQueryableCollection<IPerson[]> { }\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { OfficeGraphInsights as IInsights, Trending as ITrending, UsedInsight as IUsed, SharedInsight as IShared } from \"@microsoft/microsoft-graph-types\";\n\nexport interface InsightsMethods {\n    trending: Trending;\n    used: Used;\n    shared: Shared;\n}\n\n/**\n * Represents a Insights entity\n */\n@defaultPath(\"insights\")\nexport class Insights extends GraphQueryableInstance<IInsights> implements InsightsMethods {\n\n    public get trending(): Trending {\n        return new Trending(this);\n    }\n\n    public get used(): Used {\n        return new Used(this);\n    }\n\n    public get shared(): Shared {\n        return new Shared(this);\n    }\n}\n\n/**\n * Describes a collection of Trending objects\n *\n */\n@defaultPath(\"trending\")\nexport class Trending extends GraphQueryableCollection<ITrending[]> { }\n\n/**\n * Describes a collection of Used objects\n *\n */\n@defaultPath(\"used\")\nexport class Used extends GraphQueryableCollection<IUsed[]> { }\n\n/**\n * Describes a collection of Shared objects\n *\n */\n@defaultPath(\"shared\")\nexport class Shared extends GraphQueryableCollection<IShared[]> { }\n","import { jsS } from \"@pnp/common\";\nimport { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { Contacts, ContactFolders } from \"./contacts\";\nimport { OneNote, OneNoteMethods } from \"./onenote\";\nimport { Drive, Drives } from \"./onedrive\";\nimport { Tasks } from \"./planner\";\nimport { Teams } from \"./teams\";\nimport {\n    User as IUser,\n    Message as IMessage,\n} from \"@microsoft/microsoft-graph-types\";\nimport { Messages, MailboxSettings, MailFolders } from \"./messages\";\nimport { DirectoryObjects } from \"./directoryobjects\";\nimport { People } from \"./people\";\n\nimport { InsightsMethods, Insights } from \"./insights\";\n\n/**\n * Describes a collection of Users objects\n *\n */\n@defaultPath(\"users\")\nexport class Users extends GraphQueryableCollection<IUser[]> {\n    /**\n     * Gets a user from the collection using the specified id\n     * \n     * @param id Id of the user to get from this collection\n     */\n    public getById(id: string): User {\n        return new User(this, id);\n    }\n}\n\n/**\n * Represents a user entity\n */\nexport class User extends GraphQueryableInstance<IUser> {\n    /**\n    * The onenote associated with me\n    */\n    public get onenote(): OneNoteMethods {\n        return new OneNote(this);\n    }\n\n    /**\n    * The Contacts associated with the user\n    */\n    public get contacts(): Contacts {\n        return new Contacts(this);\n    }\n    /**\n    * The Teams associated with the user\n    */\n    public get joinedTeams(): Teams {\n        return new Teams(this, \"joinedTeams\");\n    }\n\n    /**\n    * The groups and directory roles associated with the user\n    */\n    public get memberOf(): DirectoryObjects {\n        return new DirectoryObjects(this, \"memberOf\");\n    }\n\n    /**\n     * Returns all the groups and directory roles that the specified useris a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberObjects(securityEnabledOnly = false): Promise<{ value: string[] }> {\n        return this.clone(User, \"getMemberObjects\").postCore({\n            body: jsS({\n                securityEnabledOnly: securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Return all the groups that the specified user is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberGroups(securityEnabledOnly = false): Promise<{ value: string[] }> {\n\n        return this.clone(User, \"getMemberGroups\").postCore({\n            body: jsS({\n                securityEnabledOnly: securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Check for membership in a specified list of groups, and returns from that list those groups of which the specified user, group, or directory object is a member. \n     * This function is transitive.\n     * @param groupIds A collection that contains the object IDs of the groups in which to check membership. Up to 20 groups may be specified.\n     */\n    public checkMemberGroups(groupIds: String[]): Promise<{ value: string[] }> {\n        return this.clone(User, \"checkMemberGroups\").postCore({\n            body: jsS({\n                groupIds: groupIds,\n            }),\n        });\n    }\n    /**\n    * The Contact Folders associated with the user\n    */\n    public get contactFolders(): ContactFolders {\n        return new ContactFolders(this);\n    }\n\n    /**\n    * The default Drive associated with the user\n    */\n    public get drive(): Drive {\n        return new Drive(this);\n    }\n\n    /**\n    * The Drives the user has available\n    */\n    public get drives(): Drives {\n        return new Drives(this);\n    }\n\n    /**\n    * The Tasks the user has available\n    */\n    public get tasks(): Tasks {\n        return new Tasks(this, \"planner/tasks\");\n    }\n\n    /**\n     * Get the messages in the signed-in user's mailbox\n     */\n    public get messages(): Messages {\n        return new Messages(this);\n    }\n\n    /**\n     * Get the MailboxSettings in the signed-in user's mailbox\n     */\n    public get mailboxSettings(): MailboxSettings {\n        return new MailboxSettings(this);\n    }\n\n    /**\n     * Get the MailboxSettings in the signed-in user's mailbox\n     */\n    public get mailFolders(): MailFolders {\n        return new MailFolders(this);\n    }\n\n    /**\n     * Updates this user\n     * \n     * @param properties Properties used to update this user\n     */\n    public update(properties: IUser): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Deletes this user\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Send the message specified in the request body. The message is saved in the Sent Items folder by default.\n     */\n    public sendMail(message: IMessage): Promise<void> {\n\n        return this.clone(User, \"sendMail\").postCore({\n            body: jsS(message),\n        });\n    }\n\n    /**\n    * People ordered by their relevance to the user\n    */\n    public get people(): People {\n        return new People(this);\n    }\n\n    /**\n    * People that have direct reports to the user\n    */\n    public get directReports(): People {\n        return new People(this, \"directReports\");\n    }\n\n    /**\n    * The Insights associated with me\n    */\n    public get insights(): InsightsMethods {\n        return new Insights(this);\n    }\n\n}\n","import { ODataBatch, ODataBatchRequestInfo } from \"@pnp/odata\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { extend, jsS, isUrlAbsolute } from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"./config/graphlibconfig\";\nimport { GraphHttpClient } from \"./net/graphhttpclient\";\n\ninterface GraphBatchRequestFragment {\n    id: string;\n    method: string;\n    url: string;\n    headers?: string[][] | {\n        [key: string]: string;\n    };\n    body?: any;\n}\n\ninterface GraphBatchRequest {\n    requests: GraphBatchRequestFragment[];\n}\n\ninterface GraphBatchResponseFragment {\n    id: string;\n    status: number;\n    statusText?: string;\n    method: string;\n    url: string;\n    headers?: string[][] | {\n        [key: string]: string;\n    };\n    body?: any;\n}\n\ninterface GraphBatchResponse {\n    responses: GraphBatchResponseFragment[];\n    nextLink?: string;\n}\n\nexport class GraphBatch extends ODataBatch {\n\n    constructor(private batchUrl = \"https://graph.microsoft.com/v1.0/$batch\", private maxRequests = 20) {\n        super();\n    }\n\n    /**\n     * Urls come to the batch absolute, but the processor expects relative\n     * @param url Url to ensure is relative\n     */\n    private static makeUrlRelative(url: string): string {\n\n        if (!isUrlAbsolute(url)) {\n            // already not absolute, just give it back\n            return url;\n        }\n\n        let index = url.indexOf(\".com/v1.0/\");\n\n        if (index < 0) {\n\n            index = url.indexOf(\".com/beta/\");\n\n            if (index > -1) {\n\n                // beta url\n                return url.substr(index + 10);\n            }\n\n        } else {\n            // v1.0 url\n            return url.substr(index + 9);\n        }\n\n        // no idea\n        return url;\n    }\n\n    private static formatRequests(requests: ODataBatchRequestInfo[]): GraphBatchRequestFragment[] {\n\n        return requests.map((reqInfo, index) => {\n\n            let requestFragment: GraphBatchRequestFragment = {\n                id: `${++index}`,\n                method: reqInfo.method,\n                url: this.makeUrlRelative(reqInfo.url),\n            };\n\n            let headers = {};\n\n            // merge global config headers\n            if (GraphRuntimeConfig.headers !== undefined && GraphRuntimeConfig.headers !== null) {\n\n                headers = extend(headers, GraphRuntimeConfig.headers);\n            }\n\n            if (reqInfo.options !== undefined) {\n\n                // merge per request headers\n                if (reqInfo.options.headers !== undefined && reqInfo.options.headers !== null) {\n                    headers = extend(headers, reqInfo.options.headers);\n                }\n\n                // add a request body\n                if (reqInfo.options.body !== undefined && reqInfo.options.body !== null) {\n\n                    requestFragment = extend(requestFragment, {\n                        body: reqInfo.options.body,\n                    });\n                }\n            }\n\n            requestFragment = extend(requestFragment, {\n                headers: headers,\n            });\n\n            return requestFragment;\n        });\n    }\n\n    private static parseResponse(requests: ODataBatchRequestInfo[], graphResponse: GraphBatchResponse): Promise<{ nextLink: string, responses: Response[] }> {\n\n        return new Promise((resolve) => {\n\n            const parsedResponses: Response[] = new Array(requests.length).fill(null);\n\n            for (let i = 0; i < graphResponse.responses.length; ++i) {\n\n                const response = graphResponse.responses[i];\n                // we create the request id by adding 1 to the index, so we place the response by subtracting one to match\n                // the array of requests and make it easier to map them by index\n                const responseId = parseInt(response.id, 10) - 1;\n\n                if (response.status === 204) {\n\n                    parsedResponses[responseId] = new Response();\n                } else {\n\n                    parsedResponses[responseId] = new Response(JSON.stringify(response.body), response);\n                }\n            }\n\n            resolve({\n                nextLink: graphResponse.nextLink,\n                responses: parsedResponses,\n            });\n        });\n    }\n\n    protected executeImpl(): Promise<void> {\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, LogLevel.Info);\n\n        if (this.requests.length < 1) {\n            Logger.write(`Resolving empty batch.`, LogLevel.Info);\n            return Promise.resolve();\n        }\n\n        const client = new GraphHttpClient();\n\n        // create a working copy of our requests\n        const requests = this.requests.slice();\n\n        // this is the root of our promise chain\n        const promise = Promise.resolve();\n\n        while (requests.length > 0) {\n\n            const requestsChunk = requests.splice(0, this.maxRequests);\n\n            const batchRequest: GraphBatchRequest = {\n                requests: GraphBatch.formatRequests(requestsChunk),\n            };\n\n            const batchOptions = {\n                body: jsS(batchRequest),\n                headers: {\n                    \"Accept\": \"application/json\",\n                    \"Content-Type\": \"application/json\",\n                },\n                method: \"POST\",\n            };\n\n            Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, LogLevel.Info);\n\n            client.fetch(this.batchUrl, batchOptions)\n                .then(r => r.json())\n                .then((j) => GraphBatch.parseResponse(requestsChunk, j))\n                .then((parsedResponse: { nextLink: string, responses: Response[] }) => {\n\n                    Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, LogLevel.Info);\n\n                    parsedResponse.responses.reduce((chain, response, index) => {\n\n                        const request = requestsChunk[index];\n\n                        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched request ${request.method} ${request.url}.`, LogLevel.Verbose);\n\n                        return chain.then(_ => request.parser.parse(response).then(request.resolve).catch(request.reject));\n\n                    }, promise);\n                });\n        }\n\n        return promise;\n    }\n}\n","import { jsS, TypedHash, extend } from \"@pnp/common\";\nimport { GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { Invitation as IInvitation } from \"@microsoft/microsoft-graph-types\";\n\n// Should not be able to use the invitations.get()\nexport interface IInvitationsMethods {\n    create(invitedUserEmailAddress: string, inviteRedirectUrl: string, additionalProperties: TypedHash<any>): Promise<InvitationAddResult>;\n}\n\n@defaultPath(\"invitations\")\nexport class Invitations extends GraphQueryableCollection<IInvitation[]> {\n\n    /**\n     * Create a new Invitation via invitation manager.\n     * \n     * @param invitedUserEmailAddress The email address of the user being invited.\n     * @param inviteRedirectUrl The URL user should be redirected to once the invitation is redeemed.\n     * @param additionalProperties A plain object collection of additional properties you want to set in the invitation\n     */\n    public create(invitedUserEmailAddress: string, inviteRedirectUrl: string, additionalProperties: TypedHash<any> = {}): Promise<InvitationAddResult> {\n\n        const postBody = extend({\n            inviteRedirectUrl: inviteRedirectUrl,\n            invitedUserEmailAddress: invitedUserEmailAddress,\n        }, additionalProperties);\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n            };\n        });\n    }\n\n}\n\nexport interface InvitationAddResult {\n    data: IInvitation;\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS, TypedHash, extend } from \"@pnp/common\";\nimport { Subscription as ISubscription } from \"@microsoft/microsoft-graph-types\";\n\n@defaultPath(\"subscriptions\")\nexport class Subscriptions extends GraphQueryableCollection<ISubscription[]> {\n\n    public getById(id: string): Subscription {\n        return new Subscription(this, id);\n    }\n\n    /**\n     * Create a new Subscription.\n     * \n     * @param changeType Indicates the type of change in the subscribed resource that will raise a notification. The supported values are: created, updated, deleted.\n     * @param notificationUrl The URL of the endpoint that will receive the notifications. This URL must make use of the HTTPS protocol.\n     * @param resource Specifies the resource that will be monitored for changes. Do not include the base URL (https://graph.microsoft.com/v1.0/).\n     * @param expirationDateTime Specifies the date and time when the webhook subscription expires. The time is in UTC.\n     * @param additionalProperties A plain object collection of additional properties you want to set on the new subscription\n     * \n     */\n    public add(changeType: string, notificationUrl: string, resource: string, expirationDateTime: string,\n        additionalProperties: TypedHash<any> = {}): Promise<SubAddResult> {\n\n        const postBody = extend({\n            changeType: changeType,\n            expirationDateTime: expirationDateTime,\n            notificationUrl: notificationUrl,\n            resource: resource,\n        }, additionalProperties);\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                subscription: this.getById(r.id),\n            };\n        });\n    }\n}\n\nexport class Subscription extends GraphQueryableInstance<ISubscription> {\n\n    /**\n     * Deletes this Subscription\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a Subscription\n     * \n     * @param properties Set of properties of this Subscription to update\n     */\n    public update(properties: ISubscription): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n}\n\nexport interface SubAddResult {\n    data: ISubscription;\n    subscription: Subscription;\n}\n","import { jsS } from \"@pnp/common\";\nimport { GraphQueryableCollection, defaultPath, GraphQueryableInstance } from \"./graphqueryable\";\nimport { Security as ISecurity, Alert as IAlert } from \"@microsoft/microsoft-graph-types\";\n\nexport interface ISecurityMethods {\n    alerts: Alerts;\n}\n\n@defaultPath(\"security\")\nexport class Security extends GraphQueryableInstance<ISecurity> implements ISecurityMethods {\n\n    public get alerts(): Alerts {\n        return new Alerts(this);\n    }\n}\n\n@defaultPath(\"alerts\")\nexport class Alerts extends GraphQueryableCollection<IAlert[]> {\n    public getById(id: string): Alert {\n        return new Alert(this, id);\n    }\n}\n\nexport class Alert extends GraphQueryableInstance<IAlert> {\n\n    /**\n    * Update the properties of an Alert\n    * \n    * @param properties Set of properties of this Alert to update\n    */\n    public update(properties: IAlert): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS, TypedHash, extend } from \"@pnp/common\";\nimport {\n    Site as ISite,\n    List as IList,\n    ListItem as IListItem,\n    ListItemVersion as IListItemVersion,\n    ContentType as IContentType,\n    ColumnDefinition as IColumnDefinition,\n    ListInfo as IListInfo,\n    FieldValueSet as IFieldValueSet,\n    ColumnLink as IColumnLink,\n} from \"@microsoft/microsoft-graph-types\";\nimport {\n    Drive,\n    Drives,\n    DriveItem,\n} from \"./onedrive\";\n\nexport interface ISitesMethods {\n    root: GraphSite;\n    getById(baseUrl: string, relativeUrl?: string): GraphSite;\n}\n\n/**\n * Represents a Sites entity\n */\n@defaultPath(\"sites\")\nexport class Sites extends GraphQueryableInstance<ISite> implements ISitesMethods {\n\n    /**\n     * Gets the root site collection of the tenant\n     */\n    public get root(): GraphSite {\n        return new GraphSite(this, \"root\");\n    }\n\n    /**\n     * Gets a Site instance by id\n     * \n     * @param baseUrl Base url ex: contoso.sharepoint.com\n     * @param relativeUrl Optional relative url ex: /sites/site\n     */\n    public getById(baseUrl: string, relativeUrl?: string): GraphSite {\n        let siteUrl = baseUrl;\n\n        // If a relative URL combine url with : at the right places\n        if (relativeUrl) {\n            siteUrl = this._urlCombine(baseUrl, relativeUrl);\n        }\n\n        return new GraphSite(this, siteUrl);\n    }\n\n    /**\n     * Method to make sure the url is encoded as it should with :\n     * \n     */\n    private _urlCombine(baseUrl: string, relativeUrl: string): string {\n        // remove last '/' of base if exists\n        if (baseUrl.lastIndexOf(\"/\") === baseUrl.length - 1) {\n            baseUrl = baseUrl.substring(0, baseUrl.length - 1);\n        }\n\n        // remove '/' at 0\n        if (relativeUrl.charAt(0) === \"/\") {\n            relativeUrl = relativeUrl.substring(1, relativeUrl.length);\n        }\n\n        // remove last '/' of next if exists\n        if (relativeUrl.lastIndexOf(\"/\") === relativeUrl.length - 1) {\n            relativeUrl = relativeUrl.substring(0, relativeUrl.length - 1);\n        }\n\n        return `${baseUrl}:/${relativeUrl}:`;\n    }\n}\n\n/**\n * Describes a Site object\n *\n */\nexport class GraphSite extends GraphQueryableInstance<ISite> {\n\n    public get columns(): GraphColumns {\n        return new GraphColumns(this);\n    }\n\n    public get contentTypes(): GraphContentTypes {\n        return new GraphContentTypes(this);\n    }\n\n    public get drive(): Drive {\n        return new Drive(this);\n    }\n\n    public get drives(): Drives {\n        return new Drives(this);\n    }\n\n    public get lists(): GraphLists {\n        return new GraphLists(this);\n    }\n\n    public get sites(): Sites {\n        return new Sites(this);\n    }\n}\n\n/**\n* Describes a collection of Content Type objects\n*\n*/\n@defaultPath(\"contenttypes\")\nexport class GraphContentTypes extends GraphQueryableCollection<IContentType[]> {\n\n    /**\n     * Gets a Content Type instance by id\n     * \n     * @param id Content Type id\n     */\n    public getById(id: string): GraphContentType {\n        return new GraphContentType(this, id);\n    }\n\n}\n\n/**\n * Describes a Content Type object\n *\n */\nexport class GraphContentType extends GraphQueryableInstance<IContentType> {\n\n}\n\n/**\n * Describes a collection of Column Definition objects\n *\n */\n@defaultPath(\"columns\")\nexport class GraphColumns extends GraphQueryableCollection<IColumnDefinition[]> {\n    /**\n     * Gets a Column instance by id\n     * \n     * @param id Column id\n     */\n    public getById(id: string): GraphColumn {\n        return new GraphColumn(this, id);\n    }\n}\n\n/**\n * Describes a Column Definition object\n *\n */\nexport class GraphColumn extends GraphQueryableInstance<IColumnDefinition> {\n\n    public get columnLinks(): GraphColumnLinks {\n        return new GraphColumnLinks(this);\n    }\n}\n\n/**\n * Describes a collection of Column Link objects\n *\n */\n@defaultPath(\"columnlinks\")\nexport class GraphColumnLinks extends GraphQueryableCollection<IColumnLink[]> {\n    /**\n     * Gets a Column Link instance by id\n     * \n     * @param id Column link id\n     */\n    public getById(id: string): GraphColumnLink {\n        return new GraphColumnLink(this, id);\n    }\n}\n\n/**\n * Describes a Column Link object\n *\n */\nexport class GraphColumnLink extends GraphQueryableInstance<IColumnLink> { }\n\n/**\n* Describes a collection of Column definitions objects\n*/\n@defaultPath(\"lists\")\nexport class GraphLists extends GraphQueryableCollection<IList[]> {\n    /**\n     * Gets a List instance by id\n     * \n     * @param id List id\n     */\n    public getById(id: string): GraphList {\n        return new GraphList(this, id);\n    }\n\n    /**\n    * Create a new List\n    * @param displayName The display name of the List\n    * @param list List information. Which template, if hidden, and contentTypesEnabled.\n    * @param additionalProperties A plain object collection of additional properties you want to set in list\n    * \n    * */\n    public create(displayName: string, list: IListInfo, additionalProperties: TypedHash<any> = {}): Promise<IListCreationResult> {\n\n        const postBody = extend({\n            displayName: displayName,\n            list: list,\n        }, additionalProperties);\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                list: new GraphList(this, r.id),\n            };\n        });\n    }\n}\n\n/**\n * Describes a List object\n *\n */\nexport class GraphList extends GraphQueryableInstance<IList> {\n\n    public get columns(): GraphColumns {\n        return new GraphColumns(this);\n    }\n\n    public get contentTypes(): GraphContentTypes {\n        return new GraphContentTypes(this);\n    }\n\n    public get drive(): Drive {\n        return new Drive(this);\n    }\n\n    public get items(): GraphItems {\n        return new GraphItems(this);\n    }\n\n}\n\n/**\n* Describes a collection of Item objects\n*/\n@defaultPath(\"items\")\nexport class GraphItems extends GraphQueryableCollection<IListItem[]> {\n    /**\n     * Gets a List Item instance by id\n     * \n     * @param id List item id\n     */\n    public getById(id: string): GraphItem {\n        return new GraphItem(this, id);\n    }\n\n    /**\n    * Create a new Item\n    * @param displayName The display name of the List\n    * @param list List information. Which template, if hidden, and contentTypesEnabled.\n    * @param additionalProperties A plain object collection of additional properties you want to set in list\n    * \n    * */\n    public create(fields: IFieldValueSet): Promise<IItemCreationResult> {\n\n        const postBody = {\n            fields: fields,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                item: new GraphItem(this, r.id),\n            };\n        });\n    }\n}\n\n/**\n * Describes an Item object\n *\n */\nexport class GraphItem extends GraphQueryableInstance<IListItem> {\n\n    public get driveItem(): DriveItem {\n        return new DriveItem(this);\n    }\n\n    public get fields(): GraphFields {\n        return new GraphFields(this);\n    }\n\n    public get versions(): GraphVersions {\n        return new GraphVersions(this);\n    }\n\n    /**\n     * Deletes this item\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a item object\n     * \n     * @param properties Set of properties of this item to update\n     */\n    public update(properties: IListItem): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n}\n\n/**\n * Describes a collection of Field objects\n *\n */\n@defaultPath(\"fields\")\nexport class GraphFields extends GraphQueryableCollection<IFieldValueSet[]> { }\n\n/**\n * Describes a collection of Version objects\n *\n */\n@defaultPath(\"versions\")\nexport class GraphVersions extends GraphQueryableCollection<IListItemVersion[]> {\n\n    /**\n    * Gets a Version instance by id\n    * \n    * @param id Version id\n    */\n    public getById(id: string): Version {\n        return new Version(this, id);\n    }\n}\n\n/**\n * Describes a Version object\n *\n */\nexport class Version extends GraphQueryableInstance<IListItemVersion> { }\n\nexport interface IListCreationResult {\n    data: IList;\n    list: GraphList;\n}\n\nexport interface IItemCreationResult {\n    data: IListItem;\n    item: GraphItem;\n}\n","import { GraphQueryable } from \"./graphqueryable\";\nimport {\n    setup as _setup,\n    GraphConfiguration,\n} from \"./config/graphlibconfig\";\n\nimport { Groups } from \"./groups\";\nimport { Teams } from \"./teams\";\nimport { Users, User } from \"./users\";\nimport { Planner, IPlannerMethods } from \"./planner\";\nimport { GraphBatch } from \"./batch\";\nimport { DirectoryObjects } from \"./directoryobjects\";\nimport { Invitations, IInvitationsMethods } from \"./invitations\";\nimport { Subscriptions } from \"./subscriptions\";\nimport { ISecurityMethods, Security } from \"./security\";\nimport { ISitesMethods, Sites } from \"./sites\";\n\nexport class GraphRest extends GraphQueryable {\n\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    public get directoryObjects(): DirectoryObjects {\n        return new DirectoryObjects(this);\n    }\n\n    public get groups(): Groups {\n        return new Groups(this);\n    }\n\n    public get teams(): Teams {\n        return new Teams(this);\n    }\n\n    public get me(): User {\n        return new User(this, \"me\");\n    }\n\n    public get planner(): IPlannerMethods {\n        return new Planner(this);\n    }\n\n    public get users(): Users {\n        return new Users(this);\n    }\n\n    public get invitations(): IInvitationsMethods {\n        return new Invitations(this);\n    }\n\n    public get subscriptions(): Subscriptions {\n        return new Subscriptions(this);\n    }\n\n    public createBatch(): GraphBatch {\n        return new GraphBatch();\n    }\n\n    public setup(config: GraphConfiguration) {\n        _setup(config);\n    }\n\n    public get security(): ISecurityMethods {\n        return new Security(this);\n    }\n\n    public get sites(): ISitesMethods {\n        return new Sites(this);\n    }\n\n}\n\nexport let graph = new GraphRest(\"v1.0\");\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","GraphRuntimeConfig","GraphRuntimeConfigImpl","graphPart","RuntimeConfig","get","undefined","headers","fetchClientFactory","spfxContext","AdalClient","fromSPFxContext","Error","GraphHttpClient","url","options","Headers","mergeHeaders","has","append","opts","extend","fetchRaw","rawHeaders","retry","ctx","_this","_impl","fetch","then","response","resolve","catch","status","reject","delay","attempts","retryCount","setTimeout","getCtxCallback","Promise","retryContext","call","method","GraphEndpoints","endpoint","all","Beta","V1","regex","RegExp","replaces","filter","s","test","map","replace","join","tslib_1.__extends","ODataQueryable","GraphQueryable","_i","selects","query","set","expands","factory","o","_url","toUrl","isUrlAbsolute","combine","size","char","indexOf","from","v","baseUrl","path","parentUrl","additionalPath","includeBatch","_super","_clone","ensure","verb","parser","pipeline","dependencyDispose","hasBatch","_batchDependency","batch","batchDependency","cachingOptions","_cachingOptions","clientFactory","isBatched","isCached","_useCaching","requestAbsoluteUrl","toUrlAndQuery","requestId","getGUID","urlStr","_parentUrl","GraphQueryableCollection","orderBy","ascending","split","push","top","toString","num","token","GraphQueryableSearchableCollection","defaultPath","args","Members","id","clone","Members_1","postCore","body","jsS","@odata.id","Member","GraphQueryableInstance","deleteCore","Owners","Calendars","Calendar","Events","Event","properties","data","event","getById","patchCore","Attachments","Attachment","name","bytes","@odata.type","contentBytes","Conversations","Conversation","Threads","Thread","Posts","Post","post","info","Senders","remover","Planner","Plans","Tasks","Buckets","Plan","owner","title","postBody","plan","Details","Task","planId","assignments","bucketId","task","orderHint","bucket","Bucket","Photo","Photo_1","BlobParser","BufferParser","content","Teams","description","ownerId","teamProperties","groupProps","owners@odata.bind","graph","groups","add","GroupType","Office365","gar","group","createTeam","team","Team","Channels","Apps","Team_1","shouldSetSpoSiteReadOnlyForMembers","partsToClone","visibility","displayName","mailNickname","ODataDefaultParser","getCore","channel","Channel","Tabs","appUrl","teamsApp@odata.bind","tab","Tab","Tab_1","Groups","Group","groupType","additionalProperties","mailEnabled","securityEnabled","Security","groupTypes","putCore","securityEnabledOnly","groupIds","start","end","view","toISOString","Contacts","Contact","givenName","surName","emailAddresses","businessPhones","contact","ContactFolders","ContactFolder","parentFolderId","contactFolder","OneNote","Notebooks","Sections","Pages","Notebook","notebook","Section","section","Drives","Drive","Root","DriveItems","DriveList","Recent","SharedWithMe","Children","DriveSearch","DriveItem","Thumbnails","parentReference","patchBody","driveItemType","driveItem","Messages","Message","message","MailFolders","MailFolder","mailFolder","DirectoryObjectType","MailboxSettings","settings","DirectoryObjects","DirectoryObject","ids","type","directoryObject","DirectoryObjects_1","People","Insights","Trending","Used","Shared","Users","User","ODataBatch","GraphBatch","index","substr","requests","reqInfo","requestFragment","makeUrlRelative","graphResponse","parsedResponses","fill","responses","responseId","parseInt","Response","JSON","stringify","nextLink","Logger","write","batchId","Date","getTime","client","slice","promise","requestsChunk","splice","this_1","maxRequests","batchRequest","formatRequests","batchOptions","Accept","Content-Type","batchUrl","json","j","parseResponse","parsedResponse","reduce","chain","request","_","parse","Invitations","invitedUserEmailAddress","inviteRedirectUrl","Subscriptions","Subscription","changeType","notificationUrl","resource","expirationDateTime","subscription","Alerts","Alert","Sites","GraphSite","relativeUrl","siteUrl","_urlCombine","lastIndexOf","substring","charAt","GraphColumns","GraphContentTypes","GraphLists","GraphContentType","GraphColumn","GraphColumnLinks","GraphColumnLink","GraphList","list","GraphItems","GraphItem","fields","item","GraphFields","GraphVersions","Version","GraphRest","config","_setup"],"mappings":";;;;;;;;;0WAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAGrB,SAASO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAwB5E,SAASK,EAAWC,EAAYC,EAAQC,EAAKC,GAChD,IAA2HlB,EAAvHmB,EAAIC,UAAUC,OAAQC,EAAIH,EAAI,EAAIH,EAAkB,OAATE,EAAgBA,EAAOhB,OAAOqB,yBAAyBP,EAAQC,GAAOC,EACrH,GAAuB,iBAAZM,SAAoD,mBAArBA,QAAQC,SAAyBH,EAAIE,QAAQC,SAASV,EAAYC,EAAQC,EAAKC,QACpH,IAAK,IAAIQ,EAAIX,EAAWM,OAAS,EAAQ,GAALK,EAAQA,KAAS1B,EAAIe,EAAWW,MAAIJ,GAAKH,EAAI,EAAInB,EAAEsB,GAAS,EAAJH,EAAQnB,EAAEgB,EAAQC,EAAKK,GAAKtB,EAAEgB,EAAQC,KAASK,GAChJ,OAAW,EAAJH,GAASG,GAAKpB,OAAOyB,eAAeX,EAAQC,EAAKK,GAAIA,EChChE,cA6BO,IAAIM,EAAqB,IA3B5B1B,sBAAW2B,2BAAX,WAEI,IAAMC,EAAYC,gBAAcC,IAAI,SACpC,OAAIF,MAAAA,QAAuEG,IAAtBH,EAAUI,QACpDJ,EAAUI,QAGd,oCAGXhC,sBAAW2B,sCAAX,WAEI,IAAMC,EAAYC,gBAAcC,IAAI,SAEpC,GAAIF,MAAAA,QAAkFG,IAAjCH,EAAUK,mBAC3D,OAAOL,EAAUK,mBAIrB,QAAkCF,IAA9BF,gBAAcK,YACd,OAAO,WAAM,OAAAC,aAAWC,gBAAgBP,gBAAcK,cAG1D,MAAMG,MAAM,8JC5BTC,kBAAP,SAAaC,EAAaC,gBAAAA,MAEtB,IAAMR,EAAU,IAAIS,QAGpBC,eAAaV,EAASN,EAAmBM,SAGzCU,eAAaV,EAASQ,EAAQR,SAEzBA,EAAQW,IAAI,iBACbX,EAAQY,OAAO,eAAgB,oBAGnC,IAAMC,EAAOC,SAAON,EAAS,CAAER,QAASA,IAExC,OAAOxB,KAAKuC,SAASR,EAAKM,IAGvBP,qBAAP,SAAgBC,EAAaC,GAA7B,wBAA6BA,MAGzB,IAAMQ,EAAa,IAAIP,QACvBC,eAAaM,EAAYR,EAAQR,SACjCQ,EAAUM,SAAON,EAAS,CAAER,QAASgB,IAErC,IAAMC,EAAQ,SAACC,GAEXC,EAAKC,MAAMC,MAAMd,EAAKC,GAASc,KAAK,SAACC,GAAa,OAAAL,EAAIM,QAAQD,KAAWE,MAAM,SAACF,GAIpD,MAApBA,EAASG,QAAsC,MAApBH,EAASG,QACpCR,EAAIS,OAAOJ,GAIf,IAAMK,EAAQV,EAAIU,MAGlBV,EAAIU,OAAS,EACbV,EAAIW,WAGAX,EAAIY,YAAcZ,EAAIW,UACtBX,EAAIS,OAAOJ,GAIfQ,WAAWC,iBAAeb,EAAMF,EAAOC,GAAMU,MAIrD,OAAO,IAAIK,QAAQ,SAACT,EAASG,GAEzB,IAAMO,EAA6B,CAC/BL,SAAU,EACVD,MAAO,IACPD,OAAQA,EACRH,QAASA,EACTM,WAAY,GAGhBb,EAAMkB,KAAKhB,EAAMe,MAIlB5B,gBAAP,SAAWC,EAAaC,gBAAAA,MACpB,IAAMK,EAAOC,SAAON,EAAS,CAAE4B,OAAQ,QACvC,OAAO5D,KAAK6C,MAAMd,EAAKM,IAGpBP,iBAAP,SAAYC,EAAaC,gBAAAA,MACrB,IAAMK,EAAOC,SAAON,EAAS,CAAE4B,OAAQ,SACvC,OAAO5D,KAAK6C,MAAMd,EAAKM,IAGpBP,kBAAP,SAAaC,EAAaC,gBAAAA,MACtB,IAAMK,EAAOC,SAAON,EAAS,CAAE4B,OAAQ,UACvC,OAAO5D,KAAK6C,MAAMd,EAAKM,IAGpBP,mBAAP,SAAcC,EAAaC,gBAAAA,MACvB,IAAMK,EAAOC,SAAON,EAAS,CAAE4B,OAAQ,WACvC,OAAO5D,KAAK6C,MAAMd,EAAKM,OAzF3B,aAEIrC,KAAK4C,MAAQ1B,EAAmBO,4BCPtBoC,SAAd,SAAqB9B,EAAa+B,GAC9B,IAAMC,EAAM,CAACF,EAAeG,KAAMH,EAAeI,IAC7CC,EAAQ,IAAIC,OAAOL,EAAU,KAC3BM,EAAWL,EAAIM,OAAO,SAAAC,GAAK,OAACJ,EAAMK,KAAKD,KAAIE,IAAI,SAAAF,GAAK,OAAAA,EAAEG,QAAQ,IAAK,SAEzE,OADAP,EAAQ,IAAIC,OAAO,MAAMC,EAASM,KAAK,UAAU,MAC1C3C,EAAI0C,QAAQP,EAAO,IAAIJ,QAZpBD,OAAO,OACPA,KAAK,UAHvB,uBCwBmDc,MAAAC,kBA2BxCC,mBAAP,eAAc,aAAAC,mBAAAA,IAAAC,kBAIV,OAHqB,EAAjBA,EAAQpE,QACRX,KAAKgF,MAAMC,IAAI,UAAWF,EAAQL,KAAK,MAEpC1E,MAQJ6E,mBAAP,eAAc,aAAAC,mBAAAA,IAAAI,kBAIV,OAHqB,EAAjBA,EAAQvE,QACRX,KAAKgF,MAAMC,IAAI,UAAWC,EAAQR,KAAK,MAEpC1E,MAQJ6E,eAAP,SAAaM,GACT,IAAMC,EAAO,IAAID,EAAQnF,KAAKqF,KAAM,MACpC,OAAO/C,SAAO8C,EAAGpF,MAAM,IAOpB6E,0BAAP,WAEI,IAAI9C,EAAM/B,KAAKsF,QAMf,GAJKC,gBAAcxD,KACfA,EAAMyD,UAAQ,8BAA+BzD,IAG3B,EAAlB/B,KAAKgF,MAAMS,KAAU,CACrB,IAAMC,GAA2B,EAApB3D,EAAI4D,QAAQ,KAAY,IAAM,IAC3C5D,GAAU2D,EAAO/F,MAAMiG,KAAK5F,KAAKgF,OAAOR,IAAI,SAACqB,GAAwB,OAAAA,EAAE,GAAK,IAAMA,EAAE,KAAInB,KAAK,KAGjG,OAAO3C,GAQD8C,sBAAV,SACIM,EACAW,EACAC,GAEA,oBAHAD,EAAmC9F,KAAKgG,WAGjC,IAAIb,EAAQW,EAASC,IAStBlB,kBAAV,SAA0CM,EAAuCc,EAAyBC,GAEtG,oBAFsGA,MAE5FC,YAAMC,iBAAO,IAAIjB,EAAQnF,KAAMiG,GAAiB,CAAEC,kBAGtDrB,wBAAV,SAAsBf,GAGlB,OADA9D,KAAKqF,KAAOxB,EAAewC,OAAOrG,KAAKqF,KAAMvB,GACtC9D,MAWD6E,6BAAV,SACIyB,EACAtE,EACAuE,EACAC,gBAFAxE,MAIA,IAAMyE,EAAoBzG,KAAK0G,SAAW1G,KAAK2G,iBAAmB,aAElE,OAAOlD,QAAQT,QAAQ,CACnB4D,MAAO5G,KAAK4G,MACZC,gBAAiBJ,EACjBK,eAAgB9G,KAAK+G,gBACrBC,cAAe,WAAM,OAAA,IAAIlF,GACzBmF,UAAWjH,KAAK0G,SAChBQ,SAAU,SAAS3C,KAAK+B,IAAStG,KAAKmH,YACtCnF,QAASA,EACTuE,OAAQA,EACRC,SAAUA,EACVY,mBAAoBpH,KAAKqH,gBACzBC,UAAWC,YACXjB,KAAMA,QA7Hd,WAAYR,EAAkCC,GAA9C,MACII,mBAEA,GAAuB,iBAAZL,EAAsB,CAE7B,IAAM0B,EAAS1B,EACfnD,EAAK8E,WAAaD,EAClB7E,EAAK0C,KAAOG,UAAQgC,EAAQzB,QAE5BpD,EAAKL,OAAOwD,EAA2BC,qBA6HYpB,MAAAE,GAMpD6C,mBAAP,SAAcrD,GAEV,OADArE,KAAKgF,MAAMC,IAAI,UAAWZ,GACnBrE,MASJ0H,oBAAP,SAAeC,EAAiBC,gBAAAA,MAC5B,IAAMxC,EAAI,WACJJ,EAAQhF,KAAKgF,MAAM7C,IAAIiD,GAAKpF,KAAKgF,MAAM1D,IAAI8D,GAAGyC,MAAM,KAAO,GAGjE,OAFA7C,EAAM8C,KAAQH,OAAWC,EAAY,MAAQ,SAC7C5H,KAAKgF,MAAMC,IAAIG,EAAGJ,EAAMN,KAAK,MACtB1E,MAQJ0H,gBAAP,SAAWK,GAEP,OADA/H,KAAKgF,MAAMC,IAAI,OAAQ8C,EAAIC,YACpBhI,MAQJ0H,iBAAP,SAAYO,GAER,OADAjI,KAAKgF,MAAMC,IAAI,QAASgD,EAAID,YACrBhI,MAMJ0H,sBAAP,SAAiBQ,GAEb,OADAlI,KAAKgF,MAAMC,IAAI,aAAciD,GACtBlI,MAMXR,sBAAWkI,yBAAX,WAEI,OADA1H,KAAKgF,MAAMC,IAAI,SAAU,QAClBjF,yCA1Df,qEA8DwD2E,MAAA+C,GAK7CS,mBAAP,SAAcnD,GAEV,OADAhF,KAAKgF,MAAMC,IAAI,UAAWD,GACnBhF,SAPf,qEAe2D2E,MAAAE,MAA3D,qEAOgBuD,EAAYrC,GAExB,OAAO,SAAiDzF,GAEpD,OAAqBqE,MAAArE,KACjB,iBAAY,aAAAwE,mBAAAA,IAAAuD,yBACRlC,YAAMkC,EAAK,GAAkB,EAAdA,EAAK1H,aAA0BY,IAAZ8G,EAAK,GAAmBA,EAAK,GAAKtC,gBC5PpF,WAA6BpB,MAAA+C,MAAhBY,iBAST,SAAWC,GAEP,OAAOvI,KAAKwI,MAAMC,EAAS,QAAQC,SAAS,CACxCC,KAAMC,MAAI,CACNC,YAAaN,OAUlBD,oBAAP,SAAeC,GACX,OAAO,IAAIO,EAAO9I,KAAMuI,IAxBnBD,OADZF,EAAY,YACAE,IAAb,4DA4BA,SAA4B3D,MAAAoE,GAIjBD,mBAAP,WACI,OAAO9I,KAAKwI,MAAMM,EAAQ,QAAQE,iBAL1C,4DAUA,SAA4BrE,MAAA2D,GAAfW,KADZb,EAAY,WACAa,IAAb,4DCrCA,MAA+BtE,MAAA+C,GAAlBwB,KADZd,EAAY,cACAc,GAAb,4DAEA,SAA8BvE,MAAAoE,GAE1BvJ,sBAAW2J,0BAAX,WACI,OAAO,IAAIC,EAAOpJ,0CAH1B,4DAQA,SAA4B2E,MAAA+C,GAEjB0B,oBAAP,SAAeb,GACX,OAAO,IAAIc,EAAMrJ,KAAMuI,IAQpBa,gBAAP,SAAWE,GAAX,WAEI,OAAOtJ,KAAK0I,SAAS,CACjBC,KAAMC,MAAIU,KACXxG,KAAK,SAAAlC,GACJ,MAAO,CACH2I,KAAM3I,EACN4I,MAAO7G,EAAK8G,QAAQ7I,EAAE2H,QAlBzBa,KADZhB,EAAY,WACAgB,IAAb,4DA6BA,SAA2BzE,MAAAoE,GAehBM,mBAAP,SAAcC,GAEV,OAAOtJ,KAAK0J,UAAU,CAClBf,KAAMC,MAAIU,MAOXD,mBAAP,WACI,OAAOrJ,KAAKgJ,iBA1BpB,4DCxCA,SAAiCrE,MAAA+C,GAOtBiC,oBAAP,SAAepB,GACX,OAAO,IAAIqB,EAAW5J,KAAMuI,IASzBoB,oBAAP,SAAeE,EAAcC,GAEzB,OAAO9J,KAAK0I,SAAS,CACjBC,KAAMC,MAAI,CACNmB,cAAe,kCACfC,aAAcF,EACdD,KAAMA,OAvBTF,KADZvB,EAAY,gBACAuB,IAAb,4DA6BA,SAAgChF,MAAAoE,MAAhC,4DCdA,UAAmCpE,OAAA+C,GAOxBuC,iBAAP,SAAWX,GAEP,OAAOtJ,KAAK0I,SAAS,CACjBC,KAAMC,MAAIU,MASXW,qBAAP,SAAe1B,GACX,OAAO,IAAI2B,GAAalK,KAAMuI,IApBzB0B,MADZ7B,EAAY,kBACA6B,KAAb,6DAyBA,WAA6BtF,QAAA+C,GAOlByC,qBAAP,SAAe5B,GACX,OAAO,IAAI6B,GAAOpK,KAAMuI,IASrB4B,iBAAP,SAAWb,GAEP,OAAOtJ,KAAK0I,SAAS,CACjBC,KAAMC,MAAIU,MApBTa,MADZ/B,EAAY,YACA+B,KAAb,+DA0BA,WAA2BxF,QAAA+C,GAOhB2C,qBAAP,SAAe9B,GACX,OAAO,IAAI+B,GAAKtK,KAAMuI,IASnB8B,iBAAP,SAAWf,GAEP,OAAOtJ,KAAK0I,SAAS,CACjBC,KAAMC,MAAIU,MApBTe,MADZjC,EAAY,UACAiC,KAAb,+DAyBA,WAAkC1F,QAAAoE,GAK9BvJ,sBAAW0K,4BAAX,WACI,OAAO,IAAIC,GAAQnK,uCAMhBkK,oBAAP,SAAcZ,GAEV,OAAOtJ,KAAK0J,UAAU,CAClBf,KAAMC,MAAIU,MAOXY,oBAAP,WACI,OAAOlK,KAAKgJ,kBAvBpB,+DA2BA,WAA4BrE,QAAAoE,GAKxBvJ,sBAAW4K,0BAAX,WACI,OAAO,IAAIC,GAAMrK,uCAQdoK,mBAAP,SAAaG,GAET,OAAOvK,KAAKwI,MAAM4B,GAAQ,SAAS1B,SAAS,CACxCC,KAAMC,MAAI,CACN2B,KAAMA,OAQXH,oBAAP,WACI,OAAOpK,KAAKgJ,kBA3BpB,+DA+BA,WAA0BrE,QAAAoE,GAEtBvJ,sBAAW8K,gCAAX,WACI,OAAO,IAAIX,EAAY3J,uCAMpBsK,oBAAP,WACI,OAAOtK,KAAKgJ,cAMTsB,qBAAP,SAAeE,GACX,OAAOxK,KAAKwI,MAAM8B,GAAM,WAAW5B,SAAS,CACxCC,KAAMC,MAAI4B,MASXF,mBAAP,SAAaC,GAET,OAAOvK,KAAKwI,MAAM8B,GAAM,SAAS5B,SAAS,CACtCC,KAAMC,MAAI,CACN2B,KAAMA,WA/BtB,+DAqCA,WAA6B5F,QAAA+C,GAUlB+C,iBAAP,SAAWlC,GAEP,OAAOvI,KAAKwI,MAAMiC,GAAS,QAAQ/B,SAAS,CACxCC,KAAMC,MAAI,CACNC,YAAaN,OAUlBkC,oBAAP,SAAclC,GAEV,IAAMmC,EAAU1K,KAAKwI,MAAMiC,GAAS,QAEpC,OADAC,EAAQ1F,MAAMC,IAAI,MAAOsD,GAClBmC,EAAQ1B,kBA1BnB,YAAYlD,EAAkCC,UAC1CI,aAAML,EAASC,oBChLMpB,QAAAoE,GAGzBvJ,sBAAWmL,0BAAX,WACI,OAAO,IAAIC,GAAM5K,uCAIrBR,sBAAWmL,0BAAX,WACI,OAAO,IAAIE,GAAM7K,uCAIrBR,sBAAWmL,4BAAX,WACI,OAAO,IAAIG,GAAQ9K,uCAdd2K,MADZvC,EAAY,YACAuC,KAAb,0EAmB2BhG,QAAA+C,GAChBkD,qBAAP,SAAerC,GACX,OAAO,IAAIwC,GAAK/K,KAAMuI,IASnBqC,iBAAP,SAAWI,EAAeC,GAA1B,WAEUC,EAAW,CACbF,MAAOA,EACPC,MAAOA,GAGX,OAAOjL,KAAK0I,SAAS,CACjBC,KAAMC,MAAIsC,KACXpI,KAAK,SAAAlC,GACJ,MAAO,CACH2I,KAAM3I,EACNuK,KAAMxI,EAAK8G,QAAQ7I,EAAE2H,QAvBxBqC,MADZxC,EAAY,UACAwC,KAAb,0EAkC0BjG,QAAAoE,GAEtBvJ,sBAAWuL,0BAAX,WACI,OAAO,IAAIF,GAAM7K,uCAGrBR,sBAAWuL,4BAAX,WACI,OAAO,IAAID,GAAQ9K,uCAGvBR,sBAAWuL,4BAAX,WACI,OAAO,IAAIK,GAAQpL,uCAMhB+K,oBAAP,WACI,OAAO/K,KAAKgJ,cAQT+B,oBAAP,SAAczB,GAEV,OAAOtJ,KAAK0J,UAAU,CAClBf,KAAMC,MAAIU,UA7BtB,0EAmC2B3E,QAAA+C,GAChBmD,qBAAP,SAAetC,GACX,OAAO,IAAI8C,GAAKrL,KAAMuI,IAWnBsC,iBAAP,SAAWS,EAAgBL,EAAeM,EAA8BC,GAAxE,WAEQN,EAAW5I,SAAO,CAClBgJ,OAAQA,EACRL,MAAOA,GACRM,GAQH,OANIC,IACAN,EAAW5I,SAAO4I,EAAU,CACxBM,SAAUA,KAIXxL,KAAK0I,SAAS,CACjBC,KAAMC,MAAIsC,KACXpI,KAAK,SAAAlC,GACJ,MAAO,CACH2I,KAAM3I,EACN6K,KAAM9I,EAAK8G,QAAQ7I,EAAE2H,QA/BxBsC,MADZzC,EAAY,UACAyC,KAAb,0EAsC0BlG,QAAAoE,GAIfsC,oBAAP,WACI,OAAOrL,KAAKgJ,cAQTqC,oBAAP,SAAc/B,GAEV,OAAOtJ,KAAK0J,UAAU,CAClBf,KAAMC,MAAIU,MAIlB9J,sBAAW6L,4BAAX,WACI,OAAO,IAAID,GAAQpL,2CArB3B,0EA0B6B2E,QAAA+C,GAQlBoD,iBAAP,SAAWjB,EAAcyB,EAAgBI,GAAzC,WAEUR,EAAW,CACbrB,KAAMA,EACN6B,UAAWA,GAAwB,GACnCJ,OAAQA,GAGZ,OAAOtL,KAAK0I,SAAS,CACjBC,KAAMC,MAAIsC,KACXpI,KAAK,SAAAlC,GACJ,MAAO,CACH+K,OAAQhJ,EAAK8G,QAAQ7I,EAAE2H,IACvBgB,KAAM3I,MAKXkK,qBAAP,SAAevC,GACX,OAAO,IAAIqD,GAAO5L,KAAMuI,IA3BnBuC,MADZ1C,EAAY,YACA0C,KAAb,0EAgC4BnG,QAAAoE,GAIjB6C,oBAAP,WACI,OAAO5L,KAAKgJ,cAQT4C,oBAAP,SAActC,GAEV,OAAOtJ,KAAK0J,UAAU,CAClBf,KAAMC,MAAIU,MAIlB9J,sBAAWoM,0BAAX,WACI,OAAO,IAAIf,GAAM7K,2CArBzB,0EA0B6B2E,QAAA+C,GAAhB0D,MADZhD,EAAY,YACAgD,KAAb,+DC/NA,cAA2BzG,QAAAoE,OAAd8C,sBAKT,WACI,OAAO7L,KAAKwI,MAAMsD,GAAO,UAAU,GAAOxK,IAAI,IAAIyK,eAM/CF,uBAAP,WACI,OAAO7L,KAAKwI,MAAMsD,GAAO,UAAU,GAAOxK,IAAI,IAAI0K,iBAQ/CH,wBAAP,SAAkBI,GAEd,OAAOjM,KAAKwI,MAAMsD,GAAO,UAAU,GAAOpC,UAAU,CAChDf,KAAMsD,KAxBLJ,SADZzD,EAAY,UACAyD,KAAb,0ECG2BlH,QAAA+C,GAQhBwE,oBAAP,SAAcrC,EAAcsC,EAAkBC,EAAiBC,gBAAnCF,mBAAmCE,MAE3D,IAAMC,EAAa,CACfH,YAAeA,GAAoC,EAArBA,EAAYxL,OAAawL,EAAc,GACrEI,oBAAqB,CACjB,0CAA0CH,IAIlD,OAAOI,GAAMC,OAAOC,IAAI7C,EAAMA,EAAM8C,YAAUC,UAAWN,GAAYxJ,KAAK,SAAC+J,GACvE,OAAOA,EAAIC,MAAMC,WAAWV,GAAgBvJ,KAAK,SAAAyG,GAC7C,MAAO,CACHA,KAAMA,EACNuD,MAAOD,EAAIC,MACXE,KAAM,IAAIC,GAAKJ,EAAIC,aAM5BZ,qBAAP,SAAe3D,GACX,OAAO,IAAI0E,GAAKjN,KAAMuI,IA7BjB2D,MADZ9D,EAAY,UACA8D,KAAb,6EAsC0BvH,QAAAoE,MAAbkE,GAETzN,sBAAWyN,6BAAX,WACI,OAAO,IAAIC,GAASlN,uCAGxBR,sBAAWyN,kCAAX,WACI,OAAO,IAAIE,GAAKnN,uCASbiN,oBAAP,SAAc3D,GAAd,WAEI,OAAOtJ,KAAKwI,MAAM4E,GAAM,IAAI1D,UAAU,CAClCf,KAAMC,MAAIU,KACXxG,KAAK,SAAAyG,GACJ,MAAO,CACHA,KAAMA,EACNyD,KAAMrK,MAWXsK,qBAAP,SAAeI,GAAf,IAEQnC,SAOJ,OAL0C,MAAtCmC,IACAnC,EAAW5I,SAAO4I,EAAU,CACxBmC,mCAAoCA,KAGrCrN,KAAKwI,MAAM4E,GAAM,WAAW1E,SAAS,CACxCC,KAAMC,MAAIsC,KACXpI,KAAK,SAAAyG,GACJ,MAAO,CACHA,KAAMA,EACNyD,KAAMrK,MAUXsK,uBAAP,WAAA,WAEI,OAAOjN,KAAKwI,MAAM4E,GAAM,aAAa1E,SAAS,IAC3C5F,KAAK,SAAAyG,GACJ,MAAO,CACHA,KAAMA,EACNyD,KAAMrK,MAaXsK,uBAAP,SAAiBpD,EAAcsC,EAAkBmB,EAAsBC,GAAvE,wBAA+BpB,MAE3B,IAAMjB,EAAW,CACbiB,YAAaA,GAA4B,GACzCqB,YAAa3D,EACb4D,aAAc5D,EACdyD,aAAcA,EACdC,WAAYA,GAGhB,OAAOvN,KAAKwI,MAAM4E,GAAM,SAAS1E,SAAS,CACtCC,KAAMC,MAAIsC,KACXpI,KAAK,SAAAyG,GACJ,MAAO,CACHA,KAAMA,EACNyD,KAAMrK,MAWXsK,iBAAP,SAA+B1G,EAAmDvE,GAC9E,oBAD2BuE,MAA6BmH,mCAAsB1L,MACvEhC,KAAKwI,MAAM4E,GAAM,IAAIO,QAAQpH,EAAQvE,IAxGvCiL,SADZ7E,EAAY,SACA6E,KAAb,0EA6G8BtI,QAAA+C,GAQnBwF,oBAAP,SAAcrD,EAAcsC,GAA5B,wBAA4BA,MAExB,IAAMjB,EAAW,CACbiB,YAAaA,GAAoC,EAArBA,EAAYxL,OAAawL,EAAc,GACnEqB,YAAa3D,GAGjB,OAAO7J,KAAK0I,SAAS,CACjBC,KAAMC,MAAIsC,KACXpI,KAAK,SAAAlC,GACJ,MAAO,CACHgN,QAASjL,EAAK8G,QAAQ7I,EAAE2H,IACxBgB,KAAM3I,MAKXsM,qBAAP,SAAe3E,GACX,OAAO,IAAIsF,GAAQ7N,KAAMuI,IA1BpB2E,MADZ9E,EAAY,aACA8E,KAAb,0EA+B6BvI,QAAAoE,GACzBvJ,sBAAWqO,yBAAX,WACI,OAAO,IAAIC,GAAK9N,2CAFxB,0EAO0B2E,QAAA+C,GAOfyF,iBAAP,SAAWY,GAEP,IAAM7C,EAAW,CACb8C,sBAAuBD,GAG3B,OAAO/N,KAAK0I,SAAS,CACjBC,KAAMC,MAAIsC,KACXpI,KAAK,SAAAlC,GACJ,MAAO,CACH2I,KAAM3I,MAQXuM,oBAAP,WACI,OAAOnN,KAAKgJ,cA1BPmE,MADZ/E,EAAY,kBACA+E,KAAb,0EA+B0BxI,QAAA+C,GAQfoG,iBAAP,SAAWjE,EAAckE,EAAgBzE,GAAzC,WAEU4B,EAAW5I,SAAO,CACpBuH,KAAMA,EACNmE,sBAAuBD,GACxBzE,GAEH,OAAOtJ,KAAK0I,SAAS,CACjBC,KAAMC,MAAIsC,KACXpI,KAAK,SAAAlC,GACJ,MAAO,CACH2I,KAAM3I,EACNqN,IAAKtL,EAAK8G,QAAQ7I,EAAE2H,QAMzBuF,qBAAP,SAAevF,GACX,OAAO,IAAI2F,GAAIlO,KAAMuI,IA3BhBuF,MADZ1F,EAAY,SACA0F,KAAb,yECrNYnB,ODyPahI,QAAAoE,OAAZmF,qBAQT,SAAc5E,GAAd,WAEI,OAAOtJ,KAAKwI,MAAM2F,GAAK,IAAIzE,UAAU,CACjCf,KAAMC,MAAIU,KACXxG,KAAK,SAAAyG,GACJ,MAAO,CACHA,KAAMA,EACN0E,IAAKtL,MAQVuL,oBAAP,WACI,OAAOlO,KAAKgJ,cAxBPkF,SADZ9F,EAAY,QACA8F,KAAb,gECzPYvB,GAAAA,cAAAA,6CAQRA,2BAIAA,wCAQwBhI,QAAA+C,GAOjB0G,qBAAP,SAAe7F,GACX,OAAO,IAAI8F,GAAMrO,KAAMuI,IAWpB6F,iBAAP,SAAWvE,EAAc4D,EAAsBa,EAAsBC,GAArE,wBAAqEA,MAEjE,IAAIrD,EAAW5I,SAAO,CAClBkL,YAAa3D,EACb2E,YAAaF,IAAc3B,YAAUC,UACrCa,aAAcA,EACdgB,gBAAiBH,IAAc3B,YAAUC,WAC1C2B,GAUH,OAPID,IAAc3B,YAAU+B,WAExBxD,EAAW5I,SAAO4I,EAAU,CACxByD,WAAYL,IAAc3B,YAAUC,UAAY,CAAC,WAAa,CAAC,wBAIhE5M,KAAK0I,SAAS,CACjBC,KAAMC,MAAIsC,KACXpI,KAAK,SAAAlC,GACJ,MAAO,CACH2I,KAAM3I,EACNkM,MAAOnK,EAAK8G,QAAQ7I,EAAE2H,QAzCzB6F,MADZhG,EAAY,WACAgG,KAAb,0EAkD2BzJ,QAAAoE,GAKvBvJ,sBAAW6O,6BAAX,WACI,OAAO,IAAIlF,EAASnJ,KAAM,6CAM9BR,sBAAW6O,2BAAX,WACI,OAAO,IAAIjF,EAAOpJ,uCAMtBR,sBAAW6O,2BAAX,WACI,OAAO,IAAIpF,EAAOjJ,uCAMtBR,sBAAW6O,0BAAX,WACI,OAAO,IAAIzD,GAAM5K,KAAM,kDAM3BR,sBAAW6O,4BAAX,WACI,OAAO,IAAI/F,EAAQtI,uCAMvBR,sBAAW6O,kCAAX,WACI,OAAO,IAAIpE,GAAcjK,uCAM7BR,sBAAW6O,oCAAX,WACI,OAAO,IAAI5D,GAAQzK,KAAM,oDAM7BR,sBAAW6O,oCAAX,WACI,OAAO,IAAI5D,GAAQzK,KAAM,oDAM7BR,sBAAW6O,0BAAX,WACI,OAAO,IAAIxC,GAAM7L,uCAMrBR,sBAAW6O,yBAAX,WACI,OAAO,IAAIpB,GAAKjN,uCAMbqO,yBAAP,WACI,OAAOrO,KAAKwI,MAAM6F,GAAO,eAAe3F,YAQrC2F,wBAAP,SAAkB/E,GAEd,OAAOtJ,KAAKwI,MAAM6F,GAAO,QAAQO,QAAQ,CACrCjG,KAAMC,MAAIU,MASX+E,8BAAP,SAAwBQ,GACpB,oBADoBA,MACb7O,KAAKwI,MAAM6F,GAAO,oBAAoB3F,SAAS,CAClDC,KAAMC,MAAI,CACNiG,oBAAqBA,OAU1BR,6BAAP,SAAuBQ,GAEnB,oBAFmBA,MAEZ7O,KAAKwI,MAAM6F,GAAO,mBAAmB3F,SAAS,CACjDC,KAAMC,MAAI,CACNiG,oBAAqBA,OAU1BR,+BAAP,SAAyBS,GACrB,OAAO9O,KAAKwI,MAAM6F,GAAO,qBAAqB3F,SAAS,CACnDC,KAAMC,MAAI,CACNkG,SAAUA,OAQfT,oBAAP,WACI,OAAOrO,KAAKgJ,cAQTqF,oBAAP,SAAc/E,GAEV,OAAOtJ,KAAK0J,UAAU,CAClBf,KAAMC,MAAIU,MAOX+E,4BAAP,WAEI,OAAOrO,KAAKwI,MAAM6F,GAAO,kBAAkB3F,YAMxC2F,8BAAP,WACI,OAAOrO,KAAKwI,MAAM6F,GAAO,oBAAoB3F,YAO1C2F,6BAAP,WACI,OAAOrO,KAAKwI,MAAM6F,GAAO,mBAAmB3F,YAOzC2F,+BAAP,WACI,OAAOrO,KAAKwI,MAAM6F,GAAO,qBAAqB3F,YAS3C2F,6BAAP,SAAuBU,EAAaC,GAEhC,IAAMC,EAAOjP,KAAKwI,MAAM6F,GAAO,gBAG/B,OAFAY,EAAKjK,MAAMC,IAAI,gBAAiB8J,EAAMG,eACtCD,EAAKjK,MAAMC,IAAI,cAAe+J,EAAIE,eAC3BD,EAAK3N,WAhMpB,0ECxE8BqD,QAAA+C,GAEnByH,qBAAP,SAAe5G,GACX,OAAO,IAAI6G,GAAQpP,KAAMuI,IAYtB4G,iBAAP,SAAWE,EAAmBC,EAAiBC,EAAgCC,EAA0BjB,GAAzG,wBAAyGA,MAErG,IAAMrD,EAAW5I,SAAO,CACpBkN,eAAgBA,EAChBD,eAAgBA,EAChBF,UAAWA,EACXC,QAASA,GACVf,GAEH,OAAOvO,KAAK0I,SAAS,CACjBC,KAAMC,MAAIsC,KACXpI,KAAK,SAAAlC,GACJ,MAAO,CACH6O,QAAS9M,EAAK8G,QAAQ7I,EAAE2H,IACxBgB,KAAM3I,MA7BTuO,MADZ/G,EAAY,aACA+G,KAAb,0EAmC6BxK,QAAAoE,GAIlBqG,oBAAP,WACI,OAAOpP,KAAKgJ,cAQToG,oBAAP,SAAc9F,GAEV,OAAOtJ,KAAK0J,UAAU,CAClBf,KAAMC,MAAIU,UAhBtB,0EAsBoC3E,QAAA+C,GAEzBgI,qBAAP,SAAenH,GACX,OAAO,IAAIoH,GAAc3P,KAAMuI,IAS5BmH,iBAAP,SAAWlC,EAAqBoC,GAAhC,WAEU1E,EAAW,CACbsC,YAAaA,EACboC,eAAgBA,GAGpB,OAAO5P,KAAK0I,SAAS,CACjBC,KAAMC,MAAIsC,KACXpI,KAAK,SAAAlC,GACJ,MAAO,CACHiP,cAAelN,EAAK8G,QAAQ7I,EAAE2H,IAC9BgB,KAAM3I,MAxBT8O,MADZtH,EAAY,mBACAsH,KAAb,0EA8BmC/K,QAAAoE,GAI/BvJ,sBAAWmQ,6BAAX,WACI,OAAO,IAAIR,GAASnP,uCAMxBR,sBAAWmQ,iCAAX,WACI,OAAO,IAAID,GAAe1P,KAAM,iDAM7B2P,oBAAP,WACI,OAAO3P,KAAKgJ,cAQT2G,oBAAP,SAAcrG,GAEV,OAAOtJ,KAAK0J,UAAU,CAClBf,KAAMC,MAAIU,UA9BtB,0EClF6B3E,QAAAoE,GAEzBvJ,sBAAWsQ,8BAAX,WACI,OAAO,IAAIC,GAAU/P,uCAGzBR,sBAAWsQ,6BAAX,WACI,OAAO,IAAIE,GAAShQ,uCAGxBR,sBAAWsQ,0BAAX,WACI,OAAO,IAAIG,GAAMjQ,uCAXZ8P,MADZ1H,EAAY,YACA0H,KAAb,0EAoB+BnL,QAAA+C,GAOpBqI,qBAAP,SAAexH,GACX,OAAO,IAAI2H,GAASlQ,KAAMuI,IAQvBwH,iBAAP,SAAWvC,GAAX,WAEUtC,EAAW,CACbsC,YAAaA,GAGjB,OAAOxN,KAAK0I,SAAS,CACjBC,KAAMC,MAAIsC,KACXpI,KAAK,SAAAlC,GACJ,MAAO,CACH2I,KAAM3I,EACNuP,SAAUxN,EAAK8G,QAAQ7I,EAAE2H,QA3B5BwH,MADZ3H,EAAY,cACA2H,KAAb,0EAqC8BpL,QAAAoE,GAK1BvJ,sBAAW0Q,6BAAX,WACI,OAAO,IAAIF,GAAShQ,2CALxB,YAAY8F,EAAkCC,UAC1CI,aAAML,EAASC,oBAaOpB,QAAA+C,GAOnBsI,qBAAP,SAAezH,GACX,OAAO,IAAI6H,GAAQpQ,KAAMuI,IAQtByH,iBAAP,SAAWxC,GAAX,WAEUtC,EAAW,CACbsC,YAAaA,GAGjB,OAAOxN,KAAK0I,SAAS,CACjBC,KAAMC,MAAIsC,KACXpI,KAAK,SAAAlC,GACJ,MAAO,CACH2I,KAAM3I,EACNyP,QAAS1N,EAAK8G,QAAQ7I,EAAE2H,QA3B3ByH,MADZ5H,EAAY,aACA4H,KAAb,0EAqC6BrL,QAAAoE,OACzB,YAAYjD,EAAkCC,UAC1CI,aAAML,EAASC,oBASIpB,QAAA+C,GAAduI,MADZ7H,EAAY,UACA6H,KAAb,0ECzH4BtL,QAAA+C,GAOjB4I,qBAAP,SAAe/H,GACX,OAAO,IAAIgI,GAAMvQ,KAAMuI,IARlB+H,MADZlI,EAAY,WACAkI,KAAb,0EAiB2B3L,QAAAoE,GAEvBvJ,sBAAW+Q,yBAAX,WACI,OAAO,IAAIC,GAAKxQ,uCAGpBR,sBAAW+Q,0BAAX,WACI,OAAO,IAAIE,GAAWzQ,uCAG1BR,sBAAW+Q,yBAAX,WACI,OAAO,IAAIG,GAAU1Q,uCAGzBR,sBAAW+Q,2BAAX,WACI,OAAO,IAAII,GAAO3Q,uCAGtBR,sBAAW+Q,iCAAX,WACI,OAAO,IAAIK,GAAa5Q,uCAnBnBuQ,MADZnI,EAAY,UACAmI,KAAb,0EA6B0B5L,QAAAoE,GAEtBvJ,sBAAWgR,6BAAX,WACI,OAAO,IAAIK,GAAS7Q,uCAGjBwQ,oBAAP,SAAcxL,GACV,OAAO,IAAI8L,GAAY9Q,KAAM,aAAagF,SAPrCwL,MADZpI,EAAY,SACAoI,KAAb,0EAgBgC7L,QAAA+C,GAMrB+I,qBAAP,SAAelI,GACX,OAAO,IAAIwI,GAAU/Q,KAAMuI,IAPtBkI,MADZrI,EAAY,UACAqI,KAAb,0EAe+B9L,QAAAoE,GAE3BvJ,sBAAWuR,6BAAX,WACI,OAAO,IAAIF,GAAS7Q,uCAGxBR,sBAAWuR,+BAAX,WACI,OAAO,IAAIC,GAAWhR,uCAMnB+Q,oBAAP,WACI,OAAO/Q,KAAKgJ,cAQT+H,oBAAP,SAAczH,GAEV,OAAOtJ,KAAK0J,UAAU,CAClBf,KAAMC,MAAIU,MAUXyH,kBAAP,SAAYE,EAAiC3H,GACzC,IAAI4H,EAAY5O,SAAO,GACpB2O,GAOH,OALI3H,IACA4H,EAAY5O,SAAO,GAChBgH,IAGAtJ,KAAK0J,UAAU,CAClBf,KAAMC,MAAIsI,UA7CtB,0EAuD8BvM,QAAA+C,GAOnBmJ,iBAAP,SAAWhH,EAAcsH,GAAzB,WAEUjG,EAAW5I,SAAO,CACpBuH,KAAMA,GACPsH,GAEH,OAAOnR,KAAK0I,SAAS,CACjBC,KAAMC,MAAIsC,KACXpI,KAAK,SAAAlC,GACJ,MAAO,CACH2I,KAAM3I,EACNwQ,UAAW,IAAIL,GAAUpO,EAAM/B,EAAE2H,QAlBpCsI,MADZzI,EAAY,aACAyI,KAAb,0EAyB+BlM,QAAA+C,GAAlBgJ,MADZtI,EAAY,SACAsI,KAAb,0EAG4B/L,QAAAoE,GAAf4H,MADZvI,EAAY,WACAuI,KAAb,0EAGkChM,QAAAoE,GAArB6H,MADZxI,EAAY,iBACAwI,KAAb,0EAGiCjM,QAAAoE,GAApB+H,MADZ1I,EAAY,WACA0I,KAAb,0EAGgCnM,QAAAoE,GAAnBiI,MADZ5I,EAAY,eACA4I,KAAb,+DC7KA,WAA8BrM,QAAA+C,GAOnB2J,qBAAP,SAAe9I,GACX,OAAO,IAAI+I,GAAQtR,KAAMuI,IAQtB8I,iBAAP,SAAWE,GAEP,OAAOvR,KAAK0I,SAAS,CACjBC,KAAMC,MAAI2I,MAnBTF,MADZjJ,EAAY,aACAiJ,KAAb,+DAwBA,WAA6B1M,QAAAoE,OAA7B,+DAGA,WAAiCpE,QAAA+C,GAOtB8J,qBAAP,SAAejJ,GACX,OAAO,IAAIkJ,GAAWzR,KAAMuI,IAQzBiJ,iBAAP,SAAWE,GAEP,OAAO1R,KAAK0I,SAAS,CACjBC,KAAMC,MAAI8I,MAnBTF,MADZpJ,EAAY,gBACAoJ,KAAb,+DAwBA,WAAgC7M,QAAAoE,OAAhC,+DAGA,OC3DY4I,OD2DyBhN,QAAAoE,GAE1B6I,oBAAP,SAAcC,GACV,OAAO7R,KAAK0J,UAAU,CAClBf,KAAMC,MAAIiJ,MAJTD,MADZxJ,EAAY,oBACAwJ,KAAb,gEC3DYD,GAAAA,wBAAAA,mEAQRA,qBAIAA,uBAIAA,uCAQkChN,QAAA+C,OAAzBoK,sBAOT,SAAevJ,GACX,OAAO,IAAIwJ,GAAgB/R,KAAMuI,IAU9BuJ,sBAAP,SAAgBE,EAAeC,GAC3B,oBAD2BA,EAA4BN,sBAAoBO,iBACpElS,KAAKwI,MAAM2J,GAAkB,YAAYzJ,SAAS,CACrDC,KAAMC,MAAI,CACNoJ,MACAC,YAtBHH,SADZ1J,EAAY,qBACA0J,KAAb,0EA+BqCnN,QAAAoE,GAK1BgJ,oBAAP,WACI,OAAO/R,KAAKgJ,cAQT+I,8BAAP,SAAwBlD,GACpB,oBADoBA,MACb7O,KAAKwI,MAAMuJ,GAAiB,oBAAoBrJ,SAAS,CAC5DC,KAAMC,MAAI,CACNiG,2BAULkD,6BAAP,SAAuBlD,GAEnB,oBAFmBA,MAEZ7O,KAAKwI,MAAMuJ,GAAiB,mBAAmBrJ,SAAS,CAC3DC,KAAMC,MAAI,CACNiG,2BAULkD,+BAAP,SAAyBjD,GACrB,OAAO9O,KAAKwI,MAAMuJ,GAAiB,qBAAqBrJ,SAAS,CAC7DC,KAAMC,MAAI,CACNkG,oBA5ChB,0ECvD4BnK,QAAA+C,GAAf0K,MADZhK,EAAY,WACAgK,KAAb,0ECS8BzN,QAAAoE,GAE1BvJ,sBAAW6S,6BAAX,WACI,OAAO,IAAIC,GAAStS,uCAGxBR,sBAAW6S,yBAAX,WACI,OAAO,IAAIE,GAAKvS,uCAGpBR,sBAAW6S,2BAAX,WACI,OAAO,IAAIG,GAAOxS,uCAXbqS,MADZjK,EAAY,aACAiK,KAAb,0EAoB8B1N,QAAA+C,GAAjB4K,MADZlK,EAAY,aACAkK,KAAb,0EAO0B3N,QAAA+C,GAAb6K,MADZnK,EAAY,SACAmK,KAAb,0EAO4B5N,QAAA+C,GAAf8K,MADZpK,EAAY,WACAoK,KAAb,+DCzBA,WAA2B7N,QAAA+C,GAMhB+K,qBAAP,SAAelK,GACX,OAAO,IAAImK,GAAK1S,KAAMuI,IAPjBkK,MADZrK,EAAY,UACAqK,KAAb,+DAcA,WAA0B9N,QAAAoE,GAItBvJ,sBAAWkT,4BAAX,WACI,OAAO,IAAI5C,GAAQ9P,uCAMvBR,sBAAWkT,6BAAX,WACI,OAAO,IAAIvD,GAASnP,uCAKxBR,sBAAWkT,gCAAX,WACI,OAAO,IAAIxG,GAAMlM,KAAM,gDAM3BR,sBAAWkT,6BAAX,WACI,OAAO,IAAIZ,GAAiB9R,KAAM,6CAQ/B0S,8BAAP,SAAwB7D,GACpB,oBADoBA,MACb7O,KAAKwI,MAAMkK,GAAM,oBAAoBhK,SAAS,CACjDC,KAAMC,MAAI,CACNiG,oBAAqBA,OAU1B6D,6BAAP,SAAuB7D,GAEnB,oBAFmBA,MAEZ7O,KAAKwI,MAAMkK,GAAM,mBAAmBhK,SAAS,CAChDC,KAAMC,MAAI,CACNiG,oBAAqBA,OAU1B6D,+BAAP,SAAyB5D,GACrB,OAAO9O,KAAKwI,MAAMkK,GAAM,qBAAqBhK,SAAS,CAClDC,KAAMC,MAAI,CACNkG,SAAUA,OAOtBtP,sBAAWkT,mCAAX,WACI,OAAO,IAAIhD,GAAe1P,uCAM9BR,sBAAWkT,0BAAX,WACI,OAAO,IAAInC,GAAMvQ,uCAMrBR,sBAAWkT,2BAAX,WACI,OAAO,IAAIpC,GAAOtQ,uCAMtBR,sBAAWkT,0BAAX,WACI,OAAO,IAAI7H,GAAM7K,KAAM,kDAM3BR,sBAAWkT,6BAAX,WACI,OAAO,IAAIrB,GAASrR,uCAMxBR,sBAAWkT,oCAAX,WACI,OAAO,IAAId,GAAgB5R,uCAM/BR,sBAAWkT,gCAAX,WACI,OAAO,IAAIlB,GAAYxR,uCAQpB0S,oBAAP,SAAcpJ,GAEV,OAAOtJ,KAAK0J,UAAU,CAClBf,KAAMC,MAAIU,MAOXoJ,oBAAP,WACI,OAAO1S,KAAKgJ,cAMT0J,sBAAP,SAAgBnB,GAEZ,OAAOvR,KAAKwI,MAAMkK,GAAM,YAAYhK,SAAS,CACzCC,KAAMC,MAAI2I,MAOlB/R,sBAAWkT,2BAAX,WACI,OAAO,IAAIN,GAAOpS,uCAMtBR,sBAAWkT,kCAAX,WACI,OAAO,IAAIN,GAAOpS,KAAM,kDAM5BR,sBAAWkT,6BAAX,WACI,OAAO,IAAIL,GAASrS,2CAnK5B,0ECCgC2E,QAAAgO,cAUbC,mBAAf,SAA+B7Q,GAE3B,IAAKwD,gBAAcxD,GAEf,OAAOA,EAGX,IAAI8Q,EAAQ9Q,EAAI4D,QAAQ,cAExB,OAAIkN,EAAQ,GAIK,GAFbA,EAAQ9Q,EAAI4D,QAAQ,eAKT5D,EAAI+Q,OAAOD,EAAQ,IAS3B9Q,EAJIA,EAAI+Q,OAAOD,EAAQ,IAOnBD,kBAAf,SAA8BG,GAA9B,WAEI,OAAOA,EAASvO,IAAI,SAACwO,EAASH,GAE1B,IAAII,EAA6C,CAC7C1K,GAAI,MAAKsK,EACTjP,OAAQoP,EAAQpP,OAChB7B,IAAKY,EAAKuQ,gBAAgBF,EAAQjR,MAGlCP,EAAU,GA4Bd,YAzBmCD,IAA/BL,EAAmBM,SAAwD,OAA/BN,EAAmBM,UAE/DA,EAAUc,SAAOd,EAASN,EAAmBM,eAGzBD,IAApByR,EAAQhR,eAGwBT,IAA5ByR,EAAQhR,QAAQR,SAAqD,OAA5BwR,EAAQhR,QAAQR,UACzDA,EAAUc,SAAOd,EAASwR,EAAQhR,QAAQR,eAIjBD,IAAzByR,EAAQhR,QAAQ2G,MAA+C,OAAzBqK,EAAQhR,QAAQ2G,OAEtDsK,EAAkB3Q,SAAO2Q,EAAiB,CACtCtK,KAAMqK,EAAQhR,QAAQ2G,SAKlCsK,EAAkB3Q,SAAO2Q,EAAiB,CACtCzR,QAASA,OAONoR,iBAAf,SAA6BG,EAAmCI,GAE5D,OAAO,IAAI1P,QAAQ,SAACT,GAIhB,IAFA,IAAMoQ,EAA8B,IAAIzT,MAAMoT,EAASpS,QAAQ0S,KAAK,MAE3DrS,EAAI,EAAGA,EAAImS,EAAcG,UAAU3S,SAAUK,EAAG,CAErD,IAAM+B,EAAWoQ,EAAcG,UAAUtS,GAGnCuS,EAAaC,SAASzQ,EAASwF,GAAI,IAAM,EAEvB,MAApBxF,EAASG,OAETkQ,EAAgBG,GAAc,IAAIE,SAGlCL,EAAgBG,GAAc,IAAIE,SAASC,KAAKC,UAAU5Q,EAAS4F,MAAO5F,GAIlFC,EAAQ,CACJ4Q,SAAUT,EAAcS,SACxBN,UAAWF,OAKbR,yBAAV,WAAA,WAII,GAFAiB,SAAOC,MAAM,IAAI9T,KAAK+T,eAAa,IAAKC,MAAQC,oCAAmCjU,KAAK+S,SAASpS,uBAE7FX,KAAK+S,SAASpS,OAAS,EAEvB,OADAkT,SAAOC,MAAM,4BACNrQ,QAAQT,UAWnB,IARA,IAAMkR,EAAS,IAAIpS,EAGbiR,EAAW/S,KAAK+S,SAASoB,QAGzBC,EAAU3Q,QAAQT,uBAIpB,IAAMqR,EAAgBtB,EAASuB,OAAO,EAAGC,EAAKC,aAExCC,EAAkC,CACpC1B,SAAUH,GAAW8B,eAAeL,IAGlCM,EAAe,CACjBhM,KAAMC,MAAI6L,GACVjT,QAAS,CACLoT,OAAU,mBACVC,eAAgB,oBAEpBjR,OAAQ,QAGZiQ,SAAOC,MAAM,IAAIS,EAAKR,eAAa,IAAKC,MAAQC,wCAEhDC,EAAOrR,MAAM0R,EAAKO,SAAUH,GACvB7R,KAAK,SAAAlC,GAAK,OAAAA,EAAEmU,SACZjS,KAAK,SAACkS,GAAM,OAAApC,GAAWqC,cAAcZ,EAAeW,KACpDlS,KAAK,SAACoS,GAEHrB,SAAOC,MAAM,IAAInR,EAAKoR,eAAa,IAAKC,MAAQC,6CAEhDiB,EAAe5B,UAAU6B,OAAO,SAACC,EAAOrS,EAAU8P,GAE9C,IAAMwC,EAAUhB,EAAcxB,GAI9B,OAFAgB,SAAOC,MAAM,IAAInR,EAAKoR,eAAa,IAAKC,MAAQC,yCAAwCoB,EAAQzR,WAAUyR,EAAQtT,WAE3GqT,EAAMtS,KAAK,SAAAwS,GAAK,OAAAD,EAAQ9O,OAAOgP,MAAMxS,GAAUD,KAAKuS,EAAQrS,SAASC,MAAMoS,EAAQlS,WAE3FiR,aAlCU,EAAlBrB,EAASpS,YAsChB,OAAOyT,OAlKX,YAAoBU,EAA8DN,gBAA9DM,0DAA8DN,MAAlF,MACIrO,2BADgBxD,WAAAmS,EAA8DnS,cAAA6R,eC7BrD7P,QAAA+C,GAStB8N,oBAAP,SAAcC,EAAiCC,EAA2BnH,gBAAAA,MAEtE,IAAMrD,EAAW5I,SAAO,CACpBoT,kBAAmBA,EACnBD,wBAAyBA,GAC1BlH,GAEH,OAAOvO,KAAK0I,SAAS,CACjBC,KAAMC,MAAIsC,KACXpI,KAAK,v//DAAAlC,GACJ,MAAO,CACH2I,KAAM3I,MApBT4U,MADZpN,EAAY,gBACAoN,KAAb,0ECLmC7Q,QAAA+C,GAExBiO,qBAAP,SAAepN,GACX,OAAO,IAAIqN,GAAa5V,KAAMuI,IAa3BoN,iBAAP,SAAWE,EAAoBC,EAAyBC,EAAkBC,EACtEzH,GADJ,wBACIA,MAEA,IAAMrD,EAAW5I,SAAO,CACpBuT,WAAYA,EACZG,mBAAoBA,EACpBF,gBAAiBA,EACjBC,SAAUA,GACXxH,GAEH,OAAOvO,KAAK0I,SAAS,CACjBC,KAAMC,MAAIsC,KACXpI,KAAK,SAAAlC,GACJ,MAAO,CACH2I,KAAM3I,EACNqV,aAActT,EAAK8G,QAAQ7I,EAAE2H,QA/BhCoN,MADZvN,EAAY,kBACAuN,KAAb,0EAqCkChR,QAAAoE,GAKvB6M,oBAAP,WACI,OAAO5V,KAAKgJ,cAQT4M,oBAAP,SAActM,GAEV,OAAOtJ,KAAK0J,UAAU,CAClBf,KAAMC,MAAIU,UAjBtB,0ECjC8B3E,QAAAoE,GAE1BvJ,sBAAWkP,2BAAX,WACI,OAAO,IAAIwH,GAAOlW,uCAHb0O,MADZtG,EAAY,aACAsG,KAAb,0EAQ4B/J,QAAA+C,GACjBwO,qBAAP,SAAe3N,GACX,OAAO,IAAI4N,GAAMnW,KAAMuI,IAFlB2N,MADZ9N,EAAY,WACA8N,KAAb,0EAM2BvR,QAAAoE,GAOhBoN,oBAAP,SAAc7M,GAEV,OAAOtJ,KAAK0J,UAAU,CAClBf,KAAMC,MAAIU,UAVtB,0ECK2B3E,QAAAoE,GAKvBvJ,sBAAW4W,yBAAX,WACI,OAAO,IAAIC,GAAUrW,KAAM,yCASxBoW,qBAAP,SAAetQ,EAAiBwQ,GAC5B,IAAIC,EAAUzQ,EAOd,OAJIwQ,IACAC,EAAUvW,KAAKwW,YAAY1Q,EAASwQ,IAGjC,IAAID,GAAUrW,KAAMuW,IAOvBH,yBAAR,SAAoBtQ,EAAiBwQ,GAgBjC,OAdIxQ,EAAQ2Q,YAAY,OAAS3Q,EAAQnF,OAAS,IAC9CmF,EAAUA,EAAQ4Q,UAAU,EAAG5Q,EAAQnF,OAAS,IAItB,MAA1B2V,EAAYK,OAAO,KACnBL,EAAcA,EAAYI,UAAU,EAAGJ,EAAY3V,SAInD2V,EAAYG,YAAY,OAASH,EAAY3V,OAAS,IACtD2V,EAAcA,EAAYI,UAAU,EAAGJ,EAAY3V,OAAS,IAGtDmF,OAAYwQ,OA9CjBF,MADZhO,EAAY,UACAgO,KAAb,0EAsD+BzR,QAAAoE,GAE3BvJ,sBAAW6W,4BAAX,WACI,OAAO,IAAIO,GAAa5W,uCAG5BR,sBAAW6W,iCAAX,WACI,OAAO,IAAIQ,GAAkB7W,uCAGjCR,sBAAW6W,0BAAX,WACI,OAAO,IAAI9F,GAAMvQ,uCAGrBR,sBAAW6W,2BAAX,WACI,OAAO,IAAI/F,GAAOtQ,uCAGtBR,sBAAW6W,0BAAX,WACI,OAAO,IAAIS,GAAW9W,uCAG1BR,sBAAW6W,0BAAX,WACI,OAAO,IAAID,GAAMpW,2CAvBzB,0EAgCuC2E,QAAA+C,GAO5BmP,qBAAP,SAAetO,GACX,OAAO,IAAIwO,GAAiB/W,KAAMuI,IAR7BsO,MADZzO,EAAY,iBACAyO,KAAb,0EAiBsClS,QAAAoE,OAAtC,0EASkCpE,QAAA+C,GAMvBkP,qBAAP,SAAerO,GACX,OAAO,IAAIyO,GAAYhX,KAAMuI,IAPxBqO,MADZxO,EAAY,YACAwO,KAAb,0EAeiCjS,QAAAoE,GAE7BvJ,sBAAWwX,gCAAX,WACI,OAAO,IAAIC,GAAiBjX,2CAHpC,0EAYsC2E,QAAA+C,GAM3BuP,qBAAP,SAAe1O,GACX,OAAO,IAAI2O,GAAgBlX,KAAMuI,IAP5B0O,MADZ7O,EAAY,gBACA6O,KAAb,0EAeqCtS,QAAAoE,OAArC,0EAMgCpE,QAAA+C,GAMrBoP,qBAAP,SAAevO,GACX,OAAO,IAAI4O,GAAUnX,KAAMuI,IAUxBuO,oBAAP,SAActJ,EAAqB4J,EAAiB7I,GAApD,wBAAoDA,MAEhD,IAAMrD,EAAW5I,SAAO,CACpBkL,YAAaA,EACb4J,KAAMA,GACP7I,GAEH,OAAOvO,KAAK0I,SAAS,CACjBC,KAAMC,MAAIsC,KACXpI,KAAK,SAAAlC,GACJ,MAAO,CACH2I,KAAM3I,EACNwW,KAAM,IAAID,GAAUxU,EAAM/B,EAAE2H,QA7B/BuO,MADZ1O,EAAY,UACA0O,KAAb,0EAuC+BnS,QAAAoE,GAE3BvJ,sBAAW2X,4BAAX,WACI,OAAO,IAAIP,GAAa5W,uCAG5BR,sBAAW2X,iCAAX,WACI,OAAO,IAAIN,GAAkB7W,uCAGjCR,sBAAW2X,0BAAX,WACI,OAAO,IAAI5G,GAAMvQ,uCAGrBR,sBAAW2X,0BAAX,WACI,OAAO,IAAIE,GAAWrX,2CAf9B,0EAwBgC2E,QAAA+C,GAMrB2P,qBAAP,SAAe9O,GACX,OAAO,IAAI+O,GAAUtX,KAAMuI,IAUxB8O,oBAAP,SAAcE,GAAd,WAEUrM,EAAW,CACbqM,OAAQA,GAGZ,OAAOvX,KAAK0I,SAAS,CACjBC,KAAMC,MAAIsC,KACXpI,KAAK,SAAAlC,GACJ,MAAO,CACH2I,KAAM3I,EACN4W,KAAM,IAAIF,GAAU3U,EAAM/B,EAAE2H,QA5B/B8O,MADZjP,EAAY,UACAiP,KAAb,0EAsC+B1S,QAAAoE,GAE3BvJ,sBAAW8X,8BAAX,WACI,OAAO,IAAIvG,GAAU/Q,uCAGzBR,sBAAW8X,2BAAX,WACI,OAAO,IAAIG,GAAYzX,uCAG3BR,sBAAW8X,6BAAX,WACI,OAAO,IAAII,GAAc1X,uCAMtBsX,oBAAP,WACI,OAAOtX,KAAKgJ,cAQTsO,oBAAP,SAAchO,GAEV,OAAOtJ,KAAK0J,UAAU,CAClBf,KAAMC,MAAIU,UA7BtB,0EAwCiC3E,QAAA+C,GAApB+P,MADZrP,EAAY,WACAqP,KAAb,0EAOmC9S,QAAA+C,GAOxBgQ,qBAAP,SAAenP,GACX,OAAO,IAAIoP,GAAQ3X,KAAMuI,IARpBmP,MADZtP,EAAY,aACAsP,KAAb,0EAgB6B/S,QAAAoE,OAA7B,0EC/U+BpE,QAAAE,GAM3BrF,sBAAWoY,qCAAX,WACI,OAAO,IAAI9F,GAAiB9R,uCAGhCR,sBAAWoY,2BAAX,WACI,OAAO,IAAIxJ,GAAOpO,uCAGtBR,sBAAWoY,0BAAX,WACI,OAAO,IAAI1L,GAAMlM,uCAGrBR,sBAAWoY,uBAAX,WACI,OAAO,IAAIlF,GAAK1S,KAAM,uCAG1BR,sBAAWoY,4BAAX,WACI,OAAO,IAAIjN,GAAQ3K,uCAGvBR,sBAAWoY,0BAAX,WACI,OAAO,IAAInF,GAAMzS,uCAGrBR,sBAAWoY,gCAAX,WACI,OAAO,IAAIpC,GAAYxV,uCAG3BR,sBAAWoY,kCAAX,WACI,OAAO,IAAIjC,GAAc3V,uCAGtB4X,yBAAP,WACI,OAAO,IAAIhF,IAGRgF,mBAAP,SAAaC,azBzCKA,GAClBxW,gBAAciB,OAAOuV,GyByCjBC,CAAOD,IAGXrY,sBAAWoY,6BAAX,WACI,OAAO,IAAIlJ,GAAS1O,uCAGxBR,sBAAWoY,0BAAX,WACI,OAAO,IAAIxB,GAAMpW,2CAjDrB,YAAY8F,EAAkCC,UAC1CI,aAAML,EAASC,aAqDZyG,GAAQ,IAAIoL,GAAU"}