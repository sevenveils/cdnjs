{"version":3,"file":"graph.es5.umd.js","sources":["../../../../node_modules/tslib/tslib.es6.js","../../../../packages/graph/src/config/graphlibconfig.ts","../../../../packages/graph/src/net/graphhttpclient.ts","../../../../packages/graph/src/types.ts","../../../../packages/graph/src/graphqueryable.ts","../../../../packages/graph/src/members.ts","../../../../packages/graph/src/calendars.ts","../../../../packages/graph/src/attachments.ts","../../../../packages/graph/src/conversations.ts","../../../../packages/graph/src/planner.ts","../../../../packages/graph/src/photos.ts","../../../../packages/graph/src/teams.ts","../../../../packages/graph/src/groups.ts","../../../../packages/graph/src/contacts.ts","../../../../packages/graph/src/onenote.ts","../../../../packages/graph/src/onedrive.ts","../../../../packages/graph/src/messages.ts","../../../../packages/graph/src/directoryobjects.ts","../../../../packages/graph/src/users.ts","../../../../packages/graph/src/batch.ts","../../../../packages/graph/src/invitations.ts","../../../../packages/graph/src/rest.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { LibraryConfiguration, TypedHash, RuntimeConfig, HttpClientImpl, AdalClient } from \"@pnp/common\";\n\nexport interface GraphConfigurationPart {\n    graph?: {\n        /**\n         * Any headers to apply to all requests\n         */\n        headers?: TypedHash<string>;\n\n        /**\n         * Defines a factory method used to create fetch clients\n         */\n        fetchClientFactory?: () => HttpClientImpl;\n    };\n}\n\nexport interface GraphConfiguration extends LibraryConfiguration, GraphConfigurationPart { }\n\nexport function setup(config: GraphConfiguration): void {\n    RuntimeConfig.extend(config);\n}\n\nexport class GraphRuntimeConfigImpl {\n\n    public get headers(): TypedHash<string> {\n\n        const graphPart = RuntimeConfig.get(\"graph\");\n        if (graphPart !== undefined && graphPart !== null && graphPart.headers !== undefined) {\n            return graphPart.headers;\n        }\n\n        return {};\n    }\n\n    public get fetchClientFactory(): () => HttpClientImpl {\n\n        const graphPart = RuntimeConfig.get(\"graph\");\n        // use a configured factory firt\n        if (graphPart !== undefined && graphPart !== null && graphPart.fetchClientFactory !== undefined) {\n            return graphPart.fetchClientFactory;\n        }\n\n        // then try and use spfx context if available\n        if (RuntimeConfig.spfxContext !== undefined) {\n            return () => AdalClient.fromSPFxContext(RuntimeConfig.spfxContext);\n        }\n\n        throw Error(\"There is no Graph Client available, either set one using configuraiton or provide a valid SPFx Context using setup.\");\n    }\n}\n\nexport let GraphRuntimeConfig = new GraphRuntimeConfigImpl();\n","import {\n    extend,\n    RequestClient,\n    mergeHeaders,\n    FetchOptions,\n    HttpClientImpl,\n    getCtxCallback,\n} from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"../config/graphlibconfig\";\n\nexport class GraphHttpClient implements RequestClient {\n\n    private _impl: HttpClientImpl;\n\n    constructor() {\n\n        this._impl = GraphRuntimeConfig.fetchClientFactory();\n    }\n\n    public fetch(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        const headers = new Headers();\n\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\n        mergeHeaders(headers, GraphRuntimeConfig.headers);\n\n        // second we add the local options so we can overwrite the globals\n        mergeHeaders(headers, options.headers);\n\n        if (!headers.has(\"Content-Type\")) {\n            headers.append(\"Content-Type\", \"application/json\");\n        }\n\n        const opts = extend(options, { headers: headers });\n\n        return this.fetchRaw(url, opts);\n    }\n\n    public fetchRaw(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        // here we need to normalize the headers\n        const rawHeaders = new Headers();\n        mergeHeaders(rawHeaders, options.headers);\n        options = extend(options, { headers: rawHeaders });\n\n        const retry = (ctx: RetryContext): void => {\n\n            this._impl.fetch(url, options).then((response) => ctx.resolve(response)).catch((response) => {\n\n                // Check if request was throttled - http status code 429\n                // Check if request failed due to server unavailable - http status code 503\n                if (response.status !== 429 && response.status !== 503) {\n                    ctx.reject(response);\n                }\n\n                // grab our current delay\n                const delay = ctx.delay;\n\n                // Increment our counters.\n                ctx.delay *= 2;\n                ctx.attempts++;\n\n                // If we have exceeded the retry count, reject.\n                if (ctx.retryCount <= ctx.attempts) {\n                    ctx.reject(response);\n                }\n\n                // Set our retry timeout for {delay} milliseconds.\n                setTimeout(getCtxCallback(this, retry, ctx), delay);\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n\n            const retryContext: RetryContext = {\n                attempts: 0,\n                delay: 100,\n                reject: reject,\n                resolve: resolve,\n                retryCount: 7,\n            };\n\n            retry.call(this, retryContext);\n        });\n    }\n\n    public get(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"GET\" });\n        return this.fetch(url, opts);\n    }\n\n    public post(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"POST\" });\n        return this.fetch(url, opts);\n    }\n\n    public patch(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"PATCH\" });\n        return this.fetch(url, opts);\n    }\n\n    public delete(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"DELETE\" });\n        return this.fetch(url, opts);\n    }\n}\n\ninterface RetryContext {\n    attempts: number;\n    delay: number;\n    reject: (reason?: any) => void;\n    resolve: (value?: Response | PromiseLike<Response>) => void;\n    retryCount: number;\n}\n","export class GraphEndpoints {\n\n    public static Beta = \"beta\";\n    public static V1 = \"v1.0\";\n\n    /**\n     * \n     * @param url The url to set the endpoint \n     */\n    public static ensure(url: string, endpoint: string): string {\n        const all = [GraphEndpoints.Beta, GraphEndpoints.V1];\n        let regex = new RegExp(endpoint, \"i\");\n        const replaces = all.filter(s => !regex.test(s)).map(s => s.replace(\".\", \"\\\\.\"));\n        regex = new RegExp(`/?(${replaces.join(\"|\")})/`, \"ig\");\n        return url.replace(regex, `/${endpoint}/`);\n    }\n}\n\n/**\n * Defines the properties for a Team\n * \n * TODO:: remove this once typings are present in graph types package\n */\nexport interface TeamProperties {\n\n    memberSettings?: {\n        \"allowCreateUpdateChannels\"?: boolean;\n        \"allowDeleteChannels\"?: boolean;\n        \"allowAddRemoveApps\"?: boolean;\n        \"allowCreateUpdateRemoveTabs\"?: boolean;\n        \"allowCreateUpdateRemoveConnectors\"?: boolean;\n    };\n\n    guestSettings?: {\n        \"allowCreateUpdateChannels\"?: boolean;\n        \"allowDeleteChannels\"?: boolean;\n    };\n\n    messagingSettings?: {\n        \"allowUserEditMessages\"?: boolean;\n        \"allowUserDeleteMessages\"?: boolean;\n        \"allowOwnerDeleteMessages\"?: boolean;\n        \"allowTeamMentions\"?: boolean;\n        \"allowChannelMentions\"?: boolean;\n    };\n\n    funSettings?: {\n        \"allowGiphy\"?: boolean;\n        \"giphyContentRating\"?: \"strict\" | string,\n        \"allowStickersAndMemes\"?: boolean;\n        \"allowCustomMemes\"?: boolean;\n    };\n}\n\nexport interface TabsConfiguration {\n\n    configuration: {\n        \"entityId\": string;\n        \"contentUrl\": string;\n        \"websiteUrl\": string;\n        \"removeUrl\": string;\n\n    };\n}\n","import {\n    combine,\n    extend,\n    isUrlAbsolute,\n    FetchOptions,\n    getGUID,\n} from \"@pnp/common\";\nimport {\n    ODataParser,\n    ODataQueryable,\n    RequestContext,\n} from \"@pnp/odata\";\nimport { GraphHttpClient } from \"./net/graphhttpclient\";\nimport { GraphBatch } from \"./batch\";\nimport { GraphEndpoints } from \"./types\";\n\nexport interface GraphQueryableConstructor<T> {\n    new(baseUrl: string | GraphQueryable, path?: string): T;\n}\n\n/**\n * Queryable Base Class\n *\n */\nexport class GraphQueryable<GetType = any> extends ODataQueryable<GraphBatch, GetType> {\n\n    /**\n     * Creates a new instance of the Queryable class\n     *\n     * @constructor\n     * @param baseUrl A string or Queryable that should form the base part of the url\n     *\n     */\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super();\n\n        if (typeof baseUrl === \"string\") {\n\n            const urlStr = baseUrl as string;\n            this._parentUrl = urlStr;\n            this._url = combine(urlStr, path);\n        } else {\n            this.extend(baseUrl as GraphQueryable, path);\n        }\n    }\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this.query.set(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this.query.set(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Creates a new instance of the supplied factory and extends this into that new instance\n     *\n     * @param factory constructor for the new queryable\n     */\n    public as<T>(factory: GraphQueryableConstructor<T>): T {\n        const o = <T>new factory(this._url, null);\n        return extend(o, this, true);\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public toUrlAndQuery(): string {\n\n        let url = this.toUrl();\n\n        if (!isUrlAbsolute(url)) {\n            url = combine(\"https://graph.microsoft.com\", url);\n        }\n\n        if (this.query.size > 0) {\n            const char = url.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n            url += `${char}${Array.from(this.query).map((v: [string, string]) => v[0] + \"=\" + v[1]).join(\"&\")}`;\n        }\n\n        return url;\n    }\n\n    /**\n     * Gets a parent for this instance as specified\n     *\n     * @param factory The contructor for the class to create\n     */\n    protected getParent<T extends GraphQueryable>(\n        factory: GraphQueryableConstructor<T>,\n        baseUrl: string | GraphQueryable = this.parentUrl,\n        path?: string): T {\n\n        return new factory(baseUrl, path);\n    }\n\n    /**\n     * Clones this queryable into a new queryable instance of T\n     * @param factory Constructor used to create the new instance\n     * @param additionalPath Any additional path to include in the clone\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\n     */\n    protected clone<T extends GraphQueryable>(factory: GraphQueryableConstructor<T>, additionalPath?: string, includeBatch = true): T {\n\n        return <T>super._clone(new factory(this, additionalPath), { includeBatch });\n    }\n\n    protected setEndpoint(endpoint: string): this {\n\n        this._url = GraphEndpoints.ensure(this._url, endpoint);\n        return this;\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected toRequestContext<T>(\n        verb: string,\n        options: FetchOptions = {},\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>): Promise<RequestContext<T>> {\n\n        const dependencyDispose = this.hasBatch ? this._batchDependency : () => { return; };\n\n        return Promise.resolve({\n            batch: this.batch,\n            batchDependency: dependencyDispose,\n            cachingOptions: this._cachingOptions,\n            clientFactory: () => new GraphHttpClient(),\n            isBatched: this.hasBatch,\n            isCached: /^get$/i.test(verb) && this._useCaching,\n            options: options,\n            parser: parser,\n            pipeline: pipeline,\n            requestAbsoluteUrl: this.toUrlAndQuery(),\n            requestId: getGUID(),\n            verb: verb,\n        });\n    }\n}\n\n/**\n * Represents a REST collection which can be filtered, paged, and selected\n *\n */\nexport class GraphQueryableCollection<GetType = any[]> extends GraphQueryable<GetType> {\n\n    /**\n     *\n     * @param filter The string representing the filter query\n     */\n    public filter(filter: string): this {\n        this.query.set(\"$filter\", filter);\n        return this;\n    }\n\n    /**\n     * Orders based on the supplied fields\n     *\n     * @param orderby The name of the field on which to sort\n     * @param ascending If false DESC is appended, otherwise ASC (default)\n     */\n    public orderBy(orderBy: string, ascending = true): this {\n        const o = \"$orderby\";\n        const query = this.query.has(o) ? this.query.get(o).split(\",\") : [];\n        query.push(`${orderBy} ${ascending ? \"asc\" : \"desc\"}`);\n        this.query.set(o, query.join(\",\"));\n        return this;\n    }\n\n    /**\n     * Limits the query to only return the specified number of items\n     *\n     * @param top The query row limit\n     */\n    public top(top: number): this {\n        this.query.set(\"$top\", top.toString());\n        return this;\n    }\n\n    /**\n     * Skips a set number of items in the return set\n     *\n     * @param num Number of items to skip\n     */\n    public skip(num: number): this {\n        this.query.set(\"$skip\", num.toString());\n        return this;\n    }\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public skipToken(token: string): this {\n        this.query.set(\"$skiptoken\", token);\n        return this;\n    }\n\n    /**\n     * \tRetrieves the total count of matching resources\n     */\n    public get count(): this {\n        this.query.set(\"$count\", \"true\");\n        return this;\n    }\n}\n\nexport class GraphQueryableSearchableCollection extends GraphQueryableCollection {\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public search(query: string): this {\n        this.query.set(\"$search\", query);\n        return this;\n    }\n}\n\n/**\n * Represents an instance that can be selected\n *\n */\nexport class GraphQueryableInstance<GetType = any> extends GraphQueryable<GetType> { }\n\n/**\n * Decorator used to specify the default path for Queryable objects\n * \n * @param path \n */\nexport function defaultPath(path: string) {\n\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\n\n        return class extends target {\n            constructor(...args: any[]) {\n                super(args[0], args.length > 1 && args[1] !== undefined ? args[1] : path);\n            }\n        };\n    };\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS } from \"@pnp/common\";\nimport { User as IMember } from \"@microsoft/microsoft-graph-types\";\n\n@defaultPath(\"members\")\nexport class Members extends GraphQueryableCollection<IMember[]> {\n\n    /**\n     * Use this API to add a member to an Office 365 group, a security group or a mail-enabled security group through\n     * the members navigation property. You can add users or other groups.\n     * Important: You can add only users to Office 365 groups.\n     * \n     * @param id Full @odata.id of the directoryObject, user, or group object you want to add (ex: https://graph.microsoft.com/v1.0/directoryObjects/${id})\n     */\n    public add(id: string): Promise<any> {\n\n        return this.clone(Members, \"$ref\").postCore({\n            body: jsS({\n                \"@odata.id\": id,\n            }),\n        });\n    }\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Member {\n        return new Member(this, id);\n    }\n}\n\nexport class Member extends GraphQueryableInstance<IMember> { }\n\n@defaultPath(\"owners\")\nexport class Owners extends Members { }\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { TypedHash, jsS } from \"@pnp/common\";\nimport { Event as IEvent, Calendar as ICalendar } from \"@microsoft/microsoft-graph-types\";\n// import { Attachments } from \"./attachments\";\n\n@defaultPath(\"calendars\")\nexport class Calendars extends GraphQueryableCollection<ICalendar[]> {}\n\nexport class Calendar extends GraphQueryableInstance<ICalendar> {\n\n    public get events(): Events {\n        return new Events(this);\n    }\n}\n\n@defaultPath(\"events\")\nexport class Events extends GraphQueryableCollection<IEvent[]> {\n\n    public getById(id: string): Event {\n        return new Event(this, id);\n    }\n\n    /**\n     * Adds a new event to the collection\n     * \n     * @param properties The set of properties used to create the event\n     */\n    public add(properties: Event): Promise<EventAddResult> {\n\n        return this.postCore({\n            body: jsS(properties),\n        }).then(r => {\n            return {\n                data: r,\n                event: this.getById(r.id),\n            };\n        });\n    }\n}\n\nexport interface EventAddResult {\n    data: IEvent;\n    event: Event;\n}\n\nexport class Event extends GraphQueryableInstance<IEvent> {\n\n    // TODO:: when supported\n    // /**\n    //  * Gets the collection of attachments for this event\n    //  */\n    // public get attachments(): Attachments {\n    //     return new Attachments(this);\n    // }\n\n    /**\n     * Update the properties of an event object\n     * \n     * @param properties Set of properties of this event to update\n     */\n    public update(properties: TypedHash<any>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Deletes this event\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { Attachment as IAttachment } from \"@microsoft/microsoft-graph-types\";\nimport { jsS } from \"@pnp/common\";\n\n@defaultPath(\"attachments\")\nexport class Attachments extends GraphQueryableCollection<IAttachment[]> {\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Attachment id\n     */\n    public getById(id: string): Attachment {\n        return new Attachment(this, id);\n    }\n\n    /**\n     * Add attachment to this collection\n     * \n     * @param name Name given to the attachment file\n     * @param bytes File content\n     */\n    public addFile(name: string, bytes: string | Blob): Promise<IAttachment> {\n\n        return this.postCore({\n            body: jsS({\n                \"@odata.type\": \"#microsoft.graph.fileAttachment\",\n                contentBytes: bytes,\n                name: name,\n            }),\n        });\n    }\n}\n\nexport class Attachment extends GraphQueryableInstance<IAttachment> {\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { TypedHash, jsS } from \"@pnp/common\";\nimport { Attachments } from \"./attachments\";\nimport {\n    ConversationThread as IConversationThread,\n    Post as IPost,\n    Recipient as IRecipient,\n    Conversation as IConversation,\n    User as IUser,\n} from \"@microsoft/microsoft-graph-types\";\n\n/**\n * Information used to forward a post\n */\nexport interface PostForwardInfo {\n    comment?: string;\n    toRecipients: IRecipient[];\n}\n\n@defaultPath(\"conversations\")\nexport class Conversations extends GraphQueryableCollection<IConversation[]> {\n\n    /**\n     * Create a new conversation by including a thread and a post.\n     * \n     * @param properties Properties used to create the new conversation\n     */\n    public add(properties: TypedHash<any>): Promise<any> {\n\n        return this.postCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Gets a conversation from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Conversation {\n        return new Conversation(this, id);\n    }\n}\n\n@defaultPath(\"threads\")\nexport class Threads extends GraphQueryableCollection<IConversationThread[]> {\n\n    /**\n     * Gets a thread from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Thread {\n        return new Thread(this, id);\n    }\n\n    /**\n     * Adds a new thread to this collection\n     * \n     * @param properties properties used to create the new thread\n     * @returns Id of the new thread\n     */\n    public add(properties: IConversationThread): Promise<{ id: string }> {\n\n        return this.postCore({\n            body: jsS(properties),\n        });\n    }\n}\n\n@defaultPath(\"posts\")\nexport class Posts extends GraphQueryableCollection<IPost[]> {\n\n    /**\n     * Gets a thread from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Post {\n        return new Post(this, id);\n    }\n\n    /**\n     * Adds a new thread to this collection\n     * \n     * @param properties properties used to create the new thread\n     * @returns Id of the new thread\n     */\n    public add(properties: IPost): Promise<{ id: string }> {\n\n        return this.postCore({\n            body: jsS(properties),\n        });\n    }\n}\n\nexport class Conversation extends GraphQueryableInstance<IConversation> {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get threads(): Threads {\n        return new Threads(this);\n    }\n\n    /**\n     * Updates this conversation\n     */\n    public update(properties: TypedHash<any>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Deletes this member from the group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport class Thread extends GraphQueryableInstance {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get posts(): Posts {\n        return new Posts(this);\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPost): Promise<void> {\n\n        return this.clone(Thread, \"reply\").postCore({\n            body: jsS({\n                post: post,\n            }),\n        });\n    }\n\n    /**\n     * Deletes this member from the group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport class Post extends GraphQueryableInstance<IPost> {\n\n    public get attachments(): Attachments {\n        return new Attachments(this);\n    }\n\n    /**\n     * Deletes this post\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Forward a post to a recipient\n     */\n    public forward(info: PostForwardInfo): Promise<void> {\n        return this.clone(Post, \"forward\").postCore({\n            body: jsS(info),\n        });\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPost): Promise<void> {\n\n        return this.clone(Post, \"reply\").postCore({\n            body: jsS({\n                post: post,\n            }),\n        });\n    }\n}\n\nexport class Senders extends GraphQueryableCollection<IUser[]> {\n\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Add a new user or group to this senders collection\n     * @param id The full @odata.id value to add (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public add(id: string): Promise<any> {\n\n        return this.clone(Senders, \"$ref\").postCore({\n            body: jsS({\n                \"@odata.id\": id,\n            }),\n        });\n    }\n\n    /**\n     * Removes the entity from the collection\n     * \n     * @param id The full @odata.id value to remove (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public remove(id: string): Promise<void> {\n\n        const remover = this.clone(Senders, \"$ref\");\n        remover.query.set(\"$id\", id);\n        return remover.deleteCore();\n    }\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS, TypedHash, extend } from \"@pnp/common\";\nimport {\n    PlannerPlan as IPlannerPlan,\n    PlannerTask as IPlannerTask,\n    PlannerBucket as IPlannerBucket,\n    Planner as IPlanner,\n    PlannerPlanDetails as IPlannerPlanDetails,\n} from \"@microsoft/microsoft-graph-types\";\n\n// Should not be able to use the planner.get()\nexport interface IPlannerMethods {\n    plans: Plans;\n    tasks: Tasks;\n    buckets: Buckets;\n}\n\n@defaultPath(\"planner\")\nexport class Planner extends GraphQueryableInstance<IPlanner> implements IPlannerMethods {\n\n    // Should Only be able to get by id, or else error occur\n    public get plans(): Plans {\n        return new Plans(this);\n    }\n\n    // Should Only be able to get by id, or else error occur\n    public get tasks(): Tasks {\n        return new Tasks(this);\n    }\n\n    // Should Only be able to get by id, or else error occur\n    public get buckets(): Buckets {\n        return new Buckets(this);\n    }\n}\n\n@defaultPath(\"plans\")\nexport class Plans extends GraphQueryableCollection<IPlannerPlan[]> {\n    public getById(id: string): Plan {\n        return new Plan(this, id);\n    }\n\n    /**\n     * Create a new Planner Plan.\n     * \n     * @param owner Id of Group object.\n     * @param title The Title of the Plan.\n     */\n    public add(owner: string, title: string): Promise<PlanAddResult> {\n\n        const postBody = {\n            owner: owner,\n            title: title,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                plan: this.getById(r.id),\n            };\n        });\n    }\n\n}\n\n/**\n * Should not be able to get by Id\n */\n\nexport class Plan extends GraphQueryableInstance<IPlannerPlan> {\n\n    public get tasks(): Tasks {\n        return new Tasks(this);\n    }\n\n    public get buckets(): Buckets {\n        return new Buckets(this);\n    }\n\n    public get details(): Details {\n        return new Details(this);\n    }\n\n    /**\n     * Deletes this Plan\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a Plan\n     * \n     * @param properties Set of properties of this Plan to update\n     */\n    public update(properties: IPlanner): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n}\n\n@defaultPath(\"tasks\")\nexport class Tasks extends GraphQueryableCollection<IPlannerTask[]> {\n    public getById(id: string): Task {\n        return new Task(this, id);\n    }\n\n    /**\n     * Create a new Planner Task.\n     * \n     * @param planId Id of Plan.\n     * @param title The Title of the Task.\n     * @param assignments Assign the task\n     * @param bucketId Id of Bucket\n     */\n    public add(planId: string, title: string, assignments?: TypedHash<any>, bucketId?: string): Promise<TaskAddResult> {\n\n        let postBody = extend({\n            planId: planId,\n            title: title,\n        }, assignments);\n\n        if (bucketId) {\n            postBody = extend(postBody, {\n                bucketId: bucketId,\n            });\n        }\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                task: this.getById(r.id),\n            };\n        });\n    }\n\n}\n\nexport class Task extends GraphQueryableInstance<IPlannerTask> {\n    /**\n     * Deletes this Task\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a Task\n     * \n     * @param properties Set of properties of this Task to update\n     */\n    public update(properties: IPlannerTask): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    public get details(): Details {\n        return new Details(this);\n    }\n}\n\n@defaultPath(\"buckets\")\nexport class Buckets extends GraphQueryableCollection<IPlannerBucket[]> {\n    /**\n     * Create a new Bucket.\n     * \n     * @param name Name of Bucket object.\n     * @param planId The Id of the Plan.\n     * @param oderHint Hint used to order items of this type in a list view.\n     */\n    public add(name: string, planId: string, orderHint?: string): Promise<BucketAddResult> {\n\n        const postBody = {\n            name: name,\n            orderHint: orderHint ? orderHint : \"\",\n            planId: planId,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                bucket: this.getById(r.id),\n                data: r,\n            };\n        });\n    }\n\n    public getById(id: string): Bucket {\n        return new Bucket(this, id);\n    }\n\n}\n\nexport class Bucket extends GraphQueryableInstance<IPlannerBucket> {\n    /**\n     * Deletes this Bucket\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a Bucket\n     * \n     * @param properties Set of properties of this Bucket to update\n     */\n    public update(properties: IPlannerBucket): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    public get tasks(): Tasks {\n        return new Tasks(this);\n    }\n}\n\n@defaultPath(\"details\")\nexport class Details extends GraphQueryableCollection<IPlannerPlanDetails> {}\n\nexport interface BucketAddResult {\n    data: IPlannerBucket;\n    bucket: Bucket;\n}\n\nexport interface PlanAddResult {\n    data: IPlannerPlan;\n    plan: Plan;\n}\n\nexport interface TaskAddResult {\n    data: IPlannerTask;\n    task: Task;\n}\n","import { GraphQueryableInstance, defaultPath } from \"./graphqueryable\";\nimport { BlobParser, BufferParser } from \"@pnp/odata\";\nimport { Photo as IPhoto } from \"@microsoft/microsoft-graph-types\";\n\n@defaultPath(\"photo\")\nexport class Photo extends GraphQueryableInstance<IPhoto> {\n\n    /**\n     * Gets the image bytes as a blob (browser)\n     */\n    public getBlob(): Promise<Blob> {\n        return this.clone(Photo, \"$value\", false).get(new BlobParser());\n    }\n\n    /**\n     * Gets the image file byets as a Buffer (node.js)\n     */\n    public getBuffer(): Promise<ArrayBuffer> {\n        return this.clone(Photo, \"$value\", false).get(new BufferParser());\n    }\n\n    /**\n     * Sets the file bytes\n     * \n     * @param content Image file contents, max 4 MB\n     */\n    public setContent(content: ArrayBuffer | Blob): Promise<void> {\n\n        return this.clone(Photo, \"$value\", false).patchCore({\n            body: content,\n        });\n    }\n}\n","import { graph } from \"./rest\";\nimport { Group, GroupType, GroupAddResult } from \"./groups\";\nimport { GraphQueryableInstance, defaultPath, GraphQueryableCollection } from \"./graphqueryable\";\nimport { TeamProperties, TabsConfiguration } from \"./types\";\nimport { ODataParser, ODataDefaultParser } from \"@pnp/odata\";\nimport { FetchOptions, jsS, extend, TypedHash } from \"@pnp/common\";\n\n@defaultPath(\"teams\")\nexport class Teams extends GraphQueryableCollection {\n\n    /**\n     * Creates a new team and associated Group with the given information\n     * @param name The name of the new Group\n     * @param description Optional description of the group\n     * @param ownerId Add an owner with a user id from the graph\n     */\n    public create(name: string, description = \"\", ownerId: string, teamProperties: TeamProperties = {}): Promise<TeamCreateResult> {\n\n        const groupProps = {\n            \"description\": description && description.length > 0 ? description : \"\",\n            \"owners@odata.bind\": [\n                `https://graph.microsoft.com/v1.0/users/${ownerId}`,\n            ],\n        };\n\n        return graph.groups.add(name, name, GroupType.Office365, groupProps).then((gar: GroupAddResult) => {\n            return gar.group.createTeam(teamProperties).then(data => {\n                return {\n                    data: data,\n                    group: gar.group,\n                    team: new Team(gar.group),\n                };\n            });\n        });\n    }\n\n    public getById(id: string): Team {\n        return new Team(this, id);\n    }\n\n}\n\n/**\n * Represents a Microsoft Team\n */\n@defaultPath(\"team\")\nexport class Team extends GraphQueryableInstance<TeamProperties> {\n\n    public get channels(): Channels {\n        return new Channels(this);\n    }\n\n    public get installedApps(): Apps {\n        return new Apps(this);\n    }\n\n    /**\n     * Updates this team instance's properties\n     * \n     * @param properties The set of properties to update\n     */\n    // TODO:: update properties to be typed once type is available in graph-types\n    public update(properties: TeamProperties): Promise<TeamUpdateResult> {\n\n        return this.clone(Team, \"\").patchCore({\n            body: jsS(properties),\n        }).then(data => {\n            return {\n                data: data,\n                team: this,\n            };\n        });\n    }\n\n    /**\n     * Archives this Team\n     * \n     * @param shouldSetSpoSiteReadOnlyForMembers Should members have Read-only in associated Team Site\n     */\n    // TODO:: update properties to be typed once type is available in graph-types\n    public archive(shouldSetSpoSiteReadOnlyForMembers?: boolean): Promise<TeamUpdateResult> {\n\n        let postBody;\n\n        if (shouldSetSpoSiteReadOnlyForMembers != null) {\n            postBody = extend(postBody, {\n                shouldSetSpoSiteReadOnlyForMembers: shouldSetSpoSiteReadOnlyForMembers,\n            });\n        }\n        return this.clone(Team, \"archive\").postCore({\n            body: jsS(postBody),\n        }).then(data => {\n            return {\n                data: data,\n                team: this,\n            };\n        });\n    }\n\n    /**\n    * Unarchives this Team\n    * \n    */\n    // TODO:: update properties to be typed once type is available in graph-types\n    public unarchive(): Promise<TeamUpdateResult> {\n\n        return this.clone(Team, \"unarchive\").postCore({\n        }).then(data => {\n            return {\n                data: data,\n                team: this,\n            };\n        });\n    }\n\n    /**\n     * Clones this Team\n     * @param name The name of the new Group\n     * @param description Optional description of the group\n     * @param partsToClone Parts to clone ex: apps,tabs,settings,channels,members\n     * @param visibility Set visibility to public or private \n     */\n    // TODO:: update properties to be typed once type is available in graph-types\n    public cloneTeam(name: string, description = \"\", partsToClone: string, visibility: string): Promise<TeamUpdateResult> {\n\n        const postBody = {\n            description: description ? description : \"\",\n            displayName: name,\n            mailNickname: name,\n            partsToClone: partsToClone,\n            visibility: visibility,\n        };\n\n        return this.clone(Team, \"clone\").postCore({\n            body: jsS(postBody),\n        }).then(data => {\n            return {\n                data: data,\n                team: this,\n            };\n        });\n    }\n\n    /**\n     * Executes the currently built request\n     *\n     * @param parser Allows you to specify a parser to handle the result\n     * @param getOptions The options used for this request\n     */\n    public get<T = TeamProperties>(parser: ODataParser<T> = new ODataDefaultParser(), options: FetchOptions = {}): Promise<T> {\n        return this.clone(Team, \"\").getCore(parser, options);\n    }\n}\n\n@defaultPath(\"channels\")\nexport class Channels extends GraphQueryableCollection {\n\n    /**\n     * Creates a new Channel in the Team\n     * @param name The display name of the new channel\n     * @param description Optional description of the channel\n     * \n     */\n    public create(name: string, description = \"\"): Promise<ChannelCreateResult> {\n\n        const postBody = {\n            description: description && description.length > 0 ? description : \"\",\n            displayName: name,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                channel: this.getById(r.id),\n                data: r,\n            };\n        });\n    }\n\n    public getById(id: string): Channel {\n        return new Channel(this, id);\n    }\n\n}\n\nexport class Channel extends GraphQueryableInstance {\n    public get tabs(): Tabs {\n        return new Tabs(this);\n    }\n}\n\n@defaultPath(\"installedApps\")\nexport class Apps extends GraphQueryableCollection {\n\n    /**\n     * Creates a new App in the Team\n     * @param appUrl The url to an app ex: https://graph.microsoft.com/beta/appCatalogs/teamsApps/12345678-9abc-def0-123456789a\n     * \n     */\n    public add(appUrl: string): Promise<any> {\n\n        const postBody = {\n            \"teamsApp@odata.bind\": appUrl,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n            };\n        });\n    }\n\n    /**\n     * Deletes this app\n     */\n    public remove(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\n@defaultPath(\"tabs\")\nexport class Tabs extends GraphQueryableCollection {\n\n    /**\n     * Adds a tab to the cahnnel\n     * @param name The name of the new Tab\n     * @param appUrl The url to an app ex: https://graph.microsoft.com/beta/appCatalogs/teamsApps/12345678-9abc-def0-123456789a\n     * @param tabsConfiguration visit https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/teamstab_add for reference\n     */\n    public add(name: string, appUrl: string, properties: TabsConfiguration): Promise<TabCreateResult> {\n\n        const postBody = extend({\n            name: name,\n            \"teamsApp@odata.bind\": appUrl,\n        }, properties);\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                tab: this.getById(r.id),\n            };\n        });\n\n    }\n\n    public getById(id: string): Tab {\n        return new Tab(this, id);\n    }\n\n}\n\n/**\n * Represents a Microsoft Team\n */\n@defaultPath(\"tab\")\nexport class Tab extends GraphQueryableInstance<TeamProperties> {\n\n    /**\n     * Updates this tab\n     * \n     * @param properties The set of properties to update\n     */\n    // TODO:: update properties to be typed once type is available in graph-types\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<TabUpdateResult> {\n\n        return this.clone(Tab, \"\").patchCore({\n            body: jsS(properties),\n        }).then(data => {\n            return {\n                data: data,\n                tab: this,\n            };\n        });\n    }\n\n    /**\n     * Deletes this tab\n     */\n    public remove(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport interface TeamUpdateResult {\n    data: any;\n    team: Team;\n}\n\nexport interface TeamCreateResult {\n    data: any;\n    group: Group;\n    team: Team;\n}\n\nexport interface ChannelCreateResult {\n    data: any;\n    channel: Channel;\n}\n\nexport interface TabCreateResult {\n    data: any;\n    tab: Tab;\n}\n\nexport interface TabUpdateResult {\n    data: any;\n    tab: Tab;\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { Members, Owners } from \"./members\";\nimport { extend, TypedHash, jsS } from \"@pnp/common\";\nimport { Calendar, Events } from \"./calendars\";\nimport { Conversations, Senders } from \"./conversations\";\nimport { Event as IEvent, Group as IGroup } from \"@microsoft/microsoft-graph-types\";\nimport { Plans } from \"./planner\";\nimport { Photo } from \"./photos\";\nimport { Team } from \"./teams\";\nimport { TeamProperties } from \"./types\";\n\nexport enum GroupType {\n    /**\n     * Office 365 (aka unified group)\n     */\n    Office365,\n    /**\n     * Dynamic membership\n     */\n    Dynamic,\n    /**\n     * Security\n     */\n    Security,\n}\n\n/**\n * Describes a collection of Field objects\n *\n */\n@defaultPath(\"groups\")\nexport class Groups extends GraphQueryableCollection<IGroup[]> {\n\n    /**\n     * Gets a group from the collection using the specified id\n     * \n     * @param id Id of the group to get from this collection\n     */\n    public getById(id: string): Group {\n        return new Group(this, id);\n    }\n\n    /**\n     * Create a new group as specified in the request body.\n     * \n     * @param name Name to display in the address book for the group\n     * @param mailNickname Mail alias for the group\n     * @param groupType Type of group being created\n     * @param additionalProperties A plain object collection of additional properties you want to set on the new group\n     */\n    public add(name: string, mailNickname: string, groupType: GroupType, additionalProperties: TypedHash<any> = {}): Promise<GroupAddResult> {\n\n        let postBody = extend({\n            displayName: name,\n            mailEnabled: groupType === GroupType.Office365,\n            mailNickname: mailNickname,\n            securityEnabled: groupType !== GroupType.Office365,\n        }, additionalProperties);\n\n        // include a group type if required\n        if (groupType !== GroupType.Security) {\n\n            postBody = extend(postBody, {\n                groupTypes: groupType === GroupType.Office365 ? [\"Unified\"] : [\"DynamicMembership\"],\n            });\n        }\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                group: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Represents a group entity\n */\nexport class Group extends GraphQueryableInstance<IGroup> {\n\n    /**\n     * The calendar associated with this group\n     */\n    public get calendar(): Calendar {\n        return new Calendar(this, \"calendar\");\n    }\n\n    /**\n     * Retrieve a list of event objects\n     */\n    public get events(): Events {\n        return new Events(this);\n    }\n\n    /**\n     * Gets the collection of owners for this group\n     */\n    public get owners(): Owners {\n        return new Owners(this);\n    }\n\n    /**\n     * The collection of plans for this group\n     */\n    public get plans(): Plans {\n        return new Plans(this, \"planner/plans\");\n    }\n\n    /**\n     * Gets the collection of members for this group\n     */\n    public get members(): Members {\n        return new Members(this);\n    }\n\n    /**\n     * Gets the conversations collection for this group\n     */\n    public get conversations(): Conversations {\n        return new Conversations(this);\n    }\n\n    /**\n     * Gets the collection of accepted senders for this group\n     */\n    public get acceptedSenders(): Senders {\n        return new Senders(this, \"acceptedsenders\");\n    }\n\n    /**\n     * Gets the collection of rejected senders for this group\n     */\n    public get rejectedSenders(): Senders {\n        return new Senders(this, \"rejectedsenders\");\n    }\n\n    /**\n     * The photo associated with the group\n     */\n    public get photo(): Photo {\n        return new Photo(this);\n    }\n\n    /**\n     * Gets the team associated with this group, if it exists\n     */\n    public get team(): Team {\n        return new Team(this);\n    }\n\n    /**\n     * Add the group to the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public addFavorite(): Promise<void> {\n        return this.clone(Group, \"addFavorite\").postCore();\n    }\n\n    /**\n     * Creates a Microsoft Team associated with this group\n     * \n     * @param properties Initial properties for the new Team\n     */\n    public createTeam(properties: TeamProperties): Promise<any> {\n\n        return this.clone(Group, \"team\").putCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Returns all the groups and directory roles that the specified group is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberObjects(securityEnabledOnly = false): Promise<{ value: string[] }> {\n        return this.clone(Group, \"getMemberObjects\").postCore({\n            body: jsS({\n                securityEnabledOnly: securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Return all the groups that the specified group is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberGroups(securityEnabledOnly = false): Promise<{ value: string[] }> {\n\n        return this.clone(Group, \"getMemberGroups\").postCore({\n            body: jsS({\n                securityEnabledOnly: securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Check for membership in a specified list of groups, and returns from that list those groups of which the specified user, group, or directory object is a member. \n     * This function is transitive.\n     * @param groupIds A collection that contains the object IDs of the groups in which to check membership. Up to 20 groups may be specified.\n     */\n    public checkMemberGroups(groupIds: String[]): Promise<{ value: string[] }> {\n        return this.clone(Group, \"checkMemberGroups\").postCore({\n            body: jsS({\n                groupIds: groupIds,\n            }),\n        });\n    }\n\n    /**\n     * Deletes this group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a group object\n     * \n     * @param properties Set of properties of this group to update\n     */\n    public update(properties: IGroup): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Remove the group from the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public removeFavorite(): Promise<void> {\n\n        return this.clone(Group, \"removeFavorite\").postCore();\n    }\n\n    /**\n     * Reset the unseenCount of all the posts that the current user has not seen since their last visit\n     */\n    public resetUnseenCount(): Promise<void> {\n        return this.clone(Group, \"resetUnseenCount\").postCore();\n    }\n\n    /**\n     * Calling this method will enable the current user to receive email notifications for this group,\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public subscribeByMail(): Promise<void> {\n        return this.clone(Group, \"subscribeByMail\").postCore();\n    }\n\n    /**\n     * Calling this method will prevent the current user from receiving email notifications for this group\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public unsubscribeByMail(): Promise<void> {\n        return this.clone(Group, \"unsubscribeByMail\").postCore();\n    }\n\n    /**\n     * Get the occurrences, exceptions, and single instances of events in a calendar view defined by a time range, from the default calendar of a group\n     * \n     * @param start Start date and time of the time range\n     * @param end End date and time of the time range\n     */\n    public getCalendarView(start: Date, end: Date): Promise<IEvent[]> {\n\n        const view = this.clone(Group, \"calendarView\");\n        view.query.set(\"startDateTime\", start.toISOString());\n        view.query.set(\"endDateTime\", end.toISOString());\n        return view.get();\n    }\n}\n\nexport interface GroupAddResult {\n    group: Group;\n    data: any;\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS, TypedHash, extend } from \"@pnp/common\";\nimport {\n    Contact as IContact,\n    ContactFolder as IContactFolder,\n    EmailAddress,\n} from \"@microsoft/microsoft-graph-types\";\n\n@defaultPath(\"contacts\")\nexport class Contacts extends GraphQueryableCollection<IContact[]> {\n\n    public getById(id: string): Contact {\n        return new Contact(this, id);\n    }\n\n    /**\n    * Create a new Contact for the user.\n    * \n    * @param givenName The contact's given name.\n    * @param surName The contact's surname.\n    * @param emailAddresses The contact's email addresses.\n    * @param businessPhones The contact's business phone numbers.\n    * @param additionalProperties A plain object collection of additional properties you want to set on the new contact\n    */\n    public add(givenName: string, surName: string, emailAddresses: EmailAddress[], businessPhones: string[], additionalProperties: TypedHash<any> = {}): Promise<ContactAddResult> {\n\n        const postBody = extend({\n            businessPhones: businessPhones,\n            emailAddresses: emailAddresses,\n            givenName: givenName,\n            surName: surName,\n        }, additionalProperties);\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                contact: this.getById(r.id),\n                data: r,\n            };\n        });\n    }\n}\n\nexport class Contact extends GraphQueryableInstance<IContact> {\n    /**\n     * Deletes this contact\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a contact object\n     * \n     * @param properties Set of properties of this contact to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n}\n\n@defaultPath(\"contactFolders\")\nexport class ContactFolders extends GraphQueryableCollection<IContactFolder[]> {\n\n    public getById(id: string): ContactFolder {\n        return new ContactFolder(this, id);\n    }\n\n    /**\n     * Create a new Contact Folder for the user.\n     * \n     * @param displayName The folder's display name.\n     * @param parentFolderId The ID of the folder's parent folder.\n     */\n    public add(displayName: string, parentFolderId?: string): Promise<ContactFolderAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n            parentFolderId: parentFolderId,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                contactFolder: this.getById(r.id),\n                data: r,\n            };\n        });\n    }\n}\n\nexport class ContactFolder extends GraphQueryableInstance<IContactFolder> {\n    /**\n     * Gets the contacts in this contact folder\n     */\n    public get contacts(): Contacts {\n        return new Contacts(this);\n    }\n\n    /**\n    * Gets the contacts in this contact folder\n    */\n    public get childFolders(): ContactFolders {\n        return new ContactFolders(this, \"childFolders\");\n    }\n\n    /**\n     * Deletes this contact folder\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a contact folder\n     * \n     * @param properties Set of properties of this contact folder to update\n     */\n    public update(properties: IContactFolder): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n}\n\nexport interface ContactFolderAddResult {\n    data: IContactFolder;\n    contactFolder: ContactFolder;\n}\n\nexport interface ContactAddResult {\n    data: IContact;\n    contact: Contact;\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS } from \"@pnp/common\";\nimport { Notebook as INotebook, Onenote as IOnenote, OnenoteSection as ISection } from \"@microsoft/microsoft-graph-types\";\n\nexport interface OneNoteMethods {\n    notebooks: Notebooks;\n    sections: Sections;\n    pages: Pages;\n}\n\n/**\n * Represents a onenote entity\n */\n@defaultPath(\"onenote\")\nexport class OneNote extends GraphQueryableInstance<IOnenote> implements OneNoteMethods {\n\n    public get notebooks(): Notebooks {\n        return new Notebooks(this);\n    }\n\n    public get sections(): Sections {\n        return new Sections(this);\n    }\n\n    public get pages(): Pages {\n        return new Pages(this);\n    }\n}\n\n/**\n * Describes a collection of Notebook objects\n *\n */\n@defaultPath(\"notebooks\")\nexport class Notebooks extends GraphQueryableCollection<INotebook[]> {\n\n    /**\n     * Gets a notebook instance by id\n     * \n     * @param id Notebook id\n     */\n    public getById(id: string): Notebook {\n        return new Notebook(this, id);\n    }\n\n    /**\n     * Create a new notebook as specified in the request body.\n     * \n     * @param displayName Notebook display name\n     */\n    public add(displayName: string): Promise<NotebookAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                notebook: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Describes a notebook instance\n *\n */\nexport class Notebook extends GraphQueryableInstance<INotebook> {\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    public get sections(): Sections {\n        return new Sections(this);\n    }\n}\n\n/**\n * Describes a collection of Sections objects\n *\n */\n@defaultPath(\"sections\")\nexport class Sections extends GraphQueryableCollection<ISection[]> {\n\n    /**\n     * Gets a section instance by id\n     * \n     * @param id Section id\n     */\n    public getById(id: string): Section {\n        return new Section(this, id);\n    }\n\n    /**\n     * Adds a new section\n     * \n     * @param displayName New section display name\n     */\n    public add(displayName: string): Promise<SectionAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                section: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Describes a sections instance\n *\n */\nexport class Section extends GraphQueryableInstance<ISection> {\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n}\n\n/**\n * Describes a collection of Pages objects\n *\n */\n@defaultPath(\"pages\")\nexport class Pages extends GraphQueryableCollection { }\n\nexport interface NotebookAddResult {\n    data: any;\n    notebook: Notebook;\n}\n\nexport interface SectionAddResult {\n    data: any;\n    section: Section;\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { DriveItem as IDriveItem, Drive as IDrive } from \"@microsoft/microsoft-graph-types\";\nimport { jsS, TypedHash, extend } from \"@pnp/common\";\n\nexport interface IDriveItemsMethods {\n    getById(id: string): DriveItem;\n}\n\n/**\n * Describes a collection of Drive objects\n *\n */\n@defaultPath(\"drives\")\nexport class Drives extends GraphQueryableCollection<IDrive[]> {\n\n    /**\n     * Gets a Drive instance by id\n     * \n     * @param id Drive id\n     */\n    public getById(id: string): Drive {\n        return new Drive(this, id);\n    }\n}\n\n/**\n * Describes a Drive instance\n *\n */\n@defaultPath(\"drive\")\nexport class Drive extends GraphQueryableInstance<IDrive> {\n\n    public get root(): Root {\n        return new Root(this);\n    }\n\n    public get items(): IDriveItemsMethods {\n        return new DriveItems(this);\n    }\n\n    public get list(): DriveList {\n        return new DriveList(this);\n    }\n\n    public get recent(): Recent {\n        return new Recent(this);\n    }\n\n    public get sharedWithMe(): SharedWithMe {\n        return new SharedWithMe(this);\n    }\n\n}\n\n/**\n * Describes a Root instance\n *\n */\n@defaultPath(\"root\")\nexport class Root extends GraphQueryableInstance<IDrive> {\n\n    public get children(): Children {\n        return new Children(this);\n    }\n\n    public search(query: string): DriveSearch {\n        return new DriveSearch(this, `search(q='${query}')`);\n    }\n}\n\n/**\n * Describes a collection of Drive Item objects\n *\n */\n@defaultPath(\"items\")\nexport class DriveItems extends GraphQueryableCollection implements IDriveItemsMethods {\n    /**\n     * Gets a Drive Item instance by id\n     * \n     * @param id Drive Item id\n     */\n    public getById(id: string): DriveItem {\n        return new DriveItem(this, id);\n    }\n}\n\n/**\n * Describes a Drive Item instance\n *\n */\nexport class DriveItem extends GraphQueryableInstance<IDriveItem> {\n\n    public get children(): Children {\n        return new Children(this);\n    }\n\n    public get thumbnails(): Thumbnails {\n        return new Thumbnails(this);\n    }\n\n    /**\n     * Deletes this Drive Item\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a Drive item\n     * \n     * @param properties Set of properties of this Drive Item to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Move the Drive item and optionally update the properties\n     * \n     * @param parentReference Should contain Id of new parent folder\n     * @param properties Optional set of properties of this Drive Item to update\n     */\n    public move(parentReference: TypedHash<any>, properties?: TypedHash<string | number | boolean | string[]>): Promise<void> {\n        let patchBody = extend({\n        }, parentReference);\n\n        if (properties) {\n            patchBody = extend({\n            }, properties);\n        }\n\n        return this.patchCore({\n            body: jsS(patchBody),\n        });\n    }\n}\n\n/**\n * Return a collection of DriveItems in the children relationship of a DriveItem\n *\n */\n@defaultPath(\"children\")\nexport class Children extends GraphQueryableCollection {\n    /**\n    * Create a new folder or DriveItem in a Drive with a specified parent item or path\n    * Currently only Folder or File works\n    * @param name The name of the Drive Item.\n    * @param properties Type of Drive Item to create.\n    * */\n    public add(name: string, driveItemType: IDriveItem): Promise<IDriveItemAddResult> {\n\n        const postBody = extend({\n            name: name,\n        }, driveItemType);\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                driveItem: new DriveItem(this, r.id),\n            };\n        });\n    }\n}\n\n@defaultPath(\"list\")\nexport class DriveList extends GraphQueryableCollection { }\n\n@defaultPath(\"recent\")\nexport class Recent extends GraphQueryableInstance { }\n\n@defaultPath(\"sharedWithMe\")\nexport class SharedWithMe extends GraphQueryableInstance { }\n\n@defaultPath(\"search\")\nexport class DriveSearch extends GraphQueryableInstance { }\n\n@defaultPath(\"thumbnails\")\nexport class Thumbnails extends GraphQueryableInstance { }\n\nexport interface IDriveItemAddResult {\n    data: IDriveItem;\n    driveItem: DriveItem;\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport {\n    Message as IMessage,\n    MailFolder as IMailFolder,\n    MailboxSettings as IMailboxSettings,\n} from \"@microsoft/microsoft-graph-types\";\nimport { jsS } from \"@pnp/common\";\n\n@defaultPath(\"messages\")\nexport class Messages extends GraphQueryableCollection<IMessage[]> {\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Attachment id\n     */\n    public getById(id: string): Message {\n        return new Message(this, id);\n    }\n\n    /**\n     * Add a message to this collection\n     * \n     * @param message The message details\n     */\n    public add(message: IMessage): Promise<IMessage> {\n\n        return this.postCore({\n            body: jsS(message),\n        });\n    }\n}\n\nexport class Message extends GraphQueryableInstance<IMessage> { }\n\n@defaultPath(\"mailFolders\")\nexport class MailFolders extends GraphQueryableCollection<IMailFolder[]> {\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Attachment id\n     */\n    public getById(id: string): MailFolder {\n        return new MailFolder(this, id);\n    }\n\n    /**\n     * Add a mail folder to this collection\n     * \n     * @param message The message details\n     */\n    public add(mailFolder: IMailFolder): Promise<IMailFolder> {\n\n        return this.postCore({\n            body: jsS(mailFolder),\n        });\n    }\n}\n\nexport class MailFolder extends GraphQueryableInstance<IMailFolder> { }\n\n@defaultPath(\"mailboxSettings\")\nexport class MailboxSettings extends GraphQueryableInstance<IMailboxSettings> {\n\n    public update(settings: IMailboxSettings): Promise<void> {\n        return this.patchCore({\n            body: jsS(settings),\n        });\n    }\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS } from \"@pnp/common\";\nimport { DirectoryObject as IDirectoryObject } from \"@microsoft/microsoft-graph-types\";\n\nexport enum DirectoryObjectType {\n    /**\n     * Directory Objects\n     */\n    directoryObject,\n    /**\n     * User\n     */\n    user,\n    /**\n     * Group\n     */\n    group,\n    /**\n     * Device\n     */\n    device,\n}\n\n/**\n * Describes a collection of Directory Objects\n *\n */\n@defaultPath(\"directoryObjects\")\nexport class DirectoryObjects extends GraphQueryableCollection<IDirectoryObject[]> {\n\n    /**\n     * Gets a directoryObject from the collection using the specified id\n     * \n     * @param id Id of the Directory Object to get from this collection\n     */\n    public getById(id: string): DirectoryObject {\n        return new DirectoryObject(this, id);\n    }\n\n    /**\n    * Returns the directory objects specified in a list of ids. NOTE: The directory objects returned are the full objects containing all their properties. \n    * The $select query option is not available for this operation.\n    * \n    * @param ids A collection of ids for which to return objects. You can specify up to 1000 ids.\n    * @param type A collection of resource types that specifies the set of resource collections to search. Default is directoryObject.\n    */\n    public getByIds(ids: string[], type: DirectoryObjectType = DirectoryObjectType.directoryObject): Promise<DirectoryObject[]> {\n        return this.clone(DirectoryObjects, \"getByIds\").postCore({\n            body: jsS({\n                ids,\n                type,\n            }),\n        });\n    }\n}\n\n/**\n * Represents a Directory Object entity\n */\nexport class DirectoryObject extends GraphQueryableInstance<IDirectoryObject> {\n\n    /**\n     * Deletes this group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Returns all the groups and directory roles that the specified Directory Object is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberObjects(securityEnabledOnly = false): Promise<{ value: string[] }> {\n        return this.clone(DirectoryObject, \"getMemberObjects\").postCore({\n            body: jsS({\n                securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Returns all the groups that the specified Directory Object is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberGroups(securityEnabledOnly = false): Promise<{ value: string[] }> {\n\n        return this.clone(DirectoryObject, \"getMemberGroups\").postCore({\n            body: jsS({\n                securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Check for membership in a specified list of groups, and returns from that list those groups of which the specified user, group, or directory object is a member. \n     * This function is transitive.\n     * @param groupIds A collection that contains the object IDs of the groups in which to check membership. Up to 20 groups may be specified.\n     */\n    public checkMemberGroups(groupIds: String[]): Promise<{ value: string[] }> {\n        return this.clone(DirectoryObject, \"checkMemberGroups\").postCore({\n            body: jsS({\n                groupIds,\n            }),\n        });\n    }\n}\n","import { jsS } from \"@pnp/common\";\nimport { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { Contacts, ContactFolders } from \"./contacts\";\nimport { OneNote, OneNoteMethods } from \"./onenote\";\nimport { Drive, Drives } from \"./onedrive\";\nimport { Tasks } from \"./planner\";\nimport { Teams } from \"./teams\";\nimport {\n    User as IUser,\n    Message as IMessage,\n} from \"@microsoft/microsoft-graph-types\";\nimport { Messages, MailboxSettings, MailFolders } from \"./messages\";\nimport { DirectoryObjects } from \"./directoryobjects\";\n\n/**\n * Describes a collection of Users objects\n *\n */\n@defaultPath(\"users\")\nexport class Users extends GraphQueryableCollection<IUser[]> {\n    /**\n     * Gets a user from the collection using the specified id\n     * \n     * @param id Id of the user to get from this collection\n     */\n    public getById(id: string): User {\n        return new User(this, id);\n    }\n}\n\n/**\n * Represents a user entity\n */\nexport class User extends GraphQueryableInstance<IUser> {\n    /**\n    * The onenote associated with me\n    */\n    public get onenote(): OneNoteMethods {\n        return new OneNote(this);\n    }\n\n    /**\n    * The Contacts associated with the user\n    */\n    public get contacts(): Contacts {\n        return new Contacts(this);\n    }\n    /**\n    * The Teams associated with the user\n    */\n    public get joinedTeams(): Teams {\n        return new Teams(this, \"joinedTeams\");\n    }\n\n    /**\n    * The groups and directory roles associated with the user\n    */\n    public get memberOf(): DirectoryObjects {\n        return new DirectoryObjects(this, \"memberOf\");\n    }\n\n    /**\n     * Returns all the groups and directory roles that the specified useris a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberObjects(securityEnabledOnly = false): Promise<{ value: string[] }> {\n        return this.clone(User, \"getMemberObjects\").postCore({\n            body: jsS({\n                securityEnabledOnly: securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Return all the groups that the specified user is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberGroups(securityEnabledOnly = false): Promise<{ value: string[] }> {\n\n        return this.clone(User, \"getMemberGroups\").postCore({\n            body: jsS({\n                securityEnabledOnly: securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Check for membership in a specified list of groups, and returns from that list those groups of which the specified user, group, or directory object is a member. \n     * This function is transitive.\n     * @param groupIds A collection that contains the object IDs of the groups in which to check membership. Up to 20 groups may be specified.\n     */\n    public checkMemberGroups(groupIds: String[]): Promise<{ value: string[] }> {\n        return this.clone(User, \"checkMemberGroups\").postCore({\n            body: jsS({\n                groupIds: groupIds,\n            }),\n        });\n    }\n    /**\n    * The Contact Folders associated with the user\n    */\n    public get contactFolders(): ContactFolders {\n        return new ContactFolders(this);\n    }\n\n    /**\n    * The default Drive associated with the user\n    */\n    public get drive(): Drive {\n        return new Drive(this);\n    }\n\n    /**\n    * The Drives the user has available\n    */\n    public get drives(): Drives {\n        return new Drives(this);\n    }\n\n    /**\n    * The Tasks the user has available\n    */\n    public get tasks(): Tasks {\n        return new Tasks(this, \"planner/tasks\");\n    }\n\n    /**\n     * Get the messages in the signed-in user's mailbox\n     */\n    public get messages(): Messages {\n        return new Messages(this);\n    }\n\n    /**\n     * Get the MailboxSettings in the signed-in user's mailbox\n     */\n    public get mailboxSettings(): MailboxSettings {\n        return new MailboxSettings(this);\n    }\n\n    /**\n     * Get the MailboxSettings in the signed-in user's mailbox\n     */\n    public get mailFolders(): MailFolders {\n        return new MailFolders(this);\n    }\n\n    /**\n     * Updates this user\n     * \n     * @param properties Properties used to update this user\n     */\n    public update(properties: IUser): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Deletes this user\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Send the message specified in the request body. The message is saved in the Sent Items folder by default.\n     */\n    public sendMail(message: IMessage): Promise<void> {\n\n        return this.clone(User, \"sendMail\").postCore({\n            body: jsS(message),\n        });\n    }\n}\n","import { ODataBatch, ODataBatchRequestInfo } from \"@pnp/odata\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { extend, jsS, isUrlAbsolute } from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"./config/graphlibconfig\";\nimport { GraphHttpClient } from \"./net/graphhttpclient\";\n\ninterface GraphBatchRequestFragment {\n    id: string;\n    method: string;\n    url: string;\n    headers?: string[][] | {\n        [key: string]: string;\n    };\n    body?: any;\n}\n\ninterface GraphBatchRequest {\n    requests: GraphBatchRequestFragment[];\n}\n\ninterface GraphBatchResponseFragment {\n    id: string;\n    status: number;\n    statusText?: string;\n    method: string;\n    url: string;\n    headers?: string[][] | {\n        [key: string]: string;\n    };\n    body?: any;\n}\n\ninterface GraphBatchResponse {\n    responses: GraphBatchResponseFragment[];\n    nextLink?: string;\n}\n\nexport class GraphBatch extends ODataBatch {\n\n    constructor(private batchUrl = \"https://graph.microsoft.com/v1.0/$batch\", private maxRequests = 20) {\n        super();\n    }\n\n    /**\n     * Urls come to the batch absolute, but the processor expects relative\n     * @param url Url to ensure is relative\n     */\n    private static makeUrlRelative(url: string): string {\n\n        if (!isUrlAbsolute(url)) {\n            // already not absolute, just give it back\n            return url;\n        }\n\n        let index = url.indexOf(\".com/v1.0/\");\n\n        if (index < 0) {\n\n            index = url.indexOf(\".com/beta/\");\n\n            if (index > -1) {\n\n                // beta url\n                return url.substr(index + 10);\n            }\n\n        } else {\n            // v1.0 url\n            return url.substr(index + 9);\n        }\n\n        // no idea\n        return url;\n    }\n\n    private static formatRequests(requests: ODataBatchRequestInfo[]): GraphBatchRequestFragment[] {\n\n        return requests.map((reqInfo, index) => {\n\n            let requestFragment: GraphBatchRequestFragment = {\n                id: `${++index}`,\n                method: reqInfo.method,\n                url: this.makeUrlRelative(reqInfo.url),\n            };\n\n            let headers = {};\n\n            // merge global config headers\n            if (GraphRuntimeConfig.headers !== undefined && GraphRuntimeConfig.headers !== null) {\n\n                headers = extend(headers, GraphRuntimeConfig.headers);\n            }\n\n            if (reqInfo.options !== undefined) {\n\n                // merge per request headers\n                if (reqInfo.options.headers !== undefined && reqInfo.options.headers !== null) {\n                    headers = extend(headers, reqInfo.options.headers);\n                }\n\n                // add a request body\n                if (reqInfo.options.body !== undefined && reqInfo.options.body !== null) {\n\n                    requestFragment = extend(requestFragment, {\n                        body: reqInfo.options.body,\n                    });\n                }\n            }\n\n            requestFragment = extend(requestFragment, {\n                headers: headers,\n            });\n\n            return requestFragment;\n        });\n    }\n\n    private static parseResponse(requests: ODataBatchRequestInfo[], graphResponse: GraphBatchResponse): Promise<{ nextLink: string, responses: Response[] }> {\n\n        return new Promise((resolve) => {\n\n            const parsedResponses: Response[] = new Array(requests.length).fill(null);\n\n            for (let i = 0; i < graphResponse.responses.length; ++i) {\n\n                const response = graphResponse.responses[i];\n                // we create the request id by adding 1 to the index, so we place the response by subtracting one to match\n                // the array of requests and make it easier to map them by index\n                const responseId = parseInt(response.id, 10) - 1;\n\n                if (response.status === 204) {\n\n                    parsedResponses[responseId] = new Response();\n                } else {\n\n                    parsedResponses[responseId] = new Response(JSON.stringify(response.body), response);\n                }\n            }\n\n            resolve({\n                nextLink: graphResponse.nextLink,\n                responses: parsedResponses,\n            });\n        });\n    }\n\n    protected executeImpl(): Promise<void> {\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, LogLevel.Info);\n\n        if (this.requests.length < 1) {\n            Logger.write(`Resolving empty batch.`, LogLevel.Info);\n            return Promise.resolve();\n        }\n\n        const client = new GraphHttpClient();\n\n        // create a working copy of our requests\n        const requests = this.requests.slice();\n\n        // this is the root of our promise chain\n        const promise = Promise.resolve();\n\n        while (requests.length > 0) {\n\n            const requestsChunk = requests.splice(0, this.maxRequests);\n\n            const batchRequest: GraphBatchRequest = {\n                requests: GraphBatch.formatRequests(requestsChunk),\n            };\n\n            const batchOptions = {\n                body: jsS(batchRequest),\n                headers: {\n                    \"Accept\": \"application/json\",\n                    \"Content-Type\": \"application/json\",\n                },\n                method: \"POST\",\n            };\n\n            Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, LogLevel.Info);\n\n            client.fetch(this.batchUrl, batchOptions)\n                .then(r => r.json())\n                .then((j) => GraphBatch.parseResponse(requestsChunk, j))\n                .then((parsedResponse: { nextLink: string, responses: Response[] }) => {\n\n                    Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, LogLevel.Info);\n\n                    parsedResponse.responses.reduce((chain, response, index) => {\n\n                        const request = requestsChunk[index];\n\n                        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched request ${request.method} ${request.url}.`, LogLevel.Verbose);\n\n                        return chain.then(_ => request.parser.parse(response).then(request.resolve).catch(request.reject));\n\n                    }, promise);\n                });\n        }\n\n        return promise;\n    }\n}\n","import { jsS, TypedHash, extend } from \"@pnp/common\";\nimport { GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { Invitation as IInvitation } from \"@microsoft/microsoft-graph-types\";\n\n// Should not be able to use the invitations.get()\nexport interface IInvitationsMethods {\n    create(invitedUserEmailAddress: string, inviteRedirectUrl: string, additionalProperties: TypedHash<any>): Promise<InvitationAddResult>;\n}\n\n@defaultPath(\"invitations\")\nexport class Invitations extends GraphQueryableCollection<IInvitation[]> {\n\n    /**\n     * Create a new Invitation via invitation manager.\n     * \n     * @param invitedUserEmailAddress The email address of the user being invited.\n     * @param inviteRedirectUrl The URL user should be redirected to once the invitation is redeemed.\n     * @param additionalProperties A plain object collection of additional properties you want to set in the invitation\n     */\n    public create(invitedUserEmailAddress: string, inviteRedirectUrl: string, additionalProperties: TypedHash<any> = {}): Promise<InvitationAddResult> {\n\n        const postBody = extend({\n            inviteRedirectUrl: inviteRedirectUrl,\n            invitedUserEmailAddress: invitedUserEmailAddress,\n        }, additionalProperties);\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n            };\n        });\n    }\n\n}\n\nexport interface InvitationAddResult {\n    data: IInvitation;\n}\n","import { GraphQueryable } from \"./graphqueryable\";\nimport {\n    setup as _setup,\n    GraphConfiguration,\n} from \"./config/graphlibconfig\";\n\nimport { Groups } from \"./groups\";\nimport { Teams } from \"./teams\";\nimport { Users, User } from \"./users\";\nimport { Planner, IPlannerMethods } from \"./planner\";\nimport { GraphBatch } from \"./batch\";\nimport { DirectoryObjects } from \"./directoryobjects\";\nimport { Invitations, IInvitationsMethods } from \"./invitations\";\n\nexport class GraphRest extends GraphQueryable {\n\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    public get directoryObjects(): DirectoryObjects {\n        return new DirectoryObjects(this);\n    }\n\n    public get groups(): Groups {\n        return new Groups(this);\n    }\n\n    public get teams(): Teams {\n        return new Teams(this);\n    }\n\n    public get me(): User {\n        return new User(this, \"me\");\n    }\n\n    public get planner(): IPlannerMethods {\n        return new Planner(this);\n    }\n\n    public get users(): Users {\n        return new Users(this);\n    }\n\n    public get invitations(): IInvitationsMethods {\n        return new Invitations(this);\n    }\n\n    public createBatch(): GraphBatch {\n        return new GraphBatch();\n    }\n\n    public setup(config: GraphConfiguration) {\n        _setup(config);\n    }\n}\n\nexport let graph = new GraphRest(\"v1.0\");\n"],"names":["RuntimeConfig","AdalClient","mergeHeaders","extend","getCtxCallback","tslib_1.__extends","combine","isUrlAbsolute","getGUID","ODataQueryable","jsS","BlobParser","BufferParser","GroupType","ODataDefaultParser","DirectoryObjectType","Logger","ODataBatch","_setup"],"mappings":"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"}