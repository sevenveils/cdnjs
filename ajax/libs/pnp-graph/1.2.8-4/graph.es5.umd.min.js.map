{"version":3,"file":"graph.es5.umd.min.js","sources":["../../../../node_modules/tslib/tslib.es6.js","../../../../packages/graph/src/config/graphlibconfig.ts","../../../../packages/graph/src/net/graphhttpclient.ts","../../../../packages/graph/src/types.ts","../../../../packages/graph/src/graphqueryable.ts","../../../../packages/graph/src/members.ts","../../../../packages/graph/src/groups.ts","../../../../packages/graph/src/calendars.ts","../../../../packages/graph/src/attachments.ts","../../../../packages/graph/src/conversations.ts","../../../../packages/graph/src/planner.ts","../../../../packages/graph/src/photos.ts","../../../../packages/graph/src/teams.ts","../../../../packages/graph/src/directoryobjects.ts","../../../../packages/graph/src/contacts.ts","../../../../packages/graph/src/onenote.ts","../../../../packages/graph/src/onedrive.ts","../../../../packages/graph/src/messages.ts","../../../../packages/graph/src/users.ts","../../../../packages/graph/src/batch.ts","../../../../packages/graph/src/invitations.ts","../../../../packages/graph/src/rest.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { LibraryConfiguration, TypedHash, RuntimeConfig, HttpClientImpl, AdalClient } from \"@pnp/common\";\n\nexport interface GraphConfigurationPart {\n    graph?: {\n        /**\n         * Any headers to apply to all requests\n         */\n        headers?: TypedHash<string>;\n\n        /**\n         * Defines a factory method used to create fetch clients\n         */\n        fetchClientFactory?: () => HttpClientImpl;\n    };\n}\n\nexport interface GraphConfiguration extends LibraryConfiguration, GraphConfigurationPart { }\n\nexport function setup(config: GraphConfiguration): void {\n    RuntimeConfig.extend(config);\n}\n\nexport class GraphRuntimeConfigImpl {\n\n    public get headers(): TypedHash<string> {\n\n        const graphPart = RuntimeConfig.get(\"graph\");\n        if (graphPart !== undefined && graphPart !== null && graphPart.headers !== undefined) {\n            return graphPart.headers;\n        }\n\n        return {};\n    }\n\n    public get fetchClientFactory(): () => HttpClientImpl {\n\n        const graphPart = RuntimeConfig.get(\"graph\");\n        // use a configured factory firt\n        if (graphPart !== undefined && graphPart !== null && graphPart.fetchClientFactory !== undefined) {\n            return graphPart.fetchClientFactory;\n        }\n\n        // then try and use spfx context if available\n        if (RuntimeConfig.spfxContext !== undefined) {\n            return () => AdalClient.fromSPFxContext(RuntimeConfig.spfxContext);\n        }\n\n        throw Error(\"There is no Graph Client available, either set one using configuraiton or provide a valid SPFx Context using setup.\");\n    }\n}\n\nexport let GraphRuntimeConfig = new GraphRuntimeConfigImpl();\n","import {\n    extend,\n    RequestClient,\n    mergeHeaders,\n    FetchOptions,\n    HttpClientImpl,\n    getCtxCallback,\n} from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"../config/graphlibconfig\";\n\nexport class GraphHttpClient implements RequestClient {\n\n    private _impl: HttpClientImpl;\n\n    constructor() {\n\n        this._impl = GraphRuntimeConfig.fetchClientFactory();\n    }\n\n    public fetch(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        const headers = new Headers();\n\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\n        mergeHeaders(headers, GraphRuntimeConfig.headers);\n\n        // second we add the local options so we can overwrite the globals\n        mergeHeaders(headers, options.headers);\n\n        if (!headers.has(\"Content-Type\")) {\n            headers.append(\"Content-Type\", \"application/json\");\n        }\n\n        const opts = extend(options, { headers: headers });\n\n        return this.fetchRaw(url, opts);\n    }\n\n    public fetchRaw(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        // here we need to normalize the headers\n        const rawHeaders = new Headers();\n        mergeHeaders(rawHeaders, options.headers);\n        options = extend(options, { headers: rawHeaders });\n\n        const retry = (ctx: RetryContext): void => {\n\n            this._impl.fetch(url, options).then((response) => ctx.resolve(response)).catch((response) => {\n\n                // Check if request was throttled - http status code 429\n                // Check if request failed due to server unavailable - http status code 503\n                if (response.status !== 429 && response.status !== 503) {\n                    ctx.reject(response);\n                }\n\n                // grab our current delay\n                const delay = ctx.delay;\n\n                // Increment our counters.\n                ctx.delay *= 2;\n                ctx.attempts++;\n\n                // If we have exceeded the retry count, reject.\n                if (ctx.retryCount <= ctx.attempts) {\n                    ctx.reject(response);\n                }\n\n                // Set our retry timeout for {delay} milliseconds.\n                setTimeout(getCtxCallback(this, retry, ctx), delay);\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n\n            const retryContext: RetryContext = {\n                attempts: 0,\n                delay: 100,\n                reject: reject,\n                resolve: resolve,\n                retryCount: 7,\n            };\n\n            retry.call(this, retryContext);\n        });\n    }\n\n    public get(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"GET\" });\n        return this.fetch(url, opts);\n    }\n\n    public post(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"POST\" });\n        return this.fetch(url, opts);\n    }\n\n    public patch(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"PATCH\" });\n        return this.fetch(url, opts);\n    }\n\n    public delete(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"DELETE\" });\n        return this.fetch(url, opts);\n    }\n}\n\ninterface RetryContext {\n    attempts: number;\n    delay: number;\n    reject: (reason?: any) => void;\n    resolve: (value?: Response | PromiseLike<Response>) => void;\n    retryCount: number;\n}\n","export class GraphEndpoints {\n\n    public static Beta = \"beta\";\n    public static V1 = \"v1.0\";\n\n    /**\n     * \n     * @param url The url to set the endpoint \n     */\n    public static ensure(url: string, endpoint: string): string {\n        const all = [GraphEndpoints.Beta, GraphEndpoints.V1];\n        let regex = new RegExp(endpoint, \"i\");\n        const replaces = all.filter(s => !regex.test(s)).map(s => s.replace(\".\", \"\\\\.\"));\n        regex = new RegExp(`/?(${replaces.join(\"|\")})/`, \"ig\");\n        return url.replace(regex, `/${endpoint}/`);\n    }\n}\n\n/**\n * Defines the properties for a Team\n * \n * TODO:: remove this once typings are present in graph types package\n */\nexport interface TeamProperties {\n\n    memberSettings?: {\n        \"allowCreateUpdateChannels\"?: boolean;\n        \"allowDeleteChannels\"?: boolean;\n        \"allowAddRemoveApps\"?: boolean;\n        \"allowCreateUpdateRemoveTabs\"?: boolean;\n        \"allowCreateUpdateRemoveConnectors\"?: boolean;\n    };\n\n    guestSettings?: {\n        \"allowCreateUpdateChannels\"?: boolean;\n        \"allowDeleteChannels\"?: boolean;\n    };\n\n    messagingSettings?: {\n        \"allowUserEditMessages\"?: boolean;\n        \"allowUserDeleteMessages\"?: boolean;\n        \"allowOwnerDeleteMessages\"?: boolean;\n        \"allowTeamMentions\"?: boolean;\n        \"allowChannelMentions\"?: boolean;\n    };\n\n    funSettings?: {\n        \"allowGiphy\"?: boolean;\n        \"giphyContentRating\"?: \"strict\" | string,\n        \"allowStickersAndMemes\"?: boolean;\n        \"allowCustomMemes\"?: boolean;\n    };\n}\n\nexport interface TabsConfiguration {\n\n    configuration: {\n        \"entityId\": string;\n        \"contentUrl\": string;\n        \"websiteUrl\": string;\n        \"removeUrl\": string;\n\n    };\n}\n","import {\n    combine,\n    extend,\n    isUrlAbsolute,\n    FetchOptions,\n    getGUID,\n} from \"@pnp/common\";\nimport {\n    ODataParser,\n    ODataQueryable,\n    RequestContext,\n} from \"@pnp/odata\";\nimport { GraphHttpClient } from \"./net/graphhttpclient\";\nimport { GraphBatch } from \"./batch\";\nimport { GraphEndpoints } from \"./types\";\n\nexport interface GraphQueryableConstructor<T> {\n    new(baseUrl: string | GraphQueryable, path?: string): T;\n}\n\n/**\n * Queryable Base Class\n *\n */\nexport class GraphQueryable<GetType = any> extends ODataQueryable<GraphBatch, GetType> {\n\n    /**\n     * Creates a new instance of the Queryable class\n     *\n     * @constructor\n     * @param baseUrl A string or Queryable that should form the base part of the url\n     *\n     */\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super();\n\n        if (typeof baseUrl === \"string\") {\n\n            const urlStr = baseUrl as string;\n            this._parentUrl = urlStr;\n            this._url = combine(urlStr, path);\n        } else {\n            this.extend(baseUrl as GraphQueryable, path);\n        }\n    }\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this.query.set(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this.query.set(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Creates a new instance of the supplied factory and extends this into that new instance\n     *\n     * @param factory constructor for the new queryable\n     */\n    public as<T>(factory: GraphQueryableConstructor<T>): T {\n        const o = <T>new factory(this._url, null);\n        return extend(o, this, true);\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public toUrlAndQuery(): string {\n\n        let url = this.toUrl();\n\n        if (!isUrlAbsolute(url)) {\n            url = combine(\"https://graph.microsoft.com\", url);\n        }\n\n        if (this.query.size > 0) {\n            const char = url.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n            url += `${char}${Array.from(this.query).map((v: [string, string]) => v[0] + \"=\" + v[1]).join(\"&\")}`;\n        }\n\n        return url;\n    }\n\n    /**\n     * Gets a parent for this instance as specified\n     *\n     * @param factory The contructor for the class to create\n     */\n    protected getParent<T extends GraphQueryable>(\n        factory: GraphQueryableConstructor<T>,\n        baseUrl: string | GraphQueryable = this.parentUrl,\n        path?: string): T {\n\n        return new factory(baseUrl, path);\n    }\n\n    /**\n     * Clones this queryable into a new queryable instance of T\n     * @param factory Constructor used to create the new instance\n     * @param additionalPath Any additional path to include in the clone\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\n     */\n    protected clone<T extends GraphQueryable>(factory: GraphQueryableConstructor<T>, additionalPath?: string, includeBatch = true): T {\n\n        return <T>super._clone(new factory(this, additionalPath), { includeBatch });\n    }\n\n    protected setEndpoint(endpoint: string): this {\n\n        this._url = GraphEndpoints.ensure(this._url, endpoint);\n        return this;\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected toRequestContext<T>(\n        verb: string,\n        options: FetchOptions = {},\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>): Promise<RequestContext<T>> {\n\n        const dependencyDispose = this.hasBatch ? this._batchDependency : () => { return; };\n\n        return Promise.resolve({\n            batch: this.batch,\n            batchDependency: dependencyDispose,\n            cachingOptions: this._cachingOptions,\n            clientFactory: () => new GraphHttpClient(),\n            isBatched: this.hasBatch,\n            isCached: /^get$/i.test(verb) && this._useCaching,\n            options: options,\n            parser: parser,\n            pipeline: pipeline,\n            requestAbsoluteUrl: this.toUrlAndQuery(),\n            requestId: getGUID(),\n            verb: verb,\n        });\n    }\n}\n\n/**\n * Represents a REST collection which can be filtered, paged, and selected\n *\n */\nexport class GraphQueryableCollection<GetType = any[]> extends GraphQueryable<GetType> {\n\n    /**\n     *\n     * @param filter The string representing the filter query\n     */\n    public filter(filter: string): this {\n        this.query.set(\"$filter\", filter);\n        return this;\n    }\n\n    /**\n     * Orders based on the supplied fields\n     *\n     * @param orderby The name of the field on which to sort\n     * @param ascending If false DESC is appended, otherwise ASC (default)\n     */\n    public orderBy(orderBy: string, ascending = true): this {\n        const o = \"$orderby\";\n        const query = this.query.has(o) ? this.query.get(o).split(\",\") : [];\n        query.push(`${orderBy} ${ascending ? \"asc\" : \"desc\"}`);\n        this.query.set(o, query.join(\",\"));\n        return this;\n    }\n\n    /**\n     * Limits the query to only return the specified number of items\n     *\n     * @param top The query row limit\n     */\n    public top(top: number): this {\n        this.query.set(\"$top\", top.toString());\n        return this;\n    }\n\n    /**\n     * Skips a set number of items in the return set\n     *\n     * @param num Number of items to skip\n     */\n    public skip(num: number): this {\n        this.query.set(\"$skip\", num.toString());\n        return this;\n    }\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public skipToken(token: string): this {\n        this.query.set(\"$skiptoken\", token);\n        return this;\n    }\n\n    /**\n     * \tRetrieves the total count of matching resources\n     */\n    public get count(): this {\n        this.query.set(\"$count\", \"true\");\n        return this;\n    }\n}\n\nexport class GraphQueryableSearchableCollection extends GraphQueryableCollection {\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public search(query: string): this {\n        this.query.set(\"$search\", query);\n        return this;\n    }\n}\n\n/**\n * Represents an instance that can be selected\n *\n */\nexport class GraphQueryableInstance<GetType = any> extends GraphQueryable<GetType> { }\n\n/**\n * Decorator used to specify the default path for Queryable objects\n * \n * @param path \n */\nexport function defaultPath(path: string) {\n\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\n\n        return class extends target {\n            constructor(...args: any[]) {\n                super(args[0], args.length > 1 && args[1] !== undefined ? args[1] : path);\n            }\n        };\n    };\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS } from \"@pnp/common\";\nimport { User as IMember } from \"@microsoft/microsoft-graph-types\";\n\n@defaultPath(\"members\")\nexport class Members extends GraphQueryableCollection<IMember[]> {\n\n    /**\n     * Use this API to add a member to an Office 365 group, a security group or a mail-enabled security group through\n     * the members navigation property. You can add users or other groups.\n     * Important: You can add only users to Office 365 groups.\n     * \n     * @param id Full @odata.id of the directoryObject, user, or group object you want to add (ex: https://graph.microsoft.com/v1.0/directoryObjects/${id})\n     */\n    public add(id: string): Promise<any> {\n\n        return this.clone(Members, \"$ref\").postCore({\n            body: jsS({\n                \"@odata.id\": id,\n            }),\n        });\n    }\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Member {\n        return new Member(this, id);\n    }\n}\n\nexport class Member extends GraphQueryableInstance<IMember> { }\n\n@defaultPath(\"owners\")\nexport class Owners extends Members { }\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { Members, Owners } from \"./members\";\nimport { extend, TypedHash, jsS } from \"@pnp/common\";\nimport { Calendar, Events } from \"./calendars\";\nimport { Conversations, Senders } from \"./conversations\";\nimport { Event as IEvent, Group as IGroup } from \"@microsoft/microsoft-graph-types\";\nimport { Plans } from \"./planner\";\nimport { Photo } from \"./photos\";\nimport { Team } from \"./teams\";\nimport { TeamProperties } from \"./types\";\n\nexport enum GroupType {\n    /**\n     * Office 365 (aka unified group)\n     */\n    Office365,\n    /**\n     * Dynamic membership\n     */\n    Dynamic,\n    /**\n     * Security\n     */\n    Security,\n}\n\n/**\n * Describes a collection of Field objects\n *\n */\n@defaultPath(\"groups\")\nexport class Groups extends GraphQueryableCollection<IGroup[]> {\n\n    /**\n     * Gets a group from the collection using the specified id\n     * \n     * @param id Id of the group to get from this collection\n     */\n    public getById(id: string): Group {\n        return new Group(this, id);\n    }\n\n    /**\n     * Create a new group as specified in the request body.\n     * \n     * @param name Name to display in the address book for the group\n     * @param mailNickname Mail alias for the group\n     * @param groupType Type of group being created\n     * @param additionalProperties A plain object collection of additional properties you want to set on the new group\n     */\n    public add(name: string, mailNickname: string, groupType: GroupType, additionalProperties: TypedHash<any> = {}): Promise<GroupAddResult> {\n\n        let postBody = extend({\n            displayName: name,\n            mailEnabled: groupType === GroupType.Office365,\n            mailNickname: mailNickname,\n            securityEnabled: groupType !== GroupType.Office365,\n        }, additionalProperties);\n\n        // include a group type if required\n        if (groupType !== GroupType.Security) {\n\n            postBody = extend(postBody, {\n                groupTypes: groupType === GroupType.Office365 ? [\"Unified\"] : [\"DynamicMembership\"],\n            });\n        }\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                group: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Represents a group entity\n */\nexport class Group extends GraphQueryableInstance<IGroup> {\n\n    /**\n     * The calendar associated with this group\n     */\n    public get calendar(): Calendar {\n        return new Calendar(this, \"calendar\");\n    }\n\n    /**\n     * Retrieve a list of event objects\n     */\n    public get events(): Events {\n        return new Events(this);\n    }\n\n    /**\n     * Gets the collection of owners for this group\n     */\n    public get owners(): Owners {\n        return new Owners(this);\n    }\n\n    /**\n     * The collection of plans for this group\n     */\n    public get plans(): Plans {\n        return new Plans(this, \"planner/plans\");\n    }\n\n    /**\n     * Gets the collection of members for this group\n     */\n    public get members(): Members {\n        return new Members(this);\n    }\n\n    /**\n     * Gets the conversations collection for this group\n     */\n    public get conversations(): Conversations {\n        return new Conversations(this);\n    }\n\n    /**\n     * Gets the collection of accepted senders for this group\n     */\n    public get acceptedSenders(): Senders {\n        return new Senders(this, \"acceptedsenders\");\n    }\n\n    /**\n     * Gets the collection of rejected senders for this group\n     */\n    public get rejectedSenders(): Senders {\n        return new Senders(this, \"rejectedsenders\");\n    }\n\n    /**\n     * The photo associated with the group\n     */\n    public get photo(): Photo {\n        return new Photo(this);\n    }\n\n    /**\n     * Gets the team associated with this group, if it exists\n     */\n    public get team(): Team {\n        return new Team(this);\n    }\n\n    /**\n     * Add the group to the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public addFavorite(): Promise<void> {\n        return this.clone(Group, \"addFavorite\").postCore();\n    }\n\n    /**\n     * Creates a Microsoft Team associated with this group\n     * \n     * @param properties Initial properties for the new Team\n     */\n    public createTeam(properties: TeamProperties): Promise<any> {\n\n        return this.clone(Group, \"team\").putCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Returns all the groups and directory roles that the specified group is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberObjects(securityEnabledOnly = false): Promise<{ value: string[] }> {\n        return this.clone(Group, \"getMemberObjects\").postCore({\n            body: jsS({\n                securityEnabledOnly: securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Return all the groups that the specified group is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberGroups(securityEnabledOnly = false): Promise<{ value: string[] }> {\n\n        return this.clone(Group, \"getMemberGroups\").postCore({\n            body: jsS({\n                securityEnabledOnly: securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Check for membership in a specified list of groups, and returns from that list those groups of which the specified user, group, or directory object is a member. \n     * This function is transitive.\n     * @param groupIds A collection that contains the object IDs of the groups in which to check membership. Up to 20 groups may be specified.\n     */\n    public checkMemberGroups(groupIds: String[]): Promise<{ value: string[] }> {\n        return this.clone(Group, \"checkMemberGroups\").postCore({\n            body: jsS({\n                groupIds: groupIds,\n            }),\n        });\n    }\n\n    /**\n     * Deletes this group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a group object\n     * \n     * @param properties Set of properties of this group to update\n     */\n    public update(properties: IGroup): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Remove the group from the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public removeFavorite(): Promise<void> {\n\n        return this.clone(Group, \"removeFavorite\").postCore();\n    }\n\n    /**\n     * Reset the unseenCount of all the posts that the current user has not seen since their last visit\n     */\n    public resetUnseenCount(): Promise<void> {\n        return this.clone(Group, \"resetUnseenCount\").postCore();\n    }\n\n    /**\n     * Calling this method will enable the current user to receive email notifications for this group,\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public subscribeByMail(): Promise<void> {\n        return this.clone(Group, \"subscribeByMail\").postCore();\n    }\n\n    /**\n     * Calling this method will prevent the current user from receiving email notifications for this group\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public unsubscribeByMail(): Promise<void> {\n        return this.clone(Group, \"unsubscribeByMail\").postCore();\n    }\n\n    /**\n     * Get the occurrences, exceptions, and single instances of events in a calendar view defined by a time range, from the default calendar of a group\n     * \n     * @param start Start date and time of the time range\n     * @param end End date and time of the time range\n     */\n    public getCalendarView(start: Date, end: Date): Promise<IEvent[]> {\n\n        const view = this.clone(Group, \"calendarView\");\n        view.query.set(\"startDateTime\", start.toISOString());\n        view.query.set(\"endDateTime\", end.toISOString());\n        return view.get();\n    }\n}\n\nexport interface GroupAddResult {\n    group: Group;\n    data: any;\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { TypedHash, jsS } from \"@pnp/common\";\nimport { Event as IEvent, Calendar as ICalendar } from \"@microsoft/microsoft-graph-types\";\n// import { Attachments } from \"./attachments\";\n\n@defaultPath(\"calendars\")\nexport class Calendars extends GraphQueryableCollection<ICalendar[]> {}\n\nexport class Calendar extends GraphQueryableInstance<ICalendar> {\n\n    public get events(): Events {\n        return new Events(this);\n    }\n}\n\n@defaultPath(\"events\")\nexport class Events extends GraphQueryableCollection<IEvent[]> {\n\n    public getById(id: string): Event {\n        return new Event(this, id);\n    }\n\n    /**\n     * Adds a new event to the collection\n     * \n     * @param properties The set of properties used to create the event\n     */\n    public add(properties: Event): Promise<EventAddResult> {\n\n        return this.postCore({\n            body: jsS(properties),\n        }).then(r => {\n            return {\n                data: r,\n                event: this.getById(r.id),\n            };\n        });\n    }\n}\n\nexport interface EventAddResult {\n    data: IEvent;\n    event: Event;\n}\n\nexport class Event extends GraphQueryableInstance<IEvent> {\n\n    // TODO:: when supported\n    // /**\n    //  * Gets the collection of attachments for this event\n    //  */\n    // public get attachments(): Attachments {\n    //     return new Attachments(this);\n    // }\n\n    /**\n     * Update the properties of an event object\n     * \n     * @param properties Set of properties of this event to update\n     */\n    public update(properties: TypedHash<any>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Deletes this event\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { Attachment as IAttachment } from \"@microsoft/microsoft-graph-types\";\nimport { jsS } from \"@pnp/common\";\n\n@defaultPath(\"attachments\")\nexport class Attachments extends GraphQueryableCollection<IAttachment[]> {\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Attachment id\n     */\n    public getById(id: string): Attachment {\n        return new Attachment(this, id);\n    }\n\n    /**\n     * Add attachment to this collection\n     * \n     * @param name Name given to the attachment file\n     * @param bytes File content\n     */\n    public addFile(name: string, bytes: string | Blob): Promise<IAttachment> {\n\n        return this.postCore({\n            body: jsS({\n                \"@odata.type\": \"#microsoft.graph.fileAttachment\",\n                contentBytes: bytes,\n                name: name,\n            }),\n        });\n    }\n}\n\nexport class Attachment extends GraphQueryableInstance<IAttachment> {\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { TypedHash, jsS } from \"@pnp/common\";\nimport { Attachments } from \"./attachments\";\nimport {\n    ConversationThread as IConversationThread,\n    Post as IPost,\n    Recipient as IRecipient,\n    Conversation as IConversation,\n    User as IUser,\n} from \"@microsoft/microsoft-graph-types\";\n\n/**\n * Information used to forward a post\n */\nexport interface PostForwardInfo {\n    comment?: string;\n    toRecipients: IRecipient[];\n}\n\n@defaultPath(\"conversations\")\nexport class Conversations extends GraphQueryableCollection<IConversation[]> {\n\n    /**\n     * Create a new conversation by including a thread and a post.\n     * \n     * @param properties Properties used to create the new conversation\n     */\n    public add(properties: TypedHash<any>): Promise<any> {\n\n        return this.postCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Gets a conversation from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Conversation {\n        return new Conversation(this, id);\n    }\n}\n\n@defaultPath(\"threads\")\nexport class Threads extends GraphQueryableCollection<IConversationThread[]> {\n\n    /**\n     * Gets a thread from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Thread {\n        return new Thread(this, id);\n    }\n\n    /**\n     * Adds a new thread to this collection\n     * \n     * @param properties properties used to create the new thread\n     * @returns Id of the new thread\n     */\n    public add(properties: IConversationThread): Promise<{ id: string }> {\n\n        return this.postCore({\n            body: jsS(properties),\n        });\n    }\n}\n\n@defaultPath(\"posts\")\nexport class Posts extends GraphQueryableCollection<IPost[]> {\n\n    /**\n     * Gets a thread from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Post {\n        return new Post(this, id);\n    }\n\n    /**\n     * Adds a new thread to this collection\n     * \n     * @param properties properties used to create the new thread\n     * @returns Id of the new thread\n     */\n    public add(properties: IPost): Promise<{ id: string }> {\n\n        return this.postCore({\n            body: jsS(properties),\n        });\n    }\n}\n\nexport class Conversation extends GraphQueryableInstance<IConversation> {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get threads(): Threads {\n        return new Threads(this);\n    }\n\n    /**\n     * Updates this conversation\n     */\n    public update(properties: TypedHash<any>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Deletes this member from the group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport class Thread extends GraphQueryableInstance {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get posts(): Posts {\n        return new Posts(this);\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPost): Promise<void> {\n\n        return this.clone(Thread, \"reply\").postCore({\n            body: jsS({\n                post: post,\n            }),\n        });\n    }\n\n    /**\n     * Deletes this member from the group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport class Post extends GraphQueryableInstance<IPost> {\n\n    public get attachments(): Attachments {\n        return new Attachments(this);\n    }\n\n    /**\n     * Deletes this post\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Forward a post to a recipient\n     */\n    public forward(info: PostForwardInfo): Promise<void> {\n        return this.clone(Post, \"forward\").postCore({\n            body: jsS(info),\n        });\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPost): Promise<void> {\n\n        return this.clone(Post, \"reply\").postCore({\n            body: jsS({\n                post: post,\n            }),\n        });\n    }\n}\n\nexport class Senders extends GraphQueryableCollection<IUser[]> {\n\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Add a new user or group to this senders collection\n     * @param id The full @odata.id value to add (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public add(id: string): Promise<any> {\n\n        return this.clone(Senders, \"$ref\").postCore({\n            body: jsS({\n                \"@odata.id\": id,\n            }),\n        });\n    }\n\n    /**\n     * Removes the entity from the collection\n     * \n     * @param id The full @odata.id value to remove (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public remove(id: string): Promise<void> {\n\n        const remover = this.clone(Senders, \"$ref\");\n        remover.query.set(\"$id\", id);\n        return remover.deleteCore();\n    }\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS, TypedHash, extend } from \"@pnp/common\";\nimport {\n    PlannerPlan as IPlannerPlan,\n    PlannerTask as IPlannerTask,\n    PlannerBucket as IPlannerBucket,\n    Planner as IPlanner,\n    PlannerPlanDetails as IPlannerPlanDetails,\n} from \"@microsoft/microsoft-graph-types\";\n\n// Should not be able to use the planner.get()\nexport interface IPlannerMethods {\n    plans: Plans;\n    tasks: Tasks;\n    buckets: Buckets;\n}\n\n@defaultPath(\"planner\")\nexport class Planner extends GraphQueryableInstance<IPlanner> implements IPlannerMethods {\n\n    // Should Only be able to get by id, or else error occur\n    public get plans(): Plans {\n        return new Plans(this);\n    }\n\n    // Should Only be able to get by id, or else error occur\n    public get tasks(): Tasks {\n        return new Tasks(this);\n    }\n\n    // Should Only be able to get by id, or else error occur\n    public get buckets(): Buckets {\n        return new Buckets(this);\n    }\n}\n\n@defaultPath(\"plans\")\nexport class Plans extends GraphQueryableCollection<IPlannerPlan[]> {\n    public getById(id: string): Plan {\n        return new Plan(this, id);\n    }\n\n    /**\n     * Create a new Planner Plan.\n     * \n     * @param owner Id of Group object.\n     * @param title The Title of the Plan.\n     */\n    public add(owner: string, title: string): Promise<PlanAddResult> {\n\n        const postBody = {\n            owner: owner,\n            title: title,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                plan: this.getById(r.id),\n            };\n        });\n    }\n\n}\n\n/**\n * Should not be able to get by Id\n */\n\nexport class Plan extends GraphQueryableInstance<IPlannerPlan> {\n\n    public get tasks(): Tasks {\n        return new Tasks(this);\n    }\n\n    public get buckets(): Buckets {\n        return new Buckets(this);\n    }\n\n    public get details(): Details {\n        return new Details(this);\n    }\n\n    /**\n     * Deletes this Plan\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a Plan\n     * \n     * @param properties Set of properties of this Plan to update\n     */\n    public update(properties: IPlanner): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n}\n\n@defaultPath(\"tasks\")\nexport class Tasks extends GraphQueryableCollection<IPlannerTask[]> {\n    public getById(id: string): Task {\n        return new Task(this, id);\n    }\n\n    /**\n     * Create a new Planner Task.\n     * \n     * @param planId Id of Plan.\n     * @param title The Title of the Task.\n     * @param assignments Assign the task\n     * @param bucketId Id of Bucket\n     */\n    public add(planId: string, title: string, assignments?: TypedHash<any>, bucketId?: string): Promise<TaskAddResult> {\n\n        let postBody = extend({\n            planId: planId,\n            title: title,\n        }, assignments);\n\n        if (bucketId) {\n            postBody = extend(postBody, {\n                bucketId: bucketId,\n            });\n        }\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                task: this.getById(r.id),\n            };\n        });\n    }\n\n}\n\nexport class Task extends GraphQueryableInstance<IPlannerTask> {\n    /**\n     * Deletes this Task\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a Task\n     * \n     * @param properties Set of properties of this Task to update\n     */\n    public update(properties: IPlannerTask): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    public get details(): Details {\n        return new Details(this);\n    }\n}\n\n@defaultPath(\"buckets\")\nexport class Buckets extends GraphQueryableCollection<IPlannerBucket[]> {\n    /**\n     * Create a new Bucket.\n     * \n     * @param name Name of Bucket object.\n     * @param planId The Id of the Plan.\n     * @param oderHint Hint used to order items of this type in a list view.\n     */\n    public add(name: string, planId: string, orderHint?: string): Promise<BucketAddResult> {\n\n        const postBody = {\n            name: name,\n            orderHint: orderHint ? orderHint : \"\",\n            planId: planId,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                bucket: this.getById(r.id),\n                data: r,\n            };\n        });\n    }\n\n    public getById(id: string): Bucket {\n        return new Bucket(this, id);\n    }\n\n}\n\nexport class Bucket extends GraphQueryableInstance<IPlannerBucket> {\n    /**\n     * Deletes this Bucket\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a Bucket\n     * \n     * @param properties Set of properties of this Bucket to update\n     */\n    public update(properties: IPlannerBucket): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    public get tasks(): Tasks {\n        return new Tasks(this);\n    }\n}\n\n@defaultPath(\"details\")\nexport class Details extends GraphQueryableCollection<IPlannerPlanDetails> {}\n\nexport interface BucketAddResult {\n    data: IPlannerBucket;\n    bucket: Bucket;\n}\n\nexport interface PlanAddResult {\n    data: IPlannerPlan;\n    plan: Plan;\n}\n\nexport interface TaskAddResult {\n    data: IPlannerTask;\n    task: Task;\n}\n","import { GraphQueryableInstance, defaultPath } from \"./graphqueryable\";\nimport { BlobParser, BufferParser } from \"@pnp/odata\";\nimport { Photo as IPhoto } from \"@microsoft/microsoft-graph-types\";\n\n@defaultPath(\"photo\")\nexport class Photo extends GraphQueryableInstance<IPhoto> {\n\n    /**\n     * Gets the image bytes as a blob (browser)\n     */\n    public getBlob(): Promise<Blob> {\n        return this.clone(Photo, \"$value\", false).get(new BlobParser());\n    }\n\n    /**\n     * Gets the image file byets as a Buffer (node.js)\n     */\n    public getBuffer(): Promise<ArrayBuffer> {\n        return this.clone(Photo, \"$value\", false).get(new BufferParser());\n    }\n\n    /**\n     * Sets the file bytes\n     * \n     * @param content Image file contents, max 4 MB\n     */\n    public setContent(content: ArrayBuffer | Blob): Promise<void> {\n\n        return this.clone(Photo, \"$value\", false).patchCore({\n            body: content,\n        });\n    }\n}\n","import { graph } from \"./rest\";\nimport { Group, GroupType, GroupAddResult } from \"./groups\";\nimport { GraphQueryableInstance, defaultPath, GraphQueryableCollection } from \"./graphqueryable\";\nimport { TeamProperties, TabsConfiguration } from \"./types\";\nimport { ODataParser, ODataDefaultParser } from \"@pnp/odata\";\nimport { FetchOptions, jsS, extend, TypedHash } from \"@pnp/common\";\n\n@defaultPath(\"teams\")\nexport class Teams extends GraphQueryableCollection {\n\n    /**\n     * Creates a new team and associated Group with the given information\n     * @param name The name of the new Group\n     * @param description Optional description of the group\n     * @param ownerId Add an owner with a user id from the graph\n     */\n    public create(name: string, description = \"\", ownerId: string, teamProperties: TeamProperties = {}): Promise<TeamCreateResult> {\n\n        const groupProps = {\n            \"description\": description && description.length > 0 ? description : \"\",\n            \"owners@odata.bind\": [\n                `https://graph.microsoft.com/v1.0/users/${ownerId}`,\n            ],\n        };\n\n        return graph.groups.add(name, name, GroupType.Office365, groupProps).then((gar: GroupAddResult) => {\n            return gar.group.createTeam(teamProperties).then(data => {\n                return {\n                    data: data,\n                    group: gar.group,\n                    team: new Team(gar.group),\n                };\n            });\n        });\n    }\n\n    public getById(id: string): Team {\n        return new Team(this, id);\n    }\n\n}\n\n/**\n * Represents a Microsoft Team\n */\n@defaultPath(\"team\")\nexport class Team extends GraphQueryableInstance<TeamProperties> {\n\n    public get channels(): Channels {\n        return new Channels(this);\n    }\n\n    public get installedApps(): Apps {\n        return new Apps(this);\n    }\n\n    /**\n     * Updates this team instance's properties\n     * \n     * @param properties The set of properties to update\n     */\n    // TODO:: update properties to be typed once type is available in graph-types\n    public update(properties: TeamProperties): Promise<TeamUpdateResult> {\n\n        return this.clone(Team, \"\").patchCore({\n            body: jsS(properties),\n        }).then(data => {\n            return {\n                data: data,\n                team: this,\n            };\n        });\n    }\n\n    /**\n     * Archives this Team\n     * \n     * @param shouldSetSpoSiteReadOnlyForMembers Should members have Read-only in associated Team Site\n     */\n    // TODO:: update properties to be typed once type is available in graph-types\n    public archive(shouldSetSpoSiteReadOnlyForMembers?: boolean): Promise<TeamUpdateResult> {\n\n        let postBody;\n\n        if (shouldSetSpoSiteReadOnlyForMembers != null) {\n            postBody = extend(postBody, {\n                shouldSetSpoSiteReadOnlyForMembers: shouldSetSpoSiteReadOnlyForMembers,\n            });\n        }\n        return this.clone(Team, \"archive\").postCore({\n            body: jsS(postBody),\n        }).then(data => {\n            return {\n                data: data,\n                team: this,\n            };\n        });\n    }\n\n    /**\n    * Unarchives this Team\n    * \n    */\n    // TODO:: update properties to be typed once type is available in graph-types\n    public unarchive(): Promise<TeamUpdateResult> {\n\n        return this.clone(Team, \"unarchive\").postCore({\n        }).then(data => {\n            return {\n                data: data,\n                team: this,\n            };\n        });\n    }\n\n    /**\n     * Clones this Team\n     * @param name The name of the new Group\n     * @param description Optional description of the group\n     * @param partsToClone Parts to clone ex: apps,tabs,settings,channels,members\n     * @param visibility Set visibility to public or private \n     */\n    // TODO:: update properties to be typed once type is available in graph-types\n    public cloneTeam(name: string, description = \"\", partsToClone: string, visibility: string): Promise<TeamUpdateResult> {\n\n        const postBody = {\n            description: description ? description : \"\",\n            displayName: name,\n            mailNickname: name,\n            partsToClone: partsToClone,\n            visibility: visibility,\n        };\n\n        return this.clone(Team, \"clone\").postCore({\n            body: jsS(postBody),\n        }).then(data => {\n            return {\n                data: data,\n                team: this,\n            };\n        });\n    }\n\n    /**\n     * Executes the currently built request\n     *\n     * @param parser Allows you to specify a parser to handle the result\n     * @param getOptions The options used for this request\n     */\n    public get<T = TeamProperties>(parser: ODataParser<T> = new ODataDefaultParser(), options: FetchOptions = {}): Promise<T> {\n        return this.clone(Team, \"\").getCore(parser, options);\n    }\n}\n\n@defaultPath(\"channels\")\nexport class Channels extends GraphQueryableCollection {\n\n    /**\n     * Creates a new Channel in the Team\n     * @param name The display name of the new channel\n     * @param description Optional description of the channel\n     * \n     */\n    public create(name: string, description = \"\"): Promise<ChannelCreateResult> {\n\n        const postBody = {\n            description: description && description.length > 0 ? description : \"\",\n            displayName: name,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                channel: this.getById(r.id),\n                data: r,\n            };\n        });\n    }\n\n    public getById(id: string): Channel {\n        return new Channel(this, id);\n    }\n\n}\n\nexport class Channel extends GraphQueryableInstance {\n    public get tabs(): Tabs {\n        return new Tabs(this);\n    }\n}\n\n@defaultPath(\"installedApps\")\nexport class Apps extends GraphQueryableCollection {\n\n    /**\n     * Creates a new App in the Team\n     * @param appUrl The url to an app ex: https://graph.microsoft.com/beta/appCatalogs/teamsApps/12345678-9abc-def0-123456789a\n     * \n     */\n    public add(appUrl: string): Promise<any> {\n\n        const postBody = {\n            \"teamsApp@odata.bind\": appUrl,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n            };\n        });\n    }\n\n    /**\n     * Deletes this app\n     */\n    public remove(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\n@defaultPath(\"tabs\")\nexport class Tabs extends GraphQueryableCollection {\n\n    /**\n     * Adds a tab to the cahnnel\n     * @param name The name of the new Tab\n     * @param appUrl The url to an app ex: https://graph.microsoft.com/beta/appCatalogs/teamsApps/12345678-9abc-def0-123456789a\n     * @param tabsConfiguration visit https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/teamstab_add for reference\n     */\n    public add(name: string, appUrl: string, properties: TabsConfiguration): Promise<TabCreateResult> {\n\n        const postBody = extend({\n            name: name,\n            \"teamsApp@odata.bind\": appUrl,\n        }, properties);\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                tab: this.getById(r.id),\n            };\n        });\n\n    }\n\n    public getById(id: string): Tab {\n        return new Tab(this, id);\n    }\n\n}\n\n/**\n * Represents a Microsoft Team\n */\n@defaultPath(\"tab\")\nexport class Tab extends GraphQueryableInstance<TeamProperties> {\n\n    /**\n     * Updates this tab\n     * \n     * @param properties The set of properties to update\n     */\n    // TODO:: update properties to be typed once type is available in graph-types\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<TabUpdateResult> {\n\n        return this.clone(Tab, \"\").patchCore({\n            body: jsS(properties),\n        }).then(data => {\n            return {\n                data: data,\n                tab: this,\n            };\n        });\n    }\n\n    /**\n     * Deletes this tab\n     */\n    public remove(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport interface TeamUpdateResult {\n    data: any;\n    team: Team;\n}\n\nexport interface TeamCreateResult {\n    data: any;\n    group: Group;\n    team: Team;\n}\n\nexport interface ChannelCreateResult {\n    data: any;\n    channel: Channel;\n}\n\nexport interface TabCreateResult {\n    data: any;\n    tab: Tab;\n}\n\nexport interface TabUpdateResult {\n    data: any;\n    tab: Tab;\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS } from \"@pnp/common\";\nimport { DirectoryObject as IDirectoryObject } from \"@microsoft/microsoft-graph-types\";\n\nexport enum DirectoryObjectType {\n    /**\n     * Directory Objects\n     */\n    directoryObject,\n    /**\n     * User\n     */\n    user,\n    /**\n     * Group\n     */\n    group,\n    /**\n     * Device\n     */\n    device,\n}\n\n/**\n * Describes a collection of Directory Objects\n *\n */\n@defaultPath(\"directoryObjects\")\nexport class DirectoryObjects extends GraphQueryableCollection<IDirectoryObject[]> {\n\n    /**\n     * Gets a directoryObject from the collection using the specified id\n     * \n     * @param id Id of the Directory Object to get from this collection\n     */\n    public getById(id: string): DirectoryObject {\n        return new DirectoryObject(this, id);\n    }\n\n    /**\n    * Returns the directory objects specified in a list of ids. NOTE: The directory objects returned are the full objects containing all their properties. \n    * The $select query option is not available for this operation.\n    * \n    * @param ids A collection of ids for which to return objects. You can specify up to 1000 ids.\n    * @param type A collection of resource types that specifies the set of resource collections to search. Default is directoryObject.\n    */\n    public getByIds(ids: string[], type: DirectoryObjectType = DirectoryObjectType.directoryObject): Promise<DirectoryObject[]> {\n        return this.clone(DirectoryObjects, \"getByIds\").postCore({\n            body: jsS({\n                ids,\n                type,\n            }),\n        });\n    }\n}\n\n/**\n * Represents a Directory Object entity\n */\nexport class DirectoryObject extends GraphQueryableInstance<IDirectoryObject> {\n\n    /**\n     * Deletes this group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Returns all the groups and directory roles that the specified Directory Object is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberObjects(securityEnabledOnly = false): Promise<{ value: string[] }> {\n        return this.clone(DirectoryObject, \"getMemberObjects\").postCore({\n            body: jsS({\n                securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Returns all the groups that the specified Directory Object is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberGroups(securityEnabledOnly = false): Promise<{ value: string[] }> {\n\n        return this.clone(DirectoryObject, \"getMemberGroups\").postCore({\n            body: jsS({\n                securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Check for membership in a specified list of groups, and returns from that list those groups of which the specified user, group, or directory object is a member. \n     * This function is transitive.\n     * @param groupIds A collection that contains the object IDs of the groups in which to check membership. Up to 20 groups may be specified.\n     */\n    public checkMemberGroups(groupIds: String[]): Promise<{ value: string[] }> {\n        return this.clone(DirectoryObject, \"checkMemberGroups\").postCore({\n            body: jsS({\n                groupIds,\n            }),\n        });\n    }\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS, TypedHash, extend } from \"@pnp/common\";\nimport {\n    Contact as IContact,\n    ContactFolder as IContactFolder,\n    EmailAddress,\n} from \"@microsoft/microsoft-graph-types\";\n\n@defaultPath(\"contacts\")\nexport class Contacts extends GraphQueryableCollection<IContact[]> {\n\n    public getById(id: string): Contact {\n        return new Contact(this, id);\n    }\n\n    /**\n    * Create a new Contact for the user.\n    * \n    * @param givenName The contact's given name.\n    * @param surName The contact's surname.\n    * @param emailAddresses The contact's email addresses.\n    * @param businessPhones The contact's business phone numbers.\n    * @param additionalProperties A plain object collection of additional properties you want to set on the new contact\n    */\n    public add(givenName: string, surName: string, emailAddresses: EmailAddress[], businessPhones: string[], additionalProperties: TypedHash<any> = {}): Promise<ContactAddResult> {\n\n        const postBody = extend({\n            businessPhones: businessPhones,\n            emailAddresses: emailAddresses,\n            givenName: givenName,\n            surName: surName,\n        }, additionalProperties);\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                contact: this.getById(r.id),\n                data: r,\n            };\n        });\n    }\n}\n\nexport class Contact extends GraphQueryableInstance<IContact> {\n    /**\n     * Deletes this contact\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a contact object\n     * \n     * @param properties Set of properties of this contact to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n}\n\n@defaultPath(\"contactFolders\")\nexport class ContactFolders extends GraphQueryableCollection<IContactFolder[]> {\n\n    public getById(id: string): ContactFolder {\n        return new ContactFolder(this, id);\n    }\n\n    /**\n     * Create a new Contact Folder for the user.\n     * \n     * @param displayName The folder's display name.\n     * @param parentFolderId The ID of the folder's parent folder.\n     */\n    public add(displayName: string, parentFolderId?: string): Promise<ContactFolderAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n            parentFolderId: parentFolderId,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                contactFolder: this.getById(r.id),\n                data: r,\n            };\n        });\n    }\n}\n\nexport class ContactFolder extends GraphQueryableInstance<IContactFolder> {\n    /**\n     * Gets the contacts in this contact folder\n     */\n    public get contacts(): Contacts {\n        return new Contacts(this);\n    }\n\n    /**\n    * Gets the contacts in this contact folder\n    */\n    public get childFolders(): ContactFolders {\n        return new ContactFolders(this, \"childFolders\");\n    }\n\n    /**\n     * Deletes this contact folder\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a contact folder\n     * \n     * @param properties Set of properties of this contact folder to update\n     */\n    public update(properties: IContactFolder): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n}\n\nexport interface ContactFolderAddResult {\n    data: IContactFolder;\n    contactFolder: ContactFolder;\n}\n\nexport interface ContactAddResult {\n    data: IContact;\n    contact: Contact;\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS } from \"@pnp/common\";\nimport { Notebook as INotebook, Onenote as IOnenote, OnenoteSection as ISection } from \"@microsoft/microsoft-graph-types\";\n\nexport interface OneNoteMethods {\n    notebooks: Notebooks;\n    sections: Sections;\n    pages: Pages;\n}\n\n/**\n * Represents a onenote entity\n */\n@defaultPath(\"onenote\")\nexport class OneNote extends GraphQueryableInstance<IOnenote> implements OneNoteMethods {\n\n    public get notebooks(): Notebooks {\n        return new Notebooks(this);\n    }\n\n    public get sections(): Sections {\n        return new Sections(this);\n    }\n\n    public get pages(): Pages {\n        return new Pages(this);\n    }\n}\n\n/**\n * Describes a collection of Notebook objects\n *\n */\n@defaultPath(\"notebooks\")\nexport class Notebooks extends GraphQueryableCollection<INotebook[]> {\n\n    /**\n     * Gets a notebook instance by id\n     * \n     * @param id Notebook id\n     */\n    public getById(id: string): Notebook {\n        return new Notebook(this, id);\n    }\n\n    /**\n     * Create a new notebook as specified in the request body.\n     * \n     * @param displayName Notebook display name\n     */\n    public add(displayName: string): Promise<NotebookAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                notebook: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Describes a notebook instance\n *\n */\nexport class Notebook extends GraphQueryableInstance<INotebook> {\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    public get sections(): Sections {\n        return new Sections(this);\n    }\n}\n\n/**\n * Describes a collection of Sections objects\n *\n */\n@defaultPath(\"sections\")\nexport class Sections extends GraphQueryableCollection<ISection[]> {\n\n    /**\n     * Gets a section instance by id\n     * \n     * @param id Section id\n     */\n    public getById(id: string): Section {\n        return new Section(this, id);\n    }\n\n    /**\n     * Adds a new section\n     * \n     * @param displayName New section display name\n     */\n    public add(displayName: string): Promise<SectionAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                section: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Describes a sections instance\n *\n */\nexport class Section extends GraphQueryableInstance<ISection> {\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n}\n\n/**\n * Describes a collection of Pages objects\n *\n */\n@defaultPath(\"pages\")\nexport class Pages extends GraphQueryableCollection { }\n\nexport interface NotebookAddResult {\n    data: any;\n    notebook: Notebook;\n}\n\nexport interface SectionAddResult {\n    data: any;\n    section: Section;\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { DriveItem as IDriveItem, Drive as IDrive } from \"@microsoft/microsoft-graph-types\";\nimport { jsS, TypedHash, extend } from \"@pnp/common\";\n\nexport interface IDriveItemsMethods {\n    getById(id: string): DriveItem;\n}\n\n/**\n * Describes a collection of Drive objects\n *\n */\n@defaultPath(\"drives\")\nexport class Drives extends GraphQueryableCollection<IDrive[]> {\n\n    /**\n     * Gets a Drive instance by id\n     * \n     * @param id Drive id\n     */\n    public getById(id: string): Drive {\n        return new Drive(this, id);\n    }\n}\n\n/**\n * Describes a Drive instance\n *\n */\n@defaultPath(\"drive\")\nexport class Drive extends GraphQueryableInstance<IDrive> {\n\n    public get root(): Root {\n        return new Root(this);\n    }\n\n    public get items(): IDriveItemsMethods {\n        return new DriveItems(this);\n    }\n\n    public get list(): DriveList {\n        return new DriveList(this);\n    }\n\n    public get recent(): Recent {\n        return new Recent(this);\n    }\n\n    public get sharedWithMe(): SharedWithMe {\n        return new SharedWithMe(this);\n    }\n\n}\n\n/**\n * Describes a Root instance\n *\n */\n@defaultPath(\"root\")\nexport class Root extends GraphQueryableInstance<IDrive> {\n\n    public get children(): Children {\n        return new Children(this);\n    }\n\n    public search(query: string): DriveSearch {\n        return new DriveSearch(this, `search(q='${query}')`);\n    }\n}\n\n/**\n * Describes a collection of Drive Item objects\n *\n */\n@defaultPath(\"items\")\nexport class DriveItems extends GraphQueryableCollection implements IDriveItemsMethods {\n    /**\n     * Gets a Drive Item instance by id\n     * \n     * @param id Drive Item id\n     */\n    public getById(id: string): DriveItem {\n        return new DriveItem(this, id);\n    }\n}\n\n/**\n * Describes a Drive Item instance\n *\n */\nexport class DriveItem extends GraphQueryableInstance<IDriveItem> {\n\n    public get children(): Children {\n        return new Children(this);\n    }\n\n    public get thumbnails(): Thumbnails {\n        return new Thumbnails(this);\n    }\n\n    /**\n     * Deletes this Drive Item\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a Drive item\n     * \n     * @param properties Set of properties of this Drive Item to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Move the Drive item and optionally update the properties\n     * \n     * @param parentReference Should contain Id of new parent folder\n     * @param properties Optional set of properties of this Drive Item to update\n     */\n    public move(parentReference: TypedHash<any>, properties?: TypedHash<string | number | boolean | string[]>): Promise<void> {\n        let patchBody = extend({\n        }, parentReference);\n\n        if (properties) {\n            patchBody = extend({\n            }, properties);\n        }\n\n        return this.patchCore({\n            body: jsS(patchBody),\n        });\n    }\n}\n\n/**\n * Return a collection of DriveItems in the children relationship of a DriveItem\n *\n */\n@defaultPath(\"children\")\nexport class Children extends GraphQueryableCollection {\n    /**\n    * Create a new folder or DriveItem in a Drive with a specified parent item or path\n    * Currently only Folder or File works\n    * @param name The name of the Drive Item.\n    * @param properties Type of Drive Item to create.\n    * */\n    public add(name: string, driveItemType: IDriveItem): Promise<IDriveItemAddResult> {\n\n        const postBody = extend({\n            name: name,\n        }, driveItemType);\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                driveItem: new DriveItem(this, r.id),\n            };\n        });\n    }\n}\n\n@defaultPath(\"list\")\nexport class DriveList extends GraphQueryableCollection { }\n\n@defaultPath(\"recent\")\nexport class Recent extends GraphQueryableInstance { }\n\n@defaultPath(\"sharedWithMe\")\nexport class SharedWithMe extends GraphQueryableInstance { }\n\n@defaultPath(\"search\")\nexport class DriveSearch extends GraphQueryableInstance { }\n\n@defaultPath(\"thumbnails\")\nexport class Thumbnails extends GraphQueryableInstance { }\n\nexport interface IDriveItemAddResult {\n    data: IDriveItem;\n    driveItem: DriveItem;\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport {\n    Message as IMessage,\n    MailFolder as IMailFolder,\n    MailboxSettings as IMailboxSettings,\n} from \"@microsoft/microsoft-graph-types\";\nimport { jsS } from \"@pnp/common\";\n\n@defaultPath(\"messages\")\nexport class Messages extends GraphQueryableCollection<IMessage[]> {\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Attachment id\n     */\n    public getById(id: string): Message {\n        return new Message(this, id);\n    }\n\n    /**\n     * Add a message to this collection\n     * \n     * @param message The message details\n     */\n    public add(message: IMessage): Promise<IMessage> {\n\n        return this.postCore({\n            body: jsS(message),\n        });\n    }\n}\n\nexport class Message extends GraphQueryableInstance<IMessage> { }\n\n@defaultPath(\"mailFolders\")\nexport class MailFolders extends GraphQueryableCollection<IMailFolder[]> {\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Attachment id\n     */\n    public getById(id: string): MailFolder {\n        return new MailFolder(this, id);\n    }\n\n    /**\n     * Add a mail folder to this collection\n     * \n     * @param message The message details\n     */\n    public add(mailFolder: IMailFolder): Promise<IMailFolder> {\n\n        return this.postCore({\n            body: jsS(mailFolder),\n        });\n    }\n}\n\nexport class MailFolder extends GraphQueryableInstance<IMailFolder> { }\n\n@defaultPath(\"mailboxSettings\")\nexport class MailboxSettings extends GraphQueryableInstance<IMailboxSettings> {\n\n    public update(settings: IMailboxSettings): Promise<void> {\n        return this.patchCore({\n            body: jsS(settings),\n        });\n    }\n}\n","import { jsS } from \"@pnp/common\";\nimport { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { Contacts, ContactFolders } from \"./contacts\";\nimport { OneNote, OneNoteMethods } from \"./onenote\";\nimport { Drive, Drives } from \"./onedrive\";\nimport { Tasks } from \"./planner\";\nimport { Teams } from \"./teams\";\nimport {\n    User as IUser,\n    Message as IMessage,\n} from \"@microsoft/microsoft-graph-types\";\nimport { Messages, MailboxSettings, MailFolders } from \"./messages\";\nimport { DirectoryObjects } from \"./directoryobjects\";\n\n/**\n * Describes a collection of Users objects\n *\n */\n@defaultPath(\"users\")\nexport class Users extends GraphQueryableCollection<IUser[]> {\n    /**\n     * Gets a user from the collection using the specified id\n     * \n     * @param id Id of the user to get from this collection\n     */\n    public getById(id: string): User {\n        return new User(this, id);\n    }\n}\n\n/**\n * Represents a user entity\n */\nexport class User extends GraphQueryableInstance<IUser> {\n    /**\n    * The onenote associated with me\n    */\n    public get onenote(): OneNoteMethods {\n        return new OneNote(this);\n    }\n\n    /**\n    * The Contacts associated with the user\n    */\n    public get contacts(): Contacts {\n        return new Contacts(this);\n    }\n    /**\n    * The Teams associated with the user\n    */\n    public get joinedTeams(): Teams {\n        return new Teams(this, \"joinedTeams\");\n    }\n\n    /**\n    * The groups and directory roles associated with the user\n    */\n    public get memberOf(): DirectoryObjects {\n        return new DirectoryObjects(this, \"memberOf\");\n    }\n\n    /**\n     * Returns all the groups and directory roles that the specified useris a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberObjects(securityEnabledOnly = false): Promise<{ value: string[] }> {\n        return this.clone(User, \"getMemberObjects\").postCore({\n            body: jsS({\n                securityEnabledOnly: securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Return all the groups that the specified user is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberGroups(securityEnabledOnly = false): Promise<{ value: string[] }> {\n\n        return this.clone(User, \"getMemberGroups\").postCore({\n            body: jsS({\n                securityEnabledOnly: securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Check for membership in a specified list of groups, and returns from that list those groups of which the specified user, group, or directory object is a member. \n     * This function is transitive.\n     * @param groupIds A collection that contains the object IDs of the groups in which to check membership. Up to 20 groups may be specified.\n     */\n    public checkMemberGroups(groupIds: String[]): Promise<{ value: string[] }> {\n        return this.clone(User, \"checkMemberGroups\").postCore({\n            body: jsS({\n                groupIds: groupIds,\n            }),\n        });\n    }\n    /**\n    * The Contact Folders associated with the user\n    */\n    public get contactFolders(): ContactFolders {\n        return new ContactFolders(this);\n    }\n\n    /**\n    * The default Drive associated with the user\n    */\n    public get drive(): Drive {\n        return new Drive(this);\n    }\n\n    /**\n    * The Drives the user has available\n    */\n    public get drives(): Drives {\n        return new Drives(this);\n    }\n\n    /**\n    * The Tasks the user has available\n    */\n    public get tasks(): Tasks {\n        return new Tasks(this, \"planner/tasks\");\n    }\n\n    /**\n     * Get the messages in the signed-in user's mailbox\n     */\n    public get messages(): Messages {\n        return new Messages(this);\n    }\n\n    /**\n     * Get the MailboxSettings in the signed-in user's mailbox\n     */\n    public get mailboxSettings(): MailboxSettings {\n        return new MailboxSettings(this);\n    }\n\n    /**\n     * Get the MailboxSettings in the signed-in user's mailbox\n     */\n    public get mailFolders(): MailFolders {\n        return new MailFolders(this);\n    }\n\n    /**\n     * Updates this user\n     * \n     * @param properties Properties used to update this user\n     */\n    public update(properties: IUser): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Deletes this user\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Send the message specified in the request body. The message is saved in the Sent Items folder by default.\n     */\n    public sendMail(message: IMessage): Promise<void> {\n\n        return this.clone(User, \"sendMail\").postCore({\n            body: jsS(message),\n        });\n    }\n}\n","import { ODataBatch, ODataBatchRequestInfo } from \"@pnp/odata\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { extend, jsS, isUrlAbsolute } from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"./config/graphlibconfig\";\nimport { GraphHttpClient } from \"./net/graphhttpclient\";\n\ninterface GraphBatchRequestFragment {\n    id: string;\n    method: string;\n    url: string;\n    headers?: string[][] | {\n        [key: string]: string;\n    };\n    body?: any;\n}\n\ninterface GraphBatchRequest {\n    requests: GraphBatchRequestFragment[];\n}\n\ninterface GraphBatchResponseFragment {\n    id: string;\n    status: number;\n    statusText?: string;\n    method: string;\n    url: string;\n    headers?: string[][] | {\n        [key: string]: string;\n    };\n    body?: any;\n}\n\ninterface GraphBatchResponse {\n    responses: GraphBatchResponseFragment[];\n    nextLink?: string;\n}\n\nexport class GraphBatch extends ODataBatch {\n\n    constructor(private batchUrl = \"https://graph.microsoft.com/v1.0/$batch\", private maxRequests = 20) {\n        super();\n    }\n\n    /**\n     * Urls come to the batch absolute, but the processor expects relative\n     * @param url Url to ensure is relative\n     */\n    private static makeUrlRelative(url: string): string {\n\n        if (!isUrlAbsolute(url)) {\n            // already not absolute, just give it back\n            return url;\n        }\n\n        let index = url.indexOf(\".com/v1.0/\");\n\n        if (index < 0) {\n\n            index = url.indexOf(\".com/beta/\");\n\n            if (index > -1) {\n\n                // beta url\n                return url.substr(index + 10);\n            }\n\n        } else {\n            // v1.0 url\n            return url.substr(index + 9);\n        }\n\n        // no idea\n        return url;\n    }\n\n    private static formatRequests(requests: ODataBatchRequestInfo[]): GraphBatchRequestFragment[] {\n\n        return requests.map((reqInfo, index) => {\n\n            let requestFragment: GraphBatchRequestFragment = {\n                id: `${++index}`,\n                method: reqInfo.method,\n                url: this.makeUrlRelative(reqInfo.url),\n            };\n\n            let headers = {};\n\n            // merge global config headers\n            if (GraphRuntimeConfig.headers !== undefined && GraphRuntimeConfig.headers !== null) {\n\n                headers = extend(headers, GraphRuntimeConfig.headers);\n            }\n\n            if (reqInfo.options !== undefined) {\n\n                // merge per request headers\n                if (reqInfo.options.headers !== undefined && reqInfo.options.headers !== null) {\n                    headers = extend(headers, reqInfo.options.headers);\n                }\n\n                // add a request body\n                if (reqInfo.options.body !== undefined && reqInfo.options.body !== null) {\n\n                    requestFragment = extend(requestFragment, {\n                        body: reqInfo.options.body,\n                    });\n                }\n            }\n\n            requestFragment = extend(requestFragment, {\n                headers: headers,\n            });\n\n            return requestFragment;\n        });\n    }\n\n    private static parseResponse(requests: ODataBatchRequestInfo[], graphResponse: GraphBatchResponse): Promise<{ nextLink: string, responses: Response[] }> {\n\n        return new Promise((resolve) => {\n\n            const parsedResponses: Response[] = new Array(requests.length).fill(null);\n\n            for (let i = 0; i < graphResponse.responses.length; ++i) {\n\n                const response = graphResponse.responses[i];\n                // we create the request id by adding 1 to the index, so we place the response by subtracting one to match\n                // the array of requests and make it easier to map them by index\n                const responseId = parseInt(response.id, 10) - 1;\n\n                if (response.status === 204) {\n\n                    parsedResponses[responseId] = new Response();\n                } else {\n\n                    parsedResponses[responseId] = new Response(JSON.stringify(response.body), response);\n                }\n            }\n\n            resolve({\n                nextLink: graphResponse.nextLink,\n                responses: parsedResponses,\n            });\n        });\n    }\n\n    protected executeImpl(): Promise<void> {\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, LogLevel.Info);\n\n        if (this.requests.length < 1) {\n            Logger.write(`Resolving empty batch.`, LogLevel.Info);\n            return Promise.resolve();\n        }\n\n        const client = new GraphHttpClient();\n\n        // create a working copy of our requests\n        const requests = this.requests.slice();\n\n        // this is the root of our promise chain\n        const promise = Promise.resolve();\n\n        while (requests.length > 0) {\n\n            const requestsChunk = requests.splice(0, this.maxRequests);\n\n            const batchRequest: GraphBatchRequest = {\n                requests: GraphBatch.formatRequests(requestsChunk),\n            };\n\n            const batchOptions = {\n                body: jsS(batchRequest),\n                headers: {\n                    \"Accept\": \"application/json\",\n                    \"Content-Type\": \"application/json\",\n                },\n                method: \"POST\",\n            };\n\n            Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, LogLevel.Info);\n\n            client.fetch(this.batchUrl, batchOptions)\n                .then(r => r.json())\n                .then((j) => GraphBatch.parseResponse(requestsChunk, j))\n                .then((parsedResponse: { nextLink: string, responses: Response[] }) => {\n\n                    Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, LogLevel.Info);\n\n                    parsedResponse.responses.reduce((chain, response, index) => {\n\n                        const request = requestsChunk[index];\n\n                        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched request ${request.method} ${request.url}.`, LogLevel.Verbose);\n\n                        return chain.then(_ => request.parser.parse(response).then(request.resolve).catch(request.reject));\n\n                    }, promise);\n                });\n        }\n\n        return promise;\n    }\n}\n","import { jsS, TypedHash, extend } from \"@pnp/common\";\nimport { GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { Invitation as IInvitation } from \"@microsoft/microsoft-graph-types\";\n\n// Should not be able to use the invitations.get()\nexport interface IInvitationsMethods {\n    create(invitedUserEmailAddress: string, inviteRedirectUrl: string, additionalProperties: TypedHash<any>): Promise<InvitationAddResult>;\n}\n\n@defaultPath(\"invitations\")\nexport class Invitations extends GraphQueryableCollection<IInvitation[]> {\n\n    /**\n     * Create a new Invitation via invitation manager.\n     * \n     * @param invitedUserEmailAddress The email address of the user being invited.\n     * @param inviteRedirectUrl The URL user should be redirected to once the invitation is redeemed.\n     * @param additionalProperties A plain object collection of additional properties you want to set in the invitation\n     */\n    public create(invitedUserEmailAddress: string, inviteRedirectUrl: string, additionalProperties: TypedHash<any> = {}): Promise<InvitationAddResult> {\n\n        const postBody = extend({\n            inviteRedirectUrl: inviteRedirectUrl,\n            invitedUserEmailAddress: invitedUserEmailAddress,\n        }, additionalProperties);\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n            };\n        });\n    }\n\n}\n\nexport interface InvitationAddResult {\n    data: IInvitation;\n}\n","import { GraphQueryable } from \"./graphqueryable\";\nimport {\n    setup as _setup,\n    GraphConfiguration,\n} from \"./config/graphlibconfig\";\n\nimport { Groups } from \"./groups\";\nimport { Teams } from \"./teams\";\nimport { Users, User } from \"./users\";\nimport { Planner, IPlannerMethods } from \"./planner\";\nimport { GraphBatch } from \"./batch\";\nimport { DirectoryObjects } from \"./directoryobjects\";\nimport { Invitations, IInvitationsMethods } from \"./invitations\";\n\nexport class GraphRest extends GraphQueryable {\n\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    public get directoryObjects(): DirectoryObjects {\n        return new DirectoryObjects(this);\n    }\n\n    public get groups(): Groups {\n        return new Groups(this);\n    }\n\n    public get teams(): Teams {\n        return new Teams(this);\n    }\n\n    public get me(): User {\n        return new User(this, \"me\");\n    }\n\n    public get planner(): IPlannerMethods {\n        return new Planner(this);\n    }\n\n    public get users(): Users {\n        return new Users(this);\n    }\n\n    public get invitations(): IInvitationsMethods {\n        return new Invitations(this);\n    }\n\n    public createBatch(): GraphBatch {\n        return new GraphBatch();\n    }\n\n    public setup(config: GraphConfiguration) {\n        _setup(config);\n    }\n}\n\nexport let graph = new GraphRest(\"v1.0\");\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","GraphRuntimeConfig","GraphRuntimeConfigImpl","graphPart","RuntimeConfig","get","undefined","headers","fetchClientFactory","spfxContext","AdalClient","fromSPFxContext","Error","_impl","GraphHttpClient","url","options","Headers","mergeHeaders","has","append","opts","extend","fetchRaw","rawHeaders","retry","ctx","_this","fetch","then","response","resolve","catch","status","reject","delay","attempts","retryCount","setTimeout","getCtxCallback","Promise","retryContext","call","method","GraphEndpoints","endpoint","all","Beta","V1","regex","RegExp","replaces","filter","s","test","map","replace","join","baseUrl","path","_super","urlStr","_parentUrl","_url","combine","tslib_1.__extends","GraphQueryable","_i","selects","query","set","expands","factory","o","toUrl","isUrlAbsolute","size","char","indexOf","from","v","parentUrl","additionalPath","includeBatch","_clone","ensure","verb","parser","pipeline","dependencyDispose","hasBatch","_batchDependency","batch","batchDependency","cachingOptions","_cachingOptions","clientFactory","isBatched","isCached","_useCaching","requestAbsoluteUrl","toUrlAndQuery","requestId","getGUID","ODataQueryable","GraphQueryableCollection","orderBy","ascending","split","push","top","toString","num","token","GraphQueryableSearchableCollection","defaultPath","args","GroupType","Members","id","clone","Members_1","postCore","body","jsS","@odata.id","Member","GraphQueryableInstance","Owners","Calendars","Calendar","Events","Event","properties","data","event","getById","patchCore","deleteCore","Attachments","Attachment","name","bytes","@odata.type","contentBytes","Conversations","Conversation","Threads","Thread","Posts","Post","post","info","Senders","remover","Planner","Plans","Tasks","Buckets","Plan","owner","title","postBody","plan","Details","Task","planId","assignments","bucketId","task","orderHint","bucket","Bucket","Photo","Photo_1","BlobParser","BufferParser","content","Teams","description","ownerId","teamProperties","groupProps","owners@odata.bind","graph","groups","add","Office365","gar","group","createTeam","team","Team","Channels","Apps","Team_1","shouldSetSpoSiteReadOnlyForMembers","partsToClone","visibility","displayName","mailNickname","ODataDefaultParser","getCore","channel","Channel","Tabs","appUrl","teamsApp@odata.bind","tab","Tab","Tab_1","DirectoryObjectType","Groups","Group","groupType","additionalProperties","mailEnabled","securityEnabled","Security","groupTypes","putCore","securityEnabledOnly","groupIds","start","end","view","toISOString","Contacts","Contact","givenName","surName","emailAddresses","businessPhones","contact","ContactFolders","ContactFolder","parentFolderId","contactFolder","OneNote","Notebooks","Sections","Pages","Notebook","notebook","Section","section","Drives","Drive","Root","DriveItems","DriveList","Recent","SharedWithMe","Children","DriveSearch","DriveItem","Thumbnails","parentReference","patchBody","driveItemType","driveItem","Messages","Message","message","MailFolders","MailFolder","mailFolder","MailboxSettings","settings","DirectoryObjects","DirectoryObject","ids","type","directoryObject","DirectoryObjects_1","Users","User","batchUrl","maxRequests","GraphBatch","index","substr","requests","reqInfo","requestFragment","makeUrlRelative","graphResponse","parsedResponses","fill","responses","responseId","parseInt","Response","JSON","stringify","nextLink","Logger","write","batchId","Date","getTime","client","slice","promise","requestsChunk","splice","this_1","batchRequest","formatRequests","batchOptions","Accept","Content-Type","json","j","parseResponse","parsedResponse","reduce","chain","request","_","parse","ODataBatch","Invitations","invitedUserEmailAddress","inviteRedirectUrl","GraphRest","config"],"mappings":"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"}