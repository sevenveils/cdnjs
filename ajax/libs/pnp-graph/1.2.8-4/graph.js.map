{"version":3,"file":"graph.js","sources":["../../../../packages/graph/src/config/graphlibconfig.ts","../../../../packages/graph/src/net/graphhttpclient.ts","../../../../packages/graph/src/types.ts","../../../../packages/graph/src/graphqueryable.ts","../../../../node_modules/tslib/tslib.es6.js","../../../../packages/graph/src/members.ts","../../../../packages/graph/src/calendars.ts","../../../../packages/graph/src/attachments.ts","../../../../packages/graph/src/conversations.ts","../../../../packages/graph/src/planner.ts","../../../../packages/graph/src/photos.ts","../../../../packages/graph/src/teams.ts","../../../../packages/graph/src/groups.ts","../../../../packages/graph/src/contacts.ts","../../../../packages/graph/src/onenote.ts","../../../../packages/graph/src/onedrive.ts","../../../../packages/graph/src/messages.ts","../../../../packages/graph/src/directoryobjects.ts","../../../../packages/graph/src/users.ts","../../../../packages/graph/src/batch.ts","../../../../packages/graph/src/invitations.ts","../../../../packages/graph/src/rest.ts"],"sourcesContent":["import { LibraryConfiguration, TypedHash, RuntimeConfig, HttpClientImpl, AdalClient } from \"@pnp/common\";\n\nexport interface GraphConfigurationPart {\n    graph?: {\n        /**\n         * Any headers to apply to all requests\n         */\n        headers?: TypedHash<string>;\n\n        /**\n         * Defines a factory method used to create fetch clients\n         */\n        fetchClientFactory?: () => HttpClientImpl;\n    };\n}\n\nexport interface GraphConfiguration extends LibraryConfiguration, GraphConfigurationPart { }\n\nexport function setup(config: GraphConfiguration): void {\n    RuntimeConfig.extend(config);\n}\n\nexport class GraphRuntimeConfigImpl {\n\n    public get headers(): TypedHash<string> {\n\n        const graphPart = RuntimeConfig.get(\"graph\");\n        if (graphPart !== undefined && graphPart !== null && graphPart.headers !== undefined) {\n            return graphPart.headers;\n        }\n\n        return {};\n    }\n\n    public get fetchClientFactory(): () => HttpClientImpl {\n\n        const graphPart = RuntimeConfig.get(\"graph\");\n        // use a configured factory firt\n        if (graphPart !== undefined && graphPart !== null && graphPart.fetchClientFactory !== undefined) {\n            return graphPart.fetchClientFactory;\n        }\n\n        // then try and use spfx context if available\n        if (RuntimeConfig.spfxContext !== undefined) {\n            return () => AdalClient.fromSPFxContext(RuntimeConfig.spfxContext);\n        }\n\n        throw Error(\"There is no Graph Client available, either set one using configuraiton or provide a valid SPFx Context using setup.\");\n    }\n}\n\nexport let GraphRuntimeConfig = new GraphRuntimeConfigImpl();\n","import {\n    extend,\n    RequestClient,\n    mergeHeaders,\n    FetchOptions,\n    HttpClientImpl,\n    getCtxCallback,\n} from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"../config/graphlibconfig\";\n\nexport class GraphHttpClient implements RequestClient {\n\n    private _impl: HttpClientImpl;\n\n    constructor() {\n\n        this._impl = GraphRuntimeConfig.fetchClientFactory();\n    }\n\n    public fetch(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        const headers = new Headers();\n\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\n        mergeHeaders(headers, GraphRuntimeConfig.headers);\n\n        // second we add the local options so we can overwrite the globals\n        mergeHeaders(headers, options.headers);\n\n        if (!headers.has(\"Content-Type\")) {\n            headers.append(\"Content-Type\", \"application/json\");\n        }\n\n        const opts = extend(options, { headers: headers });\n\n        return this.fetchRaw(url, opts);\n    }\n\n    public fetchRaw(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        // here we need to normalize the headers\n        const rawHeaders = new Headers();\n        mergeHeaders(rawHeaders, options.headers);\n        options = extend(options, { headers: rawHeaders });\n\n        const retry = (ctx: RetryContext): void => {\n\n            this._impl.fetch(url, options).then((response) => ctx.resolve(response)).catch((response) => {\n\n                // Check if request was throttled - http status code 429\n                // Check if request failed due to server unavailable - http status code 503\n                if (response.status !== 429 && response.status !== 503) {\n                    ctx.reject(response);\n                }\n\n                // grab our current delay\n                const delay = ctx.delay;\n\n                // Increment our counters.\n                ctx.delay *= 2;\n                ctx.attempts++;\n\n                // If we have exceeded the retry count, reject.\n                if (ctx.retryCount <= ctx.attempts) {\n                    ctx.reject(response);\n                }\n\n                // Set our retry timeout for {delay} milliseconds.\n                setTimeout(getCtxCallback(this, retry, ctx), delay);\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n\n            const retryContext: RetryContext = {\n                attempts: 0,\n                delay: 100,\n                reject: reject,\n                resolve: resolve,\n                retryCount: 7,\n            };\n\n            retry.call(this, retryContext);\n        });\n    }\n\n    public get(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"GET\" });\n        return this.fetch(url, opts);\n    }\n\n    public post(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"POST\" });\n        return this.fetch(url, opts);\n    }\n\n    public patch(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"PATCH\" });\n        return this.fetch(url, opts);\n    }\n\n    public delete(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"DELETE\" });\n        return this.fetch(url, opts);\n    }\n}\n\ninterface RetryContext {\n    attempts: number;\n    delay: number;\n    reject: (reason?: any) => void;\n    resolve: (value?: Response | PromiseLike<Response>) => void;\n    retryCount: number;\n}\n","export class GraphEndpoints {\n\n    public static Beta = \"beta\";\n    public static V1 = \"v1.0\";\n\n    /**\n     * \n     * @param url The url to set the endpoint \n     */\n    public static ensure(url: string, endpoint: string): string {\n        const all = [GraphEndpoints.Beta, GraphEndpoints.V1];\n        let regex = new RegExp(endpoint, \"i\");\n        const replaces = all.filter(s => !regex.test(s)).map(s => s.replace(\".\", \"\\\\.\"));\n        regex = new RegExp(`/?(${replaces.join(\"|\")})/`, \"ig\");\n        return url.replace(regex, `/${endpoint}/`);\n    }\n}\n\n/**\n * Defines the properties for a Team\n * \n * TODO:: remove this once typings are present in graph types package\n */\nexport interface TeamProperties {\n\n    memberSettings?: {\n        \"allowCreateUpdateChannels\"?: boolean;\n        \"allowDeleteChannels\"?: boolean;\n        \"allowAddRemoveApps\"?: boolean;\n        \"allowCreateUpdateRemoveTabs\"?: boolean;\n        \"allowCreateUpdateRemoveConnectors\"?: boolean;\n    };\n\n    guestSettings?: {\n        \"allowCreateUpdateChannels\"?: boolean;\n        \"allowDeleteChannels\"?: boolean;\n    };\n\n    messagingSettings?: {\n        \"allowUserEditMessages\"?: boolean;\n        \"allowUserDeleteMessages\"?: boolean;\n        \"allowOwnerDeleteMessages\"?: boolean;\n        \"allowTeamMentions\"?: boolean;\n        \"allowChannelMentions\"?: boolean;\n    };\n\n    funSettings?: {\n        \"allowGiphy\"?: boolean;\n        \"giphyContentRating\"?: \"strict\" | string,\n        \"allowStickersAndMemes\"?: boolean;\n        \"allowCustomMemes\"?: boolean;\n    };\n}\n\nexport interface TabsConfiguration {\n\n    configuration: {\n        \"entityId\": string;\n        \"contentUrl\": string;\n        \"websiteUrl\": string;\n        \"removeUrl\": string;\n\n    };\n}\n","import {\n    combine,\n    extend,\n    isUrlAbsolute,\n    FetchOptions,\n    getGUID,\n} from \"@pnp/common\";\nimport {\n    ODataParser,\n    ODataQueryable,\n    RequestContext,\n} from \"@pnp/odata\";\nimport { GraphHttpClient } from \"./net/graphhttpclient\";\nimport { GraphBatch } from \"./batch\";\nimport { GraphEndpoints } from \"./types\";\n\nexport interface GraphQueryableConstructor<T> {\n    new(baseUrl: string | GraphQueryable, path?: string): T;\n}\n\n/**\n * Queryable Base Class\n *\n */\nexport class GraphQueryable<GetType = any> extends ODataQueryable<GraphBatch, GetType> {\n\n    /**\n     * Creates a new instance of the Queryable class\n     *\n     * @constructor\n     * @param baseUrl A string or Queryable that should form the base part of the url\n     *\n     */\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super();\n\n        if (typeof baseUrl === \"string\") {\n\n            const urlStr = baseUrl as string;\n            this._parentUrl = urlStr;\n            this._url = combine(urlStr, path);\n        } else {\n            this.extend(baseUrl as GraphQueryable, path);\n        }\n    }\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this.query.set(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this.query.set(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Creates a new instance of the supplied factory and extends this into that new instance\n     *\n     * @param factory constructor for the new queryable\n     */\n    public as<T>(factory: GraphQueryableConstructor<T>): T {\n        const o = <T>new factory(this._url, null);\n        return extend(o, this, true);\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public toUrlAndQuery(): string {\n\n        let url = this.toUrl();\n\n        if (!isUrlAbsolute(url)) {\n            url = combine(\"https://graph.microsoft.com\", url);\n        }\n\n        if (this.query.size > 0) {\n            const char = url.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n            url += `${char}${Array.from(this.query).map((v: [string, string]) => v[0] + \"=\" + v[1]).join(\"&\")}`;\n        }\n\n        return url;\n    }\n\n    /**\n     * Gets a parent for this instance as specified\n     *\n     * @param factory The contructor for the class to create\n     */\n    protected getParent<T extends GraphQueryable>(\n        factory: GraphQueryableConstructor<T>,\n        baseUrl: string | GraphQueryable = this.parentUrl,\n        path?: string): T {\n\n        return new factory(baseUrl, path);\n    }\n\n    /**\n     * Clones this queryable into a new queryable instance of T\n     * @param factory Constructor used to create the new instance\n     * @param additionalPath Any additional path to include in the clone\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\n     */\n    protected clone<T extends GraphQueryable>(factory: GraphQueryableConstructor<T>, additionalPath?: string, includeBatch = true): T {\n\n        return <T>super._clone(new factory(this, additionalPath), { includeBatch });\n    }\n\n    protected setEndpoint(endpoint: string): this {\n\n        this._url = GraphEndpoints.ensure(this._url, endpoint);\n        return this;\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected toRequestContext<T>(\n        verb: string,\n        options: FetchOptions = {},\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>): Promise<RequestContext<T>> {\n\n        const dependencyDispose = this.hasBatch ? this._batchDependency : () => { return; };\n\n        return Promise.resolve({\n            batch: this.batch,\n            batchDependency: dependencyDispose,\n            cachingOptions: this._cachingOptions,\n            clientFactory: () => new GraphHttpClient(),\n            isBatched: this.hasBatch,\n            isCached: /^get$/i.test(verb) && this._useCaching,\n            options: options,\n            parser: parser,\n            pipeline: pipeline,\n            requestAbsoluteUrl: this.toUrlAndQuery(),\n            requestId: getGUID(),\n            verb: verb,\n        });\n    }\n}\n\n/**\n * Represents a REST collection which can be filtered, paged, and selected\n *\n */\nexport class GraphQueryableCollection<GetType = any[]> extends GraphQueryable<GetType> {\n\n    /**\n     *\n     * @param filter The string representing the filter query\n     */\n    public filter(filter: string): this {\n        this.query.set(\"$filter\", filter);\n        return this;\n    }\n\n    /**\n     * Orders based on the supplied fields\n     *\n     * @param orderby The name of the field on which to sort\n     * @param ascending If false DESC is appended, otherwise ASC (default)\n     */\n    public orderBy(orderBy: string, ascending = true): this {\n        const o = \"$orderby\";\n        const query = this.query.has(o) ? this.query.get(o).split(\",\") : [];\n        query.push(`${orderBy} ${ascending ? \"asc\" : \"desc\"}`);\n        this.query.set(o, query.join(\",\"));\n        return this;\n    }\n\n    /**\n     * Limits the query to only return the specified number of items\n     *\n     * @param top The query row limit\n     */\n    public top(top: number): this {\n        this.query.set(\"$top\", top.toString());\n        return this;\n    }\n\n    /**\n     * Skips a set number of items in the return set\n     *\n     * @param num Number of items to skip\n     */\n    public skip(num: number): this {\n        this.query.set(\"$skip\", num.toString());\n        return this;\n    }\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public skipToken(token: string): this {\n        this.query.set(\"$skiptoken\", token);\n        return this;\n    }\n\n    /**\n     * \tRetrieves the total count of matching resources\n     */\n    public get count(): this {\n        this.query.set(\"$count\", \"true\");\n        return this;\n    }\n}\n\nexport class GraphQueryableSearchableCollection extends GraphQueryableCollection {\n\n    /**\n     * \tTo request second and subsequent pages of Graph data\n     */\n    public search(query: string): this {\n        this.query.set(\"$search\", query);\n        return this;\n    }\n}\n\n/**\n * Represents an instance that can be selected\n *\n */\nexport class GraphQueryableInstance<GetType = any> extends GraphQueryable<GetType> { }\n\n/**\n * Decorator used to specify the default path for Queryable objects\n * \n * @param path \n */\nexport function defaultPath(path: string) {\n\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\n\n        return class extends target {\n            constructor(...args: any[]) {\n                super(args[0], args.length > 1 && args[1] !== undefined ? args[1] : path);\n            }\n        };\n    };\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS } from \"@pnp/common\";\nimport { User as IMember } from \"@microsoft/microsoft-graph-types\";\n\n@defaultPath(\"members\")\nexport class Members extends GraphQueryableCollection<IMember[]> {\n\n    /**\n     * Use this API to add a member to an Office 365 group, a security group or a mail-enabled security group through\n     * the members navigation property. You can add users or other groups.\n     * Important: You can add only users to Office 365 groups.\n     * \n     * @param id Full @odata.id of the directoryObject, user, or group object you want to add (ex: https://graph.microsoft.com/v1.0/directoryObjects/${id})\n     */\n    public add(id: string): Promise<any> {\n\n        return this.clone(Members, \"$ref\").postCore({\n            body: jsS({\n                \"@odata.id\": id,\n            }),\n        });\n    }\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Member {\n        return new Member(this, id);\n    }\n}\n\nexport class Member extends GraphQueryableInstance<IMember> { }\n\n@defaultPath(\"owners\")\nexport class Owners extends Members { }\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { TypedHash, jsS } from \"@pnp/common\";\nimport { Event as IEvent, Calendar as ICalendar } from \"@microsoft/microsoft-graph-types\";\n// import { Attachments } from \"./attachments\";\n\n@defaultPath(\"calendars\")\nexport class Calendars extends GraphQueryableCollection<ICalendar[]> {}\n\nexport class Calendar extends GraphQueryableInstance<ICalendar> {\n\n    public get events(): Events {\n        return new Events(this);\n    }\n}\n\n@defaultPath(\"events\")\nexport class Events extends GraphQueryableCollection<IEvent[]> {\n\n    public getById(id: string): Event {\n        return new Event(this, id);\n    }\n\n    /**\n     * Adds a new event to the collection\n     * \n     * @param properties The set of properties used to create the event\n     */\n    public add(properties: Event): Promise<EventAddResult> {\n\n        return this.postCore({\n            body: jsS(properties),\n        }).then(r => {\n            return {\n                data: r,\n                event: this.getById(r.id),\n            };\n        });\n    }\n}\n\nexport interface EventAddResult {\n    data: IEvent;\n    event: Event;\n}\n\nexport class Event extends GraphQueryableInstance<IEvent> {\n\n    // TODO:: when supported\n    // /**\n    //  * Gets the collection of attachments for this event\n    //  */\n    // public get attachments(): Attachments {\n    //     return new Attachments(this);\n    // }\n\n    /**\n     * Update the properties of an event object\n     * \n     * @param properties Set of properties of this event to update\n     */\n    public update(properties: TypedHash<any>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Deletes this event\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { Attachment as IAttachment } from \"@microsoft/microsoft-graph-types\";\nimport { jsS } from \"@pnp/common\";\n\n@defaultPath(\"attachments\")\nexport class Attachments extends GraphQueryableCollection<IAttachment[]> {\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Attachment id\n     */\n    public getById(id: string): Attachment {\n        return new Attachment(this, id);\n    }\n\n    /**\n     * Add attachment to this collection\n     * \n     * @param name Name given to the attachment file\n     * @param bytes File content\n     */\n    public addFile(name: string, bytes: string | Blob): Promise<IAttachment> {\n\n        return this.postCore({\n            body: jsS({\n                \"@odata.type\": \"#microsoft.graph.fileAttachment\",\n                contentBytes: bytes,\n                name: name,\n            }),\n        });\n    }\n}\n\nexport class Attachment extends GraphQueryableInstance<IAttachment> {\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { TypedHash, jsS } from \"@pnp/common\";\nimport { Attachments } from \"./attachments\";\nimport {\n    ConversationThread as IConversationThread,\n    Post as IPost,\n    Recipient as IRecipient,\n    Conversation as IConversation,\n    User as IUser,\n} from \"@microsoft/microsoft-graph-types\";\n\n/**\n * Information used to forward a post\n */\nexport interface PostForwardInfo {\n    comment?: string;\n    toRecipients: IRecipient[];\n}\n\n@defaultPath(\"conversations\")\nexport class Conversations extends GraphQueryableCollection<IConversation[]> {\n\n    /**\n     * Create a new conversation by including a thread and a post.\n     * \n     * @param properties Properties used to create the new conversation\n     */\n    public add(properties: TypedHash<any>): Promise<any> {\n\n        return this.postCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Gets a conversation from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Conversation {\n        return new Conversation(this, id);\n    }\n}\n\n@defaultPath(\"threads\")\nexport class Threads extends GraphQueryableCollection<IConversationThread[]> {\n\n    /**\n     * Gets a thread from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Thread {\n        return new Thread(this, id);\n    }\n\n    /**\n     * Adds a new thread to this collection\n     * \n     * @param properties properties used to create the new thread\n     * @returns Id of the new thread\n     */\n    public add(properties: IConversationThread): Promise<{ id: string }> {\n\n        return this.postCore({\n            body: jsS(properties),\n        });\n    }\n}\n\n@defaultPath(\"posts\")\nexport class Posts extends GraphQueryableCollection<IPost[]> {\n\n    /**\n     * Gets a thread from this collection by id\n     * \n     * @param id Group member's id\n     */\n    public getById(id: string): Post {\n        return new Post(this, id);\n    }\n\n    /**\n     * Adds a new thread to this collection\n     * \n     * @param properties properties used to create the new thread\n     * @returns Id of the new thread\n     */\n    public add(properties: IPost): Promise<{ id: string }> {\n\n        return this.postCore({\n            body: jsS(properties),\n        });\n    }\n}\n\nexport class Conversation extends GraphQueryableInstance<IConversation> {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get threads(): Threads {\n        return new Threads(this);\n    }\n\n    /**\n     * Updates this conversation\n     */\n    public update(properties: TypedHash<any>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Deletes this member from the group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport class Thread extends GraphQueryableInstance {\n\n    /**\n     * Get all the threads in a group conversation.\n     */\n    public get posts(): Posts {\n        return new Posts(this);\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPost): Promise<void> {\n\n        return this.clone(Thread, \"reply\").postCore({\n            body: jsS({\n                post: post,\n            }),\n        });\n    }\n\n    /**\n     * Deletes this member from the group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport class Post extends GraphQueryableInstance<IPost> {\n\n    public get attachments(): Attachments {\n        return new Attachments(this);\n    }\n\n    /**\n     * Deletes this post\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Forward a post to a recipient\n     */\n    public forward(info: PostForwardInfo): Promise<void> {\n        return this.clone(Post, \"forward\").postCore({\n            body: jsS(info),\n        });\n    }\n\n    /**\n     * Reply to a thread in a group conversation and add a new post to it\n     * \n     * @param post Contents of the post \n     */\n    public reply(post: IPost): Promise<void> {\n\n        return this.clone(Post, \"reply\").postCore({\n            body: jsS({\n                post: post,\n            }),\n        });\n    }\n}\n\nexport class Senders extends GraphQueryableCollection<IUser[]> {\n\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    /**\n     * Add a new user or group to this senders collection\n     * @param id The full @odata.id value to add (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public add(id: string): Promise<any> {\n\n        return this.clone(Senders, \"$ref\").postCore({\n            body: jsS({\n                \"@odata.id\": id,\n            }),\n        });\n    }\n\n    /**\n     * Removes the entity from the collection\n     * \n     * @param id The full @odata.id value to remove (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\n     */\n    public remove(id: string): Promise<void> {\n\n        const remover = this.clone(Senders, \"$ref\");\n        remover.query.set(\"$id\", id);\n        return remover.deleteCore();\n    }\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS, TypedHash, extend } from \"@pnp/common\";\nimport {\n    PlannerPlan as IPlannerPlan,\n    PlannerTask as IPlannerTask,\n    PlannerBucket as IPlannerBucket,\n    Planner as IPlanner,\n    PlannerPlanDetails as IPlannerPlanDetails,\n} from \"@microsoft/microsoft-graph-types\";\n\n// Should not be able to use the planner.get()\nexport interface IPlannerMethods {\n    plans: Plans;\n    tasks: Tasks;\n    buckets: Buckets;\n}\n\n@defaultPath(\"planner\")\nexport class Planner extends GraphQueryableInstance<IPlanner> implements IPlannerMethods {\n\n    // Should Only be able to get by id, or else error occur\n    public get plans(): Plans {\n        return new Plans(this);\n    }\n\n    // Should Only be able to get by id, or else error occur\n    public get tasks(): Tasks {\n        return new Tasks(this);\n    }\n\n    // Should Only be able to get by id, or else error occur\n    public get buckets(): Buckets {\n        return new Buckets(this);\n    }\n}\n\n@defaultPath(\"plans\")\nexport class Plans extends GraphQueryableCollection<IPlannerPlan[]> {\n    public getById(id: string): Plan {\n        return new Plan(this, id);\n    }\n\n    /**\n     * Create a new Planner Plan.\n     * \n     * @param owner Id of Group object.\n     * @param title The Title of the Plan.\n     */\n    public add(owner: string, title: string): Promise<PlanAddResult> {\n\n        const postBody = {\n            owner: owner,\n            title: title,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                plan: this.getById(r.id),\n            };\n        });\n    }\n\n}\n\n/**\n * Should not be able to get by Id\n */\n\nexport class Plan extends GraphQueryableInstance<IPlannerPlan> {\n\n    public get tasks(): Tasks {\n        return new Tasks(this);\n    }\n\n    public get buckets(): Buckets {\n        return new Buckets(this);\n    }\n\n    public get details(): Details {\n        return new Details(this);\n    }\n\n    /**\n     * Deletes this Plan\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a Plan\n     * \n     * @param properties Set of properties of this Plan to update\n     */\n    public update(properties: IPlanner): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n}\n\n@defaultPath(\"tasks\")\nexport class Tasks extends GraphQueryableCollection<IPlannerTask[]> {\n    public getById(id: string): Task {\n        return new Task(this, id);\n    }\n\n    /**\n     * Create a new Planner Task.\n     * \n     * @param planId Id of Plan.\n     * @param title The Title of the Task.\n     * @param assignments Assign the task\n     * @param bucketId Id of Bucket\n     */\n    public add(planId: string, title: string, assignments?: TypedHash<any>, bucketId?: string): Promise<TaskAddResult> {\n\n        let postBody = extend({\n            planId: planId,\n            title: title,\n        }, assignments);\n\n        if (bucketId) {\n            postBody = extend(postBody, {\n                bucketId: bucketId,\n            });\n        }\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                task: this.getById(r.id),\n            };\n        });\n    }\n\n}\n\nexport class Task extends GraphQueryableInstance<IPlannerTask> {\n    /**\n     * Deletes this Task\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a Task\n     * \n     * @param properties Set of properties of this Task to update\n     */\n    public update(properties: IPlannerTask): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    public get details(): Details {\n        return new Details(this);\n    }\n}\n\n@defaultPath(\"buckets\")\nexport class Buckets extends GraphQueryableCollection<IPlannerBucket[]> {\n    /**\n     * Create a new Bucket.\n     * \n     * @param name Name of Bucket object.\n     * @param planId The Id of the Plan.\n     * @param oderHint Hint used to order items of this type in a list view.\n     */\n    public add(name: string, planId: string, orderHint?: string): Promise<BucketAddResult> {\n\n        const postBody = {\n            name: name,\n            orderHint: orderHint ? orderHint : \"\",\n            planId: planId,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                bucket: this.getById(r.id),\n                data: r,\n            };\n        });\n    }\n\n    public getById(id: string): Bucket {\n        return new Bucket(this, id);\n    }\n\n}\n\nexport class Bucket extends GraphQueryableInstance<IPlannerBucket> {\n    /**\n     * Deletes this Bucket\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a Bucket\n     * \n     * @param properties Set of properties of this Bucket to update\n     */\n    public update(properties: IPlannerBucket): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    public get tasks(): Tasks {\n        return new Tasks(this);\n    }\n}\n\n@defaultPath(\"details\")\nexport class Details extends GraphQueryableCollection<IPlannerPlanDetails> {}\n\nexport interface BucketAddResult {\n    data: IPlannerBucket;\n    bucket: Bucket;\n}\n\nexport interface PlanAddResult {\n    data: IPlannerPlan;\n    plan: Plan;\n}\n\nexport interface TaskAddResult {\n    data: IPlannerTask;\n    task: Task;\n}\n","import { GraphQueryableInstance, defaultPath } from \"./graphqueryable\";\nimport { BlobParser, BufferParser } from \"@pnp/odata\";\nimport { Photo as IPhoto } from \"@microsoft/microsoft-graph-types\";\n\n@defaultPath(\"photo\")\nexport class Photo extends GraphQueryableInstance<IPhoto> {\n\n    /**\n     * Gets the image bytes as a blob (browser)\n     */\n    public getBlob(): Promise<Blob> {\n        return this.clone(Photo, \"$value\", false).get(new BlobParser());\n    }\n\n    /**\n     * Gets the image file byets as a Buffer (node.js)\n     */\n    public getBuffer(): Promise<ArrayBuffer> {\n        return this.clone(Photo, \"$value\", false).get(new BufferParser());\n    }\n\n    /**\n     * Sets the file bytes\n     * \n     * @param content Image file contents, max 4 MB\n     */\n    public setContent(content: ArrayBuffer | Blob): Promise<void> {\n\n        return this.clone(Photo, \"$value\", false).patchCore({\n            body: content,\n        });\n    }\n}\n","import { graph } from \"./rest\";\nimport { Group, GroupType, GroupAddResult } from \"./groups\";\nimport { GraphQueryableInstance, defaultPath, GraphQueryableCollection } from \"./graphqueryable\";\nimport { TeamProperties, TabsConfiguration } from \"./types\";\nimport { ODataParser, ODataDefaultParser } from \"@pnp/odata\";\nimport { FetchOptions, jsS, extend, TypedHash } from \"@pnp/common\";\n\n@defaultPath(\"teams\")\nexport class Teams extends GraphQueryableCollection {\n\n    /**\n     * Creates a new team and associated Group with the given information\n     * @param name The name of the new Group\n     * @param description Optional description of the group\n     * @param ownerId Add an owner with a user id from the graph\n     */\n    public create(name: string, description = \"\", ownerId: string, teamProperties: TeamProperties = {}): Promise<TeamCreateResult> {\n\n        const groupProps = {\n            \"description\": description && description.length > 0 ? description : \"\",\n            \"owners@odata.bind\": [\n                `https://graph.microsoft.com/v1.0/users/${ownerId}`,\n            ],\n        };\n\n        return graph.groups.add(name, name, GroupType.Office365, groupProps).then((gar: GroupAddResult) => {\n            return gar.group.createTeam(teamProperties).then(data => {\n                return {\n                    data: data,\n                    group: gar.group,\n                    team: new Team(gar.group),\n                };\n            });\n        });\n    }\n\n    public getById(id: string): Team {\n        return new Team(this, id);\n    }\n\n}\n\n/**\n * Represents a Microsoft Team\n */\n@defaultPath(\"team\")\nexport class Team extends GraphQueryableInstance<TeamProperties> {\n\n    public get channels(): Channels {\n        return new Channels(this);\n    }\n\n    public get installedApps(): Apps {\n        return new Apps(this);\n    }\n\n    /**\n     * Updates this team instance's properties\n     * \n     * @param properties The set of properties to update\n     */\n    // TODO:: update properties to be typed once type is available in graph-types\n    public update(properties: TeamProperties): Promise<TeamUpdateResult> {\n\n        return this.clone(Team, \"\").patchCore({\n            body: jsS(properties),\n        }).then(data => {\n            return {\n                data: data,\n                team: this,\n            };\n        });\n    }\n\n    /**\n     * Archives this Team\n     * \n     * @param shouldSetSpoSiteReadOnlyForMembers Should members have Read-only in associated Team Site\n     */\n    // TODO:: update properties to be typed once type is available in graph-types\n    public archive(shouldSetSpoSiteReadOnlyForMembers?: boolean): Promise<TeamUpdateResult> {\n\n        let postBody;\n\n        if (shouldSetSpoSiteReadOnlyForMembers != null) {\n            postBody = extend(postBody, {\n                shouldSetSpoSiteReadOnlyForMembers: shouldSetSpoSiteReadOnlyForMembers,\n            });\n        }\n        return this.clone(Team, \"archive\").postCore({\n            body: jsS(postBody),\n        }).then(data => {\n            return {\n                data: data,\n                team: this,\n            };\n        });\n    }\n\n    /**\n    * Unarchives this Team\n    * \n    */\n    // TODO:: update properties to be typed once type is available in graph-types\n    public unarchive(): Promise<TeamUpdateResult> {\n\n        return this.clone(Team, \"unarchive\").postCore({\n        }).then(data => {\n            return {\n                data: data,\n                team: this,\n            };\n        });\n    }\n\n    /**\n     * Clones this Team\n     * @param name The name of the new Group\n     * @param description Optional description of the group\n     * @param partsToClone Parts to clone ex: apps,tabs,settings,channels,members\n     * @param visibility Set visibility to public or private \n     */\n    // TODO:: update properties to be typed once type is available in graph-types\n    public cloneTeam(name: string, description = \"\", partsToClone: string, visibility: string): Promise<TeamUpdateResult> {\n\n        const postBody = {\n            description: description ? description : \"\",\n            displayName: name,\n            mailNickname: name,\n            partsToClone: partsToClone,\n            visibility: visibility,\n        };\n\n        return this.clone(Team, \"clone\").postCore({\n            body: jsS(postBody),\n        }).then(data => {\n            return {\n                data: data,\n                team: this,\n            };\n        });\n    }\n\n    /**\n     * Executes the currently built request\n     *\n     * @param parser Allows you to specify a parser to handle the result\n     * @param getOptions The options used for this request\n     */\n    public get<T = TeamProperties>(parser: ODataParser<T> = new ODataDefaultParser(), options: FetchOptions = {}): Promise<T> {\n        return this.clone(Team, \"\").getCore(parser, options);\n    }\n}\n\n@defaultPath(\"channels\")\nexport class Channels extends GraphQueryableCollection {\n\n    /**\n     * Creates a new Channel in the Team\n     * @param name The display name of the new channel\n     * @param description Optional description of the channel\n     * \n     */\n    public create(name: string, description = \"\"): Promise<ChannelCreateResult> {\n\n        const postBody = {\n            description: description && description.length > 0 ? description : \"\",\n            displayName: name,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                channel: this.getById(r.id),\n                data: r,\n            };\n        });\n    }\n\n    public getById(id: string): Channel {\n        return new Channel(this, id);\n    }\n\n}\n\nexport class Channel extends GraphQueryableInstance {\n    public get tabs(): Tabs {\n        return new Tabs(this);\n    }\n}\n\n@defaultPath(\"installedApps\")\nexport class Apps extends GraphQueryableCollection {\n\n    /**\n     * Creates a new App in the Team\n     * @param appUrl The url to an app ex: https://graph.microsoft.com/beta/appCatalogs/teamsApps/12345678-9abc-def0-123456789a\n     * \n     */\n    public add(appUrl: string): Promise<any> {\n\n        const postBody = {\n            \"teamsApp@odata.bind\": appUrl,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n            };\n        });\n    }\n\n    /**\n     * Deletes this app\n     */\n    public remove(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\n@defaultPath(\"tabs\")\nexport class Tabs extends GraphQueryableCollection {\n\n    /**\n     * Adds a tab to the cahnnel\n     * @param name The name of the new Tab\n     * @param appUrl The url to an app ex: https://graph.microsoft.com/beta/appCatalogs/teamsApps/12345678-9abc-def0-123456789a\n     * @param tabsConfiguration visit https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/teamstab_add for reference\n     */\n    public add(name: string, appUrl: string, properties: TabsConfiguration): Promise<TabCreateResult> {\n\n        const postBody = extend({\n            name: name,\n            \"teamsApp@odata.bind\": appUrl,\n        }, properties);\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                tab: this.getById(r.id),\n            };\n        });\n\n    }\n\n    public getById(id: string): Tab {\n        return new Tab(this, id);\n    }\n\n}\n\n/**\n * Represents a Microsoft Team\n */\n@defaultPath(\"tab\")\nexport class Tab extends GraphQueryableInstance<TeamProperties> {\n\n    /**\n     * Updates this tab\n     * \n     * @param properties The set of properties to update\n     */\n    // TODO:: update properties to be typed once type is available in graph-types\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<TabUpdateResult> {\n\n        return this.clone(Tab, \"\").patchCore({\n            body: jsS(properties),\n        }).then(data => {\n            return {\n                data: data,\n                tab: this,\n            };\n        });\n    }\n\n    /**\n     * Deletes this tab\n     */\n    public remove(): Promise<void> {\n        return this.deleteCore();\n    }\n}\n\nexport interface TeamUpdateResult {\n    data: any;\n    team: Team;\n}\n\nexport interface TeamCreateResult {\n    data: any;\n    group: Group;\n    team: Team;\n}\n\nexport interface ChannelCreateResult {\n    data: any;\n    channel: Channel;\n}\n\nexport interface TabCreateResult {\n    data: any;\n    tab: Tab;\n}\n\nexport interface TabUpdateResult {\n    data: any;\n    tab: Tab;\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { Members, Owners } from \"./members\";\nimport { extend, TypedHash, jsS } from \"@pnp/common\";\nimport { Calendar, Events } from \"./calendars\";\nimport { Conversations, Senders } from \"./conversations\";\nimport { Event as IEvent, Group as IGroup } from \"@microsoft/microsoft-graph-types\";\nimport { Plans } from \"./planner\";\nimport { Photo } from \"./photos\";\nimport { Team } from \"./teams\";\nimport { TeamProperties } from \"./types\";\n\nexport enum GroupType {\n    /**\n     * Office 365 (aka unified group)\n     */\n    Office365,\n    /**\n     * Dynamic membership\n     */\n    Dynamic,\n    /**\n     * Security\n     */\n    Security,\n}\n\n/**\n * Describes a collection of Field objects\n *\n */\n@defaultPath(\"groups\")\nexport class Groups extends GraphQueryableCollection<IGroup[]> {\n\n    /**\n     * Gets a group from the collection using the specified id\n     * \n     * @param id Id of the group to get from this collection\n     */\n    public getById(id: string): Group {\n        return new Group(this, id);\n    }\n\n    /**\n     * Create a new group as specified in the request body.\n     * \n     * @param name Name to display in the address book for the group\n     * @param mailNickname Mail alias for the group\n     * @param groupType Type of group being created\n     * @param additionalProperties A plain object collection of additional properties you want to set on the new group\n     */\n    public add(name: string, mailNickname: string, groupType: GroupType, additionalProperties: TypedHash<any> = {}): Promise<GroupAddResult> {\n\n        let postBody = extend({\n            displayName: name,\n            mailEnabled: groupType === GroupType.Office365,\n            mailNickname: mailNickname,\n            securityEnabled: groupType !== GroupType.Office365,\n        }, additionalProperties);\n\n        // include a group type if required\n        if (groupType !== GroupType.Security) {\n\n            postBody = extend(postBody, {\n                groupTypes: groupType === GroupType.Office365 ? [\"Unified\"] : [\"DynamicMembership\"],\n            });\n        }\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                group: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Represents a group entity\n */\nexport class Group extends GraphQueryableInstance<IGroup> {\n\n    /**\n     * The calendar associated with this group\n     */\n    public get calendar(): Calendar {\n        return new Calendar(this, \"calendar\");\n    }\n\n    /**\n     * Retrieve a list of event objects\n     */\n    public get events(): Events {\n        return new Events(this);\n    }\n\n    /**\n     * Gets the collection of owners for this group\n     */\n    public get owners(): Owners {\n        return new Owners(this);\n    }\n\n    /**\n     * The collection of plans for this group\n     */\n    public get plans(): Plans {\n        return new Plans(this, \"planner/plans\");\n    }\n\n    /**\n     * Gets the collection of members for this group\n     */\n    public get members(): Members {\n        return new Members(this);\n    }\n\n    /**\n     * Gets the conversations collection for this group\n     */\n    public get conversations(): Conversations {\n        return new Conversations(this);\n    }\n\n    /**\n     * Gets the collection of accepted senders for this group\n     */\n    public get acceptedSenders(): Senders {\n        return new Senders(this, \"acceptedsenders\");\n    }\n\n    /**\n     * Gets the collection of rejected senders for this group\n     */\n    public get rejectedSenders(): Senders {\n        return new Senders(this, \"rejectedsenders\");\n    }\n\n    /**\n     * The photo associated with the group\n     */\n    public get photo(): Photo {\n        return new Photo(this);\n    }\n\n    /**\n     * Gets the team associated with this group, if it exists\n     */\n    public get team(): Team {\n        return new Team(this);\n    }\n\n    /**\n     * Add the group to the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public addFavorite(): Promise<void> {\n        return this.clone(Group, \"addFavorite\").postCore();\n    }\n\n    /**\n     * Creates a Microsoft Team associated with this group\n     * \n     * @param properties Initial properties for the new Team\n     */\n    public createTeam(properties: TeamProperties): Promise<any> {\n\n        return this.clone(Group, \"team\").putCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Returns all the groups and directory roles that the specified group is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberObjects(securityEnabledOnly = false): Promise<{ value: string[] }> {\n        return this.clone(Group, \"getMemberObjects\").postCore({\n            body: jsS({\n                securityEnabledOnly: securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Return all the groups that the specified group is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberGroups(securityEnabledOnly = false): Promise<{ value: string[] }> {\n\n        return this.clone(Group, \"getMemberGroups\").postCore({\n            body: jsS({\n                securityEnabledOnly: securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Check for membership in a specified list of groups, and returns from that list those groups of which the specified user, group, or directory object is a member. \n     * This function is transitive.\n     * @param groupIds A collection that contains the object IDs of the groups in which to check membership. Up to 20 groups may be specified.\n     */\n    public checkMemberGroups(groupIds: String[]): Promise<{ value: string[] }> {\n        return this.clone(Group, \"checkMemberGroups\").postCore({\n            body: jsS({\n                groupIds: groupIds,\n            }),\n        });\n    }\n\n    /**\n     * Deletes this group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a group object\n     * \n     * @param properties Set of properties of this group to update\n     */\n    public update(properties: IGroup): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Remove the group from the list of the current user's favorite groups. Supported for only Office 365 groups\n     */\n    public removeFavorite(): Promise<void> {\n\n        return this.clone(Group, \"removeFavorite\").postCore();\n    }\n\n    /**\n     * Reset the unseenCount of all the posts that the current user has not seen since their last visit\n     */\n    public resetUnseenCount(): Promise<void> {\n        return this.clone(Group, \"resetUnseenCount\").postCore();\n    }\n\n    /**\n     * Calling this method will enable the current user to receive email notifications for this group,\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public subscribeByMail(): Promise<void> {\n        return this.clone(Group, \"subscribeByMail\").postCore();\n    }\n\n    /**\n     * Calling this method will prevent the current user from receiving email notifications for this group\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\n     */\n    public unsubscribeByMail(): Promise<void> {\n        return this.clone(Group, \"unsubscribeByMail\").postCore();\n    }\n\n    /**\n     * Get the occurrences, exceptions, and single instances of events in a calendar view defined by a time range, from the default calendar of a group\n     * \n     * @param start Start date and time of the time range\n     * @param end End date and time of the time range\n     */\n    public getCalendarView(start: Date, end: Date): Promise<IEvent[]> {\n\n        const view = this.clone(Group, \"calendarView\");\n        view.query.set(\"startDateTime\", start.toISOString());\n        view.query.set(\"endDateTime\", end.toISOString());\n        return view.get();\n    }\n}\n\nexport interface GroupAddResult {\n    group: Group;\n    data: any;\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS, TypedHash, extend } from \"@pnp/common\";\nimport {\n    Contact as IContact,\n    ContactFolder as IContactFolder,\n    EmailAddress,\n} from \"@microsoft/microsoft-graph-types\";\n\n@defaultPath(\"contacts\")\nexport class Contacts extends GraphQueryableCollection<IContact[]> {\n\n    public getById(id: string): Contact {\n        return new Contact(this, id);\n    }\n\n    /**\n    * Create a new Contact for the user.\n    * \n    * @param givenName The contact's given name.\n    * @param surName The contact's surname.\n    * @param emailAddresses The contact's email addresses.\n    * @param businessPhones The contact's business phone numbers.\n    * @param additionalProperties A plain object collection of additional properties you want to set on the new contact\n    */\n    public add(givenName: string, surName: string, emailAddresses: EmailAddress[], businessPhones: string[], additionalProperties: TypedHash<any> = {}): Promise<ContactAddResult> {\n\n        const postBody = extend({\n            businessPhones: businessPhones,\n            emailAddresses: emailAddresses,\n            givenName: givenName,\n            surName: surName,\n        }, additionalProperties);\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                contact: this.getById(r.id),\n                data: r,\n            };\n        });\n    }\n}\n\nexport class Contact extends GraphQueryableInstance<IContact> {\n    /**\n     * Deletes this contact\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a contact object\n     * \n     * @param properties Set of properties of this contact to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n}\n\n@defaultPath(\"contactFolders\")\nexport class ContactFolders extends GraphQueryableCollection<IContactFolder[]> {\n\n    public getById(id: string): ContactFolder {\n        return new ContactFolder(this, id);\n    }\n\n    /**\n     * Create a new Contact Folder for the user.\n     * \n     * @param displayName The folder's display name.\n     * @param parentFolderId The ID of the folder's parent folder.\n     */\n    public add(displayName: string, parentFolderId?: string): Promise<ContactFolderAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n            parentFolderId: parentFolderId,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                contactFolder: this.getById(r.id),\n                data: r,\n            };\n        });\n    }\n}\n\nexport class ContactFolder extends GraphQueryableInstance<IContactFolder> {\n    /**\n     * Gets the contacts in this contact folder\n     */\n    public get contacts(): Contacts {\n        return new Contacts(this);\n    }\n\n    /**\n    * Gets the contacts in this contact folder\n    */\n    public get childFolders(): ContactFolders {\n        return new ContactFolders(this, \"childFolders\");\n    }\n\n    /**\n     * Deletes this contact folder\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a contact folder\n     * \n     * @param properties Set of properties of this contact folder to update\n     */\n    public update(properties: IContactFolder): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n}\n\nexport interface ContactFolderAddResult {\n    data: IContactFolder;\n    contactFolder: ContactFolder;\n}\n\nexport interface ContactAddResult {\n    data: IContact;\n    contact: Contact;\n}\n","import { GraphQueryable, GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS } from \"@pnp/common\";\nimport { Notebook as INotebook, Onenote as IOnenote, OnenoteSection as ISection } from \"@microsoft/microsoft-graph-types\";\n\nexport interface OneNoteMethods {\n    notebooks: Notebooks;\n    sections: Sections;\n    pages: Pages;\n}\n\n/**\n * Represents a onenote entity\n */\n@defaultPath(\"onenote\")\nexport class OneNote extends GraphQueryableInstance<IOnenote> implements OneNoteMethods {\n\n    public get notebooks(): Notebooks {\n        return new Notebooks(this);\n    }\n\n    public get sections(): Sections {\n        return new Sections(this);\n    }\n\n    public get pages(): Pages {\n        return new Pages(this);\n    }\n}\n\n/**\n * Describes a collection of Notebook objects\n *\n */\n@defaultPath(\"notebooks\")\nexport class Notebooks extends GraphQueryableCollection<INotebook[]> {\n\n    /**\n     * Gets a notebook instance by id\n     * \n     * @param id Notebook id\n     */\n    public getById(id: string): Notebook {\n        return new Notebook(this, id);\n    }\n\n    /**\n     * Create a new notebook as specified in the request body.\n     * \n     * @param displayName Notebook display name\n     */\n    public add(displayName: string): Promise<NotebookAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                notebook: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Describes a notebook instance\n *\n */\nexport class Notebook extends GraphQueryableInstance<INotebook> {\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    public get sections(): Sections {\n        return new Sections(this);\n    }\n}\n\n/**\n * Describes a collection of Sections objects\n *\n */\n@defaultPath(\"sections\")\nexport class Sections extends GraphQueryableCollection<ISection[]> {\n\n    /**\n     * Gets a section instance by id\n     * \n     * @param id Section id\n     */\n    public getById(id: string): Section {\n        return new Section(this, id);\n    }\n\n    /**\n     * Adds a new section\n     * \n     * @param displayName New section display name\n     */\n    public add(displayName: string): Promise<SectionAddResult> {\n\n        const postBody = {\n            displayName: displayName,\n        };\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                section: this.getById(r.id),\n            };\n        });\n    }\n}\n\n/**\n * Describes a sections instance\n *\n */\nexport class Section extends GraphQueryableInstance<ISection> {\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n}\n\n/**\n * Describes a collection of Pages objects\n *\n */\n@defaultPath(\"pages\")\nexport class Pages extends GraphQueryableCollection { }\n\nexport interface NotebookAddResult {\n    data: any;\n    notebook: Notebook;\n}\n\nexport interface SectionAddResult {\n    data: any;\n    section: Section;\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { DriveItem as IDriveItem, Drive as IDrive } from \"@microsoft/microsoft-graph-types\";\nimport { jsS, TypedHash, extend } from \"@pnp/common\";\n\nexport interface IDriveItemsMethods {\n    getById(id: string): DriveItem;\n}\n\n/**\n * Describes a collection of Drive objects\n *\n */\n@defaultPath(\"drives\")\nexport class Drives extends GraphQueryableCollection<IDrive[]> {\n\n    /**\n     * Gets a Drive instance by id\n     * \n     * @param id Drive id\n     */\n    public getById(id: string): Drive {\n        return new Drive(this, id);\n    }\n}\n\n/**\n * Describes a Drive instance\n *\n */\n@defaultPath(\"drive\")\nexport class Drive extends GraphQueryableInstance<IDrive> {\n\n    public get root(): Root {\n        return new Root(this);\n    }\n\n    public get items(): IDriveItemsMethods {\n        return new DriveItems(this);\n    }\n\n    public get list(): DriveList {\n        return new DriveList(this);\n    }\n\n    public get recent(): Recent {\n        return new Recent(this);\n    }\n\n    public get sharedWithMe(): SharedWithMe {\n        return new SharedWithMe(this);\n    }\n\n}\n\n/**\n * Describes a Root instance\n *\n */\n@defaultPath(\"root\")\nexport class Root extends GraphQueryableInstance<IDrive> {\n\n    public get children(): Children {\n        return new Children(this);\n    }\n\n    public search(query: string): DriveSearch {\n        return new DriveSearch(this, `search(q='${query}')`);\n    }\n}\n\n/**\n * Describes a collection of Drive Item objects\n *\n */\n@defaultPath(\"items\")\nexport class DriveItems extends GraphQueryableCollection implements IDriveItemsMethods {\n    /**\n     * Gets a Drive Item instance by id\n     * \n     * @param id Drive Item id\n     */\n    public getById(id: string): DriveItem {\n        return new DriveItem(this, id);\n    }\n}\n\n/**\n * Describes a Drive Item instance\n *\n */\nexport class DriveItem extends GraphQueryableInstance<IDriveItem> {\n\n    public get children(): Children {\n        return new Children(this);\n    }\n\n    public get thumbnails(): Thumbnails {\n        return new Thumbnails(this);\n    }\n\n    /**\n     * Deletes this Drive Item\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Update the properties of a Drive item\n     * \n     * @param properties Set of properties of this Drive Item to update\n     */\n    public update(properties: TypedHash<string | number | boolean | string[]>): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Move the Drive item and optionally update the properties\n     * \n     * @param parentReference Should contain Id of new parent folder\n     * @param properties Optional set of properties of this Drive Item to update\n     */\n    public move(parentReference: TypedHash<any>, properties?: TypedHash<string | number | boolean | string[]>): Promise<void> {\n        let patchBody = extend({\n        }, parentReference);\n\n        if (properties) {\n            patchBody = extend({\n            }, properties);\n        }\n\n        return this.patchCore({\n            body: jsS(patchBody),\n        });\n    }\n}\n\n/**\n * Return a collection of DriveItems in the children relationship of a DriveItem\n *\n */\n@defaultPath(\"children\")\nexport class Children extends GraphQueryableCollection {\n    /**\n    * Create a new folder or DriveItem in a Drive with a specified parent item or path\n    * Currently only Folder or File works\n    * @param name The name of the Drive Item.\n    * @param properties Type of Drive Item to create.\n    * */\n    public add(name: string, driveItemType: IDriveItem): Promise<IDriveItemAddResult> {\n\n        const postBody = extend({\n            name: name,\n        }, driveItemType);\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n                driveItem: new DriveItem(this, r.id),\n            };\n        });\n    }\n}\n\n@defaultPath(\"list\")\nexport class DriveList extends GraphQueryableCollection { }\n\n@defaultPath(\"recent\")\nexport class Recent extends GraphQueryableInstance { }\n\n@defaultPath(\"sharedWithMe\")\nexport class SharedWithMe extends GraphQueryableInstance { }\n\n@defaultPath(\"search\")\nexport class DriveSearch extends GraphQueryableInstance { }\n\n@defaultPath(\"thumbnails\")\nexport class Thumbnails extends GraphQueryableInstance { }\n\nexport interface IDriveItemAddResult {\n    data: IDriveItem;\n    driveItem: DriveItem;\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport {\n    Message as IMessage,\n    MailFolder as IMailFolder,\n    MailboxSettings as IMailboxSettings,\n} from \"@microsoft/microsoft-graph-types\";\nimport { jsS } from \"@pnp/common\";\n\n@defaultPath(\"messages\")\nexport class Messages extends GraphQueryableCollection<IMessage[]> {\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Attachment id\n     */\n    public getById(id: string): Message {\n        return new Message(this, id);\n    }\n\n    /**\n     * Add a message to this collection\n     * \n     * @param message The message details\n     */\n    public add(message: IMessage): Promise<IMessage> {\n\n        return this.postCore({\n            body: jsS(message),\n        });\n    }\n}\n\nexport class Message extends GraphQueryableInstance<IMessage> { }\n\n@defaultPath(\"mailFolders\")\nexport class MailFolders extends GraphQueryableCollection<IMailFolder[]> {\n\n    /**\n     * Gets a member of the group by id\n     * \n     * @param id Attachment id\n     */\n    public getById(id: string): MailFolder {\n        return new MailFolder(this, id);\n    }\n\n    /**\n     * Add a mail folder to this collection\n     * \n     * @param message The message details\n     */\n    public add(mailFolder: IMailFolder): Promise<IMailFolder> {\n\n        return this.postCore({\n            body: jsS(mailFolder),\n        });\n    }\n}\n\nexport class MailFolder extends GraphQueryableInstance<IMailFolder> { }\n\n@defaultPath(\"mailboxSettings\")\nexport class MailboxSettings extends GraphQueryableInstance<IMailboxSettings> {\n\n    public update(settings: IMailboxSettings): Promise<void> {\n        return this.patchCore({\n            body: jsS(settings),\n        });\n    }\n}\n","import { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { jsS } from \"@pnp/common\";\nimport { DirectoryObject as IDirectoryObject } from \"@microsoft/microsoft-graph-types\";\n\nexport enum DirectoryObjectType {\n    /**\n     * Directory Objects\n     */\n    directoryObject,\n    /**\n     * User\n     */\n    user,\n    /**\n     * Group\n     */\n    group,\n    /**\n     * Device\n     */\n    device,\n}\n\n/**\n * Describes a collection of Directory Objects\n *\n */\n@defaultPath(\"directoryObjects\")\nexport class DirectoryObjects extends GraphQueryableCollection<IDirectoryObject[]> {\n\n    /**\n     * Gets a directoryObject from the collection using the specified id\n     * \n     * @param id Id of the Directory Object to get from this collection\n     */\n    public getById(id: string): DirectoryObject {\n        return new DirectoryObject(this, id);\n    }\n\n    /**\n    * Returns the directory objects specified in a list of ids. NOTE: The directory objects returned are the full objects containing all their properties. \n    * The $select query option is not available for this operation.\n    * \n    * @param ids A collection of ids for which to return objects. You can specify up to 1000 ids.\n    * @param type A collection of resource types that specifies the set of resource collections to search. Default is directoryObject.\n    */\n    public getByIds(ids: string[], type: DirectoryObjectType = DirectoryObjectType.directoryObject): Promise<DirectoryObject[]> {\n        return this.clone(DirectoryObjects, \"getByIds\").postCore({\n            body: jsS({\n                ids,\n                type,\n            }),\n        });\n    }\n}\n\n/**\n * Represents a Directory Object entity\n */\nexport class DirectoryObject extends GraphQueryableInstance<IDirectoryObject> {\n\n    /**\n     * Deletes this group\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Returns all the groups and directory roles that the specified Directory Object is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberObjects(securityEnabledOnly = false): Promise<{ value: string[] }> {\n        return this.clone(DirectoryObject, \"getMemberObjects\").postCore({\n            body: jsS({\n                securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Returns all the groups that the specified Directory Object is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberGroups(securityEnabledOnly = false): Promise<{ value: string[] }> {\n\n        return this.clone(DirectoryObject, \"getMemberGroups\").postCore({\n            body: jsS({\n                securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Check for membership in a specified list of groups, and returns from that list those groups of which the specified user, group, or directory object is a member. \n     * This function is transitive.\n     * @param groupIds A collection that contains the object IDs of the groups in which to check membership. Up to 20 groups may be specified.\n     */\n    public checkMemberGroups(groupIds: String[]): Promise<{ value: string[] }> {\n        return this.clone(DirectoryObject, \"checkMemberGroups\").postCore({\n            body: jsS({\n                groupIds,\n            }),\n        });\n    }\n}\n","import { jsS } from \"@pnp/common\";\nimport { GraphQueryableInstance, GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { Contacts, ContactFolders } from \"./contacts\";\nimport { OneNote, OneNoteMethods } from \"./onenote\";\nimport { Drive, Drives } from \"./onedrive\";\nimport { Tasks } from \"./planner\";\nimport { Teams } from \"./teams\";\nimport {\n    User as IUser,\n    Message as IMessage,\n} from \"@microsoft/microsoft-graph-types\";\nimport { Messages, MailboxSettings, MailFolders } from \"./messages\";\nimport { DirectoryObjects } from \"./directoryobjects\";\n\n/**\n * Describes a collection of Users objects\n *\n */\n@defaultPath(\"users\")\nexport class Users extends GraphQueryableCollection<IUser[]> {\n    /**\n     * Gets a user from the collection using the specified id\n     * \n     * @param id Id of the user to get from this collection\n     */\n    public getById(id: string): User {\n        return new User(this, id);\n    }\n}\n\n/**\n * Represents a user entity\n */\nexport class User extends GraphQueryableInstance<IUser> {\n    /**\n    * The onenote associated with me\n    */\n    public get onenote(): OneNoteMethods {\n        return new OneNote(this);\n    }\n\n    /**\n    * The Contacts associated with the user\n    */\n    public get contacts(): Contacts {\n        return new Contacts(this);\n    }\n    /**\n    * The Teams associated with the user\n    */\n    public get joinedTeams(): Teams {\n        return new Teams(this, \"joinedTeams\");\n    }\n\n    /**\n    * The groups and directory roles associated with the user\n    */\n    public get memberOf(): DirectoryObjects {\n        return new DirectoryObjects(this, \"memberOf\");\n    }\n\n    /**\n     * Returns all the groups and directory roles that the specified useris a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberObjects(securityEnabledOnly = false): Promise<{ value: string[] }> {\n        return this.clone(User, \"getMemberObjects\").postCore({\n            body: jsS({\n                securityEnabledOnly: securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Return all the groups that the specified user is a member of. The check is transitive\n     * \n     * @param securityEnabledOnly \n     */\n    public getMemberGroups(securityEnabledOnly = false): Promise<{ value: string[] }> {\n\n        return this.clone(User, \"getMemberGroups\").postCore({\n            body: jsS({\n                securityEnabledOnly: securityEnabledOnly,\n            }),\n        });\n    }\n\n    /**\n     * Check for membership in a specified list of groups, and returns from that list those groups of which the specified user, group, or directory object is a member. \n     * This function is transitive.\n     * @param groupIds A collection that contains the object IDs of the groups in which to check membership. Up to 20 groups may be specified.\n     */\n    public checkMemberGroups(groupIds: String[]): Promise<{ value: string[] }> {\n        return this.clone(User, \"checkMemberGroups\").postCore({\n            body: jsS({\n                groupIds: groupIds,\n            }),\n        });\n    }\n    /**\n    * The Contact Folders associated with the user\n    */\n    public get contactFolders(): ContactFolders {\n        return new ContactFolders(this);\n    }\n\n    /**\n    * The default Drive associated with the user\n    */\n    public get drive(): Drive {\n        return new Drive(this);\n    }\n\n    /**\n    * The Drives the user has available\n    */\n    public get drives(): Drives {\n        return new Drives(this);\n    }\n\n    /**\n    * The Tasks the user has available\n    */\n    public get tasks(): Tasks {\n        return new Tasks(this, \"planner/tasks\");\n    }\n\n    /**\n     * Get the messages in the signed-in user's mailbox\n     */\n    public get messages(): Messages {\n        return new Messages(this);\n    }\n\n    /**\n     * Get the MailboxSettings in the signed-in user's mailbox\n     */\n    public get mailboxSettings(): MailboxSettings {\n        return new MailboxSettings(this);\n    }\n\n    /**\n     * Get the MailboxSettings in the signed-in user's mailbox\n     */\n    public get mailFolders(): MailFolders {\n        return new MailFolders(this);\n    }\n\n    /**\n     * Updates this user\n     * \n     * @param properties Properties used to update this user\n     */\n    public update(properties: IUser): Promise<void> {\n\n        return this.patchCore({\n            body: jsS(properties),\n        });\n    }\n\n    /**\n     * Deletes this user\n     */\n    public delete(): Promise<void> {\n        return this.deleteCore();\n    }\n\n    /**\n     * Send the message specified in the request body. The message is saved in the Sent Items folder by default.\n     */\n    public sendMail(message: IMessage): Promise<void> {\n\n        return this.clone(User, \"sendMail\").postCore({\n            body: jsS(message),\n        });\n    }\n}\n","import { ODataBatch, ODataBatchRequestInfo } from \"@pnp/odata\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { extend, jsS, isUrlAbsolute } from \"@pnp/common\";\nimport { GraphRuntimeConfig } from \"./config/graphlibconfig\";\nimport { GraphHttpClient } from \"./net/graphhttpclient\";\n\ninterface GraphBatchRequestFragment {\n    id: string;\n    method: string;\n    url: string;\n    headers?: string[][] | {\n        [key: string]: string;\n    };\n    body?: any;\n}\n\ninterface GraphBatchRequest {\n    requests: GraphBatchRequestFragment[];\n}\n\ninterface GraphBatchResponseFragment {\n    id: string;\n    status: number;\n    statusText?: string;\n    method: string;\n    url: string;\n    headers?: string[][] | {\n        [key: string]: string;\n    };\n    body?: any;\n}\n\ninterface GraphBatchResponse {\n    responses: GraphBatchResponseFragment[];\n    nextLink?: string;\n}\n\nexport class GraphBatch extends ODataBatch {\n\n    constructor(private batchUrl = \"https://graph.microsoft.com/v1.0/$batch\", private maxRequests = 20) {\n        super();\n    }\n\n    /**\n     * Urls come to the batch absolute, but the processor expects relative\n     * @param url Url to ensure is relative\n     */\n    private static makeUrlRelative(url: string): string {\n\n        if (!isUrlAbsolute(url)) {\n            // already not absolute, just give it back\n            return url;\n        }\n\n        let index = url.indexOf(\".com/v1.0/\");\n\n        if (index < 0) {\n\n            index = url.indexOf(\".com/beta/\");\n\n            if (index > -1) {\n\n                // beta url\n                return url.substr(index + 10);\n            }\n\n        } else {\n            // v1.0 url\n            return url.substr(index + 9);\n        }\n\n        // no idea\n        return url;\n    }\n\n    private static formatRequests(requests: ODataBatchRequestInfo[]): GraphBatchRequestFragment[] {\n\n        return requests.map((reqInfo, index) => {\n\n            let requestFragment: GraphBatchRequestFragment = {\n                id: `${++index}`,\n                method: reqInfo.method,\n                url: this.makeUrlRelative(reqInfo.url),\n            };\n\n            let headers = {};\n\n            // merge global config headers\n            if (GraphRuntimeConfig.headers !== undefined && GraphRuntimeConfig.headers !== null) {\n\n                headers = extend(headers, GraphRuntimeConfig.headers);\n            }\n\n            if (reqInfo.options !== undefined) {\n\n                // merge per request headers\n                if (reqInfo.options.headers !== undefined && reqInfo.options.headers !== null) {\n                    headers = extend(headers, reqInfo.options.headers);\n                }\n\n                // add a request body\n                if (reqInfo.options.body !== undefined && reqInfo.options.body !== null) {\n\n                    requestFragment = extend(requestFragment, {\n                        body: reqInfo.options.body,\n                    });\n                }\n            }\n\n            requestFragment = extend(requestFragment, {\n                headers: headers,\n            });\n\n            return requestFragment;\n        });\n    }\n\n    private static parseResponse(requests: ODataBatchRequestInfo[], graphResponse: GraphBatchResponse): Promise<{ nextLink: string, responses: Response[] }> {\n\n        return new Promise((resolve) => {\n\n            const parsedResponses: Response[] = new Array(requests.length).fill(null);\n\n            for (let i = 0; i < graphResponse.responses.length; ++i) {\n\n                const response = graphResponse.responses[i];\n                // we create the request id by adding 1 to the index, so we place the response by subtracting one to match\n                // the array of requests and make it easier to map them by index\n                const responseId = parseInt(response.id, 10) - 1;\n\n                if (response.status === 204) {\n\n                    parsedResponses[responseId] = new Response();\n                } else {\n\n                    parsedResponses[responseId] = new Response(JSON.stringify(response.body), response);\n                }\n            }\n\n            resolve({\n                nextLink: graphResponse.nextLink,\n                responses: parsedResponses,\n            });\n        });\n    }\n\n    protected executeImpl(): Promise<void> {\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, LogLevel.Info);\n\n        if (this.requests.length < 1) {\n            Logger.write(`Resolving empty batch.`, LogLevel.Info);\n            return Promise.resolve();\n        }\n\n        const client = new GraphHttpClient();\n\n        // create a working copy of our requests\n        const requests = this.requests.slice();\n\n        // this is the root of our promise chain\n        const promise = Promise.resolve();\n\n        while (requests.length > 0) {\n\n            const requestsChunk = requests.splice(0, this.maxRequests);\n\n            const batchRequest: GraphBatchRequest = {\n                requests: GraphBatch.formatRequests(requestsChunk),\n            };\n\n            const batchOptions = {\n                body: jsS(batchRequest),\n                headers: {\n                    \"Accept\": \"application/json\",\n                    \"Content-Type\": \"application/json\",\n                },\n                method: \"POST\",\n            };\n\n            Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, LogLevel.Info);\n\n            client.fetch(this.batchUrl, batchOptions)\n                .then(r => r.json())\n                .then((j) => GraphBatch.parseResponse(requestsChunk, j))\n                .then((parsedResponse: { nextLink: string, responses: Response[] }) => {\n\n                    Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, LogLevel.Info);\n\n                    parsedResponse.responses.reduce((chain, response, index) => {\n\n                        const request = requestsChunk[index];\n\n                        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched request ${request.method} ${request.url}.`, LogLevel.Verbose);\n\n                        return chain.then(_ => request.parser.parse(response).then(request.resolve).catch(request.reject));\n\n                    }, promise);\n                });\n        }\n\n        return promise;\n    }\n}\n","import { jsS, TypedHash, extend } from \"@pnp/common\";\nimport { GraphQueryableCollection, defaultPath } from \"./graphqueryable\";\nimport { Invitation as IInvitation } from \"@microsoft/microsoft-graph-types\";\n\n// Should not be able to use the invitations.get()\nexport interface IInvitationsMethods {\n    create(invitedUserEmailAddress: string, inviteRedirectUrl: string, additionalProperties: TypedHash<any>): Promise<InvitationAddResult>;\n}\n\n@defaultPath(\"invitations\")\nexport class Invitations extends GraphQueryableCollection<IInvitation[]> {\n\n    /**\n     * Create a new Invitation via invitation manager.\n     * \n     * @param invitedUserEmailAddress The email address of the user being invited.\n     * @param inviteRedirectUrl The URL user should be redirected to once the invitation is redeemed.\n     * @param additionalProperties A plain object collection of additional properties you want to set in the invitation\n     */\n    public create(invitedUserEmailAddress: string, inviteRedirectUrl: string, additionalProperties: TypedHash<any> = {}): Promise<InvitationAddResult> {\n\n        const postBody = extend({\n            inviteRedirectUrl: inviteRedirectUrl,\n            invitedUserEmailAddress: invitedUserEmailAddress,\n        }, additionalProperties);\n\n        return this.postCore({\n            body: jsS(postBody),\n        }).then(r => {\n            return {\n                data: r,\n            };\n        });\n    }\n\n}\n\nexport interface InvitationAddResult {\n    data: IInvitation;\n}\n","import { GraphQueryable } from \"./graphqueryable\";\nimport {\n    setup as _setup,\n    GraphConfiguration,\n} from \"./config/graphlibconfig\";\n\nimport { Groups } from \"./groups\";\nimport { Teams } from \"./teams\";\nimport { Users, User } from \"./users\";\nimport { Planner, IPlannerMethods } from \"./planner\";\nimport { GraphBatch } from \"./batch\";\nimport { DirectoryObjects } from \"./directoryobjects\";\nimport { Invitations, IInvitationsMethods } from \"./invitations\";\n\nexport class GraphRest extends GraphQueryable {\n\n    constructor(baseUrl: string | GraphQueryable, path?: string) {\n        super(baseUrl, path);\n    }\n\n    public get directoryObjects(): DirectoryObjects {\n        return new DirectoryObjects(this);\n    }\n\n    public get groups(): Groups {\n        return new Groups(this);\n    }\n\n    public get teams(): Teams {\n        return new Teams(this);\n    }\n\n    public get me(): User {\n        return new User(this, \"me\");\n    }\n\n    public get planner(): IPlannerMethods {\n        return new Planner(this);\n    }\n\n    public get users(): Users {\n        return new Users(this);\n    }\n\n    public get invitations(): IInvitationsMethods {\n        return new Invitations(this);\n    }\n\n    public createBatch(): GraphBatch {\n        return new GraphBatch();\n    }\n\n    public setup(config: GraphConfiguration) {\n        _setup(config);\n    }\n}\n\nexport let graph = new GraphRest(\"v1.0\");\n"],"names":["_setup"],"mappings":"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"}