{"version":3,"file":"imask.es.min.js","sources":["../src/core/utils.js","../src/core/action-details.js","../src/core/change-details.js","../src/masked/base.js","../src/masked/factory.js","../src/masked/pattern/input-definition.js","../src/masked/pattern/fixed-definition.js","../src/masked/pattern/chunk-tail-details.js","../src/masked/pattern.js","../src/masked/range.js","../src/masked/date.js","../src/controls/mask-element.js","../src/controls/html-mask-element.js","../src/controls/input.js","../src/masked/enum.js","../src/masked/number.js","../src/masked/regexp.js","../src/masked/function.js","../src/masked/dynamic.js","../src/imask.js"],"sourcesContent":["// @flow\r\n\r\n\r\n/** Checks if value is string */\r\nexport\r\nfunction isString (str: mixed): boolean %checks {\r\n  return typeof str === 'string' || str instanceof String;\r\n}\r\n\r\n/**\r\n  Direction\r\n  @prop {string} NONE\r\n  @prop {string} LEFT\r\n  @prop {string} FORCE_LEFT\r\n  @prop {string} RIGHT\r\n  @prop {string} FORCE_RIGHT\r\n*/\r\nexport\r\nconst DIRECTION = {\r\n  NONE: 'NONE',\r\n  LEFT: 'LEFT',\r\n  FORCE_LEFT: 'FORCE_LEFT',\r\n  RIGHT: 'RIGHT',\r\n  FORCE_RIGHT: 'FORCE_RIGHT',\r\n}\r\n/**\r\n  Direction\r\n  @enum {string}\r\n*/\r\nexport\r\ntype Direction = $Values<typeof DIRECTION>;\r\n\r\n/** Returns next char index in direction */\r\nexport\r\nfunction indexInDirection (pos: number, direction: Direction): number {\r\n  if (direction === DIRECTION.LEFT) --pos;\r\n  return pos;\r\n}\r\n\r\n/** Returns next char position in direction */\r\nexport\r\nfunction posInDirection (pos: number, direction: Direction): number {\r\n  switch (direction) {\r\n    case DIRECTION.LEFT:\r\n    case DIRECTION.FORCE_LEFT:\r\n      return --pos;\r\n    case DIRECTION.RIGHT:\r\n    case DIRECTION.FORCE_RIGHT:\r\n      return ++pos;\r\n    default:\r\n      return pos;\r\n  }\r\n}\r\n\r\n/** */\r\nexport\r\nfunction forceDirection (direction: Direction): Direction {\r\n  switch (direction) {\r\n    case DIRECTION.LEFT:\r\n      return DIRECTION.FORCE_LEFT;\r\n    case DIRECTION.RIGHT:\r\n      return DIRECTION.FORCE_RIGHT;\r\n    default:\r\n      return direction;\r\n  }\r\n}\r\n\r\n/** Escapes regular expression control chars */\r\nexport\r\nfunction escapeRegExp (str: string): string {\r\n  return str.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1');\r\n}\r\n\r\n\r\n// cloned from https://github.com/epoberezkin/fast-deep-equal with small changes\r\nexport\r\nfunction objectIncludes (b: any, a: any): boolean {\r\n  if (a === b) return true;\r\n\r\n  var arrA = Array.isArray(a)\r\n    , arrB = Array.isArray(b)\r\n    , i;\r\n\r\n  if (arrA && arrB) {\r\n    if (a.length != b.length) return false;\r\n    for (i = 0; i < a.length; i++)\r\n      if (!objectIncludes(a[i], b[i])) return false;\r\n    return true;\r\n  }\r\n\r\n  if (arrA != arrB) return false;\r\n\r\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\r\n    var dateA = a instanceof Date\r\n      , dateB = b instanceof Date;\r\n    if (dateA && dateB) return a.getTime() == b.getTime();\r\n    if (dateA != dateB) return false;\r\n\r\n    var regexpA = a instanceof RegExp\r\n      , regexpB = b instanceof RegExp;\r\n    if (regexpA && regexpB) return a.toString() == b.toString();\r\n    if (regexpA != regexpB) return false;\r\n\r\n    var keys = Object.keys(a);\r\n    // if (keys.length !== Object.keys(b).length) return false;\r\n\r\n    for (i = 0; i < keys.length; i++)\r\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\r\n\r\n    for (i = 0; i < keys.length; i++)\r\n      if(!objectIncludes(b[keys[i]], a[keys[i]])) return false;\r\n\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/* eslint-disable no-undef */\r\nexport\r\nconst g: any = typeof window !== 'undefined' && window ||\r\n  typeof global !== 'undefined' && global.global === global && global ||\r\n  typeof self !== 'undefined' && self.self === self && self ||\r\n  {};\r\n/* eslint-enable no-undef */\r\n\r\n/** Selection range */\r\nexport\r\ntype Selection = {\r\n  start: number;\r\n  end: number;\r\n};\r\n","// @flow\r\nimport {type Direction, type Selection, DIRECTION} from './utils.js';\r\n\r\n\r\n/** Provides details of changing input */\r\nexport default\r\nclass ActionDetails {\r\n  /** Current input value */\r\n  value: string;\r\n  /** Current cursor position */\r\n  cursorPos: number;\r\n  /** Old input value */\r\n  oldValue: string;\r\n  /** Old selection */\r\n  oldSelection: Selection;\r\n\r\n  constructor (\r\n    value: string,\r\n    cursorPos: number,\r\n    oldValue: string,\r\n    oldSelection: Selection\r\n  ) {\r\n    this.value = value;\r\n    this.cursorPos = cursorPos;\r\n    this.oldValue = oldValue;\r\n    this.oldSelection = oldSelection;\r\n\r\n    // double check if left part was changed (autofilling, other non-standard input triggers)\r\n    while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {\r\n      --this.oldSelection.start;\r\n    }\r\n  }\r\n\r\n  /**\r\n    Start changing position\r\n    @readonly\r\n  */\r\n  get startChangePos (): number {\r\n    return Math.min(this.cursorPos, this.oldSelection.start);\r\n  }\r\n\r\n  /**\r\n    Inserted symbols count\r\n    @readonly\r\n  */\r\n  get insertedCount (): number {\r\n    return this.cursorPos - this.startChangePos;\r\n  }\r\n\r\n  /**\r\n    Inserted symbols\r\n    @readonly\r\n  */\r\n  get inserted (): string {\r\n    return this.value.substr(this.startChangePos, this.insertedCount);\r\n  }\r\n\r\n  /**\r\n    Removed symbols count\r\n    @readonly\r\n  */\r\n  get removedCount (): number {\r\n    // Math.max for opposite operation\r\n    return Math.max((this.oldSelection.end - this.startChangePos) ||\r\n      // for Delete\r\n      this.oldValue.length - this.value.length, 0);\r\n  }\r\n\r\n  /**\r\n    Removed symbols\r\n    @readonly\r\n  */\r\n  get removed (): string {\r\n    return this.oldValue.substr(this.startChangePos, this.removedCount);\r\n  }\r\n\r\n  /**\r\n    Unchanged head symbols\r\n    @readonly\r\n  */\r\n  get head (): string {\r\n    return this.value.substring(0, this.startChangePos);\r\n  }\r\n\r\n  /**\r\n    Unchanged tail symbols\r\n    @readonly\r\n  */\r\n  get tail (): string {\r\n    return this.value.substring(this.startChangePos + this.insertedCount);\r\n  }\r\n\r\n  /**\r\n    Remove direction\r\n    @readonly\r\n  */\r\n  get removeDirection (): Direction {\r\n    if (!this.removedCount || this.insertedCount) return DIRECTION.NONE;\r\n\r\n    // align right if delete at right or if range removed (event with backspace)\r\n    return (this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos) ?\r\n      DIRECTION.RIGHT :\r\n      DIRECTION.LEFT;\r\n  }\r\n}\r\n","// @flow\r\n\r\n\r\n/**\r\n  Provides details of changing model value\r\n  @param {Object} [details]\r\n  @param {string} [details.inserted] - Inserted symbols\r\n  @param {boolean} [details.skip] - Can skip chars\r\n  @param {number} [details.removeCount] - Removed symbols count\r\n  @param {number} [details.tailShift] - Additional offset if any changes occurred before tail\r\n*/\r\nexport default\r\nclass ChangeDetails {\r\n  /** Inserted symbols */\r\n  inserted: string;\r\n  /** Can skip chars */\r\n  skip: boolean;\r\n  /** Additional offset if any changes occurred before tail */\r\n  tailShift: number;\r\n  /** Raw inserted is used by dynamic mask */\r\n  rawInserted: string;\r\n\r\n  constructor (details?: {\r\n    inserted?: $PropertyType<ChangeDetails, 'inserted'>,\r\n    rawInserted?: $PropertyType<ChangeDetails, 'rawInserted'>,\r\n    skip?: $PropertyType<ChangeDetails, 'skip'>,\r\n    tailShift?: $PropertyType<ChangeDetails, 'tailShift'>,\r\n  }) {\r\n    Object.assign(this, {\r\n      inserted: '',\r\n      rawInserted: '',\r\n      skip: false,\r\n      tailShift: 0,\r\n    }, details);\r\n  }\r\n\r\n  /**\r\n    Aggregate changes\r\n    @returns {ChangeDetails} `this`\r\n  */\r\n  aggregate (details: ChangeDetails): ChangeDetails {\r\n    this.rawInserted += details.rawInserted;\r\n    this.skip = this.skip || details.skip;\r\n    this.inserted += details.inserted;\r\n    this.tailShift += details.tailShift;\r\n    return this;\r\n  }\r\n\r\n  /** Total offset considering all changes */\r\n  get offset (): number {\r\n    return this.tailShift + this.inserted.length;\r\n  }\r\n}\r\n","// @flow\r\nimport ChangeDetails from '../core/change-details.js';\r\nimport {type Direction, DIRECTION} from '../core/utils.js';\r\nimport {type TailDetails} from '../core/tail-details.js';\r\n\r\n\r\n/** Supported mask type */\r\nexport\r\ntype Mask =\r\n  string |\r\n  String |\r\n  RegExp |\r\n  Class<Number> |\r\n  Class<Date> |\r\n  Array<any> |\r\n  $PropertyType<Masked<*>, 'validate'> |\r\n  Masked<*> |\r\n  Class<Masked<*>>;\r\n\r\nexport\r\ntype MaskedState = {|\r\n  _value: string,\r\n|};\r\n\r\n/** Append flags */\r\nexport\r\ntype AppendFlags = {\r\n  input?: boolean,\r\n  tail?: boolean,\r\n  raw?: boolean\r\n};\r\n\r\n/** Extract flags */\r\nexport\r\ntype ExtractFlags = {\r\n  raw?: boolean\r\n};\r\n\r\nexport\r\ntype MaskedOptions<MaskType> = {\r\n  mask: $PropertyType<Masked<MaskType>, 'mask'>,\r\n  parent?: $PropertyType<Masked<*>, 'parent'>,\r\n  prepare?: $PropertyType<Masked<MaskType>, 'prepare'>,\r\n  validate?: $PropertyType<Masked<MaskType>, 'validate'>,\r\n  commit?: $PropertyType<Masked<MaskType>, 'commit'>,\r\n};\r\n\r\n\r\n/** Provides common masking stuff */\r\nexport default\r\nclass Masked<MaskType> {\r\n  static DEFAULTS: any; // $Shape<MaskedOptions>; TODO after fix https://github.com/facebook/flow/issues/4773\r\n\r\n  /** @type {Mask} */\r\n  mask: MaskType;\r\n  /** */ // $FlowFixMe TODO no ideas\r\n  parent: ?Masked<*>;\r\n  /** Transforms value before mask processing */\r\n  prepare: (string, Masked<MaskType>, AppendFlags) => string;\r\n  /** Validates if value is acceptable */\r\n  validate: (string, Masked<MaskType>, AppendFlags) => boolean;\r\n  /** Does additional processing in the end of editing */\r\n  commit: (string, AppendFlags) => void;\r\n  /** */\r\n  isInitialized: boolean;\r\n  _value: string;\r\n  _refreshing: boolean;\r\n  _beforeTailState: ?MaskedState;\r\n\r\n  constructor (opts: {[string]: any}) {\r\n    this._value = '';\r\n    this._update(opts);\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  /** Sets and applies new options */\r\n  updateOptions (opts: {[string]: any}) {\r\n    if (!Object.keys(opts).length) return;\r\n    this.withValueRefresh(this._update.bind(this, opts));\r\n  }\r\n\r\n  /**\r\n    Sets new options\r\n    @protected\r\n  */\r\n  _update (opts: {[string]: any}) {\r\n    Object.assign(this, opts);\r\n  }\r\n\r\n  /** Mask state */\r\n  get state (): any {\r\n    return {\r\n      _value: this.value,\r\n    };\r\n  }\r\n\r\n  set state (state: any) {\r\n    this._value = state._value;\r\n  }\r\n\r\n  /** Resets value */\r\n  reset () {\r\n    this._value = '';\r\n  }\r\n\r\n  /** */\r\n  get value (): string {\r\n    return this._value;\r\n  }\r\n\r\n  set value (value: string) {\r\n    this.resolve(value);\r\n  }\r\n\r\n  /** Resolve new value */\r\n  resolve (value: string): string {\r\n    this.reset();\r\n    this.append(value, {input: true}, {value: ''});\r\n    this.doCommit();\r\n    return this.value;\r\n  }\r\n\r\n  /** */\r\n  get unmaskedValue (): string {\r\n    return this.value;\r\n  }\r\n\r\n  set unmaskedValue (value: string) {\r\n    this.reset();\r\n    this.append(value, {}, {value: ''});\r\n    this.doCommit();\r\n  }\r\n\r\n  /** */\r\n  get typedValue (): any {\r\n    return this.unmaskedValue;\r\n  }\r\n\r\n  set typedValue (value: any) {\r\n    this.unmaskedValue = value;\r\n  }\r\n\r\n  /** Value that includes raw user input */\r\n  get rawInputValue (): string {\r\n    return this.extractInput(0, this.value.length, {raw: true});\r\n  }\r\n\r\n  set rawInputValue (value: string) {\r\n    this.reset();\r\n    this.append(value, {raw: true}, {value: ''});\r\n    this.doCommit();\r\n  }\r\n\r\n  /** */\r\n  get isComplete (): boolean {\r\n    return true;\r\n  }\r\n\r\n  /** Finds nearest input position in direction */\r\n  nearestInputPos (cursorPos: number, direction?: Direction): number {\r\n    return cursorPos;\r\n  }\r\n\r\n  /** Extracts value in range considering flags */\r\n  extractInput (fromPos?: number=0, toPos?: number=this.value.length, flags?: ExtractFlags): string {\r\n    return this.value.slice(fromPos, toPos);\r\n  }\r\n\r\n  /** Extracts tail in range */\r\n  extractTail (fromPos?: number=0, toPos?: number=this.value.length): TailDetails {\r\n    return {\r\n      value: this.extractInput(fromPos, toPos),\r\n    };\r\n  }\r\n\r\n  /** Stores state before tail */\r\n  _storeBeforeTailState () {\r\n    this._beforeTailState = this.state;\r\n  }\r\n\r\n  /** Restores state before tail */\r\n  _restoreBeforeTailState () {\r\n    this.state = this._beforeTailState;\r\n  }\r\n\r\n  /** Resets state before tail */\r\n  _resetBeforeTailState () {\r\n    this._beforeTailState = null;\r\n  }\r\n\r\n  /** Appends tail */\r\n  appendTail (tail?: TailDetails): ChangeDetails {\r\n    return this.append(tail ? tail.value: '', {tail: true});\r\n  }\r\n\r\n  /** Appends char */\r\n  _appendCharRaw (ch: string, flags: AppendFlags={}): ChangeDetails {\r\n    this._value += ch;\r\n    return new ChangeDetails({\r\n      inserted: ch,\r\n      rawInserted: ch,\r\n    });\r\n  }\r\n\r\n  /** Appends char */\r\n  _appendChar (ch: string, flags: AppendFlags={}, checkTail?: TailDetails): ChangeDetails {\r\n    ch = this.doPrepare(ch, flags);\r\n    if (!ch) return new ChangeDetails();\r\n\r\n    const consistentState: MaskedState = this.state;\r\n    const details: ChangeDetails = this._appendCharRaw(ch, flags);\r\n\r\n    if (details.inserted) {\r\n      let appended = this.doValidate(flags) !== false;\r\n\r\n      if (appended && checkTail != null) {\r\n        // validation ok, check tail\r\n        this._storeBeforeTailState();\r\n\r\n        const tailDetails = this.appendTail(checkTail);\r\n\r\n        appended = tailDetails.rawInserted === checkTail.value;\r\n\r\n        // if ok, rollback state after tail\r\n        if (appended && tailDetails.inserted) this._restoreBeforeTailState();\r\n      }\r\n\r\n      // revert all if something went wrong\r\n      if (!appended) {\r\n        details.rawInserted = details.inserted = '';\r\n        this.state = consistentState;\r\n      }\r\n    }\r\n    return details;\r\n  }\r\n\r\n  /** Appends symbols considering flags */\r\n  append (str: string, flags?: AppendFlags, tail?: TailDetails): ChangeDetails {\r\n    const oldValueLength = this.value.length;\r\n    const details = new ChangeDetails();\r\n\r\n    for (let ci=0; ci<str.length; ++ci) {\r\n      details.aggregate(this._appendChar(str[ci], flags, tail));\r\n    }\r\n\r\n    // append tail but aggregate only tailShift\r\n    if (tail != null) {\r\n      this._storeBeforeTailState();\r\n      details.tailShift += this.appendTail(tail).tailShift;\r\n      // TODO it's a good idea to clear state after appending ends\r\n      // but it causes bugs when one append calls another (when dynamic dispatch set rawInputValue)\r\n      // this._resetBeforeTailState();\r\n    }\r\n\r\n    return details;\r\n  }\r\n\r\n  /** */\r\n  remove (fromPos?: number=0, toPos?: number=this.value.length): ChangeDetails {\r\n    this._value = this.value.slice(0, fromPos) + this.value.slice(toPos);\r\n    return new ChangeDetails();\r\n  }\r\n\r\n  /** Calls function and reapplies current value */\r\n  withValueRefresh<T>(fn: () => T): T {\r\n    if (this._refreshing || !this.isInitialized) return fn();\r\n    this._refreshing = true;\r\n\r\n    const unmasked = this.unmaskedValue;\r\n    const value = this.value;\r\n\r\n    const ret = fn();\r\n\r\n    // try to update with raw value first to keep fixed chars\r\n    if (this.resolve(value) !== value) {\r\n      // or fallback to unmasked\r\n      this.unmaskedValue = unmasked;\r\n    }\r\n\r\n    delete this._refreshing;\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n    Prepares string before mask processing\r\n    @protected\r\n  */\r\n  doPrepare (str: string, flags: AppendFlags={}): string {\r\n    return this.prepare ?\r\n      this.prepare(str, this, flags) :\r\n      str;\r\n  }\r\n\r\n  /**\r\n    Validates if value is acceptable\r\n    @protected\r\n  */\r\n  doValidate (flags: AppendFlags): boolean {\r\n    return (!this.validate || this.validate(this.value, this, flags)) &&\r\n      (!this.parent || this.parent.doValidate(flags));\r\n  }\r\n\r\n  /**\r\n    Does additional processing in the end of editing\r\n    @protected\r\n  */\r\n  doCommit () {\r\n    if (this.commit) this.commit(this.value, this);\r\n  }\r\n\r\n  /** */\r\n  splice (start: number, deleteCount: number, inserted: string, removeDirection: Direction): ChangeDetails {\r\n    const tailPos: number = start + deleteCount;\r\n    const tail: TailDetails = this.extractTail(tailPos);\r\n\r\n    let startChangePos: number = this.nearestInputPos(start, removeDirection);\r\n    const changeDetails: ChangeDetails = new ChangeDetails({\r\n      tailShift: startChangePos - start  // adjust tailShift if start was aligned\r\n    }).aggregate(this.remove(startChangePos))\r\n      .aggregate(this.append(inserted, {input: true}, tail));\r\n\r\n    return changeDetails;\r\n  }\r\n}\r\n","// @flow\r\nimport {g, isString} from '../core/utils.js';\r\nimport type Masked from './base.js';\r\nimport {type Mask} from './base.js';\r\n\r\n\r\n/** Get Masked class by mask type */\r\nexport\r\nfunction maskedClass (mask: Mask): Class<Masked<*>> {\r\n  if (mask == null) {\r\n    throw new Error('mask property should be defined');\r\n  }\r\n\r\n  if (mask instanceof RegExp) return g.IMask.MaskedRegExp;\r\n  if (isString(mask)) return g.IMask.MaskedPattern;\r\n  if (mask instanceof Date || mask === Date) return g.IMask.MaskedDate;\r\n  if (mask instanceof Number || typeof mask === 'number' || mask === Number) return g.IMask.MaskedNumber;\r\n  if (Array.isArray(mask) || mask === Array) return g.IMask.MaskedDynamic;\r\n  // $FlowFixMe\r\n  if (mask.prototype instanceof g.IMask.Masked) return mask;\r\n  // $FlowFixMe\r\n  if (mask instanceof Function) return g.IMask.MaskedFunction;\r\n\r\n  console.warn('Mask not found for mask', mask);  // eslint-disable-line no-console\r\n  return g.IMask.Masked;\r\n}\r\n\r\n/** Creates new {@link Masked} depending on mask type */\r\nexport default\r\nfunction createMask (opts: {mask: Mask}): Masked<*> {\r\n  opts = {...opts};\r\n  const mask = opts.mask;\r\n\r\n  if (mask instanceof g.IMask.Masked) return mask;\r\n\r\n  const MaskedClass = maskedClass(mask);\r\n  return new MaskedClass(opts);\r\n}\r\n","// @flow\r\nimport createMask from '../factory.js';\r\nimport type Masked from '../base.js';\r\nimport type MaskedPattern from '../pattern.js';\r\nimport {type TailDetails} from '../../core/tail-details.js';\r\nimport {type Mask, type ExtractFlags, type AppendFlags} from '../base.js';\r\nimport ChangeDetails from '../../core/change-details.js';\r\nimport {DIRECTION, type Direction} from '../../core/utils.js';\r\nimport {type PatternBlock} from './block.js';\r\n\r\n\r\nexport\r\ntype Definitions = {[string]: Mask};\r\n\r\n/** */\r\ntype PatternInputDefinitionOptions = {\r\n  parent: $PropertyType<PatternInputDefinition, 'parent'>,\r\n  mask: Mask,\r\n  isOptional: $PropertyType<PatternInputDefinition, 'isOptional'>,\r\n  lazy: $PropertyType<PatternInputDefinition, 'lazy'>,\r\n  placeholderChar: $PropertyType<PatternInputDefinition, 'placeholderChar'>,\r\n};\r\n\r\ntype PatternInputDefinitionState = {\r\n  masked: *,\r\n  _isFilled: boolean,\r\n};\r\n\r\nexport\r\nconst DEFAULT_INPUT_DEFINITIONS = {\r\n  '0': /\\d/,\r\n  'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,  // http://stackoverflow.com/a/22075070\r\n  '*': /./\r\n};\r\n\r\n\r\n/** */\r\nexport default\r\nclass PatternInputDefinition implements PatternBlock {\r\n  /** */\r\n  +masked: Masked<*>;\r\n  /** */\r\n  parent: Masked<*>;\r\n  /** */\r\n  isOptional: boolean;\r\n  /** */\r\n  _isFilled: boolean;\r\n  /** */\r\n  lazy: $PropertyType<MaskedPattern, 'lazy'>;\r\n  /** */\r\n  placeholderChar: $PropertyType<MaskedPattern, 'placeholderChar'>;\r\n\r\n\r\n  constructor(opts: PatternInputDefinitionOptions) {\r\n    const {mask, ...blockOpts} = opts;\r\n\r\n    this.masked = createMask({mask});\r\n    Object.assign(this, blockOpts);\r\n  }\r\n\r\n  reset () {\r\n    this._isFilled = false;\r\n    this.masked.reset();\r\n  }\r\n\r\n  remove (fromPos?: number=0, toPos?: number=this.value.length): ChangeDetails {\r\n    if (fromPos === 0 && toPos >= 1) {\r\n      this._isFilled = false;\r\n      return this.masked.remove(fromPos, toPos);\r\n    }\r\n\r\n    return new ChangeDetails();\r\n  }\r\n\r\n  get value (): string {\r\n    return this.masked.value ||\r\n      (this._isFilled && !this.isOptional ?\r\n        this.placeholderChar :\r\n        '');\r\n  }\r\n\r\n  get unmaskedValue (): string {\r\n    return this.masked.unmaskedValue;\r\n  }\r\n\r\n  get isComplete (): boolean {\r\n    return Boolean(this.masked.value) || this.isOptional;\r\n  }\r\n\r\n  _appendChar (str: string, flags: AppendFlags={}): ChangeDetails {\r\n    if (this._isFilled) return new ChangeDetails();\r\n\r\n    const state = this.masked.state;\r\n    // simulate input\r\n    const details = this.masked._appendChar(str, flags);\r\n\r\n    if (details.inserted && this.doValidate(flags) === false) {\r\n      details.inserted = details.rawInserted = '';\r\n      this.masked.state = state;\r\n    }\r\n\r\n    if (!details.inserted && !this.isOptional && !this.lazy && !flags.input) {\r\n      details.inserted = this.placeholderChar;\r\n    }\r\n    details.skip = !details.inserted && !this.isOptional;\r\n    this._isFilled = Boolean(details.inserted);\r\n\r\n    return details;\r\n  }\r\n\r\n  _appendPlaceholder (): ChangeDetails {\r\n    const details = new ChangeDetails();\r\n\r\n    if (this._isFilled || this.isOptional) return details;\r\n\r\n    this._isFilled = true;\r\n    details.inserted = this.placeholderChar;\r\n    return details;\r\n  }\r\n\r\n  extractTail (...args: *): TailDetails {\r\n    return this.masked.extractTail(...args);\r\n  }\r\n\r\n  appendTail (...args: *): ChangeDetails {\r\n    return this.masked.appendTail(...args);\r\n  }\r\n\r\n  extractInput (fromPos?: number=0, toPos?: number=this.value.length, flags?: ExtractFlags): string {\r\n    return this.masked.extractInput(fromPos, toPos, flags);\r\n  }\r\n\r\n  nearestInputPos (cursorPos: number, direction: Direction=DIRECTION.NONE): number {\r\n    const minPos = 0;\r\n    const maxPos = this.value.length;\r\n    const boundPos = Math.min(Math.max(cursorPos, minPos), maxPos);\r\n\r\n    switch (direction) {\r\n      case DIRECTION.LEFT:\r\n      case DIRECTION.FORCE_LEFT:\r\n        return this.isComplete ? boundPos : minPos;\r\n      case DIRECTION.RIGHT:\r\n      case DIRECTION.FORCE_RIGHT:\r\n        return this.isComplete ? boundPos : maxPos;\r\n      case DIRECTION.NONE:\r\n      default: return boundPos;\r\n    }\r\n  }\r\n\r\n  doValidate (...args: *) {\r\n    return this.masked.doValidate(...args) && (\r\n      !this.parent || this.parent.doValidate(...args));\r\n  }\r\n\r\n  doCommit () {\r\n    this.masked.doCommit();\r\n  }\r\n\r\n  get state (): PatternInputDefinitionState {\r\n    return {\r\n      masked: this.masked.state,\r\n      _isFilled: this._isFilled,\r\n    };\r\n  }\r\n\r\n  set state (state: PatternInputDefinitionState) {\r\n    this.masked.state = state.masked;\r\n    this._isFilled = state._isFilled;\r\n  }\r\n}\r\n","// @flow\r\nimport ChangeDetails from '../../core/change-details.js';\r\nimport {DIRECTION, type Direction} from '../../core/utils.js';\r\nimport {type TailDetails} from '../../core/tail-details.js';\r\nimport {type ExtractFlags, type AppendFlags, type MaskedState} from '../base.js';\r\nimport {type PatternBlock} from './block.js';\r\n\r\n\r\n/** */\r\ntype PatternFixedDefinitionOptions = {\r\n  char: $PropertyType<PatternFixedDefinition, 'char'>,\r\n  isUnmasking?: $PropertyType<PatternFixedDefinition, 'isUnmasking'>,\r\n};\r\n\r\ntype PatternFixedDefinitionState = {|\r\n  ...MaskedState,\r\n  _isRawInput: ?boolean,\r\n|};\r\n\r\nexport default\r\nclass PatternFixedDefinition implements PatternBlock {\r\n  /** */\r\n  _value: string;\r\n  /** */\r\n  char: string;\r\n  /** */\r\n  isUnmasking: ?boolean;\r\n  /** */\r\n  _isRawInput: ?boolean;\r\n\r\n  constructor(opts: PatternFixedDefinitionOptions) {\r\n    Object.assign(this, opts);\r\n    this._value = '';\r\n  }\r\n\r\n  get value (): string {\r\n    return this._value;\r\n  }\r\n\r\n  get unmaskedValue (): string {\r\n    return this.isUnmasking ? this.value : '';\r\n  }\r\n\r\n  reset () {\r\n    this._isRawInput = false;\r\n    this._value = '';\r\n  }\r\n\r\n  remove (fromPos?: number=0, toPos?: number=this._value.length): ChangeDetails {\r\n    this._value = this._value.slice(0, fromPos) + this._value.slice(toPos);\r\n    if (!this._value) this._isRawInput = false;\r\n\r\n    return new ChangeDetails();\r\n  }\r\n\r\n  nearestInputPos (cursorPos: number, direction: Direction=DIRECTION.NONE): number {\r\n    const minPos = 0;\r\n    const maxPos = this._value.length;\r\n\r\n    switch (direction) {\r\n      case DIRECTION.LEFT:\r\n      case DIRECTION.FORCE_LEFT:\r\n        return minPos;\r\n      case DIRECTION.NONE:\r\n      case DIRECTION.RIGHT:\r\n      case DIRECTION.FORCE_RIGHT:\r\n      default: return maxPos;\r\n    }\r\n  }\r\n\r\n  extractInput (fromPos?: number=0, toPos?: number=this._value.length, flags?: ExtractFlags={}) {\r\n    return flags.raw && this._isRawInput && this._value.slice(fromPos, toPos) || '';\r\n  }\r\n\r\n  get isComplete (): boolean {\r\n    return true;\r\n  }\r\n\r\n  _appendChar (str: string, flags: AppendFlags) {\r\n    const details = new ChangeDetails();\r\n\r\n    if (this._value) return details;\r\n\r\n    const appended = this.char === str[0];\r\n    const isResolved = appended && (this.isUnmasking || flags.input || flags.raw) && !flags.tail;\r\n    if (isResolved) details.rawInserted = this.char;\r\n    this._value = details.inserted = this.char;\r\n    this._isRawInput = isResolved && (flags.raw || flags.input);\r\n\r\n    return details;\r\n  }\r\n\r\n  _appendPlaceholder (): ChangeDetails {\r\n    const details = new ChangeDetails();\r\n    if (this._value) return details;\r\n\r\n    this._value = details.inserted = this.char;\r\n    return details;\r\n  }\r\n\r\n  extractTail (fromPos?: number=0, toPos?: number=this.value.length): TailDetails {\r\n    return {\r\n      value: '',\r\n    };\r\n  }\r\n\r\n  appendTail (tail?: TailDetails): ChangeDetails {\r\n    return this._appendChar(tail ? tail.value: '', {tail: true});\r\n  }\r\n\r\n  doCommit () {}\r\n\r\n  get state (): PatternFixedDefinitionState {\r\n    return {\r\n      _value: this._value,\r\n      _isRawInput: this._isRawInput,\r\n    };\r\n  }\r\n\r\n  set state (state: PatternFixedDefinitionState) {\r\n    Object.assign(this, state);\r\n  }\r\n}\r\n","// @flow\r\nimport {type TailDetails} from '../../core/tail-details.js';\r\n\r\n\r\nexport\r\ntype TailInputChunk = TailDetails | ChunksTailDetails;\r\n\r\nexport\r\nclass ChunksTailDetails implements TailDetails {\r\n  chunks: Array<TailInputChunk>;\r\n  index: ?number;\r\n\r\n  constructor (chunks: Array<TailInputChunk>) {\r\n    this.chunks = chunks;\r\n  }\r\n\r\n  get value (): string {\r\n    return this.chunks.map(c => c.value).join('');\r\n  }\r\n}\r\n","// @flow\r\nimport {DIRECTION, type Direction, forceDirection} from '../core/utils.js';\r\nimport ChangeDetails from '../core/change-details.js';\r\nimport Masked, {type AppendFlags, type ExtractFlags, type MaskedOptions, type MaskedState} from './base.js';\r\nimport PatternInputDefinition, {DEFAULT_INPUT_DEFINITIONS, type Definitions} from './pattern/input-definition.js';\r\nimport PatternFixedDefinition from './pattern/fixed-definition.js';\r\nimport {ChunksTailDetails, type TailInputChunk} from './pattern/chunk-tail-details.js';\r\nimport {type TailDetails} from '../core/tail-details.js';\r\nimport {type PatternBlock} from './pattern/block.js';\r\nimport createMask from './factory.js';\r\n\r\n\r\ntype MaskedPatternOptions = {\r\n  ...MaskedOptions<string>,\r\n  definitions: $PropertyType<MaskedPattern, 'definitions'>,\r\n  blocks: $PropertyType<MaskedPattern, 'blocks'>,\r\n  placeholderChar: $PropertyType<MaskedPattern, 'placeholderChar'>,\r\n  lazy: $PropertyType<MaskedPattern, 'lazy'>,\r\n};\r\n\r\ntype MaskedPatternState = {|\r\n  ...MaskedState,\r\n  _blocks: Array<*>,\r\n|};\r\n\r\ntype BlockPosData = {\r\n  index: number,\r\n  offset: number,\r\n};\r\n\r\n/**\r\n  Pattern mask\r\n  @param {Object} opts\r\n  @param {Object} opts.blocks\r\n  @param {Object} opts.definitions\r\n  @param {string} opts.placeholderChar\r\n  @param {boolean} opts.lazy\r\n*/\r\nexport default\r\nclass MaskedPattern extends Masked<string> {\r\n  static DEFAULTS: any;\r\n  static STOP_CHAR: string;\r\n  static ESCAPE_CHAR: string;\r\n  static InputDefinition: Class<PatternInputDefinition>;\r\n  static FixedDefinition: Class<PatternFixedDefinition>;\r\n\r\n  /** */\r\n  blocks: {[string]: Masked<*>};\r\n  /** */\r\n  definitions: Definitions;\r\n  /** Single char for empty input */\r\n  placeholderChar: string;\r\n  /** Show placeholder only when needed */\r\n  lazy: boolean;\r\n  _blocks: Array<PatternBlock>;\r\n  _maskedBlocks: {[string]: Array<number>};\r\n  _stops: Array<number>;\r\n\r\n  constructor (opts: any={}) {  // TODO type $Shape<MaskedPatternOptions>={} does not work\r\n    opts.definitions = Object.assign({}, DEFAULT_INPUT_DEFINITIONS, opts.definitions);\r\n    super({\r\n      ...MaskedPattern.DEFAULTS,\r\n      ...opts\r\n    });\r\n  }\r\n\r\n  /**\r\n    @override\r\n    @param {Object} opts\r\n  */\r\n  _update (opts: $Shape<MaskedPatternOptions>={}) {\r\n    opts.definitions = Object.assign({}, this.definitions, opts.definitions);\r\n    super._update(opts);\r\n    this._rebuildMask();\r\n  }\r\n\r\n  /** */\r\n  _rebuildMask () {\r\n    const defs = this.definitions;\r\n    this._blocks = [];\r\n    this._stops = [];\r\n    this._maskedBlocks = {};\r\n\r\n    let pattern = this.mask;\r\n    if (!pattern || !defs) return;\r\n\r\n    let unmaskingBlock = false;\r\n    let optionalBlock = false;\r\n\r\n    for (let i=0; i<pattern.length; ++i) {\r\n      if (this.blocks) {\r\n        const p = pattern.slice(i);\r\n        const bNames = Object.keys(this.blocks).filter(bName => p.indexOf(bName) === 0);\r\n        // order by key length\r\n        bNames.sort((a, b) => b.length - a.length);\r\n        // use block name with max length\r\n        const bName = bNames[0];\r\n        if (bName) {\r\n          const maskedBlock = createMask({\r\n            parent: this,\r\n            lazy: this.lazy,\r\n            placeholderChar: this.placeholderChar,\r\n            ...this.blocks[bName]\r\n          });\r\n\r\n          if (maskedBlock) {\r\n            this._blocks.push(maskedBlock);\r\n\r\n            // store block index\r\n            if (!this._maskedBlocks[bName]) this._maskedBlocks[bName] = [];\r\n            this._maskedBlocks[bName].push(this._blocks.length - 1);\r\n          }\r\n\r\n          i += bName.length - 1;\r\n          continue;\r\n        }\r\n      }\r\n\r\n      let char = pattern[i];\r\n      let isInput = char in defs;\r\n\r\n      if (char === MaskedPattern.STOP_CHAR) {\r\n        this._stops.push(this._blocks.length);\r\n        continue;\r\n      }\r\n\r\n      if (char === '{' || char === '}') {\r\n        unmaskingBlock = !unmaskingBlock;\r\n        continue;\r\n      }\r\n\r\n      if (char === '[' || char === ']') {\r\n        optionalBlock = !optionalBlock;\r\n        continue;\r\n      }\r\n\r\n      if (char === MaskedPattern.ESCAPE_CHAR) {\r\n        ++i;\r\n        char = pattern[i];\r\n        if (!char) break;\r\n        isInput = false;\r\n      }\r\n\r\n      let def;\r\n      if (isInput) {\r\n        def = new PatternInputDefinition({\r\n          parent: this,\r\n          lazy: this.lazy,\r\n          placeholderChar: this.placeholderChar,\r\n          mask: defs[char],\r\n          isOptional: optionalBlock,\r\n        });\r\n      } else {\r\n        def = new PatternFixedDefinition({\r\n          char,\r\n          isUnmasking: unmaskingBlock,\r\n        });\r\n      }\r\n\r\n      this._blocks.push(def);\r\n    }\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  get state (): MaskedPatternState {\r\n    return {\r\n      ...super.state,\r\n      _blocks: this._blocks.map(b => b.state),\r\n    };\r\n  }\r\n\r\n  set state (state: MaskedPatternState) {\r\n    const {_blocks, ...maskedState} = state;\r\n    this._blocks.forEach((b, bi) => b.state = _blocks[bi]);\r\n    super.state = maskedState;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  _storeBeforeTailState () {\r\n    this._blocks.forEach(b => {\r\n      // $FlowFixMe _storeBeforeTailState is not exist in PatternBlock\r\n      if (typeof b._storeBeforeTailState === 'function') {\r\n        b._storeBeforeTailState();\r\n      }\r\n    });\r\n    super._storeBeforeTailState();\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  _restoreBeforeTailState () {\r\n    this._blocks.forEach(b => {\r\n      // $FlowFixMe _restoreBeforeTailState is not exist in PatternBlock\r\n      if (typeof b._restoreBeforeTailState === 'function') {\r\n        b._restoreBeforeTailState();\r\n      }\r\n    });\r\n    super._restoreBeforeTailState();\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  _resetBeforeTailState () {\r\n    this._blocks.forEach(b => {\r\n      // $FlowFixMe _resetBeforeTailState is not exist in PatternBlock\r\n      if (typeof b._resetBeforeTailState === 'function') {\r\n        b._resetBeforeTailState();\r\n      }\r\n    });\r\n    super._resetBeforeTailState();\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  reset () {\r\n    super.reset();\r\n    this._blocks.forEach(b => b.reset());\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  get isComplete (): boolean {\r\n    return this._blocks.every(b => b.isComplete);\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  doCommit () {\r\n    this._blocks.forEach(b => b.doCommit());\r\n    super.doCommit();\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  get unmaskedValue (): string {\r\n    return this._blocks.reduce((str, b) => str += b.unmaskedValue, '');\r\n  }\r\n\r\n  set unmaskedValue (unmaskedValue: string) {\r\n    super.unmaskedValue = unmaskedValue;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  get value (): string {\r\n    // TODO return _value when not in change?\r\n    return this._blocks.reduce((str, b) => str += b.value, '');\r\n  }\r\n\r\n  set value (value: string) {\r\n    super.value = value;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  appendTail (tail?: ChunksTailDetails | TailDetails): ChangeDetails {\r\n    const details = new ChangeDetails();\r\n    if (tail) {\r\n      details.aggregate(tail instanceof ChunksTailDetails ?\r\n        this._appendTailChunks(tail.chunks) :\r\n        super.appendTail(tail));\r\n    }\r\n    return details.aggregate(this._appendPlaceholder());\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  _appendCharRaw (ch: string, flags: AppendFlags={}): ChangeDetails {\r\n    const blockData = this._mapPosToBlock(this.value.length);\r\n    const details = new ChangeDetails();\r\n    if (!blockData) return details;\r\n\r\n    for (let bi=blockData.index; ; ++bi) {\r\n      const block = this._blocks[bi];\r\n      if (!block) break;\r\n\r\n      const blockDetails = block._appendChar(ch, flags);\r\n\r\n      const skip = blockDetails.skip;\r\n      details.aggregate(blockDetails);\r\n\r\n      if (skip || blockDetails.rawInserted) break; // go next char\r\n    }\r\n\r\n    return details;\r\n  }\r\n\r\n  /** Appends chunks splitted by stop chars */\r\n  _appendTailChunks (chunks: Array<TailInputChunk>) {\r\n    const details = new ChangeDetails();\r\n\r\n    for (let ci=0; ci < chunks.length && !details.skip; ++ci) {\r\n      const chunk = chunks[ci];\r\n\r\n      const lastBlock = this._mapPosToBlock(this.value.length);\r\n      const chunkBlock = chunk instanceof ChunksTailDetails &&\r\n        chunk.index != null &&\r\n        (!lastBlock || lastBlock.index <= chunk.index) &&\r\n        this._blocks[chunk.index];\r\n      if (chunkBlock) {\r\n        // $FlowFixMe we already check index above\r\n        details.aggregate(this._appendPlaceholder(chunk.index));\r\n\r\n        const tailDetails = chunkBlock.appendTail(chunk);\r\n        tailDetails.skip = false; // always ignore skip, it will be set on last\r\n        details.aggregate(tailDetails);\r\n        this._value += tailDetails.inserted;\r\n\r\n        // get not inserted chars\r\n        const remainChars = chunk.value.slice(tailDetails.rawInserted.length);\r\n        if (remainChars) details.aggregate(this.append(remainChars, {tail: true}));\r\n      } else {\r\n        const {stop, value} = (chunk: any);\r\n        if (stop != null && this._stops.indexOf(stop) >= 0) details.aggregate(this._appendPlaceholder(stop));\r\n        details.aggregate(this.append(value, {tail: true}));\r\n      }\r\n    };\r\n\r\n    return details;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  extractTail (fromPos?: number=0, toPos?: number=this.value.length): ChunksTailDetails {\r\n    return new ChunksTailDetails(this._extractTailChunks(fromPos, toPos));\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  extractInput (fromPos?: number=0, toPos?: number=this.value.length, flags: ExtractFlags={}): string {\r\n    if (fromPos === toPos) return '';\r\n\r\n    let input = '';\r\n\r\n    this._forEachBlocksInRange(fromPos, toPos, (b, _, fromPos, toPos) => {\r\n      input += b.extractInput(fromPos, toPos, flags);\r\n    });\r\n\r\n    return input;\r\n  }\r\n\r\n  /** Extracts chunks from input splitted by stop chars */\r\n  _extractTailChunks (fromPos: number=0, toPos: number=this.value.length): Array<TailInputChunk> {\r\n    if (fromPos === toPos) return [];\r\n\r\n    const chunks = [];\r\n    let lastChunk;\r\n    this._forEachBlocksInRange(fromPos, toPos, (b, bi, fromPos, toPos) => {\r\n      const blockChunk = b.extractTail(fromPos, toPos);\r\n\r\n      let nearestStop;\r\n      for (let si=0; si<this._stops.length; ++si) {\r\n        const stop = this._stops[si];\r\n        if (stop <= bi) nearestStop = stop;\r\n        else break;\r\n      }\r\n\r\n      if (blockChunk instanceof ChunksTailDetails) {\r\n        // TODO append to lastChunk with same index\r\n        if (nearestStop == null) {\r\n          // try append floating chunks to existed lastChunk\r\n          let headFloatChunksCount = blockChunk.chunks.length;\r\n          for (let ci=0; ci< blockChunk.chunks.length; ++ci) {\r\n            if (blockChunk.chunks[ci].stop != null) {\r\n              headFloatChunksCount = ci;\r\n              break;\r\n            }\r\n          }\r\n\r\n          const headFloatChunks = blockChunk.chunks.splice(0, headFloatChunksCount);\r\n          headFloatChunks\r\n            .filter(chunk => chunk.value)\r\n            .forEach(chunk => {\r\n              if (lastChunk) lastChunk.value += chunk.value;\r\n              // will flat nested chunks\r\n              else lastChunk = ({value: chunk.value}: TailDetails);\r\n            });\r\n        }\r\n\r\n        // if block chunk has stops\r\n        if (blockChunk.chunks.length) {\r\n          if (lastChunk) chunks.push(lastChunk);\r\n          blockChunk.index = nearestStop;\r\n          chunks.push(blockChunk);\r\n          // we cant append to ChunksTailDetails, so just reset lastChunk to force adding new\r\n          lastChunk = null;\r\n        }\r\n      } else {\r\n        if (nearestStop != null) {\r\n          // on middle chunks consider stop flag and do not consider value\r\n          // add block even if it is empty\r\n          if (lastChunk) chunks.push(lastChunk);\r\n          blockChunk.stop = nearestStop;\r\n        } else if (lastChunk) {\r\n          lastChunk.value += blockChunk.value;\r\n          return;\r\n        }\r\n        lastChunk = blockChunk;\r\n      }\r\n    });\r\n\r\n    if (lastChunk && lastChunk.value) chunks.push(lastChunk);\r\n\r\n    return chunks;\r\n  }\r\n\r\n  /** Appends placeholder depending on laziness */\r\n  _appendPlaceholder (toBlockIndex: ?number): ChangeDetails {\r\n    const details = new ChangeDetails();\r\n    if (this.lazy && toBlockIndex == null) return details;\r\n\r\n    const startBlockData = this._mapPosToBlock(this.value.length);\r\n    if (!startBlockData) return details;\r\n\r\n    const startBlockIndex = startBlockData.index;\r\n    const endBlockIndex = toBlockIndex != null ? toBlockIndex : this._blocks.length;\r\n\r\n    this._blocks.slice(startBlockIndex, endBlockIndex)\r\n      .forEach(b => {\r\n        if (typeof b._appendPlaceholder === 'function') {\r\n          // $FlowFixMe `_blocks` may not be present\r\n          const args = b._blocks != null ? [b._blocks.length] : [];\r\n          const bDetails = b._appendPlaceholder.apply(b, args);\r\n          this._value += bDetails.inserted;\r\n          details.aggregate(bDetails);\r\n        }\r\n      });\r\n\r\n    return details;\r\n  }\r\n\r\n  /** Finds block in pos */\r\n  _mapPosToBlock (pos: number): ?BlockPosData {\r\n    let accVal = '';\r\n    for (let bi=0; bi<this._blocks.length; ++bi) {\r\n      const block = this._blocks[bi];\r\n      const blockStartPos = accVal.length;\r\n\r\n      accVal += block.value;\r\n\r\n      if (pos <= accVal.length) {\r\n        return {\r\n          index: bi,\r\n          offset: pos - blockStartPos,\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  /** */\r\n  _blockStartPos (blockIndex: number): number {\r\n    return this._blocks\r\n      .slice(0, blockIndex)\r\n      .reduce((pos, b) => pos += b.value.length, 0);\r\n  }\r\n\r\n  /** */\r\n  _forEachBlocksInRange (fromPos: number, toPos: number=this.value.length, fn: (block: PatternBlock, blockIndex: number, fromPos?: number, toPos?: number) => void) {\r\n    const fromBlock = this._mapPosToBlock(fromPos);\r\n\r\n    if (fromBlock) {\r\n      const toBlock = this._mapPosToBlock(toPos);\r\n      // process first block\r\n      const isSameBlock = toBlock && fromBlock.index === toBlock.index;\r\n      const fromBlockRemoveBegin = fromBlock.offset;\r\n      const fromBlockRemoveEnd = toBlock && isSameBlock ? toBlock.offset : undefined;\r\n      fn(this._blocks[fromBlock.index], fromBlock.index, fromBlockRemoveBegin, fromBlockRemoveEnd);\r\n\r\n      if (toBlock && !isSameBlock) {\r\n        // process intermediate blocks\r\n        for (let bi=fromBlock.index+1; bi<toBlock.index; ++bi) {\r\n          fn(this._blocks[bi], bi);\r\n        }\r\n\r\n        // process last block\r\n        fn(this._blocks[toBlock.index], toBlock.index, 0, toBlock.offset);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  remove (fromPos: number=0, toPos: number=this.value.length): ChangeDetails {\r\n    const removeDetails = super.remove(fromPos, toPos);\r\n    this._forEachBlocksInRange(fromPos, toPos, (b, _, bFromPos, bToPos) => {\r\n      removeDetails.aggregate(b.remove(bFromPos, bToPos));\r\n    });\r\n    return removeDetails;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  nearestInputPos (cursorPos: number, direction: Direction=DIRECTION.NONE): number {\r\n    // TODO refactor - extract alignblock\r\n\r\n    const beginBlockData = this._mapPosToBlock(cursorPos) || {index: 0, offset: 0};\r\n    const {\r\n      offset: beginBlockOffset,\r\n      index: beginBlockIndex,\r\n    } = beginBlockData;\r\n    const beginBlock = this._blocks[beginBlockIndex];\r\n\r\n    if (!beginBlock) return cursorPos;\r\n\r\n    let beginBlockCursorPos = beginBlockOffset;\r\n    // if position inside block - try to adjust it\r\n    if (beginBlockCursorPos !== 0 && beginBlockCursorPos < beginBlock.value.length) {\r\n      beginBlockCursorPos = beginBlock.nearestInputPos(beginBlockOffset, forceDirection(direction));\r\n    }\r\n\r\n    const cursorAtRight = beginBlockCursorPos === beginBlock.value.length;\r\n    const cursorAtLeft = beginBlockCursorPos === 0;\r\n\r\n    //  cursor is INSIDE first block (not at bounds)\r\n    if (!cursorAtLeft && !cursorAtRight) return this._blockStartPos(beginBlockIndex) + beginBlockCursorPos;\r\n\r\n    const searchBlockIndex = cursorAtRight ? beginBlockIndex + 1 : beginBlockIndex;\r\n\r\n    if (direction === DIRECTION.NONE) {\r\n      // NONE direction used to calculate start input position if no chars were removed\r\n      // FOR NONE:\r\n      // -\r\n      // input|any\r\n      // ->\r\n      //  any|input\r\n      // <-\r\n      //  filled-input|any\r\n\r\n      // check if first block at left is input\r\n      if (searchBlockIndex > 0) {\r\n        const blockIndexAtLeft = searchBlockIndex-1;\r\n        const blockAtLeft = this._blocks[blockIndexAtLeft];\r\n        const blockInputPos = blockAtLeft.nearestInputPos(0, DIRECTION.NONE);\r\n        // is input\r\n        if (!blockAtLeft.value.length || blockInputPos !== blockAtLeft.value.length) {\r\n          return this._blockStartPos(searchBlockIndex);\r\n        }\r\n      }\r\n\r\n      // ->\r\n      let firstInputAtRight = searchBlockIndex;\r\n      for (let bi=firstInputAtRight; bi < this._blocks.length; ++bi) {\r\n        const block = this._blocks[bi];\r\n        const blockInputPos = block.nearestInputPos(0, DIRECTION.NONE);\r\n        if (blockInputPos !== block.value.length) {\r\n          return this._blockStartPos(bi) + blockInputPos;\r\n        }\r\n      }\r\n\r\n      return this.value.length;\r\n    }\r\n\r\n    if (direction === DIRECTION.LEFT || direction === DIRECTION.FORCE_LEFT) {\r\n      // -\r\n      //  any|filled-input\r\n      // <-\r\n      //  any|first not empty is not-len-aligned\r\n      //  not-0-aligned|any\r\n      // ->\r\n      //  any|not-len-aligned or end\r\n\r\n      // check if first block at right is filled input\r\n      let firstFilledBlockIndexAtRight;\r\n      for (let bi=searchBlockIndex; bi < this._blocks.length; ++bi) {\r\n        if (this._blocks[bi].value) {\r\n          firstFilledBlockIndexAtRight = bi;\r\n          break;\r\n        }\r\n      }\r\n      if (firstFilledBlockIndexAtRight != null) {\r\n        const filledBlock = this._blocks[firstFilledBlockIndexAtRight];\r\n        const blockInputPos = filledBlock.nearestInputPos(0, DIRECTION.RIGHT);\r\n        if (blockInputPos === 0 && filledBlock.unmaskedValue.length) {\r\n          // filled block is input\r\n          return this._blockStartPos(firstFilledBlockIndexAtRight) + blockInputPos;\r\n        }\r\n      }\r\n\r\n      // <-\r\n      // find this vars\r\n      let firstFilledInputBlockIndex = -1;\r\n      let firstEmptyInputBlockIndex;  // TODO consider nested empty inputs\r\n      for (let bi=searchBlockIndex-1; bi >= 0; --bi) {\r\n        const block = this._blocks[bi];\r\n        const blockInputPos = block.nearestInputPos(block.value.length, DIRECTION.FORCE_LEFT);\r\n        if (firstEmptyInputBlockIndex == null && (!block.value || blockInputPos !== 0)) {\r\n          firstEmptyInputBlockIndex = bi;\r\n        }\r\n        if (blockInputPos !== 0) {\r\n          if (blockInputPos !== block.value.length) {\r\n            // aligned inside block - return immediately\r\n            return this._blockStartPos(bi) + blockInputPos;\r\n          } else {\r\n            // found filled\r\n            firstFilledInputBlockIndex = bi;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (direction === DIRECTION.LEFT) {\r\n        // try find first empty input before start searching position only when not forced\r\n        for (let bi=firstFilledInputBlockIndex+1; bi <= Math.min(searchBlockIndex, this._blocks.length-1); ++bi) {\r\n          const block = this._blocks[bi];\r\n          const blockInputPos = block.nearestInputPos(0, DIRECTION.NONE);\r\n          const blockAlignedPos = this._blockStartPos(bi) + blockInputPos;\r\n          // if block is empty and last or not lazy input\r\n          if ((!block.value.length && blockAlignedPos === this.value.length || blockInputPos !== block.value.length) && blockAlignedPos <= cursorPos) {\r\n            return blockAlignedPos;\r\n          }\r\n        }\r\n      }\r\n\r\n      // process overflow\r\n      if (firstFilledInputBlockIndex >= 0) {\r\n        return this._blockStartPos(firstFilledInputBlockIndex) + this._blocks[firstFilledInputBlockIndex].value.length;\r\n      }\r\n\r\n      // for lazy if has aligned left inside fixed and has came to the start - use start position\r\n      if (\r\n        direction === DIRECTION.FORCE_LEFT ||\r\n        this.lazy && !this.extractInput() && !isInput(this._blocks[searchBlockIndex])\r\n      ) {\r\n        return 0;\r\n      }\r\n\r\n      if (firstEmptyInputBlockIndex != null) {\r\n        return this._blockStartPos(firstEmptyInputBlockIndex);\r\n      }\r\n\r\n      // find first input\r\n      for (let bi=searchBlockIndex; bi < this._blocks.length; ++bi) {\r\n        const block = this._blocks[bi];\r\n        const blockInputPos = block.nearestInputPos(0, DIRECTION.NONE);\r\n        // is input\r\n        if (!block.value.length || blockInputPos !== block.value.length) {\r\n          return this._blockStartPos(bi) + blockInputPos;\r\n        }\r\n      }\r\n\r\n      return 0;\r\n    }\r\n\r\n    if (direction === DIRECTION.RIGHT || direction === DIRECTION.FORCE_RIGHT) {\r\n      // ->\r\n      //  any|not-len-aligned and filled\r\n      //  any|not-len-aligned\r\n      // <-\r\n      //  not-0-aligned or start|any\r\n      let firstInputBlockAlignedIndex: ?number;\r\n      let firstInputBlockAlignedPos: ?number;\r\n      for (let bi=searchBlockIndex; bi < this._blocks.length; ++bi) {\r\n        const block = this._blocks[bi];\r\n        const blockInputPos = block.nearestInputPos(0, DIRECTION.NONE);\r\n        if (blockInputPos !== block.value.length) {\r\n          firstInputBlockAlignedPos = this._blockStartPos(bi) + blockInputPos;\r\n          firstInputBlockAlignedIndex = bi;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (firstInputBlockAlignedIndex != null && firstInputBlockAlignedPos != null) {\r\n        for (let bi=firstInputBlockAlignedIndex; bi < this._blocks.length; ++bi) {\r\n          const block = this._blocks[bi];\r\n          const blockInputPos = block.nearestInputPos(0, DIRECTION.FORCE_RIGHT);\r\n          if (blockInputPos !== block.value.length) {\r\n            return this._blockStartPos(bi) + blockInputPos;\r\n          }\r\n        }\r\n        return direction === DIRECTION.FORCE_RIGHT ?\r\n          this.value.length :\r\n          firstInputBlockAlignedPos;\r\n      }\r\n\r\n      for (let bi=Math.min(searchBlockIndex, this._blocks.length-1); bi >= 0; --bi) {\r\n        const block = this._blocks[bi];\r\n        const blockInputPos = block.nearestInputPos(block.value.length, DIRECTION.LEFT);\r\n        if (blockInputPos !== 0) {\r\n          const alignedPos = this._blockStartPos(bi) + blockInputPos;\r\n          if (alignedPos >= cursorPos) return alignedPos;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return cursorPos;\r\n  }\r\n\r\n  /** Get block by name */\r\n  maskedBlock (name: string): ?PatternBlock {\r\n    return this.maskedBlocks(name)[0];\r\n  }\r\n\r\n  /** Get all blocks by name */\r\n  maskedBlocks (name: string): Array<PatternBlock> {\r\n    const indices = this._maskedBlocks[name];\r\n    if (!indices) return [];\r\n    return indices.map(gi => this._blocks[gi]);\r\n  }\r\n}\r\nMaskedPattern.DEFAULTS = {\r\n  lazy: true,\r\n  placeholderChar: '_'\r\n};\r\nMaskedPattern.STOP_CHAR = '`';\r\nMaskedPattern.ESCAPE_CHAR = '\\\\';\r\nMaskedPattern.InputDefinition = PatternInputDefinition;\r\nMaskedPattern.FixedDefinition = PatternFixedDefinition;\r\n\r\nfunction isInput (block: PatternBlock): boolean {\r\n  if (!block) return false;\r\n\r\n  const value = block.value;\r\n  return !value || block.nearestInputPos(0, DIRECTION.NONE) !== value.length;\r\n}\r\n","// @flow\r\nimport MaskedPattern from './pattern.js';\r\n\r\n\r\n/** Pattern which accepts ranges */\r\nexport default\r\nclass MaskedRange extends MaskedPattern {\r\n  /**\r\n    Optionally sets max length of pattern.\r\n    Used when pattern length is longer then `to` param length. Pads zeros at start in this case.\r\n  */\r\n  maxLength: number;\r\n  /** Min bound */\r\n  from: number;\r\n  /** Max bound */\r\n  to: number;\r\n\r\n  get _matchFrom (): number {\r\n    return this.maxLength - String(this.from).length;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  _update (opts: any) {  // TODO type\r\n    opts = {\r\n      to: this.to || 0,\r\n      from: this.from || 0,\r\n      ...opts,\r\n    };\r\n\r\n    let maxLength = String(opts.to).length;\r\n    if (opts.maxLength != null) maxLength = Math.max(maxLength, opts.maxLength);\r\n    opts.maxLength = maxLength;\r\n\r\n    const toStr = String(opts.to).padStart(maxLength, '0');\r\n    const fromStr = String(opts.from).padStart(maxLength, '0');\r\n    let sameCharsCount = 0;\r\n    while (sameCharsCount < toStr.length && toStr[sameCharsCount] === fromStr[sameCharsCount]) ++sameCharsCount;\r\n    opts.mask = toStr.slice(0, sameCharsCount).replace(/0/g, '\\\\0') + '0'.repeat(maxLength - sameCharsCount);\r\n\r\n    super._update(opts);\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  get isComplete (): boolean {\r\n    return super.isComplete && Boolean(this.value);\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  doValidate (...args: *): boolean {\r\n    const str = this.value;\r\n    let minstr = '';\r\n    let maxstr = '';\r\n\r\n    const [, placeholder, num] = str.match(/^(\\D*)(\\d*)(\\D*)/) || [];\r\n    if (num) {\r\n      minstr = ('0'.repeat(placeholder.length) + num);\r\n      maxstr = ('9'.repeat(placeholder.length) + num);\r\n    }\r\n\r\n    const firstNonZero = str.search(/[^0]/);\r\n    if (firstNonZero === -1 && str.length <= this._matchFrom) return true;\r\n\r\n    minstr = minstr.padEnd(this.maxLength, '0');\r\n    maxstr = maxstr.padEnd(this.maxLength, '9');\r\n\r\n    return this.from <= Number(maxstr) && Number(minstr) <= this.to &&\r\n      super.doValidate(...args);\r\n  }\r\n}\r\n","// @flow\r\nimport MaskedPattern from './pattern.js';\r\nimport MaskedRange from './range.js';\r\n\r\n\r\n/** Date mask */\r\nexport default\r\nclass MaskedDate extends MaskedPattern {\r\n  static GET_DEFAULT_BLOCKS: () => {[string]: any};\r\n  static DEFAULTS: any;\r\n\r\n  /** Parse string to Date */\r\n  parse: (string) => Date;\r\n  /** Format Date to string */\r\n  format: (Date) => string;\r\n  /** Pattern mask for date according to {@link MaskedDate#format} */\r\n  pattern: string;\r\n  /** Start date */\r\n  min: ?Date;\r\n  /** End date */\r\n  max: ?Date;\r\n\r\n  /**\r\n    @param {Object} opts\r\n  */\r\n  constructor (opts: any) {\r\n    super({\r\n      ...MaskedDate.DEFAULTS,\r\n      ...opts\r\n    });\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  _update (opts: any) {\r\n    if (opts.mask === Date) delete opts.mask;\r\n    if (opts.pattern) {\r\n      opts.mask = opts.pattern;\r\n      delete opts.pattern;\r\n    }\r\n\r\n    const blocks = opts.blocks;\r\n    opts.blocks = Object.assign({}, MaskedDate.GET_DEFAULT_BLOCKS());\r\n    // adjust year block\r\n    if (opts.min) opts.blocks.Y.from = opts.min.getFullYear();\r\n    if (opts.max) opts.blocks.Y.to = opts.max.getFullYear();\r\n    if (opts.min && opts.max && opts.blocks.Y.from === opts.blocks.Y.to\r\n    ) {\r\n      opts.blocks.m.from = opts.min.getMonth() + 1;\r\n      opts.blocks.m.to = opts.max.getMonth() + 1;\r\n\r\n      if (opts.blocks.m.from === opts.blocks.m.to) {\r\n        opts.blocks.d.from = opts.min.getDate();\r\n        opts.blocks.d.to = opts.max.getDate();\r\n      }\r\n    }\r\n    Object.assign(opts.blocks, blocks);\r\n\r\n    super._update(opts);\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  doValidate (...args: *): boolean {\r\n    const date = this.date;\r\n\r\n    return super.doValidate(...args) &&\r\n      (!this.isComplete ||\r\n        this.isDateExist(this.value) && date != null &&\r\n        (this.min == null || this.min <= date) &&\r\n        (this.max == null || date <= this.max));\r\n  }\r\n\r\n  /** Checks if date is exists */\r\n  isDateExist (str: string): boolean {\r\n    return this.format(this.parse(str)) === str;\r\n  }\r\n\r\n  /** Parsed Date */\r\n  get date (): ?Date {\r\n    return this.isComplete ?\r\n      this.parse(this.value) :\r\n      null;\r\n  }\r\n  set date (date: Date) {\r\n    this.value = this.format(date);\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  get typedValue (): ?Date {\r\n    return this.date;\r\n  }\r\n  set typedValue (value: Date) {\r\n    this.date = value;\r\n  }\r\n}\r\nMaskedDate.DEFAULTS = {\r\n  pattern: 'd{.}`m{.}`Y',\r\n  format: date => {\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const year = date.getFullYear();\r\n\r\n    return [day, month, year].join('.');\r\n  },\r\n  parse: str => {\r\n    const [day, month, year] = str.split('.');\r\n    return new Date(year, month - 1, day);\r\n  },\r\n};\r\nMaskedDate.GET_DEFAULT_BLOCKS = () => {\r\n  return {\r\n    d: {\r\n      mask: MaskedRange,\r\n      from: 1,\r\n      to: 31,\r\n      maxLength: 2,\r\n    },\r\n    m: {\r\n      mask: MaskedRange,\r\n      from: 1,\r\n      to: 12,\r\n      maxLength: 2,\r\n    },\r\n    Y: {\r\n      mask: MaskedRange,\r\n      from: 1900,\r\n      to: 9999,\r\n    }\r\n  };\r\n};\r\n","// @flow\r\n\r\nexport\r\ntype ElementEvent =\r\n  'selectionChange' |\r\n  'input' |\r\n  'drop' |\r\n  'click' |\r\n  'focus' |\r\n  'commit';\r\n\r\n/**\r\n  Generic element API to use with mask\r\n  @interface\r\n*/\r\nexport default\r\nclass MaskElement {\r\n  /** */\r\n  +_unsafeSelectionStart: number;\r\n  /** */\r\n  +_unsafeSelectionEnd: number;\r\n  /** */\r\n  value: string;\r\n\r\n  /** Safely returns selection start */\r\n  get selectionStart (): number {\r\n    let start;\r\n    try {\r\n      start = this._unsafeSelectionStart;\r\n    } catch (e) {}\r\n\r\n    return start != null ?\r\n      start :\r\n      this.value.length;\r\n  }\r\n\r\n  /** Safely returns selection end */\r\n  get selectionEnd (): number {\r\n    let end;\r\n    try {\r\n      end = this._unsafeSelectionEnd;\r\n    } catch (e) {}\r\n\r\n    return end != null ?\r\n      end :\r\n      this.value.length;\r\n  }\r\n\r\n  /** Safely sets element selection */\r\n  select (start: number, end: number) {\r\n    if (start == null || end == null ||\r\n      start === this.selectionStart && end === this.selectionEnd) return;\r\n\r\n    try {\r\n      this._unsafeSelect(start, end);\r\n    } catch (e) {}\r\n  }\r\n\r\n  /** Should be overriden in subclasses */\r\n  _unsafeSelect (start: number, end: number): void {}\r\n  /** Should be overriden in subclasses */\r\n  get isActive (): boolean { return false; }\r\n  /** Should be overriden in subclasses */\r\n  bindEvents (handlers: {[ElementEvent]: Function}) {}\r\n  /** Should be overriden in subclasses */\r\n  unbindEvents (): void {}\r\n}\r\n","// @flow\r\nimport MaskElement, {type ElementEvent} from './mask-element.js';\r\n\r\n\r\n/** Bridge between HTMLElement and {@link Masked} */\r\nexport default\r\nclass HTMLMaskElement extends MaskElement {\r\n  /** Mapping between HTMLElement events and mask internal events */\r\n  static EVENTS_MAP: {[ElementEvent]: string};\r\n  /** HTMLElement to use mask on */\r\n  input: HTMLTextAreaElement | HTMLInputElement;\r\n  _handlers: {[string]: Function};\r\n\r\n  /**\r\n    @param {HTMLInputElement|HTMLTextAreaElement} input\r\n  */\r\n  constructor (input: HTMLTextAreaElement | HTMLInputElement) {\r\n    super();\r\n    this.input = input;\r\n    this._handlers = {};\r\n  }\r\n\r\n  /**\r\n    Is element in focus\r\n    @readonly\r\n  */\r\n  get isActive (): boolean {\r\n    return this.input === document.activeElement;\r\n  }\r\n\r\n  /**\r\n    Returns HTMLElement selection start\r\n    @override\r\n  */\r\n  get _unsafeSelectionStart (): number {\r\n    return this.input.selectionStart;\r\n  }\r\n\r\n  /**\r\n    Returns HTMLElement selection end\r\n    @override\r\n  */\r\n  get _unsafeSelectionEnd (): number {\r\n    return this.input.selectionEnd;\r\n  }\r\n\r\n  /**\r\n    Sets HTMLElement selection\r\n    @override\r\n  */\r\n  _unsafeSelect (start: number, end: number) {\r\n    this.input.setSelectionRange(start, end);\r\n  }\r\n\r\n  /**\r\n    HTMLElement value\r\n    @override\r\n  */\r\n  get value (): string {\r\n    return this.input.value;\r\n  }\r\n  set value (value: string) {\r\n    this.input.value = value;\r\n  }\r\n\r\n  /**\r\n    Binds HTMLElement events to mask internal events\r\n    @override\r\n  */\r\n  bindEvents (handlers: {[ElementEvent]: Function}) {\r\n    Object.keys(handlers)\r\n      .forEach(event => this._toggleEventHandler(HTMLMaskElement.EVENTS_MAP[event], handlers[event]));\r\n  }\r\n\r\n  /**\r\n    Unbinds HTMLElement events to mask internal events\r\n    @override\r\n  */\r\n  unbindEvents () {\r\n    Object.keys(this._handlers)\r\n      .forEach(event => this._toggleEventHandler(event));\r\n  }\r\n\r\n  /** */\r\n  _toggleEventHandler (event: string, handler?: Function): void {\r\n    if (this._handlers[event]) {\r\n      this.input.removeEventListener(event, this._handlers[event]);\r\n      delete this._handlers[event];\r\n    }\r\n\r\n    if (handler) {\r\n      this.input.addEventListener(event, handler);\r\n      this._handlers[event] = handler;\r\n    }\r\n  }\r\n}\r\nHTMLMaskElement.EVENTS_MAP = {\r\n  selectionChange: 'keydown',\r\n  input: 'input',\r\n  drop: 'drop',\r\n  click: 'click',\r\n  focus: 'focus',\r\n  commit: 'change',\r\n};\r\n","// @flow\r\nimport {objectIncludes, DIRECTION, type Selection} from '../core/utils.js';\r\nimport ActionDetails from '../core/action-details.js';\r\nimport MaskedDate from '../masked/date.js';\r\nimport createMask, {maskedClass} from '../masked/factory.js';\r\nimport type Masked from '../masked/base.js';\r\nimport {type Mask} from '../masked/base.js';\r\nimport MaskElement from './mask-element.js';\r\nimport HTMLMaskElement from './html-mask-element.js';\r\n\r\n\r\n/** Listens to element events and controls changes between element and {@link Masked} */\r\nexport default\r\nclass InputMask {\r\n  /**\r\n    View element\r\n    @readonly\r\n  */\r\n  el: MaskElement;\r\n\r\n  /**\r\n    Internal {@link Masked} model\r\n    @readonly\r\n  */\r\n  masked: Masked<*>;\r\n  alignCursor: () => void;\r\n  alignCursorFriendly: () => void;\r\n\r\n  _listeners: {[string]: Array<Function>};\r\n  _value: string;\r\n  _changingCursorPos: number;\r\n  _unmaskedValue: string;\r\n  _saveSelection: (?Event) => void;\r\n  _selection: Selection;\r\n  _onInput: () => void;\r\n  _onChange: () => void;\r\n  _onDrop: (Event) => void;\r\n  _cursorChanging: TimeoutID;\r\n\r\n  /**\r\n    @param {MaskElement|HTMLInputElement|HTMLTextAreaElement} el\r\n    @param {Object} opts\r\n  */\r\n  constructor (el: MaskElement | HTMLTextAreaElement | HTMLInputElement, opts: {[string]: any}) {\r\n    this.el = (el instanceof MaskElement) ?\r\n      el :\r\n      new HTMLMaskElement(el);\r\n    this.masked = createMask(opts);\r\n\r\n    this._listeners = {};\r\n    this._value = '';\r\n    this._unmaskedValue = '';\r\n\r\n    this._saveSelection = this._saveSelection.bind(this);\r\n    this._onInput = this._onInput.bind(this);\r\n    this._onChange = this._onChange.bind(this);\r\n    this._onDrop = this._onDrop.bind(this);\r\n    this.alignCursor = this.alignCursor.bind(this);\r\n    this.alignCursorFriendly = this.alignCursorFriendly.bind(this);\r\n\r\n    this._bindEvents();\r\n\r\n    // refresh\r\n    this.updateValue();\r\n    this._onChange();\r\n  }\r\n\r\n  /** Read or update mask */\r\n  get mask (): Mask {\r\n    return this.masked.mask;\r\n  }\r\n\r\n  set mask (mask: Mask) {\r\n    if (mask == null ||\r\n      mask === this.masked.mask ||\r\n      mask === Date && this.masked instanceof MaskedDate) return;\r\n\r\n    if (this.masked.constructor === maskedClass(mask)) {\r\n      this.masked.updateOptions({mask});\r\n      return;\r\n    }\r\n\r\n    const masked = createMask({mask});\r\n    masked.unmaskedValue = this.masked.unmaskedValue;\r\n    this.masked = masked;\r\n  }\r\n\r\n  /** Raw value */\r\n  get value (): string {\r\n    return this._value;\r\n  }\r\n\r\n  set value (str: string) {\r\n    this.masked.value = str;\r\n    this.updateControl();\r\n    this.alignCursor();\r\n  }\r\n\r\n  /** Unmasked value */\r\n  get unmaskedValue (): string {\r\n    return this._unmaskedValue;\r\n  }\r\n\r\n  set unmaskedValue (str: string) {\r\n    this.masked.unmaskedValue = str;\r\n    this.updateControl();\r\n    this.alignCursor();\r\n  }\r\n\r\n  /** Typed unmasked value */\r\n  get typedValue (): any {\r\n    return this.masked.typedValue;\r\n  }\r\n\r\n  set typedValue (val: any) {\r\n    this.masked.typedValue = val;\r\n    this.updateControl();\r\n    this.alignCursor();\r\n  }\r\n\r\n  /**\r\n    Starts listening to element events\r\n    @protected\r\n  */\r\n  _bindEvents () {\r\n    this.el.bindEvents({\r\n      selectionChange: this._saveSelection,\r\n      input: this._onInput,\r\n      drop: this._onDrop,\r\n      click: this.alignCursorFriendly,\r\n      focus: this.alignCursorFriendly,\r\n      commit: this._onChange,\r\n    });\r\n  }\r\n\r\n  /**\r\n    Stops listening to element events\r\n    @protected\r\n   */\r\n  _unbindEvents () {\r\n    this.el.unbindEvents();\r\n  }\r\n\r\n  /**\r\n    Fires custom event\r\n    @protected\r\n   */\r\n  _fireEvent (ev: string) {\r\n    const listeners = this._listeners[ev];\r\n    if (!listeners) return;\r\n\r\n    listeners.forEach(l => l());\r\n  }\r\n\r\n  /**\r\n    Current selection start\r\n    @readonly\r\n  */\r\n  get selectionStart (): number {\r\n    return this._cursorChanging ?\r\n      this._changingCursorPos :\r\n\r\n      this.el.selectionStart;\r\n  }\r\n\r\n  /** Current cursor position */\r\n  get cursorPos (): number {\r\n    return this._cursorChanging ?\r\n      this._changingCursorPos :\r\n\r\n      this.el.selectionEnd;\r\n  }\r\n  set cursorPos (pos: number) {\r\n    if (!this.el.isActive) return;\r\n\r\n    this.el.select(pos, pos);\r\n    this._saveSelection();\r\n  }\r\n\r\n  /**\r\n    Stores current selection\r\n    @protected\r\n  */\r\n  _saveSelection (/* ev */) {\r\n    if (this.value !== this.el.value) {\r\n      console.warn('Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly.'); // eslint-disable-line no-console\r\n    }\r\n    this._selection = {\r\n      start: this.selectionStart,\r\n      end: this.cursorPos\r\n    };\r\n  }\r\n\r\n  /** Syncronizes model value from view */\r\n  updateValue () {\r\n    this.masked.value = this.el.value;\r\n    this._value = this.masked.value;\r\n  }\r\n\r\n  /** Syncronizes view from model value, fires change events */\r\n  updateControl () {\r\n    const newUnmaskedValue = this.masked.unmaskedValue;\r\n    const newValue = this.masked.value;\r\n    const isChanged = (this.unmaskedValue !== newUnmaskedValue ||\r\n      this.value !== newValue);\r\n\r\n    this._unmaskedValue = newUnmaskedValue;\r\n    this._value = newValue;\r\n\r\n    if (this.el.value !== newValue) this.el.value = newValue;\r\n    if (isChanged) this._fireChangeEvents();\r\n  }\r\n\r\n  /** Updates options with deep equal check, recreates @{link Masked} model if mask type changes */\r\n  updateOptions (opts: {[string]: any}) {\r\n    if (objectIncludes(this.masked, opts)) return;\r\n\r\n    const { mask, ...restOpts } = opts;\r\n\r\n    this.mask = mask;\r\n    this.masked.updateOptions(restOpts);\r\n\r\n    this.updateControl();\r\n  }\r\n\r\n  /** Updates cursor */\r\n  updateCursor (cursorPos: number) {\r\n    if (cursorPos == null) return;\r\n    this.cursorPos = cursorPos;\r\n\r\n    // also queue change cursor for mobile browsers\r\n    this._delayUpdateCursor(cursorPos);\r\n  }\r\n\r\n  /**\r\n    Delays cursor update to support mobile browsers\r\n    @private\r\n  */\r\n  _delayUpdateCursor (cursorPos: number) {\r\n    this._abortUpdateCursor();\r\n    this._changingCursorPos = cursorPos;\r\n    this._cursorChanging = setTimeout(() => {\r\n      if (!this.el) return; // if was destroyed\r\n      this.cursorPos = this._changingCursorPos;\r\n      this._abortUpdateCursor();\r\n    }, 10);\r\n  }\r\n\r\n  /**\r\n    Fires custom events\r\n    @protected\r\n  */\r\n  _fireChangeEvents () {\r\n    this._fireEvent('accept');\r\n    if (this.masked.isComplete) this._fireEvent('complete');\r\n  }\r\n\r\n  /**\r\n    Aborts delayed cursor update\r\n    @private\r\n  */\r\n  _abortUpdateCursor () {\r\n    if (this._cursorChanging) {\r\n      clearTimeout(this._cursorChanging);\r\n      delete this._cursorChanging;\r\n    }\r\n  }\r\n\r\n  /** Aligns cursor to nearest available position */\r\n  alignCursor () {\r\n    this.cursorPos = this.masked.nearestInputPos(this.cursorPos, DIRECTION.LEFT);\r\n  }\r\n\r\n  /** Aligns cursor only if selection is empty */\r\n  alignCursorFriendly () {\r\n    if (this.selectionStart !== this.cursorPos) return;\r\n    this.alignCursor();\r\n  }\r\n\r\n  /** Adds listener on custom event */\r\n  on (ev: string, handler: Function) {\r\n    if (!this._listeners[ev]) this._listeners[ev] = [];\r\n    this._listeners[ev].push(handler);\r\n    return this;\r\n  }\r\n\r\n  /** Removes custom event listener */\r\n  off (ev: string, handler: Function) {\r\n    if (!this._listeners[ev]) return;\r\n    if (!handler) {\r\n      delete this._listeners[ev];\r\n      return;\r\n    }\r\n    const hIndex = this._listeners[ev].indexOf(handler);\r\n    if (hIndex >= 0) this._listeners[ev].splice(hIndex, 1);\r\n    return this;\r\n  }\r\n\r\n  /** Handles view input event */\r\n  _onInput () {\r\n    this._abortUpdateCursor();\r\n\r\n    // fix strange IE behavior\r\n    if (!this._selection) return this.updateValue();\r\n\r\n    const details = new ActionDetails(\r\n      // new state\r\n      this.el.value, this.cursorPos,\r\n      // old state\r\n      this.value, this._selection);\r\n\r\n    const oldRawValue = this.masked.rawInputValue;\r\n\r\n    const offset = this.masked.splice(\r\n      details.startChangePos,\r\n      details.removed.length,\r\n      details.inserted,\r\n      details.removeDirection).offset;\r\n\r\n    // force align in remove direction only if no input chars were removed\r\n    // otherwise we still need to align with NONE (to get out from fixed symbols for instance)\r\n    const removeDirection = oldRawValue === this.masked.rawInputValue ?\r\n      details.removeDirection :\r\n      DIRECTION.NONE;\r\n\r\n    const cursorPos = this.masked.nearestInputPos(\r\n      details.startChangePos + offset,\r\n      removeDirection,\r\n    );\r\n\r\n    this.updateControl();\r\n    this.updateCursor(cursorPos);\r\n  }\r\n\r\n  /** Handles view change event and commits model value */\r\n  _onChange () {\r\n    if (this.value !== this.el.value) {\r\n      this.updateValue();\r\n    }\r\n    this.masked.doCommit();\r\n    this.updateControl();\r\n  }\r\n\r\n  /** Handles view drop event, prevents by default */\r\n  _onDrop (ev: Event) {\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  }\r\n\r\n  /** Unbind view events and removes element reference */\r\n  destroy () {\r\n    this._unbindEvents();\r\n    // $FlowFixMe why not do so?\r\n    this._listeners.length = 0;\r\n    delete this.el;\r\n  }\r\n}\r\n","// @flow\r\nimport MaskedPattern from './pattern.js';\r\n\r\n\r\n/** Pattern which validates enum values */\r\nexport default\r\nclass MaskedEnum extends MaskedPattern {\r\n  enum: Array<string>;\r\n\r\n  /**\r\n    @override\r\n    @param {Object} opts\r\n  */\r\n  _update (opts: any) {  // TODO type\r\n    if (opts.enum) opts.mask = '*'.repeat(opts.enum[0].length);\r\n\r\n    super._update(opts);\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  doValidate (...args: *): boolean {\r\n    return this.enum.some(e => e.indexOf(this.unmaskedValue) >= 0) &&\r\n      super.doValidate(...args);\r\n  }\r\n}\r\n","// @flow\r\nimport {escapeRegExp, indexInDirection, posInDirection, type Direction, DIRECTION} from '../core/utils.js';\r\nimport ChangeDetails from '../core/change-details.js';\r\nimport {type TailDetails} from '../core/tail-details.js';\r\n\r\nimport Masked, {type MaskedOptions, type AppendFlags} from './base.js';\r\n\r\n\r\ntype MaskedNumberOptions = {\r\n  ...MaskedOptions<Number>,\r\n  radix: $PropertyType<MaskedNumber, 'radix'>,\r\n  thousandsSeparator: $PropertyType<MaskedNumber, 'thousandsSeparator'>,\r\n  mapToRadix: $PropertyType<MaskedNumber, 'mapToRadix'>,\r\n  scale: $PropertyType<MaskedNumber, 'scale'>,\r\n  signed: $PropertyType<MaskedNumber, 'signed'>,\r\n  normalizeZeros: $PropertyType<MaskedNumber, 'normalizeZeros'>,\r\n  padFractionalZeros: $PropertyType<MaskedNumber, 'padFractionalZeros'>,\r\n};\r\n\r\n/**\r\n  Number mask\r\n  @param {Object} opts\r\n  @param {string} opts.radix - Single char\r\n  @param {string} opts.thousandsSeparator - Single char\r\n  @param {Array<string>} opts.mapToRadix - Array of single chars\r\n  @param {number} opts.min\r\n  @param {number} opts.max\r\n  @param {number} opts.scale - Digits after point\r\n  @param {boolean} opts.signed - Allow negative\r\n  @param {boolean} opts.normalizeZeros - Flag to remove leading and trailing zeros in the end of editing\r\n  @param {boolean} opts.padFractionalZeros - Flag to pad trailing zeros after point in the end of editing\r\n*/\r\nexport default\r\nclass MaskedNumber extends Masked<Number> {\r\n  static DEFAULTS: $Shape<MaskedNumberOptions>;\r\n\r\n  /** Single char */\r\n  radix: string;\r\n  /** Single char */\r\n  thousandsSeparator: string;\r\n  /** Array of single chars */\r\n  mapToRadix: Array<string>;\r\n  /** */\r\n  min: number;\r\n  /** */\r\n  max: number;\r\n  /** Digits after point */\r\n  scale: number;\r\n  /** */\r\n  signed: boolean;\r\n  /** Flag to remove leading and trailing zeros in the end of editing */\r\n  normalizeZeros: boolean;\r\n  /** Flag to pad trailing zeros after point in the end of editing */\r\n  padFractionalZeros: boolean;\r\n  _numberRegExp: RegExp;\r\n  _numberRegExpInput: RegExp;\r\n  _thousandsSeparatorRegExp: RegExp;\r\n  _mapToRadixRegExp: RegExp;\r\n  _separatorsProcessed: boolean;\r\n\r\n  constructor (opts: $Shape<MaskedNumberOptions>) {\r\n    super({\r\n      ...MaskedNumber.DEFAULTS,\r\n      ...opts\r\n    });\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  _update (opts: MaskedNumberOptions) {\r\n    super._update(opts);\r\n    this._updateRegExps();\r\n  }\r\n\r\n  /** */\r\n  _updateRegExps () {\r\n    // use different regexp to process user input (more strict, input suffix) and tail shifting\r\n    const start = '^'\r\n\r\n    let midInput = '';\r\n    let mid = '';\r\n    if (this.allowNegative) {\r\n      midInput += '([+|\\\\-]?|([+|\\\\-]?(0|([1-9]+\\\\d*))))';\r\n      mid += '[+|\\\\-]?';\r\n    } else {\r\n      midInput += '(0|([1-9]+\\\\d*))';\r\n    }\r\n    mid += '\\\\d*';\r\n\r\n    let end = (this.scale ?\r\n      '(' + escapeRegExp(this.radix) + '\\\\d{0,' + this.scale + '})?' :\r\n      '') + '$';\r\n\r\n    this._numberRegExpInput = new RegExp(start + midInput + end);\r\n    this._numberRegExp = new RegExp(start + mid + end);\r\n    this._mapToRadixRegExp = new RegExp('[' +\r\n      this.mapToRadix.map(escapeRegExp).join('') +\r\n    ']', 'g');\r\n    this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  extractTail (fromPos: number=0, toPos: number=this.value.length): TailDetails {\r\n    const tail = super.extractTail(fromPos, toPos);\r\n\r\n    // $FlowFixMe no ideas\r\n    return {\r\n      ...tail,\r\n      value: this._removeThousandsSeparators(tail.value),\r\n    };\r\n  }\r\n\r\n  /** */\r\n  _removeThousandsSeparators (value: string): string {\r\n    return value.replace(this._thousandsSeparatorRegExp, '');\r\n  }\r\n\r\n  /** */\r\n  _insertThousandsSeparators (value: string): string {\r\n    // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\r\n    const parts = value.split(this.radix);\r\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\r\n    return parts.join(this.radix);\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  doPrepare (str: string, ...args: *) {\r\n    return super.doPrepare(this._removeThousandsSeparators(str.replace(this._mapToRadixRegExp, this.radix)), ...args);\r\n  }\r\n\r\n  /** */\r\n  _separatorsCount (value: string=this._value) {\r\n    let rawValueLength = this._removeThousandsSeparators(value).length;\r\n\r\n    let valueWithSeparatorsLength = rawValueLength;\r\n    for (let pos = 0; pos <= valueWithSeparatorsLength; ++pos) {\r\n      if (this._value[pos] === this.thousandsSeparator) ++valueWithSeparatorsLength;\r\n    }\r\n\r\n    return valueWithSeparatorsLength - rawValueLength;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  extractInput (...args: *): string {\r\n    return this._removeThousandsSeparators(super.extractInput(...args));\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  _appendCharRaw (ch: string, flags: AppendFlags={}): ChangeDetails {\r\n    if (!this.thousandsSeparator) return super._appendCharRaw(ch, flags);\r\n\r\n    const previousBeforeTailSeparatorsCount = this._separatorsCount(flags.tail && this._beforeTailState ?\r\n      this._beforeTailState._value :\r\n      this._value);\r\n    this._value = this._removeThousandsSeparators(this.value);\r\n    const appendDetails = super._appendCharRaw(ch, flags);\r\n\r\n    this._value = this._insertThousandsSeparators(this._value);\r\n    const beforeTailSeparatorsCount = this._separatorsCount(flags.tail && this._beforeTailState ?\r\n      this._beforeTailState._value :\r\n      this._value);\r\n\r\n    appendDetails.tailShift += beforeTailSeparatorsCount - previousBeforeTailSeparatorsCount;\r\n    return appendDetails;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  remove (fromPos?: number=0, toPos?: number=this.value.length): ChangeDetails {\r\n    const valueBeforePos = this.value.slice(0, fromPos);\r\n    const valueAfterPos = this.value.slice(toPos);\r\n\r\n    const previousBeforeTailSeparatorsCount = this._separatorsCount(valueBeforePos);\r\n    this._value = this._insertThousandsSeparators(this._removeThousandsSeparators(valueBeforePos + valueAfterPos));\r\n    const beforeTailSeparatorsCount = this._separatorsCount(valueBeforePos);\r\n\r\n    return new ChangeDetails({\r\n      tailShift: beforeTailSeparatorsCount - previousBeforeTailSeparatorsCount,\r\n    });\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  nearestInputPos (cursorPos: number, direction?: Direction): number {\r\n    if (!direction || direction === DIRECTION.LEFT) return cursorPos;\r\n\r\n    const nextPos = indexInDirection(cursorPos, direction);\r\n    if (this.value[nextPos] === this.thousandsSeparator) cursorPos = posInDirection(cursorPos, direction);\r\n\r\n    return cursorPos;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  doValidate (flags: AppendFlags) {\r\n    const regexp = flags.input ? this._numberRegExpInput : this._numberRegExp;\r\n\r\n    // validate as string\r\n    let valid = regexp.test(this._removeThousandsSeparators(this.value));\r\n\r\n    if (valid) {\r\n      // validate as number\r\n      const number = this.number;\r\n      valid = valid && !isNaN(number) &&\r\n        // check min bound for negative values\r\n        (this.min == null || this.min >= 0 || this.min <= this.number) &&\r\n        // check max bound for positive values\r\n        (this.max == null || this.max <= 0 || this.number <= this.max);\r\n    }\r\n\r\n    return valid && super.doValidate(flags);\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  doCommit () {\r\n    const number = this.number;\r\n    let validnum = number;\r\n\r\n    // check bounds\r\n    if (this.min != null) validnum = Math.max(validnum, this.min);\r\n    if (this.max != null) validnum = Math.min(validnum, this.max);\r\n\r\n    if (validnum !== number) this.unmaskedValue = String(validnum);\r\n\r\n    let formatted = this.value;\r\n\r\n    if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);\r\n    if (this.padFractionalZeros) formatted = this._padFractionalZeros(formatted);\r\n\r\n    this._value = this._insertThousandsSeparators(formatted);\r\n    super.doCommit();\r\n  }\r\n\r\n  /** */\r\n  _normalizeZeros (value: string): string {\r\n    const parts = this._removeThousandsSeparators(value).split(this.radix);\r\n\r\n    // remove leading zeros\r\n    parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, (match, sign, zeros, num) => sign + num);\r\n    // add leading zero\r\n    if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\r\n\r\n    if (parts.length > 1) {\r\n      parts[1] = parts[1].replace(/0*$/, '');  // remove trailing zeros\r\n      if (!parts[1].length) parts.length = 1;  // remove fractional\r\n    }\r\n\r\n    return this._insertThousandsSeparators(parts.join(this.radix));\r\n  }\r\n\r\n  /** */\r\n  _padFractionalZeros (value: string): string {\r\n    if (!value) return value;\r\n\r\n    const parts = value.split(this.radix);\r\n    if (parts.length < 2) parts.push('');\r\n    parts[1] = parts[1].padEnd(this.scale, '0');\r\n    return parts.join(this.radix);\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  get unmaskedValue (): string {\r\n    return this._removeThousandsSeparators(\r\n      this._normalizeZeros(\r\n        this.value))\r\n      .replace(this.radix, '.');\r\n  }\r\n\r\n  set unmaskedValue (unmaskedValue: string) {\r\n    super.unmaskedValue = unmaskedValue.replace('.', this.radix);\r\n  }\r\n\r\n  /** Parsed Number */\r\n  get number (): number {\r\n    return Number(this.unmaskedValue);\r\n  }\r\n\r\n  set number (number: number) {\r\n    this.unmaskedValue = String(number);\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  get typedValue (): number {\r\n    return this.number;\r\n  }\r\n\r\n  set typedValue (value: number) {\r\n    this.number = value;\r\n  }\r\n\r\n  /**\r\n    Is negative allowed\r\n    @readonly\r\n  */\r\n  get allowNegative (): boolean {\r\n    return this.signed ||\r\n      (this.min != null && this.min < 0) ||\r\n      (this.max != null && this.max < 0);\r\n  }\r\n}\r\nMaskedNumber.DEFAULTS = {\r\n  radix: ',',\r\n  thousandsSeparator: '',\r\n  mapToRadix: ['.'],\r\n  scale: 2,\r\n  signed: false,\r\n  normalizeZeros: true,\r\n  padFractionalZeros: false,\r\n};\r\n","// @flow\r\nimport Masked, {type MaskedOptions} from './base.js';\r\n\r\n\r\n/** Masking by RegExp */\r\nexport default\r\nclass MaskedRegExp extends Masked<RegExp> {\r\n  /**\r\n    @override\r\n    @param {Object} opts\r\n  */\r\n  _update (opts: $Shape<MaskedOptions<RegExp>>) {\r\n    if (opts.mask) opts.validate = (value) => value.search(opts.mask) >= 0;\r\n    super._update(opts);\r\n  }\r\n}\r\n","// @flow\r\nimport Masked, {type MaskedOptions} from './base.js';\r\n\r\n\r\n/** Masking by custom Function */\r\nexport default\r\nclass MaskedFunction extends Masked<Function> {\r\n  /**\r\n    @override\r\n    @param {Object} opts\r\n  */\r\n  _update (opts: MaskedOptions<Function>) {\r\n    if (opts.mask) opts.validate = opts.mask;\r\n    super._update(opts);\r\n  }\r\n}\r\n","// @flow\r\nimport ChangeDetails from '../core/change-details.js';\r\nimport createMask from './factory.js';\r\nimport Masked, {type AppendFlags, type MaskedState} from './base.js';\r\nimport {type TailDetails} from '../core/tail-details.js';\r\n\r\ntype MaskedDynamicState = {|\r\n  ...MaskedState,\r\n  _rawInputValue: string,\r\n  compiledMasks: Array<*>,\r\n  currentMaskRef: ?Masked<*>,\r\n  currentMask: *,\r\n|};\r\n\r\ntype DynamicMaskType = Array<{[string]: any}>;\r\n/** Dynamic mask for choosing apropriate mask in run-time */\r\nexport default\r\nclass MaskedDynamic extends Masked<DynamicMaskType> {\r\n  /** Currently chosen mask */\r\n  currentMask: ?Masked<*>;\r\n  /** Compliled {@link Masked} options */\r\n  compiledMasks: Array<Masked<*>>;\r\n  /** Chooses {@link Masked} depending on input value */\r\n  dispatch: (string, Masked<*>, AppendFlags) => Masked<*>;\r\n\r\n  /**\r\n    @param {Object} opts\r\n  */\r\n  constructor (opts: any) {\r\n    super({\r\n      ...MaskedDynamic.DEFAULTS,\r\n      ...opts\r\n    });\r\n\r\n    this.currentMask = null;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  _update (opts: any) {\r\n    super._update(opts);\r\n    if ('mask' in opts) {\r\n      // mask could be totally dynamic with only `dispatch` option\r\n      this.compiledMasks = Array.isArray(opts.mask) ?\r\n        opts.mask.map(m => createMask(m)) :\r\n        [];\r\n    }\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  _appendCharRaw (...args: *): ChangeDetails {\r\n    const details = this._applyDispatch(...args);\r\n\r\n    if (this.currentMask) {\r\n      details.aggregate(this.currentMask._appendChar(...args));\r\n    }\r\n\r\n    return details;\r\n  }\r\n\r\n  _applyDispatch (appended: string='', flags: AppendFlags={}) {\r\n    const prevValueBeforeTail = flags.tail && this._beforeTailState ?\r\n      this._beforeTailState._value :\r\n      this.value;\r\n    const inputValue = this.rawInputValue;\r\n    const insertValue = flags.tail && this._beforeTailState ?\r\n      // $FlowFixMe - tired to fight with type system\r\n      this._beforeTailState._rawInputValue :\r\n      inputValue;\r\n    const tailValue = inputValue.slice(insertValue.length);\r\n    const prevMask = this.currentMask;\r\n    const details = new ChangeDetails();\r\n\r\n    const prevMaskState = prevMask && prevMask.state;\r\n    const prevMaskBeforeTailState = prevMask && prevMask._beforeTailState;\r\n\r\n    this.currentMask = this.doDispatch(appended, flags);\r\n\r\n    // restore state after dispatch\r\n    if (this.currentMask) {\r\n      if (this.currentMask !== prevMask) {\r\n        // if mask changed reapply input\r\n        this.currentMask.reset();\r\n\r\n        // $FlowFixMe - it's ok, we don't change current mask above\r\n        const d = this.currentMask.append(insertValue, {raw: true});\r\n        details.tailShift = d.inserted.length - prevValueBeforeTail.length;\r\n\r\n        if (tailValue) {\r\n          // $FlowFixMe - it's ok, we don't change current mask above\r\n          details.tailShift += this.currentMask.append(tailValue, {raw: true, tail: true}).tailShift;\r\n        }\r\n      } else {\r\n        // Dispatch can do something bad with state, so\r\n        // restore prev mask state\r\n        this.currentMask.state = prevMaskState;\r\n        this.currentMask._beforeTailState = prevMaskBeforeTailState;\r\n      }\r\n    }\r\n\r\n    return details;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  doDispatch(appended: string, flags: AppendFlags={}) {\r\n    return this.dispatch(appended, this, flags);\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  doValidate (...args: *): boolean {\r\n    return super.doValidate(...args) && (\r\n      !this.currentMask || this.currentMask.doValidate(...args));\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  reset () {\r\n    if (this.currentMask) this.currentMask.reset();\r\n    this.compiledMasks.forEach(m => m.reset());\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  get value (): string {\r\n    return this.currentMask ? this.currentMask.value : '';\r\n  }\r\n\r\n  set value (value: string) {\r\n    super.value = value;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  get unmaskedValue (): string {\r\n    return this.currentMask ? this.currentMask.unmaskedValue : '';\r\n  }\r\n\r\n  set unmaskedValue (unmaskedValue: string) {\r\n    super.unmaskedValue = unmaskedValue;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  get typedValue (): any {\r\n    return this.currentMask ? this.currentMask.typedValue : '';\r\n  }\r\n\r\n  // probably typedValue should not be used with dynamic\r\n  set typedValue (value: any) {\r\n    let unmaskedValue = String(value);\r\n\r\n    // double check it\r\n    if (this.currentMask) {\r\n      this.currentMask.typedValue = value;\r\n      unmaskedValue = this.currentMask.unmaskedValue;\r\n    }\r\n    this.unmaskedValue = unmaskedValue;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  get isComplete (): boolean {\r\n    return !!this.currentMask && this.currentMask.isComplete;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  remove (...args: *): ChangeDetails {\r\n    const details: ChangeDetails = new ChangeDetails();\r\n    if (this.currentMask) {\r\n      details.aggregate(this.currentMask.remove(...args))\r\n        // update with dispatch\r\n        .aggregate(this._applyDispatch());\r\n    }\r\n\r\n    return details;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  get state (): MaskedDynamicState {\r\n    return {\r\n      ...super.state,\r\n      _rawInputValue: this.rawInputValue,\r\n      compiledMasks: this.compiledMasks.map(m => m.state),\r\n      currentMaskRef: this.currentMask,\r\n      currentMask: this.currentMask && this.currentMask.state,\r\n    };\r\n  }\r\n\r\n  set state (state: MaskedDynamicState) {\r\n    const {compiledMasks, currentMaskRef, currentMask, ...maskedState} = state;\r\n    this.compiledMasks.forEach((m, mi) => m.state = compiledMasks[mi]);\r\n    if (currentMaskRef != null) {\r\n      this.currentMask = currentMaskRef;\r\n      this.currentMask.state = currentMask;\r\n    }\r\n    super.state = maskedState;\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  extractInput (...args: *): string {\r\n    return this.currentMask ?\r\n      this.currentMask.extractInput(...args) :\r\n      '';\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  extractTail (...args: *): TailDetails {\r\n    return this.currentMask ?\r\n      this.currentMask.extractTail(...args) :\r\n      super.extractTail(...args);\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  doCommit () {\r\n    if (this.currentMask) this.currentMask.doCommit();\r\n    super.doCommit();\r\n  }\r\n\r\n  /**\r\n    @override\r\n  */\r\n  nearestInputPos(...args: *): number {\r\n    return this.currentMask ?\r\n      this.currentMask.nearestInputPos(...args) :\r\n      super.nearestInputPos(...args);\r\n  }\r\n}\r\n\r\nMaskedDynamic.DEFAULTS = {\r\n  dispatch: (appended, masked, flags) => {\r\n    if (!masked.compiledMasks.length) return;\r\n\r\n    const inputValue = masked.rawInputValue;\r\n\r\n    // simulate input\r\n    const inputs = masked.compiledMasks.map((m, index) => {\r\n      m.rawInputValue = inputValue;\r\n      m.append(appended, flags);\r\n      const weight = m.rawInputValue.length;\r\n\r\n      return {weight, index};\r\n    });\r\n\r\n    // pop masks with longer values first\r\n    inputs.sort((i1, i2) => i2.weight - i1.weight);\r\n\r\n    return masked.compiledMasks[inputs[0].index];\r\n  }\r\n};\r\n","import {g} from './core/utils.js';\r\n\r\nimport InputMask from './controls/input.js';\r\n\r\nimport Masked from './masked/base.js';\r\nimport MaskedPattern from './masked/pattern.js';\r\nimport MaskedEnum from './masked/enum.js';\r\nimport MaskedRange from './masked/range.js';\r\nimport MaskedNumber from './masked/number.js';\r\nimport MaskedDate from './masked/date.js';\r\nimport MaskedRegExp from './masked/regexp.js';\r\nimport MaskedFunction from './masked/function.js';\r\nimport MaskedDynamic from './masked/dynamic.js';\r\nimport createMask from './masked/factory.js';\r\nimport MaskElement from './controls/mask-element.js';\r\nimport HTMLMaskElement from './controls/html-mask-element.js';\r\n\r\n\r\n/**\r\n * Applies mask on element.\r\n * @constructor\r\n * @param {HTMLInputElement|HTMLTextAreaElement|MaskElement} el - Element to apply mask\r\n * @param {Object} opts - Custom mask options\r\n * @return {InputMask}\r\n */\r\nexport default\r\nfunction IMask (el, opts={}) {\r\n\t// currently available only for input-like elements\r\n  return new InputMask(el, opts);\r\n}\r\n\r\n/** {@link InputMask} */\r\nIMask.InputMask = InputMask;\r\n\r\n/** {@link Masked} */\r\nIMask.Masked = Masked;\r\n/** {@link MaskedPattern} */\r\nIMask.MaskedPattern = MaskedPattern;\r\n/** {@link MaskedEnum} */\r\nIMask.MaskedEnum = MaskedEnum;\r\n/** {@link MaskedRange} */\r\nIMask.MaskedRange = MaskedRange;\r\n/** {@link MaskedNumber} */\r\nIMask.MaskedNumber = MaskedNumber;\r\n/** {@link MaskedDate} */\r\nIMask.MaskedDate = MaskedDate;\r\n/** {@link MaskedRegExp} */\r\nIMask.MaskedRegExp = MaskedRegExp;\r\n/** {@link MaskedFunction} */\r\nIMask.MaskedFunction = MaskedFunction;\r\n/** {@link MaskedDynamic} */\r\nIMask.MaskedDynamic = MaskedDynamic;\r\n/** {@link createMask} */\r\nIMask.createMask = createMask;\r\n/** {@link MaskElement} */\r\nIMask.MaskElement = MaskElement;\r\n/** {@link HTMLMaskElement} */\r\nIMask.HTMLMaskElement = HTMLMaskElement;\r\n\r\ng.IMask = IMask;\r\n"],"names":["isString","str","String","DIRECTION","NONE","LEFT","FORCE_LEFT","RIGHT","FORCE_RIGHT","indexInDirection","pos","direction","posInDirection","forceDirection","escapeRegExp","replace","objectIncludes","b","a","i","arrA","Array","isArray","arrB","length","dateA","Date","dateB","getTime","regexpA","RegExp","regexpB","toString","keys","Object","prototype","hasOwnProperty","call","g","window","global","self","ActionDetails","constructor","value","cursorPos","oldValue","oldSelection","this","slice","startChangePos","start","Math","min","substr","insertedCount","max","end","removedCount","substring","ChangeDetails","details","assign","inserted","rawInserted","skip","tailShift","aggregate","Masked","opts","_value","_update","isInitialized","updateOptions","withValueRefresh","bind","state","reset","resolve","append","input","doCommit","unmaskedValue","extractInput","raw","nearestInputPos","fromPos","toPos","extractTail","_storeBeforeTailState","_beforeTailState","_restoreBeforeTailState","_resetBeforeTailState","appendTail","tail","_appendCharRaw","ch","_appendChar","flags","checkTail","doPrepare","consistentState","appended","doValidate","tailDetails","ci","remove","fn","_refreshing","unmasked","ret","prepare","validate","parent","commit","splice","deleteCount","removeDirection","tailPos","maskedClass","mask","Error","IMask","MaskedRegExp","MaskedPattern","MaskedDate","Number","MaskedNumber","MaskedDynamic","Function","MaskedFunction","console","warn","createMask","DEFAULT_INPUT_DEFINITIONS","PatternInputDefinition","blockOpts","masked","_isFilled","isOptional","placeholderChar","Boolean","lazy","_appendPlaceholder","maxPos","boundPos","isComplete","PatternFixedDefinition","isUnmasking","_isRawInput","isResolved","char","ChunksTailDetails","chunks","map","c","join","definitions","DEFAULTS","_rebuildMask","defs","_blocks","_stops","_maskedBlocks","pattern","unmaskingBlock","optionalBlock","blocks","p","bNames","filter","bName","indexOf","sort","maskedBlock","push","def","isInput","STOP_CHAR","ESCAPE_CHAR","super","maskedState","forEach","bi","every","reduce","_appendTailChunks","blockData","_mapPosToBlock","index","block","blockDetails","chunk","lastBlock","chunkBlock","remainChars","stop","_extractTailChunks","_forEachBlocksInRange","_","lastChunk","blockChunk","nearestStop","si","headFloatChunksCount","toBlockIndex","startBlockData","startBlockIndex","endBlockIndex","args","bDetails","apply","accVal","blockStartPos","offset","_blockStartPos","blockIndex","fromBlock","toBlock","isSameBlock","fromBlockRemoveBegin","fromBlockRemoveEnd","undefined","removeDetails","bFromPos","bToPos","beginBlockData","beginBlockOffset","beginBlockIndex","beginBlock","beginBlockCursorPos","cursorAtRight","searchBlockIndex","blockIndexAtLeft","blockAtLeft","blockInputPos","firstFilledBlockIndexAtRight","filledBlock","firstEmptyInputBlockIndex","firstFilledInputBlockIndex","blockAlignedPos","firstInputBlockAlignedIndex","firstInputBlockAlignedPos","alignedPos","name","maskedBlocks","indices","gi","InputDefinition","FixedDefinition","MaskedRange","maxLength","from","to","toStr","padStart","fromStr","sameCharsCount","repeat","minstr","maxstr","match","placeholder","num","search","_matchFrom","padEnd","GET_DEFAULT_BLOCKS","Y","getFullYear","m","getMonth","d","getDate","date","isDateExist","format","parse","split","day","month","year","MaskElement","_unsafeSelectionStart","e","_unsafeSelectionEnd","select","selectionStart","selectionEnd","_unsafeSelect","bindEvents","handlers","unbindEvents","HTMLMaskElement","_handlers","document","activeElement","setSelectionRange","event","_toggleEventHandler","EVENTS_MAP","handler","removeEventListener","addEventListener","selectionChange","drop","click","focus","InputMask","el","_listeners","_unmaskedValue","_saveSelection","_onInput","_onChange","_onDrop","alignCursor","alignCursorFriendly","_bindEvents","updateValue","updateControl","typedValue","val","_unbindEvents","_fireEvent","ev","listeners","l","_cursorChanging","_changingCursorPos","isActive","_selection","newUnmaskedValue","newValue","isChanged","_fireChangeEvents","restOpts","updateCursor","_delayUpdateCursor","_abortUpdateCursor","setTimeout","clearTimeout","on","off","hIndex","oldRawValue","rawInputValue","removed","preventDefault","stopPropagation","destroy","MaskedEnum","enum","some","_updateRegExps","midInput","mid","allowNegative","scale","radix","_numberRegExpInput","_numberRegExp","_mapToRadixRegExp","mapToRadix","_thousandsSeparatorRegExp","thousandsSeparator","_removeThousandsSeparators","_insertThousandsSeparators","parts","_separatorsCount","rawValueLength","valueWithSeparatorsLength","previousBeforeTailSeparatorsCount","appendDetails","beforeTailSeparatorsCount","valueBeforePos","valueAfterPos","nextPos","valid","test","number","isNaN","validnum","formatted","normalizeZeros","_normalizeZeros","padFractionalZeros","_padFractionalZeros","sign","zeros","signed","currentMask","compiledMasks","_applyDispatch","prevValueBeforeTail","inputValue","insertValue","_rawInputValue","tailValue","prevMask","prevMaskState","prevMaskBeforeTailState","doDispatch","dispatch","currentMaskRef","mi","inputs","weight","i1","i2"],"mappings":"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"}