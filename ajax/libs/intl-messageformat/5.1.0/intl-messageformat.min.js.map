{"version":3,"file":"intl-messageformat.min.js","sources":["../../../intl-messageformat-parser/lib/parser.js","../../../intl-messageformat-parser/lib/types.js","../../../intl-messageformat-parser/lib/normalize.js","../../../intl-format-cache/lib/index.js","../../lib/core.js","../../lib/index.js","../../../intl-messageformat-parser/lib/index.js"],"sourcesContent":["// tslint:disable:only-arrow-functions\n// tslint:disable:object-literal-shorthand\n// tslint:disable:trailing-comma\n// tslint:disable:object-literal-sort-keys\n// tslint:disable:one-variable-per-declaration\n// tslint:disable:max-line-length\n// tslint:disable:no-consecutive-blank-lines\n// tslint:disable:align\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar SyntaxError = /** @class */ (function (_super) {\n    __extends(SyntaxError, _super);\n    function SyntaxError(message, expected, found, location) {\n        var _this = _super.call(this) || this;\n        _this.message = message;\n        _this.expected = expected;\n        _this.found = found;\n        _this.location = location;\n        _this.name = \"SyntaxError\";\n        if (typeof Error.captureStackTrace === \"function\") {\n            Error.captureStackTrace(_this, SyntaxError);\n        }\n        return _this;\n    }\n    SyntaxError.buildMessage = function (expected, found) {\n        function hex(ch) {\n            return ch.charCodeAt(0).toString(16).toUpperCase();\n        }\n        function literalEscape(s) {\n            return s\n                .replace(/\\\\/g, \"\\\\\\\\\")\n                .replace(/\"/g, \"\\\\\\\"\")\n                .replace(/\\0/g, \"\\\\0\")\n                .replace(/\\t/g, \"\\\\t\")\n                .replace(/\\n/g, \"\\\\n\")\n                .replace(/\\r/g, \"\\\\r\")\n                .replace(/[\\x00-\\x0F]/g, function (ch) { return \"\\\\x0\" + hex(ch); })\n                .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) { return \"\\\\x\" + hex(ch); });\n        }\n        function classEscape(s) {\n            return s\n                .replace(/\\\\/g, \"\\\\\\\\\")\n                .replace(/\\]/g, \"\\\\]\")\n                .replace(/\\^/g, \"\\\\^\")\n                .replace(/-/g, \"\\\\-\")\n                .replace(/\\0/g, \"\\\\0\")\n                .replace(/\\t/g, \"\\\\t\")\n                .replace(/\\n/g, \"\\\\n\")\n                .replace(/\\r/g, \"\\\\r\")\n                .replace(/[\\x00-\\x0F]/g, function (ch) { return \"\\\\x0\" + hex(ch); })\n                .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) { return \"\\\\x\" + hex(ch); });\n        }\n        function describeExpectation(expectation) {\n            switch (expectation.type) {\n                case \"literal\":\n                    return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n                case \"class\":\n                    var escapedParts = expectation.parts.map(function (part) {\n                        return Array.isArray(part)\n                            ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n                            : classEscape(part);\n                    });\n                    return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n                case \"any\":\n                    return \"any character\";\n                case \"end\":\n                    return \"end of input\";\n                case \"other\":\n                    return expectation.description;\n            }\n        }\n        function describeExpected(expected1) {\n            var descriptions = expected1.map(describeExpectation);\n            var i;\n            var j;\n            descriptions.sort();\n            if (descriptions.length > 0) {\n                for (i = 1, j = 1; i < descriptions.length; i++) {\n                    if (descriptions[i - 1] !== descriptions[i]) {\n                        descriptions[j] = descriptions[i];\n                        j++;\n                    }\n                }\n                descriptions.length = j;\n            }\n            switch (descriptions.length) {\n                case 1:\n                    return descriptions[0];\n                case 2:\n                    return descriptions[0] + \" or \" + descriptions[1];\n                default:\n                    return descriptions.slice(0, -1).join(\", \")\n                        + \", or \"\n                        + descriptions[descriptions.length - 1];\n            }\n        }\n        function describeFound(found1) {\n            return found1 ? \"\\\"\" + literalEscape(found1) + \"\\\"\" : \"end of input\";\n        }\n        return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n    };\n    return SyntaxError;\n}(Error));\nexport { SyntaxError };\nfunction peg$parse(input, options) {\n    options = options !== undefined ? options : {};\n    var peg$FAILED = {};\n    var peg$startRuleFunctions = { start: peg$parsestart };\n    var peg$startRuleFunction = peg$parsestart;\n    var peg$c0 = function (chunks) {\n        return chunks.reduce(function (all, chunk) {\n            return all.concat(chunk);\n        }, []).join('');\n    };\n    var peg$c1 = function (messageText) {\n        return __assign({ type: 0 /* literal */, value: messageText }, insertLocation());\n    };\n    var peg$c2 = function (chars) { return chars.join(''); };\n    var peg$c3 = peg$otherExpectation(\"argumentElement\");\n    var peg$c4 = \"{\";\n    var peg$c5 = peg$literalExpectation(\"{\", false);\n    var peg$c6 = \"}\";\n    var peg$c7 = peg$literalExpectation(\"}\", false);\n    var peg$c8 = function (value) {\n        return __assign({ type: 1 /* argument */, value: value }, insertLocation());\n    };\n    var peg$c9 = \",\";\n    var peg$c10 = peg$literalExpectation(\",\", false);\n    var peg$c11 = \"number\";\n    var peg$c12 = peg$literalExpectation(\"number\", false);\n    var peg$c13 = \"date\";\n    var peg$c14 = peg$literalExpectation(\"date\", false);\n    var peg$c15 = \"time\";\n    var peg$c16 = peg$literalExpectation(\"time\", false);\n    var peg$c17 = function (value, type, style) {\n        return __assign({ type: type === 'number' ? 2 /* number */ : type === 'date' ? 3 /* date */ : 4 /* time */, style: style && style[2], value: value }, insertLocation());\n    };\n    var peg$c18 = \"plural\";\n    var peg$c19 = peg$literalExpectation(\"plural\", false);\n    var peg$c20 = \"selectordinal\";\n    var peg$c21 = peg$literalExpectation(\"selectordinal\", false);\n    var peg$c22 = \"offset:\";\n    var peg$c23 = peg$literalExpectation(\"offset:\", false);\n    var peg$c24 = function (value, pluralType, offset, options) {\n        return __assign({ type: 6 /* plural */, pluralType: pluralType === 'plural' ? 'cardinal' : 'ordinal', value: value, offset: offset ? offset[2] : 0, options: options.reduce(function (all, _a) {\n                var id = _a.id, value = _a.value, location = _a.location;\n                all[id] = {\n                    value: value,\n                    location: location\n                };\n                return all;\n            }, {}) }, insertLocation());\n    };\n    var peg$c25 = \"select\";\n    var peg$c26 = peg$literalExpectation(\"select\", false);\n    var peg$c27 = function (value, options) {\n        return __assign({ type: 5 /* select */, value: value, options: options.reduce(function (all, _a) {\n                var id = _a.id, value = _a.value, location = _a.location;\n                all[id] = {\n                    value: value,\n                    location: location\n                };\n                return all;\n            }, {}) }, insertLocation());\n    };\n    var peg$c28 = \"=0\";\n    var peg$c29 = peg$literalExpectation(\"=0\", false);\n    var peg$c30 = \"=1\";\n    var peg$c31 = peg$literalExpectation(\"=1\", false);\n    var peg$c32 = \"=2\";\n    var peg$c33 = peg$literalExpectation(\"=2\", false);\n    var peg$c34 = \"zero\";\n    var peg$c35 = peg$literalExpectation(\"zero\", false);\n    var peg$c36 = \"one\";\n    var peg$c37 = peg$literalExpectation(\"one\", false);\n    var peg$c38 = \"two\";\n    var peg$c39 = peg$literalExpectation(\"two\", false);\n    var peg$c40 = \"few\";\n    var peg$c41 = peg$literalExpectation(\"few\", false);\n    var peg$c42 = \"many\";\n    var peg$c43 = peg$literalExpectation(\"many\", false);\n    var peg$c44 = \"other\";\n    var peg$c45 = peg$literalExpectation(\"other\", false);\n    var peg$c46 = function (id, value) {\n        return __assign({ id: id,\n            value: value }, insertLocation());\n    };\n    var peg$c47 = function (id, value) {\n        return __assign({ id: id,\n            value: value }, insertLocation());\n    };\n    var peg$c48 = peg$otherExpectation(\"whitespace\");\n    var peg$c49 = /^[ \\t\\n\\r]/;\n    var peg$c50 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false);\n    var peg$c51 = peg$otherExpectation(\"optionalWhitespace\");\n    var peg$c52 = /^[0-9]/;\n    var peg$c53 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n    var peg$c54 = /^[0-9a-f]/i;\n    var peg$c55 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"]], false, true);\n    var peg$c56 = function (digits) {\n        return parseInt(digits.join(''), 10);\n    };\n    var peg$c57 = \"'\";\n    var peg$c58 = peg$literalExpectation(\"'\", false);\n    var peg$c59 = /^[ \\t\\n\\r,.+={}#]/;\n    var peg$c60 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\", \",\", \".\", \"+\", \"=\", \"{\", \"}\", \"#\"], false, false);\n    var peg$c61 = peg$anyExpectation();\n    var peg$c62 = function (char) { return char; };\n    var peg$c63 = function (sequence) { return sequence; };\n    var peg$c64 = peg$otherExpectation(\"apostrophe\");\n    var peg$c65 = /^[^{}\\\\\\0-\\x1F\\x7F \\t\\n\\r]/;\n    var peg$c66 = peg$classExpectation([\"{\", \"}\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\", \" \", \"\\t\", \"\\n\", \"\\r\"], true, false);\n    var peg$c67 = \"\\\\\\\\\";\n    var peg$c68 = peg$literalExpectation(\"\\\\\\\\\", false);\n    var peg$c69 = function () { return '\\\\'; };\n    var peg$c70 = \"\\\\#\";\n    var peg$c71 = peg$literalExpectation(\"\\\\#\", false);\n    var peg$c72 = function () { return '\\\\#'; };\n    var peg$c73 = \"\\\\{\";\n    var peg$c74 = peg$literalExpectation(\"\\\\{\", false);\n    var peg$c75 = function () { return '\\u007B'; };\n    var peg$c76 = \"\\\\}\";\n    var peg$c77 = peg$literalExpectation(\"\\\\}\", false);\n    var peg$c78 = function () { return '\\u007D'; };\n    var peg$c79 = \"\\\\u\";\n    var peg$c80 = peg$literalExpectation(\"\\\\u\", false);\n    var peg$c81 = function (digits) {\n        return String.fromCharCode(parseInt(digits, 16));\n    };\n    var peg$currPos = 0;\n    var peg$savedPos = 0;\n    var peg$posDetailsCache = [{ line: 1, column: 1 }];\n    var peg$maxFailPos = 0;\n    var peg$maxFailExpected = [];\n    var peg$silentFails = 0;\n    var peg$result;\n    if (options.startRule !== undefined) {\n        if (!(options.startRule in peg$startRuleFunctions)) {\n            throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n        }\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n    function text() {\n        return input.substring(peg$savedPos, peg$currPos);\n    }\n    function location() {\n        return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n    function expected(description, location1) {\n        location1 = location1 !== undefined\n            ? location1\n            : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location1);\n    }\n    function error(message, location1) {\n        location1 = location1 !== undefined\n            ? location1\n            : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildSimpleError(message, location1);\n    }\n    function peg$literalExpectation(text1, ignoreCase) {\n        return { type: \"literal\", text: text1, ignoreCase: ignoreCase };\n    }\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n        return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n    }\n    function peg$anyExpectation() {\n        return { type: \"any\" };\n    }\n    function peg$endExpectation() {\n        return { type: \"end\" };\n    }\n    function peg$otherExpectation(description) {\n        return { type: \"other\", description: description };\n    }\n    function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos];\n        var p;\n        if (details) {\n            return details;\n        }\n        else {\n            p = pos - 1;\n            while (!peg$posDetailsCache[p]) {\n                p--;\n            }\n            details = peg$posDetailsCache[p];\n            details = {\n                line: details.line,\n                column: details.column\n            };\n            while (p < pos) {\n                if (input.charCodeAt(p) === 10) {\n                    details.line++;\n                    details.column = 1;\n                }\n                else {\n                    details.column++;\n                }\n                p++;\n            }\n            peg$posDetailsCache[pos] = details;\n            return details;\n        }\n    }\n    function peg$computeLocation(startPos, endPos) {\n        var startPosDetails = peg$computePosDetails(startPos);\n        var endPosDetails = peg$computePosDetails(endPos);\n        return {\n            start: {\n                offset: startPos,\n                line: startPosDetails.line,\n                column: startPosDetails.column\n            },\n            end: {\n                offset: endPos,\n                line: endPosDetails.line,\n                column: endPosDetails.column\n            }\n        };\n    }\n    function peg$fail(expected1) {\n        if (peg$currPos < peg$maxFailPos) {\n            return;\n        }\n        if (peg$currPos > peg$maxFailPos) {\n            peg$maxFailPos = peg$currPos;\n            peg$maxFailExpected = [];\n        }\n        peg$maxFailExpected.push(expected1);\n    }\n    function peg$buildSimpleError(message, location1) {\n        return new SyntaxError(message, [], \"\", location1);\n    }\n    function peg$buildStructuredError(expected1, found, location1) {\n        return new SyntaxError(SyntaxError.buildMessage(expected1, found), expected1, found, location1);\n    }\n    function peg$parsestart() {\n        var s0;\n        s0 = peg$parsemessage();\n        return s0;\n    }\n    function peg$parsemessage() {\n        var s0, s1;\n        s0 = [];\n        s1 = peg$parsemessageElement();\n        while (s1 !== peg$FAILED) {\n            s0.push(s1);\n            s1 = peg$parsemessageElement();\n        }\n        return s0;\n    }\n    function peg$parsemessageElement() {\n        var s0;\n        s0 = peg$parseliteralElement();\n        if (s0 === peg$FAILED) {\n            s0 = peg$parseargumentElement();\n            if (s0 === peg$FAILED) {\n                s0 = peg$parsesimpleFormatElement();\n                if (s0 === peg$FAILED) {\n                    s0 = peg$parsepluralElement();\n                    if (s0 === peg$FAILED) {\n                        s0 = peg$parseselectElement();\n                    }\n                }\n            }\n        }\n        return s0;\n    }\n    function peg$parsemessageText() {\n        var s0, s1, s2, s3, s4, s5;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$currPos;\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n            s4 = peg$parsechars();\n            if (s4 !== peg$FAILED) {\n                s5 = peg$parse_();\n                if (s5 !== peg$FAILED) {\n                    s3 = [s3, s4, s5];\n                    s2 = s3;\n                }\n                else {\n                    peg$currPos = s2;\n                    s2 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$currPos;\n                s3 = peg$parse_();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parsechars();\n                    if (s4 !== peg$FAILED) {\n                        s5 = peg$parse_();\n                        if (s5 !== peg$FAILED) {\n                            s3 = [s3, s4, s5];\n                            s2 = s3;\n                        }\n                        else {\n                            peg$currPos = s2;\n                            s2 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s2;\n                        s2 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s2;\n                    s2 = peg$FAILED;\n                }\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c0(s1);\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parsews();\n            if (s1 !== peg$FAILED) {\n                s0 = input.substring(s0, peg$currPos);\n            }\n            else {\n                s0 = s1;\n            }\n        }\n        return s0;\n    }\n    function peg$parseliteralElement() {\n        var s0, s1;\n        s0 = peg$currPos;\n        s1 = peg$parsemessageText();\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c1(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parsevarName() {\n        var s0, s1, s2;\n        s0 = peg$parsenumber();\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = [];\n            s2 = peg$parsequoteEscapedChar();\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$parsequoteEscapedChar();\n            }\n            if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c2(s1);\n            }\n            s0 = s1;\n        }\n        return s0;\n    }\n    function peg$parseargumentElement() {\n        var s0, s1, s2, s3, s4, s5;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c4;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c5);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parsevarName();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                            s5 = peg$c6;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c7);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c8(s3);\n                            s0 = s1;\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c3);\n            }\n        }\n        return s0;\n    }\n    function peg$parsesimpleFormatElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c4;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c5);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parsevarName();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c9;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c10);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 6) === peg$c11) {\n                                    s7 = peg$c11;\n                                    peg$currPos += 6;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c12);\n                                    }\n                                }\n                                if (s7 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 4) === peg$c13) {\n                                        s7 = peg$c13;\n                                        peg$currPos += 4;\n                                    }\n                                    else {\n                                        s7 = peg$FAILED;\n                                        if (peg$silentFails === 0) {\n                                            peg$fail(peg$c14);\n                                        }\n                                    }\n                                    if (s7 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 4) === peg$c15) {\n                                            s7 = peg$c15;\n                                            peg$currPos += 4;\n                                        }\n                                        else {\n                                            s7 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c16);\n                                            }\n                                        }\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        s9 = peg$currPos;\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s10 = peg$c9;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s10 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c10);\n                                            }\n                                        }\n                                        if (s10 !== peg$FAILED) {\n                                            s11 = peg$parse_();\n                                            if (s11 !== peg$FAILED) {\n                                                s12 = peg$parsechars();\n                                                if (s12 !== peg$FAILED) {\n                                                    s10 = [s10, s11, s12];\n                                                    s9 = s10;\n                                                }\n                                                else {\n                                                    peg$currPos = s9;\n                                                    s9 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s9;\n                                                s9 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s9;\n                                            s9 = peg$FAILED;\n                                        }\n                                        if (s9 === peg$FAILED) {\n                                            s9 = null;\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                    s11 = peg$c6;\n                                                    peg$currPos++;\n                                                }\n                                                else {\n                                                    s11 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$c7);\n                                                    }\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    peg$savedPos = s0;\n                                                    s1 = peg$c17(s3, s7, s9);\n                                                    s0 = s1;\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsepluralElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c4;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c5);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parsevarName();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c9;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c10);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 6) === peg$c18) {\n                                    s7 = peg$c18;\n                                    peg$currPos += 6;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c19);\n                                    }\n                                }\n                                if (s7 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 13) === peg$c20) {\n                                        s7 = peg$c20;\n                                        peg$currPos += 13;\n                                    }\n                                    else {\n                                        s7 = peg$FAILED;\n                                        if (peg$silentFails === 0) {\n                                            peg$fail(peg$c21);\n                                        }\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s9 = peg$c9;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s9 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c10);\n                                            }\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                s11 = peg$currPos;\n                                                if (input.substr(peg$currPos, 7) === peg$c22) {\n                                                    s12 = peg$c22;\n                                                    peg$currPos += 7;\n                                                }\n                                                else {\n                                                    s12 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$c23);\n                                                    }\n                                                }\n                                                if (s12 !== peg$FAILED) {\n                                                    s13 = peg$parse_();\n                                                    if (s13 !== peg$FAILED) {\n                                                        s14 = peg$parsenumber();\n                                                        if (s14 !== peg$FAILED) {\n                                                            s12 = [s12, s13, s14];\n                                                            s11 = s12;\n                                                        }\n                                                        else {\n                                                            peg$currPos = s11;\n                                                            s11 = peg$FAILED;\n                                                        }\n                                                    }\n                                                    else {\n                                                        peg$currPos = s11;\n                                                        s11 = peg$FAILED;\n                                                    }\n                                                }\n                                                else {\n                                                    peg$currPos = s11;\n                                                    s11 = peg$FAILED;\n                                                }\n                                                if (s11 === peg$FAILED) {\n                                                    s11 = null;\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    s12 = peg$parse_();\n                                                    if (s12 !== peg$FAILED) {\n                                                        s13 = [];\n                                                        s14 = peg$parsepluralOption();\n                                                        if (s14 !== peg$FAILED) {\n                                                            while (s14 !== peg$FAILED) {\n                                                                s13.push(s14);\n                                                                s14 = peg$parsepluralOption();\n                                                            }\n                                                        }\n                                                        else {\n                                                            s13 = peg$FAILED;\n                                                        }\n                                                        if (s13 !== peg$FAILED) {\n                                                            s14 = peg$parse_();\n                                                            if (s14 !== peg$FAILED) {\n                                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                                    s15 = peg$c6;\n                                                                    peg$currPos++;\n                                                                }\n                                                                else {\n                                                                    s15 = peg$FAILED;\n                                                                    if (peg$silentFails === 0) {\n                                                                        peg$fail(peg$c7);\n                                                                    }\n                                                                }\n                                                                if (s15 !== peg$FAILED) {\n                                                                    peg$savedPos = s0;\n                                                                    s1 = peg$c24(s3, s7, s11, s13);\n                                                                    s0 = s1;\n                                                                }\n                                                                else {\n                                                                    peg$currPos = s0;\n                                                                    s0 = peg$FAILED;\n                                                                }\n                                                            }\n                                                            else {\n                                                                peg$currPos = s0;\n                                                                s0 = peg$FAILED;\n                                                            }\n                                                        }\n                                                        else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                        }\n                                                    }\n                                                    else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                    }\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parseselectElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c4;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c5);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parsevarName();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c9;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c10);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 6) === peg$c25) {\n                                    s7 = peg$c25;\n                                    peg$currPos += 6;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c26);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s9 = peg$c9;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s9 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c10);\n                                            }\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                s11 = [];\n                                                s12 = peg$parseselectOption();\n                                                if (s12 !== peg$FAILED) {\n                                                    while (s12 !== peg$FAILED) {\n                                                        s11.push(s12);\n                                                        s12 = peg$parseselectOption();\n                                                    }\n                                                }\n                                                else {\n                                                    s11 = peg$FAILED;\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    s12 = peg$parse_();\n                                                    if (s12 !== peg$FAILED) {\n                                                        if (input.charCodeAt(peg$currPos) === 125) {\n                                                            s13 = peg$c6;\n                                                            peg$currPos++;\n                                                        }\n                                                        else {\n                                                            s13 = peg$FAILED;\n                                                            if (peg$silentFails === 0) {\n                                                                peg$fail(peg$c7);\n                                                            }\n                                                        }\n                                                        if (s13 !== peg$FAILED) {\n                                                            peg$savedPos = s0;\n                                                            s1 = peg$c27(s3, s11);\n                                                            s0 = s1;\n                                                        }\n                                                        else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                        }\n                                                    }\n                                                    else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                    }\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsepluralRuleSelectValue() {\n        var s0;\n        if (input.substr(peg$currPos, 2) === peg$c28) {\n            s0 = peg$c28;\n            peg$currPos += 2;\n        }\n        else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c29);\n            }\n        }\n        if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 2) === peg$c30) {\n                s0 = peg$c30;\n                peg$currPos += 2;\n            }\n            else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c31);\n                }\n            }\n            if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c32) {\n                    s0 = peg$c32;\n                    peg$currPos += 2;\n                }\n                else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c33);\n                    }\n                }\n                if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 4) === peg$c34) {\n                        s0 = peg$c34;\n                        peg$currPos += 4;\n                    }\n                    else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c35);\n                        }\n                    }\n                    if (s0 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 3) === peg$c36) {\n                            s0 = peg$c36;\n                            peg$currPos += 3;\n                        }\n                        else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c37);\n                            }\n                        }\n                        if (s0 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 3) === peg$c38) {\n                                s0 = peg$c38;\n                                peg$currPos += 3;\n                            }\n                            else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$c39);\n                                }\n                            }\n                            if (s0 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 3) === peg$c40) {\n                                    s0 = peg$c40;\n                                    peg$currPos += 3;\n                                }\n                                else {\n                                    s0 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c41);\n                                    }\n                                }\n                                if (s0 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 4) === peg$c42) {\n                                        s0 = peg$c42;\n                                        peg$currPos += 4;\n                                    }\n                                    else {\n                                        s0 = peg$FAILED;\n                                        if (peg$silentFails === 0) {\n                                            peg$fail(peg$c43);\n                                        }\n                                    }\n                                    if (s0 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 5) === peg$c44) {\n                                            s0 = peg$c44;\n                                            peg$currPos += 5;\n                                        }\n                                        else {\n                                            s0 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c45);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return s0;\n    }\n    function peg$parseselectOption() {\n        var s0, s1, s2, s3, s4, s5, s6;\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsechars();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parse_();\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 123) {\n                        s4 = peg$c4;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c5);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s5 = peg$parsemessage();\n                        if (s5 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 125) {\n                                s6 = peg$c6;\n                                peg$currPos++;\n                            }\n                            else {\n                                s6 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$c7);\n                                }\n                            }\n                            if (s6 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c46(s2, s5);\n                                s0 = s1;\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsepluralOption() {\n        var s0, s1, s2, s3, s4, s5, s6;\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsepluralRuleSelectValue();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parse_();\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 123) {\n                        s4 = peg$c4;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c5);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s5 = peg$parsemessage();\n                        if (s5 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 125) {\n                                s6 = peg$c6;\n                                peg$currPos++;\n                            }\n                            else {\n                                s6 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$c7);\n                                }\n                            }\n                            if (s6 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c47(s2, s5);\n                                s0 = s1;\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsews() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = [];\n        if (peg$c49.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c50);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            while (s1 !== peg$FAILED) {\n                s0.push(s1);\n                if (peg$c49.test(input.charAt(peg$currPos))) {\n                    s1 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c50);\n                    }\n                }\n            }\n        }\n        else {\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c48);\n            }\n        }\n        return s0;\n    }\n    function peg$parse_() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsews();\n        while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            s2 = peg$parsews();\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c51);\n            }\n        }\n        return s0;\n    }\n    function peg$parsedigit() {\n        var s0;\n        if (peg$c52.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c53);\n            }\n        }\n        return s0;\n    }\n    function peg$parsehexDigit() {\n        var s0;\n        if (peg$c54.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c55);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumber() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsedigit();\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$parsedigit();\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c56(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parsequoteEscapedChar() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 39) {\n            s2 = peg$c57;\n            peg$currPos++;\n        }\n        else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c58);\n            }\n        }\n        if (s2 === peg$FAILED) {\n            if (peg$c59.test(input.charAt(peg$currPos))) {\n                s2 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c60);\n                }\n            }\n        }\n        peg$silentFails--;\n        if (s2 === peg$FAILED) {\n            s1 = undefined;\n        }\n        else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n                s2 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c61);\n                }\n            }\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c62(s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 39) {\n                s1 = peg$c57;\n                peg$currPos++;\n            }\n            else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c58);\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parseescape();\n                if (s2 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c63(s2);\n                    s0 = s1;\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        return s0;\n    }\n    function peg$parseapostrophe() {\n        var s0, s1;\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 39) {\n            s0 = peg$c57;\n            peg$currPos++;\n        }\n        else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c58);\n            }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c64);\n            }\n        }\n        return s0;\n    }\n    function peg$parseescape() {\n        var s0;\n        if (peg$c59.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c60);\n            }\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$parseapostrophe();\n        }\n        return s0;\n    }\n    function peg$parsechar() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n            s1 = peg$c57;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c58);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parseapostrophe();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c63(s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            if (peg$c65.test(input.charAt(peg$currPos))) {\n                s0 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c66);\n                }\n            }\n            if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c67) {\n                    s1 = peg$c67;\n                    peg$currPos += 2;\n                }\n                else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c68);\n                    }\n                }\n                if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c69();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c70) {\n                        s1 = peg$c70;\n                        peg$currPos += 2;\n                    }\n                    else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c71);\n                        }\n                    }\n                    if (s1 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c72();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.substr(peg$currPos, 2) === peg$c73) {\n                            s1 = peg$c73;\n                            peg$currPos += 2;\n                        }\n                        else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c74);\n                            }\n                        }\n                        if (s1 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c75();\n                        }\n                        s0 = s1;\n                        if (s0 === peg$FAILED) {\n                            s0 = peg$currPos;\n                            if (input.substr(peg$currPos, 2) === peg$c76) {\n                                s1 = peg$c76;\n                                peg$currPos += 2;\n                            }\n                            else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$c77);\n                                }\n                            }\n                            if (s1 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c78();\n                            }\n                            s0 = s1;\n                            if (s0 === peg$FAILED) {\n                                s0 = peg$currPos;\n                                if (input.substr(peg$currPos, 2) === peg$c79) {\n                                    s1 = peg$c79;\n                                    peg$currPos += 2;\n                                }\n                                else {\n                                    s1 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c80);\n                                    }\n                                }\n                                if (s1 !== peg$FAILED) {\n                                    s2 = peg$currPos;\n                                    s3 = peg$currPos;\n                                    s4 = peg$parsehexDigit();\n                                    if (s4 !== peg$FAILED) {\n                                        s5 = peg$parsehexDigit();\n                                        if (s5 !== peg$FAILED) {\n                                            s6 = peg$parsehexDigit();\n                                            if (s6 !== peg$FAILED) {\n                                                s7 = peg$parsehexDigit();\n                                                if (s7 !== peg$FAILED) {\n                                                    s4 = [s4, s5, s6, s7];\n                                                    s3 = s4;\n                                                }\n                                                else {\n                                                    peg$currPos = s3;\n                                                    s3 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s3;\n                                                s3 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s3;\n                                            s3 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s3;\n                                        s3 = peg$FAILED;\n                                    }\n                                    if (s3 !== peg$FAILED) {\n                                        s2 = input.substring(s2, peg$currPos);\n                                    }\n                                    else {\n                                        s2 = s3;\n                                    }\n                                    if (s2 !== peg$FAILED) {\n                                        peg$savedPos = s0;\n                                        s1 = peg$c81(s2);\n                                        s0 = s1;\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return s0;\n    }\n    function peg$parsechars() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsechar();\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$parsechar();\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c2(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function insertLocation() {\n        return options && options.captureLocation ? {\n            location: location()\n        } : {};\n    }\n    peg$result = peg$startRuleFunction();\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n    }\n    else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n            peg$fail(peg$endExpectation());\n        }\n        throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length\n            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n    }\n}\nexport var parse = peg$parse;\n","/**\n * Type Guards\n */\nexport function isLiteralElement(el) {\n    return el.type === 0 /* literal */;\n}\nexport function isArgumentElement(el) {\n    return el.type === 1 /* argument */;\n}\nexport function isNumberElement(el) {\n    return el.type === 2 /* number */;\n}\nexport function isDateElement(el) {\n    return el.type === 3 /* date */;\n}\nexport function isTimeElement(el) {\n    return el.type === 4 /* time */;\n}\nexport function isSelectElement(el) {\n    return el.type === 5 /* select */;\n}\nexport function isPluralElement(el) {\n    return el.type === 6 /* plural */;\n}\nexport function createLiteralElement(value) {\n    return {\n        type: 0 /* literal */,\n        value: value\n    };\n}\nexport function createNumberElement(value, style) {\n    return {\n        type: 2 /* number */,\n        value: value,\n        style: style\n    };\n}\n","import { isPluralElement, isLiteralElement } from './types';\nimport { parse } from './parser';\nvar PLURAL_HASHTAG_REGEX = /(^|[^\\\\])#/g;\n/**\n * Whether to convert `#` in plural rule options\n * to `{var, number}`\n * @param el AST Element\n * @param pluralStack current plural stack\n */\nexport function normalizeHashtagInPlural(els) {\n    els.forEach(function (el) {\n        // If we're encountering a plural el\n        if (!isPluralElement(el)) {\n            return;\n        }\n        // Go down the options and search for # in any literal element\n        Object.keys(el.options).forEach(function (id) {\n            var _a;\n            var opt = el.options[id];\n            // If we got a match, we have to split this\n            // and inject a NumberElement in the middle\n            var matchingLiteralElIndex = -1;\n            var literalEl = undefined;\n            for (var i = 0; i < opt.value.length; i++) {\n                var el_1 = opt.value[i];\n                if (isLiteralElement(el_1) && PLURAL_HASHTAG_REGEX.test(el_1.value)) {\n                    matchingLiteralElIndex = i;\n                    literalEl = el_1;\n                    break;\n                }\n            }\n            if (literalEl) {\n                var newValue = literalEl.value.replace(PLURAL_HASHTAG_REGEX, \"$1{\" + el.value + \", number}\");\n                var newEls = parse(newValue);\n                (_a = opt.value).splice.apply(_a, [matchingLiteralElIndex, 1].concat(newEls));\n            }\n            normalizeHashtagInPlural(opt.value);\n        });\n    });\n}\n","/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n// -- Utilities ----------------------------------------------------------------\nfunction getCacheId(inputs) {\n    return JSON.stringify(inputs.map(function (input) {\n        return input && typeof input === 'object' ? orderedProps(input) : input;\n    }));\n}\nfunction orderedProps(obj) {\n    return Object.keys(obj)\n        .sort()\n        .map(function (k) {\n        var _a;\n        return (_a = {}, _a[k] = obj[k], _a);\n    });\n}\nvar memoizeFormatConstructor = function (FormatConstructor, cache) {\n    if (cache === void 0) { cache = {}; }\n    return function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var cacheId = getCacheId(args);\n        var format = cacheId && cache[cacheId];\n        if (!format) {\n            format = new ((_a = FormatConstructor).bind.apply(_a, [void 0].concat(args)))();\n            if (cacheId) {\n                cache[cacheId] = format;\n            }\n        }\n        return format;\n    };\n};\nexport default memoizeFormatConstructor;\n","/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { isArgumentElement, isLiteralElement, isDateElement, isTimeElement, isNumberElement, isSelectElement, isPluralElement } from 'intl-messageformat-parser';\nimport memoizeIntlConstructor from 'intl-format-cache';\n// -- MessageFormat --------------------------------------------------------\nfunction resolveLocale(locales) {\n    if (typeof locales === 'string') {\n        locales = [locales];\n    }\n    try {\n        return Intl.NumberFormat.supportedLocalesOf(locales, {\n            // IE11 localeMatcher `lookup` seems to convert `en` -> `en-US`\n            // but not other browsers,\n            localeMatcher: 'best fit'\n        })[0];\n    }\n    catch (e) {\n        return IntlMessageFormat.defaultLocale;\n    }\n}\nfunction prewarmFormatters(els, locales, formatters, formats) {\n    els\n        .filter(function (el) { return !isArgumentElement(el) && !isLiteralElement(el); })\n        .forEach(function (el) {\n        // Recursively format plural and select parts' option — which can be a\n        // nested pattern structure. The choosing of the option to use is\n        // abstracted-by and delegated-to the part helper object.\n        if (isDateElement(el)) {\n            var style = el.style ? formats.date[el.style] : undefined;\n            return formatters.getDateTimeFormat(locales, style);\n        }\n        if (isTimeElement(el)) {\n            var style = el.style ? formats.time[el.style] : undefined;\n            return formatters.getDateTimeFormat(locales, style);\n        }\n        if (isNumberElement(el)) {\n            var style = el.style ? formats.number[el.style] : undefined;\n            return formatters.getNumberFormat(locales, style);\n        }\n        if (isSelectElement(el)) {\n            return Object.keys(el.options).forEach(function (id) {\n                return prewarmFormatters(el.options[id].value, locales, formatters, formats);\n            });\n        }\n        if (isPluralElement(el)) {\n            formatters.getPluralRules(locales, { type: el.pluralType });\n            return Object.keys(el.options).forEach(function (id) {\n                return prewarmFormatters(el.options[id].value, locales, formatters, formats);\n            });\n        }\n    });\n}\nvar ESCAPE_HASH_REGEX = /\\\\#/g;\nfunction mergeLiteral(parts) {\n    if (parts.length < 2) {\n        return parts;\n    }\n    return parts.reduce(function (all, part) {\n        var lastPart = all[all.length - 1];\n        if (!lastPart ||\n            lastPart.type !== 0 /* literal */ ||\n            part.type !== 0 /* literal */) {\n            all.push(part);\n        }\n        else {\n            lastPart.value += part.value;\n        }\n        return all;\n    }, []);\n}\nfunction formatToParts(els, locales, formatters, formats, values, \n// For debugging\noriginalMessage) {\n    // Hot path for straight simple msg translations\n    if (els.length === 1 && isLiteralElement(els[0])) {\n        return [\n            {\n                type: 0 /* literal */,\n                value: els[0].value.replace(ESCAPE_HASH_REGEX, '#')\n            }\n        ];\n    }\n    var result = [];\n    for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {\n        var el = els_1[_i];\n        // Exit early for string parts.\n        if (isLiteralElement(el)) {\n            result.push({\n                type: 0 /* literal */,\n                value: el.value.replace(ESCAPE_HASH_REGEX, '#')\n            });\n            continue;\n        }\n        var varName = el.value;\n        // Enforce that all required values are provided by the caller.\n        if (!(values && varName in values)) {\n            throw new FormatError(\"The intl string context variable '\" + varName + \"' was not provided to the string '\" + originalMessage + \"'\");\n        }\n        var value = values[varName];\n        if (isArgumentElement(el)) {\n            if (!value || typeof value === 'string' || typeof value === 'number') {\n                result.push({\n                    type: 0 /* literal */,\n                    value: typeof value === 'string' || typeof value === 'number'\n                        ? String(value)\n                        : ''\n                });\n            }\n            else {\n                result.push({\n                    type: 1 /* argument */,\n                    value: value\n                });\n            }\n            continue;\n        }\n        // Recursively format plural and select parts' option — which can be a\n        // nested pattern structure. The choosing of the option to use is\n        // abstracted-by and delegated-to the part helper object.\n        if (isDateElement(el)) {\n            var style = el.style ? formats.date[el.style] : undefined;\n            result.push({\n                type: 0 /* literal */,\n                value: formatters\n                    .getDateTimeFormat(locales, style)\n                    .format(value)\n            });\n            continue;\n        }\n        if (isTimeElement(el)) {\n            var style = el.style ? formats.time[el.style] : undefined;\n            result.push({\n                type: 0 /* literal */,\n                value: formatters\n                    .getDateTimeFormat(locales, style)\n                    .format(value)\n            });\n            continue;\n        }\n        if (isNumberElement(el)) {\n            var style = el.style ? formats.number[el.style] : undefined;\n            result.push({\n                type: 0 /* literal */,\n                value: formatters\n                    .getNumberFormat(locales, style)\n                    .format(value)\n            });\n            continue;\n        }\n        if (isSelectElement(el)) {\n            var opt = el.options[value] || el.options.other;\n            if (!opt) {\n                throw new RangeError(\"Invalid values for \\\"\" + el.value + \"\\\": \\\"\" + value + \"\\\". Options are \\\"\" + Object.keys(el.options).join('\", \"') + \"\\\"\");\n            }\n            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));\n            continue;\n        }\n        if (isPluralElement(el)) {\n            var opt = el.options[\"=\" + value];\n            if (!opt) {\n                var rule = formatters\n                    .getPluralRules(locales, { type: el.pluralType })\n                    .select(value - (el.offset || 0));\n                opt = el.options[rule] || el.options.other;\n            }\n            if (!opt) {\n                throw new RangeError(\"Invalid values for \\\"\" + el.value + \"\\\": \\\"\" + value + \"\\\". Options are \\\"\" + Object.keys(el.options).join('\", \"') + \"\\\"\");\n            }\n            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));\n            continue;\n        }\n    }\n    return mergeLiteral(result);\n}\nfunction formatToString(els, locales, formatters, formats, values, \n// For debugging\noriginalMessage) {\n    var parts = formatToParts(els, locales, formatters, formats, values, originalMessage);\n    // Hot path for straight simple msg translations\n    if (parts.length === 1) {\n        return parts[0].value;\n    }\n    return parts.reduce(function (all, part) { return (all += part.value); }, '');\n}\nfunction mergeConfig(c1, c2) {\n    if (!c2) {\n        return c1;\n    }\n    return __assign({}, (c1 || {}), (c2 || {}), Object.keys(c1).reduce(function (all, k) {\n        all[k] = __assign({}, c1[k], (c2[k] || {}));\n        return all;\n    }, {}));\n}\nfunction mergeConfigs(defaultConfig, configs) {\n    if (!configs) {\n        return defaultConfig;\n    }\n    return Object.keys(defaultConfig).reduce(function (all, k) {\n        all[k] = mergeConfig(defaultConfig[k], configs[k]);\n        return all;\n    }, __assign({}, defaultConfig));\n}\nvar FormatError = /** @class */ (function (_super) {\n    __extends(FormatError, _super);\n    function FormatError(msg, variableId) {\n        var _this = _super.call(this, msg) || this;\n        _this.variableId = variableId;\n        return _this;\n    }\n    return FormatError;\n}(Error));\nexport function createDefaultFormatters(cache) {\n    if (cache === void 0) { cache = {\n        number: {},\n        dateTime: {},\n        pluralRules: {}\n    }; }\n    return {\n        getNumberFormat: memoizeIntlConstructor(Intl.NumberFormat, cache.number),\n        getDateTimeFormat: memoizeIntlConstructor(Intl.DateTimeFormat, cache.dateTime),\n        getPluralRules: memoizeIntlConstructor(Intl.PluralRules, cache.pluralRules)\n    };\n}\nvar IntlMessageFormat = /** @class */ (function () {\n    function IntlMessageFormat(message, locales, overrideFormats, opts) {\n        var _this = this;\n        if (locales === void 0) { locales = IntlMessageFormat.defaultLocale; }\n        this.formatterCache = {\n            number: {},\n            dateTime: {},\n            pluralRules: {}\n        };\n        this.format = function (values) {\n            return formatToString(_this.ast, _this.locale, _this.formatters, _this.formats, values, _this.message);\n        };\n        this.formatToParts = function (values) {\n            return formatToParts(_this.ast, _this.locale, _this.formatters, _this.formats, values, _this.message);\n        };\n        if (typeof message === 'string') {\n            this.message = message;\n            if (!IntlMessageFormat.__parse) {\n                throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');\n            }\n            // Parse string messages into an AST.\n            this.ast = IntlMessageFormat.__parse(message);\n        }\n        else {\n            this.ast = message;\n        }\n        if (!Array.isArray(this.ast)) {\n            throw new TypeError('A message must be provided as a String or AST.');\n        }\n        // Creates a new object with the specified `formats` merged with the default\n        // formats.\n        this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);\n        // Defined first because it's used to build the format pattern.\n        this.locale = resolveLocale(locales || []);\n        this.formatters =\n            (opts && opts.formatters) || createDefaultFormatters(this.formatterCache);\n        prewarmFormatters(this.ast, this.locale, this.formatters, this.formats);\n    }\n    IntlMessageFormat.prototype.resolvedOptions = function () {\n        return { locale: this.locale };\n    };\n    IntlMessageFormat.prototype.getAst = function () {\n        return this.ast;\n    };\n    IntlMessageFormat.defaultLocale = 'en';\n    IntlMessageFormat.__parse = undefined;\n    // Default format options used as the prototype of the `formats` provided to the\n    // constructor. These are used when constructing the internal Intl.NumberFormat\n    // and Intl.DateTimeFormat instances.\n    IntlMessageFormat.formats = {\n        number: {\n            currency: {\n                style: 'currency'\n            },\n            percent: {\n                style: 'percent'\n            }\n        },\n        date: {\n            short: {\n                month: 'numeric',\n                day: 'numeric',\n                year: '2-digit'\n            },\n            medium: {\n                month: 'short',\n                day: 'numeric',\n                year: 'numeric'\n            },\n            long: {\n                month: 'long',\n                day: 'numeric',\n                year: 'numeric'\n            },\n            full: {\n                weekday: 'long',\n                month: 'long',\n                day: 'numeric',\n                year: 'numeric'\n            }\n        },\n        time: {\n            short: {\n                hour: 'numeric',\n                minute: 'numeric'\n            },\n            medium: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric'\n            },\n            long: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                timeZoneName: 'short'\n            },\n            full: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                timeZoneName: 'short'\n            }\n        }\n    };\n    return IntlMessageFormat;\n}());\nexport { IntlMessageFormat };\nexport default IntlMessageFormat;\n","/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\nimport { parse } from 'intl-messageformat-parser';\nimport IntlMessageFormat from './core';\nIntlMessageFormat.__parse = parse;\nexport * from './core';\nexport default IntlMessageFormat;\n","import { parse as pegParse } from './parser';\nimport { normalizeHashtagInPlural } from './normalize';\nexport * from './types';\nexport * from './parser';\nexport { printAST } from './printer';\nexport function parse(input, opts) {\n    var els = pegParse(input, opts);\n    if (!opts || opts.normalizeHashtagInPlural !== false) {\n        normalizeHashtagInPlural(els);\n    }\n    return els;\n}\n"],"names":["extendStatics","_super","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","SyntaxError","Error","buildMessage","expected","found","hex","ch","charCodeAt","toString","toUpperCase","literalEscape","replace","classEscape","describeExpectation","expectation","type","text","escapedParts","parts","map","part","isArray","inverted","description","expected1","j","descriptions","sort","slice","join","describeExpected","found1","message","location","_this","name","captureStackTrace","parse","input","options","undefined","peg$result","location1","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c0","chunks","reduce","all","chunk","concat","peg$c1","messageText","value","insertLocation","peg$c2","chars","peg$c3","peg$otherExpectation","peg$c4","peg$c5","peg$literalExpectation","peg$c6","peg$c7","peg$c8","peg$c9","peg$c10","peg$c11","peg$c12","peg$c13","peg$c14","peg$c15","peg$c16","peg$c17","style","peg$c18","peg$c19","peg$c20","peg$c21","peg$c22","peg$c23","peg$c24","pluralType","offset","_a","id","peg$c25","peg$c26","peg$c27","peg$c28","peg$c29","peg$c30","peg$c31","peg$c32","peg$c33","peg$c34","peg$c35","peg$c36","peg$c37","peg$c38","peg$c39","peg$c40","peg$c41","peg$c42","peg$c43","peg$c44","peg$c45","peg$c46","peg$c47","peg$c48","peg$c49","peg$c50","peg$classExpectation","peg$c51","peg$c52","peg$c53","peg$c54","peg$c55","peg$c56","digits","parseInt","peg$c57","peg$c58","peg$c59","peg$c60","peg$c61","peg$c62","char","peg$c63","sequence","peg$c64","peg$c65","peg$c66","peg$c67","peg$c68","peg$c69","peg$c70","peg$c71","peg$c72","peg$c73","peg$c74","peg$c75","peg$c76","peg$c77","peg$c78","peg$c79","peg$c80","peg$c81","String","fromCharCode","peg$currPos","peg$savedPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","text1","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","end","peg$fail","push","peg$parsemessage","s0","s1","peg$parsemessageElement","s2","s3","s4","s5","peg$parse_","peg$parsechars","peg$parsews","substring","peg$parsemessageText","peg$parseliteralElement","peg$parsevarName","peg$parseargumentElement","s7","s9","s10","s11","s12","substr","peg$parsesimpleFormatElement","s13","s14","s15","peg$parsenumber","peg$parsepluralOption","peg$parsepluralElement","peg$parseselectOption","peg$parseselectElement","peg$parsequoteEscapedChar","s6","peg$parsepluralRuleSelectValue","test","charAt","peg$parsedigit","peg$parsehexDigit","peg$parseapostrophe","peg$parseescape","peg$parsechar","captureLocation","isLiteralElement","el","isArgumentElement","isNumberElement","isDateElement","isTimeElement","isSelectElement","isPluralElement","PLURAL_HASHTAG_REGEX","getCacheId","inputs","JSON","stringify","obj","keys","k","orderedProps","memoizeFormatConstructor","FormatConstructor","cache","args","_i","cacheId","format","bind","ESCAPE_HASH_REGEX","formatToParts","els","locales","formatters","formats","values","originalMessage","result","els_1","varName","FormatError","date","getDateTimeFormat","time","number","getNumberFormat","opt","other","RangeError","rule","getPluralRules","select","lastPart","mergeLiteral","mergeConfigs","defaultConfig","configs","c1","c2","mergeConfig","msg","variableId","createDefaultFormatters","dateTime","pluralRules","memoizeIntlConstructor","Intl","NumberFormat","DateTimeFormat","PluralRules","IntlMessageFormat","resolvedOptions","locale","getAst","ast","defaultLocale","__parse","currency","percent","short","month","day","year","medium","long","full","weekday","hour","minute","second","timeZoneName","overrideFormats","opts","formatterCache","formatToString","TypeError","supportedLocalesOf","localeMatcher","e","resolveLocale","prewarmFormatters","filter","forEach","pegParse","normalizeHashtagInPlural","matchingLiteralElIndex","literalEl","el_1","newValue","newEls","splice"],"mappings":"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"}