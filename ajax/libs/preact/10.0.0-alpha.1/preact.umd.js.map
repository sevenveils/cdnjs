{"version":3,"file":"preact.umd.js","sources":["../src/options.js","../src/component.js","../src/create-context.js","../src/constants.js","../src/util.js","../src/create-element.js","../src/diff/children.js","../src/diff/props.js","../src/diff/index.js","../src/render.js","../src/clone-element.js"],"sourcesContent":["/** @type {import('./index').Options}  */\nconst options = {};\n\nexport default options;\n","import { assign } from './util';\nimport { diff, commitRoot } from './diff/index';\nimport options from './options';\nimport { Fragment } from './create-element';\n\n/**\n * Base Component class. Provides `setState()` and `forceUpdate()`, which\n * trigger rendering\n * @param {object} props The initial component props\n * @param {object} context The initial context from parent components'\n * getChildContext\n */\nexport function Component(props, context) {\n\tthis.props = props;\n\tthis.context = context;\n\t// if (this.state==null) this.state = {};\n\t// this.state = {};\n\t// this._dirty = true;\n\t// this._renderCallbacks = []; // Only class components\n\n\t// Other properties that Component will have set later,\n\t// shown here as commented out for quick reference\n\t// this.base = null;\n\t// this._ancestorComponent = null; // Always set right after instantiation\n\t// this._vnode = null;\n\t// this._nextState = null; // Only class components\n\t// this._prevVNode = null;\n\t// this._processingException = null; // Always read, set only when handling error\n\t// this._constructor = null; // Only functional components, always set right after instantiation\n}\n\n/**\n * Update component state and schedule a re-render.\n * @param {object | ((s: object, p: object) => object)} update A hash of state\n * properties to update with new values or a function that given the current\n * state and props returns a new partial state\n * @param {() => void} [callback] A function to be called once component state is\n * updated\n */\nComponent.prototype.setState = function(update, callback) {\n\n\t// only clone state when copying to nextState the first time.\n\tlet s = (this._nextState!==this.state && this._nextState) || (this._nextState = assign({}, this.state));\n\n\t// Needed for the devtools to check if state has changed after the tree\n\t// has been committed\n\tthis._prevState = assign({}, s);\n\n\t// if update() mutates state in-place, skip the copy:\n\tif (typeof update!=='function' || (update = update(s, this.props))) {\n\t\tassign(s, update);\n\t}\n\n\t// Skip update if updater function returned null\n\tif (update==null) return;\n\n\tif (callback!=null) this._renderCallbacks.push(callback);\n\n\tthis._force = false;\n\tenqueueRender(this);\n};\n\n/**\n * Immediately perform a synchronous re-render of the component\n * @param {() => void} [callback] A function to be called after component is\n * re-renderd\n */\nComponent.prototype.forceUpdate = function(callback) {\n\tlet vnode = this._vnode, dom = this._vnode._dom, parentDom = this._parentDom;\n\tif (parentDom!=null) {\n\t\t// Set render mode so that we can differantiate where the render request\n\t\t// is coming from. We need this because forceUpdate should never call\n\t\t// shouldComponentUpdate\n\t\tif (this._force==null) this._force = true;\n\n\t\tlet mounts = [];\n\t\tdom = diff(dom, parentDom, vnode, vnode, this._context, parentDom.ownerSVGElement!==undefined, null, mounts, this._ancestorComponent);\n\t\tif (dom!=null && dom.parentNode!==parentDom) {\n\t\t\tparentDom.appendChild(dom);\n\t\t}\n\t\tcommitRoot(mounts, vnode);\n\n\t\t// Reset mode to its initial value for the next render\n\t\tthis._force = null;\n\t}\n\tif (callback!=null) callback();\n};\n\n/**\n * Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n * Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n * @param {object} props Props (eg: JSX attributes) received from parent\n * element/component\n * @param {object} state The component's current state\n * @param {object} context Context object, as returned by the nearest\n * ancestor's `getChildContext()`\n * @returns {import('./index').ComponentChildren | void}\n */\nComponent.prototype.render = Fragment;\n\n/**\n * The render queue\n * @type {Array<import('./internal').Component>}\n */\nlet q = [];\n\n/**\n * Asynchronously schedule a callback\n * @type {(cb) => void}\n */\nconst defer = typeof Promise=='function' ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout;\n\n/*\n * The value of `Component.debounce` must asynchronously invoke the passed in callback. It is\n * important that contributors to Preact can consistenly reason about what calls to `setState`, etc.\n * do, and when their effects will be applied. See the links below for some further reading on designing\n * asynchronous APIs.\n * * [Designing APIs for Asynchrony](https://blog.izs.me/2013/08/designing-apis-for-asynchrony)\n * * [Callbacks synchronous and asynchronous](https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/)\n */\n\n/**\n * Enqueue a rerender of a component\n * @param {import('./internal').Component} c The component to rerender\n */\nexport function enqueueRender(c) {\n\tif (!c._dirty && (c._dirty = true) && q.push(c) === 1) {\n\t\t(options.debounceRendering || defer)(process);\n\t}\n}\n\n/** Flush the render queue by rerendering all queued components */\nfunction process() {\n\tlet p;\n\twhile ((p=q.pop())) {\n\t\tif (p._dirty) p.forceUpdate();\n\t}\n}\n","import { enqueueRender } from './component';\n\nexport let i = 0;\n\n/**\n *\n * @param {any} defaultValue\n */\nexport function createContext(defaultValue) {\n\tconst id = '__cC' + i++;\n\n\tlet context = {\n\t\t_id: id,\n\t\t_defaultValue: defaultValue\n\t};\n\n\tfunction Consumer(props, context) {\n\t\treturn props.children(context);\n\t}\n\tConsumer.contextType = context;\n\tcontext.Consumer = Consumer;\n\n\tlet ctx = { [id]: null };\n\n\tfunction initProvider(comp) {\n\t\tlet subs = [];\n\t\tcomp.getChildContext = () => {\n\t\t\tctx[id] = comp;\n\t\t\treturn ctx;\n\t\t};\n\t\tcomp.componentDidUpdate = () => {\n\t\t\tlet v = comp.props.value;\n\t\t\tsubs.map(c => v!==c.context && (c.context = v, enqueueRender(c)));\n\t\t};\n\t\tcomp.sub = (c) => {\n\t\t\tsubs.push(c);\n\t\t\tlet old = c.componentWillUnmount;\n\t\t\tc.componentWillUnmount = () => {\n\t\t\t\tsubs.splice(subs.indexOf(c), 1);\n\t\t\t\told && old();\n\t\t\t};\n\t\t};\n\t}\n\n\tfunction Provider(props) {\n\t\tif (!this.getChildContext) initProvider(this);\n\t\treturn props.children;\n\t}\n\tcontext.Provider = Provider;\n\n\treturn context;\n}\n","export const EMPTY_OBJ = {};\nexport const EMPTY_ARR = [];\nexport const IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;\n","/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nexport function assign(obj, props) {\n\tfor (let i in props) obj[i] = props[i];\n\treturn /** @type {O & P} */ (obj);\n}\n","import options from './options';\n\n/**\n  * Create an virtual node (used for JSX)\n  * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n  * constructor for this virtual node\n  * @param {object | null | undefined} [props] The properties of the virtual node\n  * @param {Array<import('.').ComponentChildren>} [children] The children of the virtual node\n  * @returns {import('./internal').VNode}\n  */\nexport function createElement(type, props, children) {\n\tif (props==null) props = {};\n\tif (arguments.length>3) {\n\t\tchildren = [children];\n\t\tfor (let i=3; i<arguments.length; i++) {\n\t\t\tchildren.push(arguments[i]);\n\t\t}\n\t}\n\tif (children!=null) {\n\t\tprops.children = children;\n\t}\n\n\t// \"type\" may be undefined during development. The check is needed so that\n\t// we can display a nice error message with our debug helpers\n\tif (type!=null && type.defaultProps!=null) {\n\t\tfor (let i in type.defaultProps) {\n\t\t\tif (props[i]===undefined) props[i] = type.defaultProps[i];\n\t\t}\n\t}\n\tlet ref = props.ref;\n\tif (ref) delete props.ref;\n\tlet key = props.key;\n\tif (key) delete props.key;\n\n\treturn createVNode(type, props, null, key, ref);\n}\n\n/**\n * Create a VNode (used internally by Preact)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * Constructor for this virtual node\n * @param {object} props The properites of this virtual node\n * @param {string | number} text If this virtual node represents a text node,\n * this is the text of the node\n * @param {string |number | null} key The key for this virtual node, used when\n * diffing it against its children\n * @param {import('./internal').VNode[\"ref\"]} ref The ref property that will\n * receive a reference to its created child\n * @returns {import('./internal').VNode}\n */\nexport function createVNode(type, props, text, key, ref) {\n\t// V8 seems to be better at detecting type shapes if the object is allocated from the same call site\n\t// Do not inline into createElement and coerceToVNode!\n\tconst vnode = {\n\t\ttype,\n\t\tprops,\n\t\ttext,\n\t\tkey,\n\t\tref,\n\t\t_children: null,\n\t\t_dom: null,\n\t\t_lastDomChild: null,\n\t\t_component: null\n\t};\n\n\tif (options.vnode) options.vnode(vnode);\n\n\treturn vnode;\n}\n\nexport function createRef() {\n\treturn {};\n}\n\nexport /* istanbul ignore next */ function Fragment() { }\n\n/**\n * Coerce an untrusted value into a VNode\n * Specifically, this should be used anywhere a user could provide a boolean, string, or number where\n * a VNode or Component is desired instead\n * @param {boolean | string | number | import('./internal').VNode} possibleVNode A possible VNode\n * @returns {import('./internal').VNode}\n */\nexport function coerceToVNode(possibleVNode) {\n\tif (possibleVNode == null || typeof possibleVNode === 'boolean') return null;\n\tif (typeof possibleVNode === 'string' || typeof possibleVNode === 'number') {\n\t\treturn createVNode(null, null, possibleVNode, null, null);\n\t}\n\n\tif (Array.isArray(possibleVNode)) {\n\t\treturn createElement(Fragment, null, possibleVNode);\n\t}\n\n\t// Clone vnode if it has already been used. ceviche/#57\n\tif (possibleVNode._dom!=null) {\n\t\treturn createVNode(possibleVNode.type, possibleVNode.props, possibleVNode.text, possibleVNode.key, null);\n\t}\n\n\treturn possibleVNode;\n}\n","import { diff, unmount } from './index';\nimport { coerceToVNode, Fragment } from '../create-element';\nimport { EMPTY_OBJ, EMPTY_ARR } from '../constants';\n\n/**\n * Diff the children of a virtual node\n * @param {import('../internal').PreactElement} parentDom The DOM element whose\n * children are being diffed\n * @param {import('../internal').VNode} newParentVNode The new virtual\n * node whose children should be diff'ed against oldParentVNode\n * @param {import('../internal').VNode} oldParentVNode The old virtual\n * node whose children should be diff'ed against newParentVNode\n * @param {object} context The current context object\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} mounts The list of components\n * which have mounted\n * @param {import('../internal').Component} ancestorComponent The direct parent\n * component to the ones being diffed\n */\nexport function diffChildren(parentDom, newParentVNode, oldParentVNode, context, isSvg, excessDomChildren, mounts, ancestorComponent) {\n\tlet childVNode, i, j, p, index, oldVNode, newDom,\n\t\tnextDom, sibDom, focus,\n\t\tchildDom;\n\n\tlet newChildren = getVNodeChildren(newParentVNode);\n\tlet oldChildren = oldParentVNode==null || oldParentVNode==EMPTY_OBJ ? EMPTY_ARR : getVNodeChildren(oldParentVNode);\n\n\tlet oldChildrenLength = oldChildren.length;\n\n\tchildDom = oldChildren.length ? oldChildren[0] && oldChildren[0]._dom : null;\n\tif (excessDomChildren!=null) {\n\t\tfor (i = 0; i < excessDomChildren.length; i++) {\n\t\t\tif (excessDomChildren[i]!=null) {\n\t\t\t\tchildDom = excessDomChildren[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (i=0; i<newChildren.length; i++) {\n\t\tchildVNode = newChildren[i] = coerceToVNode(newChildren[i]);\n\t\toldVNode = index = null;\n\n\t\t// Check if we find a corresponding element in oldChildren and store the\n\t\t// index where the element was found.\n\t\tp = oldChildren[i];\n\t\tif (p != null && (childVNode.key==null && p.key==null ? (childVNode.type === p.type) : (childVNode.key === p.key))) {\n\t\t\tindex = i;\n\t\t}\n\t\telse {\n\t\t\tfor (j=0; j<oldChildrenLength; j++) {\n\t\t\t\tp = oldChildren[j];\n\t\t\t\tif (p!=null) {\n\t\t\t\t\tif (childVNode.key==null && p.key==null ? (childVNode.type === p.type) : (childVNode.key === p.key)) {\n\t\t\t\t\t\tindex = j;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If we have found a corresponding old element we store it in a variable\n\t\t// and delete it from the array. That way the next iteration can skip this\n\t\t// element.\n\t\tif (index!=null) {\n\t\t\toldVNode = oldChildren[index];\n\t\t\toldChildren[index] = null;\n\t\t}\n\n\t\tnextDom = childDom!=null && childDom.nextSibling;\n\n\t\t// Morph the old element into the new one, but don't append it to the dom yet\n\t\tnewDom = diff(oldVNode==null ? null : oldVNode._dom, parentDom, childVNode, oldVNode, context, isSvg, excessDomChildren, mounts, ancestorComponent);\n\n\t\t// Only proceed if the vnode has not been unmounted by `diff()` above.\n\t\tif (childVNode!=null && newDom !=null) {\n\t\t\t// Store focus in case moving children around changes it. Note that we\n\t\t\t// can't just check once for every tree, because we have no way to\n\t\t\t// differentiate wether the focus was reset by the user in a lifecycle\n\t\t\t// hook or by reordering dom nodes.\n\t\t\tfocus = document.activeElement;\n\n\t\t\tif (childVNode._lastDomChild != null) {\n\t\t\t\t// Only Fragments or components that return Fragment like VNodes will\n\t\t\t\t// have a non-null _lastDomChild. Continue the diff from the end of\n\t\t\t\t// this Fragment's DOM tree.\n\t\t\t\tnewDom = childVNode._lastDomChild;\n\t\t\t}\n\t\t\telse if (excessDomChildren==oldVNode || newDom!=childDom || newDom.parentNode==null) {\n\t\t\t\t// NOTE: excessDomChildren==oldVNode above:\n\t\t\t\t// This is a compression of excessDomChildren==null && oldVNode==null!\n\t\t\t\t// The values only have the same type when `null`.\n\n\t\t\t\touter: if (childDom==null || childDom.parentNode!==parentDom) {\n\t\t\t\t\tparentDom.appendChild(newDom);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsibDom = childDom;\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ((sibDom=sibDom.nextSibling) && j++<oldChildrenLength/2) {\n\t\t\t\t\t\tif (sibDom===newDom) {\n\t\t\t\t\t\t\tbreak outer;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tparentDom.insertBefore(newDom, childDom);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Restore focus if it was changed\n\t\t\tif (focus!==document.activeElement) {\n\t\t\t\tfocus.focus();\n\t\t\t}\n\n\t\t\tchildDom = newDom!=null ? newDom.nextSibling : nextDom;\n\t\t}\n\t}\n\n\t// Remove children that are not part of any vnode. Only used by `hydrate`\n\tif (excessDomChildren!=null && newParentVNode.type!==Fragment) for (i=excessDomChildren.length; i--; ) if (excessDomChildren[i]!=null) excessDomChildren[i].remove();\n\n\t// Remove remaining oldChildren if there are any.\n\tfor (i=oldChildren.length; i--; ) if (oldChildren[i]!=null) unmount(oldChildren[i], ancestorComponent);\n}\n\n/**\n * Get the children of a virtual node as a flat array\n * @param {import('../internal').VNode} vnode The virtual node to get the\n * children of\n * @returns {Array<import('../internal').VNode>} The virtual node's children\n */\nfunction getVNodeChildren(vnode) {\n\tif (vnode._children==null) {\n\t\ttoChildArray(vnode.props.children, vnode._children=[], coerceToVNode);\n\t}\n\treturn vnode._children;\n}\n\n/**\n * Flatten a virtual nodes children to a single dimensional array\n * @param {import('../index').ComponentChildren} children The unflattened\n * children of a virtual node\n * @param {Array<import('../internal').VNode | null>} [flattened] An flat array of children to modify\n */\nexport function toChildArray(children, flattened, map) {\n\tif (flattened == null) flattened = [];\n\tif (children==null || typeof children === 'boolean') {}\n\telse if (Array.isArray(children)) {\n\t\tfor (let i=0; i < children.length; i++) {\n\t\t\ttoChildArray(children[i], flattened);\n\t\t}\n\t}\n\telse {\n\t\tflattened.push(map ? map(children) : children);\n\t}\n\n\treturn flattened;\n}\n","import { IS_NON_DIMENSIONAL } from '../constants';\nimport options from '../options';\n\n/**\n * Diff the old and new properties of a VNode and apply changes to the DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to apply\n * changes to\n * @param {object} newProps The new props\n * @param {object} oldProps The old props\n * @param {boolean} isSvg Whether or not this node is an SVG node\n */\nexport function diffProps(dom, newProps, oldProps, isSvg) {\n\tfor (let i in newProps) {\n\t\tif (i!=='children' && i!=='key' && (!oldProps || oldProps[i]!=newProps[i])) {\n\t\t\tsetProperty(dom, i, newProps[i], oldProps[i], isSvg);\n\t\t}\n\t}\n\tfor (let i in oldProps) {\n\t\tif (i!=='children' && i!=='key' && (!newProps || !(i in newProps))) {\n\t\t\tsetProperty(dom, i, null, oldProps[i], isSvg);\n\t\t}\n\t}\n}\n\n/**\n * Set a property value on a DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to modify\n * @param {string} name The name of the property to set\n * @param {*} value The value to set the property to\n * @param {*} oldValue The old value the property had\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node or not\n */\nfunction setProperty(dom, name, value, oldValue, isSvg) {\n\tlet v;\n\tif (name==='class' || name==='className') name = isSvg ? 'class' : 'className';\n\n\tif (name==='style') {\n\n\t\t/* Possible golfing activities for setting styles:\n\t\t *   - we could just drop String style values. They're not supported in other VDOM libs.\n\t\t *   - assigning to .style sets .style.cssText - TODO: benchmark this, might not be worth the bytes.\n\t\t *   - assigning also casts to String, and ignores invalid values. This means assigning an Object clears all styles.\n\t\t */\n\t\tlet s = dom.style;\n\n\t\tif (typeof value==='string') {\n\t\t\ts.cssText = value;\n\t\t}\n\t\telse {\n\t\t\tif (typeof oldValue==='string') s.cssText = '';\n\t\t\t// remove values not in the new list\n\t\t\tfor (let i in oldValue) {\n\t\t\t\tif (value==null || !(i in value)) s.setProperty(i, '');\n\t\t\t}\n\t\t}\n\n\t\tfor (let i in value) {\n\t\t\tv = value[i];\n\t\t\tif (oldValue==null || v!==oldValue[i]) {\n\t\t\t\ts.setProperty(i.replace(/-?(?=[A-Z])/g, '-'), typeof v==='number' && IS_NON_DIMENSIONAL.test(i)===false ? (v + 'px') : v);\n\t\t\t}\n\t\t}\n\t}\n\telse if (name==='dangerouslySetInnerHTML') {\n\t\t// Avoid re-applying the same '__html' if it did not changed between re-render\n\t\tif (!value || !oldValue || value.__html!=oldValue.__html) {\n\t\t\tdom.innerHTML = value && value.__html || '';\n\t\t}\n\t}\n\t// Benchmark for comparison: https://esbench.com/bench/574c954bdb965b9a00965ac6\n\telse if (name[0]==='o' && name[1]==='n') {\n\t\tlet useCapture = name !== (name=name.replace(/Capture$/, ''));\n\t\tlet nameLower = name.toLowerCase();\n\t\tname = (nameLower in dom ? nameLower : name).substring(2);\n\n\t\tif (value) {\n\t\t\tif (!oldValue) dom.addEventListener(name, eventProxy, useCapture);\n\t\t}\n\t\telse {\n\t\t\tdom.removeEventListener(name, eventProxy, useCapture);\n\t\t}\n\t\t(dom._listeners || (dom._listeners = {}))[name] = value;\n\t}\n\telse if (name!=='list' && !isSvg && (name in dom)) {\n\t\tdom[name] = value==null ? '' : value;\n\t}\n\telse if (value==null || value===false) {\n\t\tdom.removeAttribute(name);\n\t}\n\telse if (typeof value!=='function') {\n\t\tdom.setAttribute(name, value);\n\t}\n}\n\n/**\n * Proxy an event to hooked event handlers\n * @param {Event} e The event object from the browser\n * @private\n */\nfunction eventProxy(e) {\n\treturn this._listeners[e.type](options.event ? options.event(e) : e);\n}\n","import { EMPTY_OBJ, EMPTY_ARR } from '../constants';\nimport { Component, enqueueRender } from '../component';\nimport { coerceToVNode, Fragment } from '../create-element';\nimport { diffChildren } from './children';\nimport { diffProps } from './props';\nimport { assign } from '../util';\nimport options from '../options';\n\n/**\n * Diff two virtual nodes and apply proper changes to the DOM\n * @param {import('../internal').PreactElement | Text} dom The DOM element representing\n * the virtual nodes under diff\n * @param {import('../internal').PreactElement} parentDom The parent of the DOM element\n * @param {import('../internal').VNode | null} newVNode The new virtual node\n * @param {import('../internal').VNode | null} oldVNode The old virtual node\n * @param {object} context The current context object\n * @param {boolean} isSvg Whether or not this element is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} mounts A list of newly\n * mounted components\n * @param {import('../internal').Component | null} ancestorComponent The direct\n * parent component\n */\nexport function diff(dom, parentDom, newVNode, oldVNode, context, isSvg, excessDomChildren, mounts, ancestorComponent) {\n\n\t// If the previous type doesn't match the new type we drop the whole subtree\n\tif (oldVNode==null || newVNode==null || oldVNode.type!==newVNode.type) {\n\t\tif (oldVNode!=null) unmount(oldVNode, ancestorComponent);\n\t\tif (newVNode==null) return null;\n\t\tdom = null;\n\t\toldVNode = EMPTY_OBJ;\n\t}\n\n\tif (options.diff) options.diff(newVNode);\n\n\tlet c, p, isNew = false, oldProps, oldState, oldContext,\n\t\tnewType = newVNode.type;\n\n\t/** @type {import('../internal').Component | null} */\n\tlet clearProcessingException;\n\n\ttry {\n\t\touter: if (oldVNode.type===Fragment || newType===Fragment) {\n\t\t\tdiffChildren(parentDom, newVNode, oldVNode, context, isSvg, excessDomChildren, mounts, c);\n\n\t\t\tif (newVNode._children.length) {\n\t\t\t\tdom = newVNode._children[0]._dom;\n\t\t\t\tnewVNode._lastDomChild = newVNode._children[newVNode._children.length - 1]._dom;\n\t\t\t}\n\t\t}\n\t\telse if (typeof newType==='function') {\n\n\t\t\t// Necessary for createContext api. Setting this property will pass\n\t\t\t// the context value as `this.context` just for this component.\n\t\t\tlet cxType = newType.contextType;\n\t\t\tlet provider = cxType && context[cxType._id];\n\t\t\tlet cctx = cxType != null ? (provider ? provider.props.value : cxType._defaultValue) : context;\n\n\t\t\t// Get component and set it to `c`\n\t\t\tif (oldVNode._component) {\n\t\t\t\tc = newVNode._component = oldVNode._component;\n\t\t\t\tclearProcessingException = c._processingException;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tisNew = true;\n\n\t\t\t\t// Instantiate the new component\n\t\t\t\tif (newType.prototype && newType.prototype.render) {\n\t\t\t\t\tnewVNode._component = c = new newType(newVNode.props, cctx); // eslint-disable-line new-cap\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tnewVNode._component = c = new Component(newVNode.props, cctx);\n\t\t\t\t\tc.constructor = newType;\n\t\t\t\t\tc.render = doRender;\n\t\t\t\t}\n\t\t\t\tc._ancestorComponent = ancestorComponent;\n\t\t\t\tif (provider) provider.sub(c);\n\n\t\t\t\tc.props = newVNode.props;\n\t\t\t\tif (!c.state) c.state = {};\n\t\t\t\tc.context = cctx;\n\t\t\t\tc._context = context;\n\t\t\t\tc._dirty = true;\n\t\t\t\tc._renderCallbacks = [];\n\t\t\t}\n\n\t\t\tc._vnode = newVNode;\n\n\t\t\t// Invoke getDerivedStateFromProps\n\t\t\tlet s = c._nextState || c.state;\n\t\t\tif (newType.getDerivedStateFromProps!=null) {\n\t\t\t\toldState = assign({}, c.state);\n\t\t\t\tif (s===c.state) s = assign({}, s);\n\t\t\t\tassign(s, newType.getDerivedStateFromProps(newVNode.props, s));\n\t\t\t}\n\n\t\t\t// Invoke pre-render lifecycle methods\n\t\t\tif (isNew) {\n\t\t\t\tif (newType.getDerivedStateFromProps==null && c.componentWillMount!=null) c.componentWillMount();\n\t\t\t\tif (c.componentDidMount!=null) mounts.push(c);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (newType.getDerivedStateFromProps==null && c._force==null && c.componentWillReceiveProps!=null) {\n\t\t\t\t\tc.componentWillReceiveProps(newVNode.props, cctx);\n\t\t\t\t}\n\n\t\t\t\tif (!c._force && c.shouldComponentUpdate!=null && c.shouldComponentUpdate(newVNode.props, s, cctx)===false) {\n\t\t\t\t\tc.props = newVNode.props;\n\t\t\t\t\tc.state = s;\n\t\t\t\t\tc._dirty = false;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\n\t\t\t\tif (c.componentWillUpdate!=null) {\n\t\t\t\t\tc.componentWillUpdate(newVNode.props, s, cctx);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toldProps = c.props;\n\t\t\tif (!oldState) oldState = c.state;\n\n\t\t\toldContext = c.context = cctx;\n\t\t\tc.props = newVNode.props;\n\t\t\tc.state = s;\n\n\t\t\tif (options.render) options.render(newVNode);\n\n\t\t\tlet prev = c._prevVNode;\n\t\t\tlet vnode = c._prevVNode = coerceToVNode(c.render(c.props, c.state, c.context));\n\t\t\tc._dirty = false;\n\n\t\t\tif (c.getChildContext!=null) {\n\t\t\t\tcontext = assign(assign({}, context), c.getChildContext());\n\t\t\t}\n\n\t\t\tif (!isNew && c.getSnapshotBeforeUpdate!=null) {\n\t\t\t\toldContext = c.getSnapshotBeforeUpdate(oldProps, oldState);\n\t\t\t}\n\n\t\t\tc.base = dom = diff(dom, parentDom, vnode, prev, context, isSvg, excessDomChildren, mounts, c);\n\n\t\t\tif (vnode!=null) {\n\t\t\t\t// If this component returns a Fragment (or another component that\n\t\t\t\t// returns a Fragment), then _lastDomChild will be non-null,\n\t\t\t\t// informing `diffChildren` to diff this component's VNode like a Fragemnt\n\t\t\t\tnewVNode._lastDomChild = vnode._lastDomChild;\n\t\t\t}\n\n\t\t\tc._parentDom = parentDom;\n\n\t\t\tif (newVNode.ref) applyRef(newVNode.ref, c, ancestorComponent);\n\t\t}\n\t\telse {\n\t\t\tdom = diffElementNodes(dom, newVNode, oldVNode, context, isSvg, excessDomChildren, mounts, ancestorComponent);\n\n\t\t\tif (newVNode.ref && (oldVNode.ref !== newVNode.ref)) {\n\t\t\t\tapplyRef(newVNode.ref, dom, ancestorComponent);\n\t\t\t}\n\t\t}\n\n\t\tnewVNode._dom = dom;\n\n\t\tif (c!=null) {\n\t\t\twhile (p=c._renderCallbacks.pop()) p.call(c);\n\n\t\t\t// Don't call componentDidUpdate on mount or when we bailed out via\n\t\t\t// `shouldComponentUpdate`\n\t\t\tif (!isNew && oldProps!=null && c.componentDidUpdate!=null) {\n\t\t\t\tc.componentDidUpdate(oldProps, oldState, oldContext);\n\t\t\t}\n\t\t}\n\n\t\tif (clearProcessingException) {\n\t\t\tc._processingException = null;\n\t\t}\n\n\t\tif (options.diffed) options.diffed(newVNode);\n\t}\n\tcatch (e) {\n\t\tcatchErrorInComponent(e, ancestorComponent);\n\t}\n\n\treturn dom;\n}\n\nexport function commitRoot(mounts, root) {\n\tlet c;\n\twhile ((c = mounts.pop())) {\n\t\ttry {\n\t\t\tc.componentDidMount();\n\t\t}\n\t\tcatch (e) {\n\t\t\tcatchErrorInComponent(e, c._ancestorComponent);\n\t\t}\n\t}\n\n\tif (options.commit) options.commit(root);\n}\n\n/**\n * Diff two virtual nodes representing DOM element\n * @param {import('../internal').PreactElement} dom The DOM element representing\n * the virtual nodes being diffed\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} context The current context object\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {*} excessDomChildren\n * @param {Array<import('../internal').Component>} mounts An array of newly\n * mounted components\n * @param {import('../internal').Component} ancestorComponent The parent\n * component to the ones being diffed\n * @returns {import('../internal').PreactElement}\n */\nfunction diffElementNodes(dom, newVNode, oldVNode, context, isSvg, excessDomChildren, mounts, ancestorComponent) {\n\tlet d = dom;\n\n\t// Tracks entering and exiting SVG namespace when descending through the tree.\n\tisSvg = isSvg ? newVNode.type !== 'foreignObject' : newVNode.type === 'svg';\n\n\tif (dom==null && excessDomChildren!=null) {\n\t\tfor (let i=0; i<excessDomChildren.length; i++) {\n\t\t\tconst child = excessDomChildren[i];\n\t\t\tif (child!=null && (newVNode.type===null ? child.nodeType===3 : child.localName===newVNode.type)) {\n\t\t\t\tdom = child;\n\t\t\t\texcessDomChildren[i] = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (dom==null) {\n\t\tdom = newVNode.type===null ? document.createTextNode(newVNode.text) : isSvg ? document.createElementNS('http://www.w3.org/2000/svg', newVNode.type) : document.createElement(newVNode.type);\n\n\t\t// we created a new parent, so none of the previously attached children can be reused:\n\t\texcessDomChildren = null;\n\t}\n\tnewVNode._dom = dom;\n\n\tif (newVNode.type===null) {\n\t\tif ((d===null || dom===d) && newVNode.text!==oldVNode.text) {\n\t\t\tdom.data = newVNode.text;\n\t\t}\n\t}\n\telse {\n\t\tif (excessDomChildren!=null && dom.childNodes!=null) {\n\t\t\texcessDomChildren = EMPTY_ARR.slice.call(dom.childNodes);\n\t\t}\n\t\tif (newVNode!==oldVNode) {\n\t\t\tlet oldProps = oldVNode.props;\n\t\t\t// if we're hydrating, use the element's attributes as its current props:\n\t\t\tif (oldProps==null) {\n\t\t\t\toldProps = {};\n\t\t\t\tif (excessDomChildren!=null) {\n\t\t\t\t\tfor (let i=0; i<dom.attributes.length; i++) {\n\t\t\t\t\t\toldProps[dom.attributes[i].name] = dom.attributes[i].value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tdiffProps(dom, newVNode.props, oldProps, isSvg);\n\t\t}\n\n\t\tdiffChildren(dom, newVNode, oldVNode, context, isSvg, excessDomChildren, mounts, ancestorComponent);\n\t}\n\n\treturn dom;\n}\n\n/**\n * Invoke or update a ref, depending on whether it is a function or object ref.\n * @param {object|function} [ref=null]\n * @param {any} [value]\n */\nexport function applyRef(ref, value, ancestorComponent) {\n\ttry {\n\t\tif (typeof ref=='function') ref(value);\n\t\telse ref.current = value;\n\t}\n\tcatch (e) {\n\t\tcatchErrorInComponent(e, ancestorComponent);\n\t}\n}\n\n/**\n * Unmount a virtual node from the tree and apply DOM changes\n * @param {import('../internal').VNode} vnode The virtual node to unmount\n * @param {import('../internal').Component} ancestorComponent The parent\n * component to this virtual node\n */\nexport function unmount(vnode, ancestorComponent) {\n\tlet r;\n\tif (options.unmount) options.unmount(vnode);\n\n\tif (r = vnode.ref) {\n\t\tapplyRef(r, null, ancestorComponent);\n\t}\n\n\tif ((r = vnode._dom)!=null) r.remove();\n\n\tvnode._dom = vnode._lastDomChild = null;\n\n\tif ((r = vnode._component)!=null) {\n\t\tif (r.componentWillUnmount) {\n\t\t\ttry {\n\t\t\t\tr.componentWillUnmount();\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\tcatchErrorInComponent(e, ancestorComponent);\n\t\t\t}\n\t\t}\n\n\t\tr.base = r._parentDom = null;\n\t\tif (r = r._prevVNode) unmount(r, ancestorComponent);\n\t}\n\telse if (r = vnode._children) {\n\t\tfor (let i = 0; i < r.length; i++) {\n\t\t\tunmount(r[i], ancestorComponent);\n\t\t}\n\t}\n}\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n\treturn this.constructor(props, context);\n}\n\n/**\n * Find the closest error boundary to a thrown error and call it\n * @param {object} error The thrown value\n * @param {import('../internal').Component} component The first ancestor\n * component check for error boundary behaviors\n */\nfunction catchErrorInComponent(error, component) {\n\tfor (; component; component = component._ancestorComponent) {\n\t\tif (!component._processingException) {\n\t\t\ttry {\n\t\t\t\tif (component.constructor.getDerivedStateFromError!=null) {\n\t\t\t\t\tcomponent.setState(component.constructor.getDerivedStateFromError(error));\n\t\t\t\t}\n\t\t\t\telse if (component.componentDidCatch!=null) {\n\t\t\t\t\tcomponent.componentDidCatch(error);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\treturn enqueueRender(component._processingException = component);\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\t\t}\n\t}\n\tthrow error;\n}\n","import { EMPTY_OBJ, EMPTY_ARR } from './constants';\nimport { commitRoot } from './diff/index';\nimport { diffChildren } from './diff/children';\nimport { createElement, Fragment } from './create-element';\n\n/**\n * Render a Preact virtual node into a DOM element\n * @param {import('./index').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * render into\n */\nexport function render(vnode, parentDom) {\n\tlet oldVNode = parentDom._prevVNode;\n\tvnode = createElement(Fragment, null, [vnode]);\n\n\tlet mounts = [];\n\tdiffChildren(parentDom, parentDom._prevVNode = vnode, oldVNode, EMPTY_OBJ, parentDom.ownerSVGElement!==undefined, oldVNode ? null : EMPTY_ARR.slice.call(parentDom.childNodes), mounts, vnode);\n\tcommitRoot(mounts, vnode);\n}\n\n/**\n * Update an existing DOM element with data from a Preact virtual node\n * @param {import('./index').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * update\n */\nexport function hydrate(vnode, parentDom) {\n\tparentDom._prevVNode = null;\n\trender(vnode, parentDom);\n}\n","import { assign } from './util';\nimport { EMPTY_ARR } from './constants';\nimport { createVNode } from './create-element';\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its children.\n * @param {import('./internal').VNode} vnode The virtual DOM element to clone\n * @param {object} props Attributes/props to add when cloning\n * @param {Array<import('./index').ComponentChildren>} rest Any additional arguments will be used as replacement children.\n */\nexport function cloneElement(vnode, props) {\n\tprops = assign(assign({}, vnode.props), props);\n\tif (arguments.length>2) props.children = EMPTY_ARR.slice.call(arguments, 2);\n\treturn createVNode(vnode.type, props, null, props.key || vnode.key, props.ref || vnode.ref);\n}\n"],"names":["options","q","defer","i","EMPTY_OBJ","EMPTY_ARR","IS_NON_DIMENSIONAL","assign","obj","props","let","createElement","type","children","ref","key","arguments","length","push","defaultProps","undefined","createVNode","text","vnode","_children","_dom","_lastDomChild","_component","Fragment","coerceToVNode","possibleVNode","Array","isArray","Component","context","enqueueRender","c","_dirty","debounceRendering","process","p","pop","forceUpdate","diffChildren","parentDom","newParentVNode","oldParentVNode","isSvg","excessDomChildren","mounts","ancestorComponent","childVNode","j","index","oldVNode","newDom","nextDom","sibDom","focus","newChildren","getVNodeChildren","oldChildren","oldChildrenLength","childDom","nextSibling","diff","document","activeElement","parentNode","outer","appendChild","insertBefore","remove","unmount","toChildArray","flattened","map","diffProps","dom","newProps","oldProps","setProperty","name","value","oldValue","v","s","useCapture","nameLower","style","cssText","replace","test","__html","innerHTML","toLowerCase","substring","addEventListener","eventProxy","removeEventListener","_listeners","removeAttribute","setAttribute","e","this","event","newVNode","isNew","oldState","oldContext","newType","clearProcessingException","cxType","provider","cctx","prev","contextType","_id","_defaultValue","_processingException","prototype","render","constructor","doRender","_ancestorComponent","sub","state","_context","_renderCallbacks","_vnode","_nextState","getDerivedStateFromProps","componentWillMount","componentDidMount","_force","componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","_prevVNode","getChildContext","getSnapshotBeforeUpdate","base","_parentDom","applyRef","diffElementNodes","call","componentDidUpdate","diffed","catchErrorInComponent","commitRoot","root","commit","child","d","nodeType","localName","createTextNode","createElementNS","data","childNodes","slice","attributes","current","r","componentWillUnmount","error","component","getDerivedStateFromError","setState","componentDidCatch","ownerSVGElement","update","callback","_prevState","Promise","resolve","then","bind","setTimeout","defaultValue","ctx","id","Consumer","Provider","comp","subs","old","splice","indexOf"],"mappings":"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"}