{"version":3,"file":"flicking.js","sources":["../src/utils.ts","../src/consts.ts","../src/components/Panel.ts","../src/components/PanelManager.ts","../src/states/State.ts","../src/states/IdleState.ts","../src/states/HoldingState.ts","../src/states/DraggingState.ts","../src/states/AnimatingState.ts","../src/states/DisabledState.ts","../src/components/StateMachine.ts","../src/moves/MoveType.ts","../src/moves/Snap.ts","../src/moves/FreeScroll.ts","../src/components/Viewport.ts","../src/ga/ga.ts","../src/Flicking.ts","../src/index.umd.ts"],"sourcesContent":["/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { ElementLike, OriginalStyle } from \"./types\";\nimport Flicking from \"./Flicking\";\nimport { FLICKING_METHODS, isBrowser } from \"./consts\";\n\nexport function merge(target: object, ...srcs: object[]): object {\n  srcs.forEach(source => {\n    Object.keys(source).forEach(key => {\n      const value = source[key];\n      target[key] = value;\n    });\n  });\n\n  return target;\n}\n\nexport function parseElement(element: ElementLike | ElementLike[]): HTMLElement[] {\n  if (!Array.isArray(element)) {\n    element = [element];\n  }\n\n  const elements: HTMLElement[] = [];\n  element.forEach(el => {\n    if (isString(el)) {\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.innerHTML = el;\n\n      elements.push(...toArray(tempDiv.children) as HTMLElement[]);\n    } else {\n      elements.push(el as HTMLElement);\n    }\n  });\n\n  return elements;\n}\n\n// Check whether browser supports transform: translate3d\n// https://stackoverflow.com/questions/5661671/detecting-transform-translate3d-support\nexport let checkTranslateSupport = () => {\n  const transforms = {\n    webkitTransform: \"-webkit-transform\",\n    msTransform: \"-ms-transform\",\n    MozTransform: \"-moz-transform\",\n    OTransform: \"-o-transform\",\n    transform: \"transform\",\n  };\n\n  if (!isBrowser) {\n    return {\n      name: transforms.transform,\n      has3d: true,\n    };\n  }\n  const supportedStyle = document.documentElement.style;\n  let transformName = \"\";\n  for (const prefixedTransform in transforms) {\n    if (prefixedTransform in supportedStyle) {\n      transformName = prefixedTransform;\n    }\n  }\n\n  if (!transformName) {\n    throw new Error(\"Browser doesn't support CSS3 2D Transforms.\");\n  }\n\n  const el = document.createElement(\"div\");\n\n  document.documentElement.insertBefore(el, null);\n\n  el.style[transformName] = \"translate3d(1px, 1px, 1px)\";\n  const styleVal = window.getComputedStyle(el).getPropertyValue(transforms[transformName]);\n\n  el.parentElement!.removeChild(el);\n\n  const transformInfo = {\n    name: transformName,\n    has3d: styleVal.length > 0 && styleVal !== \"none\",\n  };\n\n  checkTranslateSupport = () => transformInfo;\n\n  return transformInfo;\n};\nexport function isString(value: any): value is string {\n  return typeof value === \"string\";\n}\n// Get class list of element as string array\nexport function classList(element: HTMLElement): string[] {\n  return element.classList\n    ? toArray(element.classList)\n    : element.className.split(\" \");\n}\n\n// Add class to specified element\nexport function addClass(element: HTMLElement, className: string): void {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    if (element.className.indexOf(className) < 0) {\n      element.className = (`${element.className} ${className}`).replace(/\\s{2,}/g, \" \");\n    }\n  }\n}\n\nexport function applyCSS(element: HTMLElement, cssObj: object): void {\n  Object.keys(cssObj).forEach(property => {\n    element.style[property] = cssObj[property];\n  });\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return Math.max(Math.min(val, max), min);\n}\n\n// Min: inclusive, Max: exclusive\nexport function isBetween(val: number, min: number, max: number) {\n  return val >= min && val <= max;\n}\n\nexport interface ArrayLike<T> {\n  length: number;\n  [index: number]: T;\n}\n\nexport function toArray<T>(iterable: ArrayLike<T>): T[] {\n  return [].slice.call(iterable);\n}\n\nexport function isArray(arr: any): boolean {\n  return arr && arr.constructor === Array;\n}\n\nexport function parseArithmeticExpression(cssValue: number | string, base: number, defaultVal?: number): number {\n  // Set base / 2 to default value, if it's undefined\n  const defaultValue = defaultVal != null ? defaultVal : base / 2;\n  const cssRegex = /(?:(\\+|\\-)\\s*)?(\\d+(?:\\.\\d+)?(%|px)?)/g;\n\n  if (typeof cssValue === \"number\") {\n    return clamp(cssValue, 0, base);\n  }\n\n  let idx = 0;\n  let calculatedValue = 0;\n  let matchResult = cssRegex.exec(cssValue);\n  while (matchResult != null) {\n    let sign = matchResult[1];\n    const value = matchResult[2];\n    const unit = matchResult[3];\n\n    let parsedValue = parseFloat(value);\n\n    if (idx <= 0) {\n      sign = sign || \"+\";\n    }\n\n    // Return default value for values not in good form\n    if (!sign) {\n      return defaultValue;\n    }\n\n    if (unit === \"%\") {\n      parsedValue = (parsedValue / 100) * base;\n    }\n\n    calculatedValue += sign === \"+\"\n      ? parsedValue\n      : -parsedValue;\n\n    // Match next occurrence\n    ++idx;\n    matchResult = cssRegex.exec(cssValue);\n  }\n\n  // None-matched\n  if (idx === 0) {\n    return defaultValue;\n  }\n\n  // Clamp between 0 ~ base\n  return clamp(calculatedValue, 0, base);\n}\n\nexport function getProgress(pos: number, range: number[]) {\n  // start, anchor, end\n  // -1 , 0 , 1\n  const [min, center, max] = range;\n\n  if (pos > center && (max - center)) {\n    // 0 ~ 1\n    return (pos - center) / (max - center);\n  } else if (pos < center && (center - min)) {\n    // -1 ~ 0\n    return (pos - center) / (center - min);\n  } else if (pos !== center && max - min) {\n    return (pos - min) / (max - min);\n  }\n  return 0;\n}\n\nexport function findIndex<T>(iterable: T[], callback: (el: T) => boolean): number {\n  for (let i = 0; i < iterable.length; i += 1) {\n    const element = iterable[i];\n    if (element && callback(element)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n// return [0, 1, ...., max - 1]\nexport function counter(max: number): number[] {\n  const counterArray: number[] = [];\n  for (let i = 0; i < max; i += 1) {\n    counterArray[i] = i;\n  }\n  return counterArray;\n}\n\n// Circulate number between range [min, max]\n/*\n * \"indexed\" means min and max is not same, so if it's true \"min - 1\" should be max\n * While if it's false, \"min - 1\" should be \"max - 1\"\n * use `indexed: true` when it should be used for circulating integers like index\n * or `indexed: false` when it should be used for something like positions.\n */\nexport function circulate(value: number, min: number, max: number, indexed: boolean): number {\n  const size = indexed\n    ? max - min + 1\n    : max - min;\n  if (value < min) {\n    const offset = indexed\n      ? (min - value - 1) % size\n      : (min - value) % size;\n    value = max - offset;\n  } else if (value > max) {\n    const offset = indexed\n      ? (value - max - 1) % size\n      : (value - max) % size;\n    value = min + offset;\n  }\n\n  return value;\n}\n\nexport function hasClass(element: HTMLElement | null, className: string): boolean {\n  if (!element) {\n    return false;\n  }\n\n  const classes = classList(element);\n\n  return findIndex(classes, name => name === className) > -1;\n}\n\nexport function restoreStyle(element: HTMLElement, originalStyle: OriginalStyle): void {\n  originalStyle.className\n    ? element.setAttribute(\"class\", originalStyle.className)\n    : element.removeAttribute(\"class\");\n  originalStyle.style\n    ? element.setAttribute(\"style\", originalStyle.style)\n    : element.removeAttribute(\"style\");\n}\n\n/**\n * Decorator that makes the method of flicking available in the framework.\n * @ko 프레임워크에서 플리킹의 메소드를 사용할 수 있게 하는 데코레이터.\n * @memberof eg.Flicking\n * @private\n * @example\n * ```js\n * import Flicking, { withFlickingMethods } from \"@egjs/flicking\";\n *\n * class Flicking extends React.Component<Partial<FlickingProps & FlickingOptions>> {\n *   &#64;withFlickingMethods\n *   private flicking: Flicking;\n * }\n * ```\n */\nexport function withFlickingMethods(prototype: any, flickingName: string) {\n  Object.keys(FLICKING_METHODS).forEach((name: keyof Flicking) => {\n    if (prototype[name]) {\n      return;\n    }\n    prototype[name] = function(...args) {\n      const result = this[flickingName][name](...args);\n\n      // fix `this` type to return your own `flicking` instance to the instance using the decorator.\n      if (result === this[flickingName]) {\n        return this;\n      } else {\n        return result;\n      }\n    };\n  });\n}\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { FlickingOptions, EventType, Direction, AxesEventType, StateType, MoveTypeSnapOption, MoveTypeFreeScrollOption, FlickingMethodsKeys } from \"./types\";\nimport { checkTranslateSupport } from \"./utils\";\n\nexport const MOVE_TYPE: {\n  SNAP: \"snap\";\n  FREE_SCROLL: \"freeScroll\";\n} = {\n  SNAP: \"snap\",\n  FREE_SCROLL: \"freeScroll\",\n};\n\nexport const DEFAULT_MOVE_TYPE_OPTIONS: {\n  snap: MoveTypeSnapOption,\n  freeScroll: MoveTypeFreeScrollOption,\n} = {\n  snap: {\n    type: \"snap\",\n    count: 1,\n  },\n  freeScroll: {\n    type: \"freeScroll\",\n  },\n};\nexport const isBrowser = typeof document !== \"undefined\";\n\n/**\n * Default options for creating Flicking.\n * @ko 플리킹을 만들 때 사용하는 기본 옵션들\n * @private\n * @memberof eg.Flicking\n */\nexport const DEFAULT_OPTIONS: Readonly<FlickingOptions> = {\n  classPrefix: \"eg-flick\",\n  deceleration: 0.0075,\n  horizontal: true,\n  circular: false,\n  infinite: false,\n  infiniteThreshold: 0,\n  lastIndex: Infinity,\n  threshold: 40,\n  duration: 100,\n  panelEffect: x => 1 - Math.pow(1 - x, 3),\n  defaultIndex: 0,\n  inputType: [\"touch\", \"mouse\"],\n  thresholdAngle: 45,\n  bounce: 10,\n  autoResize: false,\n  adaptive: false,\n  zIndex: 2000,\n  bound: false,\n  overflow: false,\n  hanger: \"50%\",\n  anchor: \"50%\",\n  gap: 0,\n  moveType: DEFAULT_MOVE_TYPE_OPTIONS.snap,\n  renderExternal: false,\n  collectStatistics: true,\n};\n\nexport const DEFAULT_VIEWPORT_CSS = {\n  position: \"relative\",\n  zIndex: DEFAULT_OPTIONS.zIndex,\n  width: \"100%\",\n  height: \"100%\",\n  overflow: \"hidden\",\n};\n\nexport const DEFAULT_CAMERA_CSS = {\n  width: \"100%\",\n  height: \"100%\",\n  willChange: \"transform\",\n};\n\nexport const DEFAULT_PANEL_CSS = {\n  position: \"absolute\",\n};\n\nexport const EVENTS: EventType = {\n  HOLD_START: \"holdStart\",\n  HOLD_END: \"holdEnd\",\n  MOVE_START: \"moveStart\",\n  MOVE: \"move\",\n  MOVE_END: \"moveEnd\",\n  CHANGE: \"change\",\n  RESTORE: \"restore\",\n  SELECT: \"select\",\n  NEED_PANEL: \"needPanel\",\n};\n\nexport const AXES_EVENTS: AxesEventType = {\n  HOLD: \"hold\",\n  CHANGE: \"change\",\n  RELEASE: \"release\",\n  ANIMATION_END: \"animationEnd\",\n  FINISH: \"finish\",\n};\n\nexport const STATE_TYPE: StateType = {\n  IDLE: 0,\n  HOLDING: 1,\n  DRAGGING: 2,\n  ANIMATING: 3,\n  DISABLED: 4,\n};\n\nexport const DIRECTION: Direction = {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\",\n};\nexport const FLICKING_METHODS: {[key in FlickingMethodsKeys]: true} = {\n  prev: true,\n  next: true,\n  moveTo: true,\n  getIndex: true,\n  getAllPanels: true,\n  getCurrentPanel: true,\n  getElement: true,\n  getPanel: true,\n  getPanelCount: true,\n  getStatus: true,\n  getVisiblePanels: true,\n  setLastIndex: true,\n  enableInput: true,\n  disableInput: true,\n  destroy: true,\n  resize: true,\n  setStatus: true,\n  addPlugins: true,\n  removePlugins: true,\n  isPlaying: true,\n  getLastIndex: true,\n};\nexport const TRANSFORM = checkTranslateSupport();\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Viewport from \"./Viewport\";\nimport { OriginalStyle, FlickingPanel, ElementLike, DestroyOption } from \"../types\";\nimport { DEFAULT_PANEL_CSS, EVENTS } from \"../consts\";\nimport { addClass, applyCSS, parseArithmeticExpression, parseElement, getProgress, restoreStyle } from \"../utils\";\n\nclass Panel implements FlickingPanel {\n  public viewport: Viewport;\n  public prevSibling: Panel | null;\n  public nextSibling: Panel | null;\n\n  protected state: {\n    index: number;\n    position: number;\n    relativeAnchorPosition: number;\n    size: number;\n    isClone: boolean;\n    isVirtual: boolean;\n    // Index of cloned panel, zero-based integer(original: -1, cloned: [0, 1, 2, ...])\n    // if cloneIndex is 0, that means it's first cloned panel of original panel\n    cloneIndex: number;\n    originalStyle: OriginalStyle;\n    cachedBbox: ClientRect | null;\n  };\n  private element: HTMLElement;\n  private original?: Panel;\n  private clonedPanels: Panel[];\n\n  public constructor(\n    element: HTMLElement,\n    index: number,\n    viewport: Viewport,\n  ) {\n    this.viewport = viewport;\n    this.prevSibling = null;\n    this.nextSibling = null;\n    this.clonedPanels = [];\n\n    this.state = {\n      index,\n      position: 0,\n      relativeAnchorPosition: 0,\n      size: 0,\n      isClone: false,\n      isVirtual: false,\n      cloneIndex: -1,\n      originalStyle: {\n        className: element.getAttribute(\"class\"),\n        style: element.getAttribute(\"style\"),\n      },\n      cachedBbox: null,\n    };\n\n    this.setElement(element);\n  }\n\n  public resize(): void {\n    const state = this.state;\n    const options = this.viewport.options;\n    const bbox = this.getBbox();\n\n    state.size = options.horizontal\n      ? bbox.width\n      : bbox.height;\n    state.relativeAnchorPosition = parseArithmeticExpression(options.anchor, state.size);\n\n    if (!state.isClone) {\n      this.clonedPanels.forEach(panel => panel.resize());\n    }\n  }\n\n  public unCacheBbox(): void {\n    this.state.cachedBbox = null;\n  }\n\n  public getProgress() {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const panelCount = viewport.panelManager.getPanelCount();\n    const scrollAreaSize = viewport.getScrollAreaSize();\n\n    const relativeIndex = (options.circular ? Math.floor(this.getPosition() / scrollAreaSize) * panelCount : 0) + this.getIndex();\n    const progress = relativeIndex - viewport.getCurrentProgress();\n\n    return progress;\n  }\n\n  public getOutsetProgress() {\n    const viewport = this.viewport;\n    const outsetRange = [\n      -this.getSize(),\n      viewport.getRelativeHangerPosition() - this.getRelativeAnchorPosition(),\n      viewport.getSize(),\n    ];\n    const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n    const outsetProgress = getProgress(relativePanelPosition, outsetRange);\n\n    return outsetProgress;\n  }\n\n  public getVisibleRatio() {\n    const viewport = this.viewport;\n    const panelSize = this.getSize();\n    const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n    const rightRelativePanelPosition = relativePanelPosition + panelSize;\n\n    const visibleSize = Math.min(viewport.getSize(), rightRelativePanelPosition) - Math.max(relativePanelPosition, 0);\n    const visibleRatio = visibleSize >= 0\n      ? visibleSize / panelSize\n      : 0;\n\n    return visibleRatio;\n  }\n\n  public focus(duration?: number): void {\n    const viewport = this.viewport;\n    const currentPanel = viewport.getCurrentPanel();\n    const hangerPosition = viewport.getHangerPosition();\n    const anchorPosition = this.getAnchorPosition();\n    if (hangerPosition === anchorPosition || !currentPanel) {\n      return;\n    }\n\n    const currentPosition = currentPanel.getPosition();\n    const eventType = currentPosition === this.getPosition()\n      ? \"\"\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(this, viewport.findEstimatedPosition(this), eventType, null, duration);\n  }\n\n  public update(updateFunction: (element: HTMLElement) => any): void {\n    this.getIdenticalPanels()\n      .forEach(eachPanel => {\n        updateFunction(eachPanel.getElement());\n        eachPanel.unCacheBbox();\n      });\n    this.viewport.resize();\n  }\n\n  public prev(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const prevSibling = this.prevSibling;\n\n    if (!prevSibling) {\n      return null;\n    }\n\n    const currentIndex = this.getIndex();\n    const currentPosition = this.getPosition();\n    const prevPanelIndex = prevSibling.getIndex();\n    const prevPanelPosition = prevSibling.getPosition();\n    const prevPanelSize = prevSibling.getSize();\n\n    const hasEmptyPanelBetween = currentIndex - prevPanelIndex > 1;\n    const notYetMinPanel = options.infinite\n      && currentIndex > 0\n      && prevPanelIndex > currentIndex;\n\n    if (hasEmptyPanelBetween || notYetMinPanel) {\n      // Empty panel exists between\n      return null;\n    }\n\n    const newPosition = currentPosition - prevPanelSize - options.gap;\n\n    let prevPanel = prevSibling;\n    if (prevPanelPosition !== newPosition) {\n      prevPanel = prevSibling.clone(prevSibling.getCloneIndex(), true);\n      prevPanel.setPosition(newPosition);\n    }\n\n    return prevPanel;\n  }\n\n  public next(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const nextSibling = this.nextSibling;\n    const lastIndex = viewport.panelManager.getLastIndex();\n\n    if (!nextSibling) {\n      return null;\n    }\n\n    const currentIndex = this.getIndex();\n    const currentPosition = this.getPosition();\n    const nextPanelIndex = nextSibling.getIndex();\n    const nextPanelPosition = nextSibling.getPosition();\n\n    const hasEmptyPanelBetween = nextPanelIndex - currentIndex > 1;\n    const notYetMaxPanel = options.infinite\n      && currentIndex < lastIndex\n      && nextPanelIndex < currentIndex;\n\n    if (hasEmptyPanelBetween || notYetMaxPanel) {\n      return null;\n    }\n\n    const newPosition = currentPosition + this.getSize() + options.gap;\n\n    let nextPanel = nextSibling;\n    if (nextPanelPosition !== newPosition) {\n      nextPanel = nextSibling.clone(nextSibling.getCloneIndex(), true);\n      nextPanel.setPosition(newPosition);\n    }\n\n    return nextPanel;\n  }\n\n  public insertBefore(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n    const parsedElements = parseElement(element);\n    const firstPanel = viewport.panelManager.firstPanel()!;\n    const prevSibling = this.prevSibling;\n    // Finding correct inserting index\n    // While it should insert removing empty spaces,\n    // It also should have to be bigger than prevSibling' s index\n    const targetIndex = prevSibling && firstPanel.getIndex() !== this.getIndex()\n      ? Math.max(prevSibling.getIndex() + 1, this.getIndex() - parsedElements.length)\n      : Math.max(this.getIndex() - parsedElements.length, 0);\n\n    return viewport.insert(targetIndex, parsedElements);\n  }\n\n  public insertAfter(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    return this.viewport.insert(this.getIndex() + 1, element);\n  }\n\n  public remove(): FlickingPanel {\n    this.viewport.remove(this.getIndex());\n\n    return this;\n  }\n\n  public destroy(option: Partial<DestroyOption>): void {\n    if (!option.preserveUI) {\n      const originalStyle = this.state.originalStyle;\n\n      restoreStyle(this.element, originalStyle);\n    }\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public getElement(): HTMLElement {\n    return this.element;\n  }\n\n  public getAnchorPosition(): number {\n    return this.state.position + this.state.relativeAnchorPosition;\n  }\n\n  public getRelativeAnchorPosition(): number {\n    return this.state.relativeAnchorPosition;\n  }\n\n  public getIndex(): number {\n    return this.state.index;\n  }\n\n  public getPosition(): number {\n    return this.state.position;\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getBbox(): ClientRect {\n    const state = this.state;\n    if (!state.cachedBbox) {\n      state.cachedBbox = this.element.getBoundingClientRect();\n    }\n    return state.cachedBbox!;\n  }\n\n  public isClone(): boolean {\n    return this.state.isClone;\n  }\n\n  public getCloneIndex(): number {\n    return this.state.cloneIndex;\n  }\n\n  public getClonedPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getClonedPanels()\n      : this.clonedPanels;\n  }\n\n  public getIdenticalPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getIdenticalPanels()\n      : [this, ...this.clonedPanels];\n  }\n\n  public getOriginalPanel(): Panel {\n    return this.state.isClone\n      ? this.original!\n      : this;\n  }\n\n  public setIndex(index: number): void {\n    const state = this.state;\n\n    state.index = index;\n    this.clonedPanels.forEach(panel => panel.state.index = index);\n  }\n\n  public setPosition(pos: number): this {\n    const state = this.state;\n    const options = this.viewport.options;\n\n    state.position = pos;\n    if (!state.isVirtual) {\n      const elementStyle = this.element.style;\n      options.horizontal\n        ? elementStyle.left = `${pos}px`\n        : elementStyle.top = `${pos}px`;\n    }\n\n    return this;\n  }\n\n  public clone(cloneIndex: number, isVirtual: boolean = false): Panel {\n    const state = this.state;\n    const viewport = this.viewport;\n\n    const cloneElement = isVirtual\n      ? this.element\n      : this.element.cloneNode(true) as HTMLElement;\n\n    const clonedPanel = new Panel(cloneElement, state.index, viewport);\n    const clonedState = clonedPanel.state;\n\n    clonedPanel.original = state.isClone\n      ? this.original\n      : this;\n    clonedState.isClone = true;\n    clonedState.isVirtual = isVirtual;\n    clonedState.cloneIndex = cloneIndex;\n    // Inherit some state values\n    clonedState.size = state.size;\n    clonedState.relativeAnchorPosition = state.relativeAnchorPosition;\n    clonedState.originalStyle = state.originalStyle;\n    clonedState.cachedBbox = state.cachedBbox;\n\n    if (!isVirtual) {\n      this.clonedPanels.push(clonedPanel);\n    } else {\n      clonedPanel.prevSibling = this.prevSibling;\n      clonedPanel.nextSibling = this.nextSibling;\n    }\n\n    return clonedPanel;\n  }\n\n  // Clone with external element\n  public cloneExternal(cloneIndex: number, element: HTMLElement): Panel {\n    const clonedPanel = this.clone(cloneIndex);\n    clonedPanel.setElement(element);\n\n    return clonedPanel;\n  }\n\n  public removeElement(): void {\n    if (!this.viewport.options.renderExternal) {\n      const element = this.element;\n      element.parentNode!.removeChild(element);\n    }\n\n    // Do the same thing for clones\n    if (!this.state.isClone) {\n      this.removeClonedPanelsAfter(0);\n    }\n  }\n\n  public removeClonedPanelsAfter(start: number): void {\n    const removingPanels = this.clonedPanels.splice(start);\n\n    removingPanels.forEach(panel => {\n      panel.removeElement();\n    });\n  }\n\n  private setElement(element: HTMLElement): void {\n    this.element = element;\n\n    const options = this.viewport.options;\n\n    if (options.classPrefix) {\n      addClass(element, `${options.classPrefix}-panel`);\n    }\n\n    // Update size info after applying panel css\n    applyCSS(this.element, DEFAULT_PANEL_CSS);\n  }\n}\n\nexport default Panel;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Panel from \"./Panel\";\nimport { FlickingOptions } from \"../types\";\nimport { findIndex, counter } from \"../utils\";\n\nclass PanelManager {\n  private cameraElement: HTMLElement;\n  private options: FlickingOptions;\n  private panels: Panel[];\n  private clones: Panel[][];\n  // index range of existing panels\n  private range: {\n    min: number;\n    max: number;\n  };\n  private length: number;\n  private lastIndex: number;\n  private cloneCount: number;\n\n  constructor(\n    cameraElement: HTMLElement,\n    options: FlickingOptions,\n  ) {\n    this.cameraElement = cameraElement;\n    this.panels = [];\n    this.clones = [];\n    this.range = {\n      min: -1,\n      max: -1,\n    };\n    this.length = 0;\n    this.cloneCount = 0;\n    this.options = options;\n    this.lastIndex = options.lastIndex;\n  }\n\n  public firstPanel(): Panel | undefined {\n    return this.panels[this.range.min];\n  }\n\n  public lastPanel(): Panel | undefined {\n    return this.panels[this.range.max];\n  }\n\n  public allPanels(): ReadonlyArray<Panel> {\n    return [\n      ...this.panels,\n      ...this.clones.reduce((allClones, clones) => [...allClones, ...clones], []),\n    ];\n  }\n\n  public originalPanels(): ReadonlyArray<Panel> {\n    return this.panels;\n  }\n\n  public clonedPanels(): ReadonlyArray<Panel[]> {\n    return this.clones;\n  }\n\n  public replacePanels(newPanels: Panel[], newClones: Panel[][]): void {\n    this.panels = newPanels;\n    this.clones = newClones;\n\n    this.range = {\n      min: findIndex(newPanels, panel => Boolean(panel)),\n      max: newPanels.length - 1,\n    };\n    this.length = newPanels.filter(panel => Boolean(panel)).length;\n  }\n\n  public has(index: number): boolean {\n    return !!this.panels[index];\n  }\n\n  public get(index: number): Panel | undefined {\n    return this.panels[index];\n  }\n\n  public getPanelCount(): number {\n    return this.length;\n  }\n\n  public getLastIndex(): number {\n    return this.lastIndex;\n  }\n\n  public getRange(): Readonly<{ min: number, max: number }> {\n    return this.range;\n  }\n\n  public getCloneCount(): number {\n    return this.cloneCount;\n  }\n\n  public setLastIndex(lastIndex: number): void {\n    this.lastIndex = lastIndex;\n\n    const firstPanel = this.firstPanel();\n    const lastPanel = this.lastPanel();\n\n    if (!firstPanel || !lastPanel) {\n      return; // no meaning of updating range & length\n    }\n\n    // Remove panels above new last index\n    const range = this.range;\n    if (lastPanel.getIndex() > lastIndex) {\n      const removingPanels = this.panels.splice(lastIndex + 1);\n      removingPanels.forEach(panel => panel.removeElement());\n      this.length -= removingPanels.length;\n\n      const firstRemovedPanel = removingPanels.filter(panel => !!panel)[0];\n      const possibleLastPanel = firstRemovedPanel.prevSibling;\n      if (possibleLastPanel) {\n        range.max = possibleLastPanel.getIndex();\n      } else {\n        range.min = -1;\n        range.max = -1;\n      }\n    }\n  }\n\n  public setCloneCount(cloneCount: number): void {\n    this.cloneCount = cloneCount;\n  }\n\n  public append(newPanels: Panel[]): void {\n    const range = this.range;\n    this.panels.push(...newPanels);\n\n    if (newPanels.length > 0) {\n      range.min = Math.max(0, range.min);\n      range.max += newPanels.length;\n      this.length += newPanels.length;\n    }\n  }\n\n  // Insert at index\n  // Returns pushed elements from index, inserting at 'empty' position doesn't push elements behind it\n  public insert(index: number, newPanels: Panel[]): number {\n    const panels = this.panels;\n    const range = this.range;\n    const isCircular = this.options.circular;\n    const lastIndex = this.lastIndex;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    this.insertNewPanels(newPanels, siblingElement);\n\n    let pushedIndex = newPanels.length;\n    // Like when setting index 50 while visible panels are 0, 1, 2\n    if (index > range.max) {\n      newPanels.forEach((panel, offset) => {\n        panels[index + offset] = panel;\n      });\n    } else {\n      const panelsAfterIndex = panels.slice(index, index + newPanels.length);\n      // Find empty from beginning\n      let emptyPanelCount = findIndex(panelsAfterIndex, panel => !!panel);\n      if (emptyPanelCount < 0) {\n        // All empty\n        emptyPanelCount = panelsAfterIndex.length;\n      }\n      pushedIndex = newPanels.length - emptyPanelCount;\n\n      // Insert removing empty panels\n      panels.splice(index, emptyPanelCount, ...newPanels);\n\n      // Remove panels after last index\n      if (panels.length > lastIndex + 1) {\n        const removedPanels = panels.splice(lastIndex + 1)\n          .filter(panel => Boolean(panel));\n        removedPanels.forEach(panel => panel.removeElement());\n        this.length -= removedPanels.length;\n\n        // Find first\n        const newLastIndex = lastIndex - findIndex(this.panels.concat().reverse(), panel => !!panel);\n\n        // Can be filled with empty after newLastIndex\n        this.panels.splice(newLastIndex + 1);\n        this.range.max = newLastIndex;\n      }\n    }\n\n    // Update index of previous panels\n    if (pushedIndex > 0) {\n      panels.slice(index + newPanels.length).forEach(panel => {\n        panel.setIndex(panel.getIndex() + pushedIndex);\n      });\n    }\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length - pushedIndex, nextSibling);\n    }\n\n    // Update state\n    this.length += newPanels.length;\n    this.updateIndex(index);\n\n    return pushedIndex;\n  }\n\n  public replace(index: number, newPanels: Panel[]): void {\n    const panels = this.panels;\n    const range = this.range;\n    const isCircular = this.options.circular;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index + newPanels.length);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    this.insertNewPanels(newPanels, siblingElement);\n\n    if (index > range.max) {\n      // Temporarily insert null at index to use splice()\n      (panels[index] as any) = null;\n    }\n\n    const replacedPanels = panels.splice(index, newPanels.length, ...newPanels);\n    const wasNonEmptyCount = replacedPanels.filter(panel => Boolean(panel)).length;\n    replacedPanels.forEach(panel => {\n      if (panel) {\n        panel.removeElement();\n      }\n    });\n\n    // Suppose inserting [1, 2, 3] at 0 position when there were [empty, 1]\n    // So length should be increased by 3(inserting panels) - 1(non-empty panels)\n    this.length += newPanels.length - wasNonEmptyCount;\n    this.updateIndex(index);\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length, nextSibling);\n    }\n  }\n\n  public remove(index: number, deleteCount: number = 1): Panel[] {\n    const isCircular = this.options.circular;\n    const panels = this.panels;\n    const clones = this.clones;\n    // Delete count should be equal or larger than 0\n    deleteCount = Math.max(deleteCount, 0);\n\n    const deletedPanels = panels\n      .splice(index, deleteCount)\n      .filter(panel => !!panel);\n\n    deletedPanels.forEach(panel => {\n      panel.removeElement();\n    });\n\n    if (isCircular) {\n      clones.forEach(cloneSet => {\n        cloneSet.splice(index, deleteCount);\n      });\n    }\n\n    // Update indexes\n    panels\n      .slice(index)\n      .forEach(panel => {\n        panel.setIndex(panel.getIndex() - deleteCount);\n      });\n\n    // Check last panel is empty\n    let lastIndex = panels.length - 1;\n    if (!panels[lastIndex]) {\n      const reversedPanels = panels.concat().reverse();\n      const nonEmptyIndexFromLast = findIndex(reversedPanels, panel => !!panel);\n      lastIndex = nonEmptyIndexFromLast < 0\n        ? -1 // All empty\n        : lastIndex - nonEmptyIndexFromLast;\n\n      // Remove all empty panels from last\n      panels.splice(lastIndex + 1);\n      if (isCircular) {\n        clones.forEach(cloneSet => {\n          cloneSet.splice(lastIndex + 1);\n        });\n      }\n    }\n\n    // Update range & length\n    this.range = {\n      min: findIndex(panels, panel => !!panel),\n      max: lastIndex,\n    };\n    this.length -= deletedPanels.length;\n\n    if (this.length <= 0) {\n      // Reset clones\n      this.clones = [];\n    }\n\n    return deletedPanels;\n  }\n\n  public chainAllPanels() {\n    const allPanels = this.allPanels().filter(panel => !!panel);\n    const allPanelsCount = allPanels.length;\n\n    if (allPanelsCount <= 0) {\n      return;\n    }\n\n    allPanels.forEach((panel, idx) => {\n      const prevPanel = (idx > 0)\n        ? allPanels[idx - 1]\n        : null;\n\n      const nextPanel = (idx < allPanelsCount - 1)\n        ? allPanels[idx + 1]\n        : null;\n\n      panel.prevSibling = prevPanel;\n      panel.nextSibling = nextPanel;\n    });\n\n    if (this.options.circular) {\n      const firstPanel = allPanels[0];\n      const lastPanel = allPanels[allPanelsCount - 1];\n\n      firstPanel.prevSibling = lastPanel;\n      lastPanel.nextSibling = firstPanel;\n    }\n  }\n\n  public insertClones(cloneIndex: number, index: number, clonedPanels: Panel[], deleteCount: number = 0): void {\n    const clones = this.clones;\n    const lastIndex = this.lastIndex;\n\n    if (!clones[cloneIndex]) {\n      const newClones: Panel[] = [];\n      clonedPanels.forEach((panel, offset) => {\n        newClones[index + offset] = panel;\n      });\n\n      clones[cloneIndex] = newClones;\n    } else {\n      const insertTarget = clones[cloneIndex];\n\n      if (index >= insertTarget.length) {\n        clonedPanels.forEach((panel, offset) => {\n          insertTarget[index + offset] = panel;\n        });\n      } else {\n        insertTarget.splice(index, deleteCount, ...clonedPanels);\n        // Remove panels after last index\n        if (clonedPanels.length > lastIndex + 1) {\n          clonedPanels.splice(lastIndex + 1);\n        }\n      }\n    }\n  }\n\n  // clones are operating in set\n  public removeClonesAfter(cloneIndex: number): void {\n    const panels = this.panels;\n    panels.forEach(panel => {\n      panel.removeClonedPanelsAfter(cloneIndex);\n    });\n    this.clones.splice(cloneIndex);\n  }\n\n  // Clear both original & cloned\n  public clear(): void {\n    this.panels.forEach(panel => {\n      panel.removeElement();\n    });\n\n    this.panels = [];\n    this.clones = [];\n    this.length = 0;\n    this.range = {\n      min: -1,\n      max: -1,\n    };\n  }\n\n  public clearClone(): void {\n    this.panels.forEach(panel => {\n      panel.removeClonedPanelsAfter(0);\n    });\n    this.clones = [];\n  }\n\n  public findPanelOf(element: HTMLElement): Panel | undefined {\n    const allPanels = this.allPanels();\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const panelElement = panel.getElement();\n      if (panelElement.contains(element)) {\n        return panel;\n      }\n    }\n  }\n\n  public findFirstPanelFrom(index: number): Panel | undefined {\n    for (const panel of this.panels) {\n      if (panel && panel.getIndex() >= index) {\n        return panel;\n      }\n    }\n  }\n\n  private addNewClones(index: number, originalPanels: Panel[], deleteCount: number, nextSibling: Panel | undefined) {\n    const cameraElement = this.cameraElement;\n    const cloneCount = this.getCloneCount();\n    const lastPanel = this.lastPanel();\n    const lastPanelClones: Panel[] = lastPanel\n      ? lastPanel.getClonedPanels()\n      : [];\n    const nextSiblingClones: Panel[] = nextSibling\n      ? nextSibling.getClonedPanels()\n      : [];\n\n    for (const cloneIndex of counter(cloneCount)) {\n      const cloneNextSibling = nextSiblingClones[cloneIndex];\n      const lastPanelSibling = lastPanelClones[cloneIndex];\n\n      const cloneSiblingElement = cloneNextSibling\n        ? cloneNextSibling.getElement()\n        : lastPanelSibling\n          ? lastPanelSibling.getElement().nextElementSibling\n          : null;\n\n      const newClones = originalPanels.map(panel => {\n        const clone = panel.clone(cloneIndex);\n\n        if (!this.options.renderExternal) {\n          cameraElement.insertBefore(clone.getElement(), cloneSiblingElement);\n        }\n\n        return clone;\n      });\n\n      this.insertClones(cloneIndex, index, newClones, deleteCount);\n    }\n  }\n\n  private updateIndex(insertingIndex: number) {\n    const panels = this.panels;\n    const range = this.range;\n\n    const newLastIndex = panels.length - 1;\n    if (newLastIndex > range.max) {\n      range.max = newLastIndex;\n    }\n    if (insertingIndex < range.min || range.min < 0) {\n      range.min = insertingIndex;\n    }\n  }\n\n  private insertNewPanels(newPanels: Panel[], siblingElement: HTMLElement | null) {\n    if (!this.options.renderExternal) {\n      const fragment = document.createDocumentFragment();\n      newPanels.forEach(panel => fragment.appendChild(panel.getElement()));\n      this.cameraElement.insertBefore(fragment, siblingElement);\n    }\n  }\n}\n\nexport default PanelManager;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Panel from \"../components/Panel\";\nimport { ValueOf, Direction, StateType, FlickingContext } from \"../types\";\n\nabstract class State {\n  public delta: number = 0;\n  public direction: ValueOf<Direction> | null = null;\n  public targetPanel: Panel | null = null;\n  public lastPosition: number = 0;\n  public abstract readonly type: ValueOf<StateType>;\n  public abstract readonly holding: boolean;\n  public abstract readonly playing: boolean;\n\n  public onEnter(prevState: State): void {\n    this.delta = prevState.delta;\n    this.direction = prevState.direction;\n    this.targetPanel = prevState.targetPanel;\n    this.lastPosition = prevState.lastPosition;\n  }\n  public onExit(nextState: State): void {\n    // DO NOTHING\n  }\n  public onHold(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onChange(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onRelease(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onAnimationEnd(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onFinish(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n}\n\nexport default State;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { EVENTS, STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass IdleState extends State {\n  public readonly type = STATE_TYPE.IDLE;\n  public readonly holding = false;\n  public readonly playing = false;\n\n  public onEnter() {\n    this.direction = null;\n    this.targetPanel = null;\n    this.delta = 0;\n    this.lastPosition = 0;\n  }\n\n  public onHold(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Shouldn't do any action until any panels on flicking area\n    if (flicking.getPanelCount() <= 0) {\n      if (viewport.options.infinite) {\n        viewport.moveCamera(viewport.getCameraPosition(), e);\n      }\n      transitTo(STATE_TYPE.DISABLED);\n      return;\n    }\n\n    this.lastPosition = viewport.getCameraPosition();\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.HOLDING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  // By methods call\n  public onChange(e: any, context: FlickingContext): void {\n    const { triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.MOVE_START, e, false)\n      .onSuccess(() => {\n        // Trigger AnimatingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.ANIMATING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n}\n\nexport default IdleState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE, EVENTS, DIRECTION } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass HoldingState extends State {\n  public readonly type = STATE_TYPE.HOLDING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  private releaseEvent: any = null;\n\n  public onChange(e: any, context: FlickingContext): void {\n    const { flicking, triggerEvent, transitTo } = context;\n\n    const offset = flicking.options.horizontal\n      ? e.inputEvent.offsetX\n      : e.inputEvent.offsetY;\n    this.direction = offset < 0\n      ? DIRECTION.NEXT\n      : DIRECTION.PREV;\n\n    triggerEvent(EVENTS.MOVE_START, e, true)\n      .onSuccess(() => {\n        // Trigger DraggingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.DRAGGING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { viewport, triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    if (e.delta.flick !== 0) {\n      // Sometimes \"release\" event on axes triggered before \"change\" event\n      // Especially if user flicked panel fast in really short amount of time\n      // if delta is not zero, that means above case happened.\n\n      // Event flow should be HOLD_START -> MOVE_START -> MOVE -> HOLD_END\n      // At least one move event should be included between holdStart and holdEnd\n      e.setTo({ flick: viewport.getCameraPosition() }, 0);\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Can't handle select event here,\n    // As \"finish\" axes event happens\n    this.releaseEvent = e;\n  }\n\n  public onFinish(e: any, { viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Should transite to IDLE state before select event\n    // As user expects hold is already finished\n    transitTo(STATE_TYPE.IDLE);\n\n    if (!this.releaseEvent) {\n      return;\n    }\n\n    // Handle release event here\n    // To prevent finish event called twice\n    const releaseEvent = this.releaseEvent;\n\n    // Static click\n    const clickedElement = releaseEvent.inputEvent.srcEvent.target;\n    const clickedPanel = viewport.panelManager.findPanelOf(clickedElement);\n    const cameraPosition = viewport.getCameraPosition();\n\n    if (clickedPanel) {\n      const clickedPanelPosition = clickedPanel.getPosition();\n      const direction = clickedPanelPosition > cameraPosition\n        ? DIRECTION.NEXT\n        : clickedPanelPosition < cameraPosition\n          ? DIRECTION.PREV\n          : null;\n\n      // Don't provide axes event, to use axes instance instead\n      triggerEvent(EVENTS.SELECT, null, true, {\n        direction, // Direction to the clicked panel\n        index: clickedPanel.getIndex(),\n        panel: clickedPanel,\n      });\n    }\n  }\n}\n\nexport default HoldingState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass DraggingState extends State {\n  public readonly type = STATE_TYPE.DRAGGING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { flicking, viewport, triggerEvent, transitTo, stopCamera } = context;\n\n    const delta = this.delta;\n    const absDelta = Math.abs(delta);\n    const options = flicking.options;\n    const horizontal = options.horizontal;\n    const moveType = viewport.moveType;\n    const inputEvent = e.inputEvent;\n\n    const velocity = horizontal\n      ? inputEvent.velocityX\n      : inputEvent.velocityY;\n    const inputDelta = horizontal\n      ? inputEvent.deltaX\n      : inputEvent.deltaY;\n    const isNextDirection = Math.abs(velocity) > 1\n      ? velocity < 0\n      : absDelta > 0\n        ? delta > 0\n        : inputDelta < 0;\n\n    const swipeDistance = viewport.options.bound\n      ? Math.max(absDelta, Math.abs(inputDelta))\n      : absDelta;\n    const swipeAngle = inputEvent.deltaX\n      ? Math.abs(180 * Math.atan(inputEvent.deltaY / inputEvent.deltaX) / Math.PI)\n      : 90;\n    const belowAngleThreshold = horizontal\n      ? swipeAngle <= options.thresholdAngle\n      : swipeAngle > options.thresholdAngle;\n    const overThreshold = swipeDistance >= options.threshold\n      && belowAngleThreshold;\n\n    const moveTypeContext = {\n      viewport,\n      axesEvent: e,\n      state: this,\n      swipeDistance,\n      isNextDirection,\n    };\n\n    // Update last position to cope with Axes's animating behavior\n    // Axes uses start position when animation start\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    const targetPanel = this.targetPanel;\n    if (!overThreshold && targetPanel) {\n      // Interrupted while animating\n      const interruptDestInfo = moveType.findPanelWhenInterrupted(moveTypeContext);\n\n      viewport.moveTo(\n        interruptDestInfo.panel,\n        interruptDestInfo.destPos,\n        interruptDestInfo.eventType,\n        e,\n        interruptDestInfo.duration,\n      );\n      transitTo(STATE_TYPE.ANIMATING);\n      return;\n    }\n\n    const currentPanel = viewport.getCurrentPanel();\n    const nearestPanel = viewport.getNearestPanel();\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      e.stop();\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    const destInfo = overThreshold\n      ? moveType.findTargetPanel(moveTypeContext)\n      : moveType.findRestorePanel(moveTypeContext);\n\n    viewport.moveTo(\n      destInfo.panel,\n      destInfo.destPos,\n      destInfo.eventType,\n      e,\n      destInfo.duration,\n    ).onSuccess(() => {\n      transitTo(STATE_TYPE.ANIMATING);\n    }).onStopped(() => {\n      transitTo(STATE_TYPE.DISABLED);\n      stopCamera(e);\n    });\n  }\n}\n\nexport default DraggingState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext } from \"../types\";\nimport { circulate } from \"../utils\";\n\nclass AnimatingState extends State {\n  public readonly type = STATE_TYPE.ANIMATING;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onHold(e: any, { viewport, triggerEvent, transitTo }: FlickingContext): void {\n    const options = viewport.options;\n    const scrollArea = viewport.getScrollArea();\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    const loopCount = Math.floor((this.lastPosition + this.delta - scrollArea.prev) / scrollAreaSize);\n\n    const targetPanel = this.targetPanel;\n    if (options.circular && loopCount !== 0 && targetPanel) {\n      const cloneCount = viewport.panelManager.getCloneCount();\n      const originalTargetPosition = targetPanel.getPosition();\n\n      // cloneIndex is from -1 to cloneCount - 1\n      const newCloneIndex = circulate(targetPanel.getCloneIndex() - loopCount, -1, cloneCount - 1, true);\n      const newTargetPosition = originalTargetPosition - loopCount * scrollAreaSize;\n      const newTargetPanel = targetPanel.getIdenticalPanels()[newCloneIndex + 1].clone(newCloneIndex, true);\n\n      // Set new target panel considering looped count\n      newTargetPanel.setPosition(newTargetPosition);\n      this.targetPanel = newTargetPanel;\n    }\n\n    // Reset last position and delta\n    this.delta = 0;\n    this.lastPosition = viewport.getCameraPosition();\n\n    // Update current panel as current nearest panel\n    viewport.setCurrentPanel(viewport.getNearestPanel()!);\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.DRAGGING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onFinish(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext) {\n    const isTrusted = e && e.isTrusted;\n\n    viewport.options.bound\n      ? viewport.setCurrentPanel(this.targetPanel!)\n      : viewport.setCurrentPanel(viewport.getNearestPanel()!);\n    transitTo(STATE_TYPE.IDLE);\n    triggerEvent(EVENTS.MOVE_END, e, isTrusted, {\n      direction: this.direction,\n    });\n\n    if (flicking.options.adaptive) {\n      viewport.updateAdaptiveSize();\n    }\n  }\n}\n\nexport default AnimatingState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass DisabledState extends State {\n  public readonly type = STATE_TYPE.DISABLED;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onAnimationEnd(e: any, { transitTo }: FlickingContext): void {\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onChange(e: any, { viewport, transitTo }: FlickingContext): void {\n    // Can stop Axes's change event\n    e.stop();\n\n    // Should update axes position as it's already changed at this moment\n    viewport.updateAxesPosition(viewport.getCameraPosition());\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onRelease(e: any, { transitTo }: FlickingContext): void {\n    // This is needed when stopped hold start event\n    if (e.delta.flick === 0) {\n      transitTo(STATE_TYPE.IDLE);\n    }\n  }\n}\n\nexport default DisabledState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"../states/State\";\nimport { AxesEventType, ValueOf, FlickingContext, StateType } from \"../types\";\nimport { AXES_EVENTS, STATE_TYPE } from \"../consts\";\nimport IdleState from \"../states/IdleState\";\nimport HoldingState from \"../states/HoldingState\";\nimport DraggingState from \"../states/DraggingState\";\nimport AnimatingState from \"../states/AnimatingState\";\nimport DisabledState from \"../states/DisabledState\";\n\nclass StateMachine {\n  private state: State = new IdleState();\n\n  public fire(eventType: ValueOf<AxesEventType>, e: any, context: FlickingContext) {\n    const currentState = this.state;\n    switch (eventType) {\n      case AXES_EVENTS.HOLD:\n        currentState.onHold(e, context);\n        break;\n      case AXES_EVENTS.CHANGE:\n        currentState.onChange(e, context);\n        break;\n      case AXES_EVENTS.RELEASE:\n        currentState.onRelease(e, context);\n        break;\n      case AXES_EVENTS.ANIMATION_END:\n        currentState.onAnimationEnd(e, context);\n        break;\n      case AXES_EVENTS.FINISH:\n        currentState.onFinish(e, context);\n        break;\n    }\n  }\n\n  public getState(): State {\n    return this.state;\n  }\n\n  public transitTo = (nextStateType: ValueOf<StateType>): State => {\n    const currentState = this.state;\n\n    if (currentState.type !== nextStateType) {\n      let nextState: State;\n\n      switch (nextStateType) {\n        case STATE_TYPE.IDLE:\n          nextState = new IdleState();\n          break;\n        case STATE_TYPE.HOLDING:\n          nextState = new HoldingState();\n          break;\n        case STATE_TYPE.DRAGGING:\n          nextState = new DraggingState();\n          break;\n        case STATE_TYPE.ANIMATING:\n          nextState = new AnimatingState();\n          break;\n        case STATE_TYPE.DISABLED:\n          nextState = new DisabledState();\n          break;\n      }\n\n      currentState.onExit(nextState!);\n      nextState!.onEnter(currentState);\n\n      this.state = nextState!;\n    }\n    return this.state;\n  }\n}\n\nexport default StateMachine;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { MoveTypeStringOption, MoveTypeContext, DestinationInfo } from \"../types\";\nimport Panel from \"../components/Panel\";\nimport { EVENTS } from \"../consts\";\n\nabstract class MoveType {\n  protected readonly abstract type: string;\n\n  public abstract findTargetPanel(ctx: MoveTypeContext): DestinationInfo;\n\n  public is(type: MoveTypeStringOption): boolean {\n    return type === this.type;\n  }\n\n  public findRestorePanel(ctx: MoveTypeContext): DestinationInfo {\n    const viewport = ctx.viewport;\n    const options = viewport.options;\n\n    const panel = options.circular\n      ? this.findRestorePanelInCircularMode(ctx)\n      : viewport.getCurrentPanel()!;\n\n    return {\n      panel,\n      destPos: viewport.findEstimatedPosition(panel),\n      duration: options.duration,\n      eventType: EVENTS.RESTORE,\n    };\n  }\n\n  public findPanelWhenInterrupted(ctx: MoveTypeContext): DestinationInfo {\n    const { state, viewport } = ctx;\n    const targetPanel = state.targetPanel!;\n\n    return {\n      panel: targetPanel,\n      destPos: viewport.findEstimatedPosition(targetPanel),\n      duration: viewport.options.duration,\n      eventType: \"\",\n    };\n  }\n\n  // Calculate minimum distance to \"change\" panel\n  protected calcBrinkOfChange(ctx: MoveTypeContext): number {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentPanel = viewport.getCurrentPanel()!;\n    const halfGap = options.gap / 2;\n\n    const relativeAnchorPosition = currentPanel.getRelativeAnchorPosition();\n\n    // Minimum distance needed to decide prev/next panel as nearest\n    /*\n     * |  Prev  |     Next     |\n     * |--------|--------------|\n     * [][      |<-Anchor    ][] <- Panel + Half-Gap\n     */\n    let minimumDistanceToChange = isNextDirection\n      ? currentPanel.getSize() - relativeAnchorPosition + halfGap\n      : relativeAnchorPosition + halfGap;\n\n    minimumDistanceToChange = Math.max(minimumDistanceToChange, options.threshold);\n\n    return minimumDistanceToChange;\n  }\n\n  private findRestorePanelInCircularMode(ctx: MoveTypeContext): Panel {\n    const viewport = ctx.viewport;\n    const originalPanel = viewport.getCurrentPanel()!.getOriginalPanel();\n    const hangerPosition = viewport.getHangerPosition();\n\n    const firstClonedPanel = originalPanel.getIdenticalPanels()[1];\n    const lapped = Math.abs(originalPanel.getAnchorPosition() - hangerPosition)\n      > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition);\n\n    return (!ctx.isNextDirection && lapped)\n      ? firstClonedPanel\n      : originalPanel;\n  }\n}\n\nexport default MoveType;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport MoveType from \"./MoveType\";\nimport { MOVE_TYPE, EVENTS } from \"../consts\";\nimport { MoveTypeContext, DestinationInfo } from \"../types\";\nimport { clamp } from \"../utils\";\n\nclass Snap extends MoveType {\n  protected readonly type: string = MOVE_TYPE.SNAP;\n  protected count: number;\n\n  constructor(count: number) {\n    super();\n    this.count = count;\n  }\n\n  public findTargetPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport, axesEvent, swipeDistance } = ctx;\n    const snapCount = this.count;\n    const eventDelta = Math.abs(axesEvent.delta.flick);\n    const currentPanel = viewport.getCurrentPanel()!;\n    const nearestPanel = viewport.getNearestPanel()!;\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n\n    // This can happen when bounce is 0\n    const shouldMoveWhenBounceIs0 = viewport.canSetBoundMode()\n      && (nearestPanel.getIndex() === currentPanel.getIndex());\n    const shouldMoveToAdjacent = !viewport.isOutOfBound()\n      && (swipeDistance <= minimumDistanceToChange || shouldMoveWhenBounceIs0);\n\n    if (snapCount > 1 && eventDelta > minimumDistanceToChange) {\n      return this.findSnappedPanel(ctx);\n    } else if (shouldMoveToAdjacent) {\n      return this.findAdjacentPanel(ctx);\n    } else {\n      return {\n        panel: nearestPanel,\n        duration: viewport.options.duration,\n        destPos: viewport.findEstimatedPosition(nearestPanel),\n        eventType: swipeDistance <= minimumDistanceToChange\n          ? EVENTS.RESTORE\n          : EVENTS.CHANGE,\n      };\n    }\n  }\n\n  protected findSnappedPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { axesEvent, viewport, state, isNextDirection } = ctx;\n\n    const eventDelta = Math.abs(axesEvent.delta.flick);\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n    const snapCount = this.count;\n    const options = viewport.options;\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    const halfGap = options.gap / 2;\n    const estimatedHangerPos = axesEvent.destPos.flick + viewport.getRelativeHangerPosition();\n\n    let panelToMove = viewport.getNearestPanel()!;\n    let cycleIndex = panelToMove.getCloneIndex() + 1; // 0(original) or 1(clone)\n    let passedPanelCount = 0;\n\n    while (passedPanelCount < snapCount) {\n      // Since panelToMove holds also cloned panels, we should use original panel's position\n      const originalPanel = panelToMove.getOriginalPanel();\n      const panelPosition = originalPanel.getPosition() + cycleIndex * scrollAreaSize;\n      const panelSize = originalPanel.getSize();\n\n      const panelNextPosition = panelPosition + panelSize + halfGap;\n      const panelPrevPosition = panelPosition - halfGap;\n\n      // Current panelToMove contains destPos\n      if (\n        (isNextDirection && panelNextPosition > estimatedHangerPos)\n        || (!isNextDirection && panelPrevPosition < estimatedHangerPos)\n      ) {\n        break;\n      }\n\n      const siblingPanel = isNextDirection\n        ? panelToMove.nextSibling\n        : panelToMove.prevSibling;\n      if (!siblingPanel) {\n        break;\n      }\n\n      const panelIndex = panelToMove.getIndex();\n      const siblingIndex = siblingPanel.getIndex();\n      if ((isNextDirection && siblingIndex <= panelIndex)\n        || (!isNextDirection && siblingIndex >= panelIndex)\n      ) {\n        cycleIndex = isNextDirection\n          ? cycleIndex + 1\n          : cycleIndex - 1;\n      }\n      panelToMove = siblingPanel;\n      passedPanelCount += 1;\n    }\n\n    const originalPosition = panelToMove.getOriginalPanel().getPosition();\n\n    if (cycleIndex !== 0) {\n      panelToMove = panelToMove.clone(panelToMove.getCloneIndex(), true);\n      panelToMove.setPosition(originalPosition + cycleIndex * scrollAreaSize);\n    }\n\n    const defaultDuration = viewport.options.duration;\n    const duration = clamp(axesEvent.duration, defaultDuration, defaultDuration * passedPanelCount);\n\n    return {\n      panel: panelToMove,\n      destPos: viewport.findEstimatedPosition(panelToMove),\n      duration,\n      eventType: Math.max(eventDelta, state.delta) > minimumDistanceToChange\n        ? EVENTS.CHANGE\n        : EVENTS.RESTORE,\n    };\n  }\n\n  private findAdjacentPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentIndex = viewport.getCurrentIndex();\n    const currentPanel = viewport.panelManager.get(currentIndex)!;\n    const hangerPosition = viewport.getHangerPosition();\n    const scrollArea = viewport.getScrollArea();\n\n    const firstClonedPanel = currentPanel.getIdenticalPanels()[1];\n    const lapped = options.circular\n      && (Math.abs(currentPanel.getAnchorPosition() - hangerPosition)\n        > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition));\n\n    // If lapped in circular mode, use first cloned panel as base panel\n    const basePanel = lapped\n      ? firstClonedPanel\n      : currentPanel;\n    const basePosition = basePanel.getPosition();\n\n    const adjacentPanel = isNextDirection\n      ? basePanel.nextSibling\n      : basePanel.prevSibling;\n\n    const eventType = adjacentPanel\n      ? EVENTS.CHANGE\n      : EVENTS.RESTORE;\n    const panelToMove = adjacentPanel\n      ? adjacentPanel\n      : basePanel;\n    const targetRelativeAnchorPosition = panelToMove.getRelativeAnchorPosition();\n\n    const estimatedPanelPosition = options.circular\n      ? isNextDirection\n        ? basePosition + basePanel.getSize() + targetRelativeAnchorPosition + options.gap\n        : basePosition - (panelToMove.getSize() - targetRelativeAnchorPosition) - options.gap\n      : panelToMove.getAnchorPosition();\n    const estimatedPosition = estimatedPanelPosition - viewport.getRelativeHangerPosition();\n    const destPos = viewport.canSetBoundMode()\n      ? clamp(estimatedPosition, scrollArea.prev, scrollArea.next)\n      : estimatedPosition;\n\n    return {\n      panel: panelToMove,\n      destPos,\n      duration: options.duration,\n      eventType,\n    };\n  }\n}\n\nexport default Snap;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Snap from \"./Snap\";\nimport { MOVE_TYPE, EVENTS } from \"../consts\";\nimport { MoveTypeContext, DestinationInfo } from \"../types\";\nimport { circulate, clamp } from \"../utils\";\n\nclass FreeScroll extends Snap {\n  protected readonly type: string = MOVE_TYPE.FREE_SCROLL;\n\n  constructor() {\n    // Set snap count to Infinity\n    super(Infinity);\n  }\n\n  public findTargetPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { axesEvent, state, viewport } = ctx;\n    const destPos = axesEvent.destPos.flick;\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n    const scrollArea = viewport.getScrollArea();\n    const currentPanel = viewport.getCurrentPanel()!;\n    const options = viewport.options;\n\n    const delta = Math.abs(axesEvent.delta.flick + state.delta);\n    if (delta > minimumDistanceToChange) {\n      const destInfo = super.findSnappedPanel(ctx);\n\n      destInfo.duration = axesEvent.duration;\n      destInfo.destPos = destPos;\n      destInfo.eventType = !options.circular && destInfo.panel === currentPanel\n        ? \"\"\n        : EVENTS.CHANGE;\n\n      return destInfo;\n    } else {\n      let estimatedPosition = options.circular\n        ? circulate(destPos, scrollArea.prev, scrollArea.next, false)\n        : destPos;\n      estimatedPosition = clamp(estimatedPosition, scrollArea.prev, scrollArea.next);\n      estimatedPosition += viewport.getRelativeHangerPosition();\n\n      const estimatedPanel = viewport.findNearestPanelAt(estimatedPosition)!;\n\n      return {\n        panel: estimatedPanel,\n        destPos,\n        duration: axesEvent.duration,\n        eventType: \"\",\n      };\n    }\n  }\n\n  public findRestorePanel(ctx: MoveTypeContext): DestinationInfo {\n    return this.findTargetPanel(ctx);\n  }\n\n  public findPanelWhenInterrupted(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport } = ctx;\n\n    return {\n      panel: viewport.getNearestPanel()!,\n      destPos: viewport.getCameraPosition(),\n      duration: 0,\n      eventType: \"\",\n    };\n  }\n\n  protected calcBrinkOfChange(ctx: MoveTypeContext): number {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentPanel = viewport.getCurrentPanel()!;\n    const halfGap = options.gap / 2;\n\n    const lastPosition = viewport.stateMachine.getState().lastPosition;\n    const currentPanelPosition = currentPanel.getPosition();\n\n    // As camera can stop anywhere in free scroll mode,\n    // minimumDistanceToChange should be calculated differently.\n    // Ref #191(https://github.com/naver/egjs-flicking/issues/191)\n    const lastHangerPosition = lastPosition + viewport.getRelativeHangerPosition();\n\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    let minimumDistanceToChange = isNextDirection\n      ? currentPanelPosition + currentPanel.getSize() - lastHangerPosition + halfGap\n      : lastHangerPosition - currentPanelPosition + halfGap;\n    minimumDistanceToChange = Math.abs(minimumDistanceToChange % scrollAreaSize);\n\n    return Math.min(minimumDistanceToChange, scrollAreaSize - minimumDistanceToChange);\n  }\n}\n\nexport default FreeScroll;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Axes, { PanInput } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport Panel from \"./Panel\";\nimport PanelManager from \"./PanelManager\";\nimport StateMachine from \"./StateMachine\";\nimport MoveType from \"../moves/MoveType\";\nimport { FlickingOptions, FlickingPanel, FlickingStatus, ElementLike, EventType, TriggerCallback, NeedPanelEvent, FlickingEvent, MoveTypeObjectOption, OriginalStyle, Plugin, DestroyOption } from \"../types\";\nimport { DEFAULT_VIEWPORT_CSS, DEFAULT_CAMERA_CSS, TRANSFORM, DEFAULT_OPTIONS, EVENTS, DIRECTION, STATE_TYPE, MOVE_TYPE } from \"../consts\";\nimport { clamp, applyCSS, toArray, parseArithmeticExpression, isBetween, isArray, parseElement, hasClass, restoreStyle } from \"../utils\";\nimport Snap from \"../moves/Snap\";\nimport FreeScroll from \"../moves/FreeScroll\";\n\nexport default class Viewport {\n  public options: FlickingOptions;\n  public stateMachine: StateMachine;\n  public panelManager: PanelManager;\n  public moveType: MoveType;\n\n  private flicking: Flicking;\n  private axes: Axes;\n  private panInput: PanInput;\n\n  private viewportElement: HTMLElement;\n  private cameraElement: HTMLElement;\n\n  private triggerEvent: Flicking[\"triggerEvent\"];\n  private axesHandlers: {[key: string]: any};\n\n  private currentPanel: Panel | undefined;\n  private nearestPanel: Panel | undefined;\n\n  private plugins: Plugin[] = [];\n  private state: {\n    size: number;\n    position: number;\n    panelMaintainRatio: number;\n    relativeHangerPosition: number;\n    scrollArea: {\n      prev: number;\n      next: number;\n    };\n    translate: {\n      name: string,\n      has3d: boolean,\n    };\n    infiniteThreshold: number;\n    checkedIndexes: Array<[number, number]>;\n    isViewportGiven: boolean;\n    isCameraGiven: boolean;\n    originalViewportStyle: OriginalStyle;\n    originalCameraStyle: OriginalStyle;\n  };\n\n  constructor(\n    flicking: Flicking,\n    options: FlickingOptions,\n    triggerEvent: Flicking[\"triggerEvent\"],\n  ) {\n    this.flicking = flicking;\n    this.triggerEvent = triggerEvent;\n\n    this.state = {\n      size: 0,\n      position: 0,\n      panelMaintainRatio: 0,\n      relativeHangerPosition: 0,\n      scrollArea: {\n        prev: 0,\n        next: 0,\n      },\n      translate: TRANSFORM,\n      infiniteThreshold: 0,\n      checkedIndexes: [],\n      isViewportGiven: false,\n      isCameraGiven: false,\n      originalViewportStyle: {\n        className: null,\n        style: null,\n      },\n      originalCameraStyle: {\n        className: null,\n        style: null,\n      },\n    };\n    this.options = options;\n    this.stateMachine = new StateMachine();\n\n    this.build();\n  }\n\n  public moveTo(\n    panel: Panel,\n    destPos: number,\n    eventType: EventType[\"CHANGE\"] | EventType[\"RESTORE\"] | \"\",\n    axesEvent: any,\n    duration: number = this.options.duration,\n  ): TriggerCallback {\n    const state = this.state;\n    const currentState = this.stateMachine.getState();\n    const currentPosition = state.position;\n\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n    const direction = destPos === currentPosition\n      ? null\n      : destPos > currentPosition\n        ? DIRECTION.NEXT\n        : DIRECTION.PREV;\n\n    let eventResult: TriggerCallback;\n    if (eventType === EVENTS.CHANGE) {\n      eventResult = this.triggerEvent(EVENTS.CHANGE, axesEvent, isTrusted, {\n        index: panel.getIndex(),\n        panel,\n        direction,\n      });\n    } else if (eventType === EVENTS.RESTORE) {\n      eventResult = this.triggerEvent(EVENTS.RESTORE, axesEvent, isTrusted);\n    } else {\n      eventResult = {\n        onSuccess(callback: () => void): TriggerCallback {\n          callback();\n          return this;\n        },\n        onStopped(): TriggerCallback {\n          return this;\n        },\n      };\n    }\n\n    eventResult.onSuccess(() => {\n      currentState.delta = 0;\n      currentState.lastPosition = this.getCameraPosition();\n      currentState.targetPanel = panel;\n      currentState.direction = destPos === currentPosition\n        ? null\n        : destPos > currentPosition\n            ? DIRECTION.NEXT\n            : DIRECTION.PREV;\n\n      if (destPos === currentPosition) {\n        // no move\n        this.nearestPanel = panel;\n        this.currentPanel = panel;\n      }\n\n      if (axesEvent && axesEvent.setTo) {\n        // freeScroll only occurs in release events\n        axesEvent.setTo({ flick: destPos }, duration);\n      } else {\n        this.axes.setTo({ flick: destPos }, duration);\n      }\n    });\n\n    return eventResult;\n  }\n\n  public moveCamera(pos: number, axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const transform = state.translate.name;\n\n    // Update position & nearestPanel\n    state.position = pos;\n    this.nearestPanel = this.findNearestPanel();\n    const nearestPanel = this.nearestPanel;\n    const originalNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n\n    // From 0(panel position) to 1(panel position + panel size)\n    // When it's on gap area value will be (val > 1 || val < 0)\n    if (nearestPanel) {\n      const hangerPosition = this.getHangerPosition();\n      const panelPosition = nearestPanel.getPosition();\n      const panelSize = nearestPanel.getSize();\n      const halfGap = options.gap / 2;\n\n      // As panel's range is from panel position - half gap ~ panel pos + panel size + half gap\n      state.panelMaintainRatio = (hangerPosition - panelPosition + halfGap) / (panelSize +  2 * halfGap);\n    } else {\n      state.panelMaintainRatio = 0;\n    }\n\n    this.checkNeedPanel(axesEvent);\n\n    // Possibly modified after need panel, if it's looped\n    const modifiedNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n\n    pos += (modifiedNearestPosition - originalNearestPosition);\n    state.position = pos;\n\n    const moveVector = options.horizontal\n      ? [-pos, 0] : [0, -pos];\n    const moveCoord = moveVector.map(coord => `${Math.round(coord)}px`).join(\", \");\n\n    this.cameraElement.style[transform] = state.translate.has3d\n      ? `translate3d(${moveCoord}, 0px)`\n      : `translate(${moveCoord})`;\n  }\n\n  public stopCamera = (axesEvent: any): void => {\n    if (axesEvent && axesEvent.setTo) {\n      axesEvent.setTo({ flick: this.state.position }, 0);\n    }\n\n    this.stateMachine.transitTo(STATE_TYPE.IDLE);\n  }\n\n  public resize(): void {\n    const panelManager = this.panelManager;\n\n    this.updateSize();\n    this.updateOriginalPanelPositions();\n    this.updateAdaptiveSize();\n    this.updateScrollArea();\n\n    // Clone panels in circular mode\n    if (this.options.circular && panelManager.getPanelCount() > 0) {\n      this.clonePanels();\n      this.updateClonedPanelPositions();\n    }\n\n    panelManager.chainAllPanels();\n    this.updateCameraPosition();\n    this.updatePlugins();\n  }\n  // Find nearest anchor from current hanger position\n  public findNearestPanel(): Panel | undefined {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const hangerPosition = this.getHangerPosition();\n\n    if (this.isOutOfBound()) {\n      const position = state.position;\n\n      return position <= state.scrollArea.prev\n        ? panelManager.firstPanel()\n        : panelManager.lastPanel();\n    }\n\n    return this.findNearestPanelAt(hangerPosition);\n  }\n\n  public findNearestPanelAt(position: number): Panel | undefined {\n    const panelManager = this.panelManager;\n\n    const allPanels = panelManager.allPanels();\n    let minimumDistance = Infinity;\n    let nearestPanel: Panel | undefined;\n\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const prevPosition = panel.getPosition();\n      const nextPosition = prevPosition + panel.getSize();\n\n      // Use shortest distance from panel's range\n      const distance = isBetween(position, prevPosition, nextPosition)\n        ? 0\n        : Math.min(\n          Math.abs(prevPosition - position),\n          Math.abs(nextPosition - position),\n        );\n\n      if (distance > minimumDistance) {\n        break;\n      } else if (distance === minimumDistance) {\n        const minimumAnchorDistance = Math.abs(position - nearestPanel!.getAnchorPosition());\n        const anchorDistance = Math.abs(position - panel.getAnchorPosition());\n\n        if (anchorDistance > minimumAnchorDistance) {\n          break;\n        }\n      }\n\n      minimumDistance = distance;\n      nearestPanel = panel;\n    }\n\n    return nearestPanel;\n  }\n\n  public findNearestIdenticalPanel(panel: Panel): Panel {\n    let nearest = panel;\n    let shortestDistance = Infinity;\n    const hangerPosition = this.getHangerPosition();\n\n    const identicals = panel.getIdenticalPanels();\n    identicals.forEach(identical => {\n      const anchorPosition = identical.getAnchorPosition();\n      const distance = Math.abs(anchorPosition - hangerPosition);\n\n      if (distance < shortestDistance) {\n        nearest = identical;\n        shortestDistance = distance;\n      }\n    });\n\n    return nearest;\n  }\n\n  // Find shortest camera position that distance is minimum\n  public findShortestPositionToPanel(panel: Panel): number {\n    const state = this.state;\n    const options = this.options;\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = this.getHangerPosition();\n    const distance = Math.abs(hangerPosition - anchorPosition);\n    const scrollAreaSize = state.scrollArea.next - state.scrollArea.prev;\n\n    if (!options.circular) {\n      const position = anchorPosition - state.relativeHangerPosition;\n      return this.canSetBoundMode()\n        ? clamp(position, state.scrollArea.prev, state.scrollArea.next)\n        : position;\n    } else {\n      // If going out of viewport border is more efficient way of moving, choose that position\n      return distance <= scrollAreaSize - distance\n        ? anchorPosition - state.relativeHangerPosition\n        : anchorPosition > hangerPosition\n          // PREV TO NEXT\n          ? anchorPosition - state.relativeHangerPosition - scrollAreaSize\n          // NEXT TO PREV\n          : anchorPosition - state.relativeHangerPosition + scrollAreaSize;\n    }\n  }\n\n  public findEstimatedPosition(panel: Panel): number {\n    const scrollArea = this.getScrollArea();\n\n    let estimatedPosition = panel.getAnchorPosition() - this.getRelativeHangerPosition();\n    estimatedPosition = this.canSetBoundMode()\n      ? clamp(estimatedPosition, scrollArea.prev, scrollArea.next)\n      : estimatedPosition;\n\n    return estimatedPosition;\n  }\n\n  public enable(): void {\n    this.panInput.enable();\n  }\n\n  public disable(): void {\n    this.panInput.disable();\n  }\n\n  public insert(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const lastIndex = this.panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const state = this.state;\n    const parsedElements = parseElement(element);\n\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    const pushedIndex = this.panelManager.insert(index, panels);\n\n    if (!this.currentPanel) {\n      this.currentPanel = panels[0];\n    }\n\n    // Update checked indexes in infinite mode\n    this.updateCheckedIndexes({ min: index, max: index });\n    state.checkedIndexes.forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      if (index < min) {\n        // Push checked index\n        state.checkedIndexes.splice(idx, 1, [min + pushedIndex, max + pushedIndex]);\n      }\n    });\n\n    this.resize();\n\n    return panels;\n  }\n\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const panelManager = this.panelManager;\n    const lastIndex = panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const parsedElements = parseElement(element);\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    panelManager.replace(index, panels);\n\n    const currentPanel = this.currentPanel;\n    const wasEmpty = !currentPanel;\n    if (wasEmpty) {\n      this.currentPanel = panels[0];\n    } else if (isBetween(currentPanel!.getIndex(), index, index + panels.length - 1)) {\n      // Current panel is replaced\n      this.currentPanel = panelManager.get(currentPanel!.getIndex());\n    }\n\n    // Update checked indexes in infinite mode\n    this.updateCheckedIndexes({ min: index, max: index + panels.length - 1 });\n\n    this.resize();\n\n    const isFreeScroll = (this.options.moveType as MoveTypeObjectOption).type === \"freeScroll\";\n    if (isFreeScroll && wasEmpty) {\n      this.moveTo(this.currentPanel!, this.findEstimatedPosition(this.currentPanel!), \"\", null, 0);\n    }\n\n    return panels;\n  }\n\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    // Index should not below 0\n    index = Math.max(index, 0);\n\n    const panelManager = this.panelManager;\n    const currentIndex = this.getCurrentIndex();\n\n    const removedPanels = panelManager.remove(index, deleteCount);\n    if (isBetween(currentIndex, index, index + deleteCount - 1)) {\n      // Current panel is removed\n      // Use panel at removing index - 1 as new current panel if it exists\n      const newCurrentIndex = Math.max(index - 1, panelManager.getRange().min);\n      this.currentPanel = panelManager.get(newCurrentIndex);\n    }\n\n    // Update checked indexes in infinite mode\n    if (deleteCount > 0) {\n      // Check whether removing index will affect checked indexes\n      // Suppose index 0 is empty and removed index 1, then checked index 0 should be deleted and vice versa.\n      this.updateCheckedIndexes({ min: index - 1, max: index + deleteCount });\n    }\n\n    this.resize();\n\n    return removedPanels;\n  }\n\n  public updateAdaptiveSize(): void {\n    const options = this.options;\n    const horizontal = options.horizontal;\n    const currentPanel = this.getCurrentPanel();\n\n    if (!currentPanel) {\n      return;\n    }\n\n    let sizeToApply: number;\n    if (options.adaptive) {\n      const panelBbox = currentPanel.getBbox();\n\n      sizeToApply = horizontal ? panelBbox.height : panelBbox.width;\n    } else {\n      // Find minimum height of panels to maximum panel size\n      const maximumPanelSize = this.panelManager.originalPanels().reduce((maximum, panel) => {\n        const panelBbox = panel.getBbox();\n        return Math.max(maximum, horizontal ? panelBbox.height : panelBbox.width);\n      }, 0);\n\n      sizeToApply = maximumPanelSize;\n    }\n\n    const viewportStyle = this.viewportElement.style;\n    if (horizontal) {\n      viewportStyle.height = `${sizeToApply}px`;\n      viewportStyle.minHeight = \"100%\";\n      viewportStyle.width = \"100%\";\n    } else {\n      viewportStyle.width = `${sizeToApply}px`;\n      viewportStyle.minWidth = \"100%\";\n      viewportStyle.height = \"100%\";\n    }\n  }\n\n  public destroy(option: Partial<DestroyOption>): void {\n    const state = this.state;\n    const wrapper = this.flicking.getElement();\n    const viewportElement = this.viewportElement;\n    const cameraElement = this.cameraElement;\n    const originalPanels = this.panelManager.originalPanels();\n\n    this.removePlugins(this.plugins);\n    if (!option.preserveUI) {\n      restoreStyle(viewportElement, state.originalViewportStyle);\n      restoreStyle(cameraElement, state.originalCameraStyle);\n\n      if (!state.isCameraGiven && !this.options.renderExternal) {\n        const topmostElement = state.isViewportGiven\n          ? viewportElement\n          : wrapper;\n        const deletingElement = state.isViewportGiven\n          ? cameraElement\n          : viewportElement;\n\n        originalPanels.forEach(panel => {\n          topmostElement.appendChild(panel.getElement());\n        });\n\n        topmostElement.removeChild(deletingElement);\n      }\n    }\n\n    this.axes.destroy();\n    this.panInput.destroy();\n\n    originalPanels.forEach(panel => { panel.destroy(option); });\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public restore(status: FlickingStatus): void {\n    const panels = status.panels;\n    const defaultIndex = this.options.defaultIndex;\n    const cameraElement = this.cameraElement;\n    const panelManager = this.panelManager;\n\n    // Restore index\n    panelManager.clear();\n    cameraElement.innerHTML = status.panels.map(panel => panel.html).join(\"\");\n\n    this.createPanels();\n\n    // Reset panel index\n    panelManager.originalPanels().forEach((panel, idx) => {\n      panel.setIndex(panels[idx].index);\n    });\n\n    this.currentPanel = panelManager.get(status.index)\n      || panelManager.get(defaultIndex)\n      || panelManager.firstPanel();\n\n    this.resize();\n\n    this.axes.setTo({ flick: status.position }, 0);\n    this.moveCamera(status.position);\n  }\n\n  public getCurrentPanel(): Panel | undefined {\n    return this.currentPanel;\n  }\n\n  public getCurrentIndex(): number {\n    const currentPanel = this.currentPanel;\n\n    return currentPanel\n      ? currentPanel.getIndex()\n      : -1;\n  }\n\n  public getNearestPanel(): Panel | undefined {\n    return this.nearestPanel;\n  }\n\n  // Get progress from nearest panel\n  public getCurrentProgress(): number {\n    const currentState = this.stateMachine.getState();\n    let nearestPanel = currentState.playing || currentState.holding\n      ? this.nearestPanel\n      : this.currentPanel;\n\n    const panelManager = this.panelManager;\n    if (!nearestPanel) {\n      // There're no panels\n      return NaN;\n    }\n    const {prev: prevRange, next: nextRange} = this.getScrollArea();\n    const cameraPosition = this.getCameraPosition();\n    const isOutOfBound = this.isOutOfBound();\n    let prevPanel = nearestPanel.prevSibling;\n    let nextPanel = nearestPanel.nextSibling;\n    let hangerPosition = this.getHangerPosition();\n    let nearestAnchorPos = nearestPanel.getAnchorPosition();\n\n    if (\n      isOutOfBound\n      && prevPanel\n      && nextPanel\n      && cameraPosition < nextRange\n      // On the basis of anchor, prevPanel is nearestPanel.\n      && (hangerPosition - prevPanel.getAnchorPosition() < nearestAnchorPos - hangerPosition)\n    ) {\n      nearestPanel = prevPanel;\n      nextPanel = nearestPanel.nextSibling;\n      prevPanel = nearestPanel.prevSibling;\n      nearestAnchorPos = nearestPanel.getAnchorPosition();\n    }\n    const nearestIndex = nearestPanel.getIndex() + (nearestPanel.getCloneIndex() + 1) * panelManager.getPanelCount();\n    const nearestSize = nearestPanel.getSize();\n\n    if (isOutOfBound) {\n      const relativeHangerPosition = this.getRelativeHangerPosition();\n\n      if (nearestAnchorPos > nextRange + relativeHangerPosition) {\n        // next bounce area: hangerPosition - relativeHangerPosition - nextRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - nextRange;\n      } else if (nearestAnchorPos < prevRange + relativeHangerPosition) {\n        // prev bounce area: hangerPosition - relativeHangerPosition - prevRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - prevRange;\n      }\n    }\n    const hangerIsNextToNearestPanel = hangerPosition >= nearestAnchorPos;\n    const gap = this.options.gap;\n\n    let basePosition = nearestAnchorPos;\n    let targetPosition = nearestAnchorPos;\n    if (hangerIsNextToNearestPanel) {\n      targetPosition = nextPanel\n        ? nextPanel.getAnchorPosition()\n        : nearestAnchorPos + nearestSize + gap;\n    } else {\n      basePosition = prevPanel\n        ? prevPanel.getAnchorPosition()\n        : nearestAnchorPos - nearestSize - gap;\n    }\n\n    const progressBetween = (hangerPosition - basePosition) / (targetPosition - basePosition);\n    const startIndex = hangerIsNextToNearestPanel\n      ? nearestIndex\n      : prevPanel\n        ? prevPanel.getIndex()\n        : nearestIndex - 1;\n\n    return startIndex + progressBetween;\n  }\n\n  // Update axes flick position without triggering event\n  public updateAxesPosition(position: number) {\n    const axes = this.axes;\n    axes.off();\n    axes.setTo({\n      flick: position,\n    }, 0);\n    axes.on(this.axesHandlers);\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getScrollArea(): { prev: number, next: number } {\n    return this.state.scrollArea;\n  }\n  public isOutOfBound(): boolean {\n    const state = this.state;\n    const options = this.options;\n    const scrollArea = state.scrollArea;\n\n    return !options.circular\n      && options.bound\n      && (state.position <= scrollArea.prev || state.position >= scrollArea.next);\n  }\n\n  public canSetBoundMode(): boolean {\n    const state = this.state;\n    const options = this.options;\n    const lastPanel = this.panelManager.lastPanel();\n    if (!lastPanel) {\n      return false;\n    }\n\n    const summedPanelSize = lastPanel.getPosition() + lastPanel.getSize();\n\n    return options.bound\n      && !options.circular\n      && summedPanelSize >= state.size;\n  }\n\n  public getViewportElement(): HTMLElement {\n    return this.viewportElement;\n  }\n\n  public getCameraElement(): HTMLElement {\n    return this.cameraElement;\n  }\n\n  public getScrollAreaSize(): number {\n    const scrollArea = this.state.scrollArea;\n\n    return scrollArea.next - scrollArea.prev;\n  }\n\n  public getRelativeHangerPosition(): number {\n    return this.state.relativeHangerPosition;\n  }\n\n  public getHangerPosition(): number {\n    return this.state.position + this.state.relativeHangerPosition;\n  }\n\n  public getCameraPosition(): number {\n    return this.state.position;\n  }\n\n  public getCheckedIndexes(): Array<[number, number]> {\n    return this.state.checkedIndexes;\n  }\n\n  public setCurrentPanel(panel: Panel): void {\n    this.currentPanel = panel;\n  }\n\n  public setLastIndex(index: number): void {\n    const currentPanel = this.currentPanel;\n    const panelManager = this.panelManager;\n\n    panelManager.setLastIndex(index);\n    if (currentPanel && currentPanel.getIndex() > index) {\n      this.currentPanel = panelManager.lastPanel();\n    }\n\n    this.resize();\n  }\n\n  public connectAxesHandler(handlers: {[key: string]: (event: { [key: string]: any; }) => any}): void {\n    const axes = this.axes;\n\n    this.axesHandlers = handlers;\n    axes.on(handlers);\n  }\n  public addPlugins(plugins: Plugin | Plugin[]) {\n    const newPlugins = ([] as Plugin[]).concat(plugins);\n\n    newPlugins.forEach(plugin => {\n      plugin.init(this.flicking);\n    });\n\n    this.plugins = this.plugins.concat(newPlugins);\n    return this;\n  }\n  public removePlugins(plugins: Plugin | Plugin[]) {\n    const currentPlugins = this.plugins;\n    const removedPlugins = ([] as Plugin[]).concat(plugins);\n\n    removedPlugins.forEach(plugin => {\n      const index = currentPlugins.indexOf(plugin);\n\n      if (index > -1) {\n        currentPlugins.splice(index, 1);\n      }\n\n      plugin.destroy(this.flicking);\n    });\n    return this;\n  }\n  public updateCheckedIndexes(changedRange: { min: number, max: number }): void {\n    const state = this.state;\n\n    let removed = 0;\n    state.checkedIndexes.concat().forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      // Can fill part of indexes in range\n      if (changedRange.min <= max && changedRange.max >= min) {\n        // Remove checked index from list\n        state.checkedIndexes.splice(idx - removed, 1);\n        removed++;\n      }\n    });\n  }\n\n  private build(): void {\n    this.setElements();\n    this.applyCSSValue();\n    this.setMoveType();\n    this.setAxesInstance();\n    this.createPanels();\n    this.setDefaultPanel();\n    this.resize();\n    this.moveToDefaultPanel();\n  }\n\n  private setElements(): void {\n    const state = this.state;\n    const options = this.options;\n    const wrapper = this.flicking.getElement();\n    const classPrefix = options.classPrefix;\n\n    const viewportCandidate = wrapper.children[0] as HTMLElement;\n    const hasViewportElement = hasClass(viewportCandidate, `${classPrefix}-viewport`);\n\n    const viewportElement = hasViewportElement\n      ? viewportCandidate\n      : document.createElement(\"div\");\n\n    const cameraCandidate = hasViewportElement\n      ? viewportElement.children[0] as HTMLElement\n      : wrapper.children[0] as HTMLElement;\n    const hasCameraElement = hasClass(cameraCandidate, `${classPrefix}-camera`);\n\n    const cameraElement = hasCameraElement\n      ? cameraCandidate\n      : document.createElement(\"div\");\n\n    if (!hasCameraElement) {\n      cameraElement.className = `${classPrefix}-camera`;\n\n      const panelElements = hasViewportElement\n        ? viewportElement.children\n        : wrapper.children;\n\n      // Make all panels to be a child of camera element\n      // wrapper <- viewport <- camera <- panels[1...n]\n      toArray(panelElements).forEach(child => {\n        cameraElement.appendChild(child);\n      });\n    } else {\n      state.originalCameraStyle = {\n        className: cameraElement.getAttribute(\"class\"),\n        style: cameraElement.getAttribute(\"style\"),\n      };\n    }\n\n    if (!hasViewportElement) {\n      viewportElement.className = `${classPrefix}-viewport`;\n\n      // Add viewport element to wrapper\n      wrapper.appendChild(viewportElement);\n    } else {\n      state.originalViewportStyle = {\n        className: viewportElement.getAttribute(\"class\"),\n        style: viewportElement.getAttribute(\"style\"),\n      };\n    }\n\n    if (!hasCameraElement || !hasViewportElement) {\n      viewportElement.appendChild(cameraElement);\n    }\n\n    this.viewportElement = viewportElement;\n    this.cameraElement = cameraElement;\n    state.isViewportGiven = hasViewportElement;\n    state.isCameraGiven = hasCameraElement;\n\n    // Create PanelManager instance\n    this.panelManager = new PanelManager(cameraElement, options);\n  }\n\n  private applyCSSValue(): void {\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n    const cameraElement = this.cameraElement;\n\n    // Set default css values for each element\n    applyCSS(viewportElement, DEFAULT_VIEWPORT_CSS);\n    applyCSS(cameraElement, DEFAULT_CAMERA_CSS);\n\n    viewportElement.style.zIndex = `${options.zIndex}`;\n    if (options.overflow) {\n      viewportElement.style.overflow = \"visible\";\n    }\n  }\n\n  private setMoveType(): void {\n    const moveType = this.options.moveType as MoveTypeObjectOption;\n\n    switch (moveType.type) {\n      case MOVE_TYPE.SNAP:\n        this.moveType = new Snap(moveType.count);\n        break;\n      case MOVE_TYPE.FREE_SCROLL:\n        this.moveType = new FreeScroll();\n        break;\n      default:\n        throw new Error(\"moveType is not correct!\");\n    }\n  }\n\n  private setAxesInstance(): void {\n    const state = this.state;\n    const options = this.options;\n\n    const scrollArea = state.scrollArea;\n    const horizontal = options.horizontal;\n\n    this.axes = new Axes({\n      flick: {\n        range: [scrollArea.prev, scrollArea.next],\n        circular: options.circular,\n        bounce: [0, 0], // will be updated in resize()\n      },\n    }, {\n      easing: options.panelEffect,\n      deceleration: options.deceleration,\n      interruptable: true,\n    });\n\n    this.panInput = new PanInput(this.viewportElement, {\n      inputType: options.inputType,\n      thresholdAngle: options.thresholdAngle,\n      scale: options.horizontal ? [-1, 0] : [0, -1],\n    });\n\n    this.axes.connect(horizontal ? [\"flick\", \"\"] : [\"\", \"flick\"], this.panInput);\n  }\n\n  private createPanels(): void {\n    // Panel elements were attached to camera element by Flicking class\n    const panelElements = this.cameraElement.children;\n\n    // Initialize panels\n    const panels = toArray(panelElements).map(\n      (el: HTMLElement, idx: number) => new Panel(el, idx, this),\n    );\n\n    if (panels.length > 0) {\n      this.panelManager.append(panels);\n    }\n  }\n\n  private setDefaultPanel(): void {\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const indexRange = this.panelManager.getRange();\n    const index = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n\n    this.currentPanel = panelManager.get(index);\n  }\n\n  private clonePanels() {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n\n    const gap = options.gap;\n    const viewportSize = state.size;\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel()!;\n\n    // There're no panels exist\n    if (!firstPanel) {\n      return;\n    }\n\n    // For each panels, clone itself while last panel's position + size is below viewport size\n    const panels = panelManager.originalPanels();\n    const reversedPanels = panels.concat().reverse();\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + gap;\n    const relativeAnchorPosition = firstPanel.getRelativeAnchorPosition();\n    const relativeHangerPosition = this.getRelativeHangerPosition();\n\n    const areaPrev = (relativeHangerPosition - relativeAnchorPosition) % sumOriginalPanelSize;\n    let sizeSum = 0;\n    let panelAtLeftBoundary!: Panel;\n    for (const panel of reversedPanels) {\n      if (!panel) {\n        continue;\n      }\n      sizeSum += panel.getSize() + gap;\n      if (sizeSum >= areaPrev) {\n        panelAtLeftBoundary = panel;\n        break;\n      }\n    }\n\n    const areaNext = (viewportSize - relativeHangerPosition + relativeAnchorPosition) % sumOriginalPanelSize;\n    sizeSum = 0;\n    let panelAtRightBoundary!: Panel;\n    for (const panel of panels) {\n      if (!panel) {\n        continue;\n      }\n      sizeSum += panel.getSize() + gap;\n      if (sizeSum >= areaNext) {\n        panelAtRightBoundary = panel;\n        break;\n      }\n    }\n\n    // Need one more set of clones on prev area of original panel 0\n    const needCloneOnPrev = panelAtLeftBoundary.getIndex() !== 0\n      && panelAtLeftBoundary.getIndex() <= panelAtRightBoundary.getIndex();\n\n    // Visible count of panel 0 on first screen\n    const panel0OnFirstscreen = Math.ceil((relativeHangerPosition + firstPanel.getSize() - relativeAnchorPosition) / sumOriginalPanelSize)\n      + Math.ceil((viewportSize - relativeHangerPosition + relativeAnchorPosition) / sumOriginalPanelSize)\n      - 1; // duplication\n\n    const cloneCount = panel0OnFirstscreen\n      + (needCloneOnPrev ? 1 : 0);\n    const prevCloneCount = panelManager.getCloneCount();\n\n    panelManager.setCloneCount(cloneCount);\n    if (options.renderExternal) {\n      return;\n    }\n\n    if (cloneCount > prevCloneCount) {\n      // should clone more\n      for (let cloneIndex = prevCloneCount; cloneIndex < cloneCount; cloneIndex++) {\n        const clones = panels.map(origPanel => {\n          const clonedPanel = origPanel.clone(cloneIndex);\n\n          this.cameraElement.appendChild(clonedPanel.getElement());\n\n          return clonedPanel;\n        });\n        panelManager.insertClones(cloneIndex, 0, clones);\n      }\n    } else if (cloneCount < prevCloneCount) {\n      // should remove some\n      panelManager.removeClonesAfter(cloneCount);\n    }\n  }\n\n  private moveToDefaultPanel(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const indexRange = this.panelManager.getRange();\n\n    const defaultIndex = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n    const defaultPanel = panelManager.get(defaultIndex);\n\n    let defaultPosition = 0;\n    if (defaultPanel) {\n      defaultPosition = defaultPanel.getAnchorPosition() - state.relativeHangerPosition;\n      defaultPosition = this.canSetBoundMode()\n        ? clamp(defaultPosition, state.scrollArea.prev, state.scrollArea.next)\n        : defaultPosition;\n    }\n\n    this.moveCamera(defaultPosition);\n    this.axes.setTo({ flick: defaultPosition }, 0);\n  }\n\n  private updateSize(): void {\n    const state = this.state;\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n    const panels = this.panelManager.originalPanels();\n\n    if (!options.horizontal) {\n      // Don't preserve previous width for adaptive resizing\n      viewportElement.style.width = \"\";\n    } else {\n      viewportElement.style.height = \"\";\n    }\n\n    const bbox = viewportElement.getBoundingClientRect();\n\n    // Update size & hanger position\n    state.size = options.horizontal\n      ? bbox.width\n      : bbox.height;\n\n    state.relativeHangerPosition = parseArithmeticExpression(options.hanger, state.size);\n    state.infiniteThreshold = parseArithmeticExpression(options.infiniteThreshold, state.size);\n\n    // Resize all panels\n    panels.forEach(panel => {\n      panel.resize();\n    });\n  }\n\n  private updateOriginalPanelPositions(): void {\n    const gap = this.options.gap;\n    const panelManager = this.panelManager;\n\n    const firstPanel = panelManager.firstPanel();\n    const panels = panelManager.originalPanels();\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const currentPanel = this.currentPanel!;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n    const scrollArea = this.state.scrollArea;\n\n    // Update panel position && fit to wrapper\n    let nextPanelPos = firstPanel.getPosition();\n    let maintainingPanel: Panel = firstPanel;\n    if (nearestPanel) {\n      // We should maintain nearestPanel's position\n      const looped = !isBetween(currentState.lastPosition + currentState.delta, scrollArea.prev, scrollArea.next);\n\n      maintainingPanel = looped\n        ? currentPanel\n        : nearestPanel;\n    } else if (firstPanel.getIndex() > 0) {\n      maintainingPanel = currentPanel;\n    }\n\n    const panelsBeforeMaintainPanel = panels.slice(0, maintainingPanel.getIndex() + (maintainingPanel.getCloneIndex() + 1) * panels.length);\n    const accumulatedSize = panelsBeforeMaintainPanel.reduce((total, panel) => {\n      return total + panel.getSize() + gap;\n    }, 0);\n\n    nextPanelPos = maintainingPanel.getPosition() - accumulatedSize;\n\n    panels.forEach(panel => {\n      const newPosition = nextPanelPos;\n      const panelSize = panel.getSize();\n\n      panel.setPosition(newPosition);\n      nextPanelPos += panelSize + gap;\n    });\n  }\n\n  private updateClonedPanelPositions(): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const clonedPanels = panelManager.clonedPanels()\n      .reduce((allClones, clones) => [...allClones, ...clones], [])\n      .filter(panel => Boolean(panel));\n\n    const scrollArea = state.scrollArea;\n\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel()!;\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n    // Locate all cloned panels linearly first\n    for (const panel of clonedPanels) {\n      const origPanel = panel.getOriginalPanel();\n      const cloneIndex = panel.getCloneIndex();\n      const cloneBasePos = sumOriginalPanelSize * (cloneIndex + 1);\n      const clonedPanelPos = cloneBasePos + origPanel.getPosition();\n\n      panel.setPosition(clonedPanelPos);\n    }\n\n    let lastReplacePosition = firstPanel.getPosition();\n    // reverse() pollutes original array, so copy it with concat()\n    for (const panel of clonedPanels.concat().reverse()) {\n      const panelSize = panel.getSize();\n      const replacePosition = lastReplacePosition - panelSize - options.gap;\n\n      if (replacePosition + panelSize <= scrollArea.prev) {\n        // Replace is not meaningful, as it won't be seen in current scroll area\n        break;\n      }\n\n      panel.setPosition(replacePosition);\n      lastReplacePosition = replacePosition;\n    }\n  }\n\n  private updateScrollArea(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const axes = this.axes;\n\n    // Set viewport scrollable area\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel() as Panel;\n    const relativeHangerPosition = state.relativeHangerPosition;\n\n    if (!firstPanel) {\n      state.scrollArea = {\n        prev: 0,\n        next: 0,\n      };\n    } else if (this.canSetBoundMode()) {\n      state.scrollArea = {\n        prev: firstPanel.getPosition(),\n        next: lastPanel.getPosition() + lastPanel.getSize() - state.size,\n      };\n    } else if (options.circular) {\n      const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n      // Maximum scroll extends to first clone sequence's first panel\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: sumOriginalPanelSize + firstPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    } else {\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: lastPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    }\n\n    const viewportSize = state.size;\n    const bounce = options.bounce;\n\n    let parsedBounce: number[] = bounce as [number, number];\n    if (isArray(bounce)) {\n      parsedBounce = (bounce as string[]).map(val => parseArithmeticExpression(val, viewportSize, DEFAULT_OPTIONS.bounce as number));\n    } else {\n      const parsedVal = parseArithmeticExpression(bounce as number | string, viewportSize, DEFAULT_OPTIONS.bounce as number);\n      parsedBounce = [parsedVal, parsedVal];\n    }\n\n    // Update axes range and bounce\n    const flick = axes.axis.flick;\n    flick.range = [state.scrollArea.prev, state.scrollArea.next];\n    flick.bounce = parsedBounce;\n  }\n\n  // Update camera position after resizing\n  private updateCameraPosition(): void {\n    const state = this.state;\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.stateMachine.getState();\n    const isFreeScroll = this.moveType.is(MOVE_TYPE.FREE_SCROLL);\n    const relativeHangerPosition = this.getRelativeHangerPosition();\n    const halfGap = this.options.gap / 2;\n\n    if (currentState.holding || currentState.playing) {\n      return;\n    }\n\n    let newPosition: number;\n    if (isFreeScroll) {\n      const nearestPanel = this.getNearestPanel();\n\n      newPosition = nearestPanel\n        ? nearestPanel.getPosition() - halfGap + (nearestPanel.getSize() + 2 * halfGap) * state.panelMaintainRatio - relativeHangerPosition\n        : this.getCameraPosition();\n    } else {\n      newPosition = currentPanel\n        ? currentPanel.getAnchorPosition() - relativeHangerPosition\n        : this.getCameraPosition();\n    }\n\n    if (this.canSetBoundMode()) {\n      newPosition = clamp(newPosition, state.scrollArea.prev, state.scrollArea.next);\n    }\n\n    // Pause & resume axes to prevent axes's \"change\" event triggered\n    // This should be done before moveCamera, as moveCamera can trigger needPanel\n    this.updateAxesPosition(newPosition);\n\n    this.moveCamera(newPosition);\n  }\n\n  private updatePlugins(): void {\n    // update for resize\n    this.plugins.forEach(plugin => {\n      plugin.update && plugin.update(this.flicking);\n    });\n  }\n\n  private checkNeedPanel(axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const currentPanel = this.currentPanel;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n\n    if (!options.infinite) {\n      return;\n    }\n\n    const gap = options.gap;\n    const infiniteThreshold = state.infiniteThreshold;\n    const maxLastIndex = panelManager.getLastIndex();\n\n    if (maxLastIndex < 0) {\n      return;\n    }\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      this.triggerNeedPanel({\n        axesEvent,\n        siblingPanel: null,\n        direction: null,\n        indexRange: {\n          min: 0,\n          max: maxLastIndex,\n          length: maxLastIndex + 1,\n        },\n      });\n      return;\n    }\n\n    const originalNearestPosition = nearestPanel.getPosition();\n\n    // Check next direction\n    let checkingPanel: Panel | null = !currentState.holding && !currentState.playing\n      ? currentPanel\n      : nearestPanel;\n\n    while (checkingPanel) {\n      const currentIndex = checkingPanel.getIndex();\n      const nextSibling = checkingPanel.nextSibling;\n      const lastPanel = panelManager.lastPanel()!;\n      const atLastPanel = currentIndex === lastPanel.getIndex();\n      const nextIndex = !atLastPanel && nextSibling\n        ? nextSibling.getIndex()\n        : maxLastIndex + 1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelRight = checkingPanel.getPosition() + checkingPanel.getSize() - (currentNearestPosition - originalNearestPosition);\n      const cameraNext = state.position + state.size;\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = (nextIndex - currentIndex > 1);\n      // Expected prev panel's left position is smaller than camera position\n      const overThreshold = panelRight + gap - infiniteThreshold <= cameraNext;\n\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.NEXT,\n          indexRange: {\n            min: currentIndex + 1,\n            max: nextIndex - 1,\n            length: nextIndex - currentIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at max panel index\n      if (options.circular && currentIndex === maxLastIndex && overThreshold) {\n        const firstPanel = panelManager.firstPanel();\n        const firstIndex = firstPanel\n          ? firstPanel.getIndex()\n          : -1;\n\n        if (firstIndex > 0) {\n          this.triggerNeedPanel({\n            axesEvent,\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.NEXT,\n            indexRange: {\n              min: 0,\n              max: firstIndex - 1,\n              length: firstIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether panels are changed\n      const lastPanelAfterNeed = panelManager.lastPanel()!;\n      const atLastPanelAfterNeed = lastPanelAfterNeed && currentIndex === lastPanelAfterNeed.getIndex();\n\n      if (atLastPanelAfterNeed || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.nextSibling;\n    }\n\n    // Check prev direction\n    checkingPanel = nearestPanel;\n    while (checkingPanel) {\n      const cameraPrev = state.position;\n      const checkingIndex = checkingPanel.getIndex();\n      const prevSibling = checkingPanel.prevSibling;\n      const firstPanel = panelManager.firstPanel()!;\n      const atFirstPanel = checkingIndex === firstPanel.getIndex();\n      const prevIndex = !atFirstPanel && prevSibling\n        ? prevSibling.getIndex()\n        : -1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelLeft = checkingPanel.getPosition() - (currentNearestPosition - originalNearestPosition);\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = checkingIndex - prevIndex > 1;\n      // Expected prev panel's right position is smaller than camera position\n      const overThreshold = panelLeft - gap + infiniteThreshold >= cameraPrev;\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.PREV,\n          indexRange: {\n            min: prevIndex + 1,\n            max: checkingIndex - 1,\n            length: checkingIndex - prevIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at panel 0\n      if (options.circular && checkingIndex === 0 && overThreshold) {\n        const lastPanel = panelManager.lastPanel();\n\n        if (lastPanel && lastPanel.getIndex() < maxLastIndex) {\n          const lastIndex = lastPanel.getIndex();\n\n          this.triggerNeedPanel({\n            axesEvent,\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.PREV,\n            indexRange: {\n              min: lastIndex + 1,\n              max: maxLastIndex,\n              length: maxLastIndex - lastIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether panels were changed\n      const firstPanelAfterNeed = panelManager.firstPanel();\n      const atFirstPanelAfterNeed = firstPanelAfterNeed && checkingIndex === firstPanelAfterNeed.getIndex();\n\n      // Looped in circular mode\n      if (atFirstPanelAfterNeed || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.prevSibling;\n    }\n  }\n\n  private triggerNeedPanel(params: {\n    axesEvent: any;\n    siblingPanel: Panel | null,\n    direction: FlickingEvent[\"direction\"];\n    indexRange: NeedPanelEvent[\"range\"];\n  }): void {\n    const { axesEvent, siblingPanel, direction, indexRange } = params;\n    const checkedIndexes = this.state.checkedIndexes;\n    const alreadyTriggered = checkedIndexes.some(([min, max]) => min === indexRange.min || max === indexRange.max);\n    const hasHandler = this.flicking.hasOn(EVENTS.NEED_PANEL);\n\n    if (alreadyTriggered || !hasHandler) {\n      return;\n    }\n\n    // Should done before triggering event, as we can directly add panels by event callback\n    checkedIndexes.push([indexRange.min, indexRange.max]);\n\n    const index = siblingPanel\n      ? siblingPanel.getIndex()\n      : 0;\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n\n    this.triggerEvent(\n      EVENTS.NEED_PANEL,\n      axesEvent,\n      isTrusted,\n      {\n        index,\n        panel: siblingPanel,\n        direction,\n        range: indexRange,\n      } as Partial<NeedPanelEvent>,\n    );\n  }\n}\n","import { isBrowser } from \"../consts\";\n\nconst tid = \"UA-70842526-24\";\nconst cid = (Math.random() * Math.pow(10, 20)) / Math.pow(10, 10);\n\nexport function sendEvent(category: string, action: string, label: any) {\n  if (!isBrowser) {\n    return;\n  }\n\n  try {\n    const innerWidth = window.innerWidth;\n    const innerHeight = window.innerHeight;\n    const screen = window.screen || { width: innerWidth, height: innerHeight };\n    const collectInfos = [\n      \"v=1\",\n      \"t=event\",\n      `dl=${location.href}`,\n      `ul=${(navigator.language || \"en-us\").toLowerCase()}`,\n      `de=${document.charset || document.inputEncoding || document.characterSet || \"utf-8\"}`,\n      `dr=${document.referrer}`,\n      `dt=${document.title}`,\n      `sr=${screen.width}x${screen.height}`,\n      `vp=${innerWidth}x${innerHeight}`,\n      `ec=${category}`,\n      `ea=${action}`,\n      `el=${JSON.stringify(label)}`,\n      `cid=${cid}`,\n      `tid=${tid}`,\n      \"cd1=#__VERSION__#\",\n      `z=${Math.floor(Math.random() * 10000000)}`,\n    ];\n    const req = new XMLHttpRequest();\n    req.open(\"GET\", `https://www.google-analytics.com/collect?${collectInfos.join(\"&\")}`);\n    req.send();\n  } catch (e) {}\n}\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Component from \"@egjs/component\";\nimport Viewport from \"./components/Viewport\";\nimport Panel from \"./components/Panel\";\n\nimport { merge, getProgress, parseElement, isString, counter } from \"./utils\";\nimport { DEFAULT_OPTIONS, EVENTS, DIRECTION, AXES_EVENTS, STATE_TYPE, DEFAULT_MOVE_TYPE_OPTIONS } from \"./consts\";\nimport { FlickingOptions, FlickingEvent, Direction, EventType, FlickingPanel, TriggerCallback, FlickingContext, FlickingStatus, Plugin, ElementLike, DestroyOption } from \"./types\";\nimport { sendEvent } from \"./ga/ga\";\n\n/**\n * @memberof eg\n * @extends eg.Component\n * @support {\"ie\": \"10+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\" , \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @requires {@link https://github.com/naver/egjs-component|eg.Component}\n * @requires {@link https://github.com/naver/egjs-axes|eg.Axes}\n * @see Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>\n */\nclass Flicking extends Component {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @example\n   * eg.Flicking.VERSION;  // ex) 3.0.0\n   * @memberof eg.Flicking\n   */\n  public static VERSION: string = \"#__VERSION__#\";\n  /**\n   * Direction constant - \"PREV\" or \"NEXT\"\n   * @ko 방향 상수 - \"PREV\" 또는 \"NEXT\"\n   * @type {object}\n   * @property {\"PREV\"} PREV - Prev direction from current hanger position.<br/>It's `left(←️)` direction when `horizontal: true`.<br/>Or, `up(↑️)` direction when `horizontal: false`.<ko>현재 행어를 기준으로 이전 방향.<br/>`horizontal: true`일 경우 `왼쪽(←️)` 방향.<br/>`horizontal: false`일 경우 `위쪽(↑️)`방향이다.</ko>\n   * @property {\"NEXT\"} NEXT - Next direction from current hanger position.<br/>It's `right(→)` direction when `horizontal: true`.<br/>Or, `down(↓️)` direction when `horizontal: false`.<ko>현재 행어를 기준으로 다음 방향.<br/>`horizontal: true`일 경우 `오른쪽(→)` 방향.<br/>`horizontal: false`일 경우 `아래쪽(↓️)`방향이다.</ko>\n   * @example\n   * eg.Flicking.DIRECTION.PREV; // \"PREV\"\n   * eg.Flicking.DIRECTION.NEXT; // \"NEXT\"\n   */\n  public static DIRECTION: Direction = DIRECTION;\n\n  /**\n   * Event type object with event name strings.\n   * @ko 이벤트 이름 문자열들을 담은 객체\n   * @type {object}\n   * @property {\"holdStart\"} HOLD_START - holdStart event<ko>holdStart 이벤트</ko>\n   * @property {\"holdEnd\"} HOLD_END - holdEnd event<ko>holdEnd 이벤트</ko>\n   * @property {\"moveStart\"} MOVE_START - moveStart event<ko>moveStart 이벤트</ko>\n   * @property {\"move\"} MOVE - move event<ko>move 이벤트</ko>\n   * @property {\"moveEnd\"} MOVE_END - moveEnd event<ko>moveEnd 이벤트</ko>\n   * @property {\"change\"} CHANGE - change event<ko>change 이벤트</ko>\n   * @property {\"restore\"} RESTORE - restore event<ko>restore 이벤트</ko>\n   * @property {\"select\"} SELECT - select event<ko>select 이벤트</ko>\n   * @property {\"needPanel\"} NEED_PANEL - needPanel event<ko>needPanel 이벤트</ko>\n   * @example\n   * eg.Flicking.EVENTS.MOVE_START; // \"MOVE_START\"\n   */\n  public static EVENTS: EventType = EVENTS;\n\n  public options: FlickingOptions;\n\n  private wrapper: HTMLElement;\n  private viewport: Viewport;\n  private eventContext: FlickingContext;\n\n  /**\n   * @param element A base element for the eg.Flicking module. When specifying a value as a `string` type, you must specify a css selector string to select the element.<ko>eg.Flicking 모듈을 사용할 기준 요소. `string`타입으로 값 지정시 요소를 선택하기 위한 css 선택자 문자열을 지정해야 한다.</ko>\n   * @param options An option object of the eg.Flicking module<ko>eg.Flicking 모듈의 옵션 객체</ko>\n   * @param {string} [options.classPrefix=\"eg-flick\"] A prefix of class name will be added for the panels, viewport and camera.<ko>패널들과 뷰포트, 카메라에 추가될 클래스 이름의 접두사.</ko>\n   * @param {number} [options.deceleration=0.0075] Deceleration value for panel movement animation for animation triggered by manual user input. Higher value means shorter running time.<ko>사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아진다.</ko>\n   * @param {boolean} [options.horizontal=true] Direction of panel movement. (true: horizontal, false: vertical)<ko>패널 이동 방향. (true: 가로방향, false: 세로방향)</ko>\n   * @param {boolean} [options.circular=false] Enables circular mode, which connects first/last panel for continuous scrolling<ko>순환 모드를 활성화한다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능하다.</ko>\n   * @param {boolean} [options.infinite=false] Enables infinite mode, which can automatically trigger needPanel until reaching last panel's index reaches lastIndex<ko>무한 모드를 활성화한다. 무한 모드에서는 needPanel 이벤트를 자동으로 트리거한다. 해당 동작은 마지막 패널의 인덱스가 lastIndex와 일치할때까지 일어난다.</ko>\n   * @param {number} [options.infiniteThreshold=0] A Threshold from viewport edge before triggering `needPanel` event in infinite mode.<ko>무한 모드에서 `needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리.</ko>\n   * @param {number} [options.lastIndex=Infinity] Maximum panel index that Flicking can set. Flicking won't trigger `needPanel` when event's panel index is greater than it.<br>Also, if last panel's index reached given index, you can't add more panels.<ko>Flicking이 설정 가능한 패널의 최대 인덱스. `needPanel` 이벤트에 지정된 인덱스가 최대 패널의 개수보다 같거나 커야 하는 경우에 이벤트를 트리거하지 않게 한다.<br>또한, 마지막 패널의 인덱스가 주어진 인덱스와 동일할 경우, 새로운 패널을 더 이상 추가할 수 없다.</ko>\n   * @param {number} [options.threshold=40] Movement threshold to change panel(unit: pixel). It should be dragged above the threshold to change current panel.<ko>패널 변경을 위한 이동 임계값 (단위: 픽셀). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.</ko>\n   * @param {number} [options.duration=100] Duration of the panel movement animation.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @param {function} [options.panelEffect=x => 1 - Math.pow(1 - x, 3)] An easing function applied to the panel movement animation. Default value is `easeOutCubic`.<ko>패널 이동 애니메이션에 적용할 easing함수. 기본값은 `easeOutCubic`이다.</ko>\n   * @param {number} [options.defaultIndex=0] Index of panel to set as default when initializing. A zero-based integer.<ko>초기화시 지정할 디폴트 패널의 인덱스로, 0부터 시작하는 정수.</ko>\n   * @param {string[]} [options.inputType=[\"touch,\"mouse\"]] Types of input devices to enable.({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption Reference})<ko>활성화할 입력 장치 종류. ({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption 참고})</ko>\n   * @param {number} [options.thresholdAngle=45] The threshold angle value(0 ~ 90).<br>If input angle from click/touched position is above or below this value in horizontal and vertical mode each, scrolling won't happen.<ko>스크롤 동작을 막기 위한 임계각(0 ~ 90).<br>클릭/터치한 지점으로부터 계산된 사용자 입력의 각도가 horizontal/vertical 모드에서 각각 크거나 작으면, 스크롤 동작이 이루어지지 않는다.</ko>\n   * @param {number|string|number[]|string[]} [options.bounce=[10,10]] The size value of the bounce area. Only can be enabled when `circular=false`.<br>You can set different bounce value for prev/next direction by using array.<br>`number` for px value, and `string` for px, and % value relative to viewport size.(ex - 0, \"10px\", \"20%\")<ko>바운스 영역의 크기값. `circular=false`인 경우에만 사용할 수 있다.<br>배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정 가능하다.<br>`number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있다.(ex - 0, \"10px\", \"20%\")</ko>\n   * @param {boolean} [options.autoResize=false] Whether resize() method should be called automatically after window resize event.<ko>window의 `resize` 이벤트 이후 자동으로 resize()메소드를 호출할지의 여부.</ko>\n   * @param {boolean} [options.adaptive=false] Whether the height(horizontal)/width(vertical) of the viewport element reflects the height/width value of the panel after completing the movement.<ko>목적 패널로 이동한 후 그 패널의 높이(horizontal)/너비(vertical)값을 뷰포트 요소의 높이/너비값에 반영할지 여부.</ko>\n   * @param {number|\"\"} [options.zIndex=2000] z-index value for viewport element.<ko>뷰포트 엘리먼트의 z-index 값.</ko>\n   * @param {boolean} [options.bound=false] Prevent view from going out of first/last panel. Only can be enabled when `circular=false`.<ko>뷰가 첫번째와 마지막 패널 밖으로 나가는 것을 막아준다. `circular=false`인 경우에만 사용할 수 있다.</ko>\n   * @param {boolean} [options.overflow=false] Disables CSS property `overflow: hidden` in viewport if `true`.<ko>`true`로 설정시 뷰포트에 `overflow: hidden` 속성을 해제한다.</ko>\n   * @param {string} [options.hanger=\"50%\"] Reference position of hanger in viewport, which hangs panel anchors should be stopped at.<br>Should be provided in px or % value of viewport size.<br>You can combinate those values with plus/minus sign<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>뷰포트 내부의 행어의 위치. 패널의 앵커들이 뷰포트 내에서 멈추는 지점에 해당한다.<br>px값이나, 뷰포트의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {string} [options.anchor=\"50%\"] Reference position of anchor in panels, which can be hanged by viewport hanger.<br>Should be provided in px or % value of panel size.<br>You can combinate those values with plus/minus sign<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>패널 내부의 앵커의 위치. 뷰포트의 행어와 연계하여 패널이 화면 내에서 멈추는 지점을 설정할 수 있다.<br>px값이나, 패널의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {number} [options.gap=0] Space between each panels. Should be given in number.(px).<ko>패널간에 부여할 간격의 크기를 나타내는 숫자.(px)</ko>\n   * @param {eg.Flicking.MoveTypeOption} [options.moveType=\"snap\"] Movement style by user input.(ex: snap, freeScroll)<ko>사용자 입력에 의한 이동 방식.(ex: snap, freeScroll)</ko>\n   * @param {boolean} [options.collectStatistics=true] Whether to collect statistics on how you are using `Flicking`. These statistical data do not contain any personal information and are used only as a basis for the development of a user-friendly product.<ko>어떻게 `Flicking`을 사용하고 있는지에 대한 통계 수집 여부를 나타낸다. 이 통계자료는 개인정보를 포함하고 있지 않으며 오직 사용자 친화적인 제품으로 발전시키기 위한 근거자료로서 활용한다.</ko>\n   */\n  constructor(\n    element: string | HTMLElement,\n    options: Partial<FlickingOptions> = {},\n  ) {\n    super();\n\n    // Set flicking wrapper user provided\n    let wrapper: HTMLElement | null;\n    if (isString(element)) {\n      wrapper = document.querySelector(element);\n      if (!wrapper) {\n        throw new Error(\"Base element doesn't exist.\");\n      }\n    } else if (element.nodeName && element.nodeType === 1) {\n      wrapper = element;\n    } else {\n      throw new Error(\"Element should be provided in string or HTMLElement.\");\n    }\n\n    this.wrapper = wrapper;\n    // Override default options\n    this.options = merge({}, DEFAULT_OPTIONS, options) as FlickingOptions;\n    // Override moveType option\n    const currentOptions = this.options;\n    const moveType = currentOptions.moveType;\n\n    if (moveType in DEFAULT_MOVE_TYPE_OPTIONS) {\n      currentOptions.moveType = DEFAULT_MOVE_TYPE_OPTIONS[moveType as keyof typeof DEFAULT_MOVE_TYPE_OPTIONS];\n    }\n\n    // Make viewport instance with panel container element\n    this.viewport = new Viewport(this, this.options, this.triggerEvent);\n    this.listenInput();\n    this.listenResize();\n\n    if (this.options.collectStatistics) {\n      sendEvent(\"usage\", \"options\", options);\n    }\n  }\n\n  /**\n   * Move to the previous panel if it exists.\n   * @ko 이전 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public prev(duration?: number): this {\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.viewport.stateMachine.getState();\n\n    if (currentPanel && currentState.type === STATE_TYPE.IDLE) {\n      const prevPanel = currentPanel.prev();\n      if (prevPanel) {\n        prevPanel.focus(duration);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Move to the next panel if it exists.\n   * @ko 다음 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation(unit: ms).<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public next(duration?: number): this {\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.viewport.stateMachine.getState();\n\n    if (currentPanel && currentState.type === STATE_TYPE.IDLE) {\n      const nextPanel = currentPanel.next();\n      if (nextPanel) {\n        nextPanel.focus(duration);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Move to the panel of given index.\n   * @ko 주어진 인덱스에 해당하는 패널로 이동한다.\n   * @param index The index number of the panel to move.<ko>이동할 패널의 인덱스 번호.</ko>\n   * @param duration [duration=options.duration] Duration of the panel movement.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public moveTo(index: number, duration?: number): this {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    const state = viewport.stateMachine.getState();\n\n    if (!panel || state.type !== STATE_TYPE.IDLE) {\n      return this;\n    }\n\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = viewport.getHangerPosition();\n\n    let targetPanel = panel;\n    if (this.options.circular) {\n      const scrollAreaSize = viewport.getScrollAreaSize();\n      // Check all three possible locations, find the nearest position among them.\n      const possiblePositions = [\n        anchorPosition - scrollAreaSize,\n        anchorPosition,\n        anchorPosition + scrollAreaSize,\n      ];\n      const nearestPosition = possiblePositions.reduce((nearest, current) => {\n        return (Math.abs(current - hangerPosition) < Math.abs(nearest - hangerPosition))\n          ? current\n          : nearest;\n      }, Infinity) - panel.getRelativeAnchorPosition();\n\n      const identicals = panel.getIdenticalPanels();\n      const offset = nearestPosition - anchorPosition;\n      if (offset > 0) {\n        // First cloned panel is nearest\n        targetPanel = identicals[1];\n      } else if (offset < 0) {\n        // Last cloned panel is nearest\n        targetPanel = identicals[identicals.length - 1];\n      }\n\n      targetPanel = targetPanel.clone(targetPanel.getCloneIndex(), true);\n      targetPanel.setPosition(nearestPosition);\n    }\n    const currentIndex = this.getIndex();\n\n    if (hangerPosition === targetPanel.getAnchorPosition() && currentIndex === index) {\n      return this;\n    }\n\n    const eventType = panel.getIndex() === viewport.getCurrentIndex()\n      ? \"\"\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(\n      targetPanel,\n      viewport.findEstimatedPosition(targetPanel),\n      eventType,\n      null,\n      duration,\n    );\n    return this;\n  }\n\n  /**\n   * Return index of the current panel. `-1` if no panel exists.\n   * @ko 현재 패널의 인덱스 번호를 반환한다. 패널이 하나도 없을 경우 `-1`을 반환한다.\n   * @return Current panel's index, zero-based integer.<ko>현재 패널의 인덱스 번호. 0부터 시작하는 정수.</ko>\n   */\n  public getIndex(): number {\n    return this.viewport.getCurrentIndex();\n  }\n\n  /**\n   * Return the wrapper element user provided in constructor.\n   * @ko 사용자가 생성자에서 제공한 래퍼 엘리먼트를 반환한다.\n   * @return Wrapper element user provided.<ko>사용자가 제공한 래퍼 엘리먼트.</ko>\n   */\n  public getElement(): HTMLElement {\n    return this.wrapper;\n  }\n\n  /**\n   * Return current panel. `null` if no panel exists.\n   * @ko 현재 패널을 반환한다. 패널이 하나도 없을 경우 `null`을 반환한다.\n   * @return Current panel.<ko>현재 패널.</ko>\n   */\n  public getCurrentPanel(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.getCurrentPanel();\n    return panel\n      ? panel\n      : null;\n  }\n\n  /**\n   * Return the panel of given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 패널을 반환한다. 해당 패널이 존재하지 않을 시 `null`이다.\n   * @return Panel of given index.<ko>주어진 인덱스에 해당하는 패널.</ko>\n   */\n  public getPanel(index: number): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    return panel\n      ? panel\n      : null;\n  }\n\n  /**\n   * Return all panels.\n   * @ko 모든 패널들을 반환한다.\n   * @param - Should include cloned panels or not.<ko>복사된 패널들을 포함할지의 여부.</ko>\n   * @return All panels.<ko>모든 패널들.</ko>\n   */\n  public getAllPanels(includeClone?: boolean): FlickingPanel[] {\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const panels = includeClone\n      ? panelManager.allPanels()\n      : panelManager.originalPanels();\n\n    return panels\n      .filter(panel => !!panel);\n  }\n\n  /**\n   * Return the panels currently shown in viewport area.\n   * @ko 현재 뷰포트 영역에서 보여지고 있는 패널들을 반환한다.\n   * @return Panels currently shown in viewport area.<ko>현재 뷰포트 영역에 보여지는 패널들</ko>\n   */\n  public getVisiblePanels(): FlickingPanel[] {\n    return this.getAllPanels(true).filter(panel => {\n      const outsetProgress = panel.getOutsetProgress();\n\n      return outsetProgress > -1 && outsetProgress < 1;\n    });\n  }\n\n  /**\n   * Return length of original panels.\n   * @ko 원본 패널의 개수를 반환한다.\n   * @return Length of original panels.<ko>원본 패널의 개수</ko>\n   */\n  public getPanelCount(): number {\n    return this.viewport.panelManager.getPanelCount();\n  }\n\n  /**\n   * Return how many groups of clones are created.\n   * @ko 몇 개의 클론 그룹이 생성되었는지를 반환한다.\n   * @return Length of cloned panel groups.<ko>클론된 패널 그룹의 개수</ko>\n   */\n  public getCloneCount(): number {\n    return this.viewport.panelManager.getCloneCount();\n  }\n\n  /**\n   * Get maximum panel index for `infinite` mode.\n   * @ko `infinite` 모드에서 적용되는 추가 가능한 패널의 최대 인덱스 값을 반환한다.\n   * @see {@link eg.Flicking.FlickingOptions}\n   * @return Maximum index of panel that can be added.<ko>최대 추가 가능한 패널의 인덱스.</ko>\n   */\n  public getLastIndex(): number {\n    return this.viewport.panelManager.getLastIndex();\n  }\n\n  /**\n   * Set maximum panel index for `infinite' mode.<br>[needPanel]{@link eg.Flicking#events:needPanel} won't be triggered anymore when last panel's index reaches it.<br>Also, you can't add more panels after it.\n   * @ko `infinite` 모드에서 적용되는 패널의 최대 인덱스를 설정한다.<br>마지막 패널의 인덱스가 설정한 값에 도달할 경우 더 이상 [needPanel]{@link eg.Flicking#events:needPanel} 이벤트가 발생되지 않는다.<br>또한, 설정한 인덱스 이후로 새로운 패널을 추가할 수 없다.\n   * @param - Maximum panel index.\n   * @see {@link eg.Flicking.FlickingOptions}\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public setLastIndex(index: number): this {\n    this.viewport.setLastIndex(index);\n\n    return this;\n  }\n\n  /**\n   * Return panel movement animation.\n   * @ko 현재 패널 이동 애니메이션이 진행 중인지를 반환한다.\n   * @return Is animating or not.<ko>애니메이션 진행 여부.</ko>\n   */\n  public isPlaying(): boolean {\n    return this.viewport.stateMachine.getState().playing;\n  }\n\n  /**\n   * Unblock input devices.\n   * @ko 막았던 입력 장치로부터의 입력을 푼다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public enableInput(): this {\n    this.viewport.enable();\n\n    return this;\n  }\n\n  /**\n   * Block input devices.\n   * @ko 입력 장치로부터의 입력을 막는다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public disableInput(): this {\n    this.viewport.disable();\n\n    return this;\n  }\n\n  /**\n   * Get current flicking status. You can restore current state by giving returned value to [setStatus()]{@link eg.Flicking#setStatus}.\n   * @ko 현재 상태 값을 반환한다. 반환받은 값을 [setStatus()]{@link eg.Flicking#setStatus} 메소드의 인자로 지정하면 현재 상태를 복원할 수 있다.\n   * @return An object with current status value information.<ko>현재 상태값 정보를 가진 객체.</ko>\n   */\n  public getStatus(): FlickingStatus {\n    const viewport = this.viewport;\n\n    const panels = viewport.panelManager.originalPanels()\n      .filter(panel => !!panel)\n      .map(panel => {\n        return {\n          html: panel.getElement().outerHTML,\n          index: panel.getIndex(),\n        };\n      });\n\n    return {\n      index: viewport.getCurrentIndex(),\n      panels,\n      position: viewport.getCameraPosition(),\n    };\n  }\n\n  /**\n   * Restore to the state of the `status`.\n   * @ko `status`의 상태로 복원한다.\n   * @param status Status value to be restored. You can specify the return value of the [getStatus()]{@link eg.Flicking#getStatus} method.<ko>복원할 상태 값. [getStatus()]{@link eg.Flicking#getStatus}메서드의 반환값을 지정하면 된다.</ko>\n   */\n  public setStatus(status: FlickingStatus): void {\n    this.viewport.restore(status);\n  }\n\n  /**\n   * Add plugins that can have different effects on Flicking.\n   * @ko 플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가한다.\n   * @param - The plugin(s) to add.<ko>추가할 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public addPlugins(plugins: Plugin | Plugin[]) {\n    this.viewport.addPlugins(plugins);\n    return this;\n  }\n  /**\n   * Remove plugins from Flicking.\n   * @ko 플리킹으로부터 플러그인들을 제거한다.\n   * @param - The plugin(s) to remove.<ko>제거 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public removePlugins(plugins: Plugin | Plugin[]) {\n    this.viewport.removePlugins(plugins);\n    return this;\n  }\n\n  /**\n   * Return the reference element and all its children to the state they were in before the instance was created. Remove all attached event handlers. Specify `null` for all attributes of the instance (including inherited attributes).\n   * @ko 기준 요소와 그 하위 패널들을 인스턴스 생성전의 상태로 되돌린다. 부착된 모든 이벤트 핸들러를 탈거한다. 인스턴스의 모든 속성(상속받은 속성포함)에 `null`을 지정한다.\n   * @example\n   * const flick = new eg.Flicking(\"#flick\");\n   * flick.destroy();\n   * console.log(flick.moveTo); // null\n   */\n  public destroy(option: Partial<DestroyOption> = {}): void {\n    this.off();\n\n    if (this.options.autoResize) {\n      window.removeEventListener(\"resize\", this.resize);\n    }\n\n    this.viewport.destroy(option);\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  /**\n   * Update panels to current state.\n   * @ko 패널들을 현재 상태에 맞춰 갱신한다.\n   * @method\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public resize = (): this => {\n    const viewport = this.viewport;\n\n    viewport.panelManager.allPanels()\n      .forEach(panel => panel.unCacheBbox());\n    viewport.resize();\n\n    return this;\n  }\n\n  /**\n   * Add new panels at the beginning of panels.\n   * @ko 제일 앞에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.replace(3, document.createElement(\"div\")); // Add new panel at index 3\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 2\n   * flicking.prepend([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Prepended at index 0, 1\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 0, pushing every panels behind it.\n   */\n  public prepend(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n    const parsedElements = parseElement(element);\n\n    const insertingIndex = Math.max(viewport.panelManager.getRange().min - parsedElements.length, 0);\n    return viewport.insert(insertingIndex, parsedElements);\n  }\n\n  /**\n   * Add new panels at the end of panels.\n   * @ko 제일 끝에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.append(document.createElement(\"div\")); // Appended at index 0\n   * flicking.append(\"\\<div\\>Panel\\</div\\>\"); // Appended at index 1\n   * flicking.append([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Appended at index 2, 3\n   * // Even this is possible\n   * flicking.append(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\"); // Appended at index 4, 5\n   */\n  public append(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n\n    return viewport.insert(viewport.panelManager.getRange().max + 1, element);\n  }\n\n  /**\n   * Replace existing panels with new panels from given index. If target index is empty, add new panel at target index.\n   * @ko 주어진 인덱스로부터의 패널들을 새로운 패널들로 교체한다. 인덱스에 해당하는 자리가 비어있다면, 새로운 패널을 해당 자리에 집어넣는다.\n   * @param index - Start index to replace new panels.<ko>새로운 패널들로 교체할 시작 인덱스</ko>\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of created panels by replace.<ko>교체되어 새롭게 추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   *\n   * // This will add new panel at index 3,\n   * // Index 0, 1, 2 is empty at this moment.\n   * // [empty, empty, empty, PANEL]\n   * flicking.replace(3, document.createElement(\"div\"));\n   *\n   * // As index 2 was empty, this will also add new panel at index 2.\n   * // [empty, empty, PANEL, PANEL]\n   * flicking.replace(2, \"\\<div\\>Panel\\</div\\>\");\n   *\n   * // Index 3 was not empty, so it will replace previous one.\n   * // It will also add new panels at index 4 and 5.\n   * // before - [empty, empty, PANEL, PANEL]\n   * // after - [empty, empty, PANEL, NEW_PANEL, NEW_PANEL, NEW_PANEL]\n   * flicking.replace(3, [\"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\"])\n   */\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    return this.viewport.replace(index, element);\n  }\n\n  /**\n   * Remove panel at target index. This will decrease index of panels behind it.\n   * @ko `index`에 해당하는 자리의 패널을 제거한다. 수행시 `index` 이후의 패널들의 인덱스가 감소된다.\n   * @param index - Index of panel to remove.<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] - Number of panels to remove from index.<ko>`index` 이후로 제거할 패널의 개수.</ko>\n   * @return Array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    return this.viewport.remove(index, deleteCount);\n  }\n\n  /**\n   * Synchronize info of panels instance with info given by external rendering.\n   * @ko 외부 렌더링 방식에 의해 입력받은 패널의 정보와 현재 플리킹이 갖는 패널 정보를 동기화한다.\n   * @param diffInfo - Info object of how panel elements are changed.<ko>패널의 DOM 요소들의 변경 정보를 담는 오브젝트.</ko>\n   * @param {HTMLElement[]} [diffInfo.list] - DOM elements list after update.<ko>업데이트 이후 DOM 요소들의 리스트</ko>\n   * @param {number[][]} [diffInfo.maintained] - Index tuple array of DOM elements maintained. Formatted with `[before, after]`.<ko>변경 전후에 유지된 DOM 요소들의 인덱스 튜플 배열. `[이전, 이후]`의 형식을 갖고 있어야 한다.</ko>\n   * @param {number[]} [diffInfo.added] - Index array of DOM elements added to `list`.<ko>`list`에서 추가된 DOM 요소들의 인덱스 배열.</ko>\n   * @param {number[]} [diffInfo.removed] - Index array of DOM elements removed from previous element list.<ko>이전 리스트에서 제거된 DOM 요소들의 인덱스 배열.</ko>\n   */\n  public sync(diffInfo: {\n    list: HTMLElement[],\n    maintained: number[][],\n    added: number[],\n    changed: number[][],\n    removed: number[],\n  }): this {\n    const { list, maintained, added, changed, removed } = diffInfo;\n\n    // Did not changed at all\n    if (added.length <= 0 && removed.length <= 0 && changed.length <= 0) {\n      return this;\n    }\n\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const indexRange = panelManager.getRange();\n    const isCircular = this.options.circular;\n\n    // Make sure that new \"list\" should include cloned elements\n    const newOriginalPanelCount = (list.length / (panelManager.getCloneCount() + 1)) >> 0; // Make sure it's integer. Same with Math.floor, but faster\n    const newCloneCount = ((list.length / newOriginalPanelCount) >> 0) - 1;\n\n    const prevOriginalPanels = panelManager.originalPanels();\n    const prevClonedPanels = panelManager.clonedPanels();\n\n    const newOriginalElements = list.slice(0, newOriginalPanelCount);\n    const newClonedElements = list.slice(newOriginalPanelCount);\n\n    const newPanels: Panel[] = [];\n    const newClones: Panel[][] = counter(newCloneCount).map(() => []);\n\n    // For maintained panels after external rendering, they should be maintained in newPanels.\n    const originalMaintained = maintained.filter(([beforeIdx, afterIdx]) => beforeIdx <= indexRange.max);\n    // For newly added panels after external rendering, they will be added with their elements.\n    const originalAdded = added.filter(index => index < newOriginalPanelCount);\n\n    originalMaintained.forEach(([beforeIdx, afterIdx]) => {\n      newPanels[afterIdx] = prevOriginalPanels[beforeIdx];\n      newPanels[afterIdx].setIndex(afterIdx);\n    });\n\n    originalAdded.forEach(addIndex => {\n      newPanels[addIndex] = new Panel(newOriginalElements[addIndex], addIndex, viewport);\n    });\n\n    if (isCircular) {\n      counter(newCloneCount).forEach(groupIndex => {\n        const cloneGroupOffset = newOriginalPanelCount * groupIndex;\n        const prevCloneGroup = prevClonedPanels[groupIndex];\n        const newCloneGroup = newClones[groupIndex];\n\n        originalMaintained.forEach(([beforeIdx, afterIdx]) => {\n          newCloneGroup[afterIdx] = prevCloneGroup\n            ? prevCloneGroup[beforeIdx]\n            : newPanels[afterIdx].cloneExternal(groupIndex, newClonedElements[cloneGroupOffset + afterIdx]);\n        });\n\n        originalAdded.forEach(addIndex => {\n          const newPanel = newPanels[addIndex];\n\n          newCloneGroup[addIndex] = newPanel.cloneExternal(groupIndex, newClonedElements[cloneGroupOffset + addIndex]);\n        });\n      });\n    }\n\n    // Replace current info of panels this holds\n    added.forEach(index => { viewport.updateCheckedIndexes({ min: index, max: index }); });\n    removed.forEach(index => { viewport.updateCheckedIndexes({ min: index - 1, max: index + 1 }); });\n\n    const checkedIndexes = viewport.getCheckedIndexes();\n    checkedIndexes.forEach(([min, max], idx) => {\n      // Push checked indexes backward\n      const pushedIndex = added.filter(index => index < min && panelManager.has(index)).length\n        - removed.filter(index => index < min).length;\n      checkedIndexes.splice(idx, 1, [min + pushedIndex, max + pushedIndex]);\n    });\n\n    // Only effective only when there are least one panel which have changed its index\n    if (changed.length > 0) {\n      // Removed checked index by changed ones after pushing\n      maintained.forEach(([prev, next]) => { viewport.updateCheckedIndexes({ min: next, max: next }); });\n    }\n\n    panelManager.replacePanels(newPanels, newClones);\n    this.resize();\n\n    return this;\n  }\n\n  private listenInput(): void {\n    const flicking = this;\n    const viewport = flicking.viewport;\n    const stateMachine = viewport.stateMachine;\n\n    // Set event context\n    flicking.eventContext = {\n      flicking,\n      viewport: flicking.viewport,\n      transitTo: stateMachine.transitTo,\n      triggerEvent: flicking.triggerEvent,\n      moveCamera: flicking.moveCamera,\n      stopCamera: viewport.stopCamera,\n    };\n\n    const handlers = {};\n    for (const key in AXES_EVENTS) {\n      const eventType = AXES_EVENTS[key];\n\n      handlers[eventType] = (e: any) => stateMachine.fire(eventType, e, flicking.eventContext);\n    }\n\n    // Connect Axes instance with PanInput\n    flicking.viewport.connectAxesHandler(handlers);\n  }\n\n  private listenResize(): void {\n    if (this.options.autoResize) {\n      window.addEventListener(\"resize\", this.resize);\n    }\n  }\n\n  private triggerEvent = <T extends FlickingEvent>(\n    eventName: string,\n    axesEvent: any,\n    isTrusted: boolean,\n    params: Partial<T> = {},\n  ): TriggerCallback => {\n    const viewport = this.viewport;\n\n    let canceled: boolean = true;\n\n    // Ignore events before viewport is initialized\n    if (viewport) {\n      const state = viewport.stateMachine.getState();\n      const { prev, next } = viewport.getScrollArea();\n      const pos = viewport.getCameraPosition();\n      let progress = getProgress(pos, [prev, prev, next]);\n\n      if (this.options.circular) {\n        progress %= 1;\n      }\n      canceled = !super.trigger(eventName, merge({\n        type: eventName,\n        index: this.getIndex(),\n        panel: this.getCurrentPanel(),\n        direction: state.direction,\n        holding: state.holding,\n        progress,\n        axesEvent,\n        isTrusted,\n      }, params));\n    }\n\n    return {\n      onSuccess(callback: () => void): TriggerCallback {\n        if (!canceled) {\n          callback();\n        }\n        return this;\n      },\n      onStopped(callback: () => void): TriggerCallback {\n        if (canceled) {\n          callback();\n        }\n        return this;\n      },\n    } as TriggerCallback;\n  }\n\n  // Return result of \"move\" event triggered\n  private moveCamera = (axesEvent: any): TriggerCallback => {\n    const viewport = this.viewport;\n    const state = viewport.stateMachine.getState();\n    const options = this.options;\n\n    const pos = axesEvent.pos.flick;\n    const previousPosition = viewport.getCameraPosition();\n\n    if (axesEvent.isTrusted && state.holding) {\n      const inputOffset = options.horizontal\n        ? axesEvent.inputEvent.offsetX\n        : axesEvent.inputEvent.offsetY;\n\n      const isNextDirection = inputOffset < 0;\n\n      let cameraChange = pos - previousPosition;\n      const looped = isNextDirection === (pos < previousPosition);\n      if (options.circular && looped) {\n        // Reached at max/min range of axes\n        const scrollAreaSize = viewport.getScrollAreaSize();\n        cameraChange = (cameraChange > 0 ? -1 : 1) * (scrollAreaSize - Math.abs(cameraChange));\n      }\n\n      const currentDirection = cameraChange === 0\n        ? state.direction\n        : cameraChange > 0\n          ? DIRECTION.NEXT\n          : DIRECTION.PREV;\n\n      state.direction = currentDirection;\n    }\n    state.delta += axesEvent.delta.flick;\n\n    viewport.moveCamera(pos, axesEvent);\n    return this.triggerEvent(EVENTS.MOVE, axesEvent, axesEvent.isTrusted)\n      .onStopped(() => {\n        // Undo camera movement\n        viewport.moveCamera(previousPosition, axesEvent);\n      });\n  }\n}\n\nexport default Flicking;\n","import Flicking from \"./Flicking\";\nimport { withFlickingMethods } from \"./utils\";\nimport { DEFAULT_OPTIONS, MOVE_TYPE } from \"./consts\";\n\n(Flicking as any).withFlickingMethods = withFlickingMethods;\n(Flicking as any).DEFAULT_OPTIONS = DEFAULT_OPTIONS;\n(Flicking as any).MOVE_TYPE = MOVE_TYPE;\nexport default Flicking;\n"],"names":["target","_i","srcs","forEach","source","Object","keys","key","value","element","Array","isArray","elements","el","isString","tempDiv","document","createElement","innerHTML","push","toArray","children","checkTranslateSupport","transforms","webkitTransform","msTransform","MozTransform","OTransform","transform","isBrowser","name","has3d","supportedStyle","documentElement","style","transformName","prefixedTransform","Error","insertBefore","styleVal","window","getComputedStyle","getPropertyValue","parentElement","removeChild","transformInfo","length","classList","className","split","add","indexOf","replace","cssObj","property","val","min","max","Math","iterable","slice","call","arr","constructor","cssValue","base","defaultVal","defaultValue","cssRegex","clamp","idx","calculatedValue","matchResult","exec","sign","unit","parsedValue","parseFloat","pos","range","center","callback","i","counterArray","indexed","size","offset","classes","findIndex","originalStyle","setAttribute","removeAttribute","prototype","flickingName","FLICKING_METHODS","args","result","_a","MOVE_TYPE","SNAP","FREE_SCROLL","DEFAULT_MOVE_TYPE_OPTIONS","snap","type","count","freeScroll","DEFAULT_OPTIONS","classPrefix","deceleration","horizontal","circular","infinite","infiniteThreshold","lastIndex","Infinity","threshold","duration","panelEffect","x","pow","defaultIndex","inputType","thresholdAngle","bounce","autoResize","adaptive","zIndex","bound","overflow","hanger","anchor","gap","moveType","renderExternal","collectStatistics","DEFAULT_VIEWPORT_CSS","position","width","height","DEFAULT_CAMERA_CSS","willChange","DEFAULT_PANEL_CSS","EVENTS","HOLD_START","HOLD_END","MOVE_START","MOVE","MOVE_END","CHANGE","RESTORE","SELECT","NEED_PANEL","AXES_EVENTS","HOLD","RELEASE","ANIMATION_END","FINISH","STATE_TYPE","IDLE","HOLDING","DRAGGING","ANIMATING","DISABLED","DIRECTION","PREV","NEXT","prev","next","moveTo","getIndex","getAllPanels","getCurrentPanel","getElement","getPanel","getPanelCount","getStatus","getVisiblePanels","setLastIndex","enableInput","disableInput","destroy","resize","setStatus","addPlugins","removePlugins","isPlaying","getLastIndex","TRANSFORM","index","viewport","prevSibling","nextSibling","clonedPanels","state","relativeAnchorPosition","isClone","isVirtual","cloneIndex","getAttribute","cachedBbox","setElement","options","bbox","getBbox","parseArithmeticExpression","panel","panelCount","panelManager","scrollAreaSize","getScrollAreaSize","relativeIndex","floor","getPosition","progress","getCurrentProgress","outsetRange","getSize","getRelativeHangerPosition","getRelativeAnchorPosition","relativePanelPosition","getCameraPosition","outsetProgress","getProgress","panelSize","rightRelativePanelPosition","visibleSize","visibleRatio","currentPanel","hangerPosition","getHangerPosition","anchorPosition","getAnchorPosition","currentPosition","eventType","findEstimatedPosition","updateFunction","getIdenticalPanels","eachPanel","unCacheBbox","currentIndex","prevPanelIndex","prevPanelPosition","prevPanelSize","hasEmptyPanelBetween","notYetMinPanel","newPosition","prevPanel","clone","getCloneIndex","setPosition","nextPanelIndex","nextPanelPosition","notYetMaxPanel","nextPanel","parsedElements","parseElement","firstPanel","targetIndex","insert","remove","option","preserveUI","restoreStyle","getBoundingClientRect","original","getClonedPanels","elementStyle","left","top","cloneElement","cloneNode","clonedPanel","Panel","clonedState","parentNode","removeClonedPanelsAfter","start","removingPanels","splice","removeElement","addClass","applyCSS","cameraElement","panels","clones","cloneCount","reduce","allClones","newPanels","newClones","Boolean","filter","lastPanel","firstRemovedPanel","possibleLastPanel","isCircular","findFirstPanelFrom","siblingElement","insertNewPanels","pushedIndex","panelsAfterIndex","emptyPanelCount","removedPanels","newLastIndex","concat","reverse","setIndex","addNewClones","updateIndex","replacedPanels","wasNonEmptyCount","deleteCount","deletedPanels","cloneSet","reversedPanels","nonEmptyIndexFromLast","allPanels","allPanelsCount","newClones_1","insertTarget_1","allPanels_1","panelElement","contains","originalPanels","getCloneCount","lastPanelClones","nextSiblingClones","cloneNextSibling","lastPanelSibling","cloneSiblingElement","nextElementSibling","map","_this","this_1","insertClones","counter","insertingIndex","fragment_1","createDocumentFragment","appendChild","prevState","delta","direction","targetPanel","lastPosition","nextState","e","context","tslib_1","flicking","triggerEvent","transitTo","moveCamera","onSuccess","onStopped","onChange","State","inputEvent","offsetX","offsetY","flick","setTo","releaseEvent","clickedElement","srcEvent","clickedPanel","findPanelOf","cameraPosition","clickedPanelPosition","stopCamera","absDelta","abs","velocity","velocityX","velocityY","inputDelta","deltaX","deltaY","isNextDirection","swipeDistance","swipeAngle","atan","PI","belowAngleThreshold","overThreshold","moveTypeContext","axesEvent","interruptDestInfo","findPanelWhenInterrupted","destPos","nearestPanel","getNearestPanel","stop","destInfo","findTargetPanel","findRestorePanel","scrollArea","getScrollArea","loopCount","originalTargetPosition","newCloneIndex","circulate","newTargetPosition","newTargetPanel","setCurrentPanel","isTrusted","updateAdaptiveSize","updateAxesPosition","IdleState","nextStateType","currentState","HoldingState","DraggingState","AnimatingState","DisabledState","onExit","onEnter","onHold","onRelease","onAnimationEnd","onFinish","ctx","findRestorePanelInCircularMode","halfGap","minimumDistanceToChange","originalPanel","getOriginalPanel","firstClonedPanel","lapped","_super","snapCount","eventDelta","calcBrinkOfChange","shouldMoveWhenBounceIs0","canSetBoundMode","shouldMoveToAdjacent","isOutOfBound","findSnappedPanel","findAdjacentPanel","estimatedHangerPos","panelToMove","cycleIndex","passedPanelCount","panelPosition","panelNextPosition","panelPrevPosition","siblingPanel","panelIndex","siblingIndex","originalPosition","defaultDuration","getCurrentIndex","get","basePanel","basePosition","adjacentPanel","targetRelativeAnchorPosition","estimatedPanelPosition","estimatedPosition","MoveType","estimatedPanel","findNearestPanelAt","stateMachine","getState","currentPanelPosition","lastHangerPosition","Snap","panelMaintainRatio","relativeHangerPosition","translate","checkedIndexes","isViewportGiven","isCameraGiven","originalViewportStyle","originalCameraStyle","StateMachine","build","eventResult","axes","findNearestPanel","originalNearestPosition","checkNeedPanel","modifiedNearestPosition","moveVector","moveCoord","coord","round","join","updateSize","updateOriginalPanelPositions","updateScrollArea","clonePanels","updateClonedPanelPositions","chainAllPanels","updateCameraPosition","updatePlugins","minimumDistance","prevPosition","nextPosition","distance","isBetween","minimumAnchorDistance","anchorDistance","nearest","shortestDistance","identicals","identical","panInput","enable","disable","updateCheckedIndexes","indexes","wasEmpty","isFreeScroll","newCurrentIndex","getRange","sizeToApply","panelBbox","maximumPanelSize","maximum","viewportStyle","viewportElement","minHeight","minWidth","wrapper","plugins","topmostElement_1","deletingElement","status","clear","html","createPanels","playing","holding","NaN","prevRange","nextRange","nearestAnchorPos","nearestIndex","nearestSize","hangerIsNextToNearestPanel","targetPosition","progressBetween","startIndex","off","on","axesHandlers","summedPanelSize","handlers","newPlugins","plugin","init","currentPlugins","removedPlugins","changedRange","removed","setElements","applyCSSValue","setMoveType","setAxesInstance","setDefaultPanel","moveToDefaultPanel","viewportCandidate","hasViewportElement","hasClass","cameraCandidate","hasCameraElement","panelElements","child","PanelManager","FreeScroll","Axes","easing","interruptable","PanInput","scale","connect","append","indexRange","viewportSize","sumOriginalPanelSize","areaPrev","sizeSum","panelAtLeftBoundary","reversedPanels_1","areaNext","panelAtRightBoundary","panels_1","needCloneOnPrev","panel0OnFirstscreen","ceil","prevCloneCount","setCloneCount","origPanel","removeClonesAfter","defaultPanel","defaultPosition","nextPanelPos","maintainingPanel","looped","panelsBeforeMaintainPanel","accumulatedSize","total","clonedPanels_1","cloneBasePos","clonedPanelPos","lastReplacePosition","_b","replacePosition","parsedBounce","parsedVal","axis","is","update","maxLastIndex","triggerNeedPanel","checkingPanel","atLastPanel","nextIndex","currentNearestPosition","panelRight","cameraNext","emptyPanelExistsBetween","firstIndex","lastPanelAfterNeed","atLastPanelAfterNeed","cameraPrev","checkingIndex","atFirstPanel","prevIndex","panelLeft","firstPanelAfterNeed","atFirstPanelAfterNeed","params","alreadyTriggered","some","hasHandler","hasOn","tid","cid","random","category","action","label","innerWidth","innerHeight","screen","collectInfos","location","href","navigator","language","toLowerCase","charset","inputEncoding","characterSet","referrer","title","JSON","stringify","req","XMLHttpRequest","open","send","eventName","canceled","trigger","merge","previousPosition","inputOffset","cameraChange","currentDirection","querySelector","nodeName","nodeType","currentOptions","Viewport","listenInput","listenResize","sendEvent","focus","possiblePositions","nearestPosition","current","includeClone","getOutsetProgress","outerHTML","restore","removeEventListener","diffInfo","list","maintained","added","changed","newOriginalPanelCount","newCloneCount","prevOriginalPanels","prevClonedPanels","newOriginalElements","newClonedElements","originalMaintained","beforeIdx","afterIdx","originalAdded","addIndex","groupIndex","cloneGroupOffset","prevCloneGroup","newCloneGroup","cloneExternal","newPanel","getCheckedIndexes","has","replacePanels","eventContext","fire","connectAxesHandler","addEventListener","Flicking","Component","withFlickingMethods"],"mappings":"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"}