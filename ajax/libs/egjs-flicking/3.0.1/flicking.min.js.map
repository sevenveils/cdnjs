{"version":3,"file":"flicking.min.js","sources":["../src/utils.ts","../src/consts.ts","../src/components/Panel.ts","../src/components/PanelManager.ts","../src/states/State.ts","../src/states/IdleState.ts","../src/states/HoldingState.ts","../src/states/DraggingState.ts","../src/states/AnimatingState.ts","../src/states/DisabledState.ts","../src/components/StateMachine.ts","../src/moves/Snap.ts","../src/moves/MoveType.ts","../src/moves/FreeScroll.ts","../src/components/Viewport.ts","../src/Flicking.ts"],"sourcesContent":["import { ElementLike } from \"./types\";\n\nexport function merge(target: object, ...srcs: object[]): object {\n  srcs.forEach(source => {\n    Object.keys(source).forEach(key => {\n      const value = source[key];\n      target[key] = value;\n    });\n  });\n\n  return target;\n}\n\nexport function parseElement(element: ElementLike | ElementLike[]): HTMLElement[] {\n  if (!Array.isArray(element)) {\n    element = [element];\n  }\n\n  const elements: HTMLElement[] = [];\n  element.forEach(el => {\n    if (isString(el)) {\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.innerHTML = el;\n\n      elements.push(...toArray(tempDiv.children) as HTMLElement[]);\n    } else {\n      elements.push(el as HTMLElement);\n    }\n  });\n\n  return elements;\n}\n\n// Check whether browser supports transform: translate3d\n// https://stackoverflow.com/questions/5661671/detecting-transform-translate3d-support\nexport let checkTranslateSupport = () => {\n  const transforms = {\n    webkitTransform: \"-webkit-transform\",\n    msTransform: \"-ms-transform\",\n    MozTransform: \"-moz-transform\",\n    OTransform: \"-o-transform\",\n    transform: \"transform\",\n  };\n\n  const supportedStyle = document.documentElement.style;\n  let transformName = \"\";\n  for (const prefixedTransform in transforms) {\n    if (prefixedTransform in supportedStyle) {\n      transformName = prefixedTransform;\n    }\n  }\n\n  if (!transformName) {\n    throw new Error(\"Browser doesn't support CSS3 2D Transforms.\");\n  }\n\n  const el = document.createElement(\"div\");\n\n  document.documentElement.insertBefore(el, null);\n\n  el.style[transformName] = \"translate3d(1px, 1px, 1px)\";\n  const styleVal = window.getComputedStyle(el).getPropertyValue(transforms[transformName]);\n\n  el.parentElement!.removeChild(el);\n\n  const transformInfo = {\n    name: transformName,\n    has3d: styleVal.length > 0 && styleVal !== \"none\",\n  };\n\n  checkTranslateSupport = () => transformInfo;\n\n  return transformInfo;\n};\nexport function isString(value: any): value is string {\n  return typeof value === \"string\";\n}\n// Get class list of element as string array\nexport function classList(element: HTMLElement): string[] {\n  return element.classList\n    ? toArray(element.classList)\n    : element.className.split(\" \");\n}\n\n// Add class to specified element\nexport function addClass(element: HTMLElement, className: string): void {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    if (element.className.indexOf(className) < 0) {\n      element.className = (`${element.className} ${className}`).replace(/\\s{2,}/g, \" \");\n    }\n  }\n}\n\nexport function applyCSS(element: HTMLElement, cssObj: object): void {\n  Object.keys(cssObj).forEach(property => {\n    element.style[property] = cssObj[property];\n  });\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return Math.max(Math.min(val, max), min);\n}\n\n// Min: inclusive, Max: exclusive\nexport function isBetween(val: number, min: number, max: number) {\n  return val >= min && val <= max;\n}\n\nexport interface ArrayLike<T> {\n  length: number;\n  [index: number]: T;\n}\n\nexport function toArray<T>(iterable: ArrayLike<T>): T[] {\n  return [].slice.call(iterable);\n}\n\nexport function isArray(arr: any): boolean {\n  return arr && arr.constructor === Array;\n}\n\nexport function parseArithmeticExpression(cssValue: number | string, base: number, defaultVal?: number): number {\n  // Set base / 2 to default value, if it's undefined\n  const defaultValue = defaultVal != null ? defaultVal : base / 2;\n  const cssRegex = /(?:(\\+|\\-)\\s*)?(\\d+(?:\\.\\d+)?(%|px)?)/g;\n\n  if (typeof cssValue === \"number\") {\n    return clamp(cssValue, 0, base);\n  }\n\n  let idx = 0;\n  let calculatedValue = 0;\n  let matchResult = cssRegex.exec(cssValue);\n  while (matchResult != null) {\n    let sign = matchResult[1];\n    const value = matchResult[2];\n    const unit = matchResult[3];\n\n    let parsedValue = parseFloat(value);\n\n    if (idx <= 0) {\n      sign = sign || \"+\";\n    }\n\n    // Return default value for values not in good form\n    if (!sign) {\n      return defaultValue;\n    }\n\n    if (unit === \"%\") {\n      parsedValue = (parsedValue / 100) * base;\n    }\n\n    calculatedValue += sign === \"+\"\n      ? parsedValue\n      : -parsedValue;\n\n    // Match next occurrence\n    ++idx;\n    matchResult = cssRegex.exec(cssValue);\n  }\n\n  // None-matched\n  if (idx === 0) {\n    return defaultValue;\n  }\n\n  // Clamp between 0 ~ base\n  return clamp(calculatedValue, 0, base);\n}\n\nexport function getProgress(pos: number, range: number[]) {\n  // start, anchor, end\n  // -1 , 0 , 1\n  const [min, center, max] = range;\n\n  if (pos > center && (max - center)) {\n    // 0 ~ 1\n    return (pos - center) / (max - center);\n  } else if (pos < center && (center - min)) {\n    // -1 ~ 0\n    return (pos - center) / (center - min);\n  } else if (pos !== center && max - min) {\n    return (pos - min) / (max - min);\n  }\n  return 0;\n}\n\nexport function findIndex<T>(iterable: T[], callback: (el: T) => boolean): number {\n  for (let i = 0; i < iterable.length; i += 1) {\n    const element = iterable[i];\n    if (element && callback(element)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n// return [0, 1, ...., max - 1]\nexport function counter(max: number): number[] {\n  const counterArray: number[] = [];\n  for (let i = 0; i < max; i += 1) {\n    counterArray[i] = i;\n  }\n  return counterArray;\n}\n\n// Circulate number between range [min, max]\n/*\n * \"indexed\" means min and max is not same, so if it's true \"min - 1\" should be max\n * While if it's false, \"min - 1\" should be \"max - 1\"\n * use `indexed: true` when it should be used for circulating integers like index\n * or `indexed: false` when it should be used for something like positions.\n */\nexport function circulate(value: number, min: number, max: number, indexed: boolean): number {\n  const size = indexed\n    ? max - min + 1\n    : max - min;\n  if (value < min) {\n    const offset = indexed\n      ? (min - value - 1) % size\n      : (min - value) % size;\n    value = max - offset;\n  } else if (value > max) {\n    const offset = indexed\n      ? (value - max - 1) % size\n      : (value - max) % size;\n    value = min + offset;\n  }\n\n  return value;\n}\n","import { FlickingOptions, EventType, Direction, AxesEventType, StateType, MoveTypeSnapOption, MoveTypeFreeScrollOption } from \"./types\";\nimport { checkTranslateSupport } from \"./utils\";\n\nexport const MOVE_TYPE: {\n  SNAP: \"snap\";\n  FREE_SCROLL: \"freeScroll\";\n} = {\n  SNAP: \"snap\",\n  FREE_SCROLL: \"freeScroll\",\n};\n\nexport const DEFAULT_MOVE_TYPE_OPTIONS: {\n  snap: MoveTypeSnapOption,\n  freeScroll: MoveTypeFreeScrollOption,\n} = {\n  snap: {\n    type: \"snap\",\n    count: 1,\n  },\n  freeScroll: {\n    type: \"freeScroll\",\n  },\n};\n\nexport const DEFAULT_OPTIONS: Readonly<FlickingOptions> = {\n  classPrefix: \"eg-flick\",\n  deceleration: 0.0075,\n  horizontal: true,\n  circular: false,\n  infinite: false,\n  infiniteThreshold: 0,\n  lastIndex: Infinity,\n  threshold: 40,\n  duration: 100,\n  panelEffect: x => 1 - Math.pow(1 - x, 3),\n  defaultIndex: 0,\n  inputType: [\"touch\", \"mouse\"],\n  thresholdAngle: 45,\n  bounce: 10,\n  autoResize: false,\n  adaptive: false,\n  zIndex: 2000,\n  bound: false,\n  overflow: false,\n  hanger: \"50%\",\n  anchor: \"50%\",\n  gap: 0,\n  moveType: DEFAULT_MOVE_TYPE_OPTIONS.snap,\n};\n\nexport const DEFAULT_VIEWPORT_CSS = {\n  position: \"relative\",\n  zIndex: DEFAULT_OPTIONS.zIndex,\n  width: \"100%\",\n  height: \"100%\",\n  // willChange: \"transform\",\n  overflow: \"hidden\",\n};\n\nexport const DEFAULT_CAMERA_CSS = {\n  width: \"100%\",\n  height: \"100%\",\n  willChange: \"transform\",\n};\n\nexport const DEFAULT_PANEL_CSS = {\n  position: \"absolute\",\n};\n\nexport const EVENTS: EventType = {\n  HOLD_START: \"holdStart\",\n  HOLD_END: \"holdEnd\",\n  MOVE_START: \"moveStart\",\n  MOVE: \"move\",\n  MOVE_END: \"moveEnd\",\n  CHANGE: \"change\",\n  RESTORE: \"restore\",\n  SELECT: \"select\",\n  NEED_PANEL: \"needPanel\",\n};\n\nexport const AXES_EVENTS: AxesEventType = {\n  HOLD: \"hold\",\n  CHANGE: \"change\",\n  RELEASE: \"release\",\n  ANIMATION_END: \"animationEnd\",\n  FINISH: \"finish\",\n};\n\nexport const STATE_TYPE: StateType = {\n  IDLE: 0,\n  HOLDING: 1,\n  DRAGGING: 2,\n  ANIMATING: 3,\n  DISABLED: 4,\n};\n\nexport const DIRECTION: Direction = {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\",\n};\n\nexport const TRANSFORM = checkTranslateSupport();\n","import Viewport from \"./Viewport\";\nimport { OriginalStyle, FlickingPanel, ElementLike } from \"../types\";\nimport { DEFAULT_PANEL_CSS, EVENTS } from \"../consts\";\nimport { addClass, applyCSS, parseArithmeticExpression, parseElement, getProgress } from \"../utils\";\n\nclass Panel implements FlickingPanel {\n  public prevSibling: Panel | null;\n  public nextSibling: Panel | null;\n\n  private element: HTMLElement;\n  private viewport: Viewport;\n  private state: {\n    index: number;\n    position: number;\n    relativeAnchorPosition: number;\n    size: number;\n    isClone: boolean;\n    // Index of cloned panel, zero-based integer(original: -1, cloned: [0, 1, 2, ...])\n    // if cloneIndex is 0, that means it's first cloned panel of original panel\n    cloneIndex: number;\n    originalStyle: OriginalStyle;\n    clonedPanels: Panel[];\n    cachedBbox: ClientRect | null;\n  };\n  private original?: Panel;\n\n  public constructor(\n    element: HTMLElement,\n    index: number,\n    viewport: Viewport,\n  ) {\n    this.element = element;\n    this.viewport = viewport;\n    this.prevSibling = null;\n    this.nextSibling = null;\n\n    this.state = {\n      index,\n      position: 0,\n      relativeAnchorPosition: 0,\n      size: 0,\n      clonedPanels: [],\n      isClone: false,\n      cloneIndex: -1,\n      originalStyle: {\n        className: element.getAttribute(\"class\") || null,\n        style: element.getAttribute(\"style\") || null,\n      },\n      cachedBbox: null,\n    };\n\n    const options = viewport.options;\n\n    if (options.classPrefix) {\n      addClass(element, `${options.classPrefix}-panel`);\n    }\n\n    // Update size info after applying panel css\n    applyCSS(this.element, DEFAULT_PANEL_CSS);\n  }\n\n  public resize(): void {\n    const state = this.state;\n    const options = this.viewport.options;\n    const bbox = this.getBbox();\n\n    state.size = options.horizontal\n      ? bbox.width\n      : bbox.height;\n    state.relativeAnchorPosition = parseArithmeticExpression(options.anchor, state.size);\n\n    if (!state.isClone) {\n      state.clonedPanels.forEach(panel => panel.resize());\n    }\n  }\n\n  public unCacheBbox(): void {\n    this.state.cachedBbox = null;\n  }\n\n  public getProgress() {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const panelCount = viewport.panelManager.getPanelCount();\n    const scrollAreaSize = viewport.getScrollAreaSize();\n\n    const relativeIndex = (options.circular ? Math.floor(this.getPosition() / scrollAreaSize) * panelCount : 0) + this.getIndex();\n    const progress = relativeIndex - viewport.getCurrentProgress();\n\n    return progress;\n  }\n\n  public getOutsetProgress() {\n    const viewport = this.viewport;\n    const outsetRange = [\n      -this.getSize(),\n      viewport.getRelativeHangerPosition() - this.getRelativeAnchorPosition(),\n      viewport.getSize(),\n    ];\n    const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n    const outsetProgress = getProgress(relativePanelPosition, outsetRange);\n\n    return outsetProgress;\n  }\n\n  public getVisibleRatio() {\n    const viewport = this.viewport;\n    const panelSize = this.getSize();\n    const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n    const rightRelativePanelPosition = relativePanelPosition + panelSize;\n\n    const visibleSize = Math.min(viewport.getSize(), rightRelativePanelPosition) - Math.max(relativePanelPosition, 0);\n    const visibleRatio = visibleSize >= 0\n      ? visibleSize / panelSize\n      : 0;\n\n    return visibleRatio;\n  }\n\n  public focus(duration?: number): void {\n    const viewport = this.viewport;\n    const currentPanel = viewport.getCurrentPanel();\n    const hangerPosition = viewport.getHangerPosition();\n    const anchorPosition = this.getAnchorPosition();\n    if (hangerPosition === anchorPosition || !currentPanel) {\n      return;\n    }\n\n    const currentPosition = currentPanel.getPosition();\n    const eventType = currentPosition === this.getPosition()\n      ? \"\"\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(this, viewport.findEstimatedPosition(this), eventType, null, duration);\n  }\n\n  public update(updateFunction: (element: HTMLElement) => any): void {\n    this.getIdenticalPanels()\n      .forEach(eachPanel => {\n        updateFunction(eachPanel.getElement());\n        eachPanel.unCacheBbox();\n      });\n    this.viewport.resize();\n  }\n\n  public prev(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const prevSibling = this.prevSibling;\n\n    if (!prevSibling) {\n      return null;\n    }\n\n    const currentIndex = this.getIndex();\n    const currentPosition = this.getPosition();\n    const prevPanelIndex = prevSibling.getIndex();\n    const prevPanelPosition = prevSibling.getPosition();\n    const prevPanelSize = prevSibling.getSize();\n\n    const hasEmptyPanelBetween = currentIndex - prevPanelIndex > 1;\n    const notYetMinPanel = options.infinite\n      && currentIndex > 0\n      && prevPanelIndex > currentIndex;\n\n    if (hasEmptyPanelBetween || notYetMinPanel) {\n      // Empty panel exists between\n      return null;\n    }\n\n    const newPosition = currentPosition - prevPanelSize - options.gap;\n\n    let prevPanel = prevSibling;\n    if (prevPanelPosition !== newPosition) {\n      prevPanel = prevSibling.clone(prevSibling.getCloneIndex(), true);\n      prevPanel.setPosition(newPosition, true);\n    }\n\n    return prevPanel;\n  }\n\n  public next(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const nextSibling = this.nextSibling;\n    const lastIndex = viewport.panelManager.getLastIndex();\n\n    if (!nextSibling) {\n      return null;\n    }\n\n    const currentIndex = this.getIndex();\n    const currentPosition = this.getPosition();\n    const nextPanelIndex = nextSibling.getIndex();\n    const nextPanelPosition = nextSibling.getPosition();\n\n    const hasEmptyPanelBetween = nextPanelIndex - currentIndex > 1;\n    const notYetMaxPanel = options.infinite\n      && currentIndex < lastIndex\n      && nextPanelIndex < currentIndex;\n\n    if (hasEmptyPanelBetween || notYetMaxPanel) {\n      return null;\n    }\n\n    const newPosition = currentPosition + this.getSize() + options.gap;\n\n    let nextPanel = nextSibling;\n    if (nextPanelPosition !== newPosition) {\n      nextPanel = nextSibling.clone(nextSibling.getCloneIndex(), true);\n      nextPanel.setPosition(newPosition, true);\n    }\n\n    return nextPanel;\n  }\n\n  public insertBefore(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n    const parsedElements = parseElement(element);\n    const firstPanel = viewport.panelManager.firstPanel()!;\n    const prevSibling = this.prevSibling;\n    // Finding correct inserting index\n    // While it should insert removing empty spaces,\n    // It also should have to be bigger than prevSibling' s index\n    const targetIndex = prevSibling && firstPanel.getIndex() !== this.getIndex()\n      ? Math.max(prevSibling.getIndex() + 1, this.getIndex() - parsedElements.length)\n      : Math.max(this.getIndex() - parsedElements.length, 0);\n\n    return viewport.insert(targetIndex, parsedElements);\n  }\n\n  public insertAfter(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    return this.viewport.insert(this.getIndex() + 1, element);\n  }\n\n  public remove(): FlickingPanel {\n    this.viewport.remove(this.getIndex());\n\n    return this;\n  }\n\n  public destroy(): void {\n    const el = this.element;\n    const originalStyle = this.state.originalStyle;\n\n    originalStyle.className\n      ? el.setAttribute(\"class\", originalStyle.className)\n      : el.removeAttribute(\"class\");\n    originalStyle.style\n      ? el.setAttribute(\"style\", originalStyle.style)\n      : el.removeAttribute(\"style\");\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public getElement(): HTMLElement {\n    return this.element;\n  }\n\n  public getAnchorPosition(): number {\n    return this.state.position + this.state.relativeAnchorPosition;\n  }\n\n  public getRelativeAnchorPosition(): number {\n    return this.state.relativeAnchorPosition;\n  }\n\n  public getIndex(): number {\n    return this.state.index;\n  }\n\n  public getPosition(): number {\n    return this.state.position;\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getBbox(): ClientRect {\n    const state = this.state;\n    if (!state.cachedBbox) {\n      state.cachedBbox = this.element.getBoundingClientRect();\n    }\n    return state.cachedBbox;\n  }\n\n  public isClone(): boolean {\n    return this.state.isClone;\n  }\n\n  public getCloneIndex(): number {\n    return this.state.cloneIndex;\n  }\n\n  public getClonedPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getClonedPanels()\n      : state.clonedPanels;\n  }\n\n  public getIdenticalPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getIdenticalPanels()\n      : [this, ...state.clonedPanels];\n  }\n\n  public getOriginalPanel(): Panel {\n    return this.state.isClone\n      ? this.original!\n      : this;\n  }\n\n  public setIndex(index: number): void {\n    const state = this.state;\n\n    state.index = index;\n    state.clonedPanels.forEach(panel => panel.state.index = index);\n  }\n\n  public setPosition(pos: number, virtual: boolean = false): this {\n    const state = this.state;\n    const options = this.viewport.options;\n    const elementStyle = this.element.style;\n\n    state.position = pos;\n    if (!virtual) {\n      options.horizontal\n        ? elementStyle.left = `${pos}px`\n        : elementStyle.top = `${pos}px`;\n    }\n\n    return this;\n  }\n\n  public clone(cloneIndex: number, virtual: boolean = false): Panel {\n    const state = this.state;\n\n    const cloneElement = virtual\n      ? this.element\n      : this.element.cloneNode(true) as HTMLElement;\n    const clonedPanel = new Panel(cloneElement, state.index, this.viewport);\n    const clonedState = clonedPanel.state;\n\n    clonedPanel.original = this;\n    clonedState.isClone = true;\n    clonedState.cloneIndex = cloneIndex;\n    // Inherit some state values\n    clonedState.size = state.size;\n    clonedState.relativeAnchorPosition = state.relativeAnchorPosition;\n    clonedState.originalStyle = state.originalStyle;\n    clonedState.cachedBbox = state.cachedBbox;\n\n    if (!virtual) {\n      state.clonedPanels.push(clonedPanel);\n    } else {\n      clonedPanel.prevSibling = this.prevSibling;\n      clonedPanel.nextSibling = this.nextSibling;\n    }\n\n    return clonedPanel;\n  }\n\n  public removeElement(): void {\n    const element = this.element;\n    element.parentNode!.removeChild(element);\n\n    // Do the same thing for clones\n    if (!this.state.isClone) {\n      this.removeClonedPanelsAfter(0);\n    }\n  }\n\n  public removeClonedPanelsAfter(start: number): void {\n    const state = this.state;\n    const removingPanels = state.clonedPanels.splice(start);\n\n    removingPanels.forEach(panel => {\n      panel.removeElement();\n    });\n  }\n}\n\nexport default Panel;\n","import Panel from \"./Panel\";\nimport { FlickingOptions } from \"../types\";\nimport { findIndex, counter } from \"../utils\";\n\nclass PanelManager {\n  private cameraElement: HTMLElement;\n  private panels: Panel[];\n  private clones: Panel[][];\n  // index range of existing panels\n  private range: {\n    min: number;\n    max: number;\n  };\n  private length: number;\n  private lastIndex: number;\n  private options: FlickingOptions;\n\n  constructor(\n    cameraElement: HTMLElement,\n    options: FlickingOptions,\n  ) {\n    this.cameraElement = cameraElement;\n    this.panels = [];\n    this.clones = [];\n    this.range = {\n      min: -1,\n      max: -1,\n    };\n    this.length = 0;\n    this.options = options;\n    this.lastIndex = options.lastIndex;\n  }\n\n  public firstPanel(): Panel | undefined {\n    return this.panels[this.range.min];\n  }\n\n  public lastPanel(): Panel | undefined {\n    return this.panels[this.range.max];\n  }\n\n  public allPanels(): ReadonlyArray<Panel> {\n    return [\n      ...this.panels,\n      ...this.clonedPanels(),\n    ];\n  }\n\n  public originalPanels(): ReadonlyArray<Panel> {\n    return this.panels;\n  }\n\n  public clonedPanels(): ReadonlyArray<Panel> {\n    return this.clones.reduce((allClones, clones) => [...allClones, ...clones], []);\n  }\n\n  public has(index: number): boolean {\n    return !!this.panels[index];\n  }\n\n  public get(index: number): Panel | undefined {\n    return this.panels[index];\n  }\n\n  public getPanelCount(): number {\n    return this.length;\n  }\n\n  public getLastIndex(): number {\n    return this.lastIndex;\n  }\n\n  public getRange(): Readonly<{ min: number, max: number }> {\n    return this.range;\n  }\n\n  public getCloneCount(): number {\n    return this.clones.length;\n  }\n\n  public setLastIndex(lastIndex: number): void {\n    this.lastIndex = lastIndex;\n\n    const firstPanel = this.firstPanel();\n    const lastPanel = this.lastPanel();\n\n    if (!firstPanel || !lastPanel) {\n      return; // no meaning of updating range & length\n    }\n\n    // Remove panels above new last index\n    const range = this.range;\n    if (lastPanel.getIndex() > lastIndex) {\n      const removingPanels = this.panels.splice(lastIndex + 1);\n      removingPanels.forEach(panel => panel.removeElement());\n      this.length -= removingPanels.length;\n\n      const firstRemovedPanel = removingPanels.filter(panel => !!panel)[0];\n      const possibleLastPanel = firstRemovedPanel.prevSibling;\n      if (possibleLastPanel) {\n        range.max = possibleLastPanel.getIndex();\n      } else {\n        range.min = -1;\n        range.max = -1;\n      }\n    }\n  }\n\n  public append(newPanels: Panel[]): void {\n    const range = this.range;\n    this.panels.push(...newPanels);\n\n    if (newPanels.length > 0) {\n      range.min = Math.max(0, range.min);\n      range.max += newPanels.length;\n      this.length += newPanels.length;\n    }\n  }\n\n  // Insert at index\n  // Returns pushed elements from index, inserting at 'empty' position doesn't push elements behind it\n  public insert(index: number, newPanels: Panel[]): number {\n    const panels = this.panels;\n    const range = this.range;\n    const cameraElement = this.cameraElement;\n    const isCircular = this.options.circular;\n    const lastIndex = this.lastIndex;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    const fragment = document.createDocumentFragment();\n    newPanels.forEach(panel => fragment.appendChild(panel.getElement()));\n    cameraElement.insertBefore(fragment, siblingElement);\n\n    let pushedIndex = newPanels.length;\n    // Like when setting index 50 while visible panels are 0, 1, 2\n    if (index > range.max) {\n      newPanels.forEach((panel, offset) => {\n        panels[index + offset] = panel;\n      });\n    } else {\n      const panelsAfterIndex = panels.slice(index, index + newPanels.length);\n      // Find empty from beginning\n      let emptyPanelCount = findIndex(panelsAfterIndex, panel => !!panel);\n      if (emptyPanelCount < 0) {\n        // All empty\n        emptyPanelCount = panelsAfterIndex.length;\n      }\n      pushedIndex = newPanels.length - emptyPanelCount;\n\n      // Insert removing empty panels\n      panels.splice(index, emptyPanelCount, ...newPanels);\n\n      // Remove panels after last index\n      if (panels.length > lastIndex + 1) {\n        const removedPanels = panels.splice(lastIndex + 1)\n          .filter(panel => Boolean(panel));\n        removedPanels.forEach(panel => panel.removeElement());\n        this.length -= removedPanels.length;\n\n        // Find first\n        const newLastIndex = lastIndex - findIndex(this.panels.concat().reverse(), panel => !!panel);\n\n        // Can be filled with empty after newLastIndex\n        this.panels.splice(newLastIndex + 1);\n        this.range.max = newLastIndex;\n      }\n    }\n\n    // Update index of previous panels\n    if (pushedIndex > 0) {\n      panels.slice(index + newPanels.length).forEach(panel => {\n        panel.setIndex(panel.getIndex() + pushedIndex);\n      });\n    }\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length - pushedIndex, nextSibling);\n    }\n\n    // Update state\n    this.length += newPanels.length;\n    this.updateIndex(index);\n\n    return pushedIndex;\n  }\n\n  public replace(index: number, newPanels: Panel[]): void {\n    const panels = this.panels;\n    const range = this.range;\n    const cameraElement = this.cameraElement;\n    const isCircular = this.options.circular;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index + newPanels.length);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    const fragment = document.createDocumentFragment();\n    newPanels.forEach(panel => fragment.appendChild(panel.getElement()));\n    cameraElement.insertBefore(fragment, siblingElement);\n\n    if (index > range.max) {\n      // Temporarily insert null at index to use splice()\n      (panels[index] as any) = null;\n    }\n\n    const replacedPanels = panels.splice(index, newPanels.length, ...newPanels);\n    const wasNonEmptyCount = replacedPanels.filter(panel => Boolean(panel)).length;\n    replacedPanels.forEach(panel => {\n      if (panel) {\n        panel.removeElement();\n      }\n    });\n\n    // Suppose inserting [1, 2, 3] at 0 position when there were [empty, 1]\n    // So length should be increased by 3(inserting panels) - 1(non-empty panels)\n    this.length += newPanels.length - wasNonEmptyCount;\n    this.updateIndex(index);\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length, nextSibling);\n    }\n  }\n\n  public remove(index: number, deleteCount: number = 1): Panel[] {\n    const isCircular = this.options.circular;\n    const panels = this.panels;\n    const clones = this.clones;\n    // Delete count should be equal or larger than 0\n    deleteCount = Math.max(deleteCount, 0);\n\n    const deletedPanels = panels\n      .splice(index, deleteCount)\n      .filter(panel => !!panel);\n\n    deletedPanels.forEach(panel => {\n      panel.removeElement();\n    });\n\n    if (isCircular) {\n      clones.forEach(cloneSet => {\n        cloneSet.splice(index, deleteCount);\n      });\n    }\n\n    // Update indexes\n    panels\n      .slice(index)\n      .forEach(panel => {\n        panel.setIndex(panel.getIndex() - deleteCount);\n      });\n\n    // Check last panel is empty\n    let lastIndex = panels.length - 1;\n    if (!panels[lastIndex]) {\n      const reversedPanels = panels.concat().reverse();\n      const nonEmptyIndexFromLast = findIndex(reversedPanels, panel => !!panel);\n      lastIndex = nonEmptyIndexFromLast < 0\n        ? -1 // All empty\n        : lastIndex - nonEmptyIndexFromLast;\n\n      // Remove all empty panels from last\n      panels.splice(lastIndex + 1);\n      if (isCircular) {\n        clones.forEach(cloneSet => {\n          cloneSet.splice(lastIndex + 1);\n        });\n      }\n    }\n\n    // Update range & length\n    this.range = {\n      min: findIndex(panels, panel => !!panel),\n      max: lastIndex,\n    };\n    this.length -= deletedPanels.length;\n\n    if (this.length <= 0) {\n      // Reset clones\n      this.clones = [];\n    }\n\n    return deletedPanels;\n  }\n\n  public chainAllPanels() {\n    const allPanels = this.allPanels().filter(panel => !!panel);\n    const allPanelsCount = allPanels.length;\n\n    if (allPanelsCount <= 0) {\n      return;\n    }\n\n    allPanels.forEach((panel, idx) => {\n      const prevPanel = (idx > 0)\n        ? allPanels[idx - 1]\n        : null;\n\n      const nextPanel = (idx < allPanelsCount - 1)\n        ? allPanels[idx + 1]\n        : null;\n\n      panel.prevSibling = prevPanel;\n      panel.nextSibling = nextPanel;\n    });\n\n    if (this.options.circular) {\n      const firstPanel = allPanels[0];\n      const lastPanel = allPanels[allPanelsCount - 1];\n\n      firstPanel.prevSibling = lastPanel;\n      lastPanel.nextSibling = firstPanel;\n    }\n  }\n\n  public insertClones(cloneIndex: number, index: number, clonedPanels: Panel[], deleteCount: number = 0): void {\n    const clones = this.clones;\n    const lastIndex = this.lastIndex;\n\n    if (!clones[cloneIndex]) {\n      const newClones: Panel[] = [];\n      clonedPanels.forEach((panel, offset) => {\n        newClones[index + offset] = panel;\n      });\n\n      clones[cloneIndex] = newClones;\n    } else {\n      const insertTarget = clones[cloneIndex];\n\n      if (index >= insertTarget.length) {\n        clonedPanels.forEach((panel, offset) => {\n          insertTarget[index + offset] = panel;\n        });\n      } else {\n        insertTarget.splice(index, deleteCount, ...clonedPanels);\n        // Remove panels after last index\n        if (clonedPanels.length > lastIndex + 1) {\n          clonedPanels.splice(lastIndex + 1);\n        }\n      }\n    }\n  }\n\n  // clones are operating in set\n  public removeClonesAfter(cloneIndex: number): void {\n    const panels = this.panels;\n    panels.forEach(panel => {\n      panel.removeClonedPanelsAfter(cloneIndex);\n    });\n    this.clones.splice(cloneIndex);\n  }\n\n  // Clear both original & cloned\n  public clear(): void {\n    this.panels.forEach(panel => {\n      panel.removeElement();\n    });\n\n    this.panels = [];\n    this.clones = [];\n    this.length = 0;\n    this.range = {\n      min: -1,\n      max: -1,\n    };\n  }\n\n  public clearClone(): void {\n    this.panels.forEach(panel => {\n      panel.removeClonedPanelsAfter(0);\n    });\n    this.clones = [];\n  }\n\n  public findPanelOf(element: HTMLElement): Panel | undefined {\n    const allPanels = this.allPanels();\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const panelElement = panel.getElement();\n      if (panelElement.contains(element)) {\n        return panel;\n      }\n    }\n  }\n\n  public findFirstPanelFrom(index: number): Panel | undefined {\n    for (const panel of this.panels) {\n      if (panel && panel.getIndex() >= index) {\n        return panel;\n      }\n    }\n  }\n\n  private addNewClones(index: number, originalPanels: Panel[], deleteCount: number, nextSibling: Panel | undefined) {\n    const cameraElement = this.cameraElement;\n    const cloneCount = this.getCloneCount();\n    const lastPanel = this.lastPanel();\n    const lastPanelClones: Panel[] = lastPanel\n      ? lastPanel.getClonedPanels()\n      : [];\n    const nextSiblingClones: Panel[] = nextSibling\n      ? nextSibling.getClonedPanels()\n      : [];\n\n    for (const cloneIndex of counter(cloneCount)) {\n      const cloneNextSibling = nextSiblingClones[cloneIndex];\n      const lastPanelSibling = lastPanelClones[cloneIndex];\n\n      const cloneSiblingElement = cloneNextSibling\n        ? cloneNextSibling.getElement()\n        : lastPanelSibling\n          ? lastPanelSibling.getElement().nextElementSibling\n          : null;\n\n      const newClones = originalPanels.map(panel => {\n        const clone = panel.clone(cloneIndex);\n\n        cameraElement.insertBefore(clone.getElement(), cloneSiblingElement);\n        return clone;\n      });\n\n      this.insertClones(cloneIndex, index, newClones, deleteCount);\n    }\n  }\n\n  private updateIndex(insertingIndex: number) {\n    const panels = this.panels;\n    const range = this.range;\n\n    const newLastIndex = panels.length - 1;\n    if (newLastIndex > range.max) {\n      range.max = newLastIndex;\n    }\n    if (insertingIndex < range.min || range.min < 0) {\n      range.min = insertingIndex;\n    }\n  }\n}\n\nexport default PanelManager;\n","import Panel from \"../components/Panel\";\nimport { ValueOf, Direction, StateType, FlickingContext } from \"../types\";\n\nabstract class State {\n  public delta: number = 0;\n  public direction: ValueOf<Direction> | null = null;\n  public targetPanel: Panel | null = null;\n  public lastPosition: number = 0;\n  public abstract readonly type: ValueOf<StateType>;\n  public abstract readonly holding: boolean;\n  public abstract readonly playing: boolean;\n\n  public onEnter(prevState: State): void {\n    this.delta = prevState.delta;\n    this.direction = prevState.direction;\n    this.targetPanel = prevState.targetPanel;\n    this.lastPosition = prevState.lastPosition;\n  }\n  public onExit(nextState: State): void {\n    // DO NOTHING\n  }\n  public onHold(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onChange(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onRelease(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onAnimationEnd(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onFinish(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n}\n\nexport default State;\n","import State from \"./State\";\nimport { EVENTS, STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass IdleState extends State {\n  public readonly type = STATE_TYPE.IDLE;\n  public readonly holding = false;\n  public readonly playing = false;\n\n  public onEnter() {\n    this.direction = null;\n    this.targetPanel = null;\n    this.delta = 0;\n    this.lastPosition = 0;\n  }\n\n  public onHold(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Shouldn't do any action until any panels on flicking area\n    if (flicking.getPanelCount() <= 0) {\n      transitTo(STATE_TYPE.DISABLED);\n      return;\n    }\n\n    this.lastPosition = viewport.getCameraPosition();\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.HOLDING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  // By methods call\n  public onChange(e: any, context: FlickingContext): void {\n    const { triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.MOVE_START, e, false)\n      .onSuccess(() => {\n        // Trigger AnimatingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.ANIMATING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n}\n\nexport default IdleState;\n","import State from \"./State\";\nimport { STATE_TYPE, EVENTS, DIRECTION } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass HoldingState extends State {\n  public readonly type = STATE_TYPE.HOLDING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  private releaseEvent: any = null;\n\n  public onChange(e: any, context: FlickingContext): void {\n    const { flicking, triggerEvent, transitTo } = context;\n\n    const offset = flicking.options.horizontal\n      ? e.inputEvent.offsetX\n      : e.inputEvent.offsetY;\n    this.direction = offset < 0\n      ? DIRECTION.NEXT\n      : DIRECTION.PREV;\n\n    triggerEvent(EVENTS.MOVE_START, e, true)\n      .onSuccess(() => {\n        // Trigger DraggingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.DRAGGING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { viewport, triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    if (e.delta.flick !== 0) {\n      // Sometimes \"release\" event on axes triggered before \"change\" event\n      // Especially if user flicked panel fast in really short amount of time\n      // if delta is not zero, that means above case happened.\n\n      // Event flow should be HOLD_START -> MOVE_START -> MOVE -> HOLD_END\n      // At least one move event should be included between holdStart and holdEnd\n      e.setTo({ flick: viewport.getCameraPosition() }, 0);\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Can't handle select event here,\n    // As \"finish\" axes event happens\n    this.releaseEvent = e;\n  }\n\n  public onFinish(e: any, { viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Should transite to IDLE state before select event\n    // As user expects hold is already finished\n    transitTo(STATE_TYPE.IDLE);\n\n    if (!this.releaseEvent) {\n      return;\n    }\n\n    // Handle release event here\n    // To prevent finish event called twice\n    const releaseEvent = this.releaseEvent;\n\n    // Static click\n    const clickedElement = releaseEvent.inputEvent.srcEvent.target;\n    const clickedPanel = viewport.panelManager.findPanelOf(clickedElement);\n    const cameraPosition = viewport.getCameraPosition();\n\n    if (clickedPanel) {\n      const clickedPanelPosition = clickedPanel.getPosition();\n      const direction = clickedPanelPosition > cameraPosition\n        ? DIRECTION.NEXT\n        : clickedPanelPosition < cameraPosition\n          ? DIRECTION.PREV\n          : null;\n\n      // Don't provide axes event, to use axes instance instead\n      triggerEvent(EVENTS.SELECT, null, true, {\n        direction, // Direction to the clicked panel\n        index: clickedPanel.getIndex(),\n        panel: clickedPanel,\n      });\n    }\n  }\n}\n\nexport default HoldingState;\n","import State from \"./State\";\nimport { STATE_TYPE, EVENTS, MOVE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass DraggingState extends State {\n  public readonly type = STATE_TYPE.DRAGGING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { flicking, viewport, triggerEvent, transitTo, stopCamera } = context;\n\n    const delta = this.delta;\n    const options = flicking.options;\n    const horizontal = options.horizontal;\n    const moveType = viewport.moveType;\n    const isFreeScroll = moveType.is(MOVE_TYPE.FREE_SCROLL);\n    const inputEvent = e.inputEvent;\n\n    const velocity = horizontal\n      ? inputEvent.velocityX\n      : inputEvent.velocityY;\n    const inputDelta = horizontal\n      ? inputEvent.deltaX\n      : inputEvent.deltaY;\n    const isNextDirection = Math.abs(velocity) > 1\n      ? velocity < 0\n      : Math.abs(delta) > 0\n        ? delta > 0\n        : inputDelta < 0;\n\n    const swipeDistance = Math.max(Math.abs(delta), Math.abs(inputDelta));\n    const swipeAngle = inputEvent.deltaX\n      ? Math.abs(180 * Math.atan(inputEvent.deltaY / inputEvent.deltaX) / Math.PI)\n      : 90;\n    const belowAngleThreshold = horizontal\n      ? swipeAngle <= options.thresholdAngle\n      : swipeAngle > options.thresholdAngle;\n    const overThreshold = swipeDistance >= options.threshold\n      && belowAngleThreshold;\n\n    // Update last position to cope with Axes's animating behavior\n    // Axes uses start position when animation start\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    const targetPanel = this.targetPanel;\n    if (!overThreshold && targetPanel) {\n      // Interrupted while animating\n      const destPos = isFreeScroll\n        ? e.destPos.flick\n        : viewport.findEstimatedPosition(targetPanel);\n      viewport.moveTo(targetPanel, destPos, \"\", e);\n      transitTo(STATE_TYPE.ANIMATING);\n      return;\n    }\n\n    const currentPanel = viewport.getCurrentPanel();\n    const nearestPanel = viewport.getNearestPanel();\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      e.stop();\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    const moveTypeContext = {\n      viewport,\n      axesEvent: e,\n      swipeDistance,\n      isNextDirection,\n    };\n\n    const destInfo = overThreshold\n      ? moveType.findTargetPanel(moveTypeContext)\n      : moveType.findRestorePanel(moveTypeContext);\n\n    viewport.moveTo(\n      destInfo.panel,\n      destInfo.destPos,\n      destInfo.eventType,\n      e,\n      destInfo.duration,\n    ).onSuccess(() => {\n      transitTo(STATE_TYPE.ANIMATING);\n    }).onStopped(() => {\n      transitTo(STATE_TYPE.DISABLED);\n      stopCamera(e);\n    });\n  }\n}\n\nexport default DraggingState;\n","import State from \"./State\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext } from \"../types\";\nimport { circulate } from \"../utils\";\n\nclass AnimatingState extends State {\n  public readonly type = STATE_TYPE.ANIMATING;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onHold(e: any, { viewport, triggerEvent, transitTo }: FlickingContext): void {\n    const options = viewport.options;\n    const scrollArea = viewport.getScrollArea();\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    const loopCount = Math.floor((this.lastPosition + this.delta - scrollArea.prev) / scrollAreaSize);\n\n    const targetPanel = this.targetPanel;\n    if (options.circular && loopCount !== 0 && targetPanel) {\n      const cloneCount = viewport.panelManager.getCloneCount();\n      const originalTargetPosition = targetPanel.getPosition();\n\n      // cloneIndex is from -1 to cloneCount - 1\n      const newCloneIndex = circulate(targetPanel.getCloneIndex() - loopCount, -1, cloneCount - 1, true);\n      const newTargetPosition = originalTargetPosition - loopCount * scrollAreaSize;\n      const newTargetPanel = targetPanel.getIdenticalPanels()[newCloneIndex + 1].clone(newCloneIndex, true);\n\n      // Set new target panel considering looped count\n      newTargetPanel.setPosition(newTargetPosition, true);\n      this.targetPanel = newTargetPanel;\n    }\n\n    // Reset last position and delta\n    this.delta = 0;\n    this.lastPosition = viewport.getCameraPosition();\n\n    // Update current panel as current nearest panel\n    viewport.setCurrentPanel(viewport.getNearestPanel()!);\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.DRAGGING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onFinish(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext) {\n    const isTrusted = e && e.isTrusted;\n\n    viewport.options.bound\n      ? viewport.setCurrentPanel(this.targetPanel!)\n      : viewport.setCurrentPanel(viewport.getNearestPanel()!);\n    transitTo(STATE_TYPE.IDLE);\n    triggerEvent(EVENTS.MOVE_END, e, isTrusted, {\n      direction: this.direction,\n    });\n\n    if (flicking.options.adaptive) {\n      viewport.updateAdaptiveSize();\n    }\n  }\n}\n\nexport default AnimatingState;\n","import State from \"./State\";\nimport { STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass DisabledState extends State {\n  public readonly type = STATE_TYPE.DISABLED;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onAnimationEnd(e: any, { transitTo }: FlickingContext): void {\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onChange(e: any, { viewport, transitTo }: FlickingContext): void {\n    // Can stop Axes's change event\n    e.stop();\n\n    // Should update axes position as it's already changed at this moment\n    viewport.updateAxesPosition(viewport.getCameraPosition());\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onRelease(e: any, { transitTo }: FlickingContext): void {\n    // This is needed when stopped hold start event\n    if (e.delta.flick === 0) {\n      transitTo(STATE_TYPE.IDLE);\n    }\n  }\n}\n\nexport default DisabledState;\n","import State from \"../states/State\";\nimport { AxesEventType, ValueOf, FlickingContext, StateType } from \"../types\";\nimport { AXES_EVENTS, STATE_TYPE } from \"../consts\";\nimport IdleState from \"../states/IdleState\";\nimport HoldingState from \"../states/HoldingState\";\nimport DraggingState from \"../states/DraggingState\";\nimport AnimatingState from \"../states/AnimatingState\";\nimport DisabledState from \"../states/DisabledState\";\n\nclass StateMachine {\n  private state: State = new IdleState();\n\n  public fire(eventType: ValueOf<AxesEventType>, e: any, context: FlickingContext) {\n    const currentState = this.state;\n    switch (eventType) {\n      case AXES_EVENTS.HOLD:\n        currentState.onHold(e, context);\n        break;\n      case AXES_EVENTS.CHANGE:\n        currentState.onChange(e, context);\n        break;\n      case AXES_EVENTS.RELEASE:\n        currentState.onRelease(e, context);\n        break;\n      case AXES_EVENTS.ANIMATION_END:\n        currentState.onAnimationEnd(e, context);\n        break;\n      case AXES_EVENTS.FINISH:\n        currentState.onFinish(e, context);\n        break;\n    }\n  }\n\n  public getState(): State {\n    return this.state;\n  }\n\n  public transitTo = (nextStateType: ValueOf<StateType>): State => {\n    const currentState = this.state;\n\n    if (currentState.type !== nextStateType) {\n      let nextState: State;\n\n      switch (nextStateType) {\n        case STATE_TYPE.IDLE:\n          nextState = new IdleState();\n          break;\n        case STATE_TYPE.HOLDING:\n          nextState = new HoldingState();\n          break;\n        case STATE_TYPE.DRAGGING:\n          nextState = new DraggingState();\n          break;\n        case STATE_TYPE.ANIMATING:\n          nextState = new AnimatingState();\n          break;\n        case STATE_TYPE.DISABLED:\n          nextState = new DisabledState();\n          break;\n      }\n\n      currentState.onExit(nextState!);\n      nextState!.onEnter(currentState);\n\n      this.state = nextState!;\n    }\n    return this.state;\n  }\n}\n\nexport default StateMachine;\n","import MoveType from \"./MoveType\";\nimport { MOVE_TYPE, EVENTS } from \"../consts\";\nimport { MoveTypeContext, DestinationInfo } from \"../types\";\nimport { clamp } from \"../utils\";\n\nclass Snap extends MoveType {\n  protected readonly type: string = MOVE_TYPE.SNAP;\n  protected count: number;\n\n  constructor(count: number) {\n    super();\n    this.count = count;\n  }\n\n  public findTargetPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport, axesEvent, swipeDistance } = ctx;\n    const snapCount = this.count;\n    const eventDelta = Math.abs(axesEvent.delta.flick);\n    const currentPanel = viewport.getCurrentPanel()!;\n    const nearestPanel = viewport.getNearestPanel()!;\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n\n    // This can happen when bounce is 0\n    const shouldMoveWhenBounceIs0 = viewport.canSetBoundMode()\n      && (nearestPanel.getIndex() === currentPanel.getIndex());\n    const shouldMoveToAdjacent = !viewport.isOutOfBound()\n      && (swipeDistance <= minimumDistanceToChange || shouldMoveWhenBounceIs0);\n\n    if (snapCount > 1 && eventDelta > minimumDistanceToChange) {\n      return this.findSnappedPanel(ctx);\n    } else if (shouldMoveToAdjacent) {\n      return this.findAdjacentPanel(ctx);\n    } else {\n      return {\n        panel: nearestPanel,\n        duration: viewport.options.duration,\n        destPos: viewport.findEstimatedPosition(nearestPanel),\n        eventType: swipeDistance <= minimumDistanceToChange\n          ? EVENTS.RESTORE\n          : EVENTS.CHANGE,\n      };\n    }\n  }\n\n  protected findSnappedPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { axesEvent, viewport, isNextDirection } = ctx;\n\n    const snapCount = this.count;\n    const options = viewport.options;\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    const halfGap = options.gap / 2;\n    const estimatedHangerPos = axesEvent.destPos.flick + viewport.getRelativeHangerPosition();\n    let panelToMove = viewport.getNearestPanel()!;\n    let cycleIndex = panelToMove.getCloneIndex() + 1; // 0(original) or 1(clone)\n    let passedPanelCount = 0;\n\n    while (passedPanelCount < snapCount) {\n      const siblingPanel = isNextDirection\n        ? panelToMove.nextSibling\n        : panelToMove.prevSibling;\n      if (!siblingPanel) {\n        break;\n      }\n\n      const panelIndex = panelToMove.getIndex();\n      const siblingIndex = siblingPanel.getIndex();\n      if ((isNextDirection && siblingIndex <= panelIndex)\n        || (!isNextDirection && siblingIndex >= panelIndex)\n      ) {\n        cycleIndex = isNextDirection\n          ? cycleIndex + 1\n          : cycleIndex - 1;\n      }\n      panelToMove = siblingPanel;\n      passedPanelCount += 1;\n\n      // Since panlToMove holds also cloned panels, we should use original panel's position\n      const originalPanel = panelToMove.getOriginalPanel();\n      const panelPosition = originalPanel.getPosition() + cycleIndex * scrollAreaSize;\n      const panelSize = originalPanel.getSize();\n\n      const panelNextPosition = panelPosition + panelSize + halfGap;\n      const panelPrevPosition = panelPosition - halfGap;\n\n      // Current panelToMove contains destPos\n      if (\n        (isNextDirection && panelNextPosition > estimatedHangerPos)\n        || (!isNextDirection && panelPrevPosition < estimatedHangerPos)\n      ) {\n        break;\n      }\n    }\n\n    const originalPosition = panelToMove.getOriginalPanel().getPosition();\n\n    panelToMove = panelToMove.clone(panelToMove.getCloneIndex(), true);\n    panelToMove.setPosition(originalPosition + cycleIndex * scrollAreaSize, true);\n\n    const defaultDuration = viewport.options.duration;\n    const duration = clamp(axesEvent.duration, defaultDuration, defaultDuration * passedPanelCount);\n\n    return {\n      panel: panelToMove,\n      destPos: viewport.findEstimatedPosition(panelToMove),\n      duration,\n      eventType: passedPanelCount > 0\n        ? EVENTS.CHANGE\n        : EVENTS.RESTORE,\n    };\n  }\n\n  private findAdjacentPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentIndex = viewport.getCurrentIndex();\n    const currentPanel = viewport.panelManager.get(currentIndex)!;\n    const hangerPosition = viewport.getHangerPosition();\n\n    const firstClonedPanel = currentPanel.getIdenticalPanels()[1];\n    const lapped = options.circular\n      && (Math.abs(currentPanel.getAnchorPosition() - hangerPosition)\n        > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition));\n\n    // If lapped in circular mode, use first cloned panel as base panel\n    const basePanel = lapped\n      ? firstClonedPanel\n      : currentPanel;\n    const basePosition = basePanel.getPosition();\n\n    const adjacentPanel = isNextDirection\n      ? basePanel.nextSibling\n      : basePanel.prevSibling;\n\n    const eventType = adjacentPanel\n      ? EVENTS.CHANGE\n      : EVENTS.RESTORE;\n    const panelToMove = adjacentPanel\n      ? adjacentPanel\n      : basePanel;\n    const targetRelativeAnchorPosition = panelToMove.getRelativeAnchorPosition();\n\n    const estimatedPanelPosition = options.circular\n      ? isNextDirection\n        ? basePosition + basePanel.getSize() + targetRelativeAnchorPosition + options.gap\n        : basePosition - (panelToMove.getSize() - targetRelativeAnchorPosition) - options.gap\n      : panelToMove.getAnchorPosition();\n    const estimatedPosition = estimatedPanelPosition - viewport.getRelativeHangerPosition();\n\n    return {\n      panel: panelToMove,\n      destPos: estimatedPosition,\n      duration: options.duration,\n      eventType,\n    };\n  }\n}\n\nexport default Snap;\n","import { MoveTypeStringOption, MoveTypeContext, DestinationInfo } from \"../types\";\nimport Panel from \"../components/Panel\";\nimport { EVENTS } from \"../consts\";\n\nabstract class MoveType {\n  protected readonly abstract type: string;\n\n  public abstract findTargetPanel(ctx: MoveTypeContext): DestinationInfo;\n\n  public is(type: MoveTypeStringOption): boolean {\n    return type === this.type;\n  }\n\n  public findRestorePanel(ctx: MoveTypeContext): DestinationInfo {\n    const viewport = ctx.viewport;\n    const options = viewport.options;\n\n    const panel = options.circular\n      ? this.findRestorePanelInCircularMode(ctx)\n      : viewport.getCurrentPanel()!;\n\n    return {\n      panel,\n      destPos: viewport.findEstimatedPosition(panel),\n      duration: options.duration,\n      eventType: EVENTS.RESTORE,\n    };\n  }\n\n  // Calculate minimum distance to \"change\" panel\n  protected calcBrinkOfChange(ctx: MoveTypeContext): number {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentPanel = viewport.getCurrentPanel()!;\n    const halfGap = options.gap / 2;\n\n    const relativeAnchorPosition = currentPanel.getRelativeAnchorPosition();\n\n    // Minimum distance needed to decide prev/next panel as nearest\n    /*\n     * |  Prev  |     Next     |\n     * |--------|--------------|\n     * [][      |<-Anchor    ][] <- Panel + Half-Gap\n     */\n    let minimumDistanceToChange = isNextDirection\n      ? currentPanel.getSize() - relativeAnchorPosition + halfGap\n      : relativeAnchorPosition + halfGap;\n\n    minimumDistanceToChange = Math.max(minimumDistanceToChange, options.threshold);\n\n    return minimumDistanceToChange;\n  }\n\n  private findRestorePanelInCircularMode(ctx: MoveTypeContext): Panel {\n    const viewport = ctx.viewport;\n    const originalPanel = viewport.getCurrentPanel()!.getOriginalPanel();\n    const hangerPosition = viewport.getHangerPosition();\n\n    const firstClonedPanel = originalPanel.getIdenticalPanels()[1];\n    const lapped = Math.abs(originalPanel.getAnchorPosition() - hangerPosition)\n      > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition);\n\n    return (!ctx.isNextDirection && lapped)\n      ? firstClonedPanel\n      : originalPanel;\n  }\n}\n\nexport default MoveType;\n","import Snap from \"./Snap\";\nimport { MOVE_TYPE, EVENTS } from \"../consts\";\nimport { MoveTypeContext, DestinationInfo } from \"../types\";\nimport { circulate } from \"../utils\";\n\nclass FreeScroll extends Snap {\n  protected readonly type: string = MOVE_TYPE.FREE_SCROLL;\n\n  constructor() {\n    // Set snap count to Infinity\n    super(Infinity);\n  }\n\n  public findTargetPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { axesEvent, viewport, swipeDistance } = ctx;\n    const destPos = axesEvent.destPos.flick;\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n\n    const eventDelta = Math.abs(axesEvent.delta.flick);\n    if (eventDelta > minimumDistanceToChange) {\n      const destInfo = super.findSnappedPanel(ctx);\n      destInfo.destPos = destPos;\n      destInfo.eventType = destInfo.eventType === EVENTS.RESTORE\n        ? \"\"\n        : EVENTS.CHANGE;\n\n      return destInfo;\n    } else {\n      const scrollArea = viewport.getScrollArea();\n      const estimatedPosition = circulate(destPos, scrollArea.prev, scrollArea.next, false)\n        + viewport.getRelativeHangerPosition();\n\n      return {\n        panel: viewport.findNearestPanelAt(estimatedPosition)!,\n        destPos,\n        duration: viewport.options.duration,\n        eventType: swipeDistance > minimumDistanceToChange\n          ? EVENTS.CHANGE\n          : \"\",\n      };\n    }\n  }\n\n  public findRestorePanel(ctx: MoveTypeContext): DestinationInfo {\n    return this.findTargetPanel(ctx);\n  }\n\n  protected calcBrinkOfChange(ctx: MoveTypeContext): number {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentPanel = viewport.getCurrentPanel()!;\n    const halfGap = options.gap / 2;\n\n    const lastPosition = viewport.stateMachine.getState().lastPosition;\n    const currentPanelPosition = currentPanel.getPosition();\n\n    // As camera can stop anywhere in free scroll mode,\n    // minimumDistanceToChange should be calculated differently.\n    // Ref #191(https://github.com/naver/egjs-flicking/issues/191)\n    const lastHangerPosition = lastPosition + viewport.getRelativeHangerPosition();\n\n    let minimumDistanceToChange = isNextDirection\n      ? currentPanelPosition + currentPanel.getSize() - lastHangerPosition + halfGap\n      : lastHangerPosition - currentPanelPosition + halfGap;\n\n    minimumDistanceToChange = Math.max(minimumDistanceToChange, options.threshold);\n\n    return minimumDistanceToChange;\n  }\n}\n\nexport default FreeScroll;\n","import Axes, { PanInput } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport Panel from \"./Panel\";\nimport PanelManager from \"./PanelManager\";\nimport StateMachine from \"./StateMachine\";\nimport MoveType from \"../moves/MoveType\";\nimport { FlickingOptions, FlickingPanel, FlickingStatus, ElementLike, EventType, TriggerCallback, NeedPanelEvent, FlickingEvent, MoveTypeObjectOption } from \"../types\";\nimport { DEFAULT_VIEWPORT_CSS, DEFAULT_CAMERA_CSS, TRANSFORM, DEFAULT_OPTIONS, EVENTS, DIRECTION, STATE_TYPE, MOVE_TYPE } from \"../consts\";\nimport { clamp, applyCSS, toArray, parseArithmeticExpression, isBetween, isArray, parseElement } from \"../utils\";\nimport Snap from \"../moves/Snap\";\nimport FreeScroll from \"../moves/FreeScroll\";\n\nexport default class Viewport {\n  public options: FlickingOptions;\n  public stateMachine: StateMachine;\n  public panelManager: PanelManager;\n  public moveType: MoveType;\n\n  private flicking: Flicking;\n  private axes: Axes;\n  private panInput: PanInput;\n\n  private viewportElement: HTMLElement;\n  private cameraElement: HTMLElement;\n\n  private triggerEvent: Flicking[\"triggerEvent\"];\n  private axesHandlers: {[key: string]: any};\n\n  private currentPanel: Panel | undefined;\n  private nearestPanel: Panel | undefined;\n\n  private state: {\n    size: number;\n    position: number;\n    relativeHangerPosition: number;\n    scrollArea: {\n      prev: number;\n      next: number;\n    };\n    translate: {\n      name: string,\n      has3d: boolean,\n    };\n    infiniteThreshold: number;\n    checkedIndexes: Array<[number, number]>;\n  };\n\n  constructor(\n    flicking: Flicking,\n    viewportElement: HTMLElement,\n    cameraElement: HTMLElement,\n    options: FlickingOptions,\n    triggerEvent: Flicking[\"triggerEvent\"],\n  ) {\n    this.flicking = flicking;\n    this.viewportElement = viewportElement;\n    this.cameraElement = cameraElement;\n    this.triggerEvent = triggerEvent;\n\n    this.state = {\n      size: 0,\n      position: 0,\n      relativeHangerPosition: 0,\n      scrollArea: {\n        prev: 0,\n        next: 0,\n      },\n      translate: TRANSFORM,\n      infiniteThreshold: 0,\n      checkedIndexes: [],\n    };\n    this.options = options;\n    this.stateMachine = new StateMachine();\n    this.panelManager = new PanelManager(cameraElement, options);\n\n    this.build();\n  }\n\n  public moveTo(\n    panel: Panel,\n    destPos: number,\n    eventType: EventType[\"CHANGE\"] | EventType[\"RESTORE\"] | \"\",\n    axesEvent: any,\n    duration: number = this.options.duration,\n  ): TriggerCallback {\n    const state = this.state;\n    const currentState = this.stateMachine.getState();\n    const currentPosition = state.position;\n\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n    const direction = destPos === currentPosition\n      ? null\n      : destPos > currentPosition\n        ? DIRECTION.NEXT\n        : DIRECTION.PREV;\n\n    let eventResult: TriggerCallback;\n    if (eventType === EVENTS.CHANGE) {\n      eventResult = this.triggerEvent(EVENTS.CHANGE, axesEvent, isTrusted, {\n        index: panel.getIndex(),\n        panel,\n        direction,\n      });\n    } else if (eventType === EVENTS.RESTORE) {\n      eventResult = this.triggerEvent(EVENTS.RESTORE, axesEvent, isTrusted);\n    } else {\n      eventResult = {\n        onSuccess(callback: () => void): TriggerCallback {\n          callback();\n          return this;\n        },\n        onStopped(): TriggerCallback {\n          return this;\n        },\n      };\n    }\n\n    eventResult.onSuccess(() => {\n      currentState.delta = 0;\n      currentState.lastPosition = this.getCameraPosition();\n      currentState.targetPanel = panel;\n      currentState.direction = destPos === currentPosition\n        ? null\n        : destPos > currentPosition\n            ? DIRECTION.NEXT\n            : DIRECTION.PREV;\n\n      if (destPos === currentPosition) {\n        // no move\n        this.nearestPanel = panel;\n        this.currentPanel = panel;\n      }\n\n      if (axesEvent && axesEvent.setTo) {\n        // freeScroll only occurs in release events\n        axesEvent.setTo({ flick: destPos }, duration);\n      } else {\n        this.axes.setTo({ flick: destPos }, duration);\n      }\n    });\n\n    return eventResult;\n  }\n\n  public moveCamera(pos: number, axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const transform = state.translate.name;\n\n    // Update position & nearestPanel\n    state.position = pos;\n    this.nearestPanel = this.findNearestPanel();\n\n    const nearestPanel = this.nearestPanel;\n    const originalNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n\n    this.checkNeedPanel(axesEvent);\n\n    // Possibly modified after need panel, if it's looped\n    const modifiedNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n\n    pos += (modifiedNearestPosition - originalNearestPosition);\n    state.position = pos;\n\n    const moveVector = options.horizontal\n      ? [-pos, 0] : [0, -pos];\n    const moveCoord = moveVector.map(coord => `${Math.round(coord)}px`).join(\", \");\n\n    this.cameraElement.style[transform] = state.translate.has3d\n      ? `translate3d(${moveCoord}, 0px)`\n      : `translate(${moveCoord})`;\n  }\n\n  public stopCamera = (axesEvent: any): void => {\n    if (axesEvent && axesEvent.setTo) {\n      axesEvent.setTo({ flick: this.state.position }, 0);\n    }\n\n    this.stateMachine.transitTo(STATE_TYPE.IDLE);\n  }\n\n  public resize(): void {\n    const panelManager = this.panelManager;\n\n    this.updateSize();\n    this.updateOriginalPanelPositions();\n    this.updateAdaptiveSize();\n    this.updateScrollArea();\n\n    // Clone panels in circular mode\n    if (this.options.circular && panelManager.getPanelCount() > 0) {\n      this.clonePanels();\n      this.updateClonedPanelPositions();\n    }\n\n    panelManager.chainAllPanels();\n    this.updateCameraPosition();\n  }\n  // Find nearest anchor from current hanger position\n  public findNearestPanel(): Panel | undefined {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const hangerPosition = this.getHangerPosition();\n\n    if (this.isOutOfBound()) {\n      const position = state.position;\n\n      return position <= state.scrollArea.prev\n        ? panelManager.firstPanel()\n        : panelManager.lastPanel();\n    }\n\n    return this.findNearestPanelAt(hangerPosition);\n  }\n\n  public findNearestPanelAt(position: number): Panel | undefined {\n    const panelManager = this.panelManager;\n\n    const allPanels = panelManager.allPanels();\n    let minimumDistance = Infinity;\n    let nearestPanel: Panel | undefined;\n\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const prevPosition = panel.getPosition();\n      const nextPosition = prevPosition + panel.getSize();\n\n      // Use shortest distance from panel's range\n      const distance = isBetween(position, prevPosition, nextPosition)\n        ? 0\n        : Math.min(\n          Math.abs(prevPosition - position),\n          Math.abs(nextPosition - position),\n        );\n\n      if (distance > minimumDistance) {\n        break;\n      } else if (distance === minimumDistance) {\n        const minimumAnchorDistance = Math.abs(position - nearestPanel!.getAnchorPosition());\n        const anchorDistance = Math.abs(position - panel.getAnchorPosition());\n\n        if (anchorDistance > minimumAnchorDistance) {\n          break;\n        }\n      }\n\n      minimumDistance = distance;\n      nearestPanel = panel;\n    }\n\n    return nearestPanel;\n  }\n\n  public findNearestIdenticalPanel(panel: Panel): Panel {\n    let nearest = panel;\n    let shortestDistance = Infinity;\n    const hangerPosition = this.getHangerPosition();\n\n    const identicals = panel.getIdenticalPanels();\n    identicals.forEach(identical => {\n      const anchorPosition = identical.getAnchorPosition();\n      const distance = Math.abs(anchorPosition - hangerPosition);\n\n      if (distance < shortestDistance) {\n        nearest = identical;\n        shortestDistance = distance;\n      }\n    });\n\n    return nearest;\n  }\n\n  // Find shortest camera position that distance is minimum\n  public findShortestPositionToPanel(panel: Panel): number {\n    const state = this.state;\n    const options = this.options;\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = this.getHangerPosition();\n    const distance = Math.abs(hangerPosition - anchorPosition);\n    const scrollAreaSize = state.scrollArea.next - state.scrollArea.prev;\n\n    if (!options.circular) {\n      const position = anchorPosition - state.relativeHangerPosition;\n      return this.canSetBoundMode()\n        ? clamp(position, state.scrollArea.prev, state.scrollArea.next)\n        : position;\n    } else {\n      // If going out of viewport border is more efficient way of moving, choose that position\n      return distance <= scrollAreaSize - distance\n        ? anchorPosition - state.relativeHangerPosition\n        : anchorPosition > hangerPosition\n          // PREV TO NEXT\n          ? anchorPosition - state.relativeHangerPosition - scrollAreaSize\n          // NEXT TO PREV\n          : anchorPosition - state.relativeHangerPosition + scrollAreaSize;\n    }\n  }\n\n  public findEstimatedPosition(panel: Panel): number {\n    const scrollArea = this.getScrollArea();\n\n    let estimatedPosition = panel.getAnchorPosition() - this.getRelativeHangerPosition();\n    estimatedPosition = this.canSetBoundMode()\n      ? clamp(estimatedPosition, scrollArea.prev, scrollArea.next)\n      : estimatedPosition;\n\n    return estimatedPosition;\n  }\n\n  public enable(): void {\n    this.panInput.enable();\n  }\n\n  public disable(): void {\n    this.panInput.disable();\n  }\n\n  public insert(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const lastIndex = this.panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const state = this.state;\n    const parsedElements = parseElement(element);\n\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    const pushedIndex = this.panelManager.insert(index, panels);\n\n    if (!this.currentPanel) {\n      this.currentPanel = panels[0];\n    }\n\n    // Update checked indexes in infinite mode\n    state.checkedIndexes.forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      // Can fill part of indexes in range\n      if (isBetween(index, min, max)) {\n        // Remove checked index from list\n        state.checkedIndexes.splice(idx, 1);\n      } else if (index < min) {\n        // Push checked index\n        state.checkedIndexes.splice(idx, 1, [min + pushedIndex, max + pushedIndex]);\n      }\n    });\n\n    this.resize();\n\n    return panels;\n  }\n\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const panelManager = this.panelManager;\n    const lastIndex = panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const state = this.state;\n    const parsedElements = parseElement(element);\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    panelManager.replace(index, panels);\n\n    const currentPanel = this.currentPanel;\n    const wasEmpty = !currentPanel;\n    if (wasEmpty) {\n      this.currentPanel = panels[0];\n    } else if (isBetween(currentPanel!.getIndex(), index, index + panels.length - 1)) {\n      // Current panel is replaced\n      this.currentPanel = panelManager.get(currentPanel!.getIndex());\n    }\n\n    // Update checked indexes in infinite mode\n    state.checkedIndexes.forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      // Can fill part of indexes in range\n      if (index <= max && index + panels.length > min) {\n        // Remove checked index from list\n        state.checkedIndexes.splice(idx, 1);\n      }\n    });\n\n    this.resize();\n\n    const isFreeScroll = (this.options.moveType as MoveTypeObjectOption).type === \"freeScroll\";\n    if (isFreeScroll && wasEmpty) {\n      this.moveTo(this.currentPanel!, this.findEstimatedPosition(this.currentPanel!), \"\", null, 0);\n    }\n\n    return panels;\n  }\n\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    // Index should not below 0\n    index = Math.max(index, 0);\n\n    const panelManager = this.panelManager;\n    const currentIndex = this.getCurrentIndex();\n\n    const removedPanels = panelManager.remove(index, deleteCount);\n    if (isBetween(currentIndex, index, index + deleteCount - 1)) {\n      // Current panel is removed\n      // Use panel at removing index - 1 as new current panel if it exists\n      const newCurrentIndex = Math.max(index - 1, panelManager.getRange().min);\n      this.currentPanel = panelManager.get(newCurrentIndex);\n    }\n    this.resize();\n\n    return removedPanels;\n  }\n\n  public updateAdaptiveSize(): void {\n    const options = this.options;\n    const horizontal = options.horizontal;\n    const currentPanel = this.getCurrentPanel();\n\n    if (!currentPanel) {\n      return;\n    }\n\n    let sizeToApply: number;\n    if (options.adaptive) {\n      const panelBbox = currentPanel.getBbox();\n\n      sizeToApply = horizontal ? panelBbox.height : panelBbox.width;\n    } else {\n      // Find minimum height of panels to maximum panel size\n      const maximumPanelSize = this.panelManager.originalPanels().reduce((maximum, panel) => {\n        const panelBbox = panel.getBbox();\n        return Math.max(maximum, horizontal ? panelBbox.height : panelBbox.width);\n      }, 0);\n\n      sizeToApply = maximumPanelSize;\n    }\n\n    const viewportStyle = this.viewportElement.style;\n    if (horizontal) {\n      viewportStyle.height = `${sizeToApply}px`;\n      viewportStyle.minHeight = \"100%\";\n      viewportStyle.width = \"100%\";\n    } else {\n      viewportStyle.width = `${sizeToApply}px`;\n      viewportStyle.minWidth = \"100%\";\n      viewportStyle.height = \"100%\";\n    }\n  }\n\n  public destroy(): void {\n    const viewportElement = this.viewportElement;\n    const wrapper = viewportElement.parentElement;\n\n    wrapper!.removeChild(viewportElement);\n\n    this.axes.destroy();\n    this.panInput.destroy();\n\n    this.panelManager.originalPanels().forEach(panel => {\n      wrapper!.appendChild(panel.getElement());\n      panel.destroy();\n    });\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public restore(status: FlickingStatus): void {\n    const panels = status.panels;\n    const defaultIndex = this.options.defaultIndex;\n    const cameraElement = this.cameraElement;\n    const panelManager = this.panelManager;\n\n    // Restore index\n    panelManager.clear();\n    cameraElement.innerHTML = status.panels.map(panel => panel.html).join(\"\");\n\n    this.createPanels();\n\n    // Reset panel index\n    panelManager.originalPanels().forEach((panel, idx) => {\n      panel.setIndex(panels[idx].index);\n    });\n\n    this.currentPanel = panelManager.get(status.index)\n      || panelManager.get(defaultIndex)\n      || panelManager.firstPanel();\n\n    this.resize();\n\n    this.axes.setTo({ flick: status.position }, 0);\n    this.moveCamera(status.position);\n  }\n\n  public getCurrentPanel(): Panel | undefined {\n    return this.currentPanel;\n  }\n\n  public getCurrentIndex(): number {\n    const currentPanel = this.currentPanel;\n\n    return currentPanel\n      ? currentPanel.getIndex()\n      : -1;\n  }\n\n  public getNearestPanel(): Panel | undefined {\n    return this.nearestPanel;\n  }\n\n  // Get progress from nearest panel\n  public getCurrentProgress(): number {\n    const currentState = this.stateMachine.getState();\n    let nearestPanel = currentState.playing || currentState.holding\n      ? this.nearestPanel\n      : this.currentPanel;\n\n    const panelManager = this.panelManager;\n    if (!nearestPanel) {\n      // There're no panels\n      return NaN;\n    }\n    const {prev: prevRange, next: nextRange} = this.getScrollArea();\n    const cameraPosition = this.getCameraPosition();\n    const isOutOfBound = this.isOutOfBound();\n    let prevPanel = nearestPanel.prevSibling;\n    let nextPanel = nearestPanel.nextSibling;\n    let hangerPosition = this.getHangerPosition();\n    let nearestAnchorPos = nearestPanel.getAnchorPosition();\n\n    if (\n      isOutOfBound\n      && prevPanel\n      && nextPanel\n      && cameraPosition < nextRange\n      // On the basis of anchor, prevPanel is nearestPanel.\n      && (hangerPosition - prevPanel.getAnchorPosition() < nearestAnchorPos - hangerPosition)\n    ) {\n      nearestPanel = prevPanel;\n      nextPanel = nearestPanel.nextSibling;\n      prevPanel = nearestPanel.prevSibling;\n      nearestAnchorPos = nearestPanel.getAnchorPosition();\n    }\n    const nearestIndex = nearestPanel.getIndex() + (nearestPanel.getCloneIndex() + 1) * panelManager.getPanelCount();\n    const nearestSize = nearestPanel.getSize();\n\n    if (isOutOfBound) {\n      const relativeHangerPosition = this.getRelativeHangerPosition();\n\n      if (nearestAnchorPos > nextRange + relativeHangerPosition) {\n        // next bounce area: hangerPosition - relativeHangerPosition - nextRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - nextRange;\n      } else if (nearestAnchorPos < prevRange + relativeHangerPosition) {\n        // prev bounce area: hangerPosition - relativeHangerPosition - prevRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - prevRange;\n      }\n    }\n    const hangerIsNextToNearestPanel = hangerPosition >= nearestAnchorPos;\n    const gap = this.options.gap;\n\n    let basePosition = nearestAnchorPos;\n    let targetPosition = nearestAnchorPos;\n    if (hangerIsNextToNearestPanel) {\n      targetPosition = nextPanel\n        ? nextPanel.getAnchorPosition()\n        : nearestAnchorPos + nearestSize + gap;\n    } else {\n      basePosition = prevPanel\n        ? prevPanel.getAnchorPosition()\n        : basePosition = nearestAnchorPos - nearestSize - gap;\n    }\n\n    const progressBetween = (hangerPosition - basePosition) / (targetPosition - basePosition);\n    const startIndex = hangerIsNextToNearestPanel\n      ? nearestIndex\n      : prevPanel\n        ? prevPanel.getIndex()\n        : nearestIndex - 1;\n\n    return startIndex + progressBetween;\n  }\n\n  // Update axes flick position without triggering event\n  public updateAxesPosition(position: number) {\n    const axes = this.axes;\n    axes.off();\n    axes.setTo({\n      flick: position,\n    }, 0);\n    axes.on(this.axesHandlers);\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getScrollArea(): { prev: number, next: number } {\n    return this.state.scrollArea;\n  }\n  public isOutOfBound(): boolean {\n    const state = this.state;\n    const options = this.options;\n    const scrollArea = state.scrollArea;\n\n    return !options.circular\n      && options.bound\n      && (state.position <= scrollArea.prev || state.position >= scrollArea.next);\n  }\n\n  public canSetBoundMode(): boolean {\n    const state = this.state;\n    const options = this.options;\n    const lastPanel = this.panelManager.lastPanel();\n    if (!lastPanel) {\n      return false;\n    }\n\n    const summedPanelSize = lastPanel.getPosition() + lastPanel.getSize();\n\n    return options.bound\n      && !options.circular\n      && summedPanelSize >= state.size;\n  }\n\n  public getScrollAreaSize(): number {\n    const scrollArea = this.state.scrollArea;\n\n    return scrollArea.next - scrollArea.prev;\n  }\n\n  public getRelativeHangerPosition(): number {\n    return this.state.relativeHangerPosition;\n  }\n\n  public getHangerPosition(): number {\n    return this.state.position + this.state.relativeHangerPosition;\n  }\n\n  public getCameraPosition(): number {\n    return this.state.position;\n  }\n\n  public setCurrentPanel(panel: Panel): void {\n    this.currentPanel = panel;\n  }\n\n  public setLastIndex(index: number): void {\n    const currentPanel = this.currentPanel;\n    const panelManager = this.panelManager;\n\n    panelManager.setLastIndex(index);\n    if (currentPanel && currentPanel.getIndex() > index) {\n      this.currentPanel = panelManager.lastPanel();\n    }\n\n    this.resize();\n  }\n\n  public connectAxesHandler(handlers: {[key: string]: (event: { [key: string]: any; }) => any}): void {\n    const axes = this.axes;\n\n    this.axesHandlers = handlers;\n    axes.on(handlers);\n  }\n\n  private build(): void {\n    this.applyCSSValue();\n    this.setMoveType();\n    this.setAxesInstance();\n    this.createPanels();\n    this.setDefaultPanel();\n    this.resize();\n    this.moveToDefaultPanel();\n  }\n\n  private applyCSSValue(): void {\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n    const cameraElement = this.cameraElement;\n    const classPrefix = options.classPrefix;\n\n    // Set default css values for each element\n    viewportElement.className = `${classPrefix}-viewport`;\n    cameraElement.className = `${classPrefix}-camera`;\n\n    applyCSS(viewportElement, DEFAULT_VIEWPORT_CSS);\n    applyCSS(cameraElement, DEFAULT_CAMERA_CSS);\n\n    if (options.zIndex) {\n      viewportElement.style.zIndex = `${options.zIndex}`;\n    }\n    if (options.overflow) {\n      viewportElement.style.overflow = \"visible\";\n    }\n  }\n\n  private setMoveType(): void {\n    const moveType = this.options.moveType as MoveTypeObjectOption;\n\n    switch (moveType.type) {\n      case MOVE_TYPE.SNAP:\n        this.moveType = new Snap(moveType.count);\n        break;\n      case MOVE_TYPE.FREE_SCROLL:\n        this.moveType = new FreeScroll();\n        break;\n      default:\n        throw new Error(\"moveType is not correct!\");\n    }\n  }\n\n  private setAxesInstance(): void {\n    const state = this.state;\n    const options = this.options;\n\n    const scrollArea = state.scrollArea;\n    const horizontal = options.horizontal;\n\n    this.axes = new Axes({\n      flick: {\n        range: [scrollArea.prev, scrollArea.next],\n        circular: options.circular,\n        bounce: [0, 0], // will be updated in resize()\n      },\n    }, {\n      easing: options.panelEffect,\n      deceleration: options.deceleration,\n      interruptable: true,\n    });\n\n    this.panInput = new PanInput(this.viewportElement, {\n      inputType: options.inputType,\n      thresholdAngle: options.thresholdAngle,\n      scale: options.horizontal ? [-1, 0] : [0, -1],\n    });\n\n    this.axes.connect(horizontal ? [\"flick\", \"\"] : [\"\", \"flick\"], this.panInput);\n  }\n\n  private createPanels(): void {\n    // Panel elements were attached to camera element by Flicking class\n    const panelElements = this.cameraElement.children;\n\n    // Initialize panels\n    const panels = toArray(panelElements).map(\n      (el: HTMLElement, idx: number) => new Panel(el, idx, this),\n    );\n\n    if (panels.length > 0) {\n      this.panelManager.append(panels);\n    }\n  }\n\n  private setDefaultPanel(): void {\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const indexRange = this.panelManager.getRange();\n    const index = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n\n    this.currentPanel = panelManager.get(index);\n  }\n\n  private clonePanels() {\n    const state = this.state;\n    const panelManager = this.panelManager;\n\n    const viewportSize = state.size;\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel() as Panel;\n\n    // There're no panels exist\n    if (!firstPanel) {\n      return;\n    }\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + this.options.gap;\n    const visibleAreaSize = viewportSize + firstPanel.getRelativeAnchorPosition();\n\n    // For each panels, clone itself while last panel's position + size is below viewport size\n    const panels = panelManager.originalPanels();\n\n    const cloneCount = Math.ceil(visibleAreaSize / sumOriginalPanelSize);\n    const prevCloneCount = panelManager.getCloneCount();\n\n    if (cloneCount > prevCloneCount) {\n      // should clone more\n      for (let cloneIndex = prevCloneCount; cloneIndex < cloneCount; cloneIndex++) {\n        const clones = panels.map(origPanel => {\n          const clonedPanel = origPanel.clone(cloneIndex);\n\n          this.cameraElement.appendChild(clonedPanel.getElement());\n          return clonedPanel;\n        });\n        panelManager.insertClones(cloneIndex, 0, clones);\n      }\n    } else if (cloneCount < prevCloneCount) {\n      // should remove some\n      panelManager.removeClonesAfter(cloneCount);\n    }\n  }\n\n  private moveToDefaultPanel(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const indexRange = this.panelManager.getRange();\n\n    const defaultIndex = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n    const defaultPanel = panelManager.get(defaultIndex);\n\n    let defaultPosition = 0;\n    if (defaultPanel) {\n      defaultPosition = defaultPanel.getAnchorPosition() - state.relativeHangerPosition;\n      defaultPosition = this.canSetBoundMode()\n        ? clamp(defaultPosition, state.scrollArea.prev, state.scrollArea.next)\n        : defaultPosition;\n    }\n\n    this.moveCamera(defaultPosition);\n    this.axes.setTo({ flick: defaultPosition }, 0);\n  }\n\n  private updateSize(): void {\n    const state = this.state;\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n    const panels = this.panelManager.originalPanels();\n\n    if (!options.horizontal) {\n      // Don't preserve previous width for adaptive resizing\n      viewportElement.style.width = \"\";\n      viewportElement.style.minWidth = \"\";\n    }\n\n    const bbox = viewportElement.getBoundingClientRect();\n\n    // Update size & hanger position\n    state.size = options.horizontal\n      ? bbox.width\n      : bbox.height;\n\n    state.relativeHangerPosition = parseArithmeticExpression(options.hanger, state.size);\n    state.infiniteThreshold = parseArithmeticExpression(options.infiniteThreshold, state.size);\n\n    // Resize all panels\n    panels.forEach(panel => {\n      panel.resize();\n    });\n  }\n\n  private updateOriginalPanelPositions(): void {\n    const gap = this.options.gap;\n    const panelManager = this.panelManager;\n\n    const firstPanel = panelManager.firstPanel();\n    const panels = panelManager.originalPanels();\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const currentPanel = this.currentPanel!;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n    const scrollArea = this.state.scrollArea;\n\n    // Update panel position && fit to wrapper\n    let nextPanelPos = firstPanel.getPosition();\n    let maintainingPanel: Panel = firstPanel;\n    if (nearestPanel) {\n      // We should maintain nearestPanel's position\n      const looped = !isBetween(currentState.lastPosition + currentState.delta, scrollArea.prev, scrollArea.next);\n\n      maintainingPanel = looped\n        ? currentPanel\n        : nearestPanel;\n    } else if (firstPanel.getIndex() > 0) {\n      maintainingPanel = currentPanel;\n    }\n\n    const panelsBeforeMaintainPanel = panels.slice(0, maintainingPanel.getIndex() + (maintainingPanel.getCloneIndex() + 1) * panels.length);\n    const accumulatedSize = panelsBeforeMaintainPanel.reduce((total, panel) => {\n      return total + panel.getSize() + gap;\n    }, 0);\n\n    nextPanelPos = maintainingPanel.getPosition() - accumulatedSize;\n\n    panels.forEach(panel => {\n      const newPosition = nextPanelPos;\n      const currentPosition = panel.getPosition();\n      const panelSize = panel.getSize();\n\n      if (currentPosition !== newPosition) {\n        panel.setPosition(newPosition);\n      }\n      nextPanelPos += panelSize + gap;\n    });\n  }\n\n  private updateClonedPanelPositions(): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const clonedPanels = panelManager.clonedPanels()\n      .filter(panel => !!panel);\n\n    const scrollArea = state.scrollArea;\n\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel()!;\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n    // Locate all cloned panels linearly first\n    for (const panel of clonedPanels) {\n      if (!panel) {\n        continue;\n      }\n\n      const origPanel = panel.getOriginalPanel();\n      const cloneIndex = panel.getCloneIndex();\n      const cloneBasePos = sumOriginalPanelSize * (cloneIndex + 1);\n      const clonedPanelPos = cloneBasePos + origPanel.getPosition();\n\n      panel.setPosition(clonedPanelPos);\n    }\n\n    let lastReplacePosition = firstPanel.getPosition();\n    // reverse() pollutes original array, so copy it with concat()\n    for (const panel of clonedPanels.concat().reverse()) {\n      const panelSize = panel.getSize();\n      const replacePosition = lastReplacePosition - panelSize - options.gap;\n\n      if (replacePosition + panelSize <= scrollArea.prev) {\n        // Replace is not meaningful, as it won't be seen in current scroll area\n        break;\n      }\n\n      panel.setPosition(replacePosition);\n      lastReplacePosition = replacePosition;\n    }\n  }\n\n  private updateScrollArea(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const axes = this.axes;\n\n    // Set viewport scrollable area\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel() as Panel;\n    const relativeHangerPosition = state.relativeHangerPosition;\n\n    if (!firstPanel) {\n      state.scrollArea = {\n        prev: 0,\n        next: 0,\n      };\n    } else if (this.canSetBoundMode()) {\n      state.scrollArea = {\n        prev: firstPanel.getPosition(),\n        next: lastPanel.getPosition() + lastPanel.getSize() - state.size,\n      };\n    } else if (options.circular) {\n      const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n      // Maximum scroll extends to first clone sequence's first panel\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: sumOriginalPanelSize + firstPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    } else {\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: lastPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    }\n\n    const viewportSize = state.size;\n    const bounce = options.bounce;\n\n    let parsedBounce: number[] = bounce as [number, number];\n    if (isArray(bounce)) {\n      parsedBounce = (bounce as string[]).map(val => parseArithmeticExpression(val, viewportSize, DEFAULT_OPTIONS.bounce as number));\n    } else {\n      const parsedVal = parseArithmeticExpression(bounce as number | string, viewportSize, DEFAULT_OPTIONS.bounce as number);\n      parsedBounce = [parsedVal, parsedVal];\n    }\n\n    // Update axes range and bounce\n    const flick = axes.axis.flick;\n    flick.range = [state.scrollArea.prev, state.scrollArea.next];\n    flick.bounce = parsedBounce;\n  }\n\n  // Update camera position after resizing\n  private updateCameraPosition(): void {\n    const state = this.state;\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.stateMachine.getState();\n    const isFreeScroll = (this.options.moveType as MoveTypeObjectOption).type === \"freeScroll\";\n\n    if (currentState.holding || currentState.playing || isFreeScroll) {\n      return;\n    }\n\n    let newPosition = currentPanel\n      ? currentPanel.getAnchorPosition() - state.relativeHangerPosition\n      : this.getCameraPosition();\n\n    if (this.canSetBoundMode()) {\n      newPosition = clamp(newPosition, state.scrollArea.prev, state.scrollArea.next);\n    }\n\n    // Pause & resume axes to prevent axes's \"change\" event triggered\n    // This should be done before moveCamera, as moveCamera can trigger needPanel\n    this.updateAxesPosition(newPosition);\n\n    this.moveCamera(newPosition);\n  }\n\n  private checkNeedPanel(axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const currentPanel = this.currentPanel;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n\n    if (!options.infinite) {\n      return;\n    }\n\n    const gap = options.gap;\n    const infiniteThreshold = state.infiniteThreshold;\n    const maxLastIndex = panelManager.getLastIndex();\n\n    if (maxLastIndex < 0) {\n      return;\n    }\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      this.triggerNeedPanel({\n        axesEvent,\n        siblingPanel: null,\n        direction: null,\n        indexRange: {\n          min: 0,\n          max: maxLastIndex,\n          length: maxLastIndex + 1,\n        },\n      });\n      return;\n    }\n\n    const originalNearestPosition = nearestPanel.getPosition();\n\n    // Check next direction\n    let checkingPanel: Panel | null = !currentState.holding && !currentState.playing\n      ? currentPanel\n      : nearestPanel;\n\n    while (checkingPanel) {\n      const currentIndex = checkingPanel.getIndex();\n      const nextSibling = checkingPanel.nextSibling;\n      let lastPanel = panelManager.lastPanel()!;\n      let atLastPanel = currentIndex === lastPanel.getIndex();\n      const nextIndex = !atLastPanel && nextSibling\n        ? nextSibling.getIndex()\n        : maxLastIndex + 1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelRight = checkingPanel.getPosition() + checkingPanel.getSize() - (currentNearestPosition - originalNearestPosition);\n      const cameraNext = state.position + state.size;\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = (nextIndex - currentIndex > 1);\n      // Expected prev panel's left position is smaller than camera position\n      const overThreshold = panelRight + gap - infiniteThreshold <= cameraNext;\n\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.NEXT,\n          indexRange: {\n            min: currentIndex + 1,\n            max: nextIndex - 1,\n            length: nextIndex - currentIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at max panel index\n      if (options.circular && currentIndex === maxLastIndex && overThreshold) {\n        const firstPanel = panelManager.firstPanel()!;\n        const firstIndex = firstPanel.getIndex();\n\n        if (firstIndex > 0) {\n          this.triggerNeedPanel({\n            axesEvent,\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.NEXT,\n            indexRange: {\n              min: 0,\n              max: firstIndex - 1,\n              length: firstIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether insertion happened\n      lastPanel = panelManager.lastPanel()!;\n      atLastPanel = currentIndex === lastPanel.getIndex();\n\n      if (atLastPanel || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.nextSibling;\n    }\n\n    // Check prev direction\n    checkingPanel = nearestPanel;\n    while (checkingPanel) {\n      const cameraPrev = state.position;\n      const checkingIndex = checkingPanel.getIndex();\n      const prevSibling = checkingPanel.prevSibling;\n      let firstPanel = panelManager.firstPanel()!;\n      let atFirstPanel = checkingIndex === firstPanel.getIndex();\n      const prevIndex = !atFirstPanel && prevSibling\n        ? prevSibling.getIndex()\n        : -1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelLeft = checkingPanel.getPosition() - (currentNearestPosition - originalNearestPosition);\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = checkingIndex - prevIndex > 1;\n      // Expected prev panel's right position is smaller than camera position\n      const overThreshold = panelLeft - gap + infiniteThreshold >= cameraPrev;\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.PREV,\n          indexRange: {\n            min: prevIndex + 1,\n            max: checkingIndex - 1,\n            length: checkingIndex - prevIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at panel 0\n      if (options.circular && checkingIndex === 0 && overThreshold) {\n        const lastPanel = panelManager.lastPanel()!;\n        const lastIndex = lastPanel.getIndex();\n\n        if (lastIndex < maxLastIndex) {\n          this.triggerNeedPanel({\n            axesEvent,\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.PREV,\n            indexRange: {\n              min: lastIndex + 1,\n              max: maxLastIndex,\n              length: maxLastIndex - lastIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether insertion happened\n      firstPanel = panelManager.firstPanel()!;\n      atFirstPanel = checkingIndex === firstPanel.getIndex();\n\n      // Looped in circular mode\n      if (atFirstPanel || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.prevSibling;\n    }\n  }\n\n  private triggerNeedPanel(params: {\n    axesEvent: any;\n    siblingPanel: Panel | null,\n    direction: FlickingEvent[\"direction\"];\n    indexRange: NeedPanelEvent[\"range\"];\n  }): void {\n    const { axesEvent, siblingPanel, direction, indexRange } = params;\n    const checkedIndexes = this.state.checkedIndexes;\n    const alreadyTriggered = checkedIndexes.some(([min, max]) => min === indexRange.min || max === indexRange.max);\n    const hasHandler = this.flicking.hasOn(EVENTS.NEED_PANEL);\n\n    if (alreadyTriggered || !hasHandler) {\n      return;\n    }\n\n    // Should done before triggering event, as we can directly add panels by event callback\n    checkedIndexes.push([indexRange.min, indexRange.max]);\n\n    const index = siblingPanel\n      ? siblingPanel.getIndex()\n      : 0;\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n\n    this.triggerEvent(\n      EVENTS.NEED_PANEL,\n      axesEvent,\n      isTrusted,\n      {\n        index,\n        panel: siblingPanel,\n        direction,\n        range: indexRange,\n      } as Partial<NeedPanelEvent>,\n    );\n  }\n}\n","import Component from \"@egjs/component\";\nimport Viewport from \"./components/Viewport\";\n\nimport { merge, getProgress, toArray, parseElement, isString } from \"./utils\";\nimport { DEFAULT_OPTIONS, EVENTS, DIRECTION, AXES_EVENTS, STATE_TYPE, DEFAULT_MOVE_TYPE_OPTIONS } from \"./consts\";\nimport { FlickingOptions, FlickingEvent, Direction, EventType, FlickingPanel, TriggerCallback, FlickingContext, FlickingStatus, Plugin, ElementLike } from \"./types\";\n\n/**\n * @memberof eg\n * @extends eg.Component\n * @support {\"ie\": \"10+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\" , \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @requires {@link https://github.com/naver/egjs-component|eg.Component}\n * @requires {@link https://github.com/naver/egjs-axes|eg.Axes}\n * @see Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>\n */\nclass Flicking extends Component {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @example\n   * eg.Flicking.VERSION;  // ex) 3.0.0\n   * @memberof eg.Flicking\n   */\n  public static VERSION: string = \"#__VERSION__#\";\n  /**\n   * Direction constant - \"PREV\" or \"NEXT\"\n   * @ko 방향 상수 - \"PREV\" 또는 \"NEXT\"\n   * @example\n   * eg.Flicking.DIRECTION.PREV; // \"PREV\"\n   * eg.Flicking.DIRECTION.NEXT; // \"NEXT\"\n   */\n  public static DIRECTION: Direction = DIRECTION;\n\n  /**\n   * Event type object\n   * @ko 이벤트 이름 문자열들을 담은 객체\n   */\n  public static EVENTS: EventType = EVENTS;\n\n  public options: FlickingOptions;\n\n  private wrapper: HTMLElement;\n  private viewport: Viewport;\n  private eventContext: FlickingContext;\n  private plugins: Plugin[] = [];\n\n  /**\n   * @param element A base element for the eg.Flicking module. When specifying a value as a `string` type, you must specify a css selector string to select the element.<ko>eg.Flicking 모듈을 사용할 기준 요소. `string`타입으로 값 지정시 요소를 선택하기 위한 css 선택자 문자열을 지정해야 한다.</ko>\n   * @param options An option object of the eg.Flicking module<ko>eg.Flicking 모듈의 옵션 객체</ko>\n   * @param {string} [options.classPrefix=\"eg-flick\"] A prefix of class name will be added for the panels, viewport and camera.<ko>패널들과 뷰포트, 카메라에 추가될 클래스 이름의 접두사.</ko>\n   * @param {number} [options.deceleration=0.0075] Deceleration value for panel movement animation for animation triggered by manual user input. Higher value means shorter running time.<ko>사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아진다.</ko>\n   * @param {boolean} [options.horizontal=true] Direction of panel movement. (true: horizontal, false: vertical)<ko>패널 이동 방향. (true: 가로방향, false: 세로방향)</ko>\n   * @param {boolean} [options.circular=false] Enables circular mode, which connects first/last panel for continuous scrolling<ko>순환 모드를 활성화한다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능하다.</ko>\n   * @param {boolean} [options.infinite=false] Enables infinite mode, which can automatically trigger needPanel until reaching last panel's index reaches lastIndex<ko>무한 모드를 활성화한다. 무한 모드에서는 needPanel 이벤트를 자동으로 트리거한다. 해당 동작은 마지막 패널의 인덱스가 lastIndex와 일치할때까지 일어난다.</ko>\n   * @param {number} [options.infiniteThreshold=0] A Threshold from viewport edge before triggering `needPanel` event in infinite mode.<ko>무한 모드에서 `needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리.</ko>\n   * @param {number} [options.lastIndex=Infinity] Maximum panel index that Flicking can set. Flicking won't trigger `needPanel` when event's panel index is greater than it.<br>Also, if last panel's index reached given index, you can't add more panels.<ko>Flicking이 설정 가능한 패널의 최대 인덱스. `needPanel` 이벤트에 지정된 인덱스가 최대 패널의 개수보다 같거나 커야 하는 경우에 이벤트를 트리거하지 않게 한다.<br>또한, 마지막 패널의 인덱스가 주어진 인덱스와 동일할 경우, 새로운 패널을 더 이상 추가할 수 없다.</ko>\n   * @param {number} [options.threshold=40] Movement threshold to change panel(unit: pixel). It should be dragged above the threshold to change current panel.<ko>패널 변경을 위한 이동 임계값 (단위: 픽셀). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.</ko>\n   * @param {number} [options.duration=100] Duration of the panel movement animation.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @param {function} [options.panelEffect=x => 1 - Math.pow(1 - x, 3)] An easing function applied to the panel movement animation. Default value is `easeOutCubic`.<ko>패널 이동 애니메이션에 적용할 easing함수. 기본값은 `easeOutCubic`이다.</ko>\n   * @param {number} [options.defaultIndex=0] Index of panel to set as default when initializing. A zero-based integer.<ko>초기화시 지정할 디폴트 패널의 인덱스로, 0부터 시작하는 정수.</ko>\n   * @param {string[]} [options.inputType=[\"touch,\"mouse\"]] Types of input devices to enable.({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption Reference})<ko>활성화할 입력 장치 종류. ({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption 참고})</ko>\n   * @param {number} [options.thresholdAngle=45] The threshold angle value(0 ~ 90).<br>If input angle from click/touched position is above or below this value in horizontal and vertical mode each, scrolling won't happen.<ko>스크롤 동작을 막기 위한 임계각(0 ~ 90).<br>클릭/터치한 지점으로부터 계산된 사용자 입력의 각도가 horizontal/vertical 모드에서 각각 크거나 작으면, 스크롤 동작이 이루어지지 않는다.</ko>\n   * @param {number|string|number[]|string[]} [options.bounce=[10,10]] The size value of the bounce area. Only can be enabled when `circular=false`.<br>You can set different bounce value for prev/next direction by using array.<br>`number` for px value, and `string` for px, and % value relative to viewport size.(ex - 0, \"10px\", \"20%\")<ko>바운스 영역의 크기값. `circular=false`인 경우에만 사용할 수 있다.<br>배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정 가능하다.<br>`number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있다.(ex - 0, \"10px\", \"20%\")</ko>\n   * @param {boolean} [options.autoResize=false] Whether resize() method should be called automatically after window resize event.<ko>window의 `resize` 이벤트 이후 자동으로 resize()메소드를 호출할지의 여부.</ko>\n   * @param {boolean} [options.adaptive=false] Whether the height(horizontal)/width(vertical) of the viewport element reflects the height/width value of the panel after completing the movement.<ko>목적 패널로 이동한 후 그 패널의 높이(horizontal)/너비(vertical)값을 뷰포트 요소의 높이/너비값에 반영할지 여부.</ko>\n   * @param {number} [options.zIndex=2000] z-index value for viewport element.<ko>뷰포트 엘리먼트의 z-index 값.</ko>\n   * @param {boolean} [options.bound=false] Prevent view from going out of first/last panel. Only can be enabled when `circular=false`.<ko>뷰가 첫번째와 마지막 패널 밖으로 나가는 것을 막아준다. `circular=false`인 경우에만 사용할 수 있다.</ko>\n   * @param {boolean} [options.overflow=false] Disables CSS property `overflow: hidden` in viewport if `true`.<ko>`true`로 설정시 뷰포트에 `overflow: hidden` 속성을 해제한다.</ko>\n   * @param {string} [options.hanger=\"50%\"] Reference position of hanger in viewport, which hangs panel anchors should be stopped at.<br>Should be provided in px or % value of viewport size.<br>You can combinate those values with plus/minus sign<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>뷰포트 내부의 행어의 위치. 패널의 앵커들이 뷰포트 내에서 멈추는 지점에 해당한다.<br>px값이나, 뷰포트의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {string} [options.anchor=\"50%\"] Reference position of anchor in panels, which can be hanged by viewport hanger.<br>Should be provided in px or % value of panel size.<br>You can combinate those values with plus/minus sign<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>패널 내부의 앵커의 위치. 뷰포트의 행어와 연계하여 패널이 화면 내에서 멈추는 지점을 설정할 수 있다.<br>px값이나, 패널의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {number} [options.gap=0] Space between each panels. Should be given in number.(px).<ko>패널간에 부여할 간격의 크기를 나타내는 숫자.(px)</ko>\n   * @param {eg.Flicking.MoveTypeOption} [options.moveType=\"snap\"] Movement style by user input.(ex: snap, freeScroll)<ko>사용자 입력에 의한 이동 방식.(ex: snap, freeScroll)</ko>\n   */\n  constructor(\n    element: string | HTMLElement,\n    options: Partial<FlickingOptions> = {},\n  ) {\n    super();\n\n    // Set flicking wrapper user provided\n    let wrapper: HTMLElement | null;\n    if (isString(element)) {\n      wrapper = document.querySelector(element);\n      if (!wrapper) {\n        throw new Error(\"Base element doesn't exist.\");\n      }\n    } else if (element.nodeName && element.nodeType === 1) {\n      wrapper = element;\n    } else {\n      throw new Error(\"Element should be provided in string or HTMLElement.\");\n    }\n\n    this.wrapper = wrapper;\n    // Override default options\n    this.options = merge({}, DEFAULT_OPTIONS, options) as FlickingOptions;\n    // Override moveType option\n    const currentOptions = this.options;\n    const moveType = currentOptions.moveType;\n\n    if (moveType in DEFAULT_MOVE_TYPE_OPTIONS) {\n      currentOptions.moveType = DEFAULT_MOVE_TYPE_OPTIONS[moveType as keyof typeof DEFAULT_MOVE_TYPE_OPTIONS];\n    }\n    this.build();\n  }\n\n  /**\n   * Move to the previous panel if it exists.\n   * @ko 이전 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public prev(duration?: number): this {\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.viewport.stateMachine.getState();\n\n    if (!currentPanel || currentState.type !== STATE_TYPE.IDLE) {\n      return this;\n    }\n\n    const prevPanel = currentPanel.prev();\n    if (prevPanel) {\n      prevPanel.focus(duration);\n    }\n\n    return this;\n  }\n\n  /**\n   * Move to the next panel if it exists.\n   * @ko 다음 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation(unit: ms).<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public next(duration?: number): this {\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.viewport.stateMachine.getState();\n\n    if (!currentPanel || currentState.type !== STATE_TYPE.IDLE) {\n      return this;\n    }\n\n    const nextPanel = currentPanel.next();\n    if (nextPanel) {\n      nextPanel.focus(duration);\n    }\n\n    return this;\n  }\n\n  /**\n   * Move to the panel of given index.\n   * @ko 주어진 인덱스에 해당하는 패널로 이동한다.\n   * @param index The index number of the panel to move.<ko>이동할 패널의 인덱스 번호.</ko>\n   * @param duration [duration=options.duration] Duration of the panel movement.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public moveTo(index: number, duration?: number): this {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    const state = viewport.stateMachine.getState();\n\n    if (!panel || state.type !== STATE_TYPE.IDLE) {\n      return this;\n    }\n\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = viewport.getHangerPosition();\n\n    let targetPanel = panel;\n    if (this.options.circular) {\n      const scrollAreaSize = viewport.getScrollAreaSize();\n      // Check all three possible locations, find the nearest position among them.\n      const possiblePositions = [\n        anchorPosition - scrollAreaSize,\n        anchorPosition,\n        anchorPosition + scrollAreaSize,\n      ];\n      const nearestPosition = possiblePositions.reduce((nearest, current) => {\n        return (Math.abs(current - hangerPosition) < Math.abs(nearest - hangerPosition))\n          ? current\n          : nearest;\n      }, Infinity) - panel.getRelativeAnchorPosition();\n\n      const identicals = panel.getIdenticalPanels();\n      const offset = nearestPosition - anchorPosition;\n      if (offset > 0) {\n        // First cloned panel is nearest\n        targetPanel = identicals[1];\n      } else if (offset < 0) {\n        // Last cloned panel is nearest\n        targetPanel = identicals[identicals.length - 1];\n      }\n\n      targetPanel = targetPanel.clone(targetPanel.getCloneIndex(), true);\n      targetPanel.setPosition(nearestPosition, true);\n    }\n    const currentIndex = this.getIndex();\n\n    if (hangerPosition === targetPanel.getAnchorPosition() && currentIndex === index) {\n      return this;\n    }\n\n    const eventType = panel.getIndex() === viewport.getCurrentIndex()\n      ? \"\"\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(\n      targetPanel,\n      viewport.findEstimatedPosition(targetPanel),\n      eventType,\n      null,\n      duration,\n    );\n    return this;\n  }\n\n  /**\n   * Return index of the current panel. `-1` if no panel exists.\n   * @ko 현재 패널의 인덱스 번호를 반환한다. 패널이 하나도 없을 경우 `-1`을 반환한다.\n   * @return Current panel's index, zero-based integer.<ko>현재 패널의 인덱스 번호. 0부터 시작하는 정수.</ko>\n   */\n  public getIndex(): number {\n    return this.viewport.getCurrentIndex();\n  }\n\n  /**\n   * Return the wrapper element user provided in constructor.\n   * @ko 사용자가 생성자에서 제공한 래퍼 엘리먼트를 반환한다.\n   * @return Wrapper element user provided.<ko>사용자가 제공한 래퍼 엘리먼트.</ko>\n   */\n  public getElement(): HTMLElement {\n    return this.wrapper;\n  }\n\n  /**\n   * Return current panel. `null` if no panel exists.\n   * @ko 현재 패널을 반환한다. 패널이 하나도 없을 경우 `null`을 반환한다.\n   * @return Current panel.<ko>현재 패널.</ko>\n   */\n  public getCurrentPanel(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.getCurrentPanel();\n    return panel\n      ? panel\n      : null;\n  }\n\n  /**\n   * Return the panel of given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 패널을 반환한다. 해당 패널이 존재하지 않을 시 `null`이다.\n   * @return Panel of given index.<ko>주어진 인덱스에 해당하는 패널.</ko>\n   */\n  public getPanel(index: number): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    return panel\n      ? panel\n      : null;\n  }\n\n  /**\n   * Return all panels.\n   * @ko 모든 패널들을 반환한다.\n   * @param - Should include cloned panels or not.<ko>복사된 패널들을 포함할지의 여부.</ko>\n   * @return All panels.<ko>모든 패널들.</ko>\n   */\n  public getAllPanels(includeClone?: boolean): FlickingPanel[] {\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const panels = includeClone\n      ? panelManager.allPanels()\n      : panelManager.originalPanels();\n\n    return panels\n      .filter(panel => !!panel);\n  }\n\n  /**\n   * Return the panels currently shown in viewport area.\n   * @ko 현재 뷰포트 영역에서 보여지고 있는 패널들을 반환한다.\n   * @return Panels currently shown in viewport area.<ko>현재 뷰포트 영역에 보여지는 패널들</ko>\n   */\n  public getVisiblePanels(): FlickingPanel[] {\n    return this.getAllPanels(true).filter(panel => {\n      const outsetProgress = panel.getOutsetProgress();\n\n      return outsetProgress > -1 && outsetProgress < 1;\n    });\n  }\n\n  /**\n   * Return length of original panels.\n   * @ko 원본 패널의 개수를 반환한다.\n   * @return Length of original panels.<ko>원본 패널의 개수</ko>\n   */\n  public getPanelCount(): number {\n    return this.viewport.panelManager.getPanelCount();\n  }\n\n  /**\n   * Set last panel index for `infinite' mode.<br>[needPanel]{@link eg.Flicking#events:needPanel} won't be triggered anymore when last panel's index reaches it.<br>Also, you can't add more panels after it.\n   * @ko `infinite` 모드에서 적용되는 패널의 최대 인덱스를 설정한다.<br>마지막 패널의 인덱스가 설정한 값에 도달할 경우 더 이상 [needPanel]{@link eg.Flicking#events:needPanel} 이벤트가 발생되지 않는다.<br>또한, 설정한 인덱스 이후로 새로운 패널을 추가할 수 없다.\n   * @param - Last panel index.\n   * @see {@link eg.Flicking.FlickingOptions}\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public setLastIndex(index: number): this {\n    this.viewport.setLastIndex(index);\n\n    return this;\n  }\n\n  /**\n   * Return panel movement animation.\n   * @ko 현재 패널 이동 애니메이션이 진행 중인지를 반환한다.\n   * @return Is animating or not.<ko>애니메이션 진행 여부.</ko>\n   */\n  public isPlaying(): boolean {\n    return this.viewport.stateMachine.getState().playing;\n  }\n\n  /**\n   * Unblock input devices.\n   * @ko 막았던 입력 장치로부터의 입력을 푼다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public enableInput(): this {\n    this.viewport.enable();\n\n    return this;\n  }\n\n  /**\n   * Block input devices.\n   * @ko 입력 장치로부터의 입력을 막는다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public disableInput(): this {\n    this.viewport.disable();\n\n    return this;\n  }\n\n  /**\n   * Get current flicking status. You can restore current state by giving returned value to [setStatus()]{@link eg.Flicking#setStatus}.\n   * @ko 현재 상태 값을 반환한다. 반환받은 값을 [setStatus()]{@link eg.Flicking#setStatus} 메소드의 인자로 지정하면 현재 상태를 복원할 수 있다.\n   * @return An object with current status value information.<ko>현재 상태값 정보를 가진 객체.</ko>\n   */\n  public getStatus(): FlickingStatus {\n    const viewport = this.viewport;\n\n    const panels = viewport.panelManager.originalPanels()\n      .filter(panel => !!panel)\n      .map(panel => {\n        return {\n          html: panel.getElement().outerHTML,\n          index: panel.getIndex(),\n        };\n      });\n\n    return {\n      index: viewport.getCurrentIndex(),\n      panels,\n      position: viewport.getCameraPosition(),\n    };\n  }\n\n  /**\n   * Restore to the state of the `status`.\n   * @ko `status`의 상태로 복원한다.\n   * @param status Status value to be restored. You can specify the return value of the [getStatus()]{@link eg.Flicking#getStatus} method.<ko>복원할 상태 값. [getStatus()]{@link eg.Flicking#getStatus}메서드의 반환값을 지정하면 된다.</ko>\n   */\n  public setStatus(status: FlickingStatus): void {\n    this.viewport.restore(status);\n  }\n\n  /**\n   * Add plugins that can have different effects on Flicking.\n   * @ko 플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가한다.\n   * @param - The plugin(s) to add.<ko>추가할 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public addPlugins(plugins: Plugin | Plugin[]) {\n    const newPlugins = ([] as Plugin[]).concat(plugins);\n\n    newPlugins.forEach(plugin => {\n      plugin.init(this);\n    });\n\n    this.plugins = this.plugins.concat(newPlugins);\n    return this;\n  }\n  /**\n   * Remove plugins from Flicking.\n   * @ko 플리킹으로부터 플러그인들을 제거한다.\n   * @param - The plugin(s) to remove.<ko>제거 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public removePlugins(plugins: Plugin | Plugin[]) {\n    const currentPlugins = this.plugins;\n    const removedPlugins = ([] as Plugin[]).concat(plugins);\n\n    removedPlugins.forEach(plugin => {\n      const index = currentPlugins.indexOf(plugin);\n\n      if (index > -1) {\n        currentPlugins.splice(index, 1);\n      }\n\n      plugin.destroy(this);\n    });\n    return this;\n  }\n\n  /**\n   * Return the reference element and all its children to the state they were in before the instance was created. Remove all attached event handlers. Specify `null` for all attributes of the instance (including inherited attributes).\n   * @ko 기준 요소와 그 하위 패널들을 인스턴스 생성전의 상태로 되돌린다. 부착된 모든 이벤트 핸들러를 탈거한다. 인스턴스의 모든 속성(상속받은 속성포함)에 `null`을 지정한다.\n   * @example\n   * const flick = new eg.Flicking(\"#flick\");\n   * flick.destroy();\n   * console.log(flick.moveTo); // null\n   */\n  public destroy(): void {\n    this.off();\n\n    this.viewport.destroy();\n\n    this.plugins.forEach(plugin => {\n      plugin.destroy(this);\n    });\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  /**\n   * Update panels to current state.\n   * @ko 패널들을 현재 상태에 맞춰 갱신한다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public resize(): this {\n    const viewport = this.viewport;\n\n    viewport.panelManager.allPanels()\n      .forEach(panel => panel.unCacheBbox());\n    viewport.resize();\n\n    return this;\n  }\n\n  /**\n   * Add new panels at the beginning of panels.\n   * @ko 제일 앞에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.replace(3, document.createElement(\"div\")); // Add new panel at index 3\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 2\n   * flicking.prepend([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Prepended at index 0, 1\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 0, pushing every panels behind it.\n   */\n  public prepend(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n    const parsedElements = parseElement(element);\n\n    const insertingIndex = Math.max(viewport.panelManager.getRange().min - parsedElements.length, 0);\n    return viewport.insert(insertingIndex, parsedElements);\n  }\n\n  /**\n   * Add new panels at the end of panels.\n   * @ko 제일 끝에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.append(document.createElement(\"div\")); // Appended at index 0\n   * flicking.append(\"\\<div\\>Panel\\</div\\>\"); // Appended at index 1\n   * flicking.append([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Appended at index 2, 3\n   * // Even this is possible\n   * flicking.append(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\"); // Appended at index 4, 5\n   */\n  public append(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n\n    return viewport.insert(viewport.panelManager.getRange().max + 1, element);\n  }\n\n  /**\n   * Replace existing panels with new panels from given index. If target index is empty, add new panel at target index.\n   * @ko 주어진 인덱스로부터의 패널들을 새로운 패널들로 교체한다. 인덱스에 해당하는 자리가 비어있다면, 새로운 패널을 해당 자리에 집어넣는다.\n   * @param index - Start index to replace new panels.<ko>새로운 패널들로 교체할 시작 인덱스</ko>\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of created panels by replace.<ko>교체되어 새롭게 추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   *\n   * // This will add new panel at index 3,\n   * // Index 0, 1, 2 is empty at this moment.\n   * // [empty, empty, empty, PANEL]\n   * flicking.replace(3, document.createElement(\"div\"));\n   *\n   * // As index 2 was empty, this will also add new panel at index 2.\n   * // [empty, empty, PANEL, PANEL]\n   * flicking.replace(2, \"\\<div\\>Panel\\</div\\>\");\n   *\n   * // Index 3 was not empty, so it will replace previous one.\n   * // It will also add new panels at index 4 and 5.\n   * // before - [empty, empty, PANEL, PANEL]\n   * // after - [empty, empty, PANEL, NEW_PANEL, NEW_PANEL, NEW_PANEL]\n   * flicking.replace(3, [\"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\"])\n   */\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    return this.viewport.replace(index, element);\n  }\n\n  /**\n   * Remove panel at target index. This will decrease index of panels behind it.\n   * @ko `index`에 해당하는 자리의 패널을 제거한다. 수행시 `index` 이후의 패널들의 인덱스가 감소된다.\n   * @param index - Index of panel to remove.<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] - Number of panels to remove from index.<ko>`index` 이후로 제거할 패널의 개수.</ko>\n   * @return Array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    return this.viewport.remove(index, deleteCount);\n  }\n\n  private build(): void {\n    this.initViewport();\n    this.listenInput();\n    this.listenResize();\n  }\n\n  private initViewport(): void {\n    const wrapper = this.wrapper;\n    const options = this.options;\n    const cameraElement = document.createElement(\"div\");\n\n    // Make all panels to be a child of camera element\n    // wrapper <- viewport <- camera <- panels[1...n]\n    toArray(wrapper.children).forEach(child => {\n      cameraElement.appendChild(child);\n    });\n\n    // Clipping area for camera element\n    const viewportElement = document.createElement(\"div\");\n    viewportElement.appendChild(cameraElement);\n\n    // Add viewport element to wrapper\n    wrapper.appendChild(viewportElement);\n\n    // Make viewport instance with panel container element\n    this.viewport = new Viewport(this, viewportElement, cameraElement, options, this.triggerEvent);\n  }\n\n  private listenInput(): void {\n    const flicking = this;\n    const viewport = flicking.viewport;\n    const stateMachine = viewport.stateMachine;\n\n    // Set event context\n    flicking.eventContext = {\n      flicking,\n      viewport: flicking.viewport,\n      transitTo: stateMachine.transitTo,\n      triggerEvent: flicking.triggerEvent,\n      moveCamera: flicking.moveCamera,\n      stopCamera: viewport.stopCamera,\n    };\n\n    const handlers = {};\n    for (const key in AXES_EVENTS) {\n      const eventType = AXES_EVENTS[key];\n\n      handlers[eventType] = (e: any) => stateMachine.fire(eventType, e, flicking.eventContext);\n    }\n\n    // Connect Axes instance with PanInput\n    flicking.viewport.connectAxesHandler(handlers);\n  }\n\n  private listenResize(): void {\n    if (this.options.autoResize) {\n      window.addEventListener(\"resize\", () => {\n        this.resize();\n      });\n    }\n  }\n\n  private triggerEvent = <T extends FlickingEvent>(\n    eventName: string,\n    axesEvent: any,\n    isTrusted: boolean,\n    params: Partial<T> = {},\n  ): TriggerCallback => {\n    const viewport = this.viewport;\n\n    let canceled: boolean = true;\n\n    // Ignore events before viewport is initialized\n    if (viewport) {\n      const state = viewport.stateMachine.getState();\n      const { prev, next } = viewport.getScrollArea();\n      const pos = viewport.getCameraPosition();\n      let progress = getProgress(pos, [prev, prev, next]);\n\n      if (this.options.circular) {\n        progress %= 1;\n      }\n      canceled = !super.trigger(eventName, merge({\n        type: eventName,\n        index: this.getIndex(),\n        panel: this.getCurrentPanel(),\n        direction: state.direction,\n        holding: state.holding,\n        progress,\n        axesEvent,\n        isTrusted,\n      }, params));\n    }\n\n    return {\n      onSuccess(callback: () => void): TriggerCallback {\n        if (!canceled) {\n          callback();\n        }\n        return this;\n      },\n      onStopped(callback: () => void): TriggerCallback {\n        if (canceled) {\n          callback();\n        }\n        return this;\n      },\n    } as TriggerCallback;\n  }\n\n  // Return result of \"move\" event triggered\n  private moveCamera = (axesEvent: any): TriggerCallback => {\n    const viewport = this.viewport;\n    const state = viewport.stateMachine.getState();\n    const options = this.options;\n\n    const pos = axesEvent.pos.flick;\n    const previousPosition = viewport.getCameraPosition();\n\n    if (axesEvent.isTrusted && state.holding) {\n      const inputOffset = options.horizontal\n        ? axesEvent.inputEvent.offsetX\n        : axesEvent.inputEvent.offsetY;\n\n      const isNextDirection = inputOffset < 0;\n\n      let cameraChange = pos - previousPosition;\n      const looped = isNextDirection === (pos < previousPosition);\n      if (options.circular && looped) {\n        // Reached at max/min range of axes\n        const scrollAreaSize = viewport.getScrollAreaSize();\n        cameraChange = (cameraChange > 0 ? -1 : 1) * (scrollAreaSize - Math.abs(cameraChange));\n      }\n\n      const currentDirection = cameraChange === 0\n        ? state.direction\n        : cameraChange > 0\n          ? DIRECTION.NEXT\n          : DIRECTION.PREV;\n\n      state.direction = currentDirection;\n    }\n    state.delta += axesEvent.delta.flick;\n\n    viewport.moveCamera(pos, axesEvent);\n    return this.triggerEvent(EVENTS.MOVE, axesEvent, axesEvent.isTrusted)\n      .onStopped(() => {\n        // Undo camera movement\n        viewport.moveCamera(previousPosition, axesEvent);\n      });\n  }\n}\n\nexport default Flicking;\n"],"names":["target","_i","srcs","forEach","source","Object","keys","key","value","element","Array","isArray","elements","el","isString","tempDiv","document","createElement","innerHTML","push","toArray","children","checkTranslateSupport","transforms","webkitTransform","msTransform","MozTransform","OTransform","transform","supportedStyle","documentElement","style","transformName","prefixedTransform","Error","insertBefore","styleVal","window","getComputedStyle","getPropertyValue","parentElement","removeChild","transformInfo","name","has3d","length","cssObj","property","val","min","max","Math","iterable","slice","call","cssValue","base","defaultVal","defaultValue","cssRegex","clamp","idx","calculatedValue","matchResult","exec","sign","unit","parsedValue","parseFloat","pos","range","center","callback","i","indexed","size","MOVE_TYPE","DEFAULT_MOVE_TYPE_OPTIONS","snap","type","count","freeScroll","DEFAULT_OPTIONS","classPrefix","deceleration","horizontal","circular","infinite","infiniteThreshold","lastIndex","Infinity","threshold","duration","panelEffect","x","pow","defaultIndex","inputType","thresholdAngle","bounce","autoResize","adaptive","zIndex","bound","overflow","hanger","anchor","gap","moveType","DEFAULT_VIEWPORT_CSS","position","width","height","DEFAULT_CAMERA_CSS","willChange","DEFAULT_PANEL_CSS","EVENTS","HOLD_START","HOLD_END","MOVE_START","MOVE","MOVE_END","CHANGE","RESTORE","SELECT","NEED_PANEL","AXES_EVENTS","HOLD","RELEASE","ANIMATION_END","FINISH","STATE_TYPE","DIRECTION","PREV","NEXT","TRANSFORM","index","viewport","prevSibling","nextSibling","state","relativeAnchorPosition","clonedPanels","isClone","cloneIndex","originalStyle","className","getAttribute","cachedBbox","options","classList","add","indexOf","replace","applyCSS","this","bbox","getBbox","parseArithmeticExpression","panel","resize","panelCount","panelManager","getPanelCount","scrollAreaSize","getScrollAreaSize","floor","getPosition","getIndex","getCurrentProgress","outsetRange","getSize","getRelativeHangerPosition","getRelativeAnchorPosition","getProgress","getCameraPosition","panelSize","relativePanelPosition","rightRelativePanelPosition","visibleSize","currentPanel","getCurrentPanel","getHangerPosition","getAnchorPosition","eventType","moveTo","findEstimatedPosition","updateFunction","getIdenticalPanels","eachPanel","getElement","unCacheBbox","currentIndex","currentPosition","prevPanelIndex","prevPanelPosition","prevPanelSize","hasEmptyPanelBetween","notYetMinPanel","newPosition","prevPanel","clone","getCloneIndex","setPosition","getLastIndex","nextPanelIndex","nextPanelPosition","notYetMaxPanel","nextPanel","parsedElements","parseElement","firstPanel","targetIndex","insert","remove","setAttribute","removeAttribute","getBoundingClientRect","original","getClonedPanels","virtual","elementStyle","left","top","clonedPanel","Panel","cloneNode","clonedState","parentNode","removeClonedPanelsAfter","start","splice","removeElement","cameraElement","panels","clones","reduce","allClones","lastPanel","removingPanels","possibleLastPanel","filter","newPanels","_a","isCircular","findFirstPanelFrom","siblingElement","fragment","createDocumentFragment","appendChild","pushedIndex","offset","panelsAfterIndex","emptyPanelCount","findIndex","removedPanels","Boolean","newLastIndex","concat","reverse","setIndex","addNewClones","updateIndex","replacedPanels","wasNonEmptyCount","deleteCount","deletedPanels","cloneSet","nonEmptyIndexFromLast","allPanels","allPanelsCount","insertTarget_1","newClones_1","allPanels_1","contains","originalPanels","cloneCount","getCloneCount","lastPanelClones","nextSiblingClones","cloneNextSibling","lastPanelSibling","cloneSiblingElement","nextElementSibling","newClones","map","this_1","insertClones","counterArray","counter","insertingIndex","prevState","delta","direction","targetPanel","lastPosition","nextState","e","context","_this","tslib_1","flicking","triggerEvent","transitTo","onSuccess","onStopped","onChange","State","inputEvent","offsetX","offsetY","flick","setTo","releaseEvent","clickedElement","srcEvent","clickedPanel","findPanelOf","cameraPosition","clickedPanelPosition","moveCamera","stopCamera","isFreeScroll","is","velocity","velocityX","velocityY","inputDelta","deltaX","deltaY","isNextDirection","abs","swipeDistance","swipeAngle","atan","PI","belowAngleThreshold","overThreshold","destPos","nearestPanel","getNearestPanel","stop","moveTypeContext","axesEvent","destInfo","findTargetPanel","findRestorePanel","scrollArea","getScrollArea","loopCount","prev","originalTargetPosition","newCloneIndex","circulate","newTargetPosition","newTargetPanel","setCurrentPanel","isTrusted","updateAdaptiveSize","updateAxesPosition","IdleState","nextStateType","currentState","HoldingState","DraggingState","AnimatingState","DisabledState","onExit","onEnter","onHold","onRelease","onAnimationEnd","onFinish","_super","ctx","snapCount","eventDelta","minimumDistanceToChange","calcBrinkOfChange","shouldMoveWhenBounceIs0","canSetBoundMode","shouldMoveToAdjacent","isOutOfBound","findSnappedPanel","findAdjacentPanel","halfGap","estimatedHangerPos","panelToMove","cycleIndex","passedPanelCount","siblingPanel","panelIndex","siblingIndex","originalPanel","getOriginalPanel","panelPosition","originalPosition","defaultDuration","getCurrentIndex","get","hangerPosition","firstClonedPanel","basePanel","basePosition","adjacentPanel","targetRelativeAnchorPosition","estimatedPanelPosition","findRestorePanelInCircularMode","lapped","estimatedPosition","next","findNearestPanelAt","stateMachine","getState","currentPanelPosition","lastHangerPosition","Snap","viewportElement","relativeHangerPosition","translate","checkedIndexes","StateMachine","PanelManager","build","eventResult","axes","findNearestPanel","originalNearestPosition","checkNeedPanel","moveCoord","coord","round","join","updateSize","updateOriginalPanelPositions","updateScrollArea","clonePanels","updateClonedPanelPositions","chainAllPanels","updateCameraPosition","minimumDistance","prevPosition","nextPosition","distance","isBetween","nearest","shortestDistance","identical","anchorPosition","panInput","enable","disable","indexes","wasEmpty","newCurrentIndex","getRange","sizeToApply","panelBbox","maximum","viewportStyle","minHeight","minWidth","wrapper","destroy","status","clear","html","createPanels","playing","holding","NaN","prevRange","nextRange","nearestAnchorPos","nearestIndex","nearestSize","hangerIsNextToNearestPanel","targetPosition","progressBetween","off","on","axesHandlers","summedPanelSize","setLastIndex","handlers","applyCSSValue","setMoveType","setAxesInstance","setDefaultPanel","moveToDefaultPanel","FreeScroll","Axes","easing","interruptable","PanInput","scale","connect","append","indexRange","viewportSize","sumOriginalPanelSize","visibleAreaSize","ceil","prevCloneCount","origPanel","removeClonesAfter","defaultPanel","defaultPosition","nextPanelPos","maintainingPanel","accumulatedSize","total","clonedPanels_1","clonedPanelPos","lastReplacePosition","_b","replacePosition","arr","parsedBounce","constructor","parsedVal","axis","maxLastIndex","checkingPanel","atLastPanel","nextIndex","currentNearestPosition","triggerNeedPanel","firstIndex","cameraPrev","checkingIndex","atFirstPanel","prevIndex","params","alreadyTriggered","some","hasHandler","hasOn","eventName","canceled","progress","trigger","merge","previousPosition","inputOffset","cameraChange","looped","currentDirection","querySelector","nodeName","nodeType","currentOptions","focus","nearestPosition","current","identicals","includeClone","getAllPanels","outsetProgress","getOutsetProgress","outerHTML","restore","plugins","newPlugins","plugin","init","currentPlugins","initViewport","listenInput","listenResize","child","Viewport","eventContext","fire","connectAxesHandler","addEventListener","Flicking","Component"],"mappings":"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"}