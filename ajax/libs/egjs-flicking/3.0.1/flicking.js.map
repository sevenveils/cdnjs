{"version":3,"file":"flicking.js","sources":["../src/utils.ts","../src/consts.ts","../src/components/Panel.ts","../src/components/PanelManager.ts","../src/states/State.ts","../src/states/IdleState.ts","../src/states/HoldingState.ts","../src/states/DraggingState.ts","../src/states/AnimatingState.ts","../src/states/DisabledState.ts","../src/components/StateMachine.ts","../src/moves/MoveType.ts","../src/moves/Snap.ts","../src/moves/FreeScroll.ts","../src/components/Viewport.ts","../src/Flicking.ts"],"sourcesContent":["import { ElementLike } from \"./types\";\n\nexport function merge(target: object, ...srcs: object[]): object {\n  srcs.forEach(source => {\n    Object.keys(source).forEach(key => {\n      const value = source[key];\n      target[key] = value;\n    });\n  });\n\n  return target;\n}\n\nexport function parseElement(element: ElementLike | ElementLike[]): HTMLElement[] {\n  if (!Array.isArray(element)) {\n    element = [element];\n  }\n\n  const elements: HTMLElement[] = [];\n  element.forEach(el => {\n    if (isString(el)) {\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.innerHTML = el;\n\n      elements.push(...toArray(tempDiv.children) as HTMLElement[]);\n    } else {\n      elements.push(el as HTMLElement);\n    }\n  });\n\n  return elements;\n}\n\n// Check whether browser supports transform: translate3d\n// https://stackoverflow.com/questions/5661671/detecting-transform-translate3d-support\nexport let checkTranslateSupport = () => {\n  const transforms = {\n    webkitTransform: \"-webkit-transform\",\n    msTransform: \"-ms-transform\",\n    MozTransform: \"-moz-transform\",\n    OTransform: \"-o-transform\",\n    transform: \"transform\",\n  };\n\n  const supportedStyle = document.documentElement.style;\n  let transformName = \"\";\n  for (const prefixedTransform in transforms) {\n    if (prefixedTransform in supportedStyle) {\n      transformName = prefixedTransform;\n    }\n  }\n\n  if (!transformName) {\n    throw new Error(\"Browser doesn't support CSS3 2D Transforms.\");\n  }\n\n  const el = document.createElement(\"div\");\n\n  document.documentElement.insertBefore(el, null);\n\n  el.style[transformName] = \"translate3d(1px, 1px, 1px)\";\n  const styleVal = window.getComputedStyle(el).getPropertyValue(transforms[transformName]);\n\n  el.parentElement!.removeChild(el);\n\n  const transformInfo = {\n    name: transformName,\n    has3d: styleVal.length > 0 && styleVal !== \"none\",\n  };\n\n  checkTranslateSupport = () => transformInfo;\n\n  return transformInfo;\n};\nexport function isString(value: any): value is string {\n  return typeof value === \"string\";\n}\n// Get class list of element as string array\nexport function classList(element: HTMLElement): string[] {\n  return element.classList\n    ? toArray(element.classList)\n    : element.className.split(\" \");\n}\n\n// Add class to specified element\nexport function addClass(element: HTMLElement, className: string): void {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    if (element.className.indexOf(className) < 0) {\n      element.className = (`${element.className} ${className}`).replace(/\\s{2,}/g, \" \");\n    }\n  }\n}\n\nexport function applyCSS(element: HTMLElement, cssObj: object): void {\n  Object.keys(cssObj).forEach(property => {\n    element.style[property] = cssObj[property];\n  });\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return Math.max(Math.min(val, max), min);\n}\n\n// Min: inclusive, Max: exclusive\nexport function isBetween(val: number, min: number, max: number) {\n  return val >= min && val <= max;\n}\n\nexport interface ArrayLike<T> {\n  length: number;\n  [index: number]: T;\n}\n\nexport function toArray<T>(iterable: ArrayLike<T>): T[] {\n  return [].slice.call(iterable);\n}\n\nexport function isArray(arr: any): boolean {\n  return arr && arr.constructor === Array;\n}\n\nexport function parseArithmeticExpression(cssValue: number | string, base: number, defaultVal?: number): number {\n  // Set base / 2 to default value, if it's undefined\n  const defaultValue = defaultVal != null ? defaultVal : base / 2;\n  const cssRegex = /(?:(\\+|\\-)\\s*)?(\\d+(?:\\.\\d+)?(%|px)?)/g;\n\n  if (typeof cssValue === \"number\") {\n    return clamp(cssValue, 0, base);\n  }\n\n  let idx = 0;\n  let calculatedValue = 0;\n  let matchResult = cssRegex.exec(cssValue);\n  while (matchResult != null) {\n    let sign = matchResult[1];\n    const value = matchResult[2];\n    const unit = matchResult[3];\n\n    let parsedValue = parseFloat(value);\n\n    if (idx <= 0) {\n      sign = sign || \"+\";\n    }\n\n    // Return default value for values not in good form\n    if (!sign) {\n      return defaultValue;\n    }\n\n    if (unit === \"%\") {\n      parsedValue = (parsedValue / 100) * base;\n    }\n\n    calculatedValue += sign === \"+\"\n      ? parsedValue\n      : -parsedValue;\n\n    // Match next occurrence\n    ++idx;\n    matchResult = cssRegex.exec(cssValue);\n  }\n\n  // None-matched\n  if (idx === 0) {\n    return defaultValue;\n  }\n\n  // Clamp between 0 ~ base\n  return clamp(calculatedValue, 0, base);\n}\n\nexport function getProgress(pos: number, range: number[]) {\n  // start, anchor, end\n  // -1 , 0 , 1\n  const [min, center, max] = range;\n\n  if (pos > center && (max - center)) {\n    // 0 ~ 1\n    return (pos - center) / (max - center);\n  } else if (pos < center && (center - min)) {\n    // -1 ~ 0\n    return (pos - center) / (center - min);\n  } else if (pos !== center && max - min) {\n    return (pos - min) / (max - min);\n  }\n  return 0;\n}\n\nexport function findIndex<T>(iterable: T[], callback: (el: T) => boolean): number {\n  for (let i = 0; i < iterable.length; i += 1) {\n    const element = iterable[i];\n    if (element && callback(element)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n// return [0, 1, ...., max - 1]\nexport function counter(max: number): number[] {\n  const counterArray: number[] = [];\n  for (let i = 0; i < max; i += 1) {\n    counterArray[i] = i;\n  }\n  return counterArray;\n}\n\n// Circulate number between range [min, max]\n/*\n * \"indexed\" means min and max is not same, so if it's true \"min - 1\" should be max\n * While if it's false, \"min - 1\" should be \"max - 1\"\n * use `indexed: true` when it should be used for circulating integers like index\n * or `indexed: false` when it should be used for something like positions.\n */\nexport function circulate(value: number, min: number, max: number, indexed: boolean): number {\n  const size = indexed\n    ? max - min + 1\n    : max - min;\n  if (value < min) {\n    const offset = indexed\n      ? (min - value - 1) % size\n      : (min - value) % size;\n    value = max - offset;\n  } else if (value > max) {\n    const offset = indexed\n      ? (value - max - 1) % size\n      : (value - max) % size;\n    value = min + offset;\n  }\n\n  return value;\n}\n","import { FlickingOptions, EventType, Direction, AxesEventType, StateType, MoveTypeSnapOption, MoveTypeFreeScrollOption } from \"./types\";\nimport { checkTranslateSupport } from \"./utils\";\n\nexport const MOVE_TYPE: {\n  SNAP: \"snap\";\n  FREE_SCROLL: \"freeScroll\";\n} = {\n  SNAP: \"snap\",\n  FREE_SCROLL: \"freeScroll\",\n};\n\nexport const DEFAULT_MOVE_TYPE_OPTIONS: {\n  snap: MoveTypeSnapOption,\n  freeScroll: MoveTypeFreeScrollOption,\n} = {\n  snap: {\n    type: \"snap\",\n    count: 1,\n  },\n  freeScroll: {\n    type: \"freeScroll\",\n  },\n};\n\nexport const DEFAULT_OPTIONS: Readonly<FlickingOptions> = {\n  classPrefix: \"eg-flick\",\n  deceleration: 0.0075,\n  horizontal: true,\n  circular: false,\n  infinite: false,\n  infiniteThreshold: 0,\n  lastIndex: Infinity,\n  threshold: 40,\n  duration: 100,\n  panelEffect: x => 1 - Math.pow(1 - x, 3),\n  defaultIndex: 0,\n  inputType: [\"touch\", \"mouse\"],\n  thresholdAngle: 45,\n  bounce: 10,\n  autoResize: false,\n  adaptive: false,\n  zIndex: 2000,\n  bound: false,\n  overflow: false,\n  hanger: \"50%\",\n  anchor: \"50%\",\n  gap: 0,\n  moveType: DEFAULT_MOVE_TYPE_OPTIONS.snap,\n};\n\nexport const DEFAULT_VIEWPORT_CSS = {\n  position: \"relative\",\n  zIndex: DEFAULT_OPTIONS.zIndex,\n  width: \"100%\",\n  height: \"100%\",\n  // willChange: \"transform\",\n  overflow: \"hidden\",\n};\n\nexport const DEFAULT_CAMERA_CSS = {\n  width: \"100%\",\n  height: \"100%\",\n  willChange: \"transform\",\n};\n\nexport const DEFAULT_PANEL_CSS = {\n  position: \"absolute\",\n};\n\nexport const EVENTS: EventType = {\n  HOLD_START: \"holdStart\",\n  HOLD_END: \"holdEnd\",\n  MOVE_START: \"moveStart\",\n  MOVE: \"move\",\n  MOVE_END: \"moveEnd\",\n  CHANGE: \"change\",\n  RESTORE: \"restore\",\n  SELECT: \"select\",\n  NEED_PANEL: \"needPanel\",\n};\n\nexport const AXES_EVENTS: AxesEventType = {\n  HOLD: \"hold\",\n  CHANGE: \"change\",\n  RELEASE: \"release\",\n  ANIMATION_END: \"animationEnd\",\n  FINISH: \"finish\",\n};\n\nexport const STATE_TYPE: StateType = {\n  IDLE: 0,\n  HOLDING: 1,\n  DRAGGING: 2,\n  ANIMATING: 3,\n  DISABLED: 4,\n};\n\nexport const DIRECTION: Direction = {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\",\n};\n\nexport const TRANSFORM = checkTranslateSupport();\n","import Viewport from \"./Viewport\";\nimport { OriginalStyle, FlickingPanel, ElementLike } from \"../types\";\nimport { DEFAULT_PANEL_CSS, EVENTS } from \"../consts\";\nimport { addClass, applyCSS, parseArithmeticExpression, parseElement, getProgress } from \"../utils\";\n\nclass Panel implements FlickingPanel {\n  public prevSibling: Panel | null;\n  public nextSibling: Panel | null;\n\n  private element: HTMLElement;\n  private viewport: Viewport;\n  private state: {\n    index: number;\n    position: number;\n    relativeAnchorPosition: number;\n    size: number;\n    isClone: boolean;\n    // Index of cloned panel, zero-based integer(original: -1, cloned: [0, 1, 2, ...])\n    // if cloneIndex is 0, that means it's first cloned panel of original panel\n    cloneIndex: number;\n    originalStyle: OriginalStyle;\n    clonedPanels: Panel[];\n    cachedBbox: ClientRect | null;\n  };\n  private original?: Panel;\n\n  public constructor(\n    element: HTMLElement,\n    index: number,\n    viewport: Viewport,\n  ) {\n    this.element = element;\n    this.viewport = viewport;\n    this.prevSibling = null;\n    this.nextSibling = null;\n\n    this.state = {\n      index,\n      position: 0,\n      relativeAnchorPosition: 0,\n      size: 0,\n      clonedPanels: [],\n      isClone: false,\n      cloneIndex: -1,\n      originalStyle: {\n        className: element.getAttribute(\"class\") || null,\n        style: element.getAttribute(\"style\") || null,\n      },\n      cachedBbox: null,\n    };\n\n    const options = viewport.options;\n\n    if (options.classPrefix) {\n      addClass(element, `${options.classPrefix}-panel`);\n    }\n\n    // Update size info after applying panel css\n    applyCSS(this.element, DEFAULT_PANEL_CSS);\n  }\n\n  public resize(): void {\n    const state = this.state;\n    const options = this.viewport.options;\n    const bbox = this.getBbox();\n\n    state.size = options.horizontal\n      ? bbox.width\n      : bbox.height;\n    state.relativeAnchorPosition = parseArithmeticExpression(options.anchor, state.size);\n\n    if (!state.isClone) {\n      state.clonedPanels.forEach(panel => panel.resize());\n    }\n  }\n\n  public unCacheBbox(): void {\n    this.state.cachedBbox = null;\n  }\n\n  public getProgress() {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const panelCount = viewport.panelManager.getPanelCount();\n    const scrollAreaSize = viewport.getScrollAreaSize();\n\n    const relativeIndex = (options.circular ? Math.floor(this.getPosition() / scrollAreaSize) * panelCount : 0) + this.getIndex();\n    const progress = relativeIndex - viewport.getCurrentProgress();\n\n    return progress;\n  }\n\n  public getOutsetProgress() {\n    const viewport = this.viewport;\n    const outsetRange = [\n      -this.getSize(),\n      viewport.getRelativeHangerPosition() - this.getRelativeAnchorPosition(),\n      viewport.getSize(),\n    ];\n    const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n    const outsetProgress = getProgress(relativePanelPosition, outsetRange);\n\n    return outsetProgress;\n  }\n\n  public getVisibleRatio() {\n    const viewport = this.viewport;\n    const panelSize = this.getSize();\n    const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n    const rightRelativePanelPosition = relativePanelPosition + panelSize;\n\n    const visibleSize = Math.min(viewport.getSize(), rightRelativePanelPosition) - Math.max(relativePanelPosition, 0);\n    const visibleRatio = visibleSize >= 0\n      ? visibleSize / panelSize\n      : 0;\n\n    return visibleRatio;\n  }\n\n  public focus(duration?: number): void {\n    const viewport = this.viewport;\n    const currentPanel = viewport.getCurrentPanel();\n    const hangerPosition = viewport.getHangerPosition();\n    const anchorPosition = this.getAnchorPosition();\n    if (hangerPosition === anchorPosition || !currentPanel) {\n      return;\n    }\n\n    const currentPosition = currentPanel.getPosition();\n    const eventType = currentPosition === this.getPosition()\n      ? \"\"\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(this, viewport.findEstimatedPosition(this), eventType, null, duration);\n  }\n\n  public update(updateFunction: (element: HTMLElement) => any): void {\n    this.getIdenticalPanels()\n      .forEach(eachPanel => {\n        updateFunction(eachPanel.getElement());\n        eachPanel.unCacheBbox();\n      });\n    this.viewport.resize();\n  }\n\n  public prev(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const prevSibling = this.prevSibling;\n\n    if (!prevSibling) {\n      return null;\n    }\n\n    const currentIndex = this.getIndex();\n    const currentPosition = this.getPosition();\n    const prevPanelIndex = prevSibling.getIndex();\n    const prevPanelPosition = prevSibling.getPosition();\n    const prevPanelSize = prevSibling.getSize();\n\n    const hasEmptyPanelBetween = currentIndex - prevPanelIndex > 1;\n    const notYetMinPanel = options.infinite\n      && currentIndex > 0\n      && prevPanelIndex > currentIndex;\n\n    if (hasEmptyPanelBetween || notYetMinPanel) {\n      // Empty panel exists between\n      return null;\n    }\n\n    const newPosition = currentPosition - prevPanelSize - options.gap;\n\n    let prevPanel = prevSibling;\n    if (prevPanelPosition !== newPosition) {\n      prevPanel = prevSibling.clone(prevSibling.getCloneIndex(), true);\n      prevPanel.setPosition(newPosition, true);\n    }\n\n    return prevPanel;\n  }\n\n  public next(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const nextSibling = this.nextSibling;\n    const lastIndex = viewport.panelManager.getLastIndex();\n\n    if (!nextSibling) {\n      return null;\n    }\n\n    const currentIndex = this.getIndex();\n    const currentPosition = this.getPosition();\n    const nextPanelIndex = nextSibling.getIndex();\n    const nextPanelPosition = nextSibling.getPosition();\n\n    const hasEmptyPanelBetween = nextPanelIndex - currentIndex > 1;\n    const notYetMaxPanel = options.infinite\n      && currentIndex < lastIndex\n      && nextPanelIndex < currentIndex;\n\n    if (hasEmptyPanelBetween || notYetMaxPanel) {\n      return null;\n    }\n\n    const newPosition = currentPosition + this.getSize() + options.gap;\n\n    let nextPanel = nextSibling;\n    if (nextPanelPosition !== newPosition) {\n      nextPanel = nextSibling.clone(nextSibling.getCloneIndex(), true);\n      nextPanel.setPosition(newPosition, true);\n    }\n\n    return nextPanel;\n  }\n\n  public insertBefore(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n    const parsedElements = parseElement(element);\n    const firstPanel = viewport.panelManager.firstPanel()!;\n    const prevSibling = this.prevSibling;\n    // Finding correct inserting index\n    // While it should insert removing empty spaces,\n    // It also should have to be bigger than prevSibling' s index\n    const targetIndex = prevSibling && firstPanel.getIndex() !== this.getIndex()\n      ? Math.max(prevSibling.getIndex() + 1, this.getIndex() - parsedElements.length)\n      : Math.max(this.getIndex() - parsedElements.length, 0);\n\n    return viewport.insert(targetIndex, parsedElements);\n  }\n\n  public insertAfter(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    return this.viewport.insert(this.getIndex() + 1, element);\n  }\n\n  public remove(): FlickingPanel {\n    this.viewport.remove(this.getIndex());\n\n    return this;\n  }\n\n  public destroy(): void {\n    const el = this.element;\n    const originalStyle = this.state.originalStyle;\n\n    originalStyle.className\n      ? el.setAttribute(\"class\", originalStyle.className)\n      : el.removeAttribute(\"class\");\n    originalStyle.style\n      ? el.setAttribute(\"style\", originalStyle.style)\n      : el.removeAttribute(\"style\");\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public getElement(): HTMLElement {\n    return this.element;\n  }\n\n  public getAnchorPosition(): number {\n    return this.state.position + this.state.relativeAnchorPosition;\n  }\n\n  public getRelativeAnchorPosition(): number {\n    return this.state.relativeAnchorPosition;\n  }\n\n  public getIndex(): number {\n    return this.state.index;\n  }\n\n  public getPosition(): number {\n    return this.state.position;\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getBbox(): ClientRect {\n    const state = this.state;\n    if (!state.cachedBbox) {\n      state.cachedBbox = this.element.getBoundingClientRect();\n    }\n    return state.cachedBbox;\n  }\n\n  public isClone(): boolean {\n    return this.state.isClone;\n  }\n\n  public getCloneIndex(): number {\n    return this.state.cloneIndex;\n  }\n\n  public getClonedPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getClonedPanels()\n      : state.clonedPanels;\n  }\n\n  public getIdenticalPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getIdenticalPanels()\n      : [this, ...state.clonedPanels];\n  }\n\n  public getOriginalPanel(): Panel {\n    return this.state.isClone\n      ? this.original!\n      : this;\n  }\n\n  public setIndex(index: number): void {\n    const state = this.state;\n\n    state.index = index;\n    state.clonedPanels.forEach(panel => panel.state.index = index);\n  }\n\n  public setPosition(pos: number, virtual: boolean = false): this {\n    const state = this.state;\n    const options = this.viewport.options;\n    const elementStyle = this.element.style;\n\n    state.position = pos;\n    if (!virtual) {\n      options.horizontal\n        ? elementStyle.left = `${pos}px`\n        : elementStyle.top = `${pos}px`;\n    }\n\n    return this;\n  }\n\n  public clone(cloneIndex: number, virtual: boolean = false): Panel {\n    const state = this.state;\n\n    const cloneElement = virtual\n      ? this.element\n      : this.element.cloneNode(true) as HTMLElement;\n    const clonedPanel = new Panel(cloneElement, state.index, this.viewport);\n    const clonedState = clonedPanel.state;\n\n    clonedPanel.original = this;\n    clonedState.isClone = true;\n    clonedState.cloneIndex = cloneIndex;\n    // Inherit some state values\n    clonedState.size = state.size;\n    clonedState.relativeAnchorPosition = state.relativeAnchorPosition;\n    clonedState.originalStyle = state.originalStyle;\n    clonedState.cachedBbox = state.cachedBbox;\n\n    if (!virtual) {\n      state.clonedPanels.push(clonedPanel);\n    } else {\n      clonedPanel.prevSibling = this.prevSibling;\n      clonedPanel.nextSibling = this.nextSibling;\n    }\n\n    return clonedPanel;\n  }\n\n  public removeElement(): void {\n    const element = this.element;\n    element.parentNode!.removeChild(element);\n\n    // Do the same thing for clones\n    if (!this.state.isClone) {\n      this.removeClonedPanelsAfter(0);\n    }\n  }\n\n  public removeClonedPanelsAfter(start: number): void {\n    const state = this.state;\n    const removingPanels = state.clonedPanels.splice(start);\n\n    removingPanels.forEach(panel => {\n      panel.removeElement();\n    });\n  }\n}\n\nexport default Panel;\n","import Panel from \"./Panel\";\nimport { FlickingOptions } from \"../types\";\nimport { findIndex, counter } from \"../utils\";\n\nclass PanelManager {\n  private cameraElement: HTMLElement;\n  private panels: Panel[];\n  private clones: Panel[][];\n  // index range of existing panels\n  private range: {\n    min: number;\n    max: number;\n  };\n  private length: number;\n  private lastIndex: number;\n  private options: FlickingOptions;\n\n  constructor(\n    cameraElement: HTMLElement,\n    options: FlickingOptions,\n  ) {\n    this.cameraElement = cameraElement;\n    this.panels = [];\n    this.clones = [];\n    this.range = {\n      min: -1,\n      max: -1,\n    };\n    this.length = 0;\n    this.options = options;\n    this.lastIndex = options.lastIndex;\n  }\n\n  public firstPanel(): Panel | undefined {\n    return this.panels[this.range.min];\n  }\n\n  public lastPanel(): Panel | undefined {\n    return this.panels[this.range.max];\n  }\n\n  public allPanels(): ReadonlyArray<Panel> {\n    return [\n      ...this.panels,\n      ...this.clonedPanels(),\n    ];\n  }\n\n  public originalPanels(): ReadonlyArray<Panel> {\n    return this.panels;\n  }\n\n  public clonedPanels(): ReadonlyArray<Panel> {\n    return this.clones.reduce((allClones, clones) => [...allClones, ...clones], []);\n  }\n\n  public has(index: number): boolean {\n    return !!this.panels[index];\n  }\n\n  public get(index: number): Panel | undefined {\n    return this.panels[index];\n  }\n\n  public getPanelCount(): number {\n    return this.length;\n  }\n\n  public getLastIndex(): number {\n    return this.lastIndex;\n  }\n\n  public getRange(): Readonly<{ min: number, max: number }> {\n    return this.range;\n  }\n\n  public getCloneCount(): number {\n    return this.clones.length;\n  }\n\n  public setLastIndex(lastIndex: number): void {\n    this.lastIndex = lastIndex;\n\n    const firstPanel = this.firstPanel();\n    const lastPanel = this.lastPanel();\n\n    if (!firstPanel || !lastPanel) {\n      return; // no meaning of updating range & length\n    }\n\n    // Remove panels above new last index\n    const range = this.range;\n    if (lastPanel.getIndex() > lastIndex) {\n      const removingPanels = this.panels.splice(lastIndex + 1);\n      removingPanels.forEach(panel => panel.removeElement());\n      this.length -= removingPanels.length;\n\n      const firstRemovedPanel = removingPanels.filter(panel => !!panel)[0];\n      const possibleLastPanel = firstRemovedPanel.prevSibling;\n      if (possibleLastPanel) {\n        range.max = possibleLastPanel.getIndex();\n      } else {\n        range.min = -1;\n        range.max = -1;\n      }\n    }\n  }\n\n  public append(newPanels: Panel[]): void {\n    const range = this.range;\n    this.panels.push(...newPanels);\n\n    if (newPanels.length > 0) {\n      range.min = Math.max(0, range.min);\n      range.max += newPanels.length;\n      this.length += newPanels.length;\n    }\n  }\n\n  // Insert at index\n  // Returns pushed elements from index, inserting at 'empty' position doesn't push elements behind it\n  public insert(index: number, newPanels: Panel[]): number {\n    const panels = this.panels;\n    const range = this.range;\n    const cameraElement = this.cameraElement;\n    const isCircular = this.options.circular;\n    const lastIndex = this.lastIndex;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    const fragment = document.createDocumentFragment();\n    newPanels.forEach(panel => fragment.appendChild(panel.getElement()));\n    cameraElement.insertBefore(fragment, siblingElement);\n\n    let pushedIndex = newPanels.length;\n    // Like when setting index 50 while visible panels are 0, 1, 2\n    if (index > range.max) {\n      newPanels.forEach((panel, offset) => {\n        panels[index + offset] = panel;\n      });\n    } else {\n      const panelsAfterIndex = panels.slice(index, index + newPanels.length);\n      // Find empty from beginning\n      let emptyPanelCount = findIndex(panelsAfterIndex, panel => !!panel);\n      if (emptyPanelCount < 0) {\n        // All empty\n        emptyPanelCount = panelsAfterIndex.length;\n      }\n      pushedIndex = newPanels.length - emptyPanelCount;\n\n      // Insert removing empty panels\n      panels.splice(index, emptyPanelCount, ...newPanels);\n\n      // Remove panels after last index\n      if (panels.length > lastIndex + 1) {\n        const removedPanels = panels.splice(lastIndex + 1)\n          .filter(panel => Boolean(panel));\n        removedPanels.forEach(panel => panel.removeElement());\n        this.length -= removedPanels.length;\n\n        // Find first\n        const newLastIndex = lastIndex - findIndex(this.panels.concat().reverse(), panel => !!panel);\n\n        // Can be filled with empty after newLastIndex\n        this.panels.splice(newLastIndex + 1);\n        this.range.max = newLastIndex;\n      }\n    }\n\n    // Update index of previous panels\n    if (pushedIndex > 0) {\n      panels.slice(index + newPanels.length).forEach(panel => {\n        panel.setIndex(panel.getIndex() + pushedIndex);\n      });\n    }\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length - pushedIndex, nextSibling);\n    }\n\n    // Update state\n    this.length += newPanels.length;\n    this.updateIndex(index);\n\n    return pushedIndex;\n  }\n\n  public replace(index: number, newPanels: Panel[]): void {\n    const panels = this.panels;\n    const range = this.range;\n    const cameraElement = this.cameraElement;\n    const isCircular = this.options.circular;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index + newPanels.length);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    const fragment = document.createDocumentFragment();\n    newPanels.forEach(panel => fragment.appendChild(panel.getElement()));\n    cameraElement.insertBefore(fragment, siblingElement);\n\n    if (index > range.max) {\n      // Temporarily insert null at index to use splice()\n      (panels[index] as any) = null;\n    }\n\n    const replacedPanels = panels.splice(index, newPanels.length, ...newPanels);\n    const wasNonEmptyCount = replacedPanels.filter(panel => Boolean(panel)).length;\n    replacedPanels.forEach(panel => {\n      if (panel) {\n        panel.removeElement();\n      }\n    });\n\n    // Suppose inserting [1, 2, 3] at 0 position when there were [empty, 1]\n    // So length should be increased by 3(inserting panels) - 1(non-empty panels)\n    this.length += newPanels.length - wasNonEmptyCount;\n    this.updateIndex(index);\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length, nextSibling);\n    }\n  }\n\n  public remove(index: number, deleteCount: number = 1): Panel[] {\n    const isCircular = this.options.circular;\n    const panels = this.panels;\n    const clones = this.clones;\n    // Delete count should be equal or larger than 0\n    deleteCount = Math.max(deleteCount, 0);\n\n    const deletedPanels = panels\n      .splice(index, deleteCount)\n      .filter(panel => !!panel);\n\n    deletedPanels.forEach(panel => {\n      panel.removeElement();\n    });\n\n    if (isCircular) {\n      clones.forEach(cloneSet => {\n        cloneSet.splice(index, deleteCount);\n      });\n    }\n\n    // Update indexes\n    panels\n      .slice(index)\n      .forEach(panel => {\n        panel.setIndex(panel.getIndex() - deleteCount);\n      });\n\n    // Check last panel is empty\n    let lastIndex = panels.length - 1;\n    if (!panels[lastIndex]) {\n      const reversedPanels = panels.concat().reverse();\n      const nonEmptyIndexFromLast = findIndex(reversedPanels, panel => !!panel);\n      lastIndex = nonEmptyIndexFromLast < 0\n        ? -1 // All empty\n        : lastIndex - nonEmptyIndexFromLast;\n\n      // Remove all empty panels from last\n      panels.splice(lastIndex + 1);\n      if (isCircular) {\n        clones.forEach(cloneSet => {\n          cloneSet.splice(lastIndex + 1);\n        });\n      }\n    }\n\n    // Update range & length\n    this.range = {\n      min: findIndex(panels, panel => !!panel),\n      max: lastIndex,\n    };\n    this.length -= deletedPanels.length;\n\n    if (this.length <= 0) {\n      // Reset clones\n      this.clones = [];\n    }\n\n    return deletedPanels;\n  }\n\n  public chainAllPanels() {\n    const allPanels = this.allPanels().filter(panel => !!panel);\n    const allPanelsCount = allPanels.length;\n\n    if (allPanelsCount <= 0) {\n      return;\n    }\n\n    allPanels.forEach((panel, idx) => {\n      const prevPanel = (idx > 0)\n        ? allPanels[idx - 1]\n        : null;\n\n      const nextPanel = (idx < allPanelsCount - 1)\n        ? allPanels[idx + 1]\n        : null;\n\n      panel.prevSibling = prevPanel;\n      panel.nextSibling = nextPanel;\n    });\n\n    if (this.options.circular) {\n      const firstPanel = allPanels[0];\n      const lastPanel = allPanels[allPanelsCount - 1];\n\n      firstPanel.prevSibling = lastPanel;\n      lastPanel.nextSibling = firstPanel;\n    }\n  }\n\n  public insertClones(cloneIndex: number, index: number, clonedPanels: Panel[], deleteCount: number = 0): void {\n    const clones = this.clones;\n    const lastIndex = this.lastIndex;\n\n    if (!clones[cloneIndex]) {\n      const newClones: Panel[] = [];\n      clonedPanels.forEach((panel, offset) => {\n        newClones[index + offset] = panel;\n      });\n\n      clones[cloneIndex] = newClones;\n    } else {\n      const insertTarget = clones[cloneIndex];\n\n      if (index >= insertTarget.length) {\n        clonedPanels.forEach((panel, offset) => {\n          insertTarget[index + offset] = panel;\n        });\n      } else {\n        insertTarget.splice(index, deleteCount, ...clonedPanels);\n        // Remove panels after last index\n        if (clonedPanels.length > lastIndex + 1) {\n          clonedPanels.splice(lastIndex + 1);\n        }\n      }\n    }\n  }\n\n  // clones are operating in set\n  public removeClonesAfter(cloneIndex: number): void {\n    const panels = this.panels;\n    panels.forEach(panel => {\n      panel.removeClonedPanelsAfter(cloneIndex);\n    });\n    this.clones.splice(cloneIndex);\n  }\n\n  // Clear both original & cloned\n  public clear(): void {\n    this.panels.forEach(panel => {\n      panel.removeElement();\n    });\n\n    this.panels = [];\n    this.clones = [];\n    this.length = 0;\n    this.range = {\n      min: -1,\n      max: -1,\n    };\n  }\n\n  public clearClone(): void {\n    this.panels.forEach(panel => {\n      panel.removeClonedPanelsAfter(0);\n    });\n    this.clones = [];\n  }\n\n  public findPanelOf(element: HTMLElement): Panel | undefined {\n    const allPanels = this.allPanels();\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const panelElement = panel.getElement();\n      if (panelElement.contains(element)) {\n        return panel;\n      }\n    }\n  }\n\n  public findFirstPanelFrom(index: number): Panel | undefined {\n    for (const panel of this.panels) {\n      if (panel && panel.getIndex() >= index) {\n        return panel;\n      }\n    }\n  }\n\n  private addNewClones(index: number, originalPanels: Panel[], deleteCount: number, nextSibling: Panel | undefined) {\n    const cameraElement = this.cameraElement;\n    const cloneCount = this.getCloneCount();\n    const lastPanel = this.lastPanel();\n    const lastPanelClones: Panel[] = lastPanel\n      ? lastPanel.getClonedPanels()\n      : [];\n    const nextSiblingClones: Panel[] = nextSibling\n      ? nextSibling.getClonedPanels()\n      : [];\n\n    for (const cloneIndex of counter(cloneCount)) {\n      const cloneNextSibling = nextSiblingClones[cloneIndex];\n      const lastPanelSibling = lastPanelClones[cloneIndex];\n\n      const cloneSiblingElement = cloneNextSibling\n        ? cloneNextSibling.getElement()\n        : lastPanelSibling\n          ? lastPanelSibling.getElement().nextElementSibling\n          : null;\n\n      const newClones = originalPanels.map(panel => {\n        const clone = panel.clone(cloneIndex);\n\n        cameraElement.insertBefore(clone.getElement(), cloneSiblingElement);\n        return clone;\n      });\n\n      this.insertClones(cloneIndex, index, newClones, deleteCount);\n    }\n  }\n\n  private updateIndex(insertingIndex: number) {\n    const panels = this.panels;\n    const range = this.range;\n\n    const newLastIndex = panels.length - 1;\n    if (newLastIndex > range.max) {\n      range.max = newLastIndex;\n    }\n    if (insertingIndex < range.min || range.min < 0) {\n      range.min = insertingIndex;\n    }\n  }\n}\n\nexport default PanelManager;\n","import Panel from \"../components/Panel\";\nimport { ValueOf, Direction, StateType, FlickingContext } from \"../types\";\n\nabstract class State {\n  public delta: number = 0;\n  public direction: ValueOf<Direction> | null = null;\n  public targetPanel: Panel | null = null;\n  public lastPosition: number = 0;\n  public abstract readonly type: ValueOf<StateType>;\n  public abstract readonly holding: boolean;\n  public abstract readonly playing: boolean;\n\n  public onEnter(prevState: State): void {\n    this.delta = prevState.delta;\n    this.direction = prevState.direction;\n    this.targetPanel = prevState.targetPanel;\n    this.lastPosition = prevState.lastPosition;\n  }\n  public onExit(nextState: State): void {\n    // DO NOTHING\n  }\n  public onHold(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onChange(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onRelease(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onAnimationEnd(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onFinish(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n}\n\nexport default State;\n","import State from \"./State\";\nimport { EVENTS, STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass IdleState extends State {\n  public readonly type = STATE_TYPE.IDLE;\n  public readonly holding = false;\n  public readonly playing = false;\n\n  public onEnter() {\n    this.direction = null;\n    this.targetPanel = null;\n    this.delta = 0;\n    this.lastPosition = 0;\n  }\n\n  public onHold(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Shouldn't do any action until any panels on flicking area\n    if (flicking.getPanelCount() <= 0) {\n      transitTo(STATE_TYPE.DISABLED);\n      return;\n    }\n\n    this.lastPosition = viewport.getCameraPosition();\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.HOLDING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  // By methods call\n  public onChange(e: any, context: FlickingContext): void {\n    const { triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.MOVE_START, e, false)\n      .onSuccess(() => {\n        // Trigger AnimatingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.ANIMATING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n}\n\nexport default IdleState;\n","import State from \"./State\";\nimport { STATE_TYPE, EVENTS, DIRECTION } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass HoldingState extends State {\n  public readonly type = STATE_TYPE.HOLDING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  private releaseEvent: any = null;\n\n  public onChange(e: any, context: FlickingContext): void {\n    const { flicking, triggerEvent, transitTo } = context;\n\n    const offset = flicking.options.horizontal\n      ? e.inputEvent.offsetX\n      : e.inputEvent.offsetY;\n    this.direction = offset < 0\n      ? DIRECTION.NEXT\n      : DIRECTION.PREV;\n\n    triggerEvent(EVENTS.MOVE_START, e, true)\n      .onSuccess(() => {\n        // Trigger DraggingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.DRAGGING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { viewport, triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    if (e.delta.flick !== 0) {\n      // Sometimes \"release\" event on axes triggered before \"change\" event\n      // Especially if user flicked panel fast in really short amount of time\n      // if delta is not zero, that means above case happened.\n\n      // Event flow should be HOLD_START -> MOVE_START -> MOVE -> HOLD_END\n      // At least one move event should be included between holdStart and holdEnd\n      e.setTo({ flick: viewport.getCameraPosition() }, 0);\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Can't handle select event here,\n    // As \"finish\" axes event happens\n    this.releaseEvent = e;\n  }\n\n  public onFinish(e: any, { viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Should transite to IDLE state before select event\n    // As user expects hold is already finished\n    transitTo(STATE_TYPE.IDLE);\n\n    if (!this.releaseEvent) {\n      return;\n    }\n\n    // Handle release event here\n    // To prevent finish event called twice\n    const releaseEvent = this.releaseEvent;\n\n    // Static click\n    const clickedElement = releaseEvent.inputEvent.srcEvent.target;\n    const clickedPanel = viewport.panelManager.findPanelOf(clickedElement);\n    const cameraPosition = viewport.getCameraPosition();\n\n    if (clickedPanel) {\n      const clickedPanelPosition = clickedPanel.getPosition();\n      const direction = clickedPanelPosition > cameraPosition\n        ? DIRECTION.NEXT\n        : clickedPanelPosition < cameraPosition\n          ? DIRECTION.PREV\n          : null;\n\n      // Don't provide axes event, to use axes instance instead\n      triggerEvent(EVENTS.SELECT, null, true, {\n        direction, // Direction to the clicked panel\n        index: clickedPanel.getIndex(),\n        panel: clickedPanel,\n      });\n    }\n  }\n}\n\nexport default HoldingState;\n","import State from \"./State\";\nimport { STATE_TYPE, EVENTS, MOVE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass DraggingState extends State {\n  public readonly type = STATE_TYPE.DRAGGING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { flicking, viewport, triggerEvent, transitTo, stopCamera } = context;\n\n    const delta = this.delta;\n    const options = flicking.options;\n    const horizontal = options.horizontal;\n    const moveType = viewport.moveType;\n    const isFreeScroll = moveType.is(MOVE_TYPE.FREE_SCROLL);\n    const inputEvent = e.inputEvent;\n\n    const velocity = horizontal\n      ? inputEvent.velocityX\n      : inputEvent.velocityY;\n    const inputDelta = horizontal\n      ? inputEvent.deltaX\n      : inputEvent.deltaY;\n    const isNextDirection = Math.abs(velocity) > 1\n      ? velocity < 0\n      : Math.abs(delta) > 0\n        ? delta > 0\n        : inputDelta < 0;\n\n    const swipeDistance = Math.max(Math.abs(delta), Math.abs(inputDelta));\n    const swipeAngle = inputEvent.deltaX\n      ? Math.abs(180 * Math.atan(inputEvent.deltaY / inputEvent.deltaX) / Math.PI)\n      : 90;\n    const belowAngleThreshold = horizontal\n      ? swipeAngle <= options.thresholdAngle\n      : swipeAngle > options.thresholdAngle;\n    const overThreshold = swipeDistance >= options.threshold\n      && belowAngleThreshold;\n\n    // Update last position to cope with Axes's animating behavior\n    // Axes uses start position when animation start\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    const targetPanel = this.targetPanel;\n    if (!overThreshold && targetPanel) {\n      // Interrupted while animating\n      const destPos = isFreeScroll\n        ? e.destPos.flick\n        : viewport.findEstimatedPosition(targetPanel);\n      viewport.moveTo(targetPanel, destPos, \"\", e);\n      transitTo(STATE_TYPE.ANIMATING);\n      return;\n    }\n\n    const currentPanel = viewport.getCurrentPanel();\n    const nearestPanel = viewport.getNearestPanel();\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      e.stop();\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    const moveTypeContext = {\n      viewport,\n      axesEvent: e,\n      swipeDistance,\n      isNextDirection,\n    };\n\n    const destInfo = overThreshold\n      ? moveType.findTargetPanel(moveTypeContext)\n      : moveType.findRestorePanel(moveTypeContext);\n\n    viewport.moveTo(\n      destInfo.panel,\n      destInfo.destPos,\n      destInfo.eventType,\n      e,\n      destInfo.duration,\n    ).onSuccess(() => {\n      transitTo(STATE_TYPE.ANIMATING);\n    }).onStopped(() => {\n      transitTo(STATE_TYPE.DISABLED);\n      stopCamera(e);\n    });\n  }\n}\n\nexport default DraggingState;\n","import State from \"./State\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext } from \"../types\";\nimport { circulate } from \"../utils\";\n\nclass AnimatingState extends State {\n  public readonly type = STATE_TYPE.ANIMATING;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onHold(e: any, { viewport, triggerEvent, transitTo }: FlickingContext): void {\n    const options = viewport.options;\n    const scrollArea = viewport.getScrollArea();\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    const loopCount = Math.floor((this.lastPosition + this.delta - scrollArea.prev) / scrollAreaSize);\n\n    const targetPanel = this.targetPanel;\n    if (options.circular && loopCount !== 0 && targetPanel) {\n      const cloneCount = viewport.panelManager.getCloneCount();\n      const originalTargetPosition = targetPanel.getPosition();\n\n      // cloneIndex is from -1 to cloneCount - 1\n      const newCloneIndex = circulate(targetPanel.getCloneIndex() - loopCount, -1, cloneCount - 1, true);\n      const newTargetPosition = originalTargetPosition - loopCount * scrollAreaSize;\n      const newTargetPanel = targetPanel.getIdenticalPanels()[newCloneIndex + 1].clone(newCloneIndex, true);\n\n      // Set new target panel considering looped count\n      newTargetPanel.setPosition(newTargetPosition, true);\n      this.targetPanel = newTargetPanel;\n    }\n\n    // Reset last position and delta\n    this.delta = 0;\n    this.lastPosition = viewport.getCameraPosition();\n\n    // Update current panel as current nearest panel\n    viewport.setCurrentPanel(viewport.getNearestPanel()!);\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.DRAGGING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onFinish(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext) {\n    const isTrusted = e && e.isTrusted;\n\n    viewport.options.bound\n      ? viewport.setCurrentPanel(this.targetPanel!)\n      : viewport.setCurrentPanel(viewport.getNearestPanel()!);\n    transitTo(STATE_TYPE.IDLE);\n    triggerEvent(EVENTS.MOVE_END, e, isTrusted, {\n      direction: this.direction,\n    });\n\n    if (flicking.options.adaptive) {\n      viewport.updateAdaptiveSize();\n    }\n  }\n}\n\nexport default AnimatingState;\n","import State from \"./State\";\nimport { STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass DisabledState extends State {\n  public readonly type = STATE_TYPE.DISABLED;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onAnimationEnd(e: any, { transitTo }: FlickingContext): void {\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onChange(e: any, { viewport, transitTo }: FlickingContext): void {\n    // Can stop Axes's change event\n    e.stop();\n\n    // Should update axes position as it's already changed at this moment\n    viewport.updateAxesPosition(viewport.getCameraPosition());\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onRelease(e: any, { transitTo }: FlickingContext): void {\n    // This is needed when stopped hold start event\n    if (e.delta.flick === 0) {\n      transitTo(STATE_TYPE.IDLE);\n    }\n  }\n}\n\nexport default DisabledState;\n","import State from \"../states/State\";\nimport { AxesEventType, ValueOf, FlickingContext, StateType } from \"../types\";\nimport { AXES_EVENTS, STATE_TYPE } from \"../consts\";\nimport IdleState from \"../states/IdleState\";\nimport HoldingState from \"../states/HoldingState\";\nimport DraggingState from \"../states/DraggingState\";\nimport AnimatingState from \"../states/AnimatingState\";\nimport DisabledState from \"../states/DisabledState\";\n\nclass StateMachine {\n  private state: State = new IdleState();\n\n  public fire(eventType: ValueOf<AxesEventType>, e: any, context: FlickingContext) {\n    const currentState = this.state;\n    switch (eventType) {\n      case AXES_EVENTS.HOLD:\n        currentState.onHold(e, context);\n        break;\n      case AXES_EVENTS.CHANGE:\n        currentState.onChange(e, context);\n        break;\n      case AXES_EVENTS.RELEASE:\n        currentState.onRelease(e, context);\n        break;\n      case AXES_EVENTS.ANIMATION_END:\n        currentState.onAnimationEnd(e, context);\n        break;\n      case AXES_EVENTS.FINISH:\n        currentState.onFinish(e, context);\n        break;\n    }\n  }\n\n  public getState(): State {\n    return this.state;\n  }\n\n  public transitTo = (nextStateType: ValueOf<StateType>): State => {\n    const currentState = this.state;\n\n    if (currentState.type !== nextStateType) {\n      let nextState: State;\n\n      switch (nextStateType) {\n        case STATE_TYPE.IDLE:\n          nextState = new IdleState();\n          break;\n        case STATE_TYPE.HOLDING:\n          nextState = new HoldingState();\n          break;\n        case STATE_TYPE.DRAGGING:\n          nextState = new DraggingState();\n          break;\n        case STATE_TYPE.ANIMATING:\n          nextState = new AnimatingState();\n          break;\n        case STATE_TYPE.DISABLED:\n          nextState = new DisabledState();\n          break;\n      }\n\n      currentState.onExit(nextState!);\n      nextState!.onEnter(currentState);\n\n      this.state = nextState!;\n    }\n    return this.state;\n  }\n}\n\nexport default StateMachine;\n","import { MoveTypeStringOption, MoveTypeContext, DestinationInfo } from \"../types\";\nimport Panel from \"../components/Panel\";\nimport { EVENTS } from \"../consts\";\n\nabstract class MoveType {\n  protected readonly abstract type: string;\n\n  public abstract findTargetPanel(ctx: MoveTypeContext): DestinationInfo;\n\n  public is(type: MoveTypeStringOption): boolean {\n    return type === this.type;\n  }\n\n  public findRestorePanel(ctx: MoveTypeContext): DestinationInfo {\n    const viewport = ctx.viewport;\n    const options = viewport.options;\n\n    const panel = options.circular\n      ? this.findRestorePanelInCircularMode(ctx)\n      : viewport.getCurrentPanel()!;\n\n    return {\n      panel,\n      destPos: viewport.findEstimatedPosition(panel),\n      duration: options.duration,\n      eventType: EVENTS.RESTORE,\n    };\n  }\n\n  // Calculate minimum distance to \"change\" panel\n  protected calcBrinkOfChange(ctx: MoveTypeContext): number {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentPanel = viewport.getCurrentPanel()!;\n    const halfGap = options.gap / 2;\n\n    const relativeAnchorPosition = currentPanel.getRelativeAnchorPosition();\n\n    // Minimum distance needed to decide prev/next panel as nearest\n    /*\n     * |  Prev  |     Next     |\n     * |--------|--------------|\n     * [][      |<-Anchor    ][] <- Panel + Half-Gap\n     */\n    let minimumDistanceToChange = isNextDirection\n      ? currentPanel.getSize() - relativeAnchorPosition + halfGap\n      : relativeAnchorPosition + halfGap;\n\n    minimumDistanceToChange = Math.max(minimumDistanceToChange, options.threshold);\n\n    return minimumDistanceToChange;\n  }\n\n  private findRestorePanelInCircularMode(ctx: MoveTypeContext): Panel {\n    const viewport = ctx.viewport;\n    const originalPanel = viewport.getCurrentPanel()!.getOriginalPanel();\n    const hangerPosition = viewport.getHangerPosition();\n\n    const firstClonedPanel = originalPanel.getIdenticalPanels()[1];\n    const lapped = Math.abs(originalPanel.getAnchorPosition() - hangerPosition)\n      > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition);\n\n    return (!ctx.isNextDirection && lapped)\n      ? firstClonedPanel\n      : originalPanel;\n  }\n}\n\nexport default MoveType;\n","import MoveType from \"./MoveType\";\nimport { MOVE_TYPE, EVENTS } from \"../consts\";\nimport { MoveTypeContext, DestinationInfo } from \"../types\";\nimport { clamp } from \"../utils\";\n\nclass Snap extends MoveType {\n  protected readonly type: string = MOVE_TYPE.SNAP;\n  protected count: number;\n\n  constructor(count: number) {\n    super();\n    this.count = count;\n  }\n\n  public findTargetPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport, axesEvent, swipeDistance } = ctx;\n    const snapCount = this.count;\n    const eventDelta = Math.abs(axesEvent.delta.flick);\n    const currentPanel = viewport.getCurrentPanel()!;\n    const nearestPanel = viewport.getNearestPanel()!;\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n\n    // This can happen when bounce is 0\n    const shouldMoveWhenBounceIs0 = viewport.canSetBoundMode()\n      && (nearestPanel.getIndex() === currentPanel.getIndex());\n    const shouldMoveToAdjacent = !viewport.isOutOfBound()\n      && (swipeDistance <= minimumDistanceToChange || shouldMoveWhenBounceIs0);\n\n    if (snapCount > 1 && eventDelta > minimumDistanceToChange) {\n      return this.findSnappedPanel(ctx);\n    } else if (shouldMoveToAdjacent) {\n      return this.findAdjacentPanel(ctx);\n    } else {\n      return {\n        panel: nearestPanel,\n        duration: viewport.options.duration,\n        destPos: viewport.findEstimatedPosition(nearestPanel),\n        eventType: swipeDistance <= minimumDistanceToChange\n          ? EVENTS.RESTORE\n          : EVENTS.CHANGE,\n      };\n    }\n  }\n\n  protected findSnappedPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { axesEvent, viewport, isNextDirection } = ctx;\n\n    const snapCount = this.count;\n    const options = viewport.options;\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    const halfGap = options.gap / 2;\n    const estimatedHangerPos = axesEvent.destPos.flick + viewport.getRelativeHangerPosition();\n    let panelToMove = viewport.getNearestPanel()!;\n    let cycleIndex = panelToMove.getCloneIndex() + 1; // 0(original) or 1(clone)\n    let passedPanelCount = 0;\n\n    while (passedPanelCount < snapCount) {\n      const siblingPanel = isNextDirection\n        ? panelToMove.nextSibling\n        : panelToMove.prevSibling;\n      if (!siblingPanel) {\n        break;\n      }\n\n      const panelIndex = panelToMove.getIndex();\n      const siblingIndex = siblingPanel.getIndex();\n      if ((isNextDirection && siblingIndex <= panelIndex)\n        || (!isNextDirection && siblingIndex >= panelIndex)\n      ) {\n        cycleIndex = isNextDirection\n          ? cycleIndex + 1\n          : cycleIndex - 1;\n      }\n      panelToMove = siblingPanel;\n      passedPanelCount += 1;\n\n      // Since panlToMove holds also cloned panels, we should use original panel's position\n      const originalPanel = panelToMove.getOriginalPanel();\n      const panelPosition = originalPanel.getPosition() + cycleIndex * scrollAreaSize;\n      const panelSize = originalPanel.getSize();\n\n      const panelNextPosition = panelPosition + panelSize + halfGap;\n      const panelPrevPosition = panelPosition - halfGap;\n\n      // Current panelToMove contains destPos\n      if (\n        (isNextDirection && panelNextPosition > estimatedHangerPos)\n        || (!isNextDirection && panelPrevPosition < estimatedHangerPos)\n      ) {\n        break;\n      }\n    }\n\n    const originalPosition = panelToMove.getOriginalPanel().getPosition();\n\n    panelToMove = panelToMove.clone(panelToMove.getCloneIndex(), true);\n    panelToMove.setPosition(originalPosition + cycleIndex * scrollAreaSize, true);\n\n    const defaultDuration = viewport.options.duration;\n    const duration = clamp(axesEvent.duration, defaultDuration, defaultDuration * passedPanelCount);\n\n    return {\n      panel: panelToMove,\n      destPos: viewport.findEstimatedPosition(panelToMove),\n      duration,\n      eventType: passedPanelCount > 0\n        ? EVENTS.CHANGE\n        : EVENTS.RESTORE,\n    };\n  }\n\n  private findAdjacentPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentIndex = viewport.getCurrentIndex();\n    const currentPanel = viewport.panelManager.get(currentIndex)!;\n    const hangerPosition = viewport.getHangerPosition();\n\n    const firstClonedPanel = currentPanel.getIdenticalPanels()[1];\n    const lapped = options.circular\n      && (Math.abs(currentPanel.getAnchorPosition() - hangerPosition)\n        > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition));\n\n    // If lapped in circular mode, use first cloned panel as base panel\n    const basePanel = lapped\n      ? firstClonedPanel\n      : currentPanel;\n    const basePosition = basePanel.getPosition();\n\n    const adjacentPanel = isNextDirection\n      ? basePanel.nextSibling\n      : basePanel.prevSibling;\n\n    const eventType = adjacentPanel\n      ? EVENTS.CHANGE\n      : EVENTS.RESTORE;\n    const panelToMove = adjacentPanel\n      ? adjacentPanel\n      : basePanel;\n    const targetRelativeAnchorPosition = panelToMove.getRelativeAnchorPosition();\n\n    const estimatedPanelPosition = options.circular\n      ? isNextDirection\n        ? basePosition + basePanel.getSize() + targetRelativeAnchorPosition + options.gap\n        : basePosition - (panelToMove.getSize() - targetRelativeAnchorPosition) - options.gap\n      : panelToMove.getAnchorPosition();\n    const estimatedPosition = estimatedPanelPosition - viewport.getRelativeHangerPosition();\n\n    return {\n      panel: panelToMove,\n      destPos: estimatedPosition,\n      duration: options.duration,\n      eventType,\n    };\n  }\n}\n\nexport default Snap;\n","import Snap from \"./Snap\";\nimport { MOVE_TYPE, EVENTS } from \"../consts\";\nimport { MoveTypeContext, DestinationInfo } from \"../types\";\nimport { circulate } from \"../utils\";\n\nclass FreeScroll extends Snap {\n  protected readonly type: string = MOVE_TYPE.FREE_SCROLL;\n\n  constructor() {\n    // Set snap count to Infinity\n    super(Infinity);\n  }\n\n  public findTargetPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { axesEvent, viewport, swipeDistance } = ctx;\n    const destPos = axesEvent.destPos.flick;\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n\n    const eventDelta = Math.abs(axesEvent.delta.flick);\n    if (eventDelta > minimumDistanceToChange) {\n      const destInfo = super.findSnappedPanel(ctx);\n      destInfo.destPos = destPos;\n      destInfo.eventType = destInfo.eventType === EVENTS.RESTORE\n        ? \"\"\n        : EVENTS.CHANGE;\n\n      return destInfo;\n    } else {\n      const scrollArea = viewport.getScrollArea();\n      const estimatedPosition = circulate(destPos, scrollArea.prev, scrollArea.next, false)\n        + viewport.getRelativeHangerPosition();\n\n      return {\n        panel: viewport.findNearestPanelAt(estimatedPosition)!,\n        destPos,\n        duration: viewport.options.duration,\n        eventType: swipeDistance > minimumDistanceToChange\n          ? EVENTS.CHANGE\n          : \"\",\n      };\n    }\n  }\n\n  public findRestorePanel(ctx: MoveTypeContext): DestinationInfo {\n    return this.findTargetPanel(ctx);\n  }\n\n  protected calcBrinkOfChange(ctx: MoveTypeContext): number {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentPanel = viewport.getCurrentPanel()!;\n    const halfGap = options.gap / 2;\n\n    const lastPosition = viewport.stateMachine.getState().lastPosition;\n    const currentPanelPosition = currentPanel.getPosition();\n\n    // As camera can stop anywhere in free scroll mode,\n    // minimumDistanceToChange should be calculated differently.\n    // Ref #191(https://github.com/naver/egjs-flicking/issues/191)\n    const lastHangerPosition = lastPosition + viewport.getRelativeHangerPosition();\n\n    let minimumDistanceToChange = isNextDirection\n      ? currentPanelPosition + currentPanel.getSize() - lastHangerPosition + halfGap\n      : lastHangerPosition - currentPanelPosition + halfGap;\n\n    minimumDistanceToChange = Math.max(minimumDistanceToChange, options.threshold);\n\n    return minimumDistanceToChange;\n  }\n}\n\nexport default FreeScroll;\n","import Axes, { PanInput } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport Panel from \"./Panel\";\nimport PanelManager from \"./PanelManager\";\nimport StateMachine from \"./StateMachine\";\nimport MoveType from \"../moves/MoveType\";\nimport { FlickingOptions, FlickingPanel, FlickingStatus, ElementLike, EventType, TriggerCallback, NeedPanelEvent, FlickingEvent, MoveTypeObjectOption } from \"../types\";\nimport { DEFAULT_VIEWPORT_CSS, DEFAULT_CAMERA_CSS, TRANSFORM, DEFAULT_OPTIONS, EVENTS, DIRECTION, STATE_TYPE, MOVE_TYPE } from \"../consts\";\nimport { clamp, applyCSS, toArray, parseArithmeticExpression, isBetween, isArray, parseElement } from \"../utils\";\nimport Snap from \"../moves/Snap\";\nimport FreeScroll from \"../moves/FreeScroll\";\n\nexport default class Viewport {\n  public options: FlickingOptions;\n  public stateMachine: StateMachine;\n  public panelManager: PanelManager;\n  public moveType: MoveType;\n\n  private flicking: Flicking;\n  private axes: Axes;\n  private panInput: PanInput;\n\n  private viewportElement: HTMLElement;\n  private cameraElement: HTMLElement;\n\n  private triggerEvent: Flicking[\"triggerEvent\"];\n  private axesHandlers: {[key: string]: any};\n\n  private currentPanel: Panel | undefined;\n  private nearestPanel: Panel | undefined;\n\n  private state: {\n    size: number;\n    position: number;\n    relativeHangerPosition: number;\n    scrollArea: {\n      prev: number;\n      next: number;\n    };\n    translate: {\n      name: string,\n      has3d: boolean,\n    };\n    infiniteThreshold: number;\n    checkedIndexes: Array<[number, number]>;\n  };\n\n  constructor(\n    flicking: Flicking,\n    viewportElement: HTMLElement,\n    cameraElement: HTMLElement,\n    options: FlickingOptions,\n    triggerEvent: Flicking[\"triggerEvent\"],\n  ) {\n    this.flicking = flicking;\n    this.viewportElement = viewportElement;\n    this.cameraElement = cameraElement;\n    this.triggerEvent = triggerEvent;\n\n    this.state = {\n      size: 0,\n      position: 0,\n      relativeHangerPosition: 0,\n      scrollArea: {\n        prev: 0,\n        next: 0,\n      },\n      translate: TRANSFORM,\n      infiniteThreshold: 0,\n      checkedIndexes: [],\n    };\n    this.options = options;\n    this.stateMachine = new StateMachine();\n    this.panelManager = new PanelManager(cameraElement, options);\n\n    this.build();\n  }\n\n  public moveTo(\n    panel: Panel,\n    destPos: number,\n    eventType: EventType[\"CHANGE\"] | EventType[\"RESTORE\"] | \"\",\n    axesEvent: any,\n    duration: number = this.options.duration,\n  ): TriggerCallback {\n    const state = this.state;\n    const currentState = this.stateMachine.getState();\n    const currentPosition = state.position;\n\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n    const direction = destPos === currentPosition\n      ? null\n      : destPos > currentPosition\n        ? DIRECTION.NEXT\n        : DIRECTION.PREV;\n\n    let eventResult: TriggerCallback;\n    if (eventType === EVENTS.CHANGE) {\n      eventResult = this.triggerEvent(EVENTS.CHANGE, axesEvent, isTrusted, {\n        index: panel.getIndex(),\n        panel,\n        direction,\n      });\n    } else if (eventType === EVENTS.RESTORE) {\n      eventResult = this.triggerEvent(EVENTS.RESTORE, axesEvent, isTrusted);\n    } else {\n      eventResult = {\n        onSuccess(callback: () => void): TriggerCallback {\n          callback();\n          return this;\n        },\n        onStopped(): TriggerCallback {\n          return this;\n        },\n      };\n    }\n\n    eventResult.onSuccess(() => {\n      currentState.delta = 0;\n      currentState.lastPosition = this.getCameraPosition();\n      currentState.targetPanel = panel;\n      currentState.direction = destPos === currentPosition\n        ? null\n        : destPos > currentPosition\n            ? DIRECTION.NEXT\n            : DIRECTION.PREV;\n\n      if (destPos === currentPosition) {\n        // no move\n        this.nearestPanel = panel;\n        this.currentPanel = panel;\n      }\n\n      if (axesEvent && axesEvent.setTo) {\n        // freeScroll only occurs in release events\n        axesEvent.setTo({ flick: destPos }, duration);\n      } else {\n        this.axes.setTo({ flick: destPos }, duration);\n      }\n    });\n\n    return eventResult;\n  }\n\n  public moveCamera(pos: number, axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const transform = state.translate.name;\n\n    // Update position & nearestPanel\n    state.position = pos;\n    this.nearestPanel = this.findNearestPanel();\n\n    const nearestPanel = this.nearestPanel;\n    const originalNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n\n    this.checkNeedPanel(axesEvent);\n\n    // Possibly modified after need panel, if it's looped\n    const modifiedNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n\n    pos += (modifiedNearestPosition - originalNearestPosition);\n    state.position = pos;\n\n    const moveVector = options.horizontal\n      ? [-pos, 0] : [0, -pos];\n    const moveCoord = moveVector.map(coord => `${Math.round(coord)}px`).join(\", \");\n\n    this.cameraElement.style[transform] = state.translate.has3d\n      ? `translate3d(${moveCoord}, 0px)`\n      : `translate(${moveCoord})`;\n  }\n\n  public stopCamera = (axesEvent: any): void => {\n    if (axesEvent && axesEvent.setTo) {\n      axesEvent.setTo({ flick: this.state.position }, 0);\n    }\n\n    this.stateMachine.transitTo(STATE_TYPE.IDLE);\n  }\n\n  public resize(): void {\n    const panelManager = this.panelManager;\n\n    this.updateSize();\n    this.updateOriginalPanelPositions();\n    this.updateAdaptiveSize();\n    this.updateScrollArea();\n\n    // Clone panels in circular mode\n    if (this.options.circular && panelManager.getPanelCount() > 0) {\n      this.clonePanels();\n      this.updateClonedPanelPositions();\n    }\n\n    panelManager.chainAllPanels();\n    this.updateCameraPosition();\n  }\n  // Find nearest anchor from current hanger position\n  public findNearestPanel(): Panel | undefined {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const hangerPosition = this.getHangerPosition();\n\n    if (this.isOutOfBound()) {\n      const position = state.position;\n\n      return position <= state.scrollArea.prev\n        ? panelManager.firstPanel()\n        : panelManager.lastPanel();\n    }\n\n    return this.findNearestPanelAt(hangerPosition);\n  }\n\n  public findNearestPanelAt(position: number): Panel | undefined {\n    const panelManager = this.panelManager;\n\n    const allPanels = panelManager.allPanels();\n    let minimumDistance = Infinity;\n    let nearestPanel: Panel | undefined;\n\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const prevPosition = panel.getPosition();\n      const nextPosition = prevPosition + panel.getSize();\n\n      // Use shortest distance from panel's range\n      const distance = isBetween(position, prevPosition, nextPosition)\n        ? 0\n        : Math.min(\n          Math.abs(prevPosition - position),\n          Math.abs(nextPosition - position),\n        );\n\n      if (distance > minimumDistance) {\n        break;\n      } else if (distance === minimumDistance) {\n        const minimumAnchorDistance = Math.abs(position - nearestPanel!.getAnchorPosition());\n        const anchorDistance = Math.abs(position - panel.getAnchorPosition());\n\n        if (anchorDistance > minimumAnchorDistance) {\n          break;\n        }\n      }\n\n      minimumDistance = distance;\n      nearestPanel = panel;\n    }\n\n    return nearestPanel;\n  }\n\n  public findNearestIdenticalPanel(panel: Panel): Panel {\n    let nearest = panel;\n    let shortestDistance = Infinity;\n    const hangerPosition = this.getHangerPosition();\n\n    const identicals = panel.getIdenticalPanels();\n    identicals.forEach(identical => {\n      const anchorPosition = identical.getAnchorPosition();\n      const distance = Math.abs(anchorPosition - hangerPosition);\n\n      if (distance < shortestDistance) {\n        nearest = identical;\n        shortestDistance = distance;\n      }\n    });\n\n    return nearest;\n  }\n\n  // Find shortest camera position that distance is minimum\n  public findShortestPositionToPanel(panel: Panel): number {\n    const state = this.state;\n    const options = this.options;\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = this.getHangerPosition();\n    const distance = Math.abs(hangerPosition - anchorPosition);\n    const scrollAreaSize = state.scrollArea.next - state.scrollArea.prev;\n\n    if (!options.circular) {\n      const position = anchorPosition - state.relativeHangerPosition;\n      return this.canSetBoundMode()\n        ? clamp(position, state.scrollArea.prev, state.scrollArea.next)\n        : position;\n    } else {\n      // If going out of viewport border is more efficient way of moving, choose that position\n      return distance <= scrollAreaSize - distance\n        ? anchorPosition - state.relativeHangerPosition\n        : anchorPosition > hangerPosition\n          // PREV TO NEXT\n          ? anchorPosition - state.relativeHangerPosition - scrollAreaSize\n          // NEXT TO PREV\n          : anchorPosition - state.relativeHangerPosition + scrollAreaSize;\n    }\n  }\n\n  public findEstimatedPosition(panel: Panel): number {\n    const scrollArea = this.getScrollArea();\n\n    let estimatedPosition = panel.getAnchorPosition() - this.getRelativeHangerPosition();\n    estimatedPosition = this.canSetBoundMode()\n      ? clamp(estimatedPosition, scrollArea.prev, scrollArea.next)\n      : estimatedPosition;\n\n    return estimatedPosition;\n  }\n\n  public enable(): void {\n    this.panInput.enable();\n  }\n\n  public disable(): void {\n    this.panInput.disable();\n  }\n\n  public insert(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const lastIndex = this.panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const state = this.state;\n    const parsedElements = parseElement(element);\n\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    const pushedIndex = this.panelManager.insert(index, panels);\n\n    if (!this.currentPanel) {\n      this.currentPanel = panels[0];\n    }\n\n    // Update checked indexes in infinite mode\n    state.checkedIndexes.forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      // Can fill part of indexes in range\n      if (isBetween(index, min, max)) {\n        // Remove checked index from list\n        state.checkedIndexes.splice(idx, 1);\n      } else if (index < min) {\n        // Push checked index\n        state.checkedIndexes.splice(idx, 1, [min + pushedIndex, max + pushedIndex]);\n      }\n    });\n\n    this.resize();\n\n    return panels;\n  }\n\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const panelManager = this.panelManager;\n    const lastIndex = panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const state = this.state;\n    const parsedElements = parseElement(element);\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    panelManager.replace(index, panels);\n\n    const currentPanel = this.currentPanel;\n    const wasEmpty = !currentPanel;\n    if (wasEmpty) {\n      this.currentPanel = panels[0];\n    } else if (isBetween(currentPanel!.getIndex(), index, index + panels.length - 1)) {\n      // Current panel is replaced\n      this.currentPanel = panelManager.get(currentPanel!.getIndex());\n    }\n\n    // Update checked indexes in infinite mode\n    state.checkedIndexes.forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      // Can fill part of indexes in range\n      if (index <= max && index + panels.length > min) {\n        // Remove checked index from list\n        state.checkedIndexes.splice(idx, 1);\n      }\n    });\n\n    this.resize();\n\n    const isFreeScroll = (this.options.moveType as MoveTypeObjectOption).type === \"freeScroll\";\n    if (isFreeScroll && wasEmpty) {\n      this.moveTo(this.currentPanel!, this.findEstimatedPosition(this.currentPanel!), \"\", null, 0);\n    }\n\n    return panels;\n  }\n\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    // Index should not below 0\n    index = Math.max(index, 0);\n\n    const panelManager = this.panelManager;\n    const currentIndex = this.getCurrentIndex();\n\n    const removedPanels = panelManager.remove(index, deleteCount);\n    if (isBetween(currentIndex, index, index + deleteCount - 1)) {\n      // Current panel is removed\n      // Use panel at removing index - 1 as new current panel if it exists\n      const newCurrentIndex = Math.max(index - 1, panelManager.getRange().min);\n      this.currentPanel = panelManager.get(newCurrentIndex);\n    }\n    this.resize();\n\n    return removedPanels;\n  }\n\n  public updateAdaptiveSize(): void {\n    const options = this.options;\n    const horizontal = options.horizontal;\n    const currentPanel = this.getCurrentPanel();\n\n    if (!currentPanel) {\n      return;\n    }\n\n    let sizeToApply: number;\n    if (options.adaptive) {\n      const panelBbox = currentPanel.getBbox();\n\n      sizeToApply = horizontal ? panelBbox.height : panelBbox.width;\n    } else {\n      // Find minimum height of panels to maximum panel size\n      const maximumPanelSize = this.panelManager.originalPanels().reduce((maximum, panel) => {\n        const panelBbox = panel.getBbox();\n        return Math.max(maximum, horizontal ? panelBbox.height : panelBbox.width);\n      }, 0);\n\n      sizeToApply = maximumPanelSize;\n    }\n\n    const viewportStyle = this.viewportElement.style;\n    if (horizontal) {\n      viewportStyle.height = `${sizeToApply}px`;\n      viewportStyle.minHeight = \"100%\";\n      viewportStyle.width = \"100%\";\n    } else {\n      viewportStyle.width = `${sizeToApply}px`;\n      viewportStyle.minWidth = \"100%\";\n      viewportStyle.height = \"100%\";\n    }\n  }\n\n  public destroy(): void {\n    const viewportElement = this.viewportElement;\n    const wrapper = viewportElement.parentElement;\n\n    wrapper!.removeChild(viewportElement);\n\n    this.axes.destroy();\n    this.panInput.destroy();\n\n    this.panelManager.originalPanels().forEach(panel => {\n      wrapper!.appendChild(panel.getElement());\n      panel.destroy();\n    });\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public restore(status: FlickingStatus): void {\n    const panels = status.panels;\n    const defaultIndex = this.options.defaultIndex;\n    const cameraElement = this.cameraElement;\n    const panelManager = this.panelManager;\n\n    // Restore index\n    panelManager.clear();\n    cameraElement.innerHTML = status.panels.map(panel => panel.html).join(\"\");\n\n    this.createPanels();\n\n    // Reset panel index\n    panelManager.originalPanels().forEach((panel, idx) => {\n      panel.setIndex(panels[idx].index);\n    });\n\n    this.currentPanel = panelManager.get(status.index)\n      || panelManager.get(defaultIndex)\n      || panelManager.firstPanel();\n\n    this.resize();\n\n    this.axes.setTo({ flick: status.position }, 0);\n    this.moveCamera(status.position);\n  }\n\n  public getCurrentPanel(): Panel | undefined {\n    return this.currentPanel;\n  }\n\n  public getCurrentIndex(): number {\n    const currentPanel = this.currentPanel;\n\n    return currentPanel\n      ? currentPanel.getIndex()\n      : -1;\n  }\n\n  public getNearestPanel(): Panel | undefined {\n    return this.nearestPanel;\n  }\n\n  // Get progress from nearest panel\n  public getCurrentProgress(): number {\n    const currentState = this.stateMachine.getState();\n    let nearestPanel = currentState.playing || currentState.holding\n      ? this.nearestPanel\n      : this.currentPanel;\n\n    const panelManager = this.panelManager;\n    if (!nearestPanel) {\n      // There're no panels\n      return NaN;\n    }\n    const {prev: prevRange, next: nextRange} = this.getScrollArea();\n    const cameraPosition = this.getCameraPosition();\n    const isOutOfBound = this.isOutOfBound();\n    let prevPanel = nearestPanel.prevSibling;\n    let nextPanel = nearestPanel.nextSibling;\n    let hangerPosition = this.getHangerPosition();\n    let nearestAnchorPos = nearestPanel.getAnchorPosition();\n\n    if (\n      isOutOfBound\n      && prevPanel\n      && nextPanel\n      && cameraPosition < nextRange\n      // On the basis of anchor, prevPanel is nearestPanel.\n      && (hangerPosition - prevPanel.getAnchorPosition() < nearestAnchorPos - hangerPosition)\n    ) {\n      nearestPanel = prevPanel;\n      nextPanel = nearestPanel.nextSibling;\n      prevPanel = nearestPanel.prevSibling;\n      nearestAnchorPos = nearestPanel.getAnchorPosition();\n    }\n    const nearestIndex = nearestPanel.getIndex() + (nearestPanel.getCloneIndex() + 1) * panelManager.getPanelCount();\n    const nearestSize = nearestPanel.getSize();\n\n    if (isOutOfBound) {\n      const relativeHangerPosition = this.getRelativeHangerPosition();\n\n      if (nearestAnchorPos > nextRange + relativeHangerPosition) {\n        // next bounce area: hangerPosition - relativeHangerPosition - nextRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - nextRange;\n      } else if (nearestAnchorPos < prevRange + relativeHangerPosition) {\n        // prev bounce area: hangerPosition - relativeHangerPosition - prevRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - prevRange;\n      }\n    }\n    const hangerIsNextToNearestPanel = hangerPosition >= nearestAnchorPos;\n    const gap = this.options.gap;\n\n    let basePosition = nearestAnchorPos;\n    let targetPosition = nearestAnchorPos;\n    if (hangerIsNextToNearestPanel) {\n      targetPosition = nextPanel\n        ? nextPanel.getAnchorPosition()\n        : nearestAnchorPos + nearestSize + gap;\n    } else {\n      basePosition = prevPanel\n        ? prevPanel.getAnchorPosition()\n        : basePosition = nearestAnchorPos - nearestSize - gap;\n    }\n\n    const progressBetween = (hangerPosition - basePosition) / (targetPosition - basePosition);\n    const startIndex = hangerIsNextToNearestPanel\n      ? nearestIndex\n      : prevPanel\n        ? prevPanel.getIndex()\n        : nearestIndex - 1;\n\n    return startIndex + progressBetween;\n  }\n\n  // Update axes flick position without triggering event\n  public updateAxesPosition(position: number) {\n    const axes = this.axes;\n    axes.off();\n    axes.setTo({\n      flick: position,\n    }, 0);\n    axes.on(this.axesHandlers);\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getScrollArea(): { prev: number, next: number } {\n    return this.state.scrollArea;\n  }\n  public isOutOfBound(): boolean {\n    const state = this.state;\n    const options = this.options;\n    const scrollArea = state.scrollArea;\n\n    return !options.circular\n      && options.bound\n      && (state.position <= scrollArea.prev || state.position >= scrollArea.next);\n  }\n\n  public canSetBoundMode(): boolean {\n    const state = this.state;\n    const options = this.options;\n    const lastPanel = this.panelManager.lastPanel();\n    if (!lastPanel) {\n      return false;\n    }\n\n    const summedPanelSize = lastPanel.getPosition() + lastPanel.getSize();\n\n    return options.bound\n      && !options.circular\n      && summedPanelSize >= state.size;\n  }\n\n  public getScrollAreaSize(): number {\n    const scrollArea = this.state.scrollArea;\n\n    return scrollArea.next - scrollArea.prev;\n  }\n\n  public getRelativeHangerPosition(): number {\n    return this.state.relativeHangerPosition;\n  }\n\n  public getHangerPosition(): number {\n    return this.state.position + this.state.relativeHangerPosition;\n  }\n\n  public getCameraPosition(): number {\n    return this.state.position;\n  }\n\n  public setCurrentPanel(panel: Panel): void {\n    this.currentPanel = panel;\n  }\n\n  public setLastIndex(index: number): void {\n    const currentPanel = this.currentPanel;\n    const panelManager = this.panelManager;\n\n    panelManager.setLastIndex(index);\n    if (currentPanel && currentPanel.getIndex() > index) {\n      this.currentPanel = panelManager.lastPanel();\n    }\n\n    this.resize();\n  }\n\n  public connectAxesHandler(handlers: {[key: string]: (event: { [key: string]: any; }) => any}): void {\n    const axes = this.axes;\n\n    this.axesHandlers = handlers;\n    axes.on(handlers);\n  }\n\n  private build(): void {\n    this.applyCSSValue();\n    this.setMoveType();\n    this.setAxesInstance();\n    this.createPanels();\n    this.setDefaultPanel();\n    this.resize();\n    this.moveToDefaultPanel();\n  }\n\n  private applyCSSValue(): void {\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n    const cameraElement = this.cameraElement;\n    const classPrefix = options.classPrefix;\n\n    // Set default css values for each element\n    viewportElement.className = `${classPrefix}-viewport`;\n    cameraElement.className = `${classPrefix}-camera`;\n\n    applyCSS(viewportElement, DEFAULT_VIEWPORT_CSS);\n    applyCSS(cameraElement, DEFAULT_CAMERA_CSS);\n\n    if (options.zIndex) {\n      viewportElement.style.zIndex = `${options.zIndex}`;\n    }\n    if (options.overflow) {\n      viewportElement.style.overflow = \"visible\";\n    }\n  }\n\n  private setMoveType(): void {\n    const moveType = this.options.moveType as MoveTypeObjectOption;\n\n    switch (moveType.type) {\n      case MOVE_TYPE.SNAP:\n        this.moveType = new Snap(moveType.count);\n        break;\n      case MOVE_TYPE.FREE_SCROLL:\n        this.moveType = new FreeScroll();\n        break;\n      default:\n        throw new Error(\"moveType is not correct!\");\n    }\n  }\n\n  private setAxesInstance(): void {\n    const state = this.state;\n    const options = this.options;\n\n    const scrollArea = state.scrollArea;\n    const horizontal = options.horizontal;\n\n    this.axes = new Axes({\n      flick: {\n        range: [scrollArea.prev, scrollArea.next],\n        circular: options.circular,\n        bounce: [0, 0], // will be updated in resize()\n      },\n    }, {\n      easing: options.panelEffect,\n      deceleration: options.deceleration,\n      interruptable: true,\n    });\n\n    this.panInput = new PanInput(this.viewportElement, {\n      inputType: options.inputType,\n      thresholdAngle: options.thresholdAngle,\n      scale: options.horizontal ? [-1, 0] : [0, -1],\n    });\n\n    this.axes.connect(horizontal ? [\"flick\", \"\"] : [\"\", \"flick\"], this.panInput);\n  }\n\n  private createPanels(): void {\n    // Panel elements were attached to camera element by Flicking class\n    const panelElements = this.cameraElement.children;\n\n    // Initialize panels\n    const panels = toArray(panelElements).map(\n      (el: HTMLElement, idx: number) => new Panel(el, idx, this),\n    );\n\n    if (panels.length > 0) {\n      this.panelManager.append(panels);\n    }\n  }\n\n  private setDefaultPanel(): void {\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const indexRange = this.panelManager.getRange();\n    const index = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n\n    this.currentPanel = panelManager.get(index);\n  }\n\n  private clonePanels() {\n    const state = this.state;\n    const panelManager = this.panelManager;\n\n    const viewportSize = state.size;\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel() as Panel;\n\n    // There're no panels exist\n    if (!firstPanel) {\n      return;\n    }\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + this.options.gap;\n    const visibleAreaSize = viewportSize + firstPanel.getRelativeAnchorPosition();\n\n    // For each panels, clone itself while last panel's position + size is below viewport size\n    const panels = panelManager.originalPanels();\n\n    const cloneCount = Math.ceil(visibleAreaSize / sumOriginalPanelSize);\n    const prevCloneCount = panelManager.getCloneCount();\n\n    if (cloneCount > prevCloneCount) {\n      // should clone more\n      for (let cloneIndex = prevCloneCount; cloneIndex < cloneCount; cloneIndex++) {\n        const clones = panels.map(origPanel => {\n          const clonedPanel = origPanel.clone(cloneIndex);\n\n          this.cameraElement.appendChild(clonedPanel.getElement());\n          return clonedPanel;\n        });\n        panelManager.insertClones(cloneIndex, 0, clones);\n      }\n    } else if (cloneCount < prevCloneCount) {\n      // should remove some\n      panelManager.removeClonesAfter(cloneCount);\n    }\n  }\n\n  private moveToDefaultPanel(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const indexRange = this.panelManager.getRange();\n\n    const defaultIndex = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n    const defaultPanel = panelManager.get(defaultIndex);\n\n    let defaultPosition = 0;\n    if (defaultPanel) {\n      defaultPosition = defaultPanel.getAnchorPosition() - state.relativeHangerPosition;\n      defaultPosition = this.canSetBoundMode()\n        ? clamp(defaultPosition, state.scrollArea.prev, state.scrollArea.next)\n        : defaultPosition;\n    }\n\n    this.moveCamera(defaultPosition);\n    this.axes.setTo({ flick: defaultPosition }, 0);\n  }\n\n  private updateSize(): void {\n    const state = this.state;\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n    const panels = this.panelManager.originalPanels();\n\n    if (!options.horizontal) {\n      // Don't preserve previous width for adaptive resizing\n      viewportElement.style.width = \"\";\n      viewportElement.style.minWidth = \"\";\n    }\n\n    const bbox = viewportElement.getBoundingClientRect();\n\n    // Update size & hanger position\n    state.size = options.horizontal\n      ? bbox.width\n      : bbox.height;\n\n    state.relativeHangerPosition = parseArithmeticExpression(options.hanger, state.size);\n    state.infiniteThreshold = parseArithmeticExpression(options.infiniteThreshold, state.size);\n\n    // Resize all panels\n    panels.forEach(panel => {\n      panel.resize();\n    });\n  }\n\n  private updateOriginalPanelPositions(): void {\n    const gap = this.options.gap;\n    const panelManager = this.panelManager;\n\n    const firstPanel = panelManager.firstPanel();\n    const panels = panelManager.originalPanels();\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const currentPanel = this.currentPanel!;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n    const scrollArea = this.state.scrollArea;\n\n    // Update panel position && fit to wrapper\n    let nextPanelPos = firstPanel.getPosition();\n    let maintainingPanel: Panel = firstPanel;\n    if (nearestPanel) {\n      // We should maintain nearestPanel's position\n      const looped = !isBetween(currentState.lastPosition + currentState.delta, scrollArea.prev, scrollArea.next);\n\n      maintainingPanel = looped\n        ? currentPanel\n        : nearestPanel;\n    } else if (firstPanel.getIndex() > 0) {\n      maintainingPanel = currentPanel;\n    }\n\n    const panelsBeforeMaintainPanel = panels.slice(0, maintainingPanel.getIndex() + (maintainingPanel.getCloneIndex() + 1) * panels.length);\n    const accumulatedSize = panelsBeforeMaintainPanel.reduce((total, panel) => {\n      return total + panel.getSize() + gap;\n    }, 0);\n\n    nextPanelPos = maintainingPanel.getPosition() - accumulatedSize;\n\n    panels.forEach(panel => {\n      const newPosition = nextPanelPos;\n      const currentPosition = panel.getPosition();\n      const panelSize = panel.getSize();\n\n      if (currentPosition !== newPosition) {\n        panel.setPosition(newPosition);\n      }\n      nextPanelPos += panelSize + gap;\n    });\n  }\n\n  private updateClonedPanelPositions(): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const clonedPanels = panelManager.clonedPanels()\n      .filter(panel => !!panel);\n\n    const scrollArea = state.scrollArea;\n\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel()!;\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n    // Locate all cloned panels linearly first\n    for (const panel of clonedPanels) {\n      if (!panel) {\n        continue;\n      }\n\n      const origPanel = panel.getOriginalPanel();\n      const cloneIndex = panel.getCloneIndex();\n      const cloneBasePos = sumOriginalPanelSize * (cloneIndex + 1);\n      const clonedPanelPos = cloneBasePos + origPanel.getPosition();\n\n      panel.setPosition(clonedPanelPos);\n    }\n\n    let lastReplacePosition = firstPanel.getPosition();\n    // reverse() pollutes original array, so copy it with concat()\n    for (const panel of clonedPanels.concat().reverse()) {\n      const panelSize = panel.getSize();\n      const replacePosition = lastReplacePosition - panelSize - options.gap;\n\n      if (replacePosition + panelSize <= scrollArea.prev) {\n        // Replace is not meaningful, as it won't be seen in current scroll area\n        break;\n      }\n\n      panel.setPosition(replacePosition);\n      lastReplacePosition = replacePosition;\n    }\n  }\n\n  private updateScrollArea(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const axes = this.axes;\n\n    // Set viewport scrollable area\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel() as Panel;\n    const relativeHangerPosition = state.relativeHangerPosition;\n\n    if (!firstPanel) {\n      state.scrollArea = {\n        prev: 0,\n        next: 0,\n      };\n    } else if (this.canSetBoundMode()) {\n      state.scrollArea = {\n        prev: firstPanel.getPosition(),\n        next: lastPanel.getPosition() + lastPanel.getSize() - state.size,\n      };\n    } else if (options.circular) {\n      const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n      // Maximum scroll extends to first clone sequence's first panel\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: sumOriginalPanelSize + firstPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    } else {\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: lastPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    }\n\n    const viewportSize = state.size;\n    const bounce = options.bounce;\n\n    let parsedBounce: number[] = bounce as [number, number];\n    if (isArray(bounce)) {\n      parsedBounce = (bounce as string[]).map(val => parseArithmeticExpression(val, viewportSize, DEFAULT_OPTIONS.bounce as number));\n    } else {\n      const parsedVal = parseArithmeticExpression(bounce as number | string, viewportSize, DEFAULT_OPTIONS.bounce as number);\n      parsedBounce = [parsedVal, parsedVal];\n    }\n\n    // Update axes range and bounce\n    const flick = axes.axis.flick;\n    flick.range = [state.scrollArea.prev, state.scrollArea.next];\n    flick.bounce = parsedBounce;\n  }\n\n  // Update camera position after resizing\n  private updateCameraPosition(): void {\n    const state = this.state;\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.stateMachine.getState();\n    const isFreeScroll = (this.options.moveType as MoveTypeObjectOption).type === \"freeScroll\";\n\n    if (currentState.holding || currentState.playing || isFreeScroll) {\n      return;\n    }\n\n    let newPosition = currentPanel\n      ? currentPanel.getAnchorPosition() - state.relativeHangerPosition\n      : this.getCameraPosition();\n\n    if (this.canSetBoundMode()) {\n      newPosition = clamp(newPosition, state.scrollArea.prev, state.scrollArea.next);\n    }\n\n    // Pause & resume axes to prevent axes's \"change\" event triggered\n    // This should be done before moveCamera, as moveCamera can trigger needPanel\n    this.updateAxesPosition(newPosition);\n\n    this.moveCamera(newPosition);\n  }\n\n  private checkNeedPanel(axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const currentPanel = this.currentPanel;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n\n    if (!options.infinite) {\n      return;\n    }\n\n    const gap = options.gap;\n    const infiniteThreshold = state.infiniteThreshold;\n    const maxLastIndex = panelManager.getLastIndex();\n\n    if (maxLastIndex < 0) {\n      return;\n    }\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      this.triggerNeedPanel({\n        axesEvent,\n        siblingPanel: null,\n        direction: null,\n        indexRange: {\n          min: 0,\n          max: maxLastIndex,\n          length: maxLastIndex + 1,\n        },\n      });\n      return;\n    }\n\n    const originalNearestPosition = nearestPanel.getPosition();\n\n    // Check next direction\n    let checkingPanel: Panel | null = !currentState.holding && !currentState.playing\n      ? currentPanel\n      : nearestPanel;\n\n    while (checkingPanel) {\n      const currentIndex = checkingPanel.getIndex();\n      const nextSibling = checkingPanel.nextSibling;\n      let lastPanel = panelManager.lastPanel()!;\n      let atLastPanel = currentIndex === lastPanel.getIndex();\n      const nextIndex = !atLastPanel && nextSibling\n        ? nextSibling.getIndex()\n        : maxLastIndex + 1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelRight = checkingPanel.getPosition() + checkingPanel.getSize() - (currentNearestPosition - originalNearestPosition);\n      const cameraNext = state.position + state.size;\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = (nextIndex - currentIndex > 1);\n      // Expected prev panel's left position is smaller than camera position\n      const overThreshold = panelRight + gap - infiniteThreshold <= cameraNext;\n\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.NEXT,\n          indexRange: {\n            min: currentIndex + 1,\n            max: nextIndex - 1,\n            length: nextIndex - currentIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at max panel index\n      if (options.circular && currentIndex === maxLastIndex && overThreshold) {\n        const firstPanel = panelManager.firstPanel()!;\n        const firstIndex = firstPanel.getIndex();\n\n        if (firstIndex > 0) {\n          this.triggerNeedPanel({\n            axesEvent,\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.NEXT,\n            indexRange: {\n              min: 0,\n              max: firstIndex - 1,\n              length: firstIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether insertion happened\n      lastPanel = panelManager.lastPanel()!;\n      atLastPanel = currentIndex === lastPanel.getIndex();\n\n      if (atLastPanel || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.nextSibling;\n    }\n\n    // Check prev direction\n    checkingPanel = nearestPanel;\n    while (checkingPanel) {\n      const cameraPrev = state.position;\n      const checkingIndex = checkingPanel.getIndex();\n      const prevSibling = checkingPanel.prevSibling;\n      let firstPanel = panelManager.firstPanel()!;\n      let atFirstPanel = checkingIndex === firstPanel.getIndex();\n      const prevIndex = !atFirstPanel && prevSibling\n        ? prevSibling.getIndex()\n        : -1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelLeft = checkingPanel.getPosition() - (currentNearestPosition - originalNearestPosition);\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = checkingIndex - prevIndex > 1;\n      // Expected prev panel's right position is smaller than camera position\n      const overThreshold = panelLeft - gap + infiniteThreshold >= cameraPrev;\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.PREV,\n          indexRange: {\n            min: prevIndex + 1,\n            max: checkingIndex - 1,\n            length: checkingIndex - prevIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at panel 0\n      if (options.circular && checkingIndex === 0 && overThreshold) {\n        const lastPanel = panelManager.lastPanel()!;\n        const lastIndex = lastPanel.getIndex();\n\n        if (lastIndex < maxLastIndex) {\n          this.triggerNeedPanel({\n            axesEvent,\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.PREV,\n            indexRange: {\n              min: lastIndex + 1,\n              max: maxLastIndex,\n              length: maxLastIndex - lastIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether insertion happened\n      firstPanel = panelManager.firstPanel()!;\n      atFirstPanel = checkingIndex === firstPanel.getIndex();\n\n      // Looped in circular mode\n      if (atFirstPanel || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.prevSibling;\n    }\n  }\n\n  private triggerNeedPanel(params: {\n    axesEvent: any;\n    siblingPanel: Panel | null,\n    direction: FlickingEvent[\"direction\"];\n    indexRange: NeedPanelEvent[\"range\"];\n  }): void {\n    const { axesEvent, siblingPanel, direction, indexRange } = params;\n    const checkedIndexes = this.state.checkedIndexes;\n    const alreadyTriggered = checkedIndexes.some(([min, max]) => min === indexRange.min || max === indexRange.max);\n    const hasHandler = this.flicking.hasOn(EVENTS.NEED_PANEL);\n\n    if (alreadyTriggered || !hasHandler) {\n      return;\n    }\n\n    // Should done before triggering event, as we can directly add panels by event callback\n    checkedIndexes.push([indexRange.min, indexRange.max]);\n\n    const index = siblingPanel\n      ? siblingPanel.getIndex()\n      : 0;\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n\n    this.triggerEvent(\n      EVENTS.NEED_PANEL,\n      axesEvent,\n      isTrusted,\n      {\n        index,\n        panel: siblingPanel,\n        direction,\n        range: indexRange,\n      } as Partial<NeedPanelEvent>,\n    );\n  }\n}\n","import Component from \"@egjs/component\";\nimport Viewport from \"./components/Viewport\";\n\nimport { merge, getProgress, toArray, parseElement, isString } from \"./utils\";\nimport { DEFAULT_OPTIONS, EVENTS, DIRECTION, AXES_EVENTS, STATE_TYPE, DEFAULT_MOVE_TYPE_OPTIONS } from \"./consts\";\nimport { FlickingOptions, FlickingEvent, Direction, EventType, FlickingPanel, TriggerCallback, FlickingContext, FlickingStatus, Plugin, ElementLike } from \"./types\";\n\n/**\n * @memberof eg\n * @extends eg.Component\n * @support {\"ie\": \"10+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\" , \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @requires {@link https://github.com/naver/egjs-component|eg.Component}\n * @requires {@link https://github.com/naver/egjs-axes|eg.Axes}\n * @see Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>\n */\nclass Flicking extends Component {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @example\n   * eg.Flicking.VERSION;  // ex) 3.0.0\n   * @memberof eg.Flicking\n   */\n  public static VERSION: string = \"#__VERSION__#\";\n  /**\n   * Direction constant - \"PREV\" or \"NEXT\"\n   * @ko 방향 상수 - \"PREV\" 또는 \"NEXT\"\n   * @example\n   * eg.Flicking.DIRECTION.PREV; // \"PREV\"\n   * eg.Flicking.DIRECTION.NEXT; // \"NEXT\"\n   */\n  public static DIRECTION: Direction = DIRECTION;\n\n  /**\n   * Event type object\n   * @ko 이벤트 이름 문자열들을 담은 객체\n   */\n  public static EVENTS: EventType = EVENTS;\n\n  public options: FlickingOptions;\n\n  private wrapper: HTMLElement;\n  private viewport: Viewport;\n  private eventContext: FlickingContext;\n  private plugins: Plugin[] = [];\n\n  /**\n   * @param element A base element for the eg.Flicking module. When specifying a value as a `string` type, you must specify a css selector string to select the element.<ko>eg.Flicking 모듈을 사용할 기준 요소. `string`타입으로 값 지정시 요소를 선택하기 위한 css 선택자 문자열을 지정해야 한다.</ko>\n   * @param options An option object of the eg.Flicking module<ko>eg.Flicking 모듈의 옵션 객체</ko>\n   * @param {string} [options.classPrefix=\"eg-flick\"] A prefix of class name will be added for the panels, viewport and camera.<ko>패널들과 뷰포트, 카메라에 추가될 클래스 이름의 접두사.</ko>\n   * @param {number} [options.deceleration=0.0075] Deceleration value for panel movement animation for animation triggered by manual user input. Higher value means shorter running time.<ko>사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아진다.</ko>\n   * @param {boolean} [options.horizontal=true] Direction of panel movement. (true: horizontal, false: vertical)<ko>패널 이동 방향. (true: 가로방향, false: 세로방향)</ko>\n   * @param {boolean} [options.circular=false] Enables circular mode, which connects first/last panel for continuous scrolling<ko>순환 모드를 활성화한다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능하다.</ko>\n   * @param {boolean} [options.infinite=false] Enables infinite mode, which can automatically trigger needPanel until reaching last panel's index reaches lastIndex<ko>무한 모드를 활성화한다. 무한 모드에서는 needPanel 이벤트를 자동으로 트리거한다. 해당 동작은 마지막 패널의 인덱스가 lastIndex와 일치할때까지 일어난다.</ko>\n   * @param {number} [options.infiniteThreshold=0] A Threshold from viewport edge before triggering `needPanel` event in infinite mode.<ko>무한 모드에서 `needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리.</ko>\n   * @param {number} [options.lastIndex=Infinity] Maximum panel index that Flicking can set. Flicking won't trigger `needPanel` when event's panel index is greater than it.<br>Also, if last panel's index reached given index, you can't add more panels.<ko>Flicking이 설정 가능한 패널의 최대 인덱스. `needPanel` 이벤트에 지정된 인덱스가 최대 패널의 개수보다 같거나 커야 하는 경우에 이벤트를 트리거하지 않게 한다.<br>또한, 마지막 패널의 인덱스가 주어진 인덱스와 동일할 경우, 새로운 패널을 더 이상 추가할 수 없다.</ko>\n   * @param {number} [options.threshold=40] Movement threshold to change panel(unit: pixel). It should be dragged above the threshold to change current panel.<ko>패널 변경을 위한 이동 임계값 (단위: 픽셀). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.</ko>\n   * @param {number} [options.duration=100] Duration of the panel movement animation.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @param {function} [options.panelEffect=x => 1 - Math.pow(1 - x, 3)] An easing function applied to the panel movement animation. Default value is `easeOutCubic`.<ko>패널 이동 애니메이션에 적용할 easing함수. 기본값은 `easeOutCubic`이다.</ko>\n   * @param {number} [options.defaultIndex=0] Index of panel to set as default when initializing. A zero-based integer.<ko>초기화시 지정할 디폴트 패널의 인덱스로, 0부터 시작하는 정수.</ko>\n   * @param {string[]} [options.inputType=[\"touch,\"mouse\"]] Types of input devices to enable.({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption Reference})<ko>활성화할 입력 장치 종류. ({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption 참고})</ko>\n   * @param {number} [options.thresholdAngle=45] The threshold angle value(0 ~ 90).<br>If input angle from click/touched position is above or below this value in horizontal and vertical mode each, scrolling won't happen.<ko>스크롤 동작을 막기 위한 임계각(0 ~ 90).<br>클릭/터치한 지점으로부터 계산된 사용자 입력의 각도가 horizontal/vertical 모드에서 각각 크거나 작으면, 스크롤 동작이 이루어지지 않는다.</ko>\n   * @param {number|string|number[]|string[]} [options.bounce=[10,10]] The size value of the bounce area. Only can be enabled when `circular=false`.<br>You can set different bounce value for prev/next direction by using array.<br>`number` for px value, and `string` for px, and % value relative to viewport size.(ex - 0, \"10px\", \"20%\")<ko>바운스 영역의 크기값. `circular=false`인 경우에만 사용할 수 있다.<br>배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정 가능하다.<br>`number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있다.(ex - 0, \"10px\", \"20%\")</ko>\n   * @param {boolean} [options.autoResize=false] Whether resize() method should be called automatically after window resize event.<ko>window의 `resize` 이벤트 이후 자동으로 resize()메소드를 호출할지의 여부.</ko>\n   * @param {boolean} [options.adaptive=false] Whether the height(horizontal)/width(vertical) of the viewport element reflects the height/width value of the panel after completing the movement.<ko>목적 패널로 이동한 후 그 패널의 높이(horizontal)/너비(vertical)값을 뷰포트 요소의 높이/너비값에 반영할지 여부.</ko>\n   * @param {number} [options.zIndex=2000] z-index value for viewport element.<ko>뷰포트 엘리먼트의 z-index 값.</ko>\n   * @param {boolean} [options.bound=false] Prevent view from going out of first/last panel. Only can be enabled when `circular=false`.<ko>뷰가 첫번째와 마지막 패널 밖으로 나가는 것을 막아준다. `circular=false`인 경우에만 사용할 수 있다.</ko>\n   * @param {boolean} [options.overflow=false] Disables CSS property `overflow: hidden` in viewport if `true`.<ko>`true`로 설정시 뷰포트에 `overflow: hidden` 속성을 해제한다.</ko>\n   * @param {string} [options.hanger=\"50%\"] Reference position of hanger in viewport, which hangs panel anchors should be stopped at.<br>Should be provided in px or % value of viewport size.<br>You can combinate those values with plus/minus sign<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>뷰포트 내부의 행어의 위치. 패널의 앵커들이 뷰포트 내에서 멈추는 지점에 해당한다.<br>px값이나, 뷰포트의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {string} [options.anchor=\"50%\"] Reference position of anchor in panels, which can be hanged by viewport hanger.<br>Should be provided in px or % value of panel size.<br>You can combinate those values with plus/minus sign<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>패널 내부의 앵커의 위치. 뷰포트의 행어와 연계하여 패널이 화면 내에서 멈추는 지점을 설정할 수 있다.<br>px값이나, 패널의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {number} [options.gap=0] Space between each panels. Should be given in number.(px).<ko>패널간에 부여할 간격의 크기를 나타내는 숫자.(px)</ko>\n   * @param {eg.Flicking.MoveTypeOption} [options.moveType=\"snap\"] Movement style by user input.(ex: snap, freeScroll)<ko>사용자 입력에 의한 이동 방식.(ex: snap, freeScroll)</ko>\n   */\n  constructor(\n    element: string | HTMLElement,\n    options: Partial<FlickingOptions> = {},\n  ) {\n    super();\n\n    // Set flicking wrapper user provided\n    let wrapper: HTMLElement | null;\n    if (isString(element)) {\n      wrapper = document.querySelector(element);\n      if (!wrapper) {\n        throw new Error(\"Base element doesn't exist.\");\n      }\n    } else if (element.nodeName && element.nodeType === 1) {\n      wrapper = element;\n    } else {\n      throw new Error(\"Element should be provided in string or HTMLElement.\");\n    }\n\n    this.wrapper = wrapper;\n    // Override default options\n    this.options = merge({}, DEFAULT_OPTIONS, options) as FlickingOptions;\n    // Override moveType option\n    const currentOptions = this.options;\n    const moveType = currentOptions.moveType;\n\n    if (moveType in DEFAULT_MOVE_TYPE_OPTIONS) {\n      currentOptions.moveType = DEFAULT_MOVE_TYPE_OPTIONS[moveType as keyof typeof DEFAULT_MOVE_TYPE_OPTIONS];\n    }\n    this.build();\n  }\n\n  /**\n   * Move to the previous panel if it exists.\n   * @ko 이전 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public prev(duration?: number): this {\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.viewport.stateMachine.getState();\n\n    if (!currentPanel || currentState.type !== STATE_TYPE.IDLE) {\n      return this;\n    }\n\n    const prevPanel = currentPanel.prev();\n    if (prevPanel) {\n      prevPanel.focus(duration);\n    }\n\n    return this;\n  }\n\n  /**\n   * Move to the next panel if it exists.\n   * @ko 다음 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation(unit: ms).<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public next(duration?: number): this {\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.viewport.stateMachine.getState();\n\n    if (!currentPanel || currentState.type !== STATE_TYPE.IDLE) {\n      return this;\n    }\n\n    const nextPanel = currentPanel.next();\n    if (nextPanel) {\n      nextPanel.focus(duration);\n    }\n\n    return this;\n  }\n\n  /**\n   * Move to the panel of given index.\n   * @ko 주어진 인덱스에 해당하는 패널로 이동한다.\n   * @param index The index number of the panel to move.<ko>이동할 패널의 인덱스 번호.</ko>\n   * @param duration [duration=options.duration] Duration of the panel movement.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public moveTo(index: number, duration?: number): this {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    const state = viewport.stateMachine.getState();\n\n    if (!panel || state.type !== STATE_TYPE.IDLE) {\n      return this;\n    }\n\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = viewport.getHangerPosition();\n\n    let targetPanel = panel;\n    if (this.options.circular) {\n      const scrollAreaSize = viewport.getScrollAreaSize();\n      // Check all three possible locations, find the nearest position among them.\n      const possiblePositions = [\n        anchorPosition - scrollAreaSize,\n        anchorPosition,\n        anchorPosition + scrollAreaSize,\n      ];\n      const nearestPosition = possiblePositions.reduce((nearest, current) => {\n        return (Math.abs(current - hangerPosition) < Math.abs(nearest - hangerPosition))\n          ? current\n          : nearest;\n      }, Infinity) - panel.getRelativeAnchorPosition();\n\n      const identicals = panel.getIdenticalPanels();\n      const offset = nearestPosition - anchorPosition;\n      if (offset > 0) {\n        // First cloned panel is nearest\n        targetPanel = identicals[1];\n      } else if (offset < 0) {\n        // Last cloned panel is nearest\n        targetPanel = identicals[identicals.length - 1];\n      }\n\n      targetPanel = targetPanel.clone(targetPanel.getCloneIndex(), true);\n      targetPanel.setPosition(nearestPosition, true);\n    }\n    const currentIndex = this.getIndex();\n\n    if (hangerPosition === targetPanel.getAnchorPosition() && currentIndex === index) {\n      return this;\n    }\n\n    const eventType = panel.getIndex() === viewport.getCurrentIndex()\n      ? \"\"\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(\n      targetPanel,\n      viewport.findEstimatedPosition(targetPanel),\n      eventType,\n      null,\n      duration,\n    );\n    return this;\n  }\n\n  /**\n   * Return index of the current panel. `-1` if no panel exists.\n   * @ko 현재 패널의 인덱스 번호를 반환한다. 패널이 하나도 없을 경우 `-1`을 반환한다.\n   * @return Current panel's index, zero-based integer.<ko>현재 패널의 인덱스 번호. 0부터 시작하는 정수.</ko>\n   */\n  public getIndex(): number {\n    return this.viewport.getCurrentIndex();\n  }\n\n  /**\n   * Return the wrapper element user provided in constructor.\n   * @ko 사용자가 생성자에서 제공한 래퍼 엘리먼트를 반환한다.\n   * @return Wrapper element user provided.<ko>사용자가 제공한 래퍼 엘리먼트.</ko>\n   */\n  public getElement(): HTMLElement {\n    return this.wrapper;\n  }\n\n  /**\n   * Return current panel. `null` if no panel exists.\n   * @ko 현재 패널을 반환한다. 패널이 하나도 없을 경우 `null`을 반환한다.\n   * @return Current panel.<ko>현재 패널.</ko>\n   */\n  public getCurrentPanel(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.getCurrentPanel();\n    return panel\n      ? panel\n      : null;\n  }\n\n  /**\n   * Return the panel of given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 패널을 반환한다. 해당 패널이 존재하지 않을 시 `null`이다.\n   * @return Panel of given index.<ko>주어진 인덱스에 해당하는 패널.</ko>\n   */\n  public getPanel(index: number): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    return panel\n      ? panel\n      : null;\n  }\n\n  /**\n   * Return all panels.\n   * @ko 모든 패널들을 반환한다.\n   * @param - Should include cloned panels or not.<ko>복사된 패널들을 포함할지의 여부.</ko>\n   * @return All panels.<ko>모든 패널들.</ko>\n   */\n  public getAllPanels(includeClone?: boolean): FlickingPanel[] {\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const panels = includeClone\n      ? panelManager.allPanels()\n      : panelManager.originalPanels();\n\n    return panels\n      .filter(panel => !!panel);\n  }\n\n  /**\n   * Return the panels currently shown in viewport area.\n   * @ko 현재 뷰포트 영역에서 보여지고 있는 패널들을 반환한다.\n   * @return Panels currently shown in viewport area.<ko>현재 뷰포트 영역에 보여지는 패널들</ko>\n   */\n  public getVisiblePanels(): FlickingPanel[] {\n    return this.getAllPanels(true).filter(panel => {\n      const outsetProgress = panel.getOutsetProgress();\n\n      return outsetProgress > -1 && outsetProgress < 1;\n    });\n  }\n\n  /**\n   * Return length of original panels.\n   * @ko 원본 패널의 개수를 반환한다.\n   * @return Length of original panels.<ko>원본 패널의 개수</ko>\n   */\n  public getPanelCount(): number {\n    return this.viewport.panelManager.getPanelCount();\n  }\n\n  /**\n   * Set last panel index for `infinite' mode.<br>[needPanel]{@link eg.Flicking#events:needPanel} won't be triggered anymore when last panel's index reaches it.<br>Also, you can't add more panels after it.\n   * @ko `infinite` 모드에서 적용되는 패널의 최대 인덱스를 설정한다.<br>마지막 패널의 인덱스가 설정한 값에 도달할 경우 더 이상 [needPanel]{@link eg.Flicking#events:needPanel} 이벤트가 발생되지 않는다.<br>또한, 설정한 인덱스 이후로 새로운 패널을 추가할 수 없다.\n   * @param - Last panel index.\n   * @see {@link eg.Flicking.FlickingOptions}\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public setLastIndex(index: number): this {\n    this.viewport.setLastIndex(index);\n\n    return this;\n  }\n\n  /**\n   * Return panel movement animation.\n   * @ko 현재 패널 이동 애니메이션이 진행 중인지를 반환한다.\n   * @return Is animating or not.<ko>애니메이션 진행 여부.</ko>\n   */\n  public isPlaying(): boolean {\n    return this.viewport.stateMachine.getState().playing;\n  }\n\n  /**\n   * Unblock input devices.\n   * @ko 막았던 입력 장치로부터의 입력을 푼다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public enableInput(): this {\n    this.viewport.enable();\n\n    return this;\n  }\n\n  /**\n   * Block input devices.\n   * @ko 입력 장치로부터의 입력을 막는다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public disableInput(): this {\n    this.viewport.disable();\n\n    return this;\n  }\n\n  /**\n   * Get current flicking status. You can restore current state by giving returned value to [setStatus()]{@link eg.Flicking#setStatus}.\n   * @ko 현재 상태 값을 반환한다. 반환받은 값을 [setStatus()]{@link eg.Flicking#setStatus} 메소드의 인자로 지정하면 현재 상태를 복원할 수 있다.\n   * @return An object with current status value information.<ko>현재 상태값 정보를 가진 객체.</ko>\n   */\n  public getStatus(): FlickingStatus {\n    const viewport = this.viewport;\n\n    const panels = viewport.panelManager.originalPanels()\n      .filter(panel => !!panel)\n      .map(panel => {\n        return {\n          html: panel.getElement().outerHTML,\n          index: panel.getIndex(),\n        };\n      });\n\n    return {\n      index: viewport.getCurrentIndex(),\n      panels,\n      position: viewport.getCameraPosition(),\n    };\n  }\n\n  /**\n   * Restore to the state of the `status`.\n   * @ko `status`의 상태로 복원한다.\n   * @param status Status value to be restored. You can specify the return value of the [getStatus()]{@link eg.Flicking#getStatus} method.<ko>복원할 상태 값. [getStatus()]{@link eg.Flicking#getStatus}메서드의 반환값을 지정하면 된다.</ko>\n   */\n  public setStatus(status: FlickingStatus): void {\n    this.viewport.restore(status);\n  }\n\n  /**\n   * Add plugins that can have different effects on Flicking.\n   * @ko 플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가한다.\n   * @param - The plugin(s) to add.<ko>추가할 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public addPlugins(plugins: Plugin | Plugin[]) {\n    const newPlugins = ([] as Plugin[]).concat(plugins);\n\n    newPlugins.forEach(plugin => {\n      plugin.init(this);\n    });\n\n    this.plugins = this.plugins.concat(newPlugins);\n    return this;\n  }\n  /**\n   * Remove plugins from Flicking.\n   * @ko 플리킹으로부터 플러그인들을 제거한다.\n   * @param - The plugin(s) to remove.<ko>제거 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public removePlugins(plugins: Plugin | Plugin[]) {\n    const currentPlugins = this.plugins;\n    const removedPlugins = ([] as Plugin[]).concat(plugins);\n\n    removedPlugins.forEach(plugin => {\n      const index = currentPlugins.indexOf(plugin);\n\n      if (index > -1) {\n        currentPlugins.splice(index, 1);\n      }\n\n      plugin.destroy(this);\n    });\n    return this;\n  }\n\n  /**\n   * Return the reference element and all its children to the state they were in before the instance was created. Remove all attached event handlers. Specify `null` for all attributes of the instance (including inherited attributes).\n   * @ko 기준 요소와 그 하위 패널들을 인스턴스 생성전의 상태로 되돌린다. 부착된 모든 이벤트 핸들러를 탈거한다. 인스턴스의 모든 속성(상속받은 속성포함)에 `null`을 지정한다.\n   * @example\n   * const flick = new eg.Flicking(\"#flick\");\n   * flick.destroy();\n   * console.log(flick.moveTo); // null\n   */\n  public destroy(): void {\n    this.off();\n\n    this.viewport.destroy();\n\n    this.plugins.forEach(plugin => {\n      plugin.destroy(this);\n    });\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  /**\n   * Update panels to current state.\n   * @ko 패널들을 현재 상태에 맞춰 갱신한다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public resize(): this {\n    const viewport = this.viewport;\n\n    viewport.panelManager.allPanels()\n      .forEach(panel => panel.unCacheBbox());\n    viewport.resize();\n\n    return this;\n  }\n\n  /**\n   * Add new panels at the beginning of panels.\n   * @ko 제일 앞에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.replace(3, document.createElement(\"div\")); // Add new panel at index 3\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 2\n   * flicking.prepend([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Prepended at index 0, 1\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 0, pushing every panels behind it.\n   */\n  public prepend(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n    const parsedElements = parseElement(element);\n\n    const insertingIndex = Math.max(viewport.panelManager.getRange().min - parsedElements.length, 0);\n    return viewport.insert(insertingIndex, parsedElements);\n  }\n\n  /**\n   * Add new panels at the end of panels.\n   * @ko 제일 끝에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.append(document.createElement(\"div\")); // Appended at index 0\n   * flicking.append(\"\\<div\\>Panel\\</div\\>\"); // Appended at index 1\n   * flicking.append([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Appended at index 2, 3\n   * // Even this is possible\n   * flicking.append(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\"); // Appended at index 4, 5\n   */\n  public append(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n\n    return viewport.insert(viewport.panelManager.getRange().max + 1, element);\n  }\n\n  /**\n   * Replace existing panels with new panels from given index. If target index is empty, add new panel at target index.\n   * @ko 주어진 인덱스로부터의 패널들을 새로운 패널들로 교체한다. 인덱스에 해당하는 자리가 비어있다면, 새로운 패널을 해당 자리에 집어넣는다.\n   * @param index - Start index to replace new panels.<ko>새로운 패널들로 교체할 시작 인덱스</ko>\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of created panels by replace.<ko>교체되어 새롭게 추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   *\n   * // This will add new panel at index 3,\n   * // Index 0, 1, 2 is empty at this moment.\n   * // [empty, empty, empty, PANEL]\n   * flicking.replace(3, document.createElement(\"div\"));\n   *\n   * // As index 2 was empty, this will also add new panel at index 2.\n   * // [empty, empty, PANEL, PANEL]\n   * flicking.replace(2, \"\\<div\\>Panel\\</div\\>\");\n   *\n   * // Index 3 was not empty, so it will replace previous one.\n   * // It will also add new panels at index 4 and 5.\n   * // before - [empty, empty, PANEL, PANEL]\n   * // after - [empty, empty, PANEL, NEW_PANEL, NEW_PANEL, NEW_PANEL]\n   * flicking.replace(3, [\"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\"])\n   */\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    return this.viewport.replace(index, element);\n  }\n\n  /**\n   * Remove panel at target index. This will decrease index of panels behind it.\n   * @ko `index`에 해당하는 자리의 패널을 제거한다. 수행시 `index` 이후의 패널들의 인덱스가 감소된다.\n   * @param index - Index of panel to remove.<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] - Number of panels to remove from index.<ko>`index` 이후로 제거할 패널의 개수.</ko>\n   * @return Array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    return this.viewport.remove(index, deleteCount);\n  }\n\n  private build(): void {\n    this.initViewport();\n    this.listenInput();\n    this.listenResize();\n  }\n\n  private initViewport(): void {\n    const wrapper = this.wrapper;\n    const options = this.options;\n    const cameraElement = document.createElement(\"div\");\n\n    // Make all panels to be a child of camera element\n    // wrapper <- viewport <- camera <- panels[1...n]\n    toArray(wrapper.children).forEach(child => {\n      cameraElement.appendChild(child);\n    });\n\n    // Clipping area for camera element\n    const viewportElement = document.createElement(\"div\");\n    viewportElement.appendChild(cameraElement);\n\n    // Add viewport element to wrapper\n    wrapper.appendChild(viewportElement);\n\n    // Make viewport instance with panel container element\n    this.viewport = new Viewport(this, viewportElement, cameraElement, options, this.triggerEvent);\n  }\n\n  private listenInput(): void {\n    const flicking = this;\n    const viewport = flicking.viewport;\n    const stateMachine = viewport.stateMachine;\n\n    // Set event context\n    flicking.eventContext = {\n      flicking,\n      viewport: flicking.viewport,\n      transitTo: stateMachine.transitTo,\n      triggerEvent: flicking.triggerEvent,\n      moveCamera: flicking.moveCamera,\n      stopCamera: viewport.stopCamera,\n    };\n\n    const handlers = {};\n    for (const key in AXES_EVENTS) {\n      const eventType = AXES_EVENTS[key];\n\n      handlers[eventType] = (e: any) => stateMachine.fire(eventType, e, flicking.eventContext);\n    }\n\n    // Connect Axes instance with PanInput\n    flicking.viewport.connectAxesHandler(handlers);\n  }\n\n  private listenResize(): void {\n    if (this.options.autoResize) {\n      window.addEventListener(\"resize\", () => {\n        this.resize();\n      });\n    }\n  }\n\n  private triggerEvent = <T extends FlickingEvent>(\n    eventName: string,\n    axesEvent: any,\n    isTrusted: boolean,\n    params: Partial<T> = {},\n  ): TriggerCallback => {\n    const viewport = this.viewport;\n\n    let canceled: boolean = true;\n\n    // Ignore events before viewport is initialized\n    if (viewport) {\n      const state = viewport.stateMachine.getState();\n      const { prev, next } = viewport.getScrollArea();\n      const pos = viewport.getCameraPosition();\n      let progress = getProgress(pos, [prev, prev, next]);\n\n      if (this.options.circular) {\n        progress %= 1;\n      }\n      canceled = !super.trigger(eventName, merge({\n        type: eventName,\n        index: this.getIndex(),\n        panel: this.getCurrentPanel(),\n        direction: state.direction,\n        holding: state.holding,\n        progress,\n        axesEvent,\n        isTrusted,\n      }, params));\n    }\n\n    return {\n      onSuccess(callback: () => void): TriggerCallback {\n        if (!canceled) {\n          callback();\n        }\n        return this;\n      },\n      onStopped(callback: () => void): TriggerCallback {\n        if (canceled) {\n          callback();\n        }\n        return this;\n      },\n    } as TriggerCallback;\n  }\n\n  // Return result of \"move\" event triggered\n  private moveCamera = (axesEvent: any): TriggerCallback => {\n    const viewport = this.viewport;\n    const state = viewport.stateMachine.getState();\n    const options = this.options;\n\n    const pos = axesEvent.pos.flick;\n    const previousPosition = viewport.getCameraPosition();\n\n    if (axesEvent.isTrusted && state.holding) {\n      const inputOffset = options.horizontal\n        ? axesEvent.inputEvent.offsetX\n        : axesEvent.inputEvent.offsetY;\n\n      const isNextDirection = inputOffset < 0;\n\n      let cameraChange = pos - previousPosition;\n      const looped = isNextDirection === (pos < previousPosition);\n      if (options.circular && looped) {\n        // Reached at max/min range of axes\n        const scrollAreaSize = viewport.getScrollAreaSize();\n        cameraChange = (cameraChange > 0 ? -1 : 1) * (scrollAreaSize - Math.abs(cameraChange));\n      }\n\n      const currentDirection = cameraChange === 0\n        ? state.direction\n        : cameraChange > 0\n          ? DIRECTION.NEXT\n          : DIRECTION.PREV;\n\n      state.direction = currentDirection;\n    }\n    state.delta += axesEvent.delta.flick;\n\n    viewport.moveCamera(pos, axesEvent);\n    return this.triggerEvent(EVENTS.MOVE, axesEvent, axesEvent.isTrusted)\n      .onStopped(() => {\n        // Undo camera movement\n        viewport.moveCamera(previousPosition, axesEvent);\n      });\n  }\n}\n\nexport default Flicking;\n"],"names":["target","_i","srcs","forEach","source","Object","keys","key","value","element","Array","isArray","elements","el","isString","tempDiv","document","createElement","innerHTML","push","toArray","children","checkTranslateSupport","transforms","webkitTransform","msTransform","MozTransform","OTransform","transform","supportedStyle","documentElement","style","transformName","prefixedTransform","Error","insertBefore","styleVal","window","getComputedStyle","getPropertyValue","parentElement","removeChild","transformInfo","name","has3d","length","className","classList","add","indexOf","replace","cssObj","property","val","min","max","Math","iterable","slice","call","arr","constructor","cssValue","base","defaultVal","defaultValue","cssRegex","clamp","idx","calculatedValue","matchResult","exec","sign","unit","parsedValue","parseFloat","pos","range","center","callback","i","counterArray","indexed","size","offset","MOVE_TYPE","SNAP","FREE_SCROLL","DEFAULT_MOVE_TYPE_OPTIONS","snap","type","count","freeScroll","DEFAULT_OPTIONS","classPrefix","deceleration","horizontal","circular","infinite","infiniteThreshold","lastIndex","Infinity","threshold","duration","panelEffect","x","pow","defaultIndex","inputType","thresholdAngle","bounce","autoResize","adaptive","zIndex","bound","overflow","hanger","anchor","gap","moveType","DEFAULT_VIEWPORT_CSS","position","width","height","DEFAULT_CAMERA_CSS","willChange","DEFAULT_PANEL_CSS","EVENTS","HOLD_START","HOLD_END","MOVE_START","MOVE","MOVE_END","CHANGE","RESTORE","SELECT","NEED_PANEL","AXES_EVENTS","HOLD","RELEASE","ANIMATION_END","FINISH","STATE_TYPE","IDLE","HOLDING","DRAGGING","ANIMATING","DISABLED","DIRECTION","PREV","NEXT","TRANSFORM","index","viewport","prevSibling","nextSibling","state","relativeAnchorPosition","clonedPanels","isClone","cloneIndex","originalStyle","getAttribute","cachedBbox","options","addClass","applyCSS","bbox","getBbox","parseArithmeticExpression","panel","resize","panelCount","panelManager","getPanelCount","scrollAreaSize","getScrollAreaSize","relativeIndex","floor","getPosition","getIndex","progress","getCurrentProgress","outsetRange","getSize","getRelativeHangerPosition","getRelativeAnchorPosition","relativePanelPosition","getCameraPosition","outsetProgress","getProgress","panelSize","rightRelativePanelPosition","visibleSize","visibleRatio","currentPanel","getCurrentPanel","hangerPosition","getHangerPosition","anchorPosition","getAnchorPosition","currentPosition","eventType","moveTo","findEstimatedPosition","updateFunction","getIdenticalPanels","eachPanel","getElement","unCacheBbox","currentIndex","prevPanelIndex","prevPanelPosition","prevPanelSize","hasEmptyPanelBetween","notYetMinPanel","newPosition","prevPanel","clone","getCloneIndex","setPosition","getLastIndex","nextPanelIndex","nextPanelPosition","notYetMaxPanel","nextPanel","parsedElements","parseElement","firstPanel","targetIndex","insert","remove","setAttribute","removeAttribute","getBoundingClientRect","original","getClonedPanels","virtual","elementStyle","left","top","cloneElement","cloneNode","clonedPanel","Panel","clonedState","parentNode","removeClonedPanelsAfter","start","removingPanels","splice","removeElement","cameraElement","panels","clones","reduce","allClones","lastPanel","firstRemovedPanel","filter","possibleLastPanel","newPanels","_a","isCircular","findFirstPanelFrom","siblingElement","fragment","createDocumentFragment","appendChild","pushedIndex","panelsAfterIndex","emptyPanelCount","findIndex","removedPanels","Boolean","newLastIndex","concat","reverse","setIndex","addNewClones","updateIndex","replacedPanels","wasNonEmptyCount","deleteCount","deletedPanels","cloneSet","reversedPanels","nonEmptyIndexFromLast","allPanels","allPanelsCount","newClones_1","insertTarget_1","allPanels_1","panelElement","contains","originalPanels","cloneCount","getCloneCount","lastPanelClones","nextSiblingClones","cloneNextSibling","lastPanelSibling","cloneSiblingElement","nextElementSibling","newClones","map","this_1","insertClones","counter","insertingIndex","prevState","delta","direction","targetPanel","lastPosition","nextState","e","context","tslib_1","_this","flicking","triggerEvent","transitTo","onSuccess","onStopped","onChange","State","inputEvent","offsetX","offsetY","flick","setTo","releaseEvent","clickedElement","srcEvent","clickedPanel","findPanelOf","cameraPosition","clickedPanelPosition","moveCamera","stopCamera","isFreeScroll","is","velocity","velocityX","velocityY","inputDelta","deltaX","deltaY","isNextDirection","abs","swipeDistance","swipeAngle","atan","PI","belowAngleThreshold","overThreshold","destPos","nearestPanel","getNearestPanel","stop","moveTypeContext","axesEvent","destInfo","findTargetPanel","findRestorePanel","scrollArea","getScrollArea","loopCount","prev","originalTargetPosition","newCloneIndex","circulate","newTargetPosition","newTargetPanel","setCurrentPanel","isTrusted","updateAdaptiveSize","updateAxesPosition","IdleState","nextStateType","currentState","HoldingState","DraggingState","AnimatingState","DisabledState","onExit","onEnter","onHold","onRelease","onAnimationEnd","onFinish","ctx","findRestorePanelInCircularMode","halfGap","minimumDistanceToChange","originalPanel","getOriginalPanel","firstClonedPanel","lapped","_super","snapCount","eventDelta","calcBrinkOfChange","shouldMoveWhenBounceIs0","canSetBoundMode","shouldMoveToAdjacent","isOutOfBound","findSnappedPanel","findAdjacentPanel","estimatedHangerPos","panelToMove","cycleIndex","passedPanelCount","siblingPanel","panelIndex","siblingIndex","panelPosition","panelNextPosition","panelPrevPosition","originalPosition","defaultDuration","getCurrentIndex","get","basePanel","basePosition","adjacentPanel","targetRelativeAnchorPosition","estimatedPanelPosition","estimatedPosition","MoveType","next","findNearestPanelAt","stateMachine","getState","currentPanelPosition","lastHangerPosition","Snap","viewportElement","relativeHangerPosition","translate","checkedIndexes","StateMachine","PanelManager","build","eventResult","axes","findNearestPanel","originalNearestPosition","checkNeedPanel","modifiedNearestPosition","moveVector","moveCoord","coord","round","join","updateSize","updateOriginalPanelPositions","updateScrollArea","clonePanels","updateClonedPanelPositions","chainAllPanels","updateCameraPosition","minimumDistance","prevPosition","nextPosition","distance","isBetween","minimumAnchorDistance","anchorDistance","nearest","shortestDistance","identicals","identical","panInput","enable","disable","indexes","wasEmpty","newCurrentIndex","getRange","sizeToApply","panelBbox","maximumPanelSize","maximum","viewportStyle","minHeight","minWidth","wrapper","destroy","status","clear","html","createPanels","playing","holding","NaN","prevRange","nextRange","nearestAnchorPos","nearestIndex","nearestSize","hangerIsNextToNearestPanel","targetPosition","progressBetween","startIndex","off","on","axesHandlers","summedPanelSize","setLastIndex","handlers","applyCSSValue","setMoveType","setAxesInstance","setDefaultPanel","moveToDefaultPanel","FreeScroll","Axes","easing","interruptable","PanInput","scale","connect","panelElements","append","indexRange","viewportSize","sumOriginalPanelSize","visibleAreaSize","ceil","prevCloneCount","origPanel","removeClonesAfter","defaultPanel","defaultPosition","nextPanelPos","maintainingPanel","looped","panelsBeforeMaintainPanel","accumulatedSize","total","clonedPanels_1","cloneBasePos","clonedPanelPos","lastReplacePosition","_b","replacePosition","parsedBounce","parsedVal","axis","maxLastIndex","triggerNeedPanel","checkingPanel","atLastPanel","nextIndex","currentNearestPosition","panelRight","cameraNext","emptyPanelExistsBetween","firstIndex","cameraPrev","checkingIndex","atFirstPanel","prevIndex","panelLeft","params","alreadyTriggered","some","hasHandler","hasOn","eventName","canceled","trigger","merge","previousPosition","inputOffset","cameraChange","currentDirection","querySelector","nodeName","nodeType","currentOptions","focus","possiblePositions","nearestPosition","current","includeClone","getAllPanels","getOutsetProgress","outerHTML","restore","plugins","newPlugins","plugin","init","currentPlugins","removedPlugins","initViewport","listenInput","listenResize","child","Viewport","eventContext","fire","connectAxesHandler","addEventListener","Flicking","Component"],"mappings":"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"}