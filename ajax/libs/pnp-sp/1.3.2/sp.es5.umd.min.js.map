{"version":3,"file":"sp.es5.umd.min.js","sources":["../../../../node_modules/tslib/tslib.es6.js","../../../../packages/sp/src/utils/extractweburl.ts","../../../../packages/sp/src/odata.ts","../../../../packages/sp/src/config/splibconfig.ts","../../../../packages/sp/src/net/digestcache.ts","../../../../packages/sp/src/net/sphttpclient.ts","../../../../node_modules/rollup-plugin-node-globals/src/global.js","../../../../packages/sp/src/utils/toabsoluteurl.ts","../../../../packages/sp/src/utils/metadata.ts","../../../../packages/sp/src/sharepointqueryable.ts","../../../../packages/sp/src/siteusers.ts","../../../../packages/sp/src/sitegroups.ts","../../../../packages/sp/src/types.ts","../../../../packages/sp/src/roles.ts","../../../../packages/sp/src/files.ts","../../../../packages/sp/src/sharepointqueryablesecurable.ts","../../../../packages/sp/src/sharepointqueryableshareable.ts","../../../../packages/sp/src/webparts.ts","../../../../packages/sp/src/folders.ts","../../../../packages/sp/src/contenttypes.ts","../../../../packages/sp/src/attachmentfiles.ts","../../../../packages/sp/src/views.ts","../../../../packages/sp/src/fields.ts","../../../../packages/sp/src/forms.ts","../../../../packages/sp/src/subscriptions.ts","../../../../packages/sp/src/usercustomactions.ts","../../../../packages/sp/src/lists.ts","../../../../packages/sp/src/comments.ts","../../../../packages/sp/src/items.ts","../../../../packages/sp/src/clientsidepages.ts","../../../../packages/sp/src/appcatalog.ts","../../../../packages/sp/src/batch.ts","../../../../packages/sp/src/features.ts","../../../../packages/sp/src/site.ts","../../../../packages/sp/src/navigation.ts","../../../../packages/sp/src/relateditems.ts","../../../../packages/sp/src/regionalsettings.ts","../../../../packages/sp/src/webs.ts","../../../../packages/sp/src/search.ts","../../../../packages/sp/src/social.ts","../../../../packages/sp/src/searchsuggest.ts","../../../../packages/sp/src/userprofiles.ts","../../../../packages/sp/src/sitescripts.ts","../../../../packages/sp/src/sitedesigns.ts","../../../../packages/sp/src/utilities.ts","../../../../packages/sp/src/hubsites.ts","../../../../packages/sp/src/rest.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { stringIsNullOrEmpty } from \"@pnp/common\";\n\nexport function extractWebUrl(candidateUrl: string) {\n\n    if (stringIsNullOrEmpty(candidateUrl)) {\n        return \"\";\n    }\n\n    let index = candidateUrl.indexOf(\"_api/\");\n\n    if (index < 0) {\n        index = candidateUrl.indexOf(\"_vti_bin/\");\n    }\n\n    if (index > -1) {\n        return candidateUrl.substr(0, index);\n    }\n\n    // if all else fails just give them what they gave us back\n    return candidateUrl;\n}\n","import { SharePointQueryableConstructor } from \"./sharepointqueryable\";\nimport { extend, combine, hOP } from \"@pnp/common\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { ODataParser, ODataParserBase } from \"@pnp/odata\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\n\nexport function odataUrlFrom(candidate: any): string {\n\n    const parts: string[] = [];\n    const s = [\"odata.type\", \"odata.editLink\", \"__metadata\", \"odata.metadata\"];\n    if (hOP(candidate, s[0]) && candidate[s[0]] === \"SP.Web\") {\n        // webs return an absolute url in the editLink\n        if (hOP(candidate, s[1])) {\n            parts.push(candidate[s[1]]);\n        } else if (hOP(candidate, s[2])) {\n            // we are dealing with verbose, which has an absolute uri\n            parts.push(candidate.__metadata.uri);\n        }\n\n    } else {\n\n        if (hOP(candidate, s[3]) && hOP(candidate, s[1])) {\n            // we are dealign with minimal metadata (default)\n            parts.push(extractWebUrl(candidate[s[3]]), \"_api\", candidate[s[1]]);\n        } else if (hOP(candidate, s[1])) {\n            parts.push(\"_api\", candidate[s[1]]);\n        } else if (hOP(candidate, s[2])) {\n            // we are dealing with verbose, which has an absolute uri\n            parts.push(candidate.__metadata.uri);\n        }\n    }\n\n    if (parts.length < 1) {\n        Logger.write(\"No uri information found in ODataEntity parsing, chaining will fail for this object.\", LogLevel.Warning);\n        return \"\";\n    }\n\n    return combine(...parts);\n}\n\nclass SPODataEntityParserImpl<T, D> extends ODataParserBase<T & D> {\n\n    constructor(protected factory: SharePointQueryableConstructor<T>) {\n        super();\n    }\n\n    public hydrate = (d: D) => {\n        const o = <T>new this.factory(odataUrlFrom(d), null);\n        return extend(o, d);\n    }\n\n    public parse(r: Response): Promise<T & D> {\n        return super.parse(r).then((d: any) => {\n            const o = <T>new this.factory(odataUrlFrom(d), null);\n            return extend<T, D>(o, d);\n        });\n    }\n}\n\nclass SPODataEntityArrayParserImpl<T, D> extends ODataParserBase<(T & D)[]> {\n\n    constructor(protected factory: SharePointQueryableConstructor<T>) {\n        super();\n    }\n\n    public hydrate = (d: D[]) => {\n        return d.map(v => {\n            const o = <T>new this.factory(odataUrlFrom(v), null);\n            return extend(o, v);\n        });\n    }\n\n    public parse(r: Response): Promise<(T & D)[]> {\n        return super.parse(r).then((d: D[]) => {\n            return d.map(v => {\n                const o = <T>new this.factory(odataUrlFrom(v), null);\n                return extend(o, v);\n            });\n        });\n    }\n}\n\nexport function spODataEntity<T, DataType = any>(factory: SharePointQueryableConstructor<T>): ODataParser<T & DataType> {\n    return new SPODataEntityParserImpl<T, DataType>(factory);\n}\n\nexport function spODataEntityArray<T, DataType = any>(factory: SharePointQueryableConstructor<T>): ODataParser<(T & DataType)[]> {\n    return new SPODataEntityArrayParserImpl<T, DataType>(factory);\n}\n","import {\n    LibraryConfiguration,\n    TypedHash,\n    RuntimeConfig,\n    HttpClientImpl,\n    FetchClient,\n} from \"@pnp/common\";\n\nexport interface SPConfigurationPart {\n    sp?: {\n        /**\n         * Any headers to apply to all requests\n         */\n        headers?: TypedHash<string>;\n\n        /**\n         * The base url used for all requests\n         */\n        baseUrl?: string;\n\n        /**\n         * Defines a factory method used to create fetch clients\n         */\n        fetchClientFactory?: () => HttpClientImpl;\n    };\n}\n\nexport interface SPConfiguration extends LibraryConfiguration, SPConfigurationPart { }\n\nexport function setup(config: SPConfiguration): void {\n    RuntimeConfig.extend(config);\n}\n\nexport class SPRuntimeConfigImpl {\n\n    public get headers(): TypedHash<string> {\n\n        const spPart = RuntimeConfig.get(\"sp\");\n        if (spPart !== undefined && spPart.headers !== undefined) {\n            return spPart.headers;\n        }\n\n        return {};\n    }\n\n    public get baseUrl(): string | null {\n\n        const spPart = RuntimeConfig.get(\"sp\");\n        if (spPart !== undefined && spPart.baseUrl !== undefined) {\n            return spPart.baseUrl;\n        }\n\n        if (RuntimeConfig.spfxContext !== undefined && RuntimeConfig.spfxContext !== null) {\n            return RuntimeConfig.spfxContext.pageContext.web.absoluteUrl;\n        }\n\n        return null;\n    }\n\n    public get fetchClientFactory(): () => HttpClientImpl {\n\n        const spPart = RuntimeConfig.get(\"sp\");\n        if (spPart !== undefined && spPart.fetchClientFactory !== undefined) {\n            return spPart.fetchClientFactory;\n        } else {\n            return () => new FetchClient();\n        }\n    }\n}\n\nexport let SPRuntimeConfig = new SPRuntimeConfigImpl();\n","import { SPHttpClient } from \"./sphttpclient\";\nimport { combine, extend } from \"@pnp/common\";\nimport { ODataDefaultParser } from \"@pnp/odata\";\nimport { SPRuntimeConfig } from \"../config/splibconfig\";\n\nexport class CachedDigest {\n    public expiration: Date;\n    public value: string;\n}\n\n// allows for the caching of digests across all HttpClient's which each have their own DigestCache wrapper.\nconst digests = new Map<string, CachedDigest>();\n\nexport class DigestCache {\n\n    constructor(private _httpClient: SPHttpClient, private _digests: Map<string, CachedDigest> = digests) { }\n\n    public getDigest(webUrl: string): Promise<string> {\n\n        const cachedDigest: CachedDigest = this._digests.get(webUrl);\n        if (cachedDigest !== undefined) {\n            const now = new Date();\n            if (now < cachedDigest.expiration) {\n                return Promise.resolve(cachedDigest.value);\n            }\n        }\n\n        const url = combine(webUrl, \"/_api/contextinfo\");\n\n        const headers = {\n            \"Accept\": \"application/json;odata=verbose\",\n            \"Content-Type\": \"application/json;odata=verbose;charset=utf-8\",\n        };\n\n        return this._httpClient.fetchRaw(url, {\n            cache: \"no-cache\",\n            credentials: \"same-origin\",\n            headers: extend(headers, SPRuntimeConfig.headers, true),\n            method: \"POST\",\n        }).then((response) => {\n            const parser = new ODataDefaultParser();\n            return parser.parse(response).then((d: any) => d.GetContextWebInformation);\n        }).then((data: any) => {\n            const newCachedDigest = new CachedDigest();\n            newCachedDigest.value = data.FormDigestValue;\n            const seconds = data.FormDigestTimeoutSeconds;\n            const expiration = new Date();\n            expiration.setTime(expiration.getTime() + 1000 * seconds);\n            newCachedDigest.expiration = expiration;\n            this._digests.set(webUrl, newCachedDigest);\n            return newCachedDigest.value;\n        });\n    }\n\n    public clear() {\n        this._digests.clear();\n    }\n}\n","import { DigestCache } from \"./digestcache\";\nimport {\n    extend,\n    mergeHeaders,\n    FetchOptions,\n    RequestClient,\n    getCtxCallback,\n    HttpClientImpl,\n} from \"@pnp/common\";\nimport { SPRuntimeConfig } from \"../config/splibconfig\";\nimport { extractWebUrl } from \"../utils/extractweburl\";\n\nexport class SPHttpClient implements RequestClient {\n\n    private _digestCache: DigestCache;\n\n    constructor(private _impl: HttpClientImpl = SPRuntimeConfig.fetchClientFactory()) {\n        this._digestCache = new DigestCache(this);\n    }\n\n    public fetch(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        let opts = extend(options, { cache: \"no-cache\", credentials: \"same-origin\" }, true);\n\n        const headers = new Headers();\n\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\n        mergeHeaders(headers, SPRuntimeConfig.headers);\n\n        // second we add the local options so we can overwrite the globals\n        mergeHeaders(headers, options.headers);\n\n        // lastly we apply any default headers we need that may not exist\n        if (!headers.has(\"Accept\")) {\n            headers.append(\"Accept\", \"application/json\");\n        }\n\n        if (!headers.has(\"Content-Type\")) {\n            headers.append(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n        }\n\n        if (!headers.has(\"X-ClientService-ClientTag\")) {\n            headers.append(\"X-ClientService-ClientTag\", \"PnPCoreJS:@pnp-$$Version$$\");\n        }\n\n        if (!headers.has(\"User-Agent\")) {\n            // this marks the requests for understanding by the service\n            headers.append(\"User-Agent\", \"NONISV|SharePointPnP|PnPCoreJS/$$Version$$\");\n        }\n\n        opts = extend(opts, { headers: headers });\n\n        if (opts.method && opts.method.toUpperCase() !== \"GET\") {\n\n            // if we have either a request digest or an authorization header we don't need a digest\n            if (!headers.has(\"X-RequestDigest\") && !headers.has(\"Authorization\")) {\n                return this._digestCache.getDigest(extractWebUrl(url))\n                    .then((digest) => {\n                        headers.append(\"X-RequestDigest\", digest);\n                        return this.fetchRaw(url, opts);\n                    });\n            }\n        }\n\n        return this.fetchRaw(url, opts);\n    }\n\n    public fetchRaw(url: string, options: FetchOptions = {}): Promise<Response> {\n\n        // here we need to normalize the headers\n        const rawHeaders = new Headers();\n        mergeHeaders(rawHeaders, options.headers);\n        options = extend(options, { headers: rawHeaders });\n\n        const retry = (ctx: RetryContext): void => {\n\n            // handles setting the proper timeout for a retry\n            const setRetry = (response: Response) => {\n                let delay;\n\n                if (response.headers.has(\"Retry-After\")) {\n                    // if we have gotten a header, use that value as the delay value\n                    delay = parseInt(response.headers.get(\"Retry-After\"), 10);\n                } else {\n                    // grab our current delay\n                    delay = ctx.delay;\n\n                    // Increment our counters.\n                    ctx.delay *= 2;\n                }\n\n                ctx.attempts++;\n\n                // If we have exceeded the retry count, reject.\n                if (ctx.retryCount <= ctx.attempts) {\n                    ctx.reject(Error(`Retry count exceeded (${ctx.retryCount}) for request. Response status: [${response.status}] ${response.statusText}`));\n                } else {\n                    // Set our retry timeout for {delay} milliseconds.\n                    setTimeout(getCtxCallback(this, retry, ctx), delay);\n                }\n            };\n\n            // send the actual request\n            this._impl.fetch(url, options).then((response) => {\n\n                if (response.status === 429) {\n                    // we have been throttled\n                    setRetry(response);\n                } else {\n                    ctx.resolve(response);\n                }\n\n            }).catch((response: Response) => {\n\n                if (response.status === 503) {\n                    // http status code 503, we can retry this\n                    setRetry(response);\n                } else {\n                    ctx.reject(response);\n                }\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n\n            const retryContext: RetryContext = {\n                attempts: 0,\n                delay: 100,\n                reject: reject,\n                resolve: resolve,\n                retryCount: 7,\n            };\n\n            retry.call(this, retryContext);\n        });\n    }\n\n    public get(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"GET\" });\n        return this.fetch(url, opts);\n    }\n\n    public post(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"POST\" });\n        return this.fetch(url, opts);\n    }\n\n    public patch(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"PATCH\" });\n        return this.fetch(url, opts);\n    }\n\n    public delete(url: string, options: FetchOptions = {}): Promise<Response> {\n        const opts = extend(options, { method: \"DELETE\" });\n        return this.fetch(url, opts);\n    }\n}\n\ninterface RetryContext {\n    attempts: number;\n    delay: number;\n    reject: (reason?: any) => void;\n    resolve: (value?: Response | PromiseLike<Response>) => void;\n    retryCount: number;\n}\n","export default (typeof global !== \"undefined\" ? global :\n            typeof self !== \"undefined\" ? self :\n            typeof window !== \"undefined\" ? window : {});\n","declare var global: { location: string, _spPageContextInfo?: { webAbsoluteUrl?: string, webServerRelativeUrl?: string } };\nimport { combine, isUrlAbsolute, hOP } from \"@pnp/common\";\nimport { SPRuntimeConfig } from \"../config/splibconfig\";\n\n/**\n * Ensures that a given url is absolute for the current web based on context\n *\n * @param candidateUrl The url to make absolute\n *\n */\nexport function toAbsoluteUrl(candidateUrl: string): Promise<string> {\n\n    return new Promise((resolve) => {\n\n        if (isUrlAbsolute(candidateUrl)) {\n            // if we are already absolute, then just return the url\n            return resolve(candidateUrl);\n        }\n\n        if (SPRuntimeConfig.baseUrl !== null) {\n            // base url specified either with baseUrl of spfxContext config property\n            return resolve(combine(SPRuntimeConfig.baseUrl, candidateUrl));\n        }\n\n        if (global._spPageContextInfo !== undefined) {\n\n            // operating in classic pages\n            if (hOP(global._spPageContextInfo, \"webAbsoluteUrl\")) {\n                return resolve(combine(global._spPageContextInfo.webAbsoluteUrl, candidateUrl));\n            } else if (hOP(global._spPageContextInfo, \"webServerRelativeUrl\")) {\n                return resolve(combine(global._spPageContextInfo.webServerRelativeUrl, candidateUrl));\n            }\n        }\n\n        // does window.location exist and have a certain path part in it?\n        if (global.location !== undefined) {\n            const baseUrl = global.location.toString().toLowerCase();\n            [\"/_layouts/\", \"/siteassets/\"].forEach((s: string) => {\n                const index = baseUrl.indexOf(s);\n                if (index > 0) {\n                    return resolve(combine(baseUrl.substr(0, index), candidateUrl));\n                }\n            });\n        }\n\n        return resolve(candidateUrl);\n    });\n}\n","export function metadata(type: string) {\n    return {\n        \"__metadata\": { \"type\": type },\n    };\n}\n","import {\n    combine,\n    isUrlAbsolute,\n    FetchOptions,\n    mergeOptions,\n    extend,\n    getGUID,\n    jsS,\n} from \"@pnp/common\";\nimport {\n    ODataParser,\n    ODataQueryable,\n    RequestContext,\n} from \"@pnp/odata\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { SPBatch } from \"./batch\";\nimport { SPHttpClient } from \"./net/sphttpclient\";\nimport { toAbsoluteUrl } from \"./utils/toabsoluteurl\";\nimport { metadata } from \"./utils/metadata\";\n\nexport interface SharePointQueryableConstructor<T> {\n    new(baseUrl: string | SharePointQueryable, path?: string): T;\n}\n\n/**\n * SharePointQueryable Base Class\n *\n */\nexport class SharePointQueryable<GetType = any> extends ODataQueryable<SPBatch, GetType> {\n\n    protected _forceCaching: boolean;\n\n    /**\n     * Creates a new instance of the SharePointQueryable class\n     *\n     * @constructor\n     * @param baseUrl A string or SharePointQueryable that should form the base part of the url\n     *\n     */\n    constructor(baseUrl: string | SharePointQueryable, path?: string) {\n        super();\n\n        this._forceCaching = false;\n\n        if (typeof baseUrl === \"string\") {\n            // we need to do some extra parsing to get the parent url correct if we are\n            // being created from just a string.\n\n            if (isUrlAbsolute(baseUrl) || baseUrl.lastIndexOf(\"/\") < 0) {\n                this._parentUrl = baseUrl;\n                this._url = combine(baseUrl, path);\n            } else if (baseUrl.lastIndexOf(\"/\") > baseUrl.lastIndexOf(\"(\")) {\n                // .../items(19)/fields\n                const index = baseUrl.lastIndexOf(\"/\");\n                this._parentUrl = baseUrl.slice(0, index);\n                path = combine(baseUrl.slice(index), path);\n                this._url = combine(this._parentUrl, path);\n            } else {\n                // .../items(19)\n                const index = baseUrl.lastIndexOf(\"(\");\n                this._parentUrl = baseUrl.slice(0, index);\n                this._url = combine(baseUrl, path);\n            }\n        } else {\n            this.extend(baseUrl, path);\n            const target = baseUrl.query.get(\"@target\");\n            if (target !== undefined) {\n                this.query.set(\"@target\", target);\n            }\n        }\n    }\n\n    /**\n     * Creates a new instance of the supplied factory and extends this into that new instance\n     *\n     * @param factory constructor for the new SharePointQueryable\n     */\n    public as<T>(factory: SharePointQueryableConstructor<T>): T {\n        const o = <T>new factory(this._url, null);\n        return extend(o, this, true);\n    }\n\n    /**\n     * Gets the full url with query information\n     *\n     */\n    public toUrlAndQuery(): string {\n\n        const aliasedParams = new Map<string, string>(this.query);\n\n        let url = this.toUrl().replace(/'!(@.*?)::(.*?)'/ig, (match, labelName, value) => {\n            Logger.write(`Rewriting aliased parameter from match ${match} to label: ${labelName} value: ${value}`, LogLevel.Verbose);\n            aliasedParams.set(labelName, `'${value}'`);\n            return labelName;\n        });\n\n        if (aliasedParams.size > 0) {\n            const char = url.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n            url += `${char}${Array.from(aliasedParams).map((v: [string, string]) => v[0] + \"=\" + v[1]).join(\"&\")}`;\n        }\n\n        return url;\n    }\n\n    /**\n     * Choose which fields to return\n     *\n     * @param selects One or more fields to return\n     */\n    public select(...selects: string[]): this {\n        if (selects.length > 0) {\n            this.query.set(\"$select\", selects.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Expands fields such as lookups to get additional data\n     *\n     * @param expands The Fields for which to expand the values\n     */\n    public expand(...expands: string[]): this {\n        if (expands.length > 0) {\n            this.query.set(\"$expand\", expands.join(\",\"));\n        }\n        return this;\n    }\n\n    /**\n     * Gets a parent for this instance as specified\n     *\n     * @param factory The contructor for the class to create\n     */\n    protected getParent<T extends SharePointQueryable>(\n        factory: SharePointQueryableConstructor<T>,\n        baseUrl: string | SharePointQueryable = this.parentUrl,\n        path?: string,\n        batch?: SPBatch): T {\n\n        let parent = new factory(baseUrl, path).configureFrom(this);\n\n        const t = \"@target\";\n        if (this.query.has(t)) {\n            parent.query.set(t, this.query.get(t));\n        }\n        if (batch !== undefined) {\n            parent = parent.inBatch(batch);\n        }\n        return parent;\n    }\n\n    /**\n     * Clones this SharePointQueryable into a new SharePointQueryable instance of T\n     * @param factory Constructor used to create the new instance\n     * @param additionalPath Any additional path to include in the clone\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\n     */\n    protected clone<T extends SharePointQueryable>(factory: SharePointQueryableConstructor<T>, additionalPath?: string, includeBatch = true): T {\n\n        const clone: T = super._clone(new factory(this, additionalPath), { includeBatch });\n\n        // handle sp specific clone actions\n        const t = \"@target\";\n        if (this.query.has(t)) {\n            clone.query.set(t, this.query.get(t));\n        }\n\n        return clone;\n    }\n\n    /**\n     * Converts the current instance to a request context\n     *\n     * @param verb The request verb\n     * @param options The set of supplied request options\n     * @param parser The supplied ODataParser instance\n     * @param pipeline Optional request processing pipeline\n     */\n    protected toRequestContext<T>(\n        verb: string,\n        options: FetchOptions = {},\n        parser: ODataParser<T>,\n        pipeline: Array<(c: RequestContext<T>) => Promise<RequestContext<T>>>): Promise<RequestContext<T>> {\n\n        const dependencyDispose = this.hasBatch ? this._batchDependency : () => { return; };\n\n        return toAbsoluteUrl(this.toUrlAndQuery()).then(url => {\n\n            mergeOptions(options, this._options);\n\n            // build our request context\n            const context: RequestContext<T> = {\n                batch: this.batch,\n                batchDependency: dependencyDispose,\n                cachingOptions: this._cachingOptions,\n                clientFactory: () => new SPHttpClient(),\n                isBatched: this.hasBatch,\n                isCached: this._forceCaching || (this._useCaching && /^get$/i.test(verb)),\n                options: options,\n                parser: parser,\n                pipeline: pipeline,\n                requestAbsoluteUrl: url,\n                requestId: getGUID(),\n                verb: verb,\n            };\n\n            return context;\n        });\n    }\n}\n\n/**\n * Represents a REST collection which can be filtered, paged, and selected\n *\n */\nexport class SharePointQueryableCollection<GetType = any[]> extends SharePointQueryable<GetType> {\n\n    /**\n     * Filters the returned collection (https://msdn.microsoft.com/en-us/library/office/fp142385.aspx#bk_supported)\n     *\n     * @param filter The string representing the filter query\n     */\n    public filter(filter: string): this {\n        this.query.set(\"$filter\", filter);\n        return this;\n    }\n\n    /**\n     * Orders based on the supplied fields\n     *\n     * @param orderby The name of the field on which to sort\n     * @param ascending If false DESC is appended, otherwise ASC (default)\n     */\n    public orderBy(orderBy: string, ascending = true): this {\n        const o = \"$orderby\";\n        const query = this.query.has(o) ? this.query.get(o).split(\",\") : [];\n        query.push(`${orderBy} ${ascending ? \"asc\" : \"desc\"}`);\n        this.query.set(o, query.join(\",\"));\n        return this;\n    }\n\n    /**\n     * Skips the specified number of items\n     *\n     * @param skip The number of items to skip\n     */\n    public skip(skip: number): this {\n        this.query.set(\"$skip\", skip.toString());\n        return this;\n    }\n\n    /**\n     * Limits the query to only return the specified number of items\n     *\n     * @param top The query row limit\n     */\n    public top(top: number): this {\n        this.query.set(\"$top\", top.toString());\n        return this;\n    }\n}\n\n/**\n * Represents an instance that can be selected\n *\n */\nexport class SharePointQueryableInstance<GetType = any> extends SharePointQueryable<GetType> {\n\n    /**\n     * Curries the update function into the common pieces\n     * \n     * @param type \n     * @param mapper \n     */\n    protected _update<Return, Props = any, Data = any>(type: string, mapper: (data: Data, props: Props) => Return): (props: Props) => Promise<Return> {\n        return (props: any) => this.postCore({\n            body: jsS(extend(metadata(type), props)),\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((d: Data) => mapper(d, props));\n    }\n\n    /**\n    * Deletes this instance\n    *\n    */\n    protected _delete(): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Deletes this instance with an etag value in the headers\n     * \n     * @param eTag eTag to delete\n     */\n    protected _deleteWithETag(eTag = \"*\"): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n}\n\n/**\n * Decorator used to specify the default path for SharePointQueryable objects\n * \n * @param path \n */\nexport function defaultPath(path: string) {\n\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\n\n        return class extends target {\n            constructor(...args: any[]) {\n                super(args[0], args.length > 1 && args[1] !== undefined ? args[1] : path);\n            }\n        };\n    };\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { SiteGroups } from \"./sitegroups\";\nimport { TypedHash, jsS, extend } from \"@pnp/common\";\nimport { metadata } from \"./utils/metadata\";\n\n/**\n * Properties that provide both a getter, and a setter.\n *\n */\nexport interface UserUpdateResult {\n    user: SiteUser;\n    data: any;\n}\n\n/**\n * Describes a collection of all site collection users\n *\n */\n@defaultPath(\"siteusers\")\nexport class SiteUsers extends SharePointQueryableCollection {\n\n    /**\n     * Gets a user from the collection by id\n     *\n     * @param id The id of the user to retrieve\n     */\n    public getById(id: number): SiteUser {\n        return new SiteUser(this, `getById(${id})`);\n    }\n\n    /**\n     * Gets a user from the collection by email\n     *\n     * @param email The email address of the user to retrieve\n     */\n    public getByEmail(email: string): SiteUser {\n        return new SiteUser(this, `getByEmail('${email}')`);\n    }\n\n    /**\n     * Gets a user from the collection by login name\n     *\n     * @param loginName The login name of the user to retrieve\n     */\n    public getByLoginName(loginName: string): SiteUser {\n        const su = new SiteUser(this);\n        su.concat(`('!@v::${encodeURIComponent(loginName)}')`);\n        return su;\n    }\n\n    /**\n     * Removes a user from the collection by id\n     *\n     * @param id The id of the user to remove\n     */\n    public removeById(id: number | SharePointQueryable): Promise<any> {\n        return this.clone(SiteUsers, `removeById(${id})`).postCore();\n    }\n\n    /**\n     * Removes a user from the collection by login name\n     *\n     * @param loginName The login name of the user to remove\n     */\n    public removeByLoginName(loginName: string): Promise<any> {\n        const o = this.clone(SiteUsers, `removeByLoginName(@v)`);\n        o.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return o.postCore();\n    }\n\n    /**\n     * Adds a user to a group\n     *\n     * @param loginName The login name of the user to add to the group\n     *\n     */\n    public add(loginName: string): Promise<SiteUser> {\n        return this.clone(SiteUsers, null).postCore({\n            body: jsS(extend(metadata(\"SP.User\"), { LoginName: loginName })),\n        }).then(() => this.getByLoginName(loginName));\n    }\n}\n\n/**\n * Base class for a user\n * \n */\nexport class UserBase extends SharePointQueryableInstance {\n\n    /**\n     * Gets the groups for this user\n     *\n     */\n    public get groups() {\n        return new SiteGroups(this, \"groups\");\n    }\n}\n\n/**\n * Describes a single user\n *\n */\nexport class SiteUser extends UserBase {\n\n    /**\n    * Updates this user instance with the supplied properties\n    *\n    * @param properties A plain object of property names and values to update for the user\n    */\n    public update = this._update<UserUpdateResult, TypedHash<any>, any>(\"SP.User\", data => ({ data, user: this }));\n\n    /**\n     * Delete this user\n     *\n     */\n    public delete = this._delete;\n}\n\n/**\n * Represents the current user\n */\n@defaultPath(\"currentuser\")\nexport class CurrentUser extends UserBase { }\n\nexport interface SiteUserProps {\n    Email: string;\n    Id: number;\n    IsHiddenInUI: boolean;\n    IsShareByEmailGuestUser: boolean;\n    IsSiteAdmin: boolean;\n    LoginName: string;\n    PrincipalType: number;\n    Title: string;\n}\n","import { SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { SiteUsers } from \"./siteusers\";\nimport { extend, TypedHash, jsS, hOP } from \"@pnp/common\";\nimport { metadata } from \"./utils/metadata\";\n\n/**\n * Principal Type enum\n *\n */\nexport enum PrincipalType {\n    None = 0,\n    User = 1,\n    DistributionList = 2,\n    SecurityGroup = 4,\n    SharePointGroup = 8,\n    All = 15,\n}\n\n/**\n * Results from updating a group\n *\n */\nexport interface GroupUpdateResult {\n    group: SiteGroup;\n    data: any;\n}\n\n/**\n * Results from adding a group\n *\n */\nexport interface GroupAddResult {\n    group: SiteGroup;\n    data: any;\n}\n\n/**\n * Describes a collection of site groups\n *\n */\n@defaultPath(\"sitegroups\")\nexport class SiteGroups extends SharePointQueryableCollection {\n\n    /**\t\n     * Gets a group from the collection by id\t\n     *\t\n     * @param id The id of the group to retrieve\t\n     */\n    public getById(id: number) {\n        const sg = new SiteGroup(this);\n        sg.concat(`(${id})`);\n        return sg;\n    }\n\n    /**\n     * Adds a new group to the site collection\n     *\n     * @param props The group properties object of property names and values to be set for the group\n     */\n    public add(properties: TypedHash<any>): Promise<GroupAddResult> {\n        const postBody = jsS(extend(metadata(\"SP.Group\"), properties));\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                group: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Gets a group from the collection by name\n     *\n     * @param groupName The name of the group to retrieve\n     */\n    public getByName(groupName: string): SiteGroup {\n        return new SiteGroup(this, `getByName('${groupName}')`);\n    }\n\n    /**\n     * Removes the group with the specified member id from the collection\n     *\n     * @param id The id of the group to remove\n     */\n    public removeById(id: number): Promise<void> {\n        return this.clone(SiteGroups, `removeById('${id}')`).postCore();\n    }\n\n    /**\n     * Removes the cross-site group with the specified name from the collection\n     *\n     * @param loginName The name of the group to remove\n     */\n    public removeByLoginName(loginName: string): Promise<any> {\n        return this.clone(SiteGroups, `removeByLoginName('${loginName}')`).postCore();\n    }\n}\n\n/**\n * Describes a single group\n *\n */\nexport class SiteGroup extends SharePointQueryableInstance {\n\n    /**\n     * Gets the users for this group\n     *\n     */\n    public get users(): SiteUsers {\n        return new SiteUsers(this, \"users\");\n    }\n\n    public update = this._update<GroupUpdateResult, TypedHash<any>, any>(\"SP.Group\", (d, p) => {\n        let retGroup: SiteGroup = this;\n\n        if (hOP(p, \"Title\")) {\n            /* tslint:disable-next-line no-string-literal */\n            retGroup = this.getParent(SiteGroup, this.parentUrl, `getByName('${p[\"Title\"]}')`);\n        }\n\n        return {\n            data: d,\n            group: retGroup,\n        };\n    });\n}\n\nexport interface SiteGroupAddResult {\n    group: SiteGroup;\n    data: any;\n}\n","// reference: https://msdn.microsoft.com/en-us/library/office/dn600183.aspx\nimport { TypedHash } from \"@pnp/common\";\n\nimport { NavigationNode } from \"./navigation\";\n\n/**\n * Represents the unique sequential location of a change within the change log.\n */\nexport interface ChangeToken {\n    /**\n     * Gets or sets a string value that contains the serialized representation of the change token generated by the protocol server.\n     */\n    StringValue: string;\n}\n\n/**\n * Defines a query that is performed against the change log.\n */\nexport interface ChangeQuery {\n    /**\n     * Gets or sets a value that specifies whether add changes are included in the query.\n     */\n    Add?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to alerts are included in the query.\n     */\n    Alert?: boolean;\n\n    /**\n     * Gets or sets a value that specifies the end date and end time for changes that are returned through the query.\n     */\n    ChangeTokenEnd?: ChangeToken;\n\n    /**\n     * Gets or sets a value that specifies the start date and start time for changes that are returned through the query.\n     */\n    ChangeTokenStart?: ChangeToken;\n\n    /**\n     * Gets or sets a value that specifies whether changes to content types are included in the query.\n     */\n    ContentType?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether deleted objects are included in the query.\n     */\n    DeleteObject?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to fields are included in the query.\n     */\n    Field?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to files are included in the query.\n     */\n    File?: boolean;\n\n    /**\n     * Gets or sets value that specifies whether changes to folders are included in the query.\n     */\n    Folder?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to groups are included in the query.\n     */\n    Group?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding users to groups is included in the query.\n     */\n    GroupMembershipAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether deleting users from the groups is included in the query.\n     */\n    GroupMembershipDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether general changes to list items are included in the query.\n     */\n    Item?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to lists are included in the query.\n     */\n    List?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether move changes are included in the query.\n     */\n    Move?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to the navigation structure of a site collection are included in the query.\n     */\n    Navigation?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether renaming changes are included in the query.\n     */\n    Rename?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether restoring items from the recycle bin or from backups is included in the query.\n     */\n    Restore?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleAssignmentAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleAssignmentDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionAdd?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionDelete?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\n     */\n    RoleDefinitionUpdate?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether modifications to security policies are included in the query.\n     */\n    SecurityPolicy?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to site collections are included in the query.\n     */\n    Site?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether updates made using the item SystemUpdate method are included in the query.\n     */\n    SystemUpdate?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether update changes are included in the query.\n     */\n    Update?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to users are included in the query.\n     */\n    User?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to views are included in the query.\n     */\n    View?: boolean;\n\n    /**\n     * Gets or sets a value that specifies whether changes to Web sites are included in the query.\n     */\n    Web?: boolean;\n}\n\n/**\n * Specifies a Collaborative Application Markup Language (CAML) query on a list or joined lists.\n */\nexport interface CamlQuery {\n\n    /**\n     * Gets or sets a value that indicates whether the query returns dates in Coordinated Universal Time (UTC) format.\n     */\n    DatesInUtc?: boolean;\n\n    /**\n     * Gets or sets a value that specifies the server relative URL of a list folder from which results will be returned.\n     */\n    FolderServerRelativeUrl?: string;\n\n    /**\n     * Gets or sets a value that specifies the information required to get the next page of data for the list view.\n     */\n    ListItemCollectionPosition?: ListItemCollectionPosition;\n\n    /**\n     * Gets or sets value that specifies the XML schema that defines the list view.\n     */\n    ViewXml?: string;\n}\n\n/**\n * Specifies the information required to get the next page of data for a list view.\n */\nexport interface ListItemCollectionPosition {\n    /**\n     * Gets or sets a value that specifies information, as name-value pairs, required to get the next page of data for a list view.\n     */\n    PagingInfo: string;\n}\n\n/**\n * Represents the input parameter of the GetListItemChangesSinceToken method.\n */\nexport interface ChangeLogitemQuery {\n    /**\n     * The change token for the request.\n     */\n    ChangeToken?: string;\n\n    /**\n     * The XML element that defines custom filtering for the query.\n     */\n    Contains?: string;\n\n    /**\n     * The records from the list to return and their return order.\n     */\n    Query?: string;\n\n    /**\n     * The options for modifying the query.\n     */\n    QueryOptions?: string;\n\n    /**\n     * RowLimit\n     */\n    RowLimit?: string;\n\n    /**\n     * The names of the fields to include in the query result.\n     */\n    ViewFields?: string;\n\n    /**\n     * The GUID of the view.\n     */\n    ViewName?: string;\n}\n\n/**\n * Determines the display mode of the given control or view\n */\nexport enum ControlMode {\n    Display = 1,\n    Edit = 2,\n    New = 3,\n}\n\n/**\n * Represents properties of a list item field and its value.\n */\nexport interface ListItemFormUpdateValue {\n\n    /**\n     * The error message result after validating the value for the field.\n     */\n    ErrorMessage?: string;\n\n    /**\n     * The internal name of the field.\n     */\n    FieldName?: string;\n\n    /**\n     * The value of the field, in string format.\n     */\n    FieldValue?: string;\n\n    /**\n     * Indicates whether there was an error result after validating the value for the field.\n     */\n    HasException?: boolean;\n}\n\n/**\n * Specifies the type of the field.\n */\nexport enum FieldTypes {\n    Invalid = 0,\n    Integer = 1,\n    Text = 2,\n    Note = 3,\n    DateTime = 4,\n    Counter = 5,\n    Choice = 6,\n    Lookup = 7,\n    Boolean = 8,\n    Number = 9,\n    Currency = 10,\n    URL = 11,\n    Computed = 12,\n    Threading = 13,\n    Guid = 14,\n    MultiChoice = 15,\n    GridChoice = 16,\n    Calculated = 17,\n    File = 18,\n    Attachments = 19,\n    User = 20,\n    Recurrence = 21,\n    CrossProjectLink = 22,\n    ModStat = 23,\n    Error = 24,\n    ContentTypeId = 25,\n    PageSeparator = 26,\n    ThreadIndex = 27,\n    WorkflowStatus = 28,\n    AllDayEvent = 29,\n    WorkflowEventType = 30,\n}\n\nexport enum DateTimeFieldFormatType {\n    DateOnly = 0,\n    DateTime = 1,\n}\n\nexport enum DateTimeFieldFriendlyFormatType {\n    Unspecified = 0,\n    Disabled = 1,\n    Relative = 2,\n}\n\n/**\n * Specifies the control settings while adding a field.\n */\nexport enum AddFieldOptions {\n    /**\n     *  Specify that a new field added to the list must also be added to the default content type in the site collection\n     */\n    DefaultValue = 0,\n    /**\n     * Specify that a new field added to the list must also be added to the default content type in the site collection.\n     */\n    AddToDefaultContentType = 1,\n    /**\n     * Specify that a new field must not be added to any other content type\n     */\n    AddToNoContentType = 2,\n    /**\n     *  Specify that a new field that is added to the specified list must also be added to all content types in the site collection\n     */\n    AddToAllContentTypes = 4,\n    /**\n     * Specify adding an internal field name hint for the purpose of avoiding possible database locking or field renaming operations\n     */\n    AddFieldInternalNameHint = 8,\n    /**\n     * Specify that a new field that is added to the specified list must also be added to the default list view\n     */\n    AddFieldToDefaultView = 16,\n    /**\n     * Specify to confirm that no other field has the same display name\n     */\n    AddFieldCheckDisplayName = 32,\n}\n\nexport interface XmlSchemaFieldCreationInformation {\n    Options?: AddFieldOptions;\n    SchemaXml: string;\n}\n\nexport enum CalendarType {\n    Gregorian = 1,\n    Japan = 3,\n    Taiwan = 4,\n    Korea = 5,\n    Hijri = 6,\n    Thai = 7,\n    Hebrew = 8,\n    GregorianMEFrench = 9,\n    GregorianArabic = 10,\n    GregorianXLITEnglish = 11,\n    GregorianXLITFrench = 12,\n    KoreaJapanLunar = 14,\n    ChineseLunar = 15,\n    SakaEra = 16,\n    UmAlQura = 23,\n}\n\nexport enum UrlFieldFormatType {\n    Hyperlink = 0,\n    Image = 1,\n}\n\nexport interface BasePermissions {\n    Low: number;\n    High: number;\n}\n\nexport enum PermissionKind {\n\n    /**\n     * Has no permissions on the Site. Not available through the user interface.\n     */\n    EmptyMask = 0,\n\n    /**\n     * View items in lists, documents in document libraries, and Web discussion comments.\n     */\n    ViewListItems = 1,\n\n    /**\n     * Add items to lists, documents to document libraries, and Web discussion comments.\n     */\n    AddListItems = 2,\n\n    /**\n     * Edit items in lists, edit documents in document libraries, edit Web discussion comments\n     * in documents, and customize Web Part Pages in document libraries.\n     */\n    EditListItems = 3,\n\n    /**\n     * Delete items from a list, documents from a document library, and Web discussion\n     * comments in documents.\n     */\n    DeleteListItems = 4,\n\n    /**\n     * Approve a minor version of a list item or document.\n     */\n    ApproveItems = 5,\n\n    /**\n     * View the source of documents with server-side file handlers.\n     */\n    OpenItems = 6,\n\n    /**\n     * View past versions of a list item or document.\n     */\n    ViewVersions = 7,\n\n    /**\n     * Delete past versions of a list item or document.\n     */\n    DeleteVersions = 8,\n\n    /**\n     * Discard or check in a document which is checked out to another user.\n     */\n    CancelCheckout = 9,\n\n    /**\n     * Create, change, and delete personal views of lists.\n     */\n    ManagePersonalViews = 10,\n\n    /**\n     * Create and delete lists, add or remove columns in a list, and add or remove public views of a list.\n     */\n    ManageLists = 12,\n\n    /**\n     * View forms, views, and application pages, and enumerate lists.\n     */\n    ViewFormPages = 13,\n\n    /**\n     * Make content of a list or document library retrieveable for anonymous users through SharePoint search.\n     * The list permissions in the site do not change.\n     */\n    AnonymousSearchAccessList = 14,\n\n    /**\n     * Allow users to open a Site, list, or folder to access items inside that container.\n     */\n    Open = 17,\n\n    /**\n     * View pages in a Site.\n     */\n    ViewPages = 18,\n\n    /**\n     * Add, change, or delete HTML pages or Web Part Pages, and edit the Site using\n     * a Windows SharePoint Services compatible editor.\n     */\n    AddAndCustomizePages = 19,\n\n    /**\n     * Apply a theme or borders to the entire Site.\n     */\n    ApplyThemeAndBorder = 20,\n\n    /**\n     * Apply a style sheet (.css file) to the Site.\n     */\n    ApplyStyleSheets = 21,\n\n    /**\n     * View reports on Site usage.\n     */\n    ViewUsageData = 22,\n\n    /**\n     * Create a Site using Self-Service Site Creation.\n     */\n    CreateSSCSite = 23,\n\n    /**\n     * Create subsites such as team sites, Meeting Workspace sites, and Document Workspace sites.\n     */\n    ManageSubwebs = 24,\n\n    /**\n     * Create a group of users that can be used anywhere within the site collection.\n     */\n    CreateGroups = 25,\n\n    /**\n     * Create and change permission levels on the Site and assign permissions to users\n     * and groups.\n     */\n    ManagePermissions = 26,\n\n    /**\n     * Enumerate files and folders in a Site using Microsoft Office SharePoint Designer\n     * and WebDAV interfaces.\n     */\n    BrowseDirectories = 27,\n\n    /**\n     * View information about users of the Site.\n     */\n    BrowseUserInfo = 28,\n\n    /**\n     * Add or remove personal Web Parts on a Web Part Page.\n     */\n    AddDelPrivateWebParts = 29,\n\n    /**\n     * Update Web Parts to display personalized information.\n     */\n    UpdatePersonalWebParts = 30,\n\n    /**\n     * Grant the ability to perform all administration tasks for the Site as well as\n     * manage content, activate, deactivate, or edit properties of Site scoped Features\n     * through the object model or through the user interface (UI). When granted on the\n     * root Site of a Site Collection, activate, deactivate, or edit properties of\n     * site collection scoped Features through the object model. To browse to the Site\n     * Collection Features page and activate or deactivate Site Collection scoped Features\n     * through the UI, you must be a Site Collection administrator.\n     */\n    ManageWeb = 31,\n\n    /**\n     * Content of lists and document libraries in the Web site will be retrieveable for anonymous users through\n     * SharePoint search if the list or document library has AnonymousSearchAccessList set.\n     */\n    AnonymousSearchAccessWebLists = 32,\n\n    /**\n     * Use features that launch client applications. Otherwise, users must work on documents\n     * locally and upload changes.\n     */\n    UseClientIntegration = 37,\n\n    /**\n     * Use SOAP, WebDAV, or Microsoft Office SharePoint Designer interfaces to access the Site.\n     */\n    UseRemoteAPIs = 38,\n\n    /**\n     * Manage alerts for all users of the Site.\n     */\n    ManageAlerts = 39,\n\n    /**\n     * Create e-mail alerts.\n     */\n    CreateAlerts = 40,\n\n    /**\n     * Allows a user to change his or her user information, such as adding a picture.\n     */\n    EditMyUserInfo = 41,\n\n    /**\n     * Enumerate permissions on Site, list, folder, document, or list item.\n     */\n    EnumeratePermissions = 63,\n\n    /**\n     * Has all permissions on the Site. Not available through the user interface.\n     */\n    FullMask = 65,\n}\n\nexport interface FollowedContent {\n    FollowedDocumentsUrl: string;\n    FollowedSitesUrl: string;\n}\n\nexport interface UserProfile {\n    /**\n     * An object containing the user's FollowedDocumentsUrl and FollowedSitesUrl.\n     */\n    FollowedContent?: FollowedContent;\n    /**\n     * The account name of the user. (SharePoint Online only)\n     */\n    AccountName?: string;\n    /**\n     * The display name of the user. (SharePoint Online only)\n     */\n    DisplayName?: string;\n    /**\n     * The FirstRun flag of the user. (SharePoint Online only)\n     */\n    O15FirstRunExperience?: number;\n    /**\n     * The personal site of the user.\n     */\n    PersonalSite?: string;\n    /**\n     * The capabilities of the user's personal site. Represents a bitwise PersonalSiteCapabilities value:\n     * None = 0; Profile Value = 1; Social Value = 2; Storage Value = 4; MyTasksDashboard Value = 8; Education Value = 16; Guest Value = 32.\n     */\n    PersonalSiteCapabilities?: number;\n    /**\n     * The error thrown when the user's personal site was first created, if any. (SharePoint Online only)\n     */\n    PersonalSiteFirstCreationError?: string;\n    /**\n     * The date and time when the user's personal site was first created. (SharePoint Online only)\n     */\n    PersonalSiteFirstCreationTime?: Date;\n    /**\n     * The status for the state of the personal site instantiation\n     */\n    PersonalSiteInstantiationState?: number;\n    /**\n     * The date and time when the user's personal site was last created. (SharePoint Online only)\n     */\n    PersonalSiteLastCreationTime?: Date;\n    /**\n     * The number of attempts made to create the user's personal site. (SharePoint Online only)\n     */\n    PersonalSiteNumberOfRetries?: number;\n    /**\n     * Indicates whether the user's picture is imported from Exchange.\n     */\n    PictureImportEnabled?: boolean;\n    /**\n     * The public URL of the personal site of the current user. (SharePoint Online only)\n     */\n    PublicUrl?: string;\n    /**\n     * The URL used to create the user's personal site.\n     */\n    UrlToCreatePersonalSite?: string;\n}\n\nexport interface HashTag {\n    /**\n     * The hash tag's internal name.\n     */\n    Name?: string;\n    /**\n     * The number of times that the hash tag is used.\n     */\n    UseCount?: number;\n}\n\nexport interface HashTagCollection {\n    Items: HashTag[];\n}\n\nexport interface UserIdInfo {\n    NameId?: string;\n    NameIdIssuer?: string;\n}\n\n/**\n * Specifies the type of a principal.\n */\n/* tslint:disable:no-bitwise */\nexport const enum PrincipalType {\n    /**\n     * Enumeration whose value specifies no principal type.\n     */\n    None = 0,\n    /**\n     * Enumeration whose value specifies a user as the principal type.\n     */\n    User = 1,\n    /**\n     * Enumeration whose value specifies a distribution list as the principal type.\n     */\n    DistributionList = 2,\n    /**\n     * Enumeration whose value specifies a security group as the principal type.\n     */\n    SecurityGroup = 4,\n    /**\n     * Enumeration whose value specifies a group as the principal type.\n     */\n    SharePointGroup = 8,\n    /**\n     * Enumeration whose value specifies all principal types.\n     */\n    All = SharePointGroup | SecurityGroup | DistributionList | User,\n}\n/* tslint:enable:no-bitwise */\n\n/**\n * Specifies the source of a principal.\n */\n/* tslint:disable:no-bitwise */\nexport const enum PrincipalSource {\n    /**\n     * Enumeration whose value specifies no principal source.\n     */\n    None = 0,\n    /**\n     * Enumeration whose value specifies user information list as the principal source.\n     */\n    UserInfoList = 1,\n    /**\n     * Enumeration whose value specifies Active Directory as the principal source.\n     */\n    Windows = 2,\n    /**\n     * Enumeration whose value specifies the current membership provider as the principal source.\n     */\n    MembershipProvider = 4,\n    /**\n     * Enumeration whose value specifies the current role provider as the principal source.\n     */\n    RoleProvider = 8,\n    /**\n     * Enumeration whose value specifies all principal sources.\n     */\n    All = RoleProvider | MembershipProvider | Windows | UserInfoList,\n}\n/* tslint:enable:no-bitwise */\n\nexport enum RoleType {\n    None = 0,\n    Guest = 1,\n    Reader = 2,\n    Contributor = 3,\n    WebDesigner = 4,\n    Administrator = 5,\n}\n\nexport interface PrincipalInfo {\n    Department: string;\n    DisplayName: string;\n    Email: string;\n    JobTitle: string;\n    LoginName: string;\n    Mobile: string;\n    PrincipalId: number;\n    PrincipalType: PrincipalType;\n    SIPAddress: string;\n}\n\nexport interface DocumentLibraryInformation {\n    AbsoluteUrl?: string;\n    Modified?: Date;\n    ModifiedFriendlyDisplay?: string;\n    ServerRelativeUrl?: string;\n    Title?: string;\n}\n\nexport interface ContextInfo {\n    FormDigestTimeoutSeconds?: number;\n    FormDigestValue?: number;\n    LibraryVersion?: string;\n    SiteFullUrl?: string;\n    SupportedSchemaVersions?: string[];\n    WebFullUrl?: string;\n}\n\nexport interface RenderListData {\n    Row: any[];\n    FirstRow: number;\n    FolderPermissions: string;\n    LastRow: number;\n    FilterLink: string;\n    ForceNoHierarchy: string;\n    HierarchyHasIndention: string;\n}\n\nexport enum PageType {\n    Invalid = -1,\n    DefaultView,\n    NormalView,\n    DialogView,\n    View,\n    DisplayForm,\n    DisplayFormDialog,\n    EditForm,\n    EditFormDialog,\n    NewForm,\n    NewFormDialog,\n    SolutionForm,\n    PAGE_MAXITEMS,\n}\n\nexport interface ListFormData {\n    ContentType?: string;\n    Title?: string;\n    Author?: string;\n    Editor?: string;\n    Created?: Date;\n    Modified: Date;\n    Attachments?: any;\n    ListSchema?: any;\n    FormControlMode?: number;\n    FieldControlModes?: {\n        Title?: number,\n        Author?: number,\n        Editor?: number,\n        Created?: number,\n        Modified?: number,\n        Attachments?: number,\n    };\n    WebAttributes?: {\n        WebUrl?: string,\n        EffectivePresenceEnabled?: boolean,\n        AllowScriptableWebParts?: boolean,\n        PermissionCustomizePages?: boolean,\n        LCID?: number,\n        CurrentUserId?: number,\n    };\n    ItemAttributes?: {\n        Id?: number,\n        FsObjType?: number,\n        ExternalListItem?: boolean,\n        Url?: string,\n        EffectiveBasePermissionsLow?: number,\n        EffectiveBasePermissionsHigh?: number,\n    };\n    ListAttributes?: {\n        Id?: string,\n        BaseType?: number,\n        Direction?: string,\n        ListTemplateType?: number,\n        DefaultItemOpen?: number,\n        EnableVersioning?: boolean,\n    };\n    CSRCustomLayout?: boolean;\n    PostBackRequired?: boolean;\n    PreviousPostBackHandled?: boolean;\n    UploadMode?: boolean;\n    SubmitButtonID?: string;\n    ItemContentTypeName?: string;\n    ItemContentTypeId?: string;\n    JSLinks?: string;\n}\n\nexport enum SharingLinkKind {\n    /**\n     * Uninitialized link\n     */\n    Uninitialized = 0,\n    /**\n     * Direct link to the object being shared\n     */\n    Direct = 1,\n    /**\n     * Organization-shareable link to the object being shared with view permissions\n     */\n    OrganizationView = 2,\n    /**\n     * Organization-shareable link to the object being shared with edit permissions\n     */\n    OrganizationEdit = 3,\n    /**\n     * View only anonymous link\n     */\n    AnonymousView = 4,\n    /**\n     * Read/Write anonymous link\n     */\n    AnonymousEdit = 5,\n    /**\n     * Flexible sharing Link where properties can change without affecting link URL\n     */\n    Flexible = 6,\n}\n\nexport interface ShareObjectOptions {\n    url?: string;\n    loginNames?: string | string[];\n    role: SharingRole;\n    emailData?: SharingEmailData;\n    group?: RoleType;\n    propagateAcl?: boolean;\n    includeAnonymousLinkInEmail?: boolean;\n    useSimplifiedRoles?: boolean;\n}\n\n/**\n * Indicates the role of the sharing link\n */\nexport enum SharingRole {\n    None = 0,\n    View = 1,\n    Edit = 2,\n    Owner = 3,\n}\n\n/**\n * Represents email data.\n */\nexport interface SharingEmailData {\n\n    /**\n     * The e-mail subject.\n     */\n    subject?: string;\n\n    /**\n     * The e-mail body.\n     */\n    body: string;\n}\n\nexport interface ShareLinkSettings {\n    /**\n     * The optional unique identifier of an existing sharing link to be retrieved and updated if necessary.\n     */\n    shareId?: string;\n\n    /**\n     * The kind of the sharing link to be created.\n     */\n    linkKind: SharingLinkKind;\n\n    /**\n     * A date/time string for which the format conforms to the ISO 8601:2004(E) complete representation for calendar date and time of day and\n     * which represents the time and date of expiry for the anonymous link. Both the minutes and hour value must be specified for the\n     * difference between the local and UTC time. Midnight is represented as 00:00:00.\n     */\n    expiration?: string;\n\n    /**\n     * The role to be used for the sharing link. This is required for Flexible links, and ignored for legacy link kinds.\n     */\n    role?: SharingRole;\n\n    /**\n     * Indicates if the sharing link, should support anonymous access. This is required for Flexible links, and ignored for legacy link kinds.\n     */\n    allowAnonymousAccess?: boolean;\n}\n\nexport interface ShareLinkRequest {\n\n    /**\n     * A string of JSON representing users in people picker format. Only needed if an e-mail notification should be sent.\n     */\n    peoplePickerInput?: string;\n\n    /**\n     * Whether to create the link or not if it doesn't exist yet.\n     */\n    createLink: boolean;\n\n    /**\n     * The e-mail data. Only needed if an e-mail notification should be sent.\n     */\n    emailData?: SharingEmailData;\n\n    /**\n     * The settings for the sharing link to be created/updated\n     */\n    settings: ShareLinkSettings;\n}\n\n/**\n * Represents a response for sharing a link\n */\nexport interface ShareLinkResponse {\n    /**\n     * A SharingLinkInfo that represents the sharing link. Will be populated if sharing operation is returning a sharing link.\n     */\n    sharingLinkInfo: SharingLinkInfo;\n}\n\nexport interface SharingLinkInfo {\n\n    AllowsAnonymousAccess: boolean;\n    Created: string;\n    CreatedBy: PrincipalInfo;\n    Expiration: string;\n    IsActive: boolean;\n    IsEditLink: boolean;\n    IsFormsLink: boolean;\n    IsUnhealthy: boolean;\n    LastModified: string;\n    LastModifiedBy: PrincipalInfo;\n    LinkKind: SharingLinkKind;\n    ShareId: string;\n    Url: string;\n}\n\nexport enum SharingOperationStatusCode {\n    /**\n     * The share operation completed without errors.\n     */\n    CompletedSuccessfully = 0,\n    /**\n     * The share operation completed and generated requests for access.\n     */\n    AccessRequestsQueued = 1,\n    /**\n     * The share operation failed as there were no resolved users.\n     */\n    NoResolvedUsers = -1,\n    /**\n     * The share operation failed due to insufficient permissions.\n     */\n    AccessDenied = -2,\n    /**\n     * The share operation failed when attempting a cross site share, which is not supported.\n     */\n    CrossSiteRequestNotSupported = -3,\n    /**\n     * The sharing operation failed due to an unknown error.\n     */\n    UnknowError = -4,\n    /**\n     * The text you typed is too long. Please shorten it.\n     */\n    EmailBodyTooLong = -5,\n    /**\n     * The maximum number of unique scopes in the list has been exceeded.\n     */\n    ListUniqueScopesExceeded = -6,\n    /**\n     * The share operation failed because a sharing capability is disabled in the site.\n     */\n    CapabilityDisabled = -7,\n    /**\n     * The specified object for the share operation is not supported.\n     */\n    ObjectNotSupported = -8,\n    /**\n     * A SharePoint group cannot contain another SharePoint group.\n     */\n    NestedGroupsNotSupported = -9,\n}\n\nexport interface SharingResult {\n\n    /**\n     * The relative URL of a page which can be navigated to, to show permissions.\n     */\n    PermissionsPageRelativeUrl?: string;\n\n    /**\n     * A collection of users which have new pending access requests as a result of sharing.\n     */\n    UsersWithAccessRequests?: any[]; // SPSharingUserCollection\n\n    /**\n     * An enumeration which summarizes the result of the sharing operation.\n     */\n    StatusCode?: SharingOperationStatusCode;\n\n    /**\n     * An error message about the failure if sharing was unsuccessful.\n     */\n    ErrorMessage?: string;\n\n    /**\n     * A list of UserSharingResults from attempting to share a securable with unique permissions.\n     */\n    UniquelyPermissionedUsers?: UserSharingResult[];\n    /**\n     * Groups which were granted permissions.\n     */\n    GroupsSharedWith?: any[]; // SPGroupCollection\n\n    /**\n     * The SharePoint group users were added to, if any were added to a group.\n     */\n    GroupUsersAddedTo?: any; // SPGroup\n\n    /**\n     * A list of users being added to a SharePoint permissions goup\n     */\n    UsersAddedToGroup?: UserSharingResult[];\n\n    /**\n     * A list of SPInvitationCreationResult for external users being invited to have access.\n     */\n    InvitedUsers?: SPInvitationCreationResult[];\n\n    /**\n     * The name of the securable being shared.\n     */\n    Name?: string;\n\n    /**\n     * The url of the securable being shared.\n     */\n    Url?: string;\n\n    /**\n     * IconUrl\n     */\n    IconUrl?: string;\n}\n\nexport interface UserSharingResult {\n    IsUserKnown?: boolean;\n    Status?: boolean;\n    Message?: string;\n    User?: string;\n    DisplayName?: string;\n    Email?: string;\n    CurrentRole?: SharingRole;\n    AllowedRoles?: SharingRole[];\n    InvitationLink?: string;\n}\n\nexport interface SPInvitationCreationResult {\n    Succeeded?: boolean;\n    Email?: string;\n    InvitationLink?: string;\n}\n\nexport interface SharingRecipient {\n    email?: string;\n    alias?: string;\n}\n\nexport interface SharingEntityPermission {\n    /**\n     * The Input Entity provided to the Call.\n     */\n    inputEntity: string;\n    /**\n     * The Resolved Entity after resolving using PeoplePicker API.\n     */\n    resolvedEntity: string;\n    /**\n     * Does the Entity have Access to the Securable Object\n     */\n    hasAccess: boolean;\n    /**\n     * Role of the Entity on ListItem\n     */\n    role: SharingRole;\n}\n\nexport interface SharingInformationRequest {\n    /**\n     * Max Principal's to return.\n     */\n    maxPrincipalsToReturn: number;\n    /**\n     * Supported Features (For future use by Office Client).\n     */\n    clientSupportedFeatures: string;\n}\n\nexport interface ObjectSharingSettings {\n    /**\n     * The URL pointing to the containing SPWeb object\n     */\n    WebUrl: string;\n    /**\n     * The unique ID of the parent list (if applicable)\n     */\n    ListId?: string;\n    /**\n     * The list item ID (if applicable)\n     */\n    ItemId?: string;\n    /**\n     * The object title\n     */\n    ItemName: string;\n    /**\n     * The server relative object URL\n     */\n    ItemUrl: string;\n    /**\n     * Contains information about the sharing state of a shareable object\n     */\n    ObjectSharingInformation: any; // SPObjectSharingInformation\n    /**\n     * Boolean indicating whether the sharing context operates under the access request mode\n     */\n    AccessRequestMode: boolean;\n    /**\n     * Boolean indicating whether the sharing context operates under the permissions only mode\n     * (i.e. adding to a group or hiding the groups dropdown in the SharePoint UI)\n     */\n    PermissionsOnlyMode: boolean;\n    /**\n     * URL of the site from which the shared object inherits permissions\n     */\n    InheritingWebLink: string;\n    /**\n     * Boolean flag denoting if guest users are enabled for the site collection\n     */\n    ShareByEmailEnabled: boolean;\n    /**\n     * Boolean indicating whether the current user is a guest user\n     */\n    IsGuestUser: boolean;\n    /**\n     * Boolean indicating whether the site has the standard \"Editor\" role\n     */\n    HasEditRole: boolean;\n    /**\n     * Boolean indicating whether the site has the standard \"Reader\" role\n     */\n    HasReadRole: boolean;\n    /**\n     * Boolean indicating whether the object to share is a picture library\n     */\n    IsPictureLibrary: boolean;\n    /**\n     * Boolean indicating whether the folder object can be shared\n     */\n    CanShareFolder: boolean;\n    /**\n     * Boolean indicating whether email invitations can be sent\n     */\n    CanSendEmail: boolean;\n    /**\n     * Default share link type\n     */\n    DefaultShareLinkType: SharingLinkKind;\n    /**\n     * Boolean indicating whether the object to share supports ACL propagation\n     */\n    SupportsAclPropagation: boolean;\n    /**\n     * Boolean indicating whether the current user can only share within the tenancy\n     */\n    CanCurrentUserShareInternally: boolean;\n    /**\n     * Boolean indicating whether the current user can share outside the tenancy, by inviting external users\n     */\n    CanCurrentUserShareExternally: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an anonymous View link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an anonymous Edit link\n     */\n    CanCurrentUserManageReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an anonymous Edit link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an anonymous Edit link\n     */\n    CanCurrentUserManageReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an organization View link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveOrganizationReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an organization Edit link\n     */\n    CanCurrentUserManageOrganizationReadonlyLink: boolean;\n    /**\n     * Boolean indicating whether the current user can retrieve an organization Edit link, if one has already been created\n     * If one has not been created, the user cannot create one\n     */\n    CanCurrentUserRetrieveOrganizationReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can create or disable an organization Edit link\n     */\n    CanCurrentUserManageOrganizationReadWriteLink: boolean;\n    /**\n     * Boolean indicating whether the current user can make use of Share-By-Link\n     */\n    CanSendLink: boolean;\n    /**\n     * Boolean indicating whether the client logic should warn the user\n     * that they are about to share with external email addresses.\n     */\n    ShowExternalSharingWarning: boolean;\n    /**\n     * A list of SharingPermissionInformation objects that can be used to share\n     */\n    SharingPermissions: any[]; // SPSharingPermissionInformationCollection\n    /**\n     * A dictionary object that lists the display name and the id of\n     * the SharePoint simplified roles (edit, view)\n     */\n    SimplifiedRoles: { [key: string]: string };\n    /**\n     * A dictionary object that lists the display name and the id of the SharePoint groups\n     */\n    GroupsList: { [key: string]: string };\n    /**\n     * A dictionary object that lists the display name and the id of the SharePoint regular roles\n     */\n    Roles: { [key: string]: string };\n    /**\n     * An object containing the SharePoint UI specific sharing settings.\n     */\n    SharePointSettings: any; // SharePointSharingSettings\n    /**\n     * Boolean indicating whether the current user is a site collection administrator\n     */\n    IsUserSiteAdmin: boolean;\n    /**\n     * A value that indicates number of days an anonymous link can be valid before it expires\n     */\n    RequiredAnonymousLinkExpirationInDays: number;\n}\n\nexport interface SharingInformation {\n    /**\n     * External Sharing.\n     */\n    canAddExternalPrincipal?: boolean;\n    /**\n     * Internal Sharing.\n     */\n    canAddInternalPrincipal?: boolean;\n    /**\n     * Can Send Email.\n     */\n    canSendEmail?: boolean;\n    /**\n     * Can Use Simplified Roles present in Roles Enum.\n     */\n    canUseSimplifiedRoles?: boolean;\n    /**\n     * Has Unique Permissions.\n     */\n    hasUniquePermissions?: boolean;\n    /**\n     * Current Users Role on the Item.\n     */\n    currentRole?: SharingRole;\n    /**\n     * Does the User+Item require Approval from Admin for Sharing.\n     */\n    requiresAccessApproval?: boolean;\n    /**\n     * (Owners only)Whether there are pending access requests for the securable object.\n     */\n    hasPendingAccessRequests?: boolean;\n    /**\n     * (Owners only)The link to the access requests page for the securable object, or an empty string if the link is not available.\n     */\n    pendingAccessRequestsLink?: string;\n    /**\n     * sharedObjectType\n     */\n    sharedObjectType?: SPSharedObjectType;\n    /**\n     * Url for the Securable Object (Encoded).\n     */\n    directUrl?: string;\n    /**\n     * Parent Web Url for the Securable Object (Encoded).\n     */\n    webUrl?: string;\n    /**\n     * Default SharingLinkKind.\n     */\n    defaultLinkKind?: SharingLinkKind;\n    /**\n     * Tenant's SharingDomainRestrictionMode.\n     */\n    domainRestrictionMode?: SharingDomainRestrictionMode;\n    /**\n     * Tenant's RestrictedDomains.\n     */\n    RestrictedDomains?: string;\n    /**\n     * Tenant's Anonymous Link Expiration Restriction in Days.\n     */\n    anonymousLinkExpirationRestrictionDays?: number;\n    /**\n     * The PermissionCollection that are on the Securable Object (Princpals & Links)\n     */\n    permissionsInformation?: any; // PermissionCollection\n    /**\n     * PickerSettings used by the PeoplePicker Control.\n     */\n    pickerSettings?: any; // PickerSettings\n}\n\nexport enum SPSharedObjectType {\n    Unknown = 0,\n    File = 1,\n    Folder = 2,\n    Item = 3,\n    List = 4,\n    Web = 5,\n    Max = 6,\n}\n\nexport enum SharingDomainRestrictionMode {\n    None = 0,\n    AllowList = 1,\n    BlockList = 2,\n}\n\nexport interface EmailProperties {\n\n    To: string[];\n    CC?: string[];\n    BCC?: string[];\n    Subject: string;\n    Body: string;\n    AdditionalHeaders?: TypedHash<string>;\n    From?: string;\n}\n\nexport interface WikiPageCreationInformation {\n    /**\n     * The server-relative-url of the wiki page to be created.\n     */\n    ServerRelativeUrl: string;\n\n    /**\n     * The wiki content to be set in the wiki page.\n     */\n    WikiHtmlContent: string;\n}\n\nexport enum RenderListDataOptions {\n    None = 0,\n    ContextInfo = 1,\n    ListData = 2,\n    ListSchema = 4,\n    MenuView = 8,\n    ListContentType = 16,\n    FileSystemItemId = 32,\n    ClientFormSchema = 64,\n    QuickLaunch = 128,\n    Spotlight = 256,\n    Visualization = 512,\n    ViewMetadata = 1024,\n    DisableAutoHyperlink = 2048,\n    EnableMediaTAUrls = 4096,\n    ParentInfo = 8192,\n    PageContextInfo = 16384,\n    ClientSideComponentManifest = 32768,\n}\n\nexport interface RenderListDataParameters {\n    AllowMultipleValueFilterForTaxonomyFields?: boolean;\n    DatesInUtc?: boolean;\n    ExpandGroups?: boolean;\n    FirstGroupOnly?: boolean;\n    FolderServerRelativeUrl?: string;\n    ImageFieldsToTryRewriteToCdnUrls?: string;\n    OverrideViewXml?: string;\n    Paging?: string;\n    RenderOptions?: RenderListDataOptions;\n    ReplaceGroup?: boolean;\n    ViewXml?: string;\n}\n\nexport interface MenuNode {\n    CustomProperties: any[];\n    FriendlyUrlSegment: string;\n    IsDeleted: boolean;\n    IsHidden: boolean;\n    Key: string;\n    Nodes: MenuNode[];\n    NodeType: number;\n    SimpleUrl: string;\n    Title: string;\n}\n\nexport interface MenuNodeCollection {\n    FriendlyUrlPrefix: string;\n    Nodes: MenuNode[];\n    SimpleUrl: string;\n    SPSitePrefix: string;\n    SPWebPrefix: string;\n    StartingNodeKey: string;\n    StartingNodeTitle: string;\n    Version: Date;\n}\n\nexport enum FieldUserSelectionMode {\n    PeopleAndGroups = 1,\n    PeopleOnly = 0,\n}\n\nexport interface FieldCreationProperties extends TypedHash<string | number | boolean> {\n    DefaultFormula?: string;\n    Description?: string;\n    EnforceUniqueValues?: boolean;\n    FieldTypeKind?: number;\n    Group?: string;\n    Hidden?: boolean;\n    Indexed?: boolean;\n    Required?: boolean;\n    Title?: string;\n    ValidationFormula?: string;\n    ValidationMessage?: string;\n}\n\nexport enum ChoiceFieldFormatType {\n    Dropdown,\n    RadioButtons,\n}\n\n/**\n * Client people picker query parameters\n */\nexport interface ClientPeoplePickerQueryParameters {\n    /**\n     * Gets or sets a value that specifies whether e-mail addresses can be used to perform search.\n     */\n    AllowEmailAddresses?: boolean;\n    /**\n     * Gets or sets a value that specifies whether multiple entities are allowed.\n     */\n    AllowMultipleEntities?: boolean;\n    /**\n     * Gets or sets a value that specifies whether only e-mail addresses can be used to perform search.\n     */\n    AllowOnlyEmailAddresses?: boolean;\n    /**\n     * Gets or sets a value that specifies whether all URL zones are used to perform search.\n     */\n    AllUrlZones?: boolean;\n    /**\n     * Gets or sets a value that specifies claim providers that are used to perform search.\n     */\n    EnabledClaimProviders?: string;\n    /**\n     * Gets or sets a value that specifies whether claims are forced (if yes, multiple results for single entity can be returned).\n     */\n    ForceClaims?: boolean;\n    /**\n     * Gets or sets a value that specifies limit of results returned.\n     */\n    MaximumEntitySuggestions: number;\n    /**\n     * Gets or sets a value that specifies principal sources to perform search.\n     */\n    PrincipalSource?: PrincipalSource;\n    /**\n     * Gets or sets a value that specifies principal types to search for.\n     */\n    PrincipalType?: PrincipalType;\n    /**\n     * Gets or sets a value that specifies additional query settings.\n     */\n    QuerySettings?: PeoplePickerQuerySettings;\n    /**\n     * Gets or sets a value that specifies the term to search for.\n     */\n    QueryString: string;\n    /**\n     * Gets or sets a value that specifies ID of the SharePoint Group that will be used to perform search.\n     */\n    SharePointGroupID?: number;\n    /**\n     * Gets or sets a value that specifies URL zones that are used to perform search.\n     */\n    UrlZone?: UrlZone;\n    /**\n     * Gets or sets a value that specifies whether search is limited to specific URL zone.\n     */\n    UrlZoneSpecified?: boolean;\n    /**\n     * Gets or sets a value that specifies GUID of the Web Application that is used to perform search.\n     */\n    WebApplicationID?: string;\n}\n\n/**\n * People picker query settings\n */\nexport interface PeoplePickerQuerySettings {\n    ExcludeAllUsersOnTenantClaim?: boolean;\n}\n\n/**\n * People picker entity\n */\nexport interface PeoplePickerEntity {\n    Description: string;\n    DisplayText: string;\n    EntityData: PeoplePickerEntityData;\n    EntityType: string;\n    IsResolved: boolean;\n    Key: string;\n    MultipleMatches: PeoplePickerEntityData[];\n    ProviderDisplayName: string;\n    ProviderName: string;\n}\n\n/**\n * People picker entity data\n */\nexport interface PeoplePickerEntityData {\n    AccountName?: string;\n    Department?: string;\n    Email?: string;\n    IsAltSecIdPresent?: string;\n    MobilePhone?: string;\n    ObjectId?: string;\n    OtherMails?: string;\n    PrincipalType?: string;\n    SPGroupID?: string;\n    SPUserID?: string;\n    Title?: string;\n}\n\n/**\n * Specifies the originating zone of a request received.\n */\nexport const enum UrlZone {\n    /**\n     * Specifies the default zone used for requests unless another zone is specified.\n     */\n    DefaultZone,\n    /**\n     * Specifies an intranet zone.\n     */\n    Intranet,\n    /**\n     * Specifies an Internet zone.\n     */\n    Internet,\n    /**\n     * Specifies a custom zone.\n     */\n    Custom,\n    /**\n     * Specifies an extranet zone.\n     */\n    Extranet,\n}\n\nexport interface StorageEntity {\n    Value: string | null;\n    Comment: string | null;\n    Description: string | null;\n}\n\nexport interface LikeData {\n    name: string;\n    loginName: string;\n    id: number;\n    email: string;\n    creationDate: string;\n}\n\nexport interface HubSite {\n    Id: string;\n    Title: string;\n    SiteId: string;\n    TenantInstanceId: string;\n    SiteUrl: string;\n    LogoUrl: string;\n    Description: string;\n    Targets: string;\n}\n\nexport interface HubSiteData {\n    headerEmphasis: string | null;\n    logoUrl: string | null;\n    megaMenuEnabled: boolean;\n    name: string;\n    navigation: NavigationNode[];\n    requiresJoinApproval: boolean;\n    siteDesignId: string;\n    themeKey: string | null;\n    url: string;\n    usesMetadataNavigation: boolean;\n}\n","import { SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { SiteGroups } from \"./sitegroups\";\nimport { BasePermissions } from \"./types\";\nimport { extend, TypedHash, jsS, hOP } from \"@pnp/common\";\nimport { metadata } from \"./utils/metadata\";\n\n/**\n * Describes a set of role assignments for the current scope\n *\n */\n@defaultPath(\"roleassignments\")\nexport class RoleAssignments extends SharePointQueryableCollection {\n\n    /**\t\n     * Gets the role assignment associated with the specified principal id from the collection.\t\n     *\t\n     * @param id The id of the role assignment\t\n     */\n    public getById(id: number) {\n        const ra = new RoleAssignment(this);\n        ra.concat(`(${id})`);\n        return ra;\n    }\n\n    /**\n     * Adds a new role assignment with the specified principal and role definitions to the collection\n     *\n     * @param principalId The id of the user or group to assign permissions to\n     * @param roleDefId The id of the role definition that defines the permissions to assign\n     *\n     */\n    public add(principalId: number, roleDefId: number): Promise<void> {\n        return this.clone(RoleAssignments, `addroleassignment(principalid=${principalId}, roledefid=${roleDefId})`).postCore();\n    }\n\n    /**\n     * Removes the role assignment with the specified principal and role definition from the collection\n     *\n     * @param principalId The id of the user or group in the role assignment\n     * @param roleDefId The id of the role definition in the role assignment\n     *\n     */\n    public remove(principalId: number, roleDefId: number): Promise<void> {\n        return this.clone(RoleAssignments, `removeroleassignment(principalid=${principalId}, roledefid=${roleDefId})`).postCore();\n    }\n}\n\n/**\n * Describes a role assignment\n *\n */\nexport class RoleAssignment extends SharePointQueryableInstance {\n\n    /**\n     * Gets the groups that directly belong to the access control list (ACL) for this securable object\n     *\n     */\n    public get groups(): SiteGroups {\n        return new SiteGroups(this, \"groups\");\n    }\n\n    /**\n     * Gets the role definition bindings for this role assignment\n     *\n     */\n    public get bindings(): RoleDefinitionBindings {\n        return new RoleDefinitionBindings(this);\n    }\n\n    /**\n     * Deletes this role assignment\n     *\n     */\n    public delete = this._delete;\n}\n\n/**\n * Describes a collection of role definitions\n *\n */\n@defaultPath(\"roledefinitions\")\nexport class RoleDefinitions extends SharePointQueryableCollection {\n\n    /**\t   \n     * Gets the role definition with the specified id from the collection\t    \n     *\t     \n     * @param id The id of the role definition\t     \n     *\t     \n     */\n    public getById(id: number): RoleDefinition {\n        return new RoleDefinition(this, `getById(${id})`);\n    }\n\n    /**\n     * Gets the role definition with the specified name\n     *\n     * @param name The name of the role definition\n     *\n     */\n    public getByName(name: string): RoleDefinition {\n        return new RoleDefinition(this, `getbyname('${name}')`);\n    }\n\n    /**\n     * Gets the role definition with the specified role type\n     *\n     * @param roleTypeKind The roletypekind of the role definition (None=0, Guest=1, Reader=2, Contributor=3, WebDesigner=4, Administrator=5, Editor=6, System=7)\n     *\n     */\n    public getByType(roleTypeKind: number): RoleDefinition {\n        return new RoleDefinition(this, `getbytype(${roleTypeKind})`);\n    }\n\n    /**\n     * Creates a role definition\n     *\n     * @param name The new role definition's name\n     * @param description The new role definition's description\n     * @param order The order in which the role definition appears\n     * @param basePermissions The permissions mask for this role definition\n     *\n     */\n    public add(name: string, description: string, order: number, basePermissions: BasePermissions): Promise<RoleDefinitionAddResult> {\n\n        const postBody = jsS({\n            BasePermissions: extend({ __metadata: { type: \"SP.BasePermissions\" } }, basePermissions),\n            Description: description,\n            Name: name,\n            Order: order,\n            __metadata: { \"type\": \"SP.RoleDefinition\" },\n        });\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                definition: this.getById(data.Id),\n            };\n        });\n    }\n}\n\n/**\n * Describes a role definition\n *\n */\nexport class RoleDefinition extends SharePointQueryableInstance {\n\n    /**\n     * Deletes this role definition\n     *\n     */\n    public delete = this._delete;\n\n    /**\n     * Updates this role definition with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the role definition\n     */\n    /* tslint:disable no-string-literal */\n    public update(properties: TypedHash<any>): Promise<RoleDefinitionUpdateResult> {\n\n        const s = [\"BasePermissions\"];\n        if (hOP(properties, s[0]) !== undefined) {\n            properties[s[0]] = extend({ __metadata: { type: \"SP.\" + s[0] } }, properties[s[0]]);\n        }\n\n        const postBody = jsS(extend(metadata(\"SP.RoleDefinition\"), properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n\n            let retDef: RoleDefinition = this;\n\n            if (hOP(properties, \"Name\")) {\n                const parent = this.getParent(RoleDefinitions, this.parentUrl, \"\");\n                retDef = parent.getByName(<string>properties[\"Name\"]);\n            }\n\n            return {\n                data: data,\n                definition: retDef,\n            };\n        });\n    }\n    /* tslint:enable */\n}\n\n/**\n * Result from updating a role definition\n *\n */\nexport interface RoleDefinitionUpdateResult {\n    definition: RoleDefinition;\n    data: any;\n}\n\n/**\n * Result from adding a role definition\n *\n */\nexport interface RoleDefinitionAddResult {\n    definition: RoleDefinition;\n    data: any;\n}\n\n/**\n * Describes the role definitons bound to a role assignment object\n *\n */\n@defaultPath(\"roledefinitionbindings\")\nexport class RoleDefinitionBindings extends SharePointQueryableCollection { }\n","import { SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\nimport { TextParser, BlobParser, JSONParser, BufferParser } from \"@pnp/odata\";\nimport { extend, getGUID } from \"@pnp/common\";\nimport { LimitedWebPartManager } from \"./webparts\";\nimport { Item } from \"./items\";\nimport { SharePointQueryableShareableFile } from \"./sharepointqueryableshareable\";\nimport { odataUrlFrom } from \"./odata\";\n\nexport interface ChunkedFileUploadProgressData {\n    uploadId: string;\n    stage: \"starting\" | \"continue\" | \"finishing\";\n    blockNumber: number;\n    totalBlocks: number;\n    chunkSize: number;\n    currentPointer: number;\n    fileSize: number;\n}\n\n/**\n * Describes a collection of File objects\n *\n */\n@defaultPath(\"files\")\nexport class Files extends SharePointQueryableCollection {\n\n    /**\n     * Gets a File by filename\n     *\n     * @param name The name of the file, including extension.\n     */\n    public getByName(name: string): File {\n        const f = new File(this);\n        f.concat(`('${name}')`);\n        return f;\n    }\n\n    /**\n     * Uploads a file. Not supported for batching\n     *\n     * @param url The folder-relative url of the file.\n     * @param content The file contents blob.\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten? (default: true)\n     * @returns The new File and the raw response.\n     */\n    public add(url: string, content: string | ArrayBuffer | Blob, shouldOverWrite = true): Promise<FileAddResult> {\n        return new Files(this, `add(overwrite=${shouldOverWrite},url='${url}')`)\n            .postCore({\n                body: content,\n            }).then((response) => {\n                return {\n                    data: response,\n                    file: this.getByName(url),\n                };\n            });\n    }\n\n    /**\n     * Uploads a file. Not supported for batching\n     *\n     * @param url The folder-relative url of the file.\n     * @param content The Blob file content to add\n     * @param progress A callback function which can be used to track the progress of the upload\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten? (default: true)\n     * @param chunkSize The size of each file slice, in bytes (default: 10485760)\n     * @returns The new File and the raw response.\n     */\n    public addChunked(\n        url: string,\n        content: Blob,\n        progress?: (data: ChunkedFileUploadProgressData) => void,\n        shouldOverWrite = true,\n        chunkSize = 10485760,\n    ): Promise<FileAddResult> {\n        const adder = this.clone(Files, `add(overwrite=${shouldOverWrite},url='${url}')`, false);\n        return adder.postCore()\n            .then(() => this.getByName(url))\n            .then(file => file.setContentChunked(content, progress, chunkSize));\n    }\n\n    /**\n     * Adds a ghosted file to an existing list or document library. Not supported for batching.\n     *\n     * @param fileUrl The server-relative url where you want to save the file.\n     * @param templateFileType The type of use to create the file.\n     * @returns The template file that was added and the raw response.\n     */\n    public addTemplateFile(fileUrl: string, templateFileType: TemplateFileType): Promise<FileAddResult> {\n        return this.clone(Files, `addTemplateFile(urloffile='${fileUrl}',templatefiletype=${templateFileType})`, false)\n            .postCore().then((response) => {\n                return {\n                    data: response,\n                    file: this.getByName(fileUrl),\n                };\n            });\n    }\n}\n\n/**\n * Describes a single File instance\n *\n */\nexport class File extends SharePointQueryableShareableFile {\n\n    /**\n     * Gets a value that specifies the list item field values for the list item corresponding to the file.\n     *\n     */\n    public get listItemAllFields(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"listItemAllFields\");\n    }\n\n    /**\n     * Gets a collection of versions\n     *\n     */\n    public get versions(): Versions {\n        return new Versions(this);\n    }\n\n    /**\n     * Approves the file submitted for content approval with the specified comment.\n     * Only documents in lists that are enabled for content approval can be approved.\n     *\n     * @param comment The comment for the approval.\n     */\n    public approve(comment = \"\"): Promise<void> {\n        return this.clone(File, `approve(comment='${comment}')`).postCore();\n    }\n\n    /**\n     * Stops the chunk upload session without saving the uploaded data. Does not support batching.\n     * If the file doesn’t already exist in the library, the partially uploaded file will be deleted.\n     * Use this in response to user action (as in a request to cancel an upload) or an error or exception.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     */\n    public cancelUpload(uploadId: string): Promise<void> {\n        return this.clone(File, `cancelUpload(uploadId=guid'${uploadId}')`, false).postCore();\n    }\n\n    /**\n     * Checks the file in to a document library based on the check-in type.\n     *\n     * @param comment A comment for the check-in. Its length must be <= 1023.\n     * @param checkinType The check-in type for the file.\n     */\n    public checkin(comment = \"\", checkinType = CheckinType.Major): Promise<void> {\n\n        if (comment.length > 1023) {\n            throw Error(\"The maximum comment length is 1023 characters.\");\n        }\n\n        return this.clone(File, `checkin(comment='${comment}',checkintype=${checkinType})`).postCore();\n    }\n\n    /**\n     * Checks out the file from a document library.\n     */\n    public checkout(): Promise<void> {\n        return this.clone(File, \"checkout\").postCore();\n    }\n\n    /**\n     * Copies the file to the destination url.\n     *\n     * @param url The absolute url or server relative url of the destination file path to copy to.\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten?\n     */\n    public copyTo(url: string, shouldOverWrite = true): Promise<void> {\n        return this.clone(File, `copyTo(strnewurl='${url}',boverwrite=${shouldOverWrite})`).postCore();\n    }\n\n    /**\n     * Delete this file.\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.clone(File, null).postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Denies approval for a file that was submitted for content approval.\n     * Only documents in lists that are enabled for content approval can be denied.\n     *\n     * @param comment The comment for the denial.\n     */\n    public deny(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw Error(\"The maximum comment length is 1023 characters.\");\n        }\n        return this.clone(File, `deny(comment='${comment}')`).postCore();\n    }\n\n    /**\n     * Specifies the control set used to access, modify, or add Web Parts associated with this Web Part Page and view.\n     * An exception is thrown if the file is not an ASPX page.\n     *\n     * @param scope The WebPartsPersonalizationScope view on the Web Parts page.\n     */\n    public getLimitedWebPartManager(scope = WebPartsPersonalizationScope.Shared): LimitedWebPartManager {\n        return new LimitedWebPartManager(this, `getLimitedWebPartManager(scope=${scope})`);\n    }\n\n    /**\n     * Moves the file to the specified destination url.\n     *\n     * @param url The absolute url or server relative url of the destination file path to move to.\n     * @param moveOperations The bitwise MoveOperations value for how to move the file.\n     */\n    public moveTo(url: string, moveOperations = MoveOperations.Overwrite): Promise<void> {\n        return this.clone(File, `moveTo(newurl='${url}',flags=${moveOperations})`).postCore();\n    }\n\n    /**\n     * Submits the file for content approval with the specified comment.\n     *\n     * @param comment The comment for the published file. Its length must be <= 1023.\n     */\n    public publish(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw Error(\"The maximum comment length is 1023 characters.\");\n        }\n        return this.clone(File, `publish(comment='${comment}')`).postCore();\n    }\n\n    /**\n     * Moves the file to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     *\n     * @returns The GUID of the recycled file.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(File, \"recycle\").postCore();\n    }\n\n    /**\n     * Reverts an existing checkout for the file.\n     *\n     */\n    public undoCheckout(): Promise<void> {\n        return this.clone(File, \"undoCheckout\").postCore();\n    }\n\n    /**\n     * Removes the file from content approval or unpublish a major version.\n     *\n     * @param comment The comment for the unpublish operation. Its length must be <= 1023.\n     */\n    public unpublish(comment = \"\"): Promise<void> {\n        if (comment.length > 1023) {\n            throw Error(\"The maximum comment length is 1023 characters.\");\n        }\n        return this.clone(File, `unpublish(comment='${comment}')`).postCore();\n    }\n\n    /**\n     * Gets the contents of the file as text. Not supported in batching.\n     *\n     */\n    public getText(): Promise<string> {\n\n        return this.clone(File, \"$value\", false).get(new TextParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Gets the contents of the file as a blob, does not work in Node.js. Not supported in batching.\n     *\n     */\n    public getBlob(): Promise<Blob> {\n\n        return this.clone(File, \"$value\", false).get(new BlobParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js. Not supported in batching.\n     */\n    public getBuffer(): Promise<ArrayBuffer> {\n\n        return this.clone(File, \"$value\", false).get(new BufferParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js. Not supported in batching.\n     */\n    public getJSON(): Promise<any> {\n\n        return this.clone(File, \"$value\", false).get(new JSONParser(), { headers: { \"binaryStringResponseBody\": \"true\" } });\n    }\n\n    /**\n     * Sets the content of a file, for large files use setContentChunked. Not supported in batching.\n     *\n     * @param content The file content\n     *\n     */\n    public setContent(content: string | ArrayBuffer | Blob): Promise<File> {\n\n        return this.clone(File, \"$value\", false).postCore({\n            body: content,\n            headers: {\n                \"X-HTTP-Method\": \"PUT\",\n            },\n        }).then(_ => new File(this));\n    }\n\n    /**\n     * Gets the associated list item for this folder, loading the default properties\n     */\n    public getItem<T>(...selects: string[]): Promise<Item & T> {\n\n        const q = this.listItemAllFields;\n        return q.select.apply(q, selects).get().then((d: any) => {\n\n            return extend((new Item(odataUrlFrom(d))).configureFrom(this), d);\n        });\n    }\n\n    /**\n     * Sets the contents of a file using a chunked upload approach. Not supported in batching.\n     *\n     * @param file The file to upload\n     * @param progress A callback function which can be used to track the progress of the upload\n     * @param chunkSize The size of each file slice, in bytes (default: 10485760)\n     */\n    public setContentChunked(file: Blob, progress?: (data: ChunkedFileUploadProgressData) => void, chunkSize = 10485760): Promise<FileAddResult> {\n\n        if (progress === undefined) {\n            progress = () => null;\n        }\n\n        const fileSize = file.size;\n        const blockCount = parseInt((file.size / chunkSize).toString(), 10) + ((file.size % chunkSize === 0) ? 1 : 0);\n        const uploadId = getGUID();\n\n        // start the chain with the first fragment\n        progress({ uploadId, blockNumber: 1, chunkSize, currentPointer: 0, fileSize, stage: \"starting\", totalBlocks: blockCount });\n\n        let chain = this.startUpload(uploadId, file.slice(0, chunkSize));\n\n        // skip the first and last blocks\n        for (let i = 2; i < blockCount; i++) {\n            chain = chain.then(pointer => {\n                progress({ uploadId, blockNumber: i, chunkSize, currentPointer: pointer, fileSize, stage: \"continue\", totalBlocks: blockCount });\n                return this.continueUpload(uploadId, pointer, file.slice(pointer, pointer + chunkSize));\n            });\n        }\n\n        return chain.then(pointer => {\n            progress({ uploadId, blockNumber: blockCount, chunkSize, currentPointer: pointer, fileSize, stage: \"finishing\", totalBlocks: blockCount });\n            return this.finishUpload(uploadId, pointer, file.slice(pointer));\n        });\n    }\n\n    /**\n     * Starts a new chunk upload session and uploads the first fragment.\n     * The current file content is not changed when this method completes.\n     * The method is idempotent (and therefore does not change the result) as long as you use the same values for uploadId and stream.\n     * The upload session ends either when you use the CancelUpload method or when you successfully\n     * complete the upload session by passing the rest of the file contents through the ContinueUpload and FinishUpload methods.\n     * The StartUpload and ContinueUpload methods return the size of the running total of uploaded data in bytes,\n     * so you can pass those return values to subsequent uses of ContinueUpload and FinishUpload.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fragment The file contents.\n     * @returns The size of the total uploaded data in bytes.\n     */\n    protected startUpload(uploadId: string, fragment: ArrayBuffer | Blob): Promise<number> {\n        return this.clone(File, `startUpload(uploadId=guid'${uploadId}')`, false)\n            .postCore<string>({ body: fragment })\n            .then(n => {\n                // When OData=verbose the payload has the following shape:\n                // { StartUpload: \"10485760\" }\n                if (typeof n === \"object\") {\n                    n = (n as any).StartUpload;\n                }\n                return parseFloat(n);\n            });\n    }\n\n    /**\n     * Continues the chunk upload session with an additional fragment.\n     * The current file content is not changed.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fileOffset The size of the offset into the file where the fragment starts.\n     * @param fragment The file contents.\n     * @returns The size of the total uploaded data in bytes.\n     */\n    protected continueUpload(uploadId: string, fileOffset: number, fragment: ArrayBuffer | Blob): Promise<number> {\n        return this.clone(File, `continueUpload(uploadId=guid'${uploadId}',fileOffset=${fileOffset})`, false)\n            .postCore<string>({ body: fragment })\n            .then(n => {\n                // When OData=verbose the payload has the following shape:\n                // { ContinueUpload: \"20971520\" }\n                if (typeof n === \"object\") {\n                    n = (n as any).ContinueUpload;\n                }\n                return parseFloat(n);\n            });\n    }\n\n    /**\n     * Uploads the last file fragment and commits the file. The current file content is changed when this method completes.\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\n     * This method is currently available only on Office 365.\n     *\n     * @param uploadId The unique identifier of the upload session.\n     * @param fileOffset The size of the offset into the file where the fragment starts.\n     * @param fragment The file contents.\n     * @returns The newly uploaded file.\n     */\n    protected finishUpload(uploadId: string, fileOffset: number, fragment: ArrayBuffer | Blob): Promise<FileAddResult> {\n        return this.clone(File, `finishUpload(uploadId=guid'${uploadId}',fileOffset=${fileOffset})`, false)\n            .postCore<{ ServerRelativeUrl: string }>({ body: fragment })\n            .then(response => {\n                return {\n                    data: response,\n                    file: new File(odataUrlFrom(response)),\n                };\n            });\n    }\n}\n\n/**\n * Describes a collection of Version objects\n *\n */\n@defaultPath(\"versions\")\nexport class Versions extends SharePointQueryableCollection {\n\n    /**\t\n     * Gets a version by id\t\n     *\t\n     * @param versionId The id of the version to retrieve\t\n     */\n    public getById(versionId: number): Version {\n        const v = new Version(this);\n        v.concat(`(${versionId})`);\n        return v;\n    }\n\n    /**\n     * Deletes all the file version objects in the collection.\n     *\n     */\n    public deleteAll(): Promise<void> {\n        return new Versions(this, \"deleteAll\").postCore();\n    }\n\n    /**\n     * Deletes the specified version of the file.\n     *\n     * @param versionId The ID of the file version to delete.\n     */\n    public deleteById(versionId: number): Promise<void> {\n        return this.clone(Versions, `deleteById(vid=${versionId})`).postCore();\n    }\n\n    /**\n     * Recycles the specified version of the file.\n     *\n     * @param versionId The ID of the file version to delete.\n     */\n    public recycleByID(versionId: number): Promise<void> {\n        return this.clone(Versions, `recycleByID(vid=${versionId})`).postCore();\n    }\n\n    /**\n     * Deletes the file version object with the specified version label.\n     *\n     * @param label The version label of the file version to delete, for example: 1.2\n     */\n    public deleteByLabel(label: string): Promise<void> {\n        return this.clone(Versions, `deleteByLabel(versionlabel='${label}')`).postCore();\n    }\n\n    /**\n     * Recycles the file version object with the specified version label.\n     *\n     * @param label The version label of the file version to delete, for example: 1.2\n     */\n    public recycleByLabel(label: string): Promise<void> {\n        return this.clone(Versions, `recycleByLabel(versionlabel='${label}')`).postCore();\n    }\n\n    /**\n     * Creates a new file version from the file specified by the version label.\n     *\n     * @param label The version label of the file version to restore, for example: 1.2\n     */\n    public restoreByLabel(label: string): Promise<void> {\n        return this.clone(Versions, `restoreByLabel(versionlabel='${label}')`).postCore();\n    }\n}\n\n/**\n * Describes a single Version instance\n *\n */\nexport class Version extends SharePointQueryableInstance {\n\n    /**\n    * Delete a specific version of a file.\n    *\n    * @param eTag Value used in the IF-Match header, by default \"*\"\n    */\n    public delete = this._deleteWithETag;\n\n    // /**\n    // * Delete a specific version of a file.\n    // *\n    // * @param eTag Value used in the IF-Match header, by default \"*\"\n    // */\n    // public delete(eTag = \"*\"): Promise<void> {\n    //     return this.postCore({\n    //         headers: {\n    //             \"IF-Match\": eTag,\n    //             \"X-HTTP-Method\": \"DELETE\",\n    //         },\n    //     });\n    // }\n}\n\nexport enum CheckinType {\n    Minor = 0,\n    Major = 1,\n    Overwrite = 2,\n}\n\nexport interface FileAddResult {\n    file: File;\n    data: any;\n}\n\nexport enum WebPartsPersonalizationScope {\n    User = 0,\n    Shared = 1,\n}\n\nexport enum MoveOperations {\n    Overwrite = 1,\n    AllowBrokenThickets = 8,\n}\n\nexport enum TemplateFileType {\n    StandardPage = 0,\n    WikiPage = 1,\n    FormPage = 2,\n    ClientSidePage = 3,\n}\n","import { RoleAssignments } from \"./roles\";\nimport { BasePermissions, PermissionKind } from \"./types\";\nimport { SharePointQueryable, SharePointQueryableInstance } from \"./sharepointqueryable\";\nimport { hOP } from \"@pnp/common\";\n\nexport class SharePointQueryableSecurable extends SharePointQueryableInstance {\n\n    /**\n     * Gets the set of role assignments for this item\n     *\n     */\n    public get roleAssignments(): RoleAssignments {\n        return new RoleAssignments(this);\n    }\n\n    /**\n     * Gets the closest securable up the security hierarchy whose permissions are applied to this list item\n     *\n     */\n    public get firstUniqueAncestorSecurableObject(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FirstUniqueAncestorSecurableObject\");\n    }\n\n    /**\n     * Gets the effective permissions for the user supplied\n     *\n     * @param loginName The claims username for the user (ex: i:0#.f|membership|user@domain.com)\n     */\n    public getUserEffectivePermissions(loginName: string): Promise<BasePermissions> {\n        const q = this.clone(SharePointQueryable, \"getUserEffectivePermissions(@user)\");\n        q.query.set(\"@user\", `'${encodeURIComponent(loginName)}'`);\n        return q.get<any>().then(r => {\n            // handle verbose mode\n            return hOP(r, \"GetUserEffectivePermissions\") ? r.GetUserEffectivePermissions : r;\n        });\n    }\n\n    /**\n     * Gets the effective permissions for the current user\n     */\n    public getCurrentUserEffectivePermissions(): Promise<BasePermissions> {\n\n        // remove need to reference Web here, which created a circular build issue\n        const w = new SharePointQueryableInstance(\"_api/web\", \"currentuser\");\n        return w.configureFrom(this).select(\"LoginName\").get<{ LoginName: string }>().then(user => {\n\n            return this.getUserEffectivePermissions(user.LoginName);\n        });\n    }\n\n    /**\n     * Breaks the security inheritance at this level optinally copying permissions and clearing subscopes\n     *\n     * @param copyRoleAssignments If true the permissions are copied from the current parent scope\n     * @param clearSubscopes Optional. true to make all child securable objects inherit role assignments from the current object\n     */\n    public breakRoleInheritance(copyRoleAssignments = false, clearSubscopes = false): Promise<any> {\n\n        return this.clone(SharePointQueryableSecurable, `breakroleinheritance(copyroleassignments=${copyRoleAssignments}, clearsubscopes=${clearSubscopes})`).postCore();\n    }\n\n    /**\n     * Removes the local role assignments so that it re-inherit role assignments from the parent object.\n     *\n     */\n    public resetRoleInheritance(): Promise<any> {\n\n        return this.clone(SharePointQueryableSecurable, \"resetroleinheritance\").postCore();\n    }\n\n    /**\n     * Determines if a given user has the appropriate permissions\n     *\n     * @param loginName The user to check\n     * @param permission The permission being checked\n     */\n    public userHasPermissions(loginName: string, permission: PermissionKind): Promise<boolean> {\n\n        return this.getUserEffectivePermissions(loginName).then(perms => {\n\n            return this.hasPermissions(perms, permission);\n        });\n    }\n\n    /**\n     * Determines if the current user has the requested permissions\n     *\n     * @param permission The permission we wish to check\n     */\n    public currentUserHasPermissions(permission: PermissionKind): Promise<boolean> {\n\n        return this.getCurrentUserEffectivePermissions().then(perms => {\n\n            return this.hasPermissions(perms, permission);\n        });\n    }\n\n    /**\n     * Taken from sp.js, checks the supplied permissions against the mask\n     *\n     * @param value The security principal's permissions on the given object\n     * @param perm The permission checked against the value\n     */\n    /* tslint:disable:no-bitwise */\n    public hasPermissions(value: BasePermissions, perm: PermissionKind): boolean {\n\n        if (!perm) {\n            return true;\n        }\n        if (perm === PermissionKind.FullMask) {\n            return (value.High & 32767) === 32767 && value.Low === 65535;\n        }\n\n        perm = perm - 1;\n        let num = 1;\n\n        if (perm >= 0 && perm < 32) {\n            num = num << perm;\n            return 0 !== (value.Low & num);\n        } else if (perm >= 32 && perm < 64) {\n            num = num << perm - 32;\n            return 0 !== (value.High & num);\n        }\n        return false;\n    }\n    /* tslint:enable */\n}\n","import { extend, combine, jsS } from \"@pnp/common\";\nimport { odataUrlFrom } from \"./odata\";\nimport {\n    SharePointQueryable,\n    SharePointQueryableInstance,\n    SharePointQueryableCollection,\n} from \"./sharepointqueryable\";\nimport { SharePointQueryableSecurable } from \"./sharepointqueryablesecurable\";\nimport {\n    RoleType,\n    SharingLinkKind,\n    ShareLinkResponse,\n    SharingRole,\n    SharingEmailData,\n    SharingResult,\n    SharingRecipient,\n    SharingEntityPermission,\n    SharingInformationRequest,\n    ObjectSharingSettings,\n    SharingInformation,\n    ShareObjectOptions,\n} from \"./types\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\n\n/**\n * Internal helper class used to augment classes to include sharing functionality\n */\nexport class SharePointQueryableShareable extends SharePointQueryable {\n\n    /**\n     * Gets a sharing link for the supplied\n     *\n     * @param kind The kind of link to share\n     * @param expiration The optional expiration for this link\n     */\n    public getShareLink(kind: SharingLinkKind, expiration: Date = null): Promise<ShareLinkResponse> {\n\n        // date needs to be an ISO string or null\n        const expString = expiration !== null ? expiration.toISOString() : null;\n\n        // clone using the factory and send the request\n        return this.clone(SharePointQueryableShareable, \"shareLink\").postCore<ShareLinkResponse>({\n            body: jsS({\n                request: {\n                    createLink: true,\n                    emailData: null,\n                    settings: {\n                        expiration: expString,\n                        linkKind: kind,\n                    },\n                },\n            }),\n        });\n    }\n\n    /**\n     * Shares this instance with the supplied users\n     *\n     * @param loginNames Resolved login names to share\n     * @param role The role\n     * @param requireSignin True to require the user is authenticated, otherwise false\n     * @param propagateAcl True to apply this share to all children\n     * @param emailData If supplied an email will be sent with the indicated properties\n     */\n    public shareWith(loginNames: string | string[], role: SharingRole, requireSignin = false, propagateAcl = false, emailData?: SharingEmailData): Promise<SharingResult> {\n\n        // handle the multiple input types\n        if (!Array.isArray(loginNames)) {\n            loginNames = [loginNames];\n        }\n\n        const userStr = jsS(loginNames.map(login => { return { Key: login }; }));\n        const roleFilter = role === SharingRole.Edit ? RoleType.Contributor : RoleType.Reader;\n\n        // start by looking up the role definition id we need to set the roleValue\n        // remove need to reference Web here, which created a circular build issue\n        const w = new SharePointQueryableCollection(\"_api/web\", \"roledefinitions\");\n        return w.select(\"Id\").filter(`RoleTypeKind eq ${roleFilter}`).get().then((def: { Id: number }[]) => {\n\n            if (!Array.isArray(def) || def.length < 1) {\n                throw Error(`Could not locate a role defintion with RoleTypeKind ${roleFilter}`);\n            }\n\n            let postBody = {\n                includeAnonymousLinkInEmail: requireSignin,\n                peoplePickerInput: userStr,\n                propagateAcl: propagateAcl,\n                roleValue: `role:${def[0].Id}`,\n                useSimplifiedRoles: true,\n            };\n\n            if (emailData !== undefined) {\n\n                postBody = extend(postBody, {\n                    emailBody: emailData.body,\n                    emailSubject: emailData.subject !== undefined ? emailData.subject : \"\",\n                    sendEmail: true,\n                });\n            }\n\n            return this.clone(SharePointQueryableShareable, \"shareObject\").postCore<SharingResult>({\n                body: jsS(postBody),\n            });\n        });\n    }\n\n    /**\n     * Shares an object based on the supplied options\n     *\n     * @param options The set of options to send to the ShareObject method\n     * @param bypass If true any processing is skipped and the options are sent directly to the ShareObject method\n     */\n    public shareObject(options: ShareObjectOptions, bypass = false): Promise<SharingResult> {\n\n        if (bypass) {\n\n            // if the bypass flag is set send the supplied parameters directly to the service\n            return this.sendShareObjectRequest(options);\n        }\n\n        // extend our options with some defaults\n        options = extend(options, {\n            group: null,\n            includeAnonymousLinkInEmail: false,\n            propagateAcl: false,\n            useSimplifiedRoles: true,\n        }, true);\n\n        return this.getRoleValue(options.role, options.group).then(roleValue => {\n\n            // handle the multiple input types\n            if (!Array.isArray(options.loginNames)) {\n                options.loginNames = [options.loginNames];\n            }\n\n            const userStr = jsS(options.loginNames.map(login => { return { Key: login }; }));\n\n            let postBody = {\n                peoplePickerInput: userStr,\n                roleValue: roleValue,\n                url: options.url,\n            };\n\n            if (options.emailData !== undefined && options.emailData !== null) {\n\n                postBody = extend(postBody, {\n                    emailBody: options.emailData.body,\n                    emailSubject: options.emailData.subject !== undefined ? options.emailData.subject : \"Shared with you.\",\n                    sendEmail: true,\n                });\n            }\n\n            return this.sendShareObjectRequest(postBody);\n        });\n    }\n\n    /**\n     * Calls the web's UnshareObject method\n     *\n     * @param url The url of the object to unshare\n     */\n    public unshareObjectWeb(url: string): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, \"unshareObject\").postCore<SharingResult>({\n            body: jsS({\n                url: url,\n            }),\n        });\n    }\n\n    /**\n     * Checks Permissions on the list of Users and returns back role the users have on the Item.\n     *\n     * @param recipients The array of Entities for which Permissions need to be checked.\n     */\n    public checkPermissions(recipients: SharingRecipient[]): Promise<SharingEntityPermission[]> {\n\n        return this.clone(SharePointQueryableShareable, \"checkPermissions\").postCore<SharingEntityPermission[]>({\n            body: jsS({\n                recipients: recipients,\n            }),\n        });\n    }\n\n    /**\n     * Get Sharing Information.\n     *\n     * @param request The SharingInformationRequest Object.\n     * @param expands Expand more fields.\n     * \n     */\n    public getSharingInformation(request: SharingInformationRequest = null, expands?: string[]): Promise<SharingInformation> {\n\n        const q = this.clone(SharePointQueryableShareable, \"getSharingInformation\");\n        return q.expand.apply(q, expands).postCore({\n            body: jsS({\n                request: request,\n            }),\n        });\n    }\n\n    /**\n     * Gets the sharing settings of an item.\n     *\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\n     */\n    public getObjectSharingSettings(useSimplifiedRoles = true): Promise<ObjectSharingSettings> {\n\n        return this.clone(SharePointQueryableShareable, \"getObjectSharingSettings\").postCore<ObjectSharingSettings>({\n            body: jsS({\n                useSimplifiedRoles: useSimplifiedRoles,\n            }),\n        });\n    }\n\n    /**\n     * Unshares this object\n     */\n    public unshareObject(): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, \"unshareObject\").postCore<SharingResult>();\n    }\n\n    /**\n     * Deletes a link by type\n     *\n     * @param kind Deletes a sharing link by the kind of link\n     */\n    public deleteLinkByKind(kind: SharingLinkKind): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, \"deleteLinkByKind\").postCore({\n            body: jsS({ linkKind: kind }),\n        });\n    }\n\n    /**\n     * Removes the specified link to the item.\n     *\n     * @param kind The kind of link to be deleted.\n     * @param shareId\n     */\n    public unshareLink(kind: SharingLinkKind, shareId = \"00000000-0000-0000-0000-000000000000\"): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, \"unshareLink\").postCore({\n            body: jsS({ linkKind: kind, shareId: shareId }),\n        });\n    }\n\n    /**\n     * Calculates the roleValue string used in the sharing query\n     *\n     * @param role The Sharing Role\n     * @param group The Group type\n     */\n    protected getRoleValue(role: SharingRole, group: RoleType): Promise<string> {\n\n        // we will give group precedence, because we had to make a choice\n        if (group !== undefined && group !== null) {\n\n            switch (group) {\n                case RoleType.Contributor:\n                    // remove need to reference Web here, which created a circular build issue\n                    const memberGroup = new SharePointQueryableInstance(\"_api/web\", \"associatedmembergroup\");\n                    return memberGroup.select(\"Id\").get<{ Id: number }>().then(g => `group: ${g.Id}`);\n                case RoleType.Reader:\n                case RoleType.Guest:\n                    // remove need to reference Web here, which created a circular build issue\n                    const visitorGroup = new SharePointQueryableInstance(\"_api/web\", \"associatedvisitorgroup\");\n                    return visitorGroup.select(\"Id\").get<{ Id: number }>().then(g => `group: ${g.Id}`);\n                default:\n                    throw Error(\"Could not determine role value for supplied value. Contributor, Reader, and Guest are supported\");\n            }\n        } else {\n\n            const roleFilter = role === SharingRole.Edit ? RoleType.Contributor : RoleType.Reader;\n            // remove need to reference Web here, which created a circular build issue\n            const roleDefs = new SharePointQueryableCollection(\"_api/web\", \"roledefinitions\");\n            return roleDefs.select(\"Id\").top(1).filter(`RoleTypeKind eq ${roleFilter}`).get<{ Id: number }[]>().then(def => {\n                if (def.length < 1) {\n                    throw Error(\"Could not locate associated role definition for supplied role. Edit and View are supported\");\n                }\n                return `role: ${def[0].Id}`;\n            });\n        }\n    }\n\n    private getShareObjectWeb(candidate: string): Promise<SharePointQueryableInstance> {\n        return Promise.resolve(new SharePointQueryableInstance(extractWebUrl(candidate), \"/_api/SP.Web.ShareObject\"));\n    }\n\n    private sendShareObjectRequest(options: any): Promise<SharingResult> {\n\n        return this.getShareObjectWeb(this.toUrl()).then(web => {\n\n            return web.expand(\"UsersWithAccessRequests\", \"GroupsSharedWith\").as(SharePointQueryableShareable).postCore({\n                body: jsS(options),\n            });\n        });\n    }\n}\n\nexport class SharePointQueryableShareableWeb extends SharePointQueryableSecurable {\n\n    /**\n     * Shares this web with the supplied users\n     * @param loginNames The resolved login names to share\n     * @param role The role to share this web\n     * @param emailData Optional email data\n     */\n    public shareWith(loginNames: string | string[], role: SharingRole = SharingRole.View, emailData?: SharingEmailData): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n        // remove need to reference Web here, which created a circular build issue\n        const web = new SharePointQueryableInstance(extractWebUrl(this.toUrl()), \"/_api/web/url\");\n        return web.get().then((url: string) => {\n\n            dependency();\n\n            return this.shareObject(combine(url, \"/_layouts/15/aclinv.aspx?forSharing=1&mbypass=1\"), loginNames, role, emailData);\n        });\n    }\n\n    /**\n     * Provides direct access to the static web.ShareObject method\n     *\n     * @param url The url to share\n     * @param loginNames Resolved loginnames string[] of a single login name string\n     * @param roleValue Role value\n     * @param emailData Optional email data\n     * @param groupId Optional group id\n     * @param propagateAcl\n     * @param includeAnonymousLinkInEmail\n     * @param useSimplifiedRoles\n     */\n    public shareObject(url: string,\n        loginNames: string | string[],\n        role: SharingRole,\n        emailData?: SharingEmailData,\n        group?: RoleType,\n        propagateAcl = false,\n        includeAnonymousLinkInEmail = false,\n        useSimplifiedRoles = true): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, null).shareObject({\n            emailData: emailData,\n            group: group,\n            includeAnonymousLinkInEmail: includeAnonymousLinkInEmail,\n            loginNames: loginNames,\n            propagateAcl: propagateAcl,\n            role: role,\n            url: url,\n            useSimplifiedRoles: useSimplifiedRoles,\n        });\n    }\n\n    /**\n     * Supplies a method to pass any set of arguments to ShareObject\n     *\n     * @param options The set of options to send to ShareObject\n     */\n    public shareObjectRaw(options: any): Promise<SharingResult> {\n        return this.clone(SharePointQueryableShareable, null).shareObject(options, true);\n    }\n\n    /**\n     * Unshares the object\n     *\n     * @param url The url of the object to stop sharing\n     */\n    public unshareObject(url: string): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, null).unshareObjectWeb(url);\n    }\n}\n\nexport class SharePointQueryableShareableItem extends SharePointQueryableSecurable {\n\n    /**\n     * Gets a link suitable for sharing for this item\n     *\n     * @param kind The type of link to share\n     * @param expiration The optional expiration date\n     */\n    public getShareLink(kind: SharingLinkKind = SharingLinkKind.OrganizationView, expiration: Date = null): Promise<ShareLinkResponse> {\n        return this.clone(SharePointQueryableShareable, null).getShareLink(kind, expiration);\n    }\n\n    /**\n     * Shares this item with one or more users\n     *\n     * @param loginNames string or string[] of resolved login names to which this item will be shared\n     * @param role The role (View | Edit) applied to the share\n     * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\n     */\n    public shareWith(loginNames: string | string[], role: SharingRole = SharingRole.View, requireSignin = false, emailData?: SharingEmailData): Promise<SharingResult> {\n\n        return this.clone(SharePointQueryableShareable, null).shareWith(loginNames, role, requireSignin, false, emailData);\n    }\n\n    /**\n     * Checks Permissions on the list of Users and returns back role the users have on the Item.\n     *\n     * @param recipients The array of Entities for which Permissions need to be checked.\n     */\n    public checkSharingPermissions(recipients: SharingRecipient[]): Promise<SharingEntityPermission[]> {\n\n        return this.clone(SharePointQueryableShareable, null).checkPermissions(recipients);\n    }\n\n    /**\n     * Get Sharing Information.\n     *\n     * @param request The SharingInformationRequest Object.\n     * @param expands Expand more fields.\n     * \n     */\n    public getSharingInformation(request: SharingInformationRequest = null, expands?: string[]): Promise<SharingInformation> {\n\n        return this.clone(SharePointQueryableShareable, null).getSharingInformation(request, expands);\n    }\n\n    /**\n     * Gets the sharing settings of an item.\n     *\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\n     */\n    public getObjectSharingSettings(useSimplifiedRoles = true): Promise<ObjectSharingSettings> {\n\n        return this.clone(SharePointQueryableShareable, null).getObjectSharingSettings(useSimplifiedRoles);\n    }\n\n    /**\n     * Unshare this item\n     */\n    public unshare(): Promise<SharingResult> {\n        return this.clone(SharePointQueryableShareable, null).unshareObject();\n    }\n\n    /**\n     * Deletes a sharing link by kind\n     *\n     * @param kind Deletes a sharing link by the kind of link\n     */\n    public deleteSharingLinkByKind(kind: SharingLinkKind): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, null).deleteLinkByKind(kind);\n    }\n\n    /**\n     * Removes the specified link to the item.\n     *\n     * @param kind The kind of link to be deleted.\n     * @param shareId\n     */\n    public unshareLink(kind: SharingLinkKind, shareId?: string): Promise<void> {\n\n        return this.clone(SharePointQueryableShareable, null).unshareLink(kind, shareId);\n    }\n}\n\nexport class FileFolderShared extends SharePointQueryableInstance {\n    /**\n     * Gets a link suitable for sharing\n     *\n     * @param kind The kind of link to get\n     * @param expiration Optional, an expiration for this link\n     */\n    public getShareLink(kind: SharingLinkKind = SharingLinkKind.OrganizationView, expiration: Date = null): Promise<ShareLinkResponse> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.getShareLink(kind, expiration);\n        });\n    }\n\n    /**\n         * Checks Permissions on the list of Users and returns back role the users have on the Item.\n         *\n         * @param recipients The array of Entities for which Permissions need to be checked.\n         */\n    public checkSharingPermissions(recipients: SharingRecipient[]): Promise<SharingEntityPermission[]> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.checkPermissions(recipients);\n        });\n    }\n\n    /**\n     * Get Sharing Information.\n     *\n     * @param request The SharingInformationRequest Object.\n     * @param expands Expand more fields.\n     * \n     */\n    public getSharingInformation(request: SharingInformationRequest = null, expands?: string[]): Promise<SharingInformation> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.getSharingInformation(request, expands);\n        });\n    }\n\n    /**\n     * Gets the sharing settings of an item.\n     *\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\n     */\n    public getObjectSharingSettings(useSimplifiedRoles = true): Promise<ObjectSharingSettings> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.getObjectSharingSettings(useSimplifiedRoles);\n        });\n    }\n\n    /**\n     * Unshare this item\n     */\n    public unshare(): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.unshareObject();\n        });\n    }\n\n    /**\n     * Deletes a sharing link by the kind of link\n     *\n     * @param kind The kind of link to be deleted.\n     */\n    public deleteSharingLinkByKind(kind: SharingLinkKind): Promise<void> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.deleteLinkByKind(kind);\n        });\n    }\n\n    /**\n     * Removes the specified link to the item.\n     *\n     * @param kind The kind of link to be deleted.\n     * @param shareId The share id to delete\n     */\n    public unshareLink(kind: SharingLinkKind, shareId?: string): Promise<void> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.unshareLink(kind, shareId);\n        });\n    }\n\n    /**\n     * For files and folders we need to use the associated item end point\n     */\n    protected getShareable(): Promise<SharePointQueryableShareable> {\n\n        // sharing only works on the item end point, not the file one - so we create a folder instance with the item url internally\n        return this.clone(SharePointQueryableShareableFile, \"listItemAllFields\", false).select(\"odata.id\").get().then(d => {\n\n            let shareable = new SharePointQueryableShareable(odataUrlFrom(d));\n\n            // we need to handle batching\n            if (this.hasBatch) {\n                shareable = shareable.inBatch(this.batch);\n            }\n\n            return shareable;\n        });\n    }\n}\n\nexport class SharePointQueryableShareableFile extends FileFolderShared {\n\n    /**\n     * Shares this item with one or more users\n     *\n     * @param loginNames string or string[] of resolved login names to which this item will be shared\n     * @param role The role (View | Edit) applied to the share\n     * @param shareEverything Share everything in this folder, even items with unique permissions.\n     * @param requireSignin If true the user must signin to view link, otherwise anyone with the link can access the resource\n     * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\n     */\n    public shareWith(loginNames: string | string[],\n        role: SharingRole = SharingRole.View,\n        requireSignin = false,\n        emailData?: SharingEmailData): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.shareWith(loginNames, role, requireSignin, false, emailData);\n        });\n    }\n}\n\nexport class SharePointQueryableShareableFolder extends FileFolderShared {\n\n    /**\n     * Shares this item with one or more users\n     *\n     * @param loginNames string or string[] of resolved login names to which this item will be shared\n     * @param role The role (View | Edit) applied to the share\n     * @param shareEverything Share everything in this folder, even items with unique permissions.\n     * @param requireSignin If true the user must signin to view link, otherwise anyone with the link can access the resource\n     * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\n     */\n    public shareWith(loginNames: string | string[],\n        role: SharingRole = SharingRole.View,\n        requireSignin = false,\n        shareEverything = false,\n        emailData?: SharingEmailData): Promise<SharingResult> {\n\n        const dependency = this.addBatchDependency();\n\n        return this.getShareable().then(shareable => {\n            dependency();\n            return shareable.shareWith(loginNames, role, requireSignin, shareEverything, emailData);\n        });\n    }\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { jsS } from \"@pnp/common\";\n\nexport class LimitedWebPartManager extends SharePointQueryable {\n\n    /**\n     * Gets the set of web part definitions contained by this web part manager\n     *\n     */\n    public get webparts(): WebPartDefinitions {\n\n        return new WebPartDefinitions(this, \"webparts\");\n    }\n\n    /**\n     * Exports a webpart definition\n     *\n     * @param id the GUID id of the definition to export\n     */\n    public export(id: string): Promise<string> {\n\n        return this.clone(LimitedWebPartManager, \"ExportWebPart\").postCore({\n            body: jsS({ webPartId: id }),\n        });\n    }\n\n    /**\n     * Imports a webpart\n     *\n     * @param xml webpart definition which must be valid XML in the .dwp or .webpart format\n     */\n    public import(xml: string): Promise<any> {\n\n        return this.clone(LimitedWebPartManager, \"ImportWebPart\").postCore({\n            body: jsS({ webPartXml: xml }),\n        });\n    }\n}\n\nexport class WebPartDefinitions extends SharePointQueryableCollection {\n\n    /**\n     * Gets a web part definition from the collection by id\n     *\n     * @param id The storage ID of the SPWebPartDefinition to retrieve\n     */\n    public getById(id: string): WebPartDefinition {\n        return new WebPartDefinition(this, `getbyid('${id}')`);\n    }\n\n    /**\n     * Gets a web part definition from the collection by storage id\n     *\n     * @param id The WebPart.ID of the SPWebPartDefinition to retrieve\n     */\n    public getByControlId(id: string): WebPartDefinition {\n\n        return new WebPartDefinition(this, `getByControlId('${id}')`);\n    }\n}\n\nexport class WebPartDefinition extends SharePointQueryableInstance {\n\n    /**\n     * Gets the webpart information associated with this definition\n     */\n    public get webpart(): WebPart {\n\n        return new WebPart(this);\n    }\n\n    /**\n     * Saves changes to the Web Part made using other properties and methods on the SPWebPartDefinition object\n     */\n    public saveChanges(): Promise<any> {\n\n        return this.clone(WebPartDefinition, \"SaveWebPartChanges\").postCore();\n    }\n\n    /**\n     * Moves the Web Part to a different location on a Web Part Page\n     *\n     * @param zoneId The ID of the Web Part Zone to which to move the Web Part\n     * @param zoneIndex A Web Part zone index that specifies the position at which the Web Part is to be moved within the destination Web Part zone\n     */\n    public moveTo(zoneId: string, zoneIndex: number): Promise<void> {\n\n        return this.clone(WebPartDefinition, `MoveWebPartTo(zoneID='${zoneId}', zoneIndex=${zoneIndex})`).postCore();\n    }\n\n    /**\n     * Closes the Web Part. If the Web Part is already closed, this method does nothing\n     */\n    public close(): Promise<void> {\n\n        return this.clone(WebPartDefinition, \"CloseWebPart\").postCore();\n    }\n\n    /**\n     * Opens the Web Part. If the Web Part is already closed, this method does nothing\n     */\n    public open(): Promise<void> {\n\n        return this.clone(WebPartDefinition, \"OpenWebPart\").postCore();\n\n    }\n\n    /**\n     * Removes a webpart from a page, all settings will be lost\n     */\n    public delete(): Promise<void> {\n\n        return this.clone(WebPartDefinition, \"DeleteWebPart\").postCore();\n    }\n}\n\n@defaultPath(\"webpart\")\nexport class WebPart extends SharePointQueryableInstance { }\n","import { extend, TypedHash, jsS } from \"@pnp/common\";\nimport { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\nimport { SharePointQueryableShareableFolder } from \"./sharepointqueryableshareable\";\nimport { Files } from \"./files\";\nimport { odataUrlFrom } from \"./odata\";\nimport { Item } from \"./items\";\nimport { SPHttpClient } from \"./net/sphttpclient\";\n\n/**\n * Describes a collection of Folder objects\n *\n */\n@defaultPath(\"folders\")\nexport class Folders extends SharePointQueryableCollection {\n\n    /**\n     * Gets a folder by folder name\n     *\n     */\n    public getByName(name: string): Folder {\n        const f = new Folder(this);\n        f.concat(`('${name}')`);\n        return f;\n    }\n\n    /**\n     * Adds a new folder to the current folder (relative) or any folder (absolute)\n     *\n     * @param url The relative or absolute url where the new folder will be created. Urls starting with a forward slash are absolute.\n     * @returns The new Folder and the raw response.\n     */\n    public add(url: string): Promise<FolderAddResult> {\n\n        return this.clone(Folders, `add('${url}')`).postCore().then((response) => {\n            return {\n                data: response,\n                folder: this.getByName(url),\n            };\n        });\n    }\n}\n\n/**\n * Describes a single Folder instance\n *\n */\nexport class Folder extends SharePointQueryableShareableFolder {\n\n    /**\n     * Specifies the sequence in which content types are displayed.\n     *\n     */\n    public get contentTypeOrder(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"contentTypeOrder\");\n    }\n\n    /**\n     * Gets this folder's files\n     *\n     */\n    public get files(): Files {\n        return new Files(this);\n    }\n\n    /**\n     * Gets this folder's sub folders\n     *\n     */\n    public get folders(): Folders {\n        return new Folders(this);\n    }\n\n    /**\n     * Gets this folder's list item field values\n     *\n     */\n    public get listItemAllFields(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"listItemAllFields\");\n    }\n\n    /**\n     * Gets the parent folder, if available\n     *\n     */\n    public get parentFolder(): Folder {\n        return new Folder(this, \"parentFolder\");\n    }\n\n    /**\n     * Gets this folder's properties\n     *\n     */\n    public get properties(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"properties\");\n    }\n\n    /**\n     * Gets this folder's server relative url\n     *\n     */\n    public get serverRelativeUrl(): SharePointQueryable {\n        return new SharePointQueryable(this, \"serverRelativeUrl\");\n    }\n\n    /**\n     * Gets a value that specifies the content type order.\n     *\n     */\n    public get uniqueContentTypeOrder(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"uniqueContentTypeOrder\");\n    }\n\n    public update = this._update<FolderUpdateResult, TypedHash<any>>(\"SP.Folder\", data => ({ data, folder: this }));\n\n    /**\n    * Delete this folder\n    *\n    * @param eTag Value used in the IF-Match header, by default \"*\"\n    */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.clone(Folder, null).postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Moves the folder to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(Folder, \"recycle\").postCore();\n    }\n\n    /**\n     * Gets the associated list item for this folder, loading the default properties\n     */\n    public getItem<T>(...selects: string[]): Promise<Item & T> {\n\n        const q = this.listItemAllFields;\n        return q.select.apply(q, selects).get().then((d: any) => {\n\n            return extend(new Item(odataUrlFrom(d)), d);\n        });\n    }\n\n    /**\n     * Moves a folder to destination path\n     *\n     * @param destUrl Absolute or relative URL of the destination path\n     */\n    public moveTo(destUrl: string): Promise<void> {\n        return this.select(\"ServerRelativeUrl\").get().then(({ ServerRelativeUrl: srcUrl }) => {\n            const client = new SPHttpClient();\n            const webBaseUrl = this.toUrl().split(\"/_api\")[0];\n            const hostUrl = webBaseUrl.replace(\"://\", \"___\").split(\"/\")[0].replace(\"___\", \"://\");\n            const methodUrl = `${webBaseUrl}/_api/SP.MoveCopyUtil.MoveFolder()`;\n            return client.post(methodUrl, {\n                body: jsS({\n                    destUrl: destUrl.indexOf(\"http\") === 0 ? destUrl : `${hostUrl}${destUrl}`,\n                    srcUrl: `${hostUrl}${srcUrl}`,\n                }),\n            }).then(r => r.json());\n        });\n    }\n\n}\n\nexport interface FolderAddResult {\n    folder: Folder;\n    data: any;\n}\n\nexport interface FolderUpdateResult {\n    folder: Folder;\n    data: any;\n}\n","import { TypedHash, jsS } from \"@pnp/common\";\nimport { SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\nimport { metadata } from \"./utils/metadata\";\n\n/**\n * Describes a collection of content types\n *\n */\n@defaultPath(\"contenttypes\")\nexport class ContentTypes extends SharePointQueryableCollection {\n\n    /**\n     * Adds an existing contenttype to a content type collection\n     *\n     * @param contentTypeId in the following format, for example: 0x010102\n     */\n    public addAvailableContentType(contentTypeId: string): Promise<ContentTypeAddResult> {\n\n        const postBody: string = jsS({\n            \"contentTypeId\": contentTypeId,\n        });\n\n        return this.clone(ContentTypes, \"addAvailableContentType\").postCore<{ id: string }>({ body: postBody }).then((data) => {\n            return {\n                contentType: this.getById(data.id),\n                data: data,\n            };\n        });\n    }\n\n    /**\t\n     * Gets a ContentType by content type id\t\n     */\n    public getById(id: string): ContentType {\n        const ct: ContentType = new ContentType(this);\n        ct.concat(`('${id}')`);\n        return ct;\n    }\n\n    /**\n     * Adds a new content type to the collection\n     *\n     * @param id The desired content type id for the new content type (also determines the parent content type)\n     * @param name The name of the content type\n     * @param description The description of the content type\n     * @param group The group in which to add the content type\n     * @param additionalSettings Any additional settings to provide when creating the content type\n     *\n     */\n    public add(\n        id: string,\n        name: string,\n        description = \"\",\n        group = \"Custom Content Types\",\n        additionalSettings: TypedHash<string | number | boolean> = {}): Promise<ContentTypeAddResult> {\n\n        const postBody = jsS(Object.assign(metadata(\"SP.ContentType\"), {\n            \"Description\": description,\n            \"Group\": group,\n            \"Id\": { \"StringValue\": id },\n            \"Name\": name,\n        }, additionalSettings));\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return { contentType: this.getById(data.id), data: data };\n        });\n    }\n}\n\n/**\n * Describes a single ContentType instance\n *\n */\nexport class ContentType extends SharePointQueryableInstance {\n\n    /**\n     * Gets the column (also known as field) references in the content type.\n    */\n    public get fieldLinks(): FieldLinks {\n        return new FieldLinks(this);\n    }\n\n    /**\n     * Gets a value that specifies the collection of fields for the content type.\n     */\n    public get fields(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"fields\");\n    }\n\n    /**\n     * Gets the parent content type of the content type.\n     */\n    public get parent(): ContentType {\n        return new ContentType(this, \"parent\");\n    }\n\n    /**\n     * Gets a value that specifies the collection of workflow associations for the content type.\n     */\n    public get workflowAssociations(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"workflowAssociations\");\n    }\n\n    /**\n     * Delete this content type\n     */\n    public delete = this._delete;\n}\n\nexport interface ContentTypeAddResult {\n    contentType: ContentType;\n    data: any;\n}\n\n/**\n * Represents a collection of field link instances\n */\n@defaultPath(\"fieldlinks\")\nexport class FieldLinks extends SharePointQueryableCollection {\n    /**\t\n     * Gets a FieldLink by GUID id\t\n     *\t\n     * @param id The GUID id of the field link\t\n     */\n    public getById(id: string) {\n        const fl = new FieldLink(this);\n        fl.concat(`(guid'${id}')`);\n        return fl;\n    }\n}\n\n/**\n * Represents a field link instance\n */\nexport class FieldLink extends SharePointQueryableInstance { }\n","import { SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { TextParser, BlobParser, JSONParser, BufferParser, ODataParser } from \"@pnp/odata\";\n\nexport interface AttachmentFileInfo {\n    name: string;\n    content: string | Blob | ArrayBuffer;\n}\n\n/**\n * Describes a collection of Item objects\n *\n */\n@defaultPath(\"AttachmentFiles\")\nexport class AttachmentFiles extends SharePointQueryableCollection {\n\n    /**\n     * Gets a Attachment File by filename\n     *\n     * @param name The name of the file, including extension.\n     */\n    public getByName(name: string): AttachmentFile {\n        const f = new AttachmentFile(this);\n        f.concat(`('${name}')`);\n        return f;\n    }\n\n    /**\n     * Adds a new attachment to the collection. Not supported for batching.\n     *\n     * @param name The name of the file, including extension.\n     * @param content The Base64 file content.\n     */\n    public add(name: string, content: string | Blob | ArrayBuffer): Promise<AttachmentFileAddResult> {\n        return this.clone(AttachmentFiles, `add(FileName='${name}')`, false).postCore({\n            body: content,\n        }).then((response) => {\n            return {\n                data: response,\n                file: this.getByName(name),\n            };\n        });\n    }\n\n    /**\n     * Adds multiple new attachment to the collection. Not supported for batching.\n     *\n     * @param files The collection of files to add\n     */\n    public addMultiple(files: AttachmentFileInfo[]): Promise<void> {\n\n        // add the files in series so we don't get update conflicts\n        return files.reduce((chain, file) => chain.then(() => this.clone(AttachmentFiles, `add(FileName='${file.name}')`, false).postCore({\n            body: file.content,\n        })), Promise.resolve());\n    }\n\n    /**\n     * Delete multiple attachments from the collection. Not supported for batching.\n     *\n     * @param files The collection of files to delete\n     */\n    public deleteMultiple(...files: string[]): Promise<void> {\n        return files.reduce((chain, file) => chain.then(() => this.getByName(file).delete()), Promise.resolve());\n    }\n\n    /**\n     * Delete multiple attachments from the collection and send to recycle bin. Not supported for batching.\n     *\n     * @param files The collection of files to be deleted and sent to recycle bin\n     */\n    public recycleMultiple(...files: string[]): Promise<void> {\n        return files.reduce((chain, file) => chain.then(() => this.getByName(file).recycle()), Promise.resolve());\n    }\n}\n\n/**\n * Describes a single attachment file instance\n *\n */\nexport class AttachmentFile extends SharePointQueryableInstance {\n\n    public delete = this._deleteWithETag;\n\n    /**\n     * Gets the contents of the file as text\n     *\n     */\n    public getText(): Promise<string> {\n        return this.getParsed(new TextParser());\n    }\n\n    /**\n     * Gets the contents of the file as a blob, does not work in Node.js\n     *\n     */\n    public getBlob(): Promise<Blob> {\n        return this.getParsed(new BlobParser());\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js\n     */\n    public getBuffer(): Promise<ArrayBuffer> {\n        return this.getParsed(new BufferParser());\n    }\n\n    /**\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js\n     */\n    public getJSON(): Promise<any> {\n        return this.getParsed(new JSONParser());\n    }\n\n    /**\n     * Sets the content of a file. Not supported for batching\n     *\n     * @param content The value to set for the file contents\n     */\n    public setContent(content: string | ArrayBuffer | Blob): Promise<AttachmentFile> {\n\n        return this.clone(AttachmentFile, \"$value\", false).postCore({\n            body: content,\n            headers: {\n                \"X-HTTP-Method\": \"PUT\",\n            },\n        }).then(_ => new AttachmentFile(this));\n    }\n\n    /**\n     * Delete this attachment file and send it to recycle bin\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public recycle(eTag = \"*\"): Promise<void> {\n        return this.clone(AttachmentFile, \"recycleObject\").postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    // /**\n    //  * Delete this attachment file\n    //  *\n    //  * @param eTag Value used in the IF-Match header, by default \"*\"\n    //  */\n    // public delete(eTag = \"*\"): Promise<void> {\n    //     return this.postCore({\n    //         headers: {\n    //             \"IF-Match\": eTag,\n    //             \"X-HTTP-Method\": \"DELETE\",\n    //         },\n    //     });\n    // }\n\n    private getParsed<T>(parser: ODataParser<T>): Promise<T> {\n        return this.clone(AttachmentFile, \"$value\", false).get(parser);\n    }\n}\n\nexport interface AttachmentFileAddResult {\n    file: AttachmentFile;\n    data: any;\n}\n","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\nimport { TypedHash, jsS } from \"@pnp/common\";\nimport { metadata } from \"./utils/metadata\";\n\n/**\n * Describes the views available in the current context\n *\n */\n@defaultPath(\"views\")\nexport class Views extends SharePointQueryableCollection {\n\n    /**\t  \n     * Gets a view by guid id\t    \n     *\t   \n     * @param id The GUID id of the view\t    \n     */\n    public getById(id: string): View {\n        const v = new View(this);\n        v.concat(`('${id}')`);\n        return v;\n    }\n\n    /**\n     * Gets a view by title (case-sensitive)\n     *\n     * @param title The case-sensitive title of the view\n     */\n    public getByTitle(title: string): View {\n        return new View(this, `getByTitle('${title}')`);\n    }\n\n    /**\n     * Adds a new view to the collection\n     *\n     * @param title The new views's title\n     * @param personalView True if this is a personal view, otherwise false, default = false\n     * @param additionalSettings Will be passed as part of the view creation body\n     */\n    public add(title: string, personalView = false, additionalSettings: TypedHash<any> = {}): Promise<ViewAddResult> {\n\n        const postBody = jsS(Object.assign(metadata(\"SP.View\"), {\n            \"PersonalView\": personalView,\n            \"Title\": title,\n        }, additionalSettings));\n\n        return this.clone(Views, null).postCore<{ Id: string }>({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                view: this.getById(data.Id),\n            };\n        });\n    }\n}\n\n/**\n * Describes a single View instance\n *\n */\nexport class View extends SharePointQueryableInstance {\n\n    public get fields(): ViewFields {\n        return new ViewFields(this);\n    }\n\n    /**\n     * Updates this view intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the view\n     */\n    public update = this._update<ViewUpdateResult, TypedHash<any>>(\"SP.View\", data => ({ data, view: this }));\n\n    /**\n     * Delete this view\n     *\n     */\n    public delete = this._delete;\n\n    /**\n     * Returns the list view as HTML.\n     *\n     */\n    public renderAsHtml(): Promise<string> {\n        return this.clone(SharePointQueryable, \"renderashtml\").get();\n    }\n\n    /**\n     * Sets the view schema\n     * \n     * @param viewXml The view XML to set\n     */\n    public setViewXml(viewXml: string): Promise<void> {\n\n        return this.clone(View, \"SetViewXml\").postCore({\n            body: jsS({\n                viewXml,\n            }),\n        });\n    }\n}\n\n@defaultPath(\"viewfields\")\nexport class ViewFields extends SharePointQueryableCollection {\n    /**\n     * Gets a value that specifies the XML schema that represents the collection.\n     */\n    public getSchemaXml(): Promise<string> {\n        return this.clone(SharePointQueryable, \"schemaxml\").get();\n    }\n\n    /**\n     * Adds the field with the specified field internal name or display name to the collection.\n     *\n     * @param fieldTitleOrInternalName The case-sensitive internal name or display name of the field to add.\n     */\n    public add(fieldTitleOrInternalName: string): Promise<void> {\n        return this.clone(ViewFields, `addviewfield('${fieldTitleOrInternalName}')`).postCore();\n    }\n\n    /**\n     * Moves the field with the specified field internal name to the specified position in the collection.\n     *\n     * @param fieldInternalName The case-sensitive internal name of the field to move.\n     * @param index The zero-based index of the new position for the field.\n     */\n    public move(fieldInternalName: string, index: number): Promise<void> {\n        return this.clone(ViewFields, \"moveviewfieldto\").postCore({\n            body: jsS({ \"field\": fieldInternalName, \"index\": index }),\n        });\n    }\n\n    /**\n     * Removes all the fields from the collection.\n     */\n    public removeAll(): Promise<void> {\n        return this.clone(ViewFields, \"removeallviewfields\").postCore();\n    }\n\n    /**\n     * Removes the field with the specified field internal name from the collection.\n     *\n     * @param fieldInternalName The case-sensitive internal name of the field to remove from the view.\n     */\n    public remove(fieldInternalName: string): Promise<void> {\n        return this.clone(ViewFields, `removeviewfield('${fieldInternalName}')`).postCore();\n    }\n}\n\nexport interface ViewAddResult {\n    view: View;\n    data: any;\n}\n\nexport interface ViewUpdateResult {\n    view: View;\n    data: any;\n}\n","import { SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\nimport { extend, TypedHash, jsS } from \"@pnp/common\";\nimport {\n    XmlSchemaFieldCreationInformation,\n    DateTimeFieldFormatType,\n    DateTimeFieldFriendlyFormatType,\n    FieldTypes,\n    CalendarType,\n    UrlFieldFormatType,\n    FieldUserSelectionMode,\n    FieldCreationProperties,\n    ChoiceFieldFormatType,\n} from \"./types\";\nimport { metadata } from \"./utils/metadata\";\n\n/**\n * Describes a collection of Field objects\n *\n */\n@defaultPath(\"fields\")\nexport class Fields extends SharePointQueryableCollection {\n\n    /**\t\n     * Gets a field from the collection by id\t\n     *\t\n     * @param id The Id of the list\t\n     */\n    public getById(id: string): Field {\n        const f: Field = new Field(this);\n        f.concat(`('${id}')`);\n        return f;\n    }\n\n    /**\n     * Gets a field from the collection by title\n     *\n     * @param title The case-sensitive title of the field\n     */\n    public getByTitle(title: string): Field {\n        return new Field(this, `getByTitle('${title}')`);\n    }\n\n    /**\n     * Gets a field from the collection by using internal name or title\n     *\n     * @param name The case-sensitive internal name or title of the field\n     */\n    public getByInternalNameOrTitle(name: string): Field {\n        return new Field(this, `getByInternalNameOrTitle('${name}')`);\n    }\n\n    /**\n     * Creates a field based on the specified schema\n     */\n    public createFieldAsXml(xml: string | XmlSchemaFieldCreationInformation): Promise<FieldAddResult> {\n\n        let info: XmlSchemaFieldCreationInformation;\n        if (typeof xml === \"string\") {\n            info = { SchemaXml: xml };\n        } else {\n            info = xml as XmlSchemaFieldCreationInformation;\n        }\n\n        const postBody: string = jsS({\n            \"parameters\":\n                extend(metadata(\"SP.XmlSchemaFieldCreationInformation\"), info),\n        });\n\n        return this.clone(Fields, \"createfieldasxml\").postCore<{ Id: string }>({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                field: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Adds a new field to the collection\n     *\n     * @param title The new field's title\n     * @param fieldType The new field's type (ex: SP.FieldText)\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public add(title: string, fieldType: string, properties: FieldCreationProperties & { FieldTypeKind: number }): Promise<FieldAddResult> {\n\n        const postBody: string = jsS(Object.assign(metadata(fieldType), {\n            \"Title\": title,\n        }, properties));\n\n        return this.clone(Fields, null).postCore<{ Id: string }>({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                field: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Adds a new SP.FieldText to the collection\n     *\n     * @param title The field title\n     * @param maxLength The maximum number of characters allowed in the value of the field.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addText(title: string, maxLength = 255, properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props: { FieldTypeKind: number, MaxLength: number } = {\n            FieldTypeKind: 2,\n            MaxLength: maxLength,\n        };\n\n        return this.add(title, \"SP.FieldText\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldCalculated to the collection\n     *\n     * @param title The field title.\n     * @param formula The formula for the field.\n     * @param dateFormat The date and time format that is displayed in the field.\n     * @param outputType Specifies the output format for the field. Represents a FieldType value.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addCalculated(\n        title: string,\n        formula: string,\n        dateFormat: DateTimeFieldFormatType,\n        outputType: FieldTypes = FieldTypes.Text,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props: {\n            DateFormat: DateTimeFieldFormatType;\n            FieldTypeKind: number;\n            Formula: string;\n            OutputType: FieldTypes;\n        } = {\n            DateFormat: dateFormat,\n            FieldTypeKind: 17,\n            Formula: formula,\n            OutputType: outputType,\n        };\n\n        return this.add(title, \"SP.FieldCalculated\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldDateTime to the collection\n     *\n     * @param title The field title\n     * @param displayFormat The format of the date and time that is displayed in the field.\n     * @param calendarType Specifies the calendar type of the field.\n     * @param friendlyDisplayFormat The type of friendly display format that is used in the field.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addDateTime(\n        title: string,\n        displayFormat: DateTimeFieldFormatType = DateTimeFieldFormatType.DateOnly,\n        calendarType: CalendarType = CalendarType.Gregorian,\n        friendlyDisplayFormat: DateTimeFieldFriendlyFormatType = DateTimeFieldFriendlyFormatType.Unspecified,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            DateTimeCalendarType: calendarType,\n            DisplayFormat: displayFormat,\n            FieldTypeKind: 4,\n            FriendlyDisplayFormat: friendlyDisplayFormat,\n        };\n\n        return this.add(title, \"SP.FieldDateTime\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldNumber to the collection\n     *\n     * @param title The field title\n     * @param minValue The field's minimum value\n     * @param maxValue The field's maximum value\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addNumber(\n        title: string,\n        minValue?: number,\n        maxValue?: number,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        let props: { FieldTypeKind: number } = { FieldTypeKind: 9 };\n\n        if (minValue !== undefined) {\n            props = extend({ MinimumValue: minValue }, props);\n        }\n\n        if (maxValue !== undefined) {\n            props = extend({ MaximumValue: maxValue }, props);\n        }\n\n        return this.add(title, \"SP.FieldNumber\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldCurrency to the collection\n     *\n     * @param title The field title\n     * @param minValue The field's minimum value\n     * @param maxValue The field's maximum value\n     * @param currencyLocalId Specifies the language code identifier (LCID) used to format the value of the field\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addCurrency(\n        title: string,\n        minValue?: number,\n        maxValue?: number,\n        currencyLocalId = 1033,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        let props: { CurrencyLocaleId: number; FieldTypeKind: number; } = {\n            CurrencyLocaleId: currencyLocalId,\n            FieldTypeKind: 10,\n        };\n\n        if (minValue !== undefined) {\n            props = extend({ MinimumValue: minValue }, props);\n        }\n\n        if (maxValue !== undefined) {\n            props = extend({ MaximumValue: maxValue }, props);\n        }\n\n        return this.add(title, \"SP.FieldCurrency\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldMultiLineText to the collection\n     *\n     * @param title The field title\n     * @param numberOfLines Specifies the number of lines of text to display for the field.\n     * @param richText Specifies whether the field supports rich formatting.\n     * @param restrictedMode Specifies whether the field supports a subset of rich formatting.\n     * @param appendOnly Specifies whether all changes to the value of the field are displayed in list forms.\n     * @param allowHyperlink Specifies whether a hyperlink is allowed as a value of the field.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     *\n     */\n    public addMultilineText(\n        title: string,\n        numberOfLines = 6,\n        richText = true,\n        restrictedMode = false,\n        appendOnly = false,\n        allowHyperlink = true,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            AllowHyperlink: allowHyperlink,\n            AppendOnly: appendOnly,\n            FieldTypeKind: 3,\n            NumberOfLines: numberOfLines,\n            RestrictedMode: restrictedMode,\n            RichText: richText,\n        };\n\n        return this.add(title, \"SP.FieldMultiLineText\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldUrl to the collection\n     *\n     * @param title The field title\n     */\n    public addUrl(\n        title: string,\n        displayFormat: UrlFieldFormatType = UrlFieldFormatType.Hyperlink,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            DisplayFormat: displayFormat,\n            FieldTypeKind: 11,\n        };\n\n        return this.add(title, \"SP.FieldUrl\", extend(props, properties));\n    }\n\n    /** Adds a user field to the colleciton\n    * \n    * @param title The new field's title\n    * @param selectionMode The selection mode of the field\n    * @param selectionGroup Value that specifies the identifier of the SharePoint group whose members can be selected as values of the field\n    * @param properties\n    */\n    public addUser(title: string,\n        selectionMode: FieldUserSelectionMode,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            FieldTypeKind: 20,\n            SelectionMode: selectionMode,\n        };\n\n        return this.add(title, \"SP.FieldUser\", extend(props, properties));\n    }\n\n    /**\n     * Adds a SP.FieldLookup to the collection\n     *\n     * @param title The new field's title\n     * @param lookupListId The guid id of the list where the source of the lookup is found\n     * @param lookupFieldName The internal name of the field in the source list\n     * @param properties Set of additional properties to set on the new field\n     */\n    public addLookup(\n        title: string,\n        lookupListId: string,\n        lookupFieldName: string,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = extend({\n            FieldTypeKind: 7,\n            LookupFieldName: lookupFieldName,\n            LookupListId: lookupListId,\n            Title: title,\n        }, properties);\n\n        const postBody: string = jsS({\n            \"parameters\":\n                extend(metadata(\"SP.FieldCreationInformation\"), props),\n        });\n\n        return this.clone(Fields, \"addfield\").postCore<{ Id: string }>({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                field: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Adds a new SP.FieldChoice to the collection\n     *\n     * @param title The field title.\n     * @param choices The choices for the field.\n     * @param format The display format of the available options for the field.\n     * @param fillIn Specifies whether the field allows fill-in values.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addChoice(\n        title: string,\n        choices: string[],\n        format: ChoiceFieldFormatType = ChoiceFieldFormatType.Dropdown,\n        fillIn?: boolean,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            Choices: {\n                results: choices,\n            },\n            EditFormat: format,\n            FieldTypeKind: 6,\n            FillInChoice: fillIn,\n        };\n\n        return this.add(title, \"SP.FieldChoice\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldMultiChoice to the collection\n     *\n     * @param title The field title.\n     * @param choices The choices for the field.\n     * @param fillIn Specifies whether the field allows fill-in values.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addMultiChoice(\n        title: string,\n        choices: string[],\n        fillIn?: boolean,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            Choices: {\n                results: choices,\n            },\n            FieldTypeKind: 15,\n            FillInChoice: fillIn,\n        };\n\n        return this.add(title, \"SP.FieldMultiChoice\", extend(props, properties));\n    }\n\n    /**\n     * Adds a new SP.FieldBoolean to the collection\n     *\n     * @param title The field title.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addBoolean(\n        title: string,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props = {\n            FieldTypeKind: 8,\n        };\n\n        return this.add(title, \"SP.Field\", extend(props, properties));\n    }\n\n    /**\n    * Creates a secondary (dependent) lookup field, based on the Id of the primary lookup field.\n    * \n    * @param displayName The display name of the new field.\n    * @param primaryLookupFieldId The guid of the primary Lookup Field.\n    * @param showField Which field to show from the lookup list.\n    */\n    public addDependentLookupField(\n        displayName: string,\n        primaryLookupFieldId: string,\n        showField: string,\n    ): Promise<FieldAddResult> {\n        return this.clone(\n            Fields,\n            `adddependentlookupfield(displayName='${displayName}', primarylookupfieldid='${primaryLookupFieldId}', showfield='${showField}')`,\n        )\n            .postCore<{ Id: string }>()\n            .then(data => {\n                return {\n                    data,\n                    field: this.getById(data.Id),\n                };\n            });\n    }\n\n    /**\n     * Adds a new SP.FieldLocation to the collection\n     *\n     * @param title The field title.\n     * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\n     */\n    public addLocation(\n        title: string,\n        properties?: FieldCreationProperties): Promise<FieldAddResult> {\n\n        const props: { FieldTypeKind: number } = { FieldTypeKind: 33 };\n\n        return this.add(title, \"SP.FieldLocation\", extend(props, properties));\n    }\n}\n\n/**\n * Describes a single of Field instance\n *\n */\nexport class Field extends SharePointQueryableInstance {\n\n    /**\n     * Delete this fields\n     *\n     */\n    public delete = this._delete;\n\n    /**\n     * Updates this field intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the list\n     * @param fieldType The type value, required to update child field type properties\n     */\n    public update(properties: TypedHash<string | number | boolean>, fieldType = \"SP.Field\"): Promise<FieldUpdateResult> {\n\n        const postBody: string = jsS(extend(metadata(fieldType), properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data,\n                field: this,\n            };\n        });\n    }\n\n    /**\n     * Sets the value of the ShowInDisplayForm property for this field.\n     */\n    public setShowInDisplayForm(show: boolean): Promise<void> {\n        return this.clone(Field, `setshowindisplayform(${show})`).postCore();\n    }\n\n    /**\n     * Sets the value of the ShowInEditForm property for this field.\n     */\n    public setShowInEditForm(show: boolean): Promise<void> {\n        return this.clone(Field, `setshowineditform(${show})`).postCore();\n    }\n\n    /**\n     * Sets the value of the ShowInNewForm property for this field.\n     */\n    public setShowInNewForm(show: boolean): Promise<void> {\n        return this.clone(Field, `setshowinnewform(${show})`).postCore();\n    }\n}\n\n/**\n * This interface defines the result of adding a field\n */\nexport interface FieldAddResult {\n    data: any;\n    field: Field;\n}\n\nexport interface FieldUpdateResult {\n    data: any;\n    field: Field;\n}\n","import { SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\n\n/**\n * Describes a collection of Field objects\n *\n */\n@defaultPath(\"forms\")\nexport class Forms extends SharePointQueryableCollection {\n    /**\t\n     * Gets a form by id\t\n     *\t\n     * @param id The guid id of the item to retrieve\t\n     */\n    public getById(id: string): Form {\n        const i = new Form(this);\n        i.concat(`('${id}')`);\n        return i;\n    }\n}\n\n/**\n * Describes a single of Form instance\n *\n */\nexport class Form extends SharePointQueryableInstance { }\n","import { SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\nimport { jsS } from \"@pnp/common\";\n\n/**\n * Describes a collection of webhook subscriptions\n *\n */\n@defaultPath(\"subscriptions\")\nexport class Subscriptions extends SharePointQueryableCollection {\n\n    /**\n     * Returns all the webhook subscriptions or the specified webhook subscription\n     *\n     * @param subscriptionId The id of a specific webhook subscription to retrieve, omit to retrieve all the webhook subscriptions\n     */\n    public getById(subscriptionId: string): Subscription {\n        const s = new Subscription(this);\n        s.concat(`('${subscriptionId}')`);\n        return s;\n    }\n\n    /**\n     * Creates a new webhook subscription\n     *\n     * @param notificationUrl The url to receive the notifications\n     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months)\n     * @param clientState A client specific string (optional)\n     */\n    public add(notificationUrl: string, expirationDate: string, clientState?: string): Promise<SubscriptionAddResult> {\n\n        const postBody: any = {\n            \"expirationDateTime\": expirationDate,\n            \"notificationUrl\": notificationUrl,\n            \"resource\": this.toUrl(),\n        };\n\n        if (clientState) {\n            postBody.clientState = clientState;\n        }\n\n        return this.postCore({ body: jsS(postBody), headers: { \"Content-Type\": \"application/json\" } }).then(result => {\n\n            return { data: result, subscription: this.getById(result.id) };\n        });\n    }\n}\n\n/**\n * Describes a single webhook subscription instance\n *\n */\nexport class Subscription extends SharePointQueryableInstance {\n\n    /**\n     * Renews this webhook subscription\n     *\n     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months, optional)\n     * @param notificationUrl The url to receive the notifications (optional)\n     * @param clientState A client specific string (optional)\n     */\n    public update(expirationDate?: string, notificationUrl?: string, clientState?: string): Promise<SubscriptionUpdateResult> {\n\n      const postBody: any = {\n      };\n\n      if (expirationDate) {\n        postBody.expirationDateTime = expirationDate;\n      }\n\n      if (notificationUrl) {\n        postBody.notificationUrl = notificationUrl;\n      }\n\n      if (clientState) {\n        postBody.clientState = clientState;\n      }\n\n      return this.patchCore({ body: jsS(postBody), headers: { \"Content-Type\": \"application/json\" } }).then(data => {\n          return { data: data, subscription: this };\n      });\n  }\n\n    /**\n     * Removes this webhook subscription\n     *\n     */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n}\n\nexport interface SubscriptionAddResult {\n    subscription: Subscription;\n    data: any;\n}\n\nexport interface SubscriptionUpdateResult {\n    subscription: Subscription;\n    data: any;\n}\n","import { SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { extend, TypedHash, jsS } from \"@pnp/common\";\n\n/**\n * Describes a collection of user custom actions\n *\n */\n@defaultPath(\"usercustomactions\")\nexport class UserCustomActions extends SharePointQueryableCollection {\n\n    /**\t   \n     * Returns the user custom action with the specified id\t     \n     *\t    \n     * @param id The GUID id of the user custom action to retrieve\t     \n     */\n    public getById(id: string): UserCustomAction {\n        const uca = new UserCustomAction(this);\n        uca.concat(`('${id}')`);\n        return uca;\n    }\n\n    /**\n     * Creates a user custom action\n     *\n     * @param properties The information object of property names and values which define the new user custom action\n     *\n     */\n    public add(properties: TypedHash<any>): Promise<UserCustomActionAddResult> {\n\n        const postBody = jsS(extend({ __metadata: { \"type\": \"SP.UserCustomAction\" } }, properties));\n\n        return this.postCore({ body: postBody }).then((data) => {\n            return {\n                action: this.getById(data.Id),\n                data: data,\n            };\n        });\n    }\n\n    /**\n     * Deletes all user custom actions in the collection\n     *\n     */\n    public clear(): Promise<void> {\n        return this.clone(UserCustomActions, \"clear\").postCore();\n    }\n}\n\n/**\n * Describes a single user custom action\n *\n */\nexport class UserCustomAction extends SharePointQueryableInstance {\n\n    /**\n    * Updates this user custom action with the supplied properties\n    *\n    * @param properties An information object of property names and values to update for this user custom action\n    */\n    public update = this._update<UserCustomActionUpdateResult, TypedHash<any>>(\"SP.UserCustomAction\", (data) => ({ data, action: this }));\n\n    /**\n    * Removes this user custom action\n    *\n    */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n}\n\n/**\n * Result from adding a user custom action\n *\n */\nexport interface UserCustomActionAddResult {\n    data: any;\n    action: UserCustomAction;\n}\n\n/**\n * Result from udating a user custom action\n *\n */\nexport interface UserCustomActionUpdateResult {\n    data: any;\n    action: UserCustomAction;\n}\n","import { Items } from \"./items\";\nimport { Views, View } from \"./views\";\nimport { ContentTypes } from \"./contenttypes\";\nimport { Fields } from \"./fields\";\nimport { Forms } from \"./forms\";\nimport { Subscriptions } from \"./subscriptions\";\nimport { SharePointQueryable, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { SharePointQueryableSecurable } from \"./sharepointqueryablesecurable\";\nimport { extend, TypedHash, hOP, jsS } from \"@pnp/common\";\nimport { ControlMode, RenderListData, ChangeQuery, CamlQuery, ChangeLogitemQuery, ListFormData, RenderListDataParameters, ListItemFormUpdateValue } from \"./types\";\nimport { UserCustomActions } from \"./usercustomactions\";\nimport { odataUrlFrom } from \"./odata\";\nimport { Folder } from \"./folders\";\nimport { metadata } from \"./utils/metadata\";\n\n/**\n * Describes a collection of List objects\n *\n */\n@defaultPath(\"lists\")\nexport class Lists extends SharePointQueryableCollection {\n\n    /**\n     * Gets a list from the collection by guid id\n     *\n     * @param id The Id of the list (GUID)\n     */\n    public getById(id: string): List {\n        const list = new List(this);\n        list.concat(`('${id}')`);\n        return list;\n    }\n\n    /**\n     * Gets a list from the collection by title\n     *\n     * @param title The title of the list\n     */\n    public getByTitle(title: string): List {\n        return new List(this, `getByTitle('${title}')`);\n    }\n\n    /**\n     * Adds a new list to the collection\n     *\n     * @param title The new list's title\n     * @param description The new list's description\n     * @param template The list template value\n     * @param enableContentTypes If true content types will be allowed and enabled, otherwise they will be disallowed and not enabled\n     * @param additionalSettings Will be passed as part of the list creation body\n     */\n    public add(title: string, description = \"\", template = 100, enableContentTypes = false, additionalSettings: TypedHash<string | number | boolean> = {}): Promise<ListAddResult> {\n\n        const addSettings = extend({\n            \"AllowContentTypes\": enableContentTypes,\n            \"BaseTemplate\": template,\n            \"ContentTypesEnabled\": enableContentTypes,\n            \"Description\": description,\n            \"Title\": title,\n            \"__metadata\": { \"type\": \"SP.List\" },\n        }, additionalSettings);\n\n        return this.postCore({ body: jsS(addSettings) }).then((data) => {\n            return { data: data, list: this.getByTitle(addSettings.Title) };\n        });\n    }\n\n    /**\n     * Ensures that the specified list exists in the collection (note: this method not supported for batching)\n     *\n     * @param title The new list's title\n     * @param description The new list's description\n     * @param template The list template value\n     * @param enableContentTypes If true content types will be allowed and enabled, otherwise they will be disallowed and not enabled\n     * @param additionalSettings Will be passed as part of the list creation body or used to update an existing list\n     */\n    public ensure(\n        title: string,\n        description = \"\",\n        template = 100,\n        enableContentTypes = false,\n        additionalSettings: TypedHash<string | number | boolean> = {}): Promise<ListEnsureResult> {\n\n        if (this.hasBatch) {\n            throw Error(\"The ensure list method is not supported for use in a batch.\");\n        }\n\n        return new Promise((resolve, reject) => {\n\n            const addOrUpdateSettings = extend(additionalSettings, { Title: title, Description: description, ContentTypesEnabled: enableContentTypes }, true);\n\n            const list: List = this.getByTitle(addOrUpdateSettings.Title);\n\n            list.get().then(_ => {\n\n                list.update(addOrUpdateSettings).then(d => {\n                    resolve({ created: false, data: d, list: this.getByTitle(addOrUpdateSettings.Title) });\n                }).catch(e => reject(e));\n\n            }).catch(_ => {\n\n                this.add(title, description, template, enableContentTypes, addOrUpdateSettings).then((r) => {\n                    resolve({ created: true, data: r.data, list: this.getByTitle(addOrUpdateSettings.Title) });\n                }).catch((e) => reject(e));\n            });\n        });\n    }\n\n    /**\n     * Gets a list that is the default asset location for images or other files, which the users upload to their wiki pages.\n     */\n    public ensureSiteAssetsLibrary(): Promise<List> {\n        return this.clone(Lists, \"ensuresiteassetslibrary\").postCore().then((json) => {\n            return new List(odataUrlFrom(json));\n        });\n    }\n\n    /**\n     * Gets a list that is the default location for wiki pages.\n     */\n    public ensureSitePagesLibrary(): Promise<List> {\n        return this.clone(Lists, \"ensuresitepageslibrary\").postCore().then((json) => {\n            return new List(odataUrlFrom(json));\n        });\n    }\n}\n\n/**\n * Describes a single List instance\n *\n */\nexport class List extends SharePointQueryableSecurable {\n\n    /**\n     * Gets the content types in this list\n     *\n     */\n    public get contentTypes(): ContentTypes {\n        return new ContentTypes(this);\n    }\n\n    /**\n     * Gets the items in this list\n     *\n     */\n    public get items(): Items {\n        return new Items(this);\n    }\n\n    /**\n     * Gets the views in this list\n     *\n     */\n    public get views(): Views {\n        return new Views(this);\n    }\n\n    /**\n     * Gets the fields in this list\n     *\n     */\n    public get fields(): Fields {\n        return new Fields(this);\n    }\n\n    /**\n     * Gets the forms in this list\n     *\n     */\n    public get forms(): Forms {\n        return new Forms(this);\n    }\n\n    /**\n     * Gets the default view of this list\n     *\n     */\n    public get defaultView(): View {\n        return new View(this, \"DefaultView\");\n    }\n\n    /**\n     * Get all custom actions on a site collection\n     *\n     */\n    public get userCustomActions(): UserCustomActions {\n        return new UserCustomActions(this);\n    }\n\n    /**\n     * Gets the effective base permissions of this list\n     *\n     */\n    public get effectiveBasePermissions(): SharePointQueryable {\n        return new SharePointQueryable(this, \"EffectiveBasePermissions\");\n    }\n\n    /**\n     * Gets the event receivers attached to this list\n     *\n     */\n    public get eventReceivers(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"EventReceivers\");\n    }\n\n    /**\n     * Gets the related fields of this list\n     *\n     */\n    public get relatedFields(): SharePointQueryable {\n        return new SharePointQueryable(this, \"getRelatedFields\");\n    }\n\n    /**\n     * Gets the IRM settings for this list\n     *\n     */\n    public get informationRightsManagementSettings(): SharePointQueryable {\n        return new SharePointQueryable(this, \"InformationRightsManagementSettings\");\n    }\n\n    /**\n     * Gets the webhook subscriptions of this list\n     *\n     */\n    public get subscriptions(): Subscriptions {\n        return new Subscriptions(this);\n    }\n\n    /**\n     * The root folder of the list\n     */\n    public get rootFolder(): Folder {\n        return new Folder(this, \"rootFolder\");\n    }\n\n    /**\n     * Gets a view by view guid id\n     *\n     */\n    public getView(viewId: string): View {\n        return new View(this, `getView('${viewId}')`);\n    }\n\n    /**\n     * Updates this list intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the list\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    /* tslint:disable no-string-literal */\n    public update(properties: TypedHash<string | number | boolean>, eTag = \"*\"): Promise<ListUpdateResult> {\n\n        const postBody = jsS(extend({\n            \"__metadata\": { \"type\": \"SP.List\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n\n            let retList: List = this;\n\n            if (hOP(properties, \"Title\")) {\n                retList = this.getParent(List, this.parentUrl, `getByTitle('${properties[\"Title\"]}')`);\n            }\n\n            return {\n                data: data,\n                list: retList,\n            };\n        });\n    }\n    /* tslint:enable */\n\n    /**\n     * Delete this list\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public delete(eTag = \"*\"): Promise<void> {\n        return this.postCore({\n            headers: {\n                \"IF-Match\": eTag,\n                \"X-HTTP-Method\": \"DELETE\",\n            },\n        });\n    }\n\n    /**\n     * Returns the collection of changes from the change log that have occurred within the list, based on the specified query.\n     */\n    public getChanges(query: ChangeQuery): Promise<any> {\n\n        return this.clone(List, \"getchanges\").postCore({\n            body: jsS({ \"query\": extend(metadata(\"SP.ChangeQuery\"), query) }),\n        });\n    }\n\n    /**\n     * Returns a collection of items from the list based on the specified query.\n     *\n     * @param CamlQuery The Query schema of Collaborative Application Markup\n     * Language (CAML) is used in various ways within the context of Microsoft SharePoint Foundation\n     * to define queries against list data.\n     * see:\n     *\n     * https://msdn.microsoft.com/en-us/library/office/ms467521.aspx\n     *\n     * @param expands A URI with a $expand System Query Option indicates that Entries associated with\n     * the Entry or Collection of Entries identified by the Resource Path\n     * section of the URI must be represented inline (i.e. eagerly loaded).\n     * see:\n     *\n     * https://msdn.microsoft.com/en-us/library/office/fp142385.aspx\n     *\n     * http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#ExpandSystemQueryOption\n     */\n    public getItemsByCAMLQuery(query: CamlQuery, ...expands: string[]): Promise<any> {\n\n        const q = this.clone(List, \"getitems\");\n        return q.expand.apply(q, expands).postCore({\n            body: jsS({ \"query\": extend({ \"__metadata\": { \"type\": \"SP.CamlQuery\" } }, query) }),\n        });\n    }\n\n    /**\n     * See: https://msdn.microsoft.com/en-us/library/office/dn292554.aspx\n     */\n    public getListItemChangesSinceToken(query: ChangeLogitemQuery): Promise<string> {\n\n        return this.clone(List, \"getlistitemchangessincetoken\").postCore({\n            body: jsS({ \"query\": extend({ \"__metadata\": { \"type\": \"SP.ChangeLogItemQuery\" } }, query) }),\n        }, { parse(r) { return r.text(); } });\n    }\n\n    /**\n     * Moves the list to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(List, \"recycle\").postCore().then(data => {\n            if (hOP(data, \"Recycle\")) {\n                return data.Recycle;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Renders list data based on the view xml provided\n     */\n    public renderListData(viewXml: string): Promise<RenderListData> {\n\n        const q = this.clone(List, \"renderlistdata(@viewXml)\");\n        q.query.set(\"@viewXml\", `'${viewXml}'`);\n        return q.postCore().then(data => {\n            // data will be a string, so we parse it again\n            return JSON.parse(hOP(data, \"RenderListData\") ? data.RenderListData : data);\n        });\n    }\n\n    /**\n     * Returns the data for the specified query view\n     *\n     * @param parameters The parameters to be used to render list data as JSON string.\n     * @param overrideParameters The parameters that are used to override and extend the regular SPRenderListDataParameters.\n     */\n    public renderListDataAsStream(parameters: RenderListDataParameters, overrideParameters: any = null): Promise<any> {\n\n        const postBody = {\n            overrideParameters: extend(metadata(\"SP.RenderListDataOverrideParameters\"), overrideParameters),\n            parameters: extend(metadata(\"SP.RenderListDataParameters\"), parameters),\n        };\n\n        return this.clone(List, \"RenderListDataAsStream\", true).postCore({\n            body: jsS(postBody),\n        });\n    }\n\n    /**\n     * Gets the field values and field schema attributes for a list item.\n     */\n    public renderListFormData(itemId: number, formId: string, mode: ControlMode): Promise<ListFormData> {\n        return this.clone(List, `renderlistformdata(itemid=${itemId}, formid='${formId}', mode='${mode}')`).postCore().then(data => {\n            // data will be a string, so we parse it again\n            return JSON.parse(hOP(data, \"RenderListFormData\") ? data.RenderListFormData : data);\n        });\n    }\n\n    /**\n     * Reserves a list item ID for idempotent list item creation.\n     */\n    public reserveListItemId(): Promise<number> {\n        return this.clone(List, \"reservelistitemid\").postCore().then(data => {\n            if (hOP(data, \"ReserveListItemId\")) {\n                return data.ReserveListItemId;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Returns the ListItemEntityTypeFullName for this list, used when adding/updating list items. Does not support batching.\n     *\n     */\n    public getListItemEntityTypeFullName(): Promise<string> {\n        return this.clone(List, null, false).select(\"ListItemEntityTypeFullName\").get<{ ListItemEntityTypeFullName: string }>().then(o => o.ListItemEntityTypeFullName);\n    }\n\n    /**\n     * Creates an item using path (in a folder), validates and sets its field values.\n     *\n     * @param formValues The fields to change and their new values.\n     * @param decodedUrl Path decoded url; folder's server relative path.\n     * @param bNewDocumentUpdate true if the list item is a document being updated after upload; otherwise false.\n     * @param checkInComment Optional check in comment.\n     */\n    public addValidateUpdateItemUsingPath(\n        formValues: ListItemFormUpdateValue[],\n        decodedUrl: string,\n        bNewDocumentUpdate = false,\n        checkInComment?: string,\n    ): Promise<ListItemFormUpdateValue[]> {\n        return this.clone(List, \"AddValidateUpdateItemUsingPath()\").postCore({\n            body: jsS({\n                bNewDocumentUpdate,\n                checkInComment,\n                formValues,\n                listItemCreateInfo: {\n                    FolderPath: {\n                        DecodedUrl: decodedUrl,\n                        __metadata: { type: \"SP.ResourcePath\" },\n                    },\n                    __metadata: { type: \"SP.ListItemCreationInformationUsingPath\" },\n                },\n            }),\n        }).then(res => {\n            if (typeof res.AddValidateUpdateItemUsingPath !== \"undefined\") {\n                return res.AddValidateUpdateItemUsingPath.results;\n            }\n            return res;\n        });\n    }\n}\n\nexport interface ListAddResult {\n    list: List;\n    data: any;\n}\n\nexport interface ListUpdateResult {\n    list: List;\n    data: any;\n}\n\nexport interface ListEnsureResult {\n    list: List;\n    created: boolean;\n    data: any;\n}\n","import { SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\nimport { extend, jsS } from \"@pnp/common\";\nimport { odataUrlFrom } from \"./odata\";\nimport { metadata } from \"./utils/metadata\";\n\nexport interface CommentAuthorData {\n    email: string;\n    id: number;\n    isActive: boolean;\n    isExternal: boolean;\n    jobTitle: string | null;\n    loginName: string;\n    name: string;\n    principalType: number;\n    userId: any | null;\n}\n\nexport interface CommentData {\n    author: CommentAuthorData;\n    createdDate: string;\n    id: string;\n    isLikedByUser: boolean;\n    isReply: boolean;\n    itemId: number;\n    likeCount: number;\n    listId: string;\n    mentions: any | null;\n    parentId: string;\n    replyCount: number;\n    text: string;\n}\n\nexport interface Identity {\n    loginName: string;\n    email: string;\n    name: string;\n}\n\nexport interface CommentInfo {\n    text: string;\n    mentions?: Identity[];\n}\n\n/**\n * Represents a Collection of comments\n */\n@defaultPath(\"comments\")\nexport class Comments extends SharePointQueryableCollection<CommentData[]> {\n\n    /**\n     * Adds a new comment to this collection\n     * \n     * @param info Comment information to add\n     */\n    public add(info: string | CommentInfo): Promise<Comment & CommentData> {\n\n        if (typeof info === \"string\") {\n            info = { text: info };\n        }\n\n        const postBody = jsS(extend(metadata(\"Microsoft.SharePoint.Comments.comment\"), info));\n\n        return this.clone(Comments, null).postCore<CommentData>({ body: postBody }).then(d => {\n            return extend(this.getById(d.id), d);\n        });\n    }\n\n    /**\n     * Gets a comment by id\n     * \n     * @param id Id of the comment to load\n     */\n    public getById(id: string | number): Comment {\n        const c = new Comment(this);\n        c.concat(`(${id})`);\n        return c;\n    }\n\n    /**\n     * Deletes all the comments in this collection\n     */\n    public clear(): Promise<boolean> {\n        return this.clone(Comments, \"DeleteAll\").postCore<boolean>();\n    }\n}\n\n/**\n * Represents a comment\n */\nexport class Comment extends SharePointQueryableInstance {\n\n    public get replies(): Replies {\n        return new Replies(this);\n    }\n\n    /**\n     * Likes the comment as the current user\n     */\n    public like(): Promise<void> {\n        return this.clone(Comment, \"Like\").postCore<void>();\n    }\n\n    /**\n     * Unlikes the comment as the current user\n     */\n    public unlike(): Promise<void> {\n        return this.clone(Comment, \"Unlike\").postCore<void>();\n    }\n\n    /**\n     * Deletes this comment\n     */\n    public delete(): Promise<void> {\n        return this.clone(Comment, \"DeleteComment\").postCore<void>();\n    }\n}\n\n/**\n * Represents a Collection of comments\n */\n@defaultPath(\"replies\")\nexport class Replies extends SharePointQueryableCollection<CommentData[]> {\n\n    /**\n     * Adds a new reply to this collection\n     * \n     * @param info Comment information to add\n     */\n    public add(info: string | CommentInfo): Promise<Comment & CommentData> {\n\n        if (typeof info === \"string\") {\n            info = { text: info };\n        }\n\n        const postBody = jsS(extend(metadata(\"Microsoft.SharePoint.Comments.comment\"), info));\n\n        return this.clone(Replies, null).postCore<CommentData>({ body: postBody }).then(d => {\n            return extend(new Comment(odataUrlFrom(d)), d);\n        });\n    }\n}\n","import { SharePointQueryable, SharePointQueryableCollection, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\nimport { SharePointQueryableShareableItem } from \"./sharepointqueryableshareable\";\nimport { Folder } from \"./folders\";\nimport { File } from \"./files\";\nimport { ContentType } from \"./contenttypes\";\nimport { extend, TypedHash, jsS, hOP } from \"@pnp/common\";\nimport { ListItemFormUpdateValue, LikeData } from \"./types\";\nimport { ODataParserBase } from \"@pnp/odata\";\nimport { AttachmentFiles } from \"./attachmentfiles\";\nimport { List } from \"./lists\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { Comments } from \"./comments\";\nimport { metadata } from \"./utils/metadata\";\n\n/**\n * Describes a collection of Item objects\n *\n */\n@defaultPath(\"items\")\nexport class Items extends SharePointQueryableCollection {\n\n    /**\t\n    * Gets an Item by id\t\n    *\t\n    * @param id The integer id of the item to retrieve\t\n    */\n    public getById(id: number): Item {\n        const i = new Item(this);\n        i.concat(`(${id})`);\n        return i;\n    }\n\n    /**\n     * Gets BCS Item by string id\n     *\n     * @param stringId The string id of the BCS item to retrieve\n     */\n    public getItemByStringId(stringId: string): Item {\n        // creates an item with the parent list path and append out method call\n        return new Item(this.parentUrl, `getItemByStringId('${stringId}')`);\n    }\n\n    /**\n     * Skips the specified number of items (https://msdn.microsoft.com/en-us/library/office/fp142385.aspx#sectionSection6)\n     *\n     * @param skip The starting id where the page should start, use with top to specify pages\n     * @param reverse It true the PagedPrev=true parameter is added allowing backwards navigation in the collection\n     */\n    public skip(skip: number, reverse = false): this {\n        if (reverse) {\n            this.query.set(\"$skiptoken\", encodeURIComponent(`Paged=TRUE&PagedPrev=TRUE&p_ID=${skip}`));\n        } else {\n            this.query.set(\"$skiptoken\", encodeURIComponent(`Paged=TRUE&p_ID=${skip}`));\n        }\n        return this;\n    }\n\n    /**\n     * Gets a collection designed to aid in paging through data\n     *\n     */\n    public getPaged<T = any[]>(): Promise<PagedItemCollection<T>> {\n        return this.get(new PagedItemCollectionParser<T>(this));\n    }\n\n    /**\n     * Gets all the items in a list, regardless of count. Does not support batching or caching\n     *\n     *  @param requestSize Number of items to return in each request (Default: 2000)\n     *  @param acceptHeader Allows for setting the value of the Accept header for SP 2013 support\n     */\n    public getAll(requestSize = 2000, acceptHeader = \"application/json;odata=nometadata\"): Promise<any[]> {\n\n        Logger.write(\"Calling items.getAll should be done sparingly. Ensure this is the correct choice. If you are unsure, it is not.\", LogLevel.Warning);\n\n        // this will be used for the actual query\n        // and we set no metadata here to try and reduce traffic\n        const items = new Items(this, \"\").top(requestSize).configure({\n            headers: {\n                \"Accept\": acceptHeader,\n            },\n        });\n\n        // let's copy over the odata query params that can be applied\n        // $top - allow setting the page size this way (override what we did above)\n        // $select - allow picking the return fields (good behavior)\n        // $filter - allow setting a filter, though this may fail due for large lists\n        this.query.forEach((v: string, k: string) => {\n            if (/^\\$select|filter|top|expand$/i.test(k)) {\n                items.query.set(k, v);\n            }\n        });\n\n        // give back the promise\n        return new Promise((resolve, reject) => {\n\n            // this will eventually hold the items we return\n            const itemsCollector: any[] = [];\n\n            // action that will gather up our results recursively\n            const gatherer = (last: PagedItemCollection<any>) => {\n\n                // collect that set of results\n                [].push.apply(itemsCollector, last.results);\n\n                // if we have more, repeat - otherwise resolve with the collected items\n                if (last.hasNext) {\n                    last.getNext().then(gatherer).catch(reject);\n                } else {\n                    resolve(itemsCollector);\n                }\n            };\n\n            // start the cycle\n            items.getPaged().then(gatherer).catch(reject);\n        });\n    }\n\n    /**\n     * Adds a new item to the collection\n     *\n     * @param properties The new items's properties\n     * @param listItemEntityTypeFullName The type name of the list's entities\n     */\n    public add(properties: TypedHash<any> = {}, listItemEntityTypeFullName: string = null): Promise<ItemAddResult> {\n\n        const removeDependency = this.addBatchDependency();\n\n        return this.ensureListItemEntityTypeName(listItemEntityTypeFullName).then(listItemEntityType => {\n\n            const postBody = jsS(extend(metadata(listItemEntityType), properties));\n\n            const promise = this.clone(Items, \"\").postCore<{ Id: number }>({ body: postBody }).then((data) => {\n                return {\n                    data: data,\n                    item: this.getById(data.Id),\n                };\n            });\n\n            removeDependency();\n\n            return promise;\n        });\n    }\n\n    /**\n     * Ensures we have the proper list item entity type name, either from the value provided or from the list\n     *\n     * @param candidatelistItemEntityTypeFullName The potential type name\n     */\n    private ensureListItemEntityTypeName(candidatelistItemEntityTypeFullName: string): Promise<string> {\n\n        return candidatelistItemEntityTypeFullName ?\n            Promise.resolve(candidatelistItemEntityTypeFullName) :\n            this.getParent(List).getListItemEntityTypeFullName();\n    }\n}\n\n/**\n * Descrines a single Item instance\n *\n */\nexport class Item extends SharePointQueryableShareableItem {\n\n    /**\n     * Delete this item\n     *\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     */\n    public delete = this._deleteWithETag;\n\n    /**\n     * Gets the set of attachments for this item\n     *\n     */\n    public get attachmentFiles(): AttachmentFiles {\n        return new AttachmentFiles(this);\n    }\n\n    /**\n     * Gets the content type for this item\n     *\n     */\n    public get contentType(): ContentType {\n        return new ContentType(this, \"ContentType\");\n    }\n\n    /**\n     * Gets the collection of comments associated with this list item\n     */\n    public get comments(): Comments {\n        return new Comments(this);\n    }\n\n    /**\n     * Gets the effective base permissions for the item\n     *\n     */\n    public get effectiveBasePermissions(): SharePointQueryable {\n        return new SharePointQueryable(this, \"EffectiveBasePermissions\");\n    }\n\n    /**\n     * Gets the effective base permissions for the item in a UI context\n     *\n     */\n    public get effectiveBasePermissionsForUI(): SharePointQueryable {\n        return new SharePointQueryable(this, \"EffectiveBasePermissionsForUI\");\n    }\n\n    /**\n     * Gets the field values for this list item in their HTML representation\n     *\n     */\n    public get fieldValuesAsHTML(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FieldValuesAsHTML\");\n    }\n\n    /**\n     * Gets the field values for this list item in their text representation\n     *\n     */\n    public get fieldValuesAsText(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FieldValuesAsText\");\n    }\n\n    /**\n     * Gets the field values for this list item for use in editing controls\n     *\n     */\n    public get fieldValuesForEdit(): SharePointQueryableInstance {\n        return new SharePointQueryableInstance(this, \"FieldValuesForEdit\");\n    }\n\n    /**\n     * Gets the folder associated with this list item (if this item represents a folder)\n     *\n     */\n    public get folder(): Folder {\n        return new Folder(this, \"folder\");\n    }\n\n    /**\n     * Gets the folder associated with this list item (if this item represents a folder)\n     *\n     */\n    public get file(): File {\n        return new File(this, \"file\");\n    }\n\n    /**\n     * Gets the collection of versions associated with this item\n     */\n    public get versions(): ItemVersions {\n        return new ItemVersions(this);\n    }\n\n    public get list(): List {\n        return this.getParent(List, this.parentUrl.substr(0, this.parentUrl.lastIndexOf(\"/\")));\n    }\n\n    /**\n     * Updates this list intance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the list\n     * @param eTag Value used in the IF-Match header, by default \"*\"\n     * @param listItemEntityTypeFullName The type name of the list's entities\n     */\n    public update(properties: TypedHash<any>, eTag = \"*\", listItemEntityTypeFullName: string = null): Promise<ItemUpdateResult> {\n\n        return new Promise<ItemUpdateResult>((resolve, reject) => {\n\n            const removeDependency = this.addBatchDependency();\n\n            return this.ensureListItemEntityTypeName(listItemEntityTypeFullName).then(listItemEntityType => {\n\n                const postBody = jsS(extend(metadata(listItemEntityType), properties));\n\n                removeDependency();\n\n                return this.postCore({\n                    body: postBody,\n                    headers: {\n                        \"IF-Match\": eTag,\n                        \"X-HTTP-Method\": \"MERGE\",\n                    },\n                }, new ItemUpdatedParser()).then((data) => {\n                    resolve({\n                        data: data,\n                        item: this,\n                    });\n                });\n            }).catch(e => reject(e));\n        });\n    }\n\n    /**\n     * Gets the collection of people who have liked this item\n     */\n    public getLikedBy(): Promise<LikeData[]> {\n        return this.clone(Item, \"likedBy\").postCore<LikeData[]>();\n    }\n\n    /**\n     * Likes this item as the current user\n     */\n    public like(): Promise<void> {\n        return this.clone(Item, \"like\").postCore<void>();\n    }\n\n    /**\n     * Unlikes this item as the current user\n     */\n    public unlike(): Promise<void> {\n        return this.clone(Item, \"unlike\").postCore<void>();\n    }\n\n    /**\n     * Moves the list item to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n     */\n    public recycle(): Promise<string> {\n        return this.clone(Item, \"recycle\").postCore();\n    }\n\n    /**\n     * Gets a string representation of the full URL to the WOPI frame.\n     * If there is no associated WOPI application, or no associated action, an empty string is returned.\n     *\n     * @param action Display mode: 0: view, 1: edit, 2: mobileView, 3: interactivePreview\n     */\n    public getWopiFrameUrl(action = 0): Promise<string> {\n        const i = this.clone(Item, \"getWOPIFrameUrl(@action)\");\n        i.query.set(\"@action\", <any>action);\n        return i.postCore().then((data: any) => {\n\n            // handle verbose mode\n            if (hOP(data, \"GetWOPIFrameUrl\")) {\n                return data.GetWOPIFrameUrl;\n            }\n\n            return data;\n        });\n    }\n\n    /**\n     * Validates and sets the values of the specified collection of fields for the list item.\n     *\n     * @param formValues The fields to change and their new values.\n     * @param newDocumentUpdate true if the list item is a document being updated after upload; otherwise false.\n     */\n    public validateUpdateListItem(formValues: ListItemFormUpdateValue[], newDocumentUpdate = false): Promise<ListItemFormUpdateValue[]> {\n        return this.clone(Item, \"validateupdatelistitem\").postCore({\n            body: jsS({ \"formValues\": formValues, bNewDocumentUpdate: newDocumentUpdate }),\n        });\n    }\n\n    /**\n     * Get the like by information for a modern site page     \n     */\n    public getLikedByInformation(): Promise<void> {\n        return this.clone(Item, \"likedByInformation\").expand(\"likedby\").getCore<void>();\n    }\n\n    /**\n     * Ensures we have the proper list item entity type name, either from the value provided or from the list\n     *\n     * @param candidatelistItemEntityTypeFullName The potential type name\n     */\n    private ensureListItemEntityTypeName(candidatelistItemEntityTypeFullName: string): Promise<string> {\n\n        return candidatelistItemEntityTypeFullName ?\n            Promise.resolve(candidatelistItemEntityTypeFullName) :\n            this.list.getListItemEntityTypeFullName();\n    }\n}\n\nexport interface ItemAddResult {\n    item: Item;\n    data: any;\n}\n\nexport interface ItemUpdateResult {\n    item: Item;\n    data: ItemUpdateResultData;\n}\n\nexport interface ItemUpdateResultData {\n    \"odata.etag\": string;\n}\n\n/**\n * Describes a collection of Version objects\n *\n */\n@defaultPath(\"versions\")\nexport class ItemVersions extends SharePointQueryableCollection {\n    /**\t\n     * Gets a version by id\t\n     *\t\n     * @param versionId The id of the version to retrieve\t\n     */\n    public getById(versionId: number): ItemVersion {\n        const v = new ItemVersion(this);\n        v.concat(`(${versionId})`);\n        return v;\n    }\n}\n\n/**\n * Describes a single Version instance\n *\n */\nexport class ItemVersion extends SharePointQueryableInstance {\n\n    /**\n    * Delete a specific version of a file.\n    *\n    * @param eTag Value used in the IF-Match header, by default \"*\"\n    */\n    public delete = this._deleteWithETag;\n}\n\n/**\n * Provides paging functionality for list items\n */\nexport class PagedItemCollection<T> {\n\n    constructor(private parent: Items, private nextUrl: string, public results: T) { }\n\n    /**\n     * If true there are more results available in the set, otherwise there are not\n     */\n    public get hasNext(): boolean {\n        return typeof this.nextUrl === \"string\" && this.nextUrl.length > 0;\n    }\n\n    /**\n     * Gets the next set of results, or resolves to null if no results are available\n     */\n    public getNext(): Promise<PagedItemCollection<T>> {\n\n        if (this.hasNext) {\n            const items = new Items(this.nextUrl, null).configureFrom(this.parent);\n            return items.getPaged<T>();\n        }\n\n        return new Promise<any>(r => r(null));\n    }\n}\n\nclass PagedItemCollectionParser<T> extends ODataParserBase<PagedItemCollection<T>> {\n\n    constructor(private _parent: Items) {\n        super();\n    }\n\n    public parse(r: Response): Promise<PagedItemCollection<T>> {\n\n        return new Promise<PagedItemCollection<T>>((resolve, reject) => {\n\n            if (this.handleError(r, reject)) {\n                r.json().then(json => {\n                    const nextUrl = hOP(json, \"d\") && hOP(json.d, \"__next\") ? json.d.__next : json[\"odata.nextLink\"];\n                    resolve(new PagedItemCollection(this._parent, nextUrl, this.parseODataJSON(json)));\n                });\n            }\n        });\n    }\n}\n\nclass ItemUpdatedParser extends ODataParserBase<ItemUpdateResultData> {\n    public async parse(r: Response): Promise<ItemUpdateResultData> {\n\n        return new Promise<ItemUpdateResultData>((resolve, reject) => {\n\n            if (this.handleError(r, reject)) {\n                resolve({\n                    \"odata.etag\": r.headers.get(\"etag\"),\n                });\n            }\n        });\n    }\n}\n","import { File } from \"./files\";\nimport { Item, ItemUpdateResult } from \"./items\";\nimport { TypedHash, extend, getGUID, jsS, hOP, stringIsNullOrEmpty, objectDefinedNotNull, combine } from \"@pnp/common\";\nimport { SharePointQueryable } from \"./sharepointqueryable\";\nimport { metadata } from \"./utils/metadata\";\nimport { List } from \"./lists\";\nimport { odataUrlFrom } from \"./odata\";\nimport { Web } from \"./webs\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\nimport { Site } from \"./site\";\n\n/**\n * Page promotion state\n */\nexport const enum PromotedState {\n    /**\n     * Regular client side page\n     */\n    NotPromoted = 0,\n    /**\n     * Page that will be promoted as news article after publishing\n     */\n    PromoteOnPublish = 1,\n    /**\n     * Page that is promoted as news article\n     */\n    Promoted = 2,\n}\n\n/**\n * Type describing the available page layout types for client side \"modern\" pages\n */\nexport type ClientSidePageLayoutType = \"Article\" | \"Home\" | \"SingleWebPartAppPage\" | \"RepostPage\";\n\n/**\n * Column size factor. Max value is 12 (= one column), other options are 8,6,4 or 0\n */\nexport type CanvasColumnFactor = 0 | 2 | 4 | 6 | 8 | 12;\n\n/**\n * Gets the next order value 1 based for the provided collection\n * \n * @param collection Collection of orderable things\n */\nfunction getNextOrder(collection: { order: number }[]): number {\n\n    if (collection.length < 1) {\n        return 1;\n    }\n\n    return Math.max.apply(null, collection.map(i => i.order)) + 1;\n}\n\n/**\n * Normalizes the order value for all the sections, columns, and controls to be 1 based and stepped (1, 2, 3...)\n * \n * @param collection The collection to normalize\n */\nfunction reindex(collection: { order: number, columns?: { order: number }[], controls?: { order: number }[] }[]): void {\n\n    for (let i = 0; i < collection.length; i++) {\n        collection[i].order = i + 1;\n        if (hOP(collection[i], \"columns\")) {\n            reindex(collection[i].columns);\n        } else if (hOP(collection[i], \"controls\")) {\n            reindex(collection[i].controls);\n        }\n    }\n}\n\n/**\n * Represents the data and methods associated with client side \"modern\" pages\n */\nexport class ClientSidePage extends SharePointQueryable {\n\n    private _pageSettings: IClientSidePageSettingsSlice;\n    private _layoutPart: ILayoutPartsContent;\n    private _bannerImageDirty: boolean;\n\n    /**\n     * PLEASE DON'T USE THIS CONSTRUCTOR DIRECTLY\n     * \n     */\n    constructor(\n        baseUrl: string | SharePointQueryable,\n        path?: string,\n        private json?: Partial<IPageData>,\n        noInit = false,\n        public sections: CanvasSection[] = [],\n        public commentsDisabled = false) {\n\n        super(baseUrl, path);\n\n        this._bannerImageDirty = false;\n\n        // ensure we have a good url to build on for the pages api\n        if (typeof baseUrl === \"string\") {\n            this._parentUrl = \"\";\n            this._url = combine(extractWebUrl(baseUrl), path);\n        } else {\n            this.extend(ClientSidePage.initFrom(baseUrl, null), path);\n        }\n\n        // set a default page settings slice\n        this._pageSettings = { controlType: 0, pageSettingsSlice: { isDefaultDescription: true, isDefaultThumbnail: true } };\n\n        // set a default layout part\n        this._layoutPart = ClientSidePage.getDefaultLayoutPart();\n\n        if (typeof json !== \"undefined\" && !noInit) {\n            this.fromJSON(json);\n        }\n    }\n\n    /**\n     * Creates a new blank page within the supplied library [does not work with batching]\n     * \n     * @param web Parent web in which we will create the page (we allow list here too matching the old api)\n     * @param pageName Filename of the page, such as \"page\"\n     * @param title The display title of the page\n     * @param pageLayoutType Layout type of the page to use\n     */\n    public static async create(web: Web | List, pageName: string, title: string, pageLayoutType: ClientSidePageLayoutType = \"Article\"): Promise<ClientSidePage> {\n\n        // patched because previously we used the full page name with the .aspx at the end\n        // this allows folk's existing code to work after the re-write to the new API\n        pageName = pageName.replace(/\\.aspx$/i, \"\");\n\n        // this is the user data we will use to init the author field\n        // const currentUserLogin = await ClientSidePage.getPoster(\"/_api/web/currentuser\").select(\"UserPrincipalName\").get<{ UserPrincipalName: string }>();\n\n        // initialize the page, at this point a checked-out page with a junk filename will be created.\n        const pageInitData = await ClientSidePage.initFrom(web, \"_api/sitepages/pages\").postCore<IPageData>({\n            body: jsS(Object.assign(metadata(\"SP.Publishing.SitePage\"), {\n                PageLayoutType: pageLayoutType,\n            })),\n        });\n\n        // now we can init our page with the save data\n        const newPage = new ClientSidePage(web, \"\", pageInitData);\n        // newPage.authors = [currentUserLogin.UserPrincipalName];\n        newPage.title = pageName;\n        await newPage.save(false);\n        newPage.title = title;\n        return newPage;\n    }\n\n    /**\n     * Creates a new ClientSidePage instance from the provided html content string\n     * \n     * @param html HTML markup representing the page\n     */\n    public static fromFile(file: File): Promise<ClientSidePage> {\n\n        return file.getItem<{ Id: number }>().then(i => {\n            const page = new ClientSidePage(extractWebUrl(file.toUrl()), \"\", { Id: i.Id }, true);\n            return page.configureFrom(file).load();\n        });\n    }\n\n    private static getDefaultLayoutPart(): ILayoutPartsContent {\n        return {\n            dataVersion: \"1.4\",\n            description: \"Title Region Description\",\n            id: \"cbe7b0a9-3504-44dd-a3a3-0e5cacd07788\",\n            instanceId: \"cbe7b0a9-3504-44dd-a3a3-0e5cacd07788\",\n            properties: {\n                authors: [],\n                layoutType: \"FullWidthImage\",\n                showPublishDate: false,\n                showTopicHeader: false,\n                textAlignment: \"Left\",\n                title: \"\",\n                topicHeader: \"\",\n            },\n            serverProcessedContent: { htmlStrings: {}, searchablePlainTexts: {}, imageSources: {}, links: {} },\n            title: \"Title area\",\n        };\n    }\n\n    private static initFrom(o: SharePointQueryable, url: string): ClientSidePage {\n        return (new ClientSidePage(extractWebUrl(o.toUrl()), url)).configureFrom(o);\n    }\n\n    public get pageLayout(): ClientSidePageLayoutType {\n        return this.json.PageLayoutType;\n    }\n\n    public set pageLayout(value: ClientSidePageLayoutType) {\n        this.json.PageLayoutType = value;\n    }\n\n    public get bannerImageUrl(): string {\n        return this.json.BannerImageUrl;\n    }\n\n    public set bannerImageUrl(value: string) {\n        this.json.BannerImageUrl = value;\n        this._bannerImageDirty = true;\n    }\n\n    public get bannerImageSourceType(): number {\n        return this._layoutPart.properties.imageSourceType;\n    }\n\n    public set bannerImageSourceType(value: number) {\n        this._layoutPart.properties.imageSourceType = value;\n    }\n\n    public get topicHeader(): string {\n        return objectDefinedNotNull(this.json.TopicHeader) ? this.json.TopicHeader : \"\";\n    }\n\n    public set topicHeader(value: string) {\n        this.json.TopicHeader = value;\n        this._layoutPart.properties.topicHeader = value;\n        if (stringIsNullOrEmpty(value)) {\n            this.showTopicHeader = false;\n        }\n    }\n\n    // public get authors(): string[] {\n    //     return this._layoutPart.properties.authorByline;\n    // }\n\n    // public set authors(value: string[]) {\n    //     this.json.AuthorByline = value;\n    //     this._layoutPart.properties.authorByline = value;\n    //     this._layoutPart.properties.authors = null;\n    // }\n\n    public get title(): string {\n        return this._layoutPart.properties.title;\n    }\n\n    public set title(value: string) {\n        this.json.Title = value;\n        this._layoutPart.properties.title = value;\n    }\n\n    public get layoutType(): LayoutType {\n        return this._layoutPart.properties.layoutType;\n    }\n\n    public set layoutType(value: LayoutType) {\n        this._layoutPart.properties.layoutType = value;\n    }\n\n    public get headerTextAlignment(): TextAlignment {\n        return this._layoutPart.properties.textAlignment;\n    }\n\n    public set headerTextAlignment(value: TextAlignment) {\n        this._layoutPart.properties.textAlignment = value;\n    }\n\n    public get showTopicHeader(): boolean {\n        return this._layoutPart.properties.showTopicHeader;\n    }\n\n    public set showTopicHeader(value: boolean) {\n        this._layoutPart.properties.showTopicHeader = value;\n    }\n\n    public get showPublishDate(): boolean {\n        return this._layoutPart.properties.showPublishDate;\n    }\n\n    public set showPublishDate(value: boolean) {\n        this._layoutPart.properties.showPublishDate = value;\n    }\n\n    /**\n     * Add a section to this page\n     */\n    public addSection(): CanvasSection {\n        const section = new CanvasSection(this, getNextOrder(this.sections));\n        this.sections.push(section);\n        return section;\n    }\n\n    public fromJSON(pageData: Partial<IPageData>): this {\n\n        this.json = pageData;\n\n        const canvasControls: IClientSideControlBaseData[] = JSON.parse(pageData.CanvasContent1);\n\n        const layouts = <ILayoutPartsContent[]>JSON.parse(pageData.LayoutWebpartsContent);\n        if (layouts && layouts.length > 0) {\n            this._layoutPart = layouts[0];\n        }\n\n        this.setControls(canvasControls);\n\n        return this;\n    }\n\n    /**\n     * Loads this page's content from the server\n     */\n    public load(): Promise<ClientSidePage> {\n\n        // load item id, then load page data from new pages api\n        return this.getItem<{ Id: number, CommentsDisabled: boolean }>(\"Id\", \"CommentsDisabled\").then(item => {\n            return (new SharePointQueryable(this, `_api/sitepages/pages(${item.Id})`)).get<IPageData>().then(pageData => {\n                this.commentsDisabled = item.CommentsDisabled;\n                return this.fromJSON(pageData);\n            });\n        });\n    }\n\n    /**\n     * Persists the content changes (sections, columns, and controls) [does not work with batching]\n     * \n     * @param publish If true the page is published, if false the changes are persisted to SharePoint but not published\n     */\n    public save(publish = true): Promise<boolean> {\n\n        if (this.json.Id === null) {\n            throw Error(\"The id for this page is null. If you want to create a new page, please use ClientSidePage.Create\");\n        }\n\n        // we will chain our work on this promise\n        let promise = Promise.resolve<any>({});\n\n        if (this._bannerImageDirty) {\n\n            // we have to do these gymnastics to set the banner image url\n            promise = promise.then(_ => new Promise((resolve, reject) => {\n\n                const origImgUrl = this.json.BannerImageUrl;\n                const site = new Site(extractWebUrl(this.toUrl()));\n                const web = new Web(extractWebUrl(this.toUrl()));\n                const imgFile = web.getFileByServerRelativePath(origImgUrl);\n\n                let siteId = \"\";\n                let webId = \"\";\n                let imgId = \"\";\n                let listId = \"\";\n                let webUrl = \"\";\n\n                Promise.all([\n                    site.select(\"Id\", \"Url\").get().then(r => siteId = r.Id),\n                    web.select(\"Id\", \"Url\").get().then(r => { webId = r.Id; webUrl = r.Url; }),\n                    imgFile.listItemAllFields.select(\"UniqueId\", \"ParentList/Id\").expand(\"ParentList\").get().then(r => { imgId = r.UniqueId; listId = r.ParentList.Id; }),\n                ]).then(() => {\n\n                    const f = new SharePointQueryable(webUrl, \"_layouts/15/getpreview.ashx\");\n                    f.query.set(\"guidSite\", `${siteId}`);\n                    f.query.set(\"guidWeb\", `${webId}`);\n                    f.query.set(\"guidFile\", `${imgId}`);\n                    this.bannerImageUrl = f.toUrlAndQuery();\n\n                    if (!objectDefinedNotNull(this._layoutPart.serverProcessedContent)) {\n                        this._layoutPart.serverProcessedContent = <any>{};\n                    }\n\n                    this._layoutPart.serverProcessedContent.imageSources = { imageSource: origImgUrl };\n\n                    if (!objectDefinedNotNull(this._layoutPart.serverProcessedContent.customMetadata)) {\n                        this._layoutPart.serverProcessedContent.customMetadata = <any>{};\n                    }\n\n                    this._layoutPart.serverProcessedContent.customMetadata.imageSource = {\n                        listId,\n                        siteId,\n                        uniqueId: imgId,\n                        webId,\n                    };\n                    this._layoutPart.properties.webId = webId;\n                    this._layoutPart.properties.siteId = siteId;\n                    this._layoutPart.properties.listId = listId;\n                    this._layoutPart.properties.uniqueId = imgId;\n                    resolve();\n                }).catch(reject);\n            }));\n        }\n\n        // we need to update our authors if they have changed\n        // if (this._layoutPart.properties.authors === null && this._layoutPart.properties.authorByline.length > 0) {\n\n        //     promise = promise.then(_ => new Promise(resolve => {\n\n        //         const collector: any[] = [];\n        //         const userResolver = ClientSidePage.getPoster(\"/_api/SP.UI.ApplicationPages.ClientPeoplePickerWebServiceInterface.ClientPeoplePickerResolveUser\");\n\n        //         this._layoutPart.properties.authorByline.forEach(async author => {\n        //             const userData = await userResolver.postCore({\n        //                 body: jsS({\n        //                     queryParams: {\n        //                         AllowEmailAddresses: false,\n        //                         MaximumEntitySuggestions: 1,\n        //                         PrincipalSource: 15,\n        //                         PrincipalType: 1,\n        //                         QueryString: author,\n        //                         SharePointGroupID: 0,\n        //                     },\n        //                 }),\n        //             });\n\n        //             collector.push({\n        //                 email: userData.EntityData.Email,\n        //                 id: userData.Key,\n        //                 name: userData.DisplayName,\n        //                 role: \"\",\n        //                 upn: userData.EntityData.Email,\n        //             });\n        //         });\n\n        //         this._layoutPart.properties.authors = collector;\n\n        //         resolve();\n        //     }));\n        // }\n\n        // we try and check out the page for the user\n        if (!this.json.IsPageCheckedOutToCurrentUser) {\n            promise = promise.then(_ => (ClientSidePage.initFrom(this, `_api/sitepages/pages(${this.json.Id})/checkoutpage`)).postCore<IPageData>());\n        }\n\n        promise = promise.then(_ => {\n\n            const saveBody = Object.assign(metadata(\"SP.Publishing.SitePage\"), {\n                AuthorByline: this.json.AuthorByline || [],\n                BannerImageUrl: this.bannerImageUrl,\n                CanvasContent1: this.getCanvasContent1(),\n                LayoutWebpartsContent: this.getLayoutWebpartsContent(),\n                Title: this.title,\n                TopicHeader: this.topicHeader,\n            });\n\n            const updater = ClientSidePage.initFrom(this, `_api/sitepages/pages(${this.json.Id})/savepage`);\n            updater.configure({\n                headers: {\n                    \"if-match\": \"*\",\n                },\n            });\n            return updater.postCore<boolean>({ body: jsS(saveBody) });\n        });\n\n        if (publish) {\n            promise = promise.then(_ => (ClientSidePage.initFrom(this, `_api/sitepages/pages(${this.json.Id})/publish`)).postCore<boolean>()).then(r => {\n                if (r) {\n                    this.json.IsPageCheckedOutToCurrentUser = false;\n                }\n            });\n        }\n\n        promise = promise.then(_ => {\n            // these are post-save actions\n            this._bannerImageDirty = false;\n        });\n\n        return promise;\n    }\n\n    public discardPageCheckout(): Promise<void> {\n\n        if (this.json.Id === null) {\n            throw Error(\"The id for this page is null. If you want to create a new page, please use ClientSidePage.Create\");\n        }\n\n        return ClientSidePage.initFrom(this, `_api/sitepages/pages(${this.json.Id})/discardPage`).postCore<IPageData>({\n            body: jsS(metadata(\"SP.Publishing.SitePage\")),\n        }).then(d => {\n            this.fromJSON(d);\n        });\n    }\n\n    /**\n     * Enables comments on this page\n     */\n    public enableComments(): Promise<ItemUpdateResult> {\n        return this.setCommentsOn(true).then(r => {\n            this.commentsDisabled = false;\n            return r;\n        });\n    }\n\n    /**\n     * Disables comments on this page\n     */\n    public disableComments(): Promise<ItemUpdateResult> {\n        return this.setCommentsOn(false).then(r => {\n            this.commentsDisabled = true;\n            return r;\n        });\n    }\n\n    /**\n     * Finds a control by the specified instance id\n     *\n     * @param id Instance id of the control to find\n     */\n    public findControlById<T extends ColumnControl<any> = ColumnControl<any>>(id: string): T {\n        return this.findControl((c) => c.id === id);\n    }\n\n    /**\n     * Finds a control within this page's control tree using the supplied predicate\n     *\n     * @param predicate Takes a control and returns true or false, if true that control is returned by findControl\n     */\n    public findControl<T extends ColumnControl<any> = ColumnControl<any>>(predicate: (c: ColumnControl<any>) => boolean): T {\n        // check all sections\n        for (let i = 0; i < this.sections.length; i++) {\n            // check all columns\n            for (let j = 0; j < this.sections[i].columns.length; j++) {\n                // check all controls\n                for (let k = 0; k < this.sections[i].columns[j].controls.length; k++) {\n                    // check to see if the predicate likes this control\n                    if (predicate(this.sections[i].columns[j].controls[k])) {\n                        return <T>this.sections[i].columns[j].controls[k];\n                    }\n                }\n            }\n        }\n\n        // we found nothing so give nothing back\n        return null;\n    }\n\n    /**\n     * Like the modern site page\n     */\n    public like(): Promise<void> {\n        return this.getItem().then(i => {\n            return i.like();\n        });\n    }\n\n    /**\n     * Unlike the modern site page\n     */\n    public unlike(): Promise<void> {\n        return this.getItem().then(i => {\n            return i.unlike();\n        });\n    }\n\n    /**\n     * Get the liked by information for a modern site page     \n     */\n    public getLikedByInformation(): Promise<any> {\n        return this.getItem().then(i => {\n            return i.getLikedByInformation();\n        });\n    }\n\n    /**\n     * Creates a copy of this page\n     * \n     * @param web The web where we will create the copy\n     * @param pageName The file name of the new page\n     * @param title The title of the new page\n     * @param publish If true the page will be published\n     */\n    public async copyPage(web: Web | List, pageName: string, title: string, publish = true): Promise<ClientSidePage> {\n\n        const page = await ClientSidePage.create(web, pageName, title, this.pageLayout);\n\n        page.setControls(this.getControls());\n\n        await page.save(publish);\n\n        return page;\n    }\n\n    /**\n     * Sets the modern page banner image\n     * \n     * @param url Url of the image to display\n     * @param altText Alt text to describe the image\n     * @param bannerProps Additional properties to control display of the banner\n     */\n    public setBannerImage(url: string, props?: {\n        altText?: string;\n        imageSourceType?: number;\n        translateX?: number;\n        translateY?: number;\n    }): void {\n\n        this.bannerImageUrl = url;\n        this.bannerImageSourceType = 2; // this seems to always be true, so default?\n\n        if (objectDefinedNotNull(props)) {\n            if (hOP(props, \"translateX\")) {\n                this._layoutPart.properties.translateX = props.translateX;\n            }\n            if (hOP(props, \"translateY\")) {\n                this._layoutPart.properties.translateY = props.translateY;\n            }\n            if (hOP(props, \"imageSourceType\")) {\n                this.bannerImageSourceType = props.imageSourceType;\n            }\n            if (hOP(props, \"altText\")) {\n                this._layoutPart.properties.altText = props.altText;\n            }\n        }\n    }\n\n    protected getCanvasContent1(): string {\n        return JSON.stringify(this.getControls());\n    }\n\n    protected getLayoutWebpartsContent(): string {\n        if (this._layoutPart) {\n            return JSON.stringify([this._layoutPart]);\n        } else {\n            return JSON.stringify(null);\n        }\n    }\n\n    protected setControls(controls: IClientSideControlBaseData[]): void {\n\n        if (controls && controls.length) {\n\n            for (let i = 0; i < controls.length; i++) {\n\n                // if no control type is present this is a column which we give type 0 to let us process it\n                const controlType = hOP(controls[i], \"controlType\") ? controls[i].controlType : 0;\n\n                switch (controlType) {\n\n                    case 0:\n                        // empty canvas column or page settings\n                        if (hOP(controls[i], \"pageSettingsSlice\")) {\n                            this._pageSettings = <IClientSidePageSettingsSlice>controls[i];\n                        } else {\n                            // we have an empty column\n                            this.mergeColumnToTree(new CanvasColumn(<IClientSidePageColumnData>controls[i]));\n                        }\n                        break;\n                    case 3:\n                        const part = new ClientSideWebpart(<IClientSideWebPartData>controls[i]);\n                        this.mergePartToTree(part, part.data.position);\n                        break;\n                    case 4:\n                        const textData = <IClientSideTextData>controls[i];\n                        const text = new ClientSideText(textData.innerHTML, textData);\n                        this.mergePartToTree(text, text.data.position);\n                        break;\n                }\n            }\n\n            reindex(this.sections);\n        }\n    }\n\n    protected getControls(): IClientSideControlBaseData[] {\n\n        // reindex things\n        reindex(this.sections);\n\n        // rollup the control changes\n        const canvasData: any[] = [];\n\n        this.sections.forEach(section => {\n            section.columns.forEach(column => {\n                if (column.controls.length < 1) {\n                    // empty column\n                    canvasData.push({\n                        displayMode: column.data.displayMode,\n                        emphasis: this.getEmphasisObj(section.emphasis),\n                        position: column.data.position,\n                    });\n                } else {\n                    column.controls.forEach(control => {\n                        control.data.emphasis = this.getEmphasisObj(section.emphasis);\n                        canvasData.push(control.data);\n                    });\n                }\n            });\n        });\n\n        canvasData.push(this._pageSettings);\n\n        return canvasData;\n    }\n\n    private getEmphasisObj(value: 0 | 1 | 2 | 3): IClientControlEmphasis {\n        if (value < 1 || value > 3) {\n            return {};\n        }\n\n        return { zoneEmphasis: value };\n    }\n\n    /**\n     * Sets the comments flag for a page\n     * \n     * @param on If true comments are enabled, false they are disabled\n     */\n    private setCommentsOn(on: boolean): Promise<ItemUpdateResult> {\n        return this.getItem().then(i => {\n            const updater = new Item(i, `SetCommentsDisabled(${!on})`);\n            return updater.update({});\n        });\n    }\n\n    /**\n     * Merges the control into the tree of sections and columns for this page\n     * \n     * @param control The control to merge\n     */\n    private mergePartToTree(control: any, positionData: IClientSideControlPositionData): void {\n\n        let section: CanvasSection = null;\n        let column: CanvasColumn = null;\n        let sectionFactor: CanvasColumnFactor = 12;\n        let sectionIndex = 0;\n        let zoneIndex = 0;\n\n        // handle case where we don't have position data (shouldn't happen?)\n        if (positionData) {\n            if (hOP(positionData, \"zoneIndex\")) {\n                zoneIndex = positionData.zoneIndex;\n            }\n            if (hOP(positionData, \"sectionIndex\")) {\n                sectionIndex = positionData.sectionIndex;\n            }\n            if (hOP(positionData, \"sectionFactor\")) {\n                sectionFactor = positionData.sectionFactor;\n            }\n        }\n\n        const sections = this.sections.filter(s => s.order === zoneIndex);\n        if (sections.length < 1) {\n            section = new CanvasSection(this, zoneIndex);\n            this.sections.push(section);\n        } else {\n            section = sections[0];\n        }\n\n        section.emphasis = control.data.emphasis.zoneEmphasis || 0;\n\n        const columns = section.columns.filter(c => c.order === sectionIndex);\n        if (columns.length < 1) {\n            column = section.addColumn(sectionFactor);\n        } else {\n            column = columns[0];\n        }\n\n        control.column = column;\n        column.addControl(control);\n    }\n\n    /**\n     * Merges the supplied column into the tree\n     * \n     * @param column Column to merge\n     * @param position The position data for the column\n     */\n    private mergeColumnToTree(column: CanvasColumn): void {\n\n        const order = hOP(column.data, \"position\") && hOP(column.data.position, \"zoneIndex\") ? column.data.position.zoneIndex : 0;\n        let section: CanvasSection = null;\n        const sections = this.sections.filter(s => s.order === order);\n\n        if (sections.length < 1) {\n            section = new CanvasSection(this, order);\n            section.emphasis = column.data.emphasis.zoneEmphasis || 0;\n            this.sections.push(section);\n        } else {\n            section = sections[0];\n        }\n\n        column.section = section;\n        section.columns.push(column);\n    }\n\n    private getItem<T>(...selects: string[]): Promise<Item & T> {\n\n        const initer = ClientSidePage.initFrom(this, \"/_api/lists/EnsureClientRenderedSitePagesLibrary\").select(\"EnableModeration\", \"EnableMinorVersions\", \"Id\");\n        return initer.postCore<{ Id: string, \"odata.id\": string }>().then(listData => {\n            const item = (new List(listData[\"odata.id\"])).configureFrom(this).items.getById(this.json.Id);\n\n            return item.select.apply(item, selects).get().then((d: T) => {\n                return extend((new Item(odataUrlFrom(d))).configureFrom(this), d);\n            });\n        });\n    }\n}\n\nexport class CanvasSection {\n\n    /**\n     * Used to track this object inside the collection at runtime\n     */\n    private _memId: string;\n\n    private _order: number;\n\n    constructor(protected page: ClientSidePage, order: number, public columns: CanvasColumn[] = [], private _emphasis: 0 | 1 | 2 | 3 = 0) {\n        this._memId = getGUID();\n        this._order = order;\n    }\n\n    public get order(): number {\n        return this._order;\n    }\n\n    public set order(value: number) {\n        this._order = value;\n        for (let i = 0; i < this.columns.length; i++) {\n            this.columns[i].data.position.zoneIndex = value;\n        }\n    }\n\n    /**\n     * Default column (this.columns[0]) for this section\n     */\n    public get defaultColumn(): CanvasColumn {\n\n        if (this.columns.length < 1) {\n            this.addColumn(12);\n        }\n\n        return this.columns[0];\n    }\n\n    /**\n     * Adds a new column to this section\n     */\n    public addColumn(factor: CanvasColumnFactor): CanvasColumn {\n        const column = new CanvasColumn();\n        column.section = this;\n        column.data.position.zoneIndex = this.order;\n        column.data.position.sectionFactor = factor;\n        column.order = getNextOrder(this.columns);\n        this.columns.push(column);\n        return column;\n    }\n\n    /**\n     * Adds a control to the default column for this section\n     *\n     * @param control Control to add to the default column\n     */\n    public addControl(control: ColumnControl<any>): this {\n        this.defaultColumn.addControl(control);\n        return this;\n    }\n\n    public get emphasis(): 0 | 1 | 2 | 3 {\n        return this._emphasis;\n    }\n\n    public set emphasis(value: 0 | 1 | 2 | 3) {\n        this._emphasis = value;\n    }\n\n    /**\n     * Removes this section and all contained columns and controls from the collection\n     */\n    public remove(): void {\n        this.page.sections = this.page.sections.filter(section => section._memId !== this._memId);\n        reindex(this.page.sections);\n    }\n}\n\nexport class CanvasColumn {\n\n    public static Default: IClientSidePageColumnData = {\n        controlType: 0,\n        displayMode: 2,\n        emphasis: {},\n        position: {\n            layoutIndex: 1,\n            sectionFactor: 12,\n            sectionIndex: 1,\n            zoneIndex: 1,\n        },\n    };\n\n    private _section: CanvasSection | null;\n    private _memId: string;\n\n    constructor(protected json: IClientSidePageColumnData = JSON.parse(JSON.stringify(CanvasColumn.Default)), public controls: ColumnControl<any>[] = []) {\n        this._section = null;\n        this._memId = getGUID();\n    }\n\n    public get data(): IClientSidePageColumnData {\n        return this.json;\n    }\n\n    public get section(): CanvasSection {\n        return this._section;\n    }\n\n    public set section(section: CanvasSection) {\n        this._section = section;\n    }\n\n    public get order(): number {\n        return this.data.position.sectionIndex;\n    }\n\n    public set order(value: number) {\n        this.data.position.sectionIndex = value;\n        for (let i = 0; i < this.controls.length; i++) {\n            this.controls[i].data.position.zoneIndex = this.data.position.zoneIndex;\n            this.controls[i].data.position.sectionIndex = value;\n        }\n    }\n\n    public get factor(): CanvasColumnFactor {\n        return this.data.position.sectionFactor;\n    }\n\n    public set factor(value: CanvasColumnFactor) {\n        this.data.position.sectionFactor = value;\n    }\n\n    public addControl(control: ColumnControl<any>): this {\n        control.column = this;\n        this.controls.push(control);\n        return this;\n    }\n\n    public getControl<T extends ColumnControl<any>>(index: number): T {\n        return <T>this.controls[index];\n    }\n\n    public remove(): void {\n        this.section.columns = this.section.columns.filter(column => column._memId !== this._memId);\n        reindex(this.section.columns);\n    }\n}\n\nexport abstract class ColumnControl<T extends ICanvasControlBaseData> {\n\n    private _column: CanvasColumn | null;\n\n    constructor(protected json: T) { }\n\n    public abstract get order(): number;\n    public abstract set order(value: number);\n\n    public get id(): string {\n        return this.json.id;\n    }\n\n    public get data(): T {\n        return this.json;\n    }\n\n    public get column(): CanvasColumn | null {\n        return this._column;\n    }\n\n    public set column(value: CanvasColumn) {\n        this._column = value;\n        this.onColumnChange(this._column);\n    }\n\n    public remove(): void {\n        this.column.controls = this.column.controls.filter(control => control.id !== this.id);\n        reindex(this.column.controls);\n    }\n\n    protected setData(data: T) {\n        this.json = data;\n    }\n\n    protected abstract onColumnChange(col: CanvasColumn): void;\n}\n\nexport class ClientSideText extends ColumnControl<IClientSideTextData> {\n\n    public static Default: IClientSideTextData = {\n        addedFromPersistedData: false,\n        anchorComponentId: \"\",\n        controlType: 4,\n        displayMode: 2,\n        editorType: \"CKEditor\",\n        emphasis: {},\n        id: \"\",\n        innerHTML: \"\",\n        position: {\n            controlIndex: 1,\n            layoutIndex: 1,\n            sectionFactor: 12,\n            sectionIndex: 1,\n            zoneIndex: 1,\n        },\n    };\n\n    constructor(text: string, json: IClientSideTextData = JSON.parse(JSON.stringify(ClientSideText.Default))) {\n        if (stringIsNullOrEmpty(json.id)) {\n            json.id = getGUID();\n            json.anchorComponentId = json.id;\n        }\n        super(json);\n\n        this.text = text;\n    }\n\n    public get text(): string {\n        return this.data.innerHTML;\n    }\n\n    public set text(value: string) {\n        if (!value.startsWith(\"<p>\")) {\n            value = `<p>${value}</p>`;\n        }\n        this.data.innerHTML = value;\n    }\n\n    public get order(): number {\n        return this.data.position.controlIndex;\n    }\n\n    public set order(value: number) {\n        this.data.position.controlIndex = value;\n    }\n\n    protected onColumnChange(col: CanvasColumn): void {\n        this.data.position.sectionFactor = col.factor;\n        this.data.position.controlIndex = getNextOrder(col.controls);\n        this.data.position.zoneIndex = col.data.position.zoneIndex;\n        this.data.position.sectionIndex = col.order;\n    }\n}\n\nexport class ClientSideWebpart extends ColumnControl<IClientSideWebPartData> {\n\n    public static Default: IClientSideWebPartData = {\n        addedFromPersistedData: false,\n        controlType: 3,\n        displayMode: 2,\n        emphasis: {},\n        id: null,\n        position: {\n            controlIndex: 1,\n            sectionFactor: 12,\n            sectionIndex: 1,\n            zoneIndex: 1,\n        },\n        reservedHeight: 500,\n        reservedWidth: 500,\n        webPartData: null,\n        webPartId: null,\n    };\n\n    constructor(json: IClientSideWebPartData = JSON.parse(JSON.stringify(ClientSideWebpart.Default))) {\n        super(json);\n    }\n\n    public static fromComponentDef(definition: ClientSidePageComponent): ClientSideWebpart {\n        const part = new ClientSideWebpart();\n        part.import(definition);\n        return part;\n    }\n\n    public get title(): string {\n        return this.data.webPartData.title;\n    }\n\n    public set title(value: string) {\n        this.data.webPartData.title = value;\n    }\n\n    public get description(): string {\n        return this.data.webPartData.description;\n    }\n\n    public set description(value: string) {\n        this.data.webPartData.description = value;\n    }\n\n    public get order(): number {\n        return this.data.position.controlIndex;\n    }\n\n    public set order(value: number) {\n        this.data.position.controlIndex = value;\n    }\n\n    public get height(): number {\n        return this.data.reservedHeight;\n    }\n\n    public set height(value: number) {\n        this.data.reservedHeight = value;\n    }\n\n    public get width(): number {\n        return this.data.reservedWidth;\n    }\n\n    public set width(value: number) {\n        this.data.reservedWidth = value;\n    }\n\n    public get dataVersion(): string {\n        return this.data.webPartData.dataVersion;\n    }\n\n    public set dataVersion(value: string) {\n        this.data.webPartData.dataVersion = value;\n    }\n\n    public setProperties<T = any>(properties: T): this {\n        this.data.webPartData.properties = extend(this.data.webPartData.properties, properties);\n        return this;\n    }\n\n    public getProperties<T = any>(): T {\n        return <T>this.data.webPartData.properties;\n    }\n\n    protected onColumnChange(col: CanvasColumn): void {\n        this.data.position.sectionFactor = col.factor;\n        this.data.position.controlIndex = getNextOrder(col.controls);\n        this.data.position.zoneIndex = col.data.position.zoneIndex;\n        this.data.position.sectionIndex = col.data.position.sectionIndex;\n    }\n\n    protected import(component: ClientSidePageComponent): void {\n\n        const id = getGUID();\n        const componendId = component.Id.replace(/^\\{|\\}$/g, \"\").toLowerCase();\n        const manifest: IClientSidePageComponentManifest = JSON.parse(component.Manifest);\n        const preconfiguredEntries = manifest.preconfiguredEntries[0];\n\n        this.setData(Object.assign({}, this.data, <IClientSideWebPartData>{\n            id,\n            webPartData: {\n                dataVersion: \"1.0\",\n                description: preconfiguredEntries.description.default,\n                id: componendId,\n                instanceId: id,\n                properties: preconfiguredEntries.properties,\n                title: preconfiguredEntries.title.default,\n            },\n            webPartId: componendId,\n        }));\n    }\n}\n\nexport interface IPageData {\n    readonly \"odata.metadata\": string;\n    readonly \"odata.type\": \"SP.Publishing.SitePage\";\n    readonly \"odata.id\": string;\n    readonly \"odata.editLink\": string;\n    AbsoluteUrl: string;\n    AuthorByline: string[] | null;\n    BannerImageUrl: string;\n    ContentTypeId: null | string;\n    Description: string;\n    DoesUserHaveEditPermission: boolean;\n    FileName: string;\n    readonly FirstPublished: string;\n    readonly Id: number;\n    IsPageCheckedOutToCurrentUser: boolean;\n    IsWebWelcomePage: boolean;\n    readonly Modified: string;\n    PageLayoutType: ClientSidePageLayoutType;\n    Path: {\n        DecodedUrl: string;\n    };\n    PromotedState: number;\n    Title: string;\n    TopicHeader: null | string;\n    readonly UniqueId: string;\n    Url: string;\n    readonly Version: string;\n    readonly VersionInfo: {\n        readonly LastVersionCreated: string;\n        readonly LastVersionCreatedBy: string;\n    };\n    AlternativeUrlMap: string;\n    CanvasContent1: string;\n    LayoutWebpartsContent: string;\n}\n\n/**\n * Client side webpart object (retrieved via the _api/web/GetClientSideWebParts REST call)\n */\nexport interface ClientSidePageComponent {\n    /**\n     * Component type for client side webpart object\n     */\n    ComponentType: number;\n    /**\n     * Id for client side webpart object\n     */\n    Id: string;\n    /**\n     * Manifest for client side webpart object\n     */\n    Manifest: string;\n    /**\n     * Manifest type for client side webpart object\n     */\n    ManifestType: number;\n    /**\n     * Name for client side webpart object\n     */\n    Name: string;\n    /**\n     * Status for client side webpart object\n     */\n    Status: number;\n}\n\ninterface IClientSidePageComponentManifest {\n    alias: string;\n    componentType: \"WebPart\" | \"\" | null;\n    disabledOnClassicSharepoint: boolean;\n    hiddenFromToolbox: boolean;\n    id: string;\n    imageLinkPropertyNames: any;\n    isInternal: boolean;\n    linkPropertyNames: boolean;\n    loaderConfig: any;\n    manifestVersion: number;\n    preconfiguredEntries: {\n        description: { default: string };\n        group: { default: string };\n        groupId: string;\n        iconImageUrl: string;\n        officeFabricIconFontName: string;\n        properties: TypedHash<any>;\n        title: { default: string };\n\n    }[];\n    preloadComponents: any | null;\n    requiredCapabilities: any | null;\n    searchablePropertyNames: any | null;\n    supportsFullBleed: boolean;\n    version: string;\n}\n\nexport interface IClientSideControlBaseData {\n    controlType: number;\n}\n\nexport interface ICanvasControlBaseData extends IClientSideControlBaseData {\n    id: string;\n    emphasis: IClientControlEmphasis;\n    displayMode: number;\n}\n\nexport interface IClientSidePageSettingsSlice extends IClientSideControlBaseData {\n    pageSettingsSlice: {\n        \"isDefaultDescription\": boolean;\n        \"isDefaultThumbnail\": boolean;\n    };\n}\n\nexport interface IClientSidePageColumnData extends IClientSideControlBaseData {\n    controlType: 0;\n    displayMode: number;\n    emphasis: IClientControlEmphasis;\n    position: {\n        zoneIndex: number;\n        sectionIndex: number;\n        sectionFactor: CanvasColumnFactor;\n        layoutIndex: number;\n    };\n}\n\ninterface IClientSideControlPositionData {\n    zoneIndex: number;\n    sectionIndex: number;\n    controlIndex: number;\n    sectionFactor?: CanvasColumnFactor;\n}\n\nexport interface IClientSideTextData extends ICanvasControlBaseData {\n    controlType: 4;\n    position: {\n        zoneIndex: number;\n        sectionIndex: number;\n        controlIndex: number;\n        sectionFactor?: CanvasColumnFactor;\n        layoutIndex: number;\n    };\n    anchorComponentId: string;\n    editorType: \"CKEditor\";\n    addedFromPersistedData: boolean;\n    innerHTML: string;\n}\n\nexport interface IClientSideWebPartData<PropertiesType = any> extends ICanvasControlBaseData {\n    controlType: 3;\n    position: {\n        zoneIndex: number;\n        sectionIndex: number;\n        controlIndex: number;\n        sectionFactor?: CanvasColumnFactor;\n    };\n    webPartId: string;\n    reservedHeight: number;\n    reservedWidth: number;\n    addedFromPersistedData: boolean;\n    webPartData: {\n        id: string;\n        instanceId: string;\n        title: string;\n        description: string;\n        serverProcessedContent?: {\n            \"htmlStrings\": TypedHash<string>;\n            \"searchablePlainTexts\": TypedHash<string>;\n            \"imageSources\": TypedHash<string>;\n            \"links\": TypedHash<string>;\n        };\n        dataVersion: string;\n        properties: PropertiesType;\n    };\n}\n\nexport interface IClientControlEmphasis {\n    zoneEmphasis?: 0 | 1 | 2 | 3;\n}\n\nexport module ClientSideWebpartPropertyTypes {\n\n    /**\n     * Propereties for Embed (component id: 490d7c76-1824-45b2-9de3-676421c997fa)\n     */\n    export interface Embed {\n        embedCode: string;\n        cachedEmbedCode?: string;\n        shouldScaleWidth?: boolean;\n        tempState?: any;\n    }\n\n    /**\n     * Properties for Bing Map (component id: e377ea37-9047-43b9-8cdb-a761be2f8e09)\n     */\n    export interface BingMap {\n        center: {\n            altitude?: number;\n            altitudeReference?: number;\n            latitude: number;\n            longitude: number;\n        };\n        mapType: \"aerial\" | \"birdseye\" | \"road\" | \"streetside\";\n        maxNumberOfPushPins?: number;\n        pushPins?: {\n            location: {\n                latitude: number;\n                longitude: number;\n                altitude?: number;\n                altitudeReference?: number;\n            };\n            address?: string;\n            defaultAddress?: string;\n            defaultTitle?: string;\n            title?: string;\n        }[];\n        shouldShowPushPinTitle?: boolean;\n        zoomLevel?: number;\n    }\n}\n\nexport type LayoutType = \"FullWidthImage\" | \"NoImage\" | \"ColorBlock\" | \"CutInShape\";\nexport type TextAlignment = \"Left\" | \"Center\";\n\ninterface ILayoutPartsContent {\n    id: string;\n    instanceId: string;\n    title: string;\n    description: string;\n    serverProcessedContent: {\n        htmlStrings: TypedHash<string>;\n        searchablePlainTexts: TypedHash<string>;\n        imageSources: TypedHash<string>;\n        links: TypedHash<string>;\n        customMetadata?: {\n            imageSource?: {\n                siteId: string;\n                webId: string;\n                listId: string;\n                uniqueId: string;\n            },\n        }\n    };\n    dataVersion: string;\n    properties: {\n        title: string;\n        imageSourceType?: number;\n        layoutType: LayoutType;\n        textAlignment: TextAlignment;\n        showTopicHeader: boolean;\n        showPublishDate: boolean;\n        topicHeader: string;\n        authors: {\n            id: string,\n            email: string;\n            upn: string;\n            name: string;\n            role: string;\n        }[];\n        webId?: string;\n        siteId?: string;\n        listId?: string;\n        uniqueId?: string;\n        translateX?: number;\n        translateY?: number;\n        altText?: string;\n    };\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection } from \"./sharepointqueryable\";\nimport { File } from \"./files\";\nimport { odataUrlFrom } from \"./odata\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\n\n/**\n * Represents an app catalog\n */\nexport class AppCatalog extends SharePointQueryableCollection {\n\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/web/tenantappcatalog/AvailableApps\") {\n        super(extractWebUrl(typeof baseUrl === \"string\" ? baseUrl : baseUrl.toUrl()), path);\n    }\n\n    /**\n     * Get details of specific app from the app catalog\n     * @param id - Specify the guid of the app\n     */\n    public getAppById(id: string): App {\n        return new App(this, `getById('${id}')`);\n    }\n\n    /**\n     * Uploads an app package. Not supported for batching\n     *\n     * @param filename Filename to create.\n     * @param content app package data (eg: the .app or .sppkg file).\n     * @param shouldOverWrite Should an app with the same name in the same location be overwritten? (default: true)\n     * @returns Promise<AppAddResult>\n     */\n    public add(filename: string, content: string | ArrayBuffer | Blob, shouldOverWrite = true): Promise<AppAddResult> {\n\n        const catalog = this.toUrl().indexOf(\"tenantappcatalog\") > 0 ? \"tenantappcatalog\" : \"sitecollectionappcatalog\";\n\n        // you don't add to the availableapps collection\n        const adder = new AppCatalog(extractWebUrl(this.toUrl()), `_api/web/${catalog}/add(overwrite=${shouldOverWrite},url='${filename}')`);\n\n        return adder.postCore({\n            body: content,\n        }).then(r => {\n            return {\n                data: r,\n                file: new File(odataUrlFrom(r)),\n            };\n        });\n    }\n}\n\n/**\n * Represents the actions you can preform on a given app within the catalog\n */\nexport class App extends SharePointQueryableInstance {\n\n    /**\n     * This method deploys an app on the app catalog.  It must be called in the context\n     * of the tenant app catalog web or it will fail.\n     * \n     * @param skipFeatureDeployment Deploy the app to the entire tenant\n     */\n    public deploy(skipFeatureDeployment = false): Promise<void> {\n        return this.clone(App, `Deploy(${skipFeatureDeployment})`).postCore();\n    }\n\n    /**\n     * This method retracts a deployed app on the app catalog.  It must be called in the context\n     * of the tenant app catalog web or it will fail.\n     */\n    public retract(): Promise<void> {\n        return this.clone(App, \"Retract\").postCore();\n    }\n\n    /**\n     * This method allows an app which is already deployed to be installed on a web\n     */\n    public install(): Promise<void> {\n        return this.clone(App, \"Install\").postCore();\n    }\n\n    /**\n     * This method allows an app which is already insatlled to be uninstalled on a web\n     */\n    public uninstall(): Promise<void> {\n        return this.clone(App, \"Uninstall\").postCore();\n    }\n\n    /**\n     * This method allows an app which is already insatlled to be upgraded on a web\n     */\n    public upgrade(): Promise<void> {\n        return this.clone(App, \"Upgrade\").postCore();\n    }\n\n    /**\n     * This method removes an app from the app catalog.  It must be called in the context\n     * of the tenant app catalog web or it will fail.\n     */\n    public remove(): Promise<void> {\n        return this.clone(App, \"Remove\").postCore();\n    }\n}\n\nexport interface AppAddResult {\n    data: any;\n    file: File;\n}\n","import { ODataBatch } from \"@pnp/odata\";\nimport { getGUID, isUrlAbsolute, combine, mergeHeaders, hOP } from \"@pnp/common\";\nimport { Logger, LogLevel } from \"@pnp/logging\";\nimport { SPHttpClient } from \"./net/sphttpclient\";\nimport { SPRuntimeConfig } from \"./config/splibconfig\";\nimport { toAbsoluteUrl } from \"./utils/toabsoluteurl\";\n\n/**\n * Manages a batch of OData operations\n */\nexport class SPBatch extends ODataBatch {\n\n    constructor(private baseUrl: string) {\n        super();\n    }\n\n    /**\n     * Parses the response from a batch request into an array of Response instances\n     *\n     * @param body Text body of the response from the batch request\n     */\n    public static ParseResponse(body: string): Promise<Response[]> {\n        return new Promise((resolve, reject) => {\n            const responses: Response[] = [];\n            const header = \"--batchresponse_\";\n            // Ex. \"HTTP/1.1 500 Internal Server Error\"\n            const statusRegExp = new RegExp(\"^HTTP/[0-9.]+ +([0-9]+) +(.*)\", \"i\");\n            const lines = body.split(\"\\n\");\n            let state = \"batch\";\n            let status: number;\n            let statusText: string;\n            for (let i = 0; i < lines.length; ++i) {\n                const line = lines[i];\n                switch (state) {\n                    case \"batch\":\n                        if (line.substr(0, header.length) === header) {\n                            state = \"batchHeaders\";\n                        } else {\n                            if (line.trim() !== \"\") {\n                                throw Error(`Invalid response, line ${i}`);\n                            }\n                        }\n                        break;\n                    case \"batchHeaders\":\n                        if (line.trim() === \"\") {\n                            state = \"status\";\n                        }\n                        break;\n                    case \"status\":\n                        const parts = statusRegExp.exec(line);\n                        if (parts.length !== 3) {\n                            throw Error(`Invalid status, line ${i}`);\n                        }\n                        status = parseInt(parts[1], 10);\n                        statusText = parts[2];\n                        state = \"statusHeaders\";\n                        break;\n                    case \"statusHeaders\":\n                        if (line.trim() === \"\") {\n                            state = \"body\";\n                        }\n                        break;\n                    case \"body\":\n                        responses.push((status === 204) ? new Response() : new Response(line, { status: status, statusText: statusText }));\n                        state = \"batch\";\n                        break;\n                }\n            }\n            if (state !== \"status\") {\n                reject(Error(\"Unexpected end of input\"));\n            }\n            resolve(responses);\n        });\n    }\n\n    protected executeImpl(): Promise<void> {\n\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, LogLevel.Info);\n\n        // if we don't have any requests, don't bother sending anything\n        // this could be due to caching further upstream, or just an empty batch\n        if (this.requests.length < 1) {\n            Logger.write(`Resolving empty batch.`, LogLevel.Info);\n            return Promise.resolve();\n        }\n\n        // creating the client here allows the url to be populated for nodejs client as well as potentially\n        // any other hacks needed for other types of clients. Essentially allows the absoluteRequestUrl\n        // below to be correct\n        const client = new SPHttpClient();\n\n        // due to timing we need to get the absolute url here so we can use it for all the individual requests\n        // and for sending the entire batch\n        return toAbsoluteUrl(this.baseUrl).then(absoluteRequestUrl => {\n\n            // build all the requests, send them, pipe results in order to parsers\n            const batchBody: string[] = [];\n\n            let currentChangeSetId = \"\";\n\n            for (let i = 0; i < this.requests.length; i++) {\n                const reqInfo = this.requests[i];\n\n                if (reqInfo.method === \"GET\") {\n\n                    if (currentChangeSetId.length > 0) {\n                        // end an existing change set\n                        batchBody.push(`--changeset_${currentChangeSetId}--\\n\\n`);\n                        currentChangeSetId = \"\";\n                    }\n\n                    batchBody.push(`--batch_${this.batchId}\\n`);\n\n                } else {\n\n                    if (currentChangeSetId.length < 1) {\n                        // start new change set\n                        currentChangeSetId = getGUID();\n                        batchBody.push(`--batch_${this.batchId}\\n`);\n                        batchBody.push(`Content-Type: multipart/mixed; boundary=\"changeset_${currentChangeSetId}\"\\n\\n`);\n                    }\n\n                    batchBody.push(`--changeset_${currentChangeSetId}\\n`);\n                }\n\n                // common batch part prefix\n                batchBody.push(`Content-Type: application/http\\n`);\n                batchBody.push(`Content-Transfer-Encoding: binary\\n\\n`);\n\n                const headers = new Headers();\n\n                // this is the url of the individual request within the batch\n                const url = isUrlAbsolute(reqInfo.url) ? reqInfo.url : combine(absoluteRequestUrl, reqInfo.url);\n\n                Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Adding request ${reqInfo.method} ${url} to batch.`, LogLevel.Verbose);\n\n                if (reqInfo.method !== \"GET\") {\n\n                    let method = reqInfo.method;\n\n                    const castHeaders: any = reqInfo.options.headers;\n                    if (hOP(reqInfo, \"options\") && hOP(reqInfo.options, \"headers\") && castHeaders[\"X-HTTP-Method\"] !== undefined) {\n\n                        method = castHeaders[\"X-HTTP-Method\"];\n                        delete castHeaders[\"X-HTTP-Method\"];\n                    }\n\n                    batchBody.push(`${method} ${url} HTTP/1.1\\n`);\n\n                    headers.set(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n\n                } else {\n                    batchBody.push(`${reqInfo.method} ${url} HTTP/1.1\\n`);\n                }\n\n                // merge global config headers\n                mergeHeaders(headers, SPRuntimeConfig.headers);\n\n                // merge per-request headers\n                if (reqInfo.options) {\n                    mergeHeaders(headers, reqInfo.options.headers);\n                }\n\n                // lastly we apply any default headers we need that may not exist\n                if (!headers.has(\"Accept\")) {\n                    headers.append(\"Accept\", \"application/json\");\n                }\n\n                if (!headers.has(\"Content-Type\")) {\n                    headers.append(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\n                }\n\n                if (!headers.has(\"X-ClientService-ClientTag\")) {\n                    headers.append(\"X-ClientService-ClientTag\", \"PnPCoreJS:@pnp-$$Version$$\");\n                }\n\n                // write headers into batch body\n                headers.forEach((value: string, name: string) => {\n                    batchBody.push(`${name}: ${value}\\n`);\n                });\n\n                batchBody.push(\"\\n\");\n\n                if (reqInfo.options.body) {\n                    batchBody.push(`${reqInfo.options.body}\\n\\n`);\n                }\n            }\n\n            if (currentChangeSetId.length > 0) {\n                // Close the changeset\n                batchBody.push(`--changeset_${currentChangeSetId}--\\n\\n`);\n                currentChangeSetId = \"\";\n            }\n\n            batchBody.push(`--batch_${this.batchId}--\\n`);\n\n            const batchOptions = {\n                \"body\": batchBody.join(\"\"),\n                \"headers\": {\n                    \"Content-Type\": `multipart/mixed; boundary=batch_${this.batchId}`,\n                },\n                \"method\": \"POST\",\n            };\n\n            Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, LogLevel.Info);\n\n            return client.fetch(combine(absoluteRequestUrl, \"/_api/$batch\"), batchOptions)\n                .then(r => r.text())\n                .then(SPBatch.ParseResponse)\n                .then((responses: Response[]) => {\n\n                    if (responses.length !== this.requests.length) {\n                        throw Error(\"Could not properly parse responses to match requests in batch.\");\n                    }\n\n                    Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, LogLevel.Info);\n\n                    return responses.reduce((chain, response, index) => {\n\n                        const request = this.requests[index];\n\n                        Logger.write(`[${request.id}] (${(new Date()).getTime()}) Resolving request in batch ${this.batchId}.`, LogLevel.Info);\n\n                        return chain.then(_ => request.parser.parse(response).then(request.resolve).catch(request.reject));\n\n                    }, Promise.resolve());\n                });\n        });\n    }\n}\n","import { SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { jsS } from \"@pnp/common\";\n\n/**\n * Describes a collection of List objects\n *\n */\n@defaultPath(\"features\")\nexport class Features extends SharePointQueryableCollection {\n\n    /**\n     * Adds a new list to the collection\n     *\n     * @param id The Id of the feature (GUID)\n     * @param force If true the feature activation will be forced\n     */\n    public add(id: string, force = false): Promise<FeatureAddResult> {\n\n        return this.clone(Features, \"add\").postCore({\n            body: jsS({\n                featdefScope: 0,\n                featureId: id,\n                force: force,\n            }),\n        }).then(data => {\n            return {\n                data: data,\n                feature: this.getById(id),\n            };\n        });\n    }\n\n    /**\t    \n     * Gets a list from the collection by guid id\t     \n     *\t    \n     * @param id The Id of the feature (GUID)\t    \n     */\n    public getById(id: string): Feature {\n        const feature = new Feature(this);\n        feature.concat(`('${id}')`);\n        return feature;\n    }\n\n    /**\n     * Removes (deactivates) a feature from the collection\n     *\n     * @param id The Id of the feature (GUID)\n     * @param force If true the feature deactivation will be forced\n     */\n    public remove(id: string, force = false): Promise<any> {\n\n        return this.clone(Features, \"remove\").postCore({\n            body: jsS({\n                featureId: id,\n                force: force,\n            }),\n        });\n    }\n}\n\nexport class Feature extends SharePointQueryableInstance {\n\n    /**\n     * Removes (deactivates) a feature from the collection\n     *\n     * @param force If true the feature deactivation will be forced\n     */\n    public deactivate(force = false): Promise<any> {\n\n        const removeDependency = this.addBatchDependency();\n\n        const idGet = new Feature(this).select(\"DefinitionId\");\n\n        return idGet.get<{ DefinitionId: string }>().then(feature => {\n\n            const promise = this.getParent(Features, this.parentUrl, \"\", this.batch).remove(feature.DefinitionId, force);\n\n            removeDependency();\n\n            return promise;\n        });\n    }\n}\n\nexport interface FeatureAddResult {\n    data: any;\n    feature: Feature;\n}\n","import { SharePointQueryable, SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\nimport { Web } from \"./webs\";\nimport { UserCustomActions } from \"./usercustomactions\";\nimport { ContextInfo, DocumentLibraryInformation } from \"./types\";\nimport { SPBatch } from \"./batch\";\nimport { Features } from \"./features\";\nimport { hOP, jsS, extend } from \"@pnp/common\";\nimport { SPHttpClient } from \"./net/sphttpclient\";\n\n/**\n * Describes a site collection\n *\n */\n@defaultPath(\"_api/site\")\nexport class Site extends SharePointQueryableInstance {\n\n    /**\n     * Gets the root web of the site collection\n     *\n     */\n    public get rootWeb(): Web {\n        return new Web(this, \"rootweb\");\n    }\n\n    /**\n     * Gets the active features for this site collection\n     *\n     */\n    public get features(): Features {\n        return new Features(this);\n    }\n\n    /**\n     * Gets all custom actions for this site collection\n     *\n     */\n    public get userCustomActions(): UserCustomActions {\n        return new UserCustomActions(this);\n    }\n\n    /**\n     * Gets a Web instance representing the root web of the site collection\n     * correctly setup for chaining within the library\n     */\n    public getRootWeb(): Promise<Web> {\n        return this.rootWeb.select(\"Url\").get().then(web => new Web(web.Url));\n    }\n\n    /**\n     * Gets the context information for this site collection\n     */\n    public getContextInfo(): Promise<ContextInfo> {\n        const q = new Site(this.parentUrl, \"_api/contextinfo\");\n        return q.postCore().then(data => {\n            if (hOP(data, \"GetContextWebInformation\")) {\n                const info = data.GetContextWebInformation;\n                info.SupportedSchemaVersions = info.SupportedSchemaVersions.results;\n                return info;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Gets the document libraries on a site. Static method. (SharePoint Online only)\n     *\n     * @param absoluteWebUrl The absolute url of the web whose document libraries should be returned\n     */\n    public getDocumentLibraries(absoluteWebUrl: string): Promise<DocumentLibraryInformation[]> {\n        const q = new SharePointQueryable(\"\", \"_api/sp.web.getdocumentlibraries(@v)\");\n        q.query.set(\"@v\", \"'\" + absoluteWebUrl + \"'\");\n        return q.get().then(data => {\n            if (hOP(data, \"GetDocumentLibraries\")) {\n                return data.GetDocumentLibraries;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Gets the site url from a page url\n     *\n     * @param absolutePageUrl The absolute url of the page\n     */\n    public getWebUrlFromPageUrl(absolutePageUrl: string): Promise<string> {\n        const q = new SharePointQueryable(\"\", \"_api/sp.web.getweburlfrompageurl(@v)\");\n        q.query.set(\"@v\", `'${absolutePageUrl}'`);\n        return q.get().then(data => {\n            if (hOP(data, \"GetWebUrlFromPageUrl\")) {\n                return data.GetWebUrlFromPageUrl;\n            } else {\n                return data;\n            }\n        });\n    }\n\n    /**\n     * Creates a new batch for requests within the context of this site collection\n     *\n     */\n    public createBatch(): SPBatch {\n        return new SPBatch(this.parentUrl);\n    }\n\n    /**\n     * Opens a web by id (using POST)\n     *\n     * @param webId The GUID id of the web to open\n     */\n    public openWebById(webId: string): Promise<OpenWebByIdResult> {\n\n        return this.clone(Site, `openWebById('${webId}')`).postCore().then(d => ({\n            data: d,\n            web: Web.fromUrl(d[\"odata.id\"] || d.__metadata.uri),\n        }));\n    }\n\n    /**\n     * Associates a site collection to a hub site.\n     * \n     * @param siteId Id of the hub site collection you want to join.\n     * If you want to disassociate the site collection from hub site, then\n     * pass the siteId as 00000000-0000-0000-0000-000000000000\n     */\n    public joinHubSite(siteId: string): Promise<void> {\n        return this.clone(Site, `joinHubSite('${siteId}')`).postCore();\n    }\n\n    /**\n     * Registers the current site collection as hub site collection\n     */\n    public registerHubSite(): Promise<void> {\n        return this.clone(Site, `registerHubSite`).postCore();\n    }\n\n    /**\n     * Unregisters the current site collection as hub site collection.\n     */\n    public unRegisterHubSite(): Promise<void> {\n        return this.clone(Site, `unRegisterHubSite`).postCore();\n    }\n\n    /**\n     * Creates a Modern communication site.\n     * \n     * @param title The title of the site to create\n     * @param lcid The language to use for the site. If not specified will default to 1033 (English).\n     * @param shareByEmailEnabled If set to true, it will enable sharing files via Email. By default it is set to false\n     * @param url The fully qualified URL (e.g. https://yourtenant.sharepoint.com/sites/mysitecollection) of the site.\n     * @param description The description of the communication site.\n     * @param classification The Site classification to use. For instance 'Contoso Classified'. See https://www.youtube.com/watch?v=E-8Z2ggHcS0 for more information\n     * @param siteDesignId The Guid of the site design to be used.\n     *                     You can use the below default OOTB GUIDs:\n     *                     Topic: 00000000-0000-0000-0000-000000000000\n     *                     Showcase: 6142d2a0-63a5-4ba0-aede-d9fefca2c767\n     *                     Blank: f6cc5403-0d63-442e-96c0-285923709ffc \n     */\n\n    public createCommunicationSite(\n        title: string,\n        lcid = 1033,\n        shareByEmailEnabled = false,\n        url: string,\n        description = \"\",\n        classification = \"\",\n        siteDesignId = \"00000000-0000-0000-0000-000000000000\",\n        hubSiteId = \"00000000-0000-0000-0000-000000000000\",\n    ): Promise<void> {\n\n        const props = {\n            Classification: classification,\n            Description: description,\n            HubSiteId: hubSiteId,\n            Lcid: lcid,\n            ShareByEmailEnabled: shareByEmailEnabled,\n            SiteDesignId: siteDesignId,\n            Title: title,\n            Url: url,\n            WebTemplate: \"SITEPAGEPUBLISHING#0\",\n            WebTemplateExtensionId: \"00000000-0000-0000-0000-000000000000\",\n        };\n\n        const postBody = jsS({\n            \"request\":\n                extend({\n                    \"__metadata\": { \"type\": \"Microsoft.SharePoint.Portal.SPSiteCreationRequest\" },\n                }, props),\n        });\n\n        return this.getRootWeb().then(async (d: any) => {\n\n            const client = new SPHttpClient();\n            const methodUrl = `${d.parentUrl}/_api/SPSiteManager/Create`;\n            return client.post(methodUrl, {\n                body: postBody,\n                headers: {\n                    \"Accept\": \"application/json;odata=verbose\",\n                    \"Content-Type\": \"application/json;odata=verbose;charset=utf-8\",\n                },\n            }).then(r => r.json());\n        });\n    }\n\n    /**\n     * Creates a Modern team site backed by Office 365 group. For use in SP Online only. This will not work with App-only tokens\n     * \n     * @param displayName The title or display name of the Modern team site to be created\n     * @param alias Alias of the underlying Office 365 Group\n     * @param isPublic Defines whether the Office 365 Group will be public (default), or private.\n     * @param lcid The language to use for the site. If not specified will default to English (1033).\n     * @param description The description of the site to be created.\n     * @param classification The Site classification to use. For instance 'Contoso Classified'. See https://www.youtube.com/watch?v=E-8Z2ggHcS0 for more information\n     * @param owners The Owners of the site to be created     \n     */\n\n    public createModernTeamSite(\n        displayName: string,\n        alias: string,\n        isPublic = true,\n        lcid = 1033,\n        description = \"\",\n        classification = \"\",\n        owners?: string[],\n        hubSiteId = \"00000000-0000-0000-0000-000000000000\",\n    ): Promise<void> {\n\n        const postBody = jsS({\n            alias: alias,\n            displayName: displayName,\n            isPublic: isPublic,\n            optionalParams: {\n                Classification: classification,\n                CreationOptions: {\n                    \"results\": [`SPSiteLanguage:${lcid}`, `HubSiteId:${hubSiteId}`],\n                },\n                Description: description,\n                Owners: {\n                    \"results\": owners ? owners : [],\n                },\n            },\n        });\n\n        return this.getRootWeb().then(async (d: any) => {\n\n            const client = new SPHttpClient();\n            const methodUrl = `${d.parentUrl}/_api/GroupSiteManager/CreateGroupEx`;\n            return client.post(methodUrl, {\n                body: postBody,\n                headers: {\n                    \"Accept\": \"application/json;odata=verbose\",\n                    \"Content-Type\": \"application/json;odata=verbose;charset=utf-8\",\n                },\n            }).then(r => r.json());\n        });\n    }\n}\n\n/**\n * The result of opening a web by id: contains the data returned as well as a chainable web instance\n */\nexport interface OpenWebByIdResult {\n    data: any;\n    web: Web;\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { MenuNodeCollection } from \"./types\";\nimport { jsS, extend, TypedHash } from \"@pnp/common\";\nimport { metadata } from \"./utils/metadata\";\n\n/**\n * Result from adding a navigation node\n *\n */\nexport interface NavigationNodeAddResult {\n    data: any;\n    node: NavigationNode;\n}\n\n/**\n * Represents a collection of navigation nodes\n *\n */\nexport class NavigationNodes extends SharePointQueryableCollection {\n\n    /**\t    \n     * Gets a navigation node by id\t\n     *\t\n     * @param id The id of the node\t\n     */\n    public getById(id: number): NavigationNode {\n        const node = new NavigationNode(this);\n        node.concat(`(${id})`);\n        return node;\n    }\n\n    /**\n     * Adds a new node to the collection\n     *\n     * @param title Display name of the node\n     * @param url The url of the node\n     * @param visible If true the node is visible, otherwise it is hidden (default: true)\n     */\n    public add(title: string, url: string, visible = true): Promise<NavigationNodeAddResult> {\n\n        const postBody = jsS(extend(metadata(\"SP.NavigationNode\"), {\n            IsVisible: visible,\n            Title: title,\n            Url: url,\n        }));\n\n        return this.clone(NavigationNodes, null).postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                node: this.getById(data.Id),\n            };\n        });\n    }\n\n    /**\n     * Moves a node to be after another node in the navigation\n     *\n     * @param nodeId Id of the node to move\n     * @param previousNodeId Id of the node after which we move the node specified by nodeId\n     */\n    public moveAfter(nodeId: number, previousNodeId: number): Promise<void> {\n\n        const postBody = jsS({\n            nodeId: nodeId,\n            previousNodeId: previousNodeId,\n        });\n\n        return this.clone(NavigationNodes, \"MoveAfter\").postCore({ body: postBody });\n    }\n}\n\n/**\n * Represents an instance of a navigation node\n *\n */\nexport class NavigationNode extends SharePointQueryableInstance {\n\n    /**\n     * Represents the child nodes of this node\n     */\n    public get children(): NavigationNodes {\n        return new NavigationNodes(this, \"Children\");\n    }\n\n    /**\n     * Deletes this node and any child nodes\n     */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n\n    /**\n     * Updates this node\n     * \n     * @param properties Properties used to update this node\n     */\n    public update(properties: TypedHash<string | number | boolean>): Promise<NavNodeUpdateResult> {\n\n        const postBody = jsS(extend({\n            \"__metadata\": { \"type\": \"SP.NavigationNode\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                node: this,\n            };\n        });\n    }\n}\n\nexport interface NavNodeUpdateResult {\n    data: any;\n    node: NavigationNode;\n}\n\n/**\n * Exposes the navigation components\n *\n */\n@defaultPath(\"navigation\")\nexport class Navigation extends SharePointQueryable {\n\n    /**\n     * Gets the quicklaunch navigation nodes for the current context\n     *\n     */\n    public get quicklaunch(): NavigationNodes {\n        return new NavigationNodes(this, \"quicklaunch\");\n    }\n\n    /**\n     * Gets the top bar navigation nodes for the current context\n     *\n     */\n    public get topNavigationBar(): NavigationNodes {\n        return new NavigationNodes(this, \"topnavigationbar\");\n    }\n}\n\nexport interface INavigationService {\n    getMenuState(menuNodeKey?: string, depth?: number, mapProviderName?: string, customProperties?: string): Promise<MenuNodeCollection>;\n    getMenuNodeKey(currentUrl: string, mapProviderName?: string): Promise<string>;\n}\n\n/**\n * Represents the top level navigation service\n */\nexport class NavigationService extends SharePointQueryable implements INavigationService {\n\n    constructor(baseUrl: string | SharePointQueryable, path: string = null) {\n        super(baseUrl, path);\n    }\n\n    /**\n     * The MenuState service operation returns a Menu-State (dump) of a SiteMapProvider on a site.\n     * \n     * @param menuNodeKey MenuNode.Key of the start node within the SiteMapProvider If no key is provided the SiteMapProvider.RootNode will be the root of the menu state.\n     * @param depth Depth of the dump. If no value is provided a dump with the depth of 10 is returned\n     * @param mapProviderName The name identifying the SiteMapProvider to be used\n     * @param customProperties comma seperated list of custom properties to be returned.\n     */\n    public getMenuState(menuNodeKey: string = null, depth = 10, mapProviderName: string = null, customProperties: string = null): Promise<MenuNodeCollection> {\n\n        return (new NavigationService(this, \"_api/navigation/MenuState\")).postCore({\n            body: jsS({\n                customProperties: customProperties,\n                depth: depth,\n                mapProviderName: mapProviderName,\n                menuNodeKey: menuNodeKey,\n            }),\n        });\n    }\n\n    /**\n     * Tries to get a SiteMapNode.Key for a given URL within a site collection.\n     * \n     * @param currentUrl A url representing the SiteMapNode\n     * @param mapProviderName The name identifying the SiteMapProvider to be used\n     */\n    public getMenuNodeKey(currentUrl: string, mapProviderName: string = null): Promise<string> {\n\n        return (new NavigationService(this, \"_api/navigation/MenuNodeKey\")).postCore({\n            body: jsS({\n                currentUrl: currentUrl,\n                mapProviderName: mapProviderName,\n            }),\n        });\n    }\n}\n","import { SharePointQueryable, defaultPath } from \"./sharepointqueryable\";\nimport { jsS } from \"@pnp/common\";\n\nexport interface RelatedItem {\n    ListId: string;\n    ItemId: number;\n    Url: string;\n    Title: string;\n    WebId: string;\n    IconUrl: string;\n}\n\nexport interface RelatedItemManger {\n\n    getRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]>;\n\n    getPageOneRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]>;\n\n    addSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemID: number,\n        targetWebUrl: string,\n        tryAddReverseLink?: boolean): Promise<void>;\n\n    /**\n     * Adds a related item link from an item specified by list name and item id, to an item specified by url\n     *\n     * @param sourceListName The source list name or list id\n     * @param sourceItemId The source item id\n     * @param targetItemUrl The target item url\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    addSingleLinkToUrl(sourceListName: string, sourceItemId: number, targetItemUrl: string, tryAddReverseLink?: boolean): Promise<void>;\n\n    /**\n     * Adds a related item link from an item specified by url, to an item specified by list name and item id\n     *\n     * @param sourceItemUrl The source item url\n     * @param targetListName The target list name or list id\n     * @param targetItemId The target item id\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    addSingleLinkFromUrl(sourceItemUrl: string, targetListName: string, targetItemId: number, tryAddReverseLink?: boolean): Promise<void>;\n\n    deleteSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemId: number,\n        targetWebUrl: string,\n        tryDeleteReverseLink?: boolean): Promise<void>;\n}\n\n@defaultPath(\"_api/SP.RelatedItemManager\")\nexport class RelatedItemManagerImpl extends SharePointQueryable implements RelatedItemManger {\n\n    public static FromUrl(url: string): RelatedItemManagerImpl {\n\n        if (url === null) {\n            return new RelatedItemManagerImpl(\"\");\n        }\n\n        const index = url.indexOf(\"_api/\");\n\n        if (index > -1) {\n            return new RelatedItemManagerImpl(url.substr(0, index));\n        }\n\n        return new RelatedItemManagerImpl(url);\n    }\n\n    public getRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".GetRelatedItems\");\n\n        return query.postCore({\n            body: jsS({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n            }),\n        });\n    }\n\n    public getPageOneRelatedItems(sourceListName: string, sourceItemId: number): Promise<RelatedItem[]> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".GetPageOneRelatedItems\");\n\n        return query.postCore({\n            body: jsS({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n            }),\n        });\n    }\n\n    public addSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemID: number,\n        targetWebUrl: string,\n        tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".AddSingleLink\");\n\n        return query.postCore({\n            body: jsS({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n                SourceWebUrl: sourceWebUrl,\n                TargetItemID: targetItemID,\n                TargetListName: targetListName,\n                TargetWebUrl: targetWebUrl,\n                TryAddReverseLink: tryAddReverseLink,\n            }),\n        });\n    }\n\n    /**\n     * Adds a related item link from an item specified by list name and item id, to an item specified by url\n     *\n     * @param sourceListName The source list name or list id\n     * @param sourceItemId The source item id\n     * @param targetItemUrl The target item url\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    public addSingleLinkToUrl(sourceListName: string, sourceItemId: number, targetItemUrl: string, tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".AddSingleLinkToUrl\");\n\n        return query.postCore({\n            body: jsS({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n                TargetItemUrl: targetItemUrl,\n                TryAddReverseLink: tryAddReverseLink,\n            }),\n        });\n    }\n\n    /**\n     * Adds a related item link from an item specified by url, to an item specified by list name and item id\n     *\n     * @param sourceItemUrl The source item url\n     * @param targetListName The target list name or list id\n     * @param targetItemId The target item id\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\n     */\n    public addSingleLinkFromUrl(sourceItemUrl: string, targetListName: string, targetItemId: number, tryAddReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".AddSingleLinkFromUrl\");\n\n        return query.postCore({\n            body: jsS({\n                SourceItemUrl: sourceItemUrl,\n                TargetItemID: targetItemId,\n                TargetListName: targetListName,\n                TryAddReverseLink: tryAddReverseLink,\n            }),\n        });\n    }\n\n    public deleteSingleLink(sourceListName: string,\n        sourceItemId: number,\n        sourceWebUrl: string,\n        targetListName: string,\n        targetItemId: number,\n        targetWebUrl: string,\n        tryDeleteReverseLink = false): Promise<void> {\n\n        const query = this.clone(RelatedItemManagerImpl, null);\n        query.concat(\".DeleteSingleLink\");\n\n        return query.postCore({\n            body: jsS({\n                SourceItemID: sourceItemId,\n                SourceListName: sourceListName,\n                SourceWebUrl: sourceWebUrl,\n                TargetItemID: targetItemId,\n                TargetListName: targetListName,\n                TargetWebUrl: targetWebUrl,\n                TryDeleteReverseLink: tryDeleteReverseLink,\n            }),\n        });\n    }\n}\n","import {\n    SharePointQueryableInstance,\n    SharePointQueryableCollection,\n    defaultPath,\n} from \"./sharepointqueryable\";\n\nimport {\n    spODataEntity,\n} from \"./odata\";\n\nimport {\n    dateAdd, hOP,\n} from \"@pnp/common\";\n\n/**\n * Describes regional settings ODada object\n */\n@defaultPath(\"regionalsettings\")\nexport class RegionalSettings extends SharePointQueryableInstance {\n    /**\n     * Gets the collection of languages used in a server farm.\n     */\n    public get installedLanguages(): InstalledLanguages {\n        return new InstalledLanguages(this);\n    }\n\n    /**\n     * Gets the collection of language packs that are installed on the server.\n     */\n    public get globalInstalledLanguages(): InstalledLanguages {\n        return new InstalledLanguages(this, \"globalinstalledlanguages\");\n    }\n\n    /**\n     * Gets time zone\n     */\n    public get timeZone(): TimeZone {\n        return new TimeZone(this);\n    }\n\n    /**\n     * Gets time zones\n     */\n    public get timeZones(): TimeZones {\n        return new TimeZones(this);\n    }\n}\n\n/**\n * Describes installed languages ODada queriable collection\n */\n@defaultPath(\"installedlanguages\")\nexport class InstalledLanguages extends SharePointQueryableCollection {}\n\n/**\n * Describes TimeZone ODada object\n */\n@defaultPath(\"timezone\")\nexport class TimeZone extends SharePointQueryableInstance {\n    /**\n     * Gets an Local Time by UTC Time\n     *\n     * @param utcTime UTC Time as Date or ISO String\n     */\n    public utcToLocalTime(utcTime: string | Date): Promise<string> {\n        let dateIsoString: string;\n        if (typeof utcTime === \"string\") {\n            dateIsoString = utcTime;\n        } else {\n            dateIsoString = utcTime.toISOString();\n        }\n\n        return this.clone(TimeZone, `utctolocaltime('${dateIsoString}')`)\n            .postCore()\n            .then(res => hOP(res, \"UTCToLocalTime\") ? res.UTCToLocalTime : res);\n    }\n\n    /**\n     * Gets an UTC Time by Local Time\n     *\n     * @param localTime Local Time as Date or ISO String\n     */\n    public localTimeToUTC(localTime: string | Date): Promise<string> {\n        let dateIsoString: string;\n\n        if (typeof localTime === \"string\") {\n            dateIsoString = localTime;\n        } else {\n            dateIsoString = dateAdd(localTime, \"minute\", localTime.getTimezoneOffset() * -1).toISOString();\n        }\n\n        return this.clone(TimeZone, `localtimetoutc('${dateIsoString}')`)\n            .postCore()\n            .then(res => hOP(res, \"LocalTimeToUTC\") ? res.LocalTimeToUTC : res);\n    }\n}\n\n/**\n * Describes time zones queriable collection\n */\n@defaultPath(\"timezones\")\nexport class TimeZones extends SharePointQueryableCollection {\n    // https://msdn.microsoft.com/en-us/library/office/jj247008.aspx - timezones ids\n    /**\n     * Gets an TimeZone by id\n     *\n     * @param id The integer id of the timezone to retrieve\n     */\n    public getById(id: number): Promise<TimeZone> {\n        // do the post and merge the result into a TimeZone instance so the data and methods are available\n        return this.clone(TimeZones, `GetById(${id})`).postCore({}, spODataEntity(TimeZone));\n    }\n}\n","import { extend, TypedHash, jsS } from \"@pnp/common\";\nimport { SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { SharePointQueryableShareableWeb } from \"./sharepointqueryableshareable\";\nimport { Folders, Folder } from \"./folders\";\nimport { Lists, List } from \"./lists\";\nimport { Fields } from \"./fields\";\nimport { Site } from \"./site\";\nimport { Navigation } from \"./navigation\";\nimport { SiteGroups, SiteGroup } from \"./sitegroups\";\nimport { ContentTypes } from \"./contenttypes\";\nimport { RoleDefinitions } from \"./roles\";\nimport { File } from \"./files\";\nimport { extractWebUrl } from \"./utils/extractweburl\";\nimport { ChangeQuery, StorageEntity, HubSiteData as IHubSiteData } from \"./types\";\nimport { SiteUsers, SiteUser, CurrentUser, SiteUserProps } from \"./siteusers\";\nimport { UserCustomActions } from \"./usercustomactions\";\nimport { odataUrlFrom } from \"./odata\";\nimport { SPBatch } from \"./batch\";\nimport { Features } from \"./features\";\nimport { RelatedItemManger, RelatedItemManagerImpl } from \"./relateditems\";\nimport { AppCatalog } from \"./appcatalog\";\nimport { RegionalSettings } from \"./regionalsettings\";\nimport { ClientSidePage, ClientSidePageComponent } from \"./clientsidepages\";\n\n/**\n * Describes a collection of webs\n *\n */\n@defaultPath(\"webs\")\nexport class Webs extends SharePointQueryableCollection {\n\n    /**\n     * Adds a new web to the collection\n     *\n     * @param title The new web's title\n     * @param url The new web's relative url\n     * @param description The new web's description\n     * @param template The new web's template internal name (default = STS)\n     * @param language The locale id that specifies the new web's language (default = 1033 [English, US])\n     * @param inheritPermissions When true, permissions will be inherited from the new web's parent (default = true)\n     */\n    public add(\n        title: string,\n        url: string,\n        description = \"\",\n        template = \"STS\",\n        language = 1033,\n        inheritPermissions = true): Promise<WebAddResult> {\n\n        const props = {\n            Description: description,\n            Language: language,\n            Title: title,\n            Url: url,\n            UseSamePermissionsAsParentSite: inheritPermissions,\n            WebTemplate: template,\n        };\n\n        const postBody = jsS({\n            \"parameters\":\n                extend({\n                    \"__metadata\": { \"type\": \"SP.WebCreationInformation\" },\n                }, props),\n        });\n\n        return this.clone(Webs, \"add\").postCore({ body: postBody }).then((data) => {\n            return {\n                data: data,\n                web: new Web(odataUrlFrom(data).replace(/_api\\/web\\/?/i, \"\")),\n            };\n        });\n    }\n}\n\n/**\n * Describes a collection of web infos\n *\n */\n@defaultPath(\"webinfos\")\nexport class WebInfos extends SharePointQueryableCollection { }\n\n/**\n * Describes a web\n *\n */\n@defaultPath(\"_api/web\")\nexport class Web extends SharePointQueryableShareableWeb {\n\n    /**\n     * Creates a new web instance from the given url by indexing the location of the /_api/\n     * segment. If this is not found the method creates a new web with the entire string as\n     * supplied.\n     *\n     * @param url\n     */\n    public static fromUrl(url: string, path?: string) {\n        return new Web(extractWebUrl(url), path);\n    }\n\n    /**\n     * Gets this web's subwebs\n     *\n     */\n    public get webs(): Webs {\n        return new Webs(this);\n    }\n\n    /**\n     * Gets this web's parent web and data\n     *\n     */\n    public getParentWeb(): Promise<{ data: any; web: Web }> {\n        return this.select(\"ParentWeb/Id\").expand(\"ParentWeb\").get()\n            .then(({ ParentWeb }) => ParentWeb ? new Site(this.parentUrl).openWebById(ParentWeb.Id) : null);\n    }\n\n    /**\n    * Returns a collection of objects that contain metadata about subsites of the current site in which the current user is a member.\n    *\n    * @param nWebTemplateFilter Specifies the site definition (default = -1)\n    * @param nConfigurationFilter A 16-bit integer that specifies the identifier of a configuration (default = -1)\n    */\n    public getSubwebsFilteredForCurrentUser(nWebTemplateFilter = -1, nConfigurationFilter = -1): Webs {\n        return this.clone(Webs, `getSubwebsFilteredForCurrentUser(nWebTemplateFilter=${nWebTemplateFilter},nConfigurationFilter=${nConfigurationFilter})`);\n    }\n\n    /**\n     * Allows access to the web's all properties collection\n     */\n    public get allProperties(): SharePointQueryableInstance {\n        return this.clone(SharePointQueryableInstance, \"allproperties\");\n    }\n\n    /**\n     * Gets a collection of WebInfos for this web's subwebs\n     *\n     */\n    public get webinfos(): WebInfos {\n        return new WebInfos(this);\n    }\n\n    /**\n     * Gets the content types available in this web\n     *\n     */\n    public get contentTypes(): ContentTypes {\n        return new ContentTypes(this);\n    }\n\n    /**\n     * Gets the lists in this web\n     *\n     */\n    public get lists(): Lists {\n        return new Lists(this);\n    }\n\n    /**\n     * Gets the fields in this web\n     *\n     */\n    public get fields(): Fields {\n        return new Fields(this);\n    }\n\n    /**\n     * Gets the active features for this web\n     *\n     */\n    public get features(): Features {\n        return new Features(this);\n    }\n\n    /**\n     * Gets the available fields in this web\n     *\n     */\n    public get availablefields(): Fields {\n        return new Fields(this, \"availablefields\");\n    }\n\n    /**\n     * Gets the navigation options in this web\n     *\n     */\n    public get navigation(): Navigation {\n        return new Navigation(this);\n    }\n\n    /**\n     * Gets the site users\n     *\n     */\n    public get siteUsers(): SiteUsers {\n        return new SiteUsers(this);\n    }\n\n    /**\n     * Gets the site groups\n     *\n     */\n    public get siteGroups(): SiteGroups {\n        return new SiteGroups(this);\n    }\n\n    /**\n     * Gets site user info list\n     *\n     */\n    public get siteUserInfoList(): List {\n        return new List(this, \"siteuserinfolist\");\n    }\n\n    /**\n     * Gets regional settings\n     *\n     */\n    public get regionalSettings(): RegionalSettings {\n        return new RegionalSettings(this);\n    }\n\n    /**\n     * Gets the current user\n     */\n    public get currentUser(): CurrentUser {\n        return new CurrentUser(this);\n    }\n\n    /**\n     * Gets the top-level folders in this web\n     *\n     */\n    public get folders(): Folders {\n        return new Folders(this);\n    }\n\n    /**\n     * Gets all user custom actions for this web\n     *\n     */\n    public get userCustomActions(): UserCustomActions {\n        return new UserCustomActions(this);\n    }\n\n    /**\n     * Gets the collection of RoleDefinition resources\n     *\n     */\n    public get roleDefinitions(): RoleDefinitions {\n        return new RoleDefinitions(this);\n    }\n\n    /**\n     * Provides an interface to manage related items\n     *\n     */\n    public get relatedItems(): RelatedItemManger {\n        return RelatedItemManagerImpl.FromUrl(this.toUrl());\n    }\n\n    /**\n     * Creates a new batch for requests within the context of this web\n     *\n     */\n    public createBatch(): SPBatch {\n        return new SPBatch(this.parentUrl);\n    }\n\n    /**\n     * Gets the root folder of this web\n     *\n     */\n    public get rootFolder(): Folder {\n        return new Folder(this, \"rootFolder\");\n    }\n\n    /**\n     * Gets the associated owner group for this web\n     *\n     */\n    public get associatedOwnerGroup(): SiteGroup {\n        return new SiteGroup(this, \"associatedownergroup\");\n    }\n\n    /**\n     * Gets the associated member group for this web\n     *\n     */\n    public get associatedMemberGroup(): SiteGroup {\n        return new SiteGroup(this, \"associatedmembergroup\");\n    }\n\n    /**\n     * Gets the associated visitor group for this web\n     *\n     */\n    public get associatedVisitorGroup(): SiteGroup {\n        return new SiteGroup(this, \"associatedvisitorgroup\");\n    }\n\n    /**\n     * Gets the default document library for this web\n     *\n     */\n    public get defaultDocumentLibrary(): List {\n        return new List(this, \"DefaultDocumentLibrary\");\n    }\n\n    /**\n     * Gets a folder by id\n     *\n     * @param uniqueId The uniqueId of the folder\n     */\n    public getFolderById(uniqueId: string): Folder {\n      return new Folder(this, `getFolderById('${uniqueId}')`);\n    }\n\n    /**\n     * Gets a folder by server relative url\n     *\n     * @param folderRelativeUrl The server relative path to the folder (including /sites/ if applicable)\n     */\n    public getFolderByServerRelativeUrl(folderRelativeUrl: string): Folder {\n        return new Folder(this, `getFolderByServerRelativeUrl('${folderRelativeUrl}')`);\n    }\n\n    /**\n     * Gets a folder by server relative relative path if your folder name contains # and % characters\n     * you need to first encode the file name using encodeURIComponent() and then pass the url\n     * let url = \"/sites/test/Shared Documents/\" + encodeURIComponent(\"%123\");\n     * This works only in SharePoint online.\n     *\n     * @param folderRelativeUrl The server relative path to the folder (including /sites/ if applicable)\n     */\n    public getFolderByServerRelativePath(folderRelativeUrl: string): Folder {\n        return new Folder(this, `getFolderByServerRelativePath(decodedUrl='${folderRelativeUrl}')`);\n    }\n\n    /**\n     * Gets a file by id\n     *\n     * @param uniqueId The uniqueId of the file\n     */\n    public getFileById(uniqueId: string): File {\n      return new File(this, `getFileById('${uniqueId}')`);\n    }\n\n    /**\n     * Gets a file by server relative url\n     *\n     * @param fileRelativeUrl The server relative path to the file (including /sites/ if applicable)\n     */\n    public getFileByServerRelativeUrl(fileRelativeUrl: string): File {\n        return new File(this, `getFileByServerRelativeUrl('${fileRelativeUrl}')`);\n    }\n\n    /**\n     * Gets a file by server relative url if your file name contains # and % characters\n     * you need to first encode the file name using encodeURIComponent() and then pass the url\n     * let url = \"/sites/test/Shared Documents/\" + encodeURIComponent(\"%123.docx\");\n     *\n     * @param fileRelativeUrl The server relative path to the file (including /sites/ if applicable)\n     */\n    public getFileByServerRelativePath(fileRelativeUrl: string): File {\n        return new File(this, `getFileByServerRelativePath(decodedUrl='${fileRelativeUrl}')`);\n    }\n\n    /**\n     * Gets a list by server relative url (list's root folder)\n     *\n     * @param listRelativeUrl The server relative path to the list's root folder (including /sites/ if applicable)\n     */\n    public getList(listRelativeUrl: string): List {\n        return new List(this, `getList('${listRelativeUrl}')`);\n    }\n\n    /**\n     * Updates this web instance with the supplied properties\n     *\n     * @param properties A plain object hash of values to update for the web\n     */\n    public update(properties: TypedHash<string | number | boolean>): Promise<WebUpdateResult> {\n\n        const postBody = jsS(extend({\n            \"__metadata\": { \"type\": \"SP.Web\" },\n        }, properties));\n\n        return this.postCore({\n            body: postBody,\n            headers: {\n                \"X-HTTP-Method\": \"MERGE\",\n            },\n        }).then((data) => {\n            return {\n                data: data,\n                web: this,\n            };\n        });\n    }\n\n    /**\n     * Deletes this web\n     *\n     */\n    public delete(): Promise<void> {\n        return super.deleteCore();\n    }\n\n    /**\n     * Applies the theme specified by the contents of each of the files specified in the arguments to the site\n     *\n     * @param colorPaletteUrl The server-relative URL of the color palette file\n     * @param fontSchemeUrl The server-relative URL of the font scheme\n     * @param backgroundImageUrl The server-relative URL of the background image\n     * @param shareGenerated When true, the generated theme files are stored in the root site. When false, they are stored in this web\n     */\n    public applyTheme(colorPaletteUrl: string, fontSchemeUrl: string, backgroundImageUrl: string, shareGenerated: boolean): Promise<void> {\n\n        const postBody = jsS({\n            backgroundImageUrl: backgroundImageUrl,\n            colorPaletteUrl: colorPaletteUrl,\n            fontSchemeUrl: fontSchemeUrl,\n            shareGenerated: shareGenerated,\n        });\n\n        return this.clone(Web, \"applytheme\").postCore({ body: postBody });\n    }\n\n    /**\n     * Applies the specified site definition or site template to the Web site that has no template applied to it\n     *\n     * @param template Name of the site definition or the name of the site template\n     */\n    public applyWebTemplate(template: string): Promise<void> {\n\n        const q = this.clone(Web, \"applywebtemplate\");\n        q.concat(`(@t)`);\n        q.query.set(\"@t\", template);\n        return q.postCore();\n    }\n\n    /**\n     * Checks whether the specified login name belongs to a valid user in the web. If the user doesn't exist, adds the user to the web.\n     *\n     * @param loginName The login name of the user (ex: i:0#.f|membership|user@domain.onmicrosoft.com)\n     */\n    public ensureUser(loginName: string): Promise<WebEnsureUserResult> {\n        const postBody = jsS({\n            logonName: loginName,\n        });\n\n        return this.clone(Web, \"ensureuser\").postCore({ body: postBody }).then((data: any) => {\n            return {\n                data: data,\n                user: new SiteUser(odataUrlFrom(data)),\n            };\n        });\n    }\n\n    /**\n     * Returns a collection of site templates available for the site\n     *\n     * @param language The locale id of the site templates to retrieve (default = 1033 [English, US])\n     * @param includeCrossLanguage When true, includes language-neutral site templates; otherwise false (default = true)\n     */\n    public availableWebTemplates(language = 1033, includeCrossLanugage = true): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, `getavailablewebtemplates(lcid=${language}, doincludecrosslanguage=${includeCrossLanugage})`);\n    }\n\n    /**\n     * Returns the list gallery on the site\n     *\n     * @param type The gallery type - WebTemplateCatalog = 111, WebPartCatalog = 113 ListTemplateCatalog = 114,\n     * MasterPageCatalog = 116, SolutionCatalog = 121, ThemeCatalog = 123, DesignCatalog = 124, AppDataCatalog = 125\n     */\n    public getCatalog(type: number): Promise<List> {\n        return this.clone(Web, `getcatalog(${type})`).select(\"Id\").get().then((data) => {\n            return new List(odataUrlFrom(data));\n        });\n    }\n\n    /**\n     * Returns the collection of changes from the change log that have occurred within the list, based on the specified query\n     *\n     * @param query The change query\n     */\n    public getChanges(query: ChangeQuery): Promise<any> {\n\n        const postBody = jsS({ \"query\": extend({ \"__metadata\": { \"type\": \"SP.ChangeQuery\" } }, query) });\n        return this.clone(Web, \"getchanges\").postCore({ body: postBody });\n    }\n\n    /**\n     * Gets the custom list templates for the site\n     *\n     */\n    public get customListTemplate(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"getcustomlisttemplates\");\n    }\n\n    /**\n     * Returns the user corresponding to the specified member identifier for the current site\n     *\n     * @param id The id of the user\n     */\n    public getUserById(id: number): SiteUser {\n        return new SiteUser(this, `getUserById(${id})`);\n    }\n\n    /**\n     * Returns the name of the image file for the icon that is used to represent the specified file\n     *\n     * @param filename The file name. If this parameter is empty, the server returns an empty string\n     * @param size The size of the icon: 16x16 pixels = 0, 32x32 pixels = 1 (default = 0)\n     * @param progId The ProgID of the application that was used to create the file, in the form OLEServerName.ObjectName\n     */\n    public mapToIcon(filename: string, size = 0, progId = \"\"): Promise<string> {\n        return this.clone(Web, `maptoicon(filename='${filename}', progid='${progId}', size=${size})`).get();\n    }\n\n    /**\n     * Returns the tenant property corresponding to the specified key in the app catalog site\n     *\n     * @param key Id of storage entity to be set\n     */\n    public getStorageEntity(key: string): Promise<StorageEntity> {\n        return this.clone(Web, `getStorageEntity('${key}')`).get();\n    }\n\n    /**\n     * This will set the storage entity identified by the given key (MUST be called in the context of the app catalog)\n     *\n     * @param key Id of storage entity to be set\n     * @param value Value of storage entity to be set\n     * @param description Description of storage entity to be set\n     * @param comments Comments of storage entity to be set\n     */\n    public setStorageEntity(key: string, value: string, description = \"\", comments = \"\"): Promise<void> {\n        return this.clone(Web, `setStorageEntity`).postCore({\n            body: jsS({\n                comments,\n                description,\n                key,\n                value,\n            }),\n        });\n    }\n\n    /**\n     * This will remove the storage entity identified by the given key\n     *\n     * @param key Id of storage entity to be removed\n     */\n    public removeStorageEntity(key: string): Promise<void> {\n        return this.clone(Web, `removeStorageEntity('${key}')`).postCore();\n    }\n\n    /**\n     * Gets the tenant app catalog for this web\n     *\n     * @param url Optional url or web containing the app catalog (default: current web)\n     */\n    public getAppCatalog(url?: string | Web) {\n        return new AppCatalog(url || this);\n    }\n\n    /**\n     * Gets the site collection app catalog for this web\n     *\n     * @param url Optional url or web containing the app catalog (default: current web)\n     */\n    public getSiteCollectionAppCatalog(url?: string | Web) {\n        return new AppCatalog(url || this, \"_api/web/sitecollectionappcatalog/AvailableApps\");\n    }\n\n    /**\n     * Gets the collection of available client side web parts for this web instance\n     */\n    public getClientSideWebParts(): Promise<ClientSidePageComponent[]> {\n        return this.clone(SharePointQueryableCollection, \"GetClientSideWebParts\").get();\n    }\n\n    /**\n     * Creates a new client side page\n     *\n     * @param pageName Name of the new page\n     * @param title Display title of the new page\n     * @param libraryTitle Title of the library in which to create the new page. Default: \"Site Pages\"\n     */\n    public addClientSidePage(pageName: string, title = pageName.replace(/\\.[^/.]+$/, \"\")): Promise<ClientSidePage> {\n        return ClientSidePage.create(this, pageName, title);\n    }\n\n    /**\n     * Creates a new client side page using the library path\n     *\n     * @param pageName Name of the new page\n     * @param listRelativePath The server relative path to the list's root folder (including /sites/ if applicable)\n     * @param title Display title of the new page\n     */\n    public addClientSidePageByPath(pageName: string, title = pageName.replace(/\\.[^/.]+$/, \"\")): Promise<ClientSidePage> {\n        return ClientSidePage.create(this, pageName, title);\n    }\n\n    /**\n     * Creates the default associated groups (Members, Owners, Visitors) and gives them the default permissions on the site.\n     * The target site must have unique permissions and no associated members / owners / visitors groups\n     *\n     * @param siteOwner The user login name to be added to the site Owners group. Default is the current user\n     * @param siteOwner2 The second user login name to be added to the site Owners group. Default is empty\n     * @param groupNameSeed The base group name. E.g. 'TestSite' would produce 'TestSite Members' etc.\n     */\n    public createDefaultAssociatedGroups(siteOwner?: string, siteOwner2?: string, groupNameSeed?: string): Promise<void> {\n        const q = this.clone(Web, `createDefaultAssociatedGroups(userLogin=@u,userLogin2=@v,groupNameSeed=@s)`);\n        q.query.set(\"@u\", `'${encodeURIComponent(siteOwner || \"\")}'`);\n        q.query.set(\"@v\", `'${encodeURIComponent(siteOwner2 || \"\")}'`);\n        q.query.set(\"@s\", `'${encodeURIComponent(groupNameSeed || \"\")}'`);\n        return q.postCore();\n    }\n\n    /**\n     * Gets hub site data for the current web.\n     *\n     * @param forceRefresh Default value is false. When false, the data is returned from the server's cache.\n     * When true, the cache is refreshed with the latest updates and then returned.\n     * Use this if you just made changes and need to see those changes right away.\n     */\n    public async hubSiteData(forceRefresh = false): Promise<IHubSiteData> {\n        return this.clone(Web, `hubSiteData(${forceRefresh})`).get().then(r => JSON.parse(r));\n    }\n\n    /**\n     * Applies theme updates from the parent hub site collection.\n     */\n    public syncHubSiteTheme(): Promise<void> {\n        return this.clone(Web, `syncHubSiteTheme`).postCore();\n    }\n}\n\n/**\n * Result from adding a web\n *\n */\nexport interface WebAddResult {\n    data: any;\n    web: Web;\n}\n\n/**\n * Result from updating a web\n *\n */\nexport interface WebUpdateResult {\n    data: any;\n    web: Web;\n}\n\n/**\n * Result from retrieving a catalog\n *\n */\nexport interface GetCatalogResult {\n    data: any;\n    list: List;\n}\n\n/**\n * Result from ensuring a user\n *\n */\nexport interface WebEnsureUserResult {\n    data: SiteUserProps;\n    user: SiteUser;\n}\n","import { SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\nimport { extend, jsS, hOP, getHashCode, objectDefinedNotNull, isArray } from \"@pnp/common\";\nimport { metadata } from \"./utils/metadata\";\nimport { CachingOptions } from \"@pnp/odata\";\n\nexport interface ISearchQueryBuilder {\n    query: any;\n    readonly bypassResultTypes: this;\n    readonly enableStemming: this;\n    readonly enableInterleaving: this;\n    readonly enableFql: this;\n    readonly enableNicknames: this;\n    readonly enablePhonetic: this;\n    readonly trimDuplicates: this;\n    readonly processBestBets: this;\n    readonly enableQueryRules: this;\n    readonly enableSorting: this;\n    readonly generateBlockRankLog: this;\n    readonly processPersonalFavorites: this;\n    readonly enableOrderingHitHighlightedProperty: this;\n\n    culture(culture: number): this;\n    rowLimit(n: number): this;\n    startRow(n: number): this;\n    sourceId(id: string): this;\n    text(queryText: string): this;\n    template(template: string): this;\n    trimDuplicatesIncludeId(n: number): this;\n    rankingModelId(id: string): this;\n    rowsPerPage(n: number): this;\n    selectProperties(...properties: string[]): this;\n    timeZoneId(id: number): this;\n    refinementFilters(...filters: string[]): this;\n    refiners(refiners: string): this;\n    hiddenConstraints(constraints: string): this;\n    sortList(...sorts: Sort[]): this;\n    timeout(milliseconds: number): this;\n    hithighlightedProperties(...properties: string[]): this;\n    clientType(clientType: string): this;\n    personalizationData(data: string): this;\n    resultsURL(url: string): this;\n    queryTag(tags: string): this;\n    properties(...properties: SearchProperty[]): this;\n    queryTemplatePropertiesUrl(url: string): this;\n    reorderingRules(...rules: ReorderingRule[]): this;\n    hitHighlightedMultivaluePropertyLimit(limit: number): this;\n    collapseSpecification(spec: string): this;\n    uiLanguage(lang: number): this;\n    desiredSnippetLength(len: number): this;\n    maxSnippetLength(len: number): this;\n    summaryLength(len: number): this;\n\n    /* included method */\n    toSearchQuery(): SearchQuery;\n}\n\nconst funcs = new Map<string, string>([\n    [\"text\", \"Querytext\"],\n    [\"template\", \"QueryTemplate\"],\n    [\"sourceId\", \"SourceId\"],\n    [\"trimDuplicatesIncludeId\", \"\"],\n    [\"startRow\", \"\"],\n    [\"rowLimit\", \"\"],\n    [\"rankingModelId\", \"\"],\n    [\"rowsPerPage\", \"\"],\n    [\"selectProperties\", \"\"],\n    [\"culture\", \"\"],\n    [\"timeZoneId\", \"\"],\n    [\"refinementFilters\", \"\"],\n    [\"refiners\", \"\"],\n    [\"hiddenConstraints\", \"\"],\n    [\"sortList\", \"\"],\n    [\"timeout\", \"\"],\n    [\"hithighlightedProperties\", \"\"],\n    [\"clientType\", \"\"],\n    [\"personalizationData\", \"\"],\n    [\"resultsURL\", \"\"],\n    [\"queryTag\", \"\"],\n    [\"properties\", \"\"],\n    [\"queryTemplatePropertiesUrl\", \"\"],\n    [\"reorderingRules\", \"\"],\n    [\"hitHighlightedMultivaluePropertyLimit\", \"\"],\n    [\"collapseSpecification\", \"\"],\n    [\"uiLanguage\", \"\"],\n    [\"desiredSnippetLength\", \"\"],\n    [\"maxSnippetLength\", \"\"],\n    [\"summaryLength\", \"\"],\n]);\n\nconst props = new Map<string, string>([]);\n\nfunction toPropCase(str: string) {\n    return str.replace(/^(.)/, ($1) => $1.toUpperCase());\n}\n\n/**\n * Creates a new instance of the SearchQueryBuilder\n * \n * @param queryText Initial query text\n * @param _query Any initial query configuration\n */\nexport function SearchQueryBuilder(queryText = \"\", _query = {}): ISearchQueryBuilder {\n\n    return new Proxy(<any>{\n        query: Object.assign({\n            Querytext: queryText,\n        }, _query),\n    },\n        {\n            get(self, propertyKey, proxy) {\n\n                const pk = propertyKey.toString();\n\n                if (pk === \"toSearchQuery\") {\n                    return () => self.query;\n                }\n\n                if (funcs.has(pk)) {\n                    return (...value: any[]) => {\n                        const mappedPk = funcs.get(pk);\n                        self.query[mappedPk.length > 0 ? mappedPk : toPropCase(pk)] = value.length > 1 ? value : value[0];\n                        return proxy;\n                    };\n                }\n                const propKey = props.has(pk) ? props.get(pk) : toPropCase(pk);\n                self.query[propKey] = true;\n                return proxy;\n            },\n        });\n}\n\nexport type SearchQueryInit = string | SearchQuery | ISearchQueryBuilder;\n\n/**\n * Describes the search API\n *\n */\n@defaultPath(\"_api/search/postquery\")\nexport class Search extends SharePointQueryableInstance {\n\n    /**\n     * @returns Promise\n     */\n    public execute(queryInit: SearchQueryInit): Promise<SearchResults> {\n\n        const query = this.parseQuery(queryInit);\n\n        const postBody = jsS({\n            request: extend(\n                metadata(\"Microsoft.Office.Server.Search.REST.SearchRequest\"),\n                Object.assign(\n                    {},\n                    query,\n                    {\n                        HitHighlightedProperties: this.fixArrProp(query.HitHighlightedProperties),\n                        Properties: this.fixArrProp(query.Properties),\n                        RefinementFilters: this.fixArrProp(query.RefinementFilters),\n                        ReorderingRules: this.fixArrProp(query.ReorderingRules),\n                        SelectProperties: this.fixArrProp(query.SelectProperties),\n                        SortList: this.fixArrProp(query.SortList),\n                    })),\n        });\n\n        // if we are using caching with this search request, then we need to handle some work upfront to enable that\n        if (this._useCaching) {\n\n            // force use of the cache for this request if .usingCaching was called\n            this._forceCaching = true;\n\n            // because all the requests use the same url they would collide in the cache we use a special key\n            const cacheKey = `PnPjs.SearchWithCaching(${getHashCode(postBody)})`;\n\n            if (objectDefinedNotNull(this._cachingOptions)) {\n                // if our key ends in the postquery url we overwrite it\n                if (/\\/_api\\/search\\/postquery$/i.test(this._cachingOptions.key)) {\n                    this._cachingOptions.key = cacheKey;\n                }\n            } else {\n                this._cachingOptions = new CachingOptions(cacheKey);\n            }\n        }\n\n        return this.postCore({ body: postBody }).then((data) => new SearchResults(data, this.toUrl(), query));\n    }\n\n    /**\n     * Fix array property\n     *\n     * @param prop property to fix for container struct\n     */\n    private fixArrProp(prop: any): { results: any[] } {\n        if (typeof prop === \"undefined\") {\n            return ({ results: [] });\n        }\n        prop = isArray(prop) ? prop : [prop];\n        return hOP(prop, \"results\") ? prop : { results: prop };\n    }\n\n    /**\n     * Translates one of the query initializers into a SearchQuery instance\n     * \n     * @param query \n     */\n    private parseQuery(query: SearchQueryInit): SearchQuery {\n\n        let finalQuery: SearchQuery;\n\n        if (typeof query === \"string\") {\n            finalQuery = { Querytext: query };\n        } else if ((query as ISearchQueryBuilder).toSearchQuery) {\n            finalQuery = (query as ISearchQueryBuilder).toSearchQuery();\n        } else {\n            finalQuery = <SearchQuery>query;\n        }\n\n        return finalQuery;\n    }\n}\n\n/**\n * Describes the SearchResults class, which returns the formatted and raw version of the query response\n */\nexport class SearchResults {\n\n    /**\n     * Creates a new instance of the SearchResult class\n     *\n     */\n    constructor(rawResponse: any,\n        private _url: string,\n        private _query: SearchQuery,\n        private _raw: SearchResponse = null,\n        private _primary: SearchResult[] = null) {\n\n        this._raw = rawResponse.postquery ? rawResponse.postquery : rawResponse;\n    }\n\n    public get ElapsedTime(): number {\n        return this.RawSearchResults.ElapsedTime;\n    }\n\n    public get RowCount(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.RowCount;\n    }\n\n    public get TotalRows(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.TotalRows;\n    }\n\n    public get TotalRowsIncludingDuplicates(): number {\n        return this.RawSearchResults.PrimaryQueryResult.RelevantResults.TotalRowsIncludingDuplicates;\n    }\n\n    public get RawSearchResults(): SearchResponse {\n        return this._raw;\n    }\n\n    public get PrimarySearchResults(): SearchResult[] {\n        if (this._primary === null) {\n            this._primary = this.formatSearchResults(this._raw.PrimaryQueryResult.RelevantResults.Table.Rows);\n        }\n        return this._primary;\n    }\n\n    /**\n     * Gets a page of results\n     *\n     * @param pageNumber Index of the page to return. Used to determine StartRow\n     * @param pageSize Optional, items per page (default = 10)\n     */\n    public getPage(pageNumber: number, pageSize?: number): Promise<SearchResults> {\n\n        // if we got all the available rows we don't have another page\n        if (this.TotalRows < this.RowCount) {\n            return Promise.resolve(null);\n        }\n\n        // if pageSize is supplied, then we use that regardless of any previous values\n        // otherwise get the previous RowLimit or default to 10\n        const rows = pageSize !== undefined ? pageSize : hOP(this._query, \"RowLimit\") ? this._query.RowLimit : 10;\n\n        const query: SearchQuery = extend(this._query, {\n            RowLimit: rows,\n            StartRow: rows * (pageNumber - 1),\n        });\n\n        // we have reached the end\n        if (query.StartRow > this.TotalRows) {\n            return Promise.resolve(null);\n        }\n\n        const search = new Search(this._url, null);\n        return search.execute(query);\n    }\n\n    /**\n     * Formats a search results array\n     *\n     * @param rawResults The array to process\n     */\n    protected formatSearchResults(rawResults: any): SearchResult[] {\n\n        const results = new Array<SearchResult>();\n        const tempResults = rawResults.results ? rawResults.results : rawResults;\n\n        for (const tempResult of tempResults) {\n\n            const cells: { Key: string, Value: any }[] = tempResult.Cells.results ? tempResult.Cells.results : tempResult.Cells;\n\n            results.push(cells.reduce((res, cell) => {\n\n                Object.defineProperty(res, cell.Key,\n                    {\n                        configurable: false,\n                        enumerable: true,\n                        value: cell.Value,\n                        writable: false,\n                    });\n\n                return res;\n\n            }, {}));\n        }\n\n        return results;\n    }\n}\n\n/**\n * Describes the SearchQuery interface\n */\nexport interface SearchQuery {\n\n    /**\n     * A string that contains the text for the search query.\n     */\n    Querytext?: string;\n\n    /**\n     * A string that contains the text that replaces the query text, as part of a query transform.\n     */\n    QueryTemplate?: string;\n\n    /**\n     * A Boolean value that specifies whether the result tables that are returned for\n     * the result block are mixed with the result tables that are returned for the original query.\n     */\n    EnableInterleaving?: boolean;\n\n    /**\n     * A Boolean value that specifies whether stemming is enabled.\n     */\n    EnableStemming?: boolean;\n\n    /**\n     * A Boolean value that specifies whether duplicate items are removed from the results.\n     */\n    TrimDuplicates?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the exact terms in the search query are used to find matches, or if nicknames are used also.\n     */\n    EnableNicknames?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the query uses the FAST Query Language (FQL).\n     */\n    EnableFQL?: boolean;\n\n    /**\n     * A Boolean value that specifies whether the phonetic forms of the query terms are used to find matches.\n     */\n    EnablePhonetic?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to perform result type processing for the query.\n     */\n    BypassResultTypes?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to return best bet results for the query.\n     * This parameter is used only when EnableQueryRules is set to true, otherwise it is ignored.\n     */\n    ProcessBestBets?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to enable query rules for the query.\n     */\n    EnableQueryRules?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to sort search results.\n     */\n    EnableSorting?: boolean;\n\n    /**\n     * Specifies whether to return block rank log information in the BlockRankLog property of the interleaved result table.\n     * A block rank log contains the textual information on the block score and the documents that were de-duplicated.\n     */\n    GenerateBlockRankLog?: boolean;\n\n    /**\n     * The result source ID to use for executing the search query.\n     */\n    SourceId?: string;\n\n    /**\n     * The ID of the ranking model to use for the query.\n     */\n    RankingModelId?: string;\n\n    /**\n     * The first row that is included in the search results that are returned.\n     * You use this parameter when you want to implement paging for search results.\n     */\n    StartRow?: number;\n\n    /**\n     * The maximum number of rows overall that are returned in the search results.\n     * Compared to RowsPerPage, RowLimit is the maximum number of rows returned overall.\n     */\n    RowLimit?: number;\n\n    /**\n     * The maximum number of rows to return per page.\n     * Compared to RowLimit, RowsPerPage refers to the maximum number of rows to return per page,\n     * and is used primarily when you want to implement paging for search results.\n     */\n    RowsPerPage?: number;\n\n    /**\n     * The managed properties to return in the search results.\n     */\n    SelectProperties?: string[];\n\n    /**\n     * The locale ID (LCID) for the query.\n     */\n    Culture?: number;\n\n    /**\n     * The set of refinement filters used when issuing a refinement query (FQL)\n     */\n    RefinementFilters?: string[];\n\n    /**\n     * The set of refiners to return in a search result.\n     */\n    Refiners?: string;\n\n    /**\n     * The additional query terms to append to the query.\n     */\n    HiddenConstraints?: string;\n\n    /**\n     * The list of properties by which the search results are ordered.\n     */\n    SortList?: Sort[];\n\n    /**\n     * The amount of time in milliseconds before the query request times out.\n     */\n    Timeout?: number;\n\n    /**\n     * The properties to highlight in the search result summary when the property value matches the search terms entered by the user.\n     */\n    HitHighlightedProperties?: string[];\n\n    /**\n     * The type of the client that issued the query.\n     */\n    ClientType?: string;\n\n    /**\n     * The GUID for the user who submitted the search query.\n     */\n    PersonalizationData?: string;\n\n    /**\n     * The URL for the search results page.\n     */\n    ResultsUrl?: string;\n\n    /**\n     * Custom tags that identify the query. You can specify multiple query tags\n     */\n    QueryTag?: string;\n\n    /**\n     * Properties to be used to configure the search query\n     */\n    Properties?: SearchProperty[];\n\n    /**\n     *  A Boolean value that specifies whether to return personal favorites with the search results.\n     */\n    ProcessPersonalFavorites?: boolean;\n\n    /**\n     * The location of the queryparametertemplate.xml file. This file is used to enable anonymous users to make Search REST queries.\n     */\n    QueryTemplatePropertiesUrl?: string;\n\n    /**\n     * Special rules for reordering search results.\n     * These rules can specify that documents matching certain conditions are ranked higher or lower in the results.\n     * This property applies only when search results are sorted based on rank.\n     */\n    ReorderingRules?: ReorderingRule[];\n\n    /**\n     * The number of properties to show hit highlighting for in the search results.\n     */\n    HitHighlightedMultivaluePropertyLimit?: number;\n\n    /**\n     * A Boolean value that specifies whether the hit highlighted properties can be ordered.\n     */\n    EnableOrderingHitHighlightedProperty?: boolean;\n\n    /**\n     * The managed properties that are used to determine how to collapse individual search results.\n     * Results are collapsed into one or a specified number of results if they match any of the individual collapse specifications.\n     * In a collapse specification, results are collapsed if their properties match all individual properties in the collapse specification.\n     */\n    CollapseSpecification?: string;\n\n    /**\n     * The locale identifier (LCID) of the user interface\n     */\n    UIlanguage?: number;\n\n    /**\n     * The preferred number of characters to display in the hit-highlighted summary generated for a search result.\n     */\n    DesiredSnippetLength?: number;\n\n    /**\n     * The maximum number of characters to display in the hit-highlighted summary generated for a search result.\n     */\n    MaxSnippetLength?: number;\n\n    /**\n     * The number of characters to display in the result summary for a search result.\n     */\n    SummaryLength?: number;\n\n}\n\n/**\n * Provides hints at the properties which may be available on the result object\n */\nexport interface SearchResult {\n\n    Rank?: number;\n    DocId?: number;\n    WorkId?: number;\n    Title?: string;\n    Author?: string;\n    Size?: number;\n    Path?: string;\n    Description?: string;\n    Write?: Date;\n    LastModifiedTime?: Date;\n    CollapsingStatus?: number;\n    HitHighlightedSummary?: string;\n    HitHighlightedProperties?: string;\n    contentclass?: string;\n    PictureThumbnailURL?: string;\n    ServerRedirectedURL?: string;\n    ServerRedirectedEmbedURL?: string;\n    ServerRedirectedPreviewURL?: string;\n    FileExtension?: string;\n    ContentTypeId?: string;\n    ParentLink?: string;\n    ViewsLifetime?: number;\n    ViewsRecent?: number;\n    SectionNames?: string;\n    SectionIndexes?: string;\n    SiteLogo?: string;\n    SiteDescription?: string;\n    importance?: number;\n    SiteName?: string;\n    IsDocument?: boolean;\n    FileType?: string;\n    IsContainer?: boolean;\n    WebTemplate?: string;\n    SPWebUrl?: string;\n    UniqueId?: string;\n    ProgId?: string;\n    OriginalPath?: string;\n    RenderTemplateId?: string;\n    PartitionId?: string;\n    UrlZone?: number;\n    Culture?: string;\n}\n\nexport interface SearchResponse {\n    ElapsedTime: number;\n    Properties?: { Key: string, Value: any, ValueType: string }[];\n    PrimaryQueryResult?: ResultTableCollection;\n    SecondaryQueryResults?: ResultTableCollection;\n    SpellingSuggestion?: string;\n    TriggeredRules?: any[];\n}\n\nexport interface ResultTableCollection {\n\n    QueryErrors?: Map<string, any>;\n    QueryId?: string;\n    QueryRuleId?: string;\n    CustomResults?: ResultTable;\n    RefinementResults?: ResultTable;\n    RelevantResults?: ResultTable;\n    SpecialTermResults?: ResultTable;\n}\n\nexport interface IRefiner {\n    Name: string;\n    Entries: { RefinementCount: string; RefinementName: string; RefinementToken: string; RefinementValue: string; }[];\n}\nexport interface ResultTable {\n    GroupTemplateId?: string;\n    ItemTemplateId?: string;\n    Properties?: { Key: string, Value: any, ValueType: string }[];\n    Table?: { Rows: { Cells: { Key: string, Value: any, ValueType: string }[] }[] };\n    Refiners?: IRefiner[];\n    ResultTitle?: string;\n    ResultTitleUrl?: string;\n    RowCount?: number;\n    TableType?: string;\n    TotalRows?: number;\n    TotalRowsIncludingDuplicates?: number;\n}\n\n/**\n * Defines how search results are sorted.\n */\nexport interface Sort {\n\n    /**\n     * The name for a property by which the search results are ordered.\n     */\n    Property: string;\n\n    /**\n     * The direction in which search results are ordered.\n     */\n    Direction: SortDirection;\n}\n\n/**\n * Defines one search property\n */\nexport interface SearchProperty {\n    Name: string;\n    Value: SearchPropertyValue;\n}\n\n/**\n * Defines one search property value. Set only one of StrlVal/BoolVal/IntVal/StrArray.\n */\nexport interface SearchPropertyValue {\n    StrVal?: string;\n    BoolVal?: boolean;\n    IntVal?: number;\n    StrArray?: string[];\n    QueryPropertyValueTypeIndex: QueryPropertyValueType;\n}\n\n/**\n * defines the SortDirection enum\n */\nexport enum SortDirection {\n    Ascending = 0,\n    Descending = 1,\n    FQLFormula = 2,\n}\n\n/**\n * Defines how ReorderingRule interface, used for reordering results\n */\nexport interface ReorderingRule {\n\n    /**\n     * The value to match on\n     */\n    MatchValue: string;\n\n    /**\n     * The rank boosting\n     */\n    Boost: number;\n\n    /**\n    * The rank boosting\n    */\n    MatchType: ReorderingRuleMatchType;\n}\n\n/**\n * defines the ReorderingRuleMatchType  enum\n */\nexport enum ReorderingRuleMatchType {\n    ResultContainsKeyword = 0,\n    TitleContainsKeyword = 1,\n    TitleMatchesKeyword = 2,\n    UrlStartsWith = 3,\n    UrlExactlyMatches = 4,\n    ContentTypeIs = 5,\n    FileExtensionMatches = 6,\n    ResultHasTag = 7,\n    ManualCondition = 8,\n}\n\n/**\n * Specifies the type value for the property\n */\nexport enum QueryPropertyValueType {\n    None = 0,\n    StringType = 1,\n    Int32Type = 2,\n    BooleanType = 3,\n    StringArrayType = 4,\n    UnSupportedType = 5,\n}\n\nexport class SearchBuiltInSourceId {\n    public static readonly Documents = \"e7ec8cee-ded8-43c9-beb5-436b54b31e84\";\n    public static readonly ItemsMatchingContentType = \"5dc9f503-801e-4ced-8a2c-5d1237132419\";\n    public static readonly ItemsMatchingTag = \"e1327b9c-2b8c-4b23-99c9-3730cb29c3f7\";\n    public static readonly ItemsRelatedToCurrentUser = \"48fec42e-4a92-48ce-8363-c2703a40e67d\";\n    public static readonly ItemsWithSameKeywordAsThisItem = \"5c069288-1d17-454a-8ac6-9c642a065f48\";\n    public static readonly LocalPeopleResults = \"b09a7990-05ea-4af9-81ef-edfab16c4e31\";\n    public static readonly LocalReportsAndDataResults = \"203fba36-2763-4060-9931-911ac8c0583b\";\n    public static readonly LocalSharePointResults = \"8413cd39-2156-4e00-b54d-11efd9abdb89\";\n    public static readonly LocalVideoResults = \"78b793ce-7956-4669-aa3b-451fc5defebf\";\n    public static readonly Pages = \"5e34578e-4d08-4edc-8bf3-002acf3cdbcc\";\n    public static readonly Pictures = \"38403c8c-3975-41a8-826e-717f2d41568a\";\n    public static readonly Popular = \"97c71db1-58ce-4891-8b64-585bc2326c12\";\n    public static readonly RecentlyChangedItems = \"ba63bbae-fa9c-42c0-b027-9a878f16557c\";\n    public static readonly RecommendedItems = \"ec675252-14fa-4fbe-84dd-8d098ed74181\";\n    public static readonly Wiki = \"9479bf85-e257-4318-b5a8-81a180f5faa1\";\n}\n","import {\n    SharePointQueryableInstance,\n    defaultPath,\n} from \"./sharepointqueryable\";\n\nimport { jsS, hOP } from \"@pnp/common\";\nimport { metadata } from \"./utils/metadata\";\n\nexport interface SocialMethods {\n    my: MySocialQueryMethods;\n    getFollowedSitesUri(): Promise<string>;\n    getFollowedDocumentsUri(): Promise<string>;\n    follow(actorInfo: SocialActorInfo): Promise<SocialFollowResult>;\n    isFollowed(actorInfo: SocialActorInfo): Promise<boolean>;\n    stopFollowing(actorInfo: SocialActorInfo): Promise<void>;\n}\n\n/**\n * Exposes social following methods\n */\n@defaultPath(\"_api/social.following\")\nexport class SocialQuery extends SharePointQueryableInstance implements SocialMethods {\n\n    public get my(): MySocialQueryMethods {\n        return new MySocialQuery(this);\n    }\n\n    /**\n     * Gets a URI to a site that lists the current user's followed sites.\n     */\n    public getFollowedSitesUri(): Promise<string> {\n        return this.clone(SocialQuery, \"FollowedSitesUri\").get().then(r => {\n            return r.FollowedSitesUri || r;\n        });\n    }\n\n    /**\n     * Gets a URI to a site that lists the current user's followed documents.\n     */\n    public getFollowedDocumentsUri(): Promise<string> {\n        return this.clone(SocialQuery, \"FollowedDocumentsUri\").get().then(r => {\n            return r.FollowedDocumentsUri || r;\n        });\n    }\n\n    /**\n     * Makes the current user start following a user, document, site, or tag\n     *\n     * @param actorInfo The actor to start following\n     */\n    public follow(actorInfo: SocialActorInfo): Promise<SocialFollowResult> {\n        return this.clone(SocialQuery, \"follow\").postCore({ body: this.createSocialActorInfoRequestBody(actorInfo) });\n    }\n\n    /**\n     * Indicates whether the current user is following a specified user, document, site, or tag\n     *\n     * @param actorInfo The actor to find the following status for\n     */\n    public isFollowed(actorInfo: SocialActorInfo): Promise<boolean> {\n        return this.clone(SocialQuery, \"isfollowed\").postCore({ body: this.createSocialActorInfoRequestBody(actorInfo) });\n    }\n\n    /**\n     * Makes the current user stop following a user, document, site, or tag\n     *\n     * @param actorInfo The actor to stop following\n     */\n    public stopFollowing(actorInfo: SocialActorInfo): Promise<void> {\n        return this.clone(SocialQuery, \"stopfollowing\").postCore({ body: this.createSocialActorInfoRequestBody(actorInfo) });\n    }\n\n    /**\n     * Creates SocialActorInfo request body\n     *\n     * @param actorInfo The actor to create request body\n     */\n    private createSocialActorInfoRequestBody(actorInfo: SocialActorInfo): string {\n        return jsS({\n            \"actor\":\n                Object.assign(metadata(\"SP.Social.SocialActorInfo\"), {\n                    Id: null,\n                }, actorInfo),\n        });\n    }\n}\n\n/**\n * Defines the public methods exposed by the my endpoint\n */\nexport interface MySocialQueryMethods {\n    /**\n     * Gets this user's data\n     */\n    get(): Promise<MySocialData>;\n    /**\n     * Gets users, documents, sites, and tags that the current user is following.\n     * \n     * @param types Bitwise set of SocialActorTypes to retrieve\n     */\n    followed(types: SocialActorTypes): Promise<SocialActor[]>;\n    /**\n     * Gets the count of users, documents, sites, and tags that the current user is following.\n     * \n     * @param types Bitwise set of SocialActorTypes to retrieve\n     */\n    followedCount(types: SocialActorTypes): Promise<number>;\n    /**\n     * Gets the users who are following the current user.\n     */\n    followers(): Promise<SocialActor[]>;\n    /**\n     * Gets users who the current user might want to follow.\n     */\n    suggestions(): Promise<SocialActor[]>;\n}\n\n@defaultPath(\"my\")\nexport class MySocialQuery extends SharePointQueryableInstance implements MySocialQueryMethods {\n\n    /**\n     * Gets users, documents, sites, and tags that the current user is following.\n     * \n     * @param types Bitwise set of SocialActorTypes to retrieve\n     */\n    public followed(types: SocialActorTypes): Promise<SocialActor[]> {\n        return this.clone(MySocialQuery, `followed(types=${types})`).get().then(r => {\n            return hOP(r, \"Followed\") ? r.Followed.results : r;\n        });\n    }\n\n    /**\n     * Gets the count of users, documents, sites, and tags that the current user is following.\n     * \n     * @param types Bitwise set of SocialActorTypes to retrieve\n     */\n    public followedCount(types: SocialActorTypes): Promise<number> {\n        return this.clone(MySocialQuery, `followedcount(types=${types})`).get().then(r => {\n            return r.FollowedCount || r;\n        });\n    }\n\n    /**\n     * Gets the users who are following the current user.\n     */\n    public followers(): Promise<SocialActor[]> {\n        return this.clone(MySocialQuery, \"followers\").get().then(r => {\n            return hOP(r, \"Followers\") ? r.Followers.results : r;\n        });\n    }\n\n    /**\n     * Gets users who the current user might want to follow.\n     */\n    public suggestions(): Promise<SocialActor[]> {\n        return this.clone(MySocialQuery, \"suggestions\").get().then(r => {\n            return hOP(r, \"Suggestions\") ? r.Suggestions.results : r;\n        });\n    }\n}\n\n/**\n * Social actor info\n *\n */\nexport interface SocialActorInfo {\n    AccountName?: string;\n    ActorType: SocialActorType;\n    ContentUri?: string;\n    Id?: string;\n    TagGuid?: string;\n}\n\n/**\n * Social actor type\n *\n */\nexport const enum SocialActorType {\n    User,\n    Document,\n    Site,\n    Tag,\n}\n\n/**\n * Social actor type\n *\n */\n/* tslint:disable:no-bitwise */\nexport const enum SocialActorTypes {\n    None = 0,\n    User = 1 << SocialActorType.User,\n    Document = 1 << SocialActorType.Document,\n    Site = 1 << SocialActorType.Site,\n    Tag = 1 << SocialActorType.Tag,\n    /**\n     * The set excludes documents and sites that do not have feeds.\n     */\n    ExcludeContentWithoutFeeds = 268435456,\n    /**\n     * The set includes group sites\n     */\n    IncludeGroupsSites = 536870912,\n    /**\n     * The set includes only items created within the last 24 hours\n     */\n    WithinLast24Hours = 1073741824,\n}\n/* tslint:enable */\n\n/**\n * Result from following\n *\n */\nexport const enum SocialFollowResult {\n    Ok = 0,\n    AlreadyFollowing = 1,\n    LimitReached = 2,\n    InternalError = 3,\n}\n\n/**\n * Specifies an exception or status code.\n */\nexport const enum SocialStatusCode {\n    /**\n     * The operation completed successfully\n     */\n    OK,\n    /**\n     * The request is invalid.\n     */\n    InvalidRequest,\n    /**\n     *  The current user is not authorized to perform the operation.\n     */\n    AccessDenied,\n    /**\n     * The target of the operation was not found.\n     */\n    ItemNotFound,\n    /**\n     * The operation is invalid for the target's current state. \n     */\n    InvalidOperation,\n    /**\n     * The operation completed without modifying the target.\n     */\n    ItemNotModified,\n    /**\n     * The operation failed because an internal error occurred.\n     */\n    InternalError,\n    /**\n     * The operation failed because the server could not access the distributed cache.\n     */\n    CacheReadError,\n    /**\n     * The operation succeeded but the server could not update the distributed cache.\n     */\n    CacheUpdateError,\n    /**\n     * No personal site exists for the current user, and no further information is available.\n     */\n    PersonalSiteNotFound,\n    /**\n     * No personal site exists for the current user, and a previous attempt to create one failed.\n     */\n    FailedToCreatePersonalSite,\n    /**\n     * No personal site exists for the current user, and a previous attempt to create one was not authorized.\n     */\n    NotAuthorizedToCreatePersonalSite,\n    /**\n     * No personal site exists for the current user, and no attempt should be made to create one.\n     */\n    CannotCreatePersonalSite,\n    /**\n     * The operation was rejected because an internal limit had been reached.\n     */\n    LimitReached,\n    /**\n     * The operation failed because an error occurred during the processing of the specified attachment.\n     */\n    AttachmentError,\n    /**\n     * The operation succeeded with recoverable errors; the returned data is incomplete.\n     */\n    PartialData,\n    /**\n     * A required SharePoint feature is not enabled.\n     */\n    FeatureDisabled,\n    /**\n     * The site's storage quota has been exceeded.\n     */\n    StorageQuotaExceeded,\n    /**\n     * The operation failed because the server could not access the database.\n     */\n    DatabaseError,\n}\n\nexport interface SocialActor {\n    /**\n     * Gets the actor type.\n     */\n    ActorType: SocialActorType;\n    /**\n     * Gets the actor's unique identifier.\n     */\n    Id: string;\n    /**\n     * Gets the actor's canonical URI.\n     */\n    Uri: string;\n    /**\n     * Gets the actor's display name.\n     */\n    Name: string;\n    /**\n     * Returns true if the current user is following the actor, false otherwise.\n     */\n    IsFollowed: boolean;\n    /**\n     * Gets a code that indicates recoverable errors that occurred during actor retrieval\n     */\n    Status: SocialStatusCode;\n    /**\n     * Returns true if the Actor can potentially be followed, false otherwise.\n     */\n    CanFollow: boolean;\n    /**\n     * Gets the actor's image URI. Only valid when ActorType is User, Document, or Site\n     */\n    ImageUri: string;\n    /**\n     * Gets the actor's account name. Only valid when ActorType is User\n     */\n    AccountName: string;\n    /**\n     * Gets the actor's email address. Only valid when ActorType is User\n     */\n    EmailAddress: string;\n    /**\n     * Gets the actor's title. Only valid when ActorType is User\n     */\n    Title: string;\n    /**\n     * Gets the text of the actor's most recent post. Only valid when ActorType is User\n     */\n    StatusText: string;\n    /**\n     * Gets the URI of the actor's personal site. Only valid when ActorType is User\n     */\n    PersonalSiteUri: string;\n    /**\n     * Gets the URI of the actor's followed content folder. Only valid when this represents the current user\n     */\n    FollowedContentUri: string;\n    /**\n     * Gets the actor's content URI. Only valid when ActorType is Document, or Site\n     */\n    ContentUri: string;\n    /**\n     * Gets the actor's library URI. Only valid when ActorType is Document\n     */\n    LibraryUri: string;\n    /**\n     * Gets the actor's tag GUID. Only valid when ActorType is Tag\n     */\n    TagGuid: string;\n}\n\n/**\n * Defines the properties retrurned from the my endpoint\n */\nexport interface MySocialData {\n    SocialActor: SocialActor;\n    MyFollowedDocumentsUri: string;\n    MyFollowedSitesUri: string;\n}\n","import { SharePointQueryableInstance, defaultPath } from \"./sharepointqueryable\";\nimport { hOP } from \"@pnp/common\";\n\n/**\n * Defines a query execute against the search/suggest endpoint (see https://msdn.microsoft.com/en-us/library/office/dn194079.aspx)\n */\nexport interface SearchSuggestQuery {\n\n    [key: string]: string | number | boolean;\n\n    /**\n     * A string that contains the text for the search query.\n     */\n    querytext: string;\n\n    /**\n     * The number of query suggestions to retrieve. Must be greater than zero (0). The default value is 5.\n     */\n    count?: number;\n\n    /**\n     * The number of personal results to retrieve. Must be greater than zero (0). The default value is 5.\n     */\n    personalCount?: number;\n\n    /**\n     * A Boolean value that specifies whether to retrieve pre-query or post-query suggestions. true to return pre-query suggestions; otherwise, false. The default value is false.\n     */\n    preQuery?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to hit-highlight or format in bold the query suggestions. true to format in bold the terms in the returned query suggestions\n     * that match terms in the specified query; otherwise, false. The default value is true.\n     */\n    hitHighlighting?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to capitalize the first letter in each term in the returned query suggestions. true to capitalize the first letter in each term;\n     * otherwise, false. The default value is false.\n     */\n    capitalize?: boolean;\n\n    /**\n     * The locale ID (LCID) for the query (see https://msdn.microsoft.com/en-us/library/cc233982.aspx).\n     */\n    culture?: string;\n\n    /**\n     * A Boolean value that specifies whether stemming is enabled. true to enable stemming; otherwise, false. The default value is true.\n     */\n    stemming?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to include people names in the returned query suggestions. true to include people names in the returned query suggestions;\n     * otherwise, false. The default value is true.\n     */\n    includePeople?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to turn on query rules for this query. true to turn on query rules; otherwise, false. The default value is true.\n     */\n    queryRules?: boolean;\n\n    /**\n     * A Boolean value that specifies whether to return query suggestions for prefix matches. true to return query suggestions based on prefix matches, otherwise, false when\n     * query suggestions should match the full query word.\n     */\n    prefixMatch?: boolean;\n}\n\n@defaultPath(\"_api/search/suggest\")\nexport class SearchSuggest extends SharePointQueryableInstance {\n\n    public execute(query: SearchSuggestQuery): Promise<SearchSuggestResult> {\n        this.mapQueryToQueryString(query);\n        return this.get().then(response => {\n            const mapper = hOP(response, \"suggest\") ? (s: string) => response.suggest[s].results : (s: string) => response[s];\n            return {\n                PeopleNames: mapper(\"PeopleNames\"),\n                PersonalResults: mapper(\"PersonalResults\"),\n                Queries: mapper(\"Queries\"),\n            };\n        });\n    }\n\n    private mapQueryToQueryString(query: SearchSuggestQuery): void {\n\n        const setProp = (q: SearchSuggestQuery) => (checkProp: string) => (sp: string) => {\n            if (hOP(q, checkProp)) {\n                this.query.set(sp, q[checkProp].toString());\n            }\n        };\n\n        this.query.set(\"querytext\", `'${query.querytext}'`);\n\n        const querySetter = setProp(query);\n\n        querySetter(\"count\")(\"inumberofquerysuggestions\");\n        querySetter(\"personalCount\")(\"inumberofresultsuggestions\");\n        querySetter(\"preQuery\")(\"fprequerysuggestions\");\n        querySetter(\"hitHighlighting\")(\"fhithighlighting\");\n        querySetter(\"capitalize\")(\"fcapitalizefirstletters\");\n        querySetter(\"culture\")(\"culture\");\n        querySetter(\"stemming\")(\"enablestemming\");\n        querySetter(\"includePeople\")(\"showpeoplenamesuggestions\");\n        querySetter(\"queryRules\")(\"enablequeryrules\");\n        querySetter(\"prefixMatch\")(\"fprefixmatchallterms\");\n    }\n}\n\nexport interface SearchSuggestResult {\n    readonly PeopleNames: string[];\n    readonly PersonalResults: PersonalResultSuggestion[];\n    readonly Queries: any[];\n}\n\nexport interface ESearchSuggestResult {\n    readonly PeopleNames: string[];\n    readonly PersonalResults: PersonalResultSuggestion[];\n    readonly Queries: any[];\n}\n\nexport interface PersonalResultSuggestion {\n    readonly HighlightedTitle?: string;\n    readonly IsBestBet?: boolean;\n    readonly Title?: string;\n    readonly TypeId?: string;\n    readonly Url?: string;\n}\n","import { SharePointQueryable, SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { ClientPeoplePickerQueryParameters, HashTagCollection, PeoplePickerEntity, UserProfile } from \"./types\";\nimport { extend, jsS } from \"@pnp/common\";\nimport { metadata } from \"./utils/metadata\";\n\nexport class UserProfileQuery extends SharePointQueryableInstance {\n\n    private clientPeoplePickerQuery: ClientPeoplePickerQuery;\n    private profileLoader: ProfileLoader;\n\n    /**\n     * Creates a new instance of the UserProfileQuery class\n     *\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this user profile query\n     */\n    constructor(baseUrl: string | SharePointQueryable, path = \"_api/sp.userprofiles.peoplemanager\") {\n        super(baseUrl, path);\n\n        this.clientPeoplePickerQuery = (new ClientPeoplePickerQuery(baseUrl)).configureFrom(this);\n        this.profileLoader = (new ProfileLoader(baseUrl)).configureFrom(this);\n    }\n\n    /**\n     * The url of the edit profile page for the current user\n     */\n    public get editProfileLink(): Promise<string> {\n        return this.clone(UserProfileQuery, \"EditProfileLink\").get();\n    }\n\n    /**\n     * A boolean value that indicates whether the current user's \"People I'm Following\" list is public\n     */\n    public get isMyPeopleListPublic(): Promise<boolean> {\n        return this.clone(UserProfileQuery, \"IsMyPeopleListPublic\").get();\n    }\n\n    /**\n     * A boolean value that indicates whether the current user is being followed by the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public amIFollowedBy(loginName: string): Promise<boolean> {\n        const q = this.clone(UserProfileQuery, \"amifollowedby(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * A boolean value that indicates whether the current user is following the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public amIFollowing(loginName: string): Promise<boolean> {\n        const q = this.clone(UserProfileQuery, \"amifollowing(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets tags that the current user is following\n     *\n     * @param maxCount The maximum number of tags to retrieve (default is 20)\n     */\n    public getFollowedTags(maxCount = 20): Promise<string[]> {\n        return this.clone(UserProfileQuery, `getfollowedtags(${maxCount})`).get();\n    }\n\n    /**\n     * Gets the people who are following the specified user\n     *\n     * @param loginName The account name of the user\n     */\n    public getFollowersFor(loginName: string): Promise<any[]> {\n        const q = this.clone(UserProfileQuery, \"getfollowersfor(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets the people who are following the current user\n     *\n     */\n    public get myFollowers(): SharePointQueryableCollection {\n        return new SharePointQueryableCollection(this, \"getmyfollowers\");\n    }\n\n    /**\n     * Gets user properties for the current user\n     *\n     */\n    public get myProperties(): SharePointQueryableInstance {\n        return new UserProfileQuery(this, \"getmyproperties\");\n    }\n\n    /**\n     * Gets the people who the specified user is following\n     *\n     * @param loginName The account name of the user.\n     */\n    public getPeopleFollowedBy(loginName: string): Promise<any[]> {\n        const q = this.clone(UserProfileQuery, \"getpeoplefollowedby(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets user properties for the specified user.\n     *\n     * @param loginName The account name of the user.\n     */\n    public getPropertiesFor(loginName: string): Promise<any> {\n        const q = this.clone(UserProfileQuery, \"getpropertiesfor(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Gets the 20 most popular hash tags over the past week, sorted so that the most popular tag appears first\n     *\n     */\n    public get trendingTags(): Promise<HashTagCollection> {\n        const q = this.clone(UserProfileQuery, null);\n        q.concat(\".gettrendingtags\");\n        return q.get();\n    }\n\n    /**\n     * Gets the specified user profile property for the specified user\n     *\n     * @param loginName The account name of the user\n     * @param propertyName The case-sensitive name of the property to get\n     */\n    public getUserProfilePropertyFor(loginName: string, propertyName: string): Promise<string> {\n        const q = this.clone(UserProfileQuery, `getuserprofilepropertyfor(accountname=@v, propertyname='${propertyName}')`);\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.get();\n    }\n\n    /**\n     * Removes the specified user from the user's list of suggested people to follow\n     *\n     * @param loginName The account name of the user\n     */\n    public hideSuggestion(loginName: string): Promise<void> {\n        const q = this.clone(UserProfileQuery, \"hidesuggestion(@v)\");\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\n        return q.postCore();\n    }\n\n    /**\n     * A boolean values that indicates whether the first user is following the second user\n     *\n     * @param follower The account name of the user who might be following the followee\n     * @param followee The account name of the user who might be followed by the follower\n     */\n    public isFollowing(follower: string, followee: string): Promise<boolean> {\n        const q = this.clone(UserProfileQuery, null);\n        q.concat(`.isfollowing(possiblefolloweraccountname=@v, possiblefolloweeaccountname=@y)`);\n        q.query.set(\"@v\", `'${encodeURIComponent(follower)}'`);\n        q.query.set(\"@y\", `'${encodeURIComponent(followee)}'`);\n        return q.get();\n    }\n\n    /**\n     * Uploads and sets the user profile picture (Users can upload a picture to their own profile only). Not supported for batching.\n     *\n     * @param profilePicSource Blob data representing the user's picture in BMP, JPEG, or PNG format of up to 4.76MB\n     */\n    public setMyProfilePic(profilePicSource: Blob): Promise<void> {\n\n        return new Promise<void>((resolve, reject) => {\n\n            let buffer: any = null;\n            const reader = new FileReader();\n            reader.onload = (e: any) => buffer = e.target.result;\n            reader.readAsArrayBuffer(profilePicSource);\n            const request = new UserProfileQuery(this, \"setmyprofilepicture\");\n            request.postCore({\n                body: String.fromCharCode.apply(null, <any>new Uint16Array(buffer)),\n            }).then(_ => resolve()).catch(e => reject(e));\n\n        });\n    }\n\n    /**\n     * Sets single value User Profile property\n     *\n     * @param accountName The account name of the user\n     * @param propertyName Property name\n     * @param propertyValue Property value\n     */\n    public setSingleValueProfileProperty(accountName: string, propertyName: string, propertyValue: string): Promise<void> {\n        const postBody: string = jsS({\n            accountName: accountName,\n            propertyName: propertyName,\n            propertyValue: propertyValue,\n        });\n\n        return this.clone(UserProfileQuery, \"SetSingleValueProfileProperty\")\n            .postCore({ body: postBody });\n    }\n\n    /**\n     * Sets multi valued User Profile property\n     *\n     * @param accountName The account name of the user\n     * @param propertyName Property name\n     * @param propertyValues Property values\n     */\n    public setMultiValuedProfileProperty(accountName: string, propertyName: string, propertyValues: string[]): Promise<void> {\n        const postBody: string = jsS({\n            accountName: accountName,\n            propertyName: propertyName,\n            propertyValues: propertyValues,\n        });\n\n        return this.clone(UserProfileQuery, \"SetMultiValuedProfileProperty\")\n            .postCore({ body: postBody });\n    }\n\n    /**\n     * Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only)\n     *\n     * @param emails The email addresses of the users to provision sites for\n     */\n    public createPersonalSiteEnqueueBulk(...emails: string[]): Promise<void> {\n        return this.profileLoader.createPersonalSiteEnqueueBulk(emails);\n    }\n\n    /**\n     * Gets the user profile of the site owner\n     *\n     */\n    public get ownerUserProfile(): Promise<UserProfile> {\n        return this.profileLoader.ownerUserProfile;\n    }\n\n    /**\n     * Gets the user profile for the current user\n     */\n    public get userProfile(): Promise<any> {\n        return this.profileLoader.userProfile;\n    }\n\n    /**\n     * Enqueues creating a personal site for this user, which can be used to share documents, web pages, and other files\n     *\n     * @param interactiveRequest true if interactively (web) initiated request, or false (default) if non-interactively (client) initiated request\n     */\n    public createPersonalSite(interactiveRequest = false): Promise<void> {\n        return this.profileLoader.createPersonalSite(interactiveRequest);\n    }\n\n    /**\n     * Sets the privacy settings for this profile\n     *\n     * @param share true to make all social data public; false to make all social data private\n     */\n    public shareAllSocialData(share: boolean): Promise<void> {\n        return this.profileLoader.shareAllSocialData(share);\n    }\n\n    /**\n     * Resolves user or group using specified query parameters\n     *\n     * @param queryParams The query parameters used to perform resolve\n     */\n    public clientPeoplePickerResolveUser(queryParams: ClientPeoplePickerQueryParameters): Promise<PeoplePickerEntity> {\n        return this.clientPeoplePickerQuery.clientPeoplePickerResolveUser(queryParams);\n    }\n\n    /**\n     * Searches for users or groups using specified query parameters\n     *\n     * @param queryParams The query parameters used to perform search\n     */\n    public clientPeoplePickerSearchUser(queryParams: ClientPeoplePickerQueryParameters): Promise<PeoplePickerEntity[]> {\n        return this.clientPeoplePickerQuery.clientPeoplePickerSearchUser(queryParams);\n    }\n}\n\n@defaultPath(\"_api/sp.userprofiles.profileloader.getprofileloader\")\nclass ProfileLoader extends SharePointQueryable {\n\n    /**\n     * Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only) Doesn't support batching\n     *\n     * @param emails The email addresses of the users to provision sites for\n     */\n    public createPersonalSiteEnqueueBulk(emails: string[]): Promise<void> {\n\n        return this.clone(ProfileLoader, \"createpersonalsiteenqueuebulk\", false).postCore({\n            body: jsS({ \"emailIDs\": emails }),\n        });\n    }\n\n    /**\n     * Gets the user profile of the site owner.\n     *\n     */\n    public get ownerUserProfile(): Promise<UserProfile> {\n        let q = this.getParent(ProfileLoader, this.parentUrl, \"_api/sp.userprofiles.profileloader.getowneruserprofile\");\n\n        if (this.hasBatch) {\n            q = q.inBatch(this.batch);\n        }\n\n        return q.postCore<UserProfile>();\n    }\n\n    /**\n     * Gets the user profile of the current user.\n     *\n     */\n    public get userProfile(): Promise<UserProfile> {\n        return this.clone(ProfileLoader, \"getuserprofile\").postCore<UserProfile>();\n    }\n\n    /**\n     * Enqueues creating a personal site for this user, which can be used to share documents, web pages, and other files.\n     *\n     * @param interactiveRequest true if interactively (web) initiated request, or false (default) if non-interactively (client) initiated request\n     */\n    public createPersonalSite(interactiveRequest = false): Promise<void> {\n        return this.clone(ProfileLoader, `getuserprofile/createpersonalsiteenque(${interactiveRequest})`).postCore();\n    }\n\n    /**\n     * Sets the privacy settings for this profile\n     *\n     * @param share true to make all social data public; false to make all social data private.\n     */\n    public shareAllSocialData(share: boolean): Promise<void> {\n        return this.clone(ProfileLoader, `getuserprofile/shareallsocialdata(${share})`).postCore();\n    }\n}\n\n@defaultPath(\"_api/sp.ui.applicationpages.clientpeoplepickerwebserviceinterface\")\nclass ClientPeoplePickerQuery extends SharePointQueryable {\n\n    /**\n     * Resolves user or group using specified query parameters\n     *\n     * @param queryParams The query parameters used to perform resolve\n     */\n    public clientPeoplePickerResolveUser(queryParams: ClientPeoplePickerQueryParameters): Promise<PeoplePickerEntity> {\n        const q = this.clone(ClientPeoplePickerQuery, null);\n        q.concat(\".clientpeoplepickerresolveuser\");\n        return q.postCore<string | { ClientPeoplePickerResolveUser: string }>({\n            body: this.createClientPeoplePickerQueryParametersRequestBody(queryParams),\n        })\n            .then(res => {\n                if (typeof res === \"object\") {\n                    return res.ClientPeoplePickerResolveUser;\n                }\n                return res;\n            })\n            .then(JSON.parse);\n    }\n\n    /**\n     * Searches for users or groups using specified query parameters\n     *\n     * @param queryParams The query parameters used to perform search\n     */\n    public clientPeoplePickerSearchUser(queryParams: ClientPeoplePickerQueryParameters): Promise<PeoplePickerEntity[]> {\n        const q = this.clone(ClientPeoplePickerQuery, null);\n        q.concat(\".clientpeoplepickersearchuser\");\n        return q.postCore<string | { ClientPeoplePickerSearchUser: string }>({\n            body: this.createClientPeoplePickerQueryParametersRequestBody(queryParams),\n        })\n            .then(res => {\n                if (typeof res === \"object\") {\n                    return res.ClientPeoplePickerSearchUser;\n                }\n                return res;\n            })\n            .then(JSON.parse);\n    }\n\n    /**\n     * Creates ClientPeoplePickerQueryParameters request body\n     *\n     * @param queryParams The query parameters to create request body\n     */\n    private createClientPeoplePickerQueryParametersRequestBody(queryParams: ClientPeoplePickerQueryParameters): string {\n        return jsS({\n            \"queryParams\":\n                extend(metadata(\"SP.UI.ApplicationPages.ClientPeoplePickerQueryParameters\"), queryParams),\n        });\n    }\n}\n","import { SharePointQueryable } from \"./sharepointqueryable\";\n\nexport interface SiteScriptInfo {\n    Id: string;\n    Title: string;\n    Description: string;\n    Content: string;\n    Version: string;\n}\n\nexport interface SiteScriptUpdateInfo {\n    Id: string;\n    Title?: string;\n    Description?: string;\n    Content?: string;\n    Version?: string;\n}\n\nexport interface SiteScriptUtilityMethods {\n    getSiteScripts(): Promise<SiteScriptInfo[]>;\n    createSiteScript(title: string, description: string, content: any): Promise<SiteScriptInfo>;\n    getSiteScriptMetadata(id: string): Promise<SiteScriptInfo>;\n    deleteSiteScript(id: string): Promise<void>;\n    updateSiteScript(siteScriptUpdateInfo: SiteScriptUpdateInfo, content?: any): Promise<SiteScriptInfo>;\n}\n\n/**\n * Implements the site script API REST methods\n *\n */\nexport class SiteScripts extends SharePointQueryable implements SiteScriptUtilityMethods {\n    /**\n     * Creates a new instance of the SiteScripts method class\n     *\n     * @param baseUrl The parent url provider\n     * @param methodName The static method name to call on the utility class\n     */\n    constructor(baseUrl: string | SharePointQueryable, methodName: string) {\n        super(SiteScripts.getBaseUrl(baseUrl), `_api/Microsoft.Sharepoint.Utilities.WebTemplateExtensions.SiteScriptUtility.${methodName}`);\n    }\n\n    private static getBaseUrl(candidate: string | SharePointQueryable) {\n        if (typeof candidate === \"string\") {\n            return candidate;\n        }\n\n        const c = candidate as SharePointQueryable;\n        const url = c.toUrl();\n        const index = url.indexOf(\"_api/\");\n        if (index < 0) {\n            return url;\n        }\n\n        return url.substr(0, index);\n    }\n\n    public execute<T>(props: any): Promise<T> {\n        return this.postCore<T>({\n            body: JSON.stringify(props),\n        });\n    }\n\n    /**\n     * Gets a list of information on all existing site scripts.\n     */\n    public getSiteScripts(): Promise<SiteScriptInfo[]> {\n        return this.clone(SiteScripts, \"GetSiteScripts\", true).execute<SiteScriptInfo[]>({});\n    }\n\n    /**\n     * Creates a new site script.\n     * \n     * @param title The display name of the site design.\n     * @param content JSON value that describes the script. For more information, see JSON reference.\n     */\n    public async createSiteScript(title: string, description: string, content: any): Promise<SiteScriptInfo> {\n        return await this.clone(SiteScripts,\n            `CreateSiteScript(Title=@title,Description=@desc)?@title='${encodeURIComponent(title)}'&@desc='${encodeURIComponent(description)}'`)\n            .execute<SiteScriptInfo>(content);\n    }\n\n    /**\n     * Gets information about a specific site script. It also returns the JSON of the script.\n     * \n     * @param id The ID of the site script to get information about.\n     */\n    public async getSiteScriptMetadata(id: string): Promise<SiteScriptInfo> {\n        return await this.clone(SiteScripts, \"GetSiteScriptMetadata\").execute<SiteScriptInfo>({ id: id });\n    }\n\n    /**\n     * Deletes a site script.\n     * \n     * @param id The ID of the site script to delete.\n     */\n    public async deleteSiteScript(id: string): Promise<void> {\n        await this.clone(SiteScripts, \"DeleteSiteScript\").execute<void>({ id: id });\n    }\n\n    /**\n     * Updates a site script with new values. In the REST call, all parameters are optional except the site script Id.\n     * \n     * @param siteScriptUpdateInfo Object that contains the information to update a site script. \n     *                             Make sure you stringify the content object or pass it in the second 'content' parameter\n     * @param content (Optional) A new JSON script defining the script actions. For more information, see Site design JSON schema.\n     */\n    public async updateSiteScript(siteScriptUpdateInfo: SiteScriptUpdateInfo, content?: any): Promise<SiteScriptInfo> {\n        if (content) {\n            siteScriptUpdateInfo.Content = JSON.stringify(content);\n        }\n\n        return await this.clone(SiteScripts, \"UpdateSiteScript\").execute<SiteScriptInfo>({ updateInfo: siteScriptUpdateInfo });\n    }\n}\n","import { SharePointQueryable } from \"./sharepointqueryable\";\n\nexport interface SiteDesignInfo {\n    /**\n     * The ID of the site design to apply.\n     */\n    Id: string;\n    /**\n     * The display name of the site design.\n     */\n    Title: string;\n    /**\n     * Identifies which base template to add the design to. Use the value 64 for the Team site template, and the value 68 for the Communication site template.\n     */\n    WebTemplate: string;\n    /**\n     * An array of one or more site scripts. Each is identified by an ID. The scripts will run in the order listed.\n     */\n    SiteScriptIds: string[];\n    /**\n     * The display description of site design.\n     */\n    Description: string;\n    /**\n     * The URL of a preview image. If none is specified, SharePoint uses a generic image.\n     */\n    PreviewImageUrl: string;\n    /**\n     * The alt text description of the image for accessibility.\n     */\n    PreviewImageAltText: string;\n    /**\n     * True if the site design is applied as the default site design; otherwise, false. \n     * For more information see Customize a default site design https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/customize-default-site-design.\n     */\n    IsDefault: boolean;\n    Version: string;\n}\n\nexport interface SiteDesignCreationInfo {\n    /**\n     * The display name of the site design.\n     */\n    Title: string;\n    /**\n     * Identifies which base template to add the design to. Use the value 64 for the Team site template, and the value 68 for the Communication site template.\n     */\n    WebTemplate: string;\n    /**\n     * An array of one or more site scripts. Each is identified by an ID. The scripts will run in the order listed.\n     */\n    SiteScriptIds?: string[];\n    /**\n     * (Optional) The display description of site design.\n     */\n    Description?: string;\n    /**\n     * (Optional) The URL of a preview image. If none is specified, SharePoint uses a generic image.\n     */\n    PreviewImageUrl?: string;\n    /**\n     * (Optional) The alt text description of the image for accessibility.\n     */\n    PreviewImageAltText?: string;\n    /**\n     * (Optional) True if the site design is applied as the default site design; otherwise, false. \n     * For more information see Customize a default site design https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/customize-default-site-design.\n     */\n    IsDefault?: boolean;\n}\n\nexport interface SiteDesignUpdateInfo {\n    /**\n     * The ID of the site design to apply.\n     */\n    Id: string;\n    /**\n     * (Optional) The new display name of the updated site design.\n     */\n    Title?: string;\n    /**\n     * (Optional) The new template to add the site design to. Use the value 64 for the Team site template, and the value 68 for the Communication site template.\n     */\n    WebTemplate?: string;\n    /**\n     * (Optional) A new array of one or more site scripts. Each is identified by an ID. The scripts run in the order listed.\n     */\n    SiteScriptIds?: string[];\n    /**\n     * (Optional) The new display description of the updated site design.\n     */\n    Description?: string;\n    /**\n     * (Optional) The new URL of a preview image.\n     */\n    PreviewImageUrl?: string;\n    /**\n     * (Optional) The new alt text description of the image for accessibility.\n     */\n    PreviewImageAltText?: string;\n    /**\n     * (Optional) True if the site design is applied as the default site design; otherwise, false. \n     * For more information see Customize a default site design https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/customize-default-site-design. \n     * If you had previously set the IsDefault parameter to TRUE and wish it to remain true, you must pass in this parameter again (otherwise it will be reset to FALSE).\n     */\n    IsDefault?: boolean;\n}\n\nexport interface SiteDesignPrincipals {\n    DisplayName: string;\n    PrincipalName: string;\n    Rights: number;\n}\n\nexport interface SiteDesignsUtilityMethods {\n    getSiteDesigns(): Promise<SiteDesignInfo[]>;\n    createSiteDesign(creationInfo: SiteDesignCreationInfo): Promise<SiteDesignInfo>;\n    applySiteDesign(siteDesignId: string, webUrl: string): Promise<void>;\n    getSiteDesignMetadata(id: string): Promise<SiteDesignInfo>;\n    updateSiteDesign(updateInfo: SiteDesignUpdateInfo): Promise<SiteDesignInfo>;\n    deleteSiteDesign(id: string): Promise<void>;\n    getSiteDesignRights(id: string): Promise<SiteDesignPrincipals[]>;\n    grantSiteDesignRights(id: string, principalNames: string[], grantedRights?: number): Promise<void>;\n    revokeSiteDesignRights(id: string, principalNames: string[]): Promise<void>;\n}\n\n/**\n * Implements the site designs API REST methods\n *\n */\nexport class SiteDesigns extends SharePointQueryable implements SiteDesignsUtilityMethods {\n    /**\n     * Creates a new instance of the SiteDesigns method class\n     *\n     * @param baseUrl The parent url provider\n     * @param methodName The static method name to call on the utility class\n     */\n    constructor(baseUrl: string | SharePointQueryable, methodName: string) {\n        super(SiteDesigns.getBaseUrl(baseUrl), `_api/Microsoft.Sharepoint.Utilities.WebTemplateExtensions.SiteScriptUtility.${methodName}`);\n    }\n\n    private static getBaseUrl(candidate: string | SharePointQueryable) {\n        if (typeof candidate === \"string\") {\n            return candidate;\n        }\n\n        const c = candidate as SharePointQueryable;\n        const url = c.toUrl();\n        const index = url.indexOf(\"_api/\");\n        if (index < 0) {\n            return url;\n        }\n\n        return url.substr(0, index);\n    }\n\n    public execute<T>(props: any): Promise<T> {\n        return this.postCore<T>({\n            body: JSON.stringify(props),\n            headers: {\n                \"Content-Type\": \"application/json;charset=utf-8\",\n            },\n        });\n    }\n\n    /**\n     * Creates a new site design available to users when they create a new site from the SharePoint home page.\n     * \n     * @param creationInfo A sitedesign creation information object\n     */\n    public async createSiteDesign(creationInfo: SiteDesignCreationInfo): Promise<SiteDesignInfo> {\n        return await this.clone(SiteDesigns, `CreateSiteDesign`).execute<SiteDesignInfo>({ info: creationInfo });\n    }\n\n    /**\n     * Applies a site design to an existing site collection.\n     *\n     * @param siteDesignId The ID of the site design to apply.\n     * @param webUrl The URL of the site collection where you want to apply the site design.\n     */\n    public async applySiteDesign(siteDesignId: string, webUrl: string): Promise<void> {\n        return await this.clone(SiteDesigns, `ApplySiteDesign`).execute<void>({ siteDesignId: siteDesignId, \"webUrl\": webUrl });\n    }\n\n    /**\n     * Gets a list of information about existing site designs.\n     */\n    public async getSiteDesigns(): Promise<SiteDesignInfo[]> {\n        return await this.clone(SiteDesigns, `GetSiteDesigns`).execute<SiteDesignInfo[]>({});\n    }\n\n    /**\n     * Gets information about a specific site design.\n     * @param id The ID of the site design to get information about.\n     */\n    public async getSiteDesignMetadata(id: string): Promise<SiteDesignInfo> {\n        return await this.clone(SiteDesigns, `GetSiteDesignMetadata`).execute<SiteDesignInfo>({ id: id });\n    }\n\n    /**\n     * Updates a site design with new values. In the REST call, all parameters are optional except the site script Id.\n     * If you had previously set the IsDefault parameter to TRUE and wish it to remain true, you must pass in this parameter again (otherwise it will be reset to FALSE). \n     * @param updateInfo A sitedesign update information object\n     */\n    public async updateSiteDesign(updateInfo: SiteDesignUpdateInfo): Promise<SiteDesignInfo> {\n        return await this.clone(SiteDesigns, `UpdateSiteDesign`).execute<SiteDesignInfo>({ updateInfo: updateInfo });\n    }\n\n    /**\n     * Deletes a site design.\n     * @param id The ID of the site design to delete.\n     */\n    public async deleteSiteDesign(id: string): Promise<void> {\n        return await this.clone(SiteDesigns, `DeleteSiteDesign`).execute<void>({ id: id });\n    }\n\n    /**\n     * Gets a list of principals that have access to a site design.\n     * @param id The ID of the site design to get rights information from.\n     */\n    public async getSiteDesignRights(id: string): Promise<SiteDesignPrincipals[]> {\n        return await this.clone(SiteDesigns, `GetSiteDesignRights`).execute<SiteDesignPrincipals[]>({ id: id });\n    }\n\n    /**\n     * Grants access to a site design for one or more principals.\n     * @param id The ID of the site design to grant rights on.\n     * @param principalNames An array of one or more principals to grant view rights. \n     *                       Principals can be users or mail-enabled security groups in the form of \"alias\" or \"alias@<domain name>.com\"\n     * @param grantedRights Always set to 1. This represents the View right.\n     */\n    public async grantSiteDesignRights(id: string, principalNames: string[], grantedRights = 1): Promise<void> {\n        return await this.clone(SiteDesigns, `GrantSiteDesignRights`)\n            .execute<void>({\n                \"grantedRights\": grantedRights.toString(),\n                \"id\": id,\n                \"principalNames\": principalNames,\n            });\n    }\n\n    /**\n     * Revokes access from a site design for one or more principals.\n     * @param id The ID of the site design to revoke rights from.\n     * @param principalNames An array of one or more principals to revoke view rights from. \n     *                       If all principals have rights revoked on the site design, the site design becomes viewable to everyone.\n     */\n    public async revokeSiteDesignRights(id: string, principalNames: string[]): Promise<void> {\n        return await this.clone(SiteDesigns, `RevokeSiteDesignRights`)\n            .execute<void>({\n                \"id\": id,\n                \"principalNames\": principalNames,\n            });\n    }\n}\n","import { SharePointQueryable } from \"./sharepointqueryable\";\nimport { extend, jsS, hOP } from \"@pnp/common\";\nimport { EmailProperties } from \"./types\";\nimport { SPBatch } from \"./batch\";\nimport { ICachingOptions } from \"@pnp/odata\";\nimport { File } from \"./files\";\nimport { odataUrlFrom } from \"./odata\";\nimport { PrincipalInfo, PrincipalType, PrincipalSource, WikiPageCreationInformation } from \"./types\";\nimport { metadata } from \"./utils/metadata\";\n\n/**\n * Public interface for the utility methods to limit SharePointQueryable method exposure\n */\nexport interface UtilityMethods {\n    usingCaching(options?: ICachingOptions): this;\n    inBatch(batch: SPBatch): this;\n    sendEmail(props: EmailProperties): Promise<void>;\n    getCurrentUserEmailAddresses(): Promise<string>;\n    resolvePrincipal(email: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        inputIsEmailOnly: boolean,\n        addToUserInfoList: boolean,\n        matchUserInfoList?: boolean): Promise<PrincipalInfo>;\n    searchPrincipals(input: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        groupName: string,\n        maxCount: number): Promise<PrincipalInfo[]>;\n    createEmailBodyForInvitation(pageAddress: string): Promise<string>;\n    expandGroupsToPrincipals(inputs: string[], maxCount?: number): Promise<PrincipalInfo[]>;\n    createWikiPage(info: WikiPageCreationInformation): Promise<CreateWikiPageResult>;\n    containsInvalidFileFolderChars(input: string, onPremise?: boolean): boolean;\n    stripInvalidFileFolderChars(input: string, replacer?: string, onPremise?: boolean): string;\n}\n\n/**\n * Allows for calling of the static SP.Utilities.Utility methods by supplying the method name\n */\nexport class UtilityMethod extends SharePointQueryable implements UtilityMethods {\n    private static readonly InvalidFileFolderNameCharsOnlineRegex = /[\"*:<>?/\\\\|\\x00-\\x1f\\x7f-\\x9f]/g;\n    private static readonly InvalidFileFolderNameCharsOnPremiseRegex = /[\"#%*:<>?/\\\\|\\x00-\\x1f\\x7f-\\x9f]/g;\n\n    /**\n     * Creates a new instance of the Utility method class\n     *\n     * @param baseUrl The parent url provider\n     * @param methodName The static method name to call on the utility class\n     */\n    constructor(baseUrl: string | SharePointQueryable, methodName: string) {\n\n        super(UtilityMethod.getBaseUrl(baseUrl), `_api/SP.Utilities.Utility.${methodName}`);\n    }\n\n    private static getBaseUrl(candidate: string | SharePointQueryable) {\n\n        if (typeof candidate === \"string\") {\n            return candidate;\n        }\n\n        const c = candidate as SharePointQueryable;\n        const url = c.toUrl();\n        const index = url.indexOf(\"_api/\");\n        if (index < 0) {\n            return url;\n        }\n\n        return url.substr(0, index);\n    }\n\n    public excute<T>(props: any): Promise<T> {\n\n        return this.postCore<T>({\n            body: jsS(props),\n        });\n    }\n\n    /**\n     * Sends an email based on the supplied properties\n     *\n     * @param props The properties of the email to send\n     */\n    public sendEmail(props: EmailProperties): Promise<void> {\n\n        const params = {\n            properties: extend(metadata(\"SP.Utilities.EmailProperties\"), {\n                Body: props.Body,\n                From: props.From,\n                Subject: props.Subject,\n            }),\n        };\n\n        if (props.To && props.To.length > 0) {\n\n            params.properties = extend(params.properties, {\n                To: { results: props.To },\n            });\n        }\n\n        if (props.CC && props.CC.length > 0) {\n\n            params.properties = extend(params.properties, {\n                CC: { results: props.CC },\n            });\n        }\n\n        if (props.BCC && props.BCC.length > 0) {\n\n            params.properties = extend(params.properties, {\n                BCC: { results: props.BCC },\n            });\n        }\n\n        if (props.AdditionalHeaders) {\n            params.properties = extend(params.properties, {\n                AdditionalHeaders: props.AdditionalHeaders,\n            });\n        }\n\n        return this.clone(UtilityMethod, \"SendEmail\", true).excute<void>(params);\n    }\n\n    public getCurrentUserEmailAddresses(): Promise<string> {\n\n        return this.clone(UtilityMethod, \"GetCurrentUserEmailAddresses\", true).excute<string>({}).then(r => {\n            return hOP(r, \"GetCurrentUserEmailAddresses\") ? (<any>r).GetCurrentUserEmailAddresses : r;\n        });\n    }\n\n    public resolvePrincipal(input: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        inputIsEmailOnly: boolean,\n        addToUserInfoList: boolean,\n        matchUserInfoList = false): Promise<PrincipalInfo> {\n\n        const params = {\n            addToUserInfoList: addToUserInfoList,\n            input: input,\n            inputIsEmailOnly: inputIsEmailOnly,\n            matchUserInfoList: matchUserInfoList,\n            scopes: scopes,\n            sources: sources,\n        };\n\n        return this.clone(UtilityMethod, \"ResolvePrincipalInCurrentContext\", true).excute<PrincipalInfo>(params).then(r => {\n            return hOP(r, \"ResolvePrincipalInCurrentContext\") ? (<any>r).ResolvePrincipalInCurrentContext : r;\n        });\n    }\n\n    public searchPrincipals(input: string,\n        scopes: PrincipalType,\n        sources: PrincipalSource,\n        groupName: string,\n        maxCount: number): Promise<PrincipalInfo[]> {\n\n        const params = {\n            groupName: groupName,\n            input: input,\n            maxCount: maxCount,\n            scopes: scopes,\n            sources: sources,\n        };\n\n        return this.clone(UtilityMethod, \"SearchPrincipalsUsingContextWeb\", true).excute<PrincipalInfo[] | { SearchPrincipalsUsingContextWeb: PrincipalInfo[] }>(params).then(r => {\n            return hOP(r, \"SearchPrincipalsUsingContextWeb\") ? (<any>r).SearchPrincipalsUsingContextWeb : r;\n        });\n    }\n\n    public createEmailBodyForInvitation(pageAddress: string): Promise<string> {\n\n        const params = {\n            pageAddress: pageAddress,\n        };\n\n        return this.clone(UtilityMethod, \"CreateEmailBodyForInvitation\", true).excute<string>(params).then(r => {\n            return hOP(r, \"CreateEmailBodyForInvitation\") ? (<any>r).CreateEmailBodyForInvitation : r;\n        });\n    }\n\n    public expandGroupsToPrincipals(inputs: string[], maxCount = 30): Promise<PrincipalInfo[]> {\n\n        const params = {\n            inputs: inputs,\n            maxCount: maxCount,\n        };\n\n        return this.clone(UtilityMethod, \"ExpandGroupsToPrincipals\", true).excute<PrincipalInfo[]>(params).then(r => {\n            return hOP(r, \"ExpandGroupsToPrincipals\") ? (<any>r).ExpandGroupsToPrincipals : r;\n        });\n    }\n\n    public createWikiPage(info: WikiPageCreationInformation): Promise<CreateWikiPageResult> {\n\n        return this.clone(UtilityMethod, \"CreateWikiPageInContextWeb\", true).excute<CreateWikiPageResult>({\n            parameters: info,\n        }).then(r => {\n            return {\n                data: hOP(r, \"CreateWikiPageInContextWeb\") ? (<any>r).CreateWikiPageInContextWeb : r,\n                file: new File(odataUrlFrom(r)),\n            };\n        });\n    }\n\n    /**\n     * Checks if file or folder name contains invalid characters\n     *\n     * @param input File or folder name to check\n     * @param onPremise Set to true for SharePoint On-Premise\n     * @returns True if contains invalid chars, false otherwise\n     */\n    public containsInvalidFileFolderChars(input: string, onPremise = false): boolean {\n        if (onPremise) {\n            return UtilityMethod.InvalidFileFolderNameCharsOnPremiseRegex.test(input);\n        } else {\n            return UtilityMethod.InvalidFileFolderNameCharsOnlineRegex.test(input);\n        }\n    }\n\n    /**\n     * Removes invalid characters from file or folder name\n     *\n     * @param input File or folder name\n     * @param replacer Value that will replace invalid characters\n     * @param onPremise Set to true for SharePoint On-Premise\n     * @returns File or folder name with replaced invalid characters\n     */\n    public stripInvalidFileFolderChars(input: string, replacer = \"\", onPremise = false): string {\n        if (onPremise) {\n            return input.replace(UtilityMethod.InvalidFileFolderNameCharsOnPremiseRegex, replacer);\n        } else {\n            return input.replace(UtilityMethod.InvalidFileFolderNameCharsOnlineRegex, replacer);\n        }\n    }\n}\n\nexport interface CreateWikiPageResult {\n    data: any;\n    file: File;\n}\n","import { SharePointQueryableInstance, SharePointQueryableCollection, defaultPath } from \"./sharepointqueryable\";\nimport { HubSite as IHubSite } from \"./types\";\n\n/**\n * Describes a collection of Hub Sites\n *\n */\n@defaultPath(\"_api/hubsites\")\nexport class HubSites extends SharePointQueryableCollection<IHubSite[]> {\n\n    /**\t    \n     * Gets a Hub Site from the collection by id\t     \n     *\t    \n     * @param id The Id of the Hub Site\t    \n     */\n    public getById(id: string): HubSite {\n        return new HubSite(this, `GetById?hubSiteId='${id}'`);\n\n    }\n\n}\n\nexport class HubSite extends SharePointQueryableInstance<IHubSite> { }\n","import { Search, SearchResults, SearchQueryInit } from \"./search\";\nimport { SearchSuggest, SearchSuggestQuery, SearchSuggestResult } from \"./searchsuggest\";\nimport { Site } from \"./site\";\nimport { Web } from \"./webs\";\nimport { ConfigOptions } from \"@pnp/common\";\nimport { UserProfileQuery } from \"./userprofiles\";\nimport { INavigationService, NavigationService } from \"./navigation\";\nimport { SPBatch } from \"./batch\";\nimport { SocialQuery, SocialMethods } from \"./social\";\nimport { SiteScripts, SiteScriptUtilityMethods } from \"./sitescripts\";\nimport { SiteDesigns, SiteDesignsUtilityMethods } from \"./sitedesigns\";\nimport { UtilityMethod, UtilityMethods } from \"./utilities\";\nimport { SharePointQueryableConstructor, SharePointQueryable } from \"./sharepointqueryable\";\nimport {\n    setup as _setup,\n    SPConfiguration,\n} from \"./config/splibconfig\";\nimport { ICachingOptions } from \"@pnp/odata\";\nimport { HubSites } from \"./hubsites\";\n\n/**\n * Root of the SharePoint REST module\n */\nexport class SPRest {\n\n    /** \n     * Creates a new instance of the SPRest class\n     * \n     * @param options Additional options\n     * @param baseUrl A string that should form the base part of the url\n     */\n    constructor(protected _options: ConfigOptions = {}, protected _baseUrl = \"\") { }\n\n    /**\n     * Configures instance with additional options and baseUrl.\n     * Provided configuration used by other objects in a chain\n     * \n     * @param options Additional options\n     * @param baseUrl A string that should form the base part of the url\n     */\n    public configure(options: ConfigOptions, baseUrl = \"\"): SPRest {\n        return new SPRest(options, baseUrl);\n    }\n\n    /**\n     * Global SharePoint configuration options\n     * \n     * @param config The SharePoint configuration to apply\n     */\n    public setup(config: SPConfiguration) {\n        _setup(config);\n    }\n\n    /**\n     * Executes a search against this web context\n     *\n     * @param query The SearchQuery definition\n     */\n    public searchSuggest(query: string | SearchSuggestQuery): Promise<SearchSuggestResult> {\n\n        let finalQuery: SearchSuggestQuery;\n\n        if (typeof query === \"string\") {\n            finalQuery = { querytext: query };\n        } else {\n            finalQuery = query;\n        }\n\n        return this.create(SearchSuggest).execute(finalQuery);\n    }\n\n    /**\n     * Executes a search against this web context\n     *\n     * @param query The SearchQuery definition\n     */\n    public search(query: SearchQueryInit): Promise<SearchResults> {\n        return this.create(Search).execute(query);\n    }\n\n    /**\n     * Executes the provided search query, caching the results\n     * \n     * @param query The SearchQuery definition\n     * @param options The set of caching options used to store the results\n     */\n    public searchWithCaching(query: SearchQueryInit, options?: ICachingOptions): Promise<SearchResults> {\n        return this.create(Search).usingCaching(options).execute(query);\n    }\n\n    /**\n     * Begins a site collection scoped REST request\n     *\n     */\n    public get site(): Site {\n        return this.create(Site);\n    }\n\n    /**\n     * Begins a web scoped REST request\n     *\n     */\n    public get web(): Web {\n        return this.create(Web);\n    }\n\n    /**\n     * Access to user profile methods\n     *\n     */\n    public get profiles(): UserProfileQuery {\n        return this.create(UserProfileQuery);\n    }\n\n    /**\n     * Access to social methods\n     */\n    public get social(): SocialMethods {\n        return this.create(SocialQuery);\n    }\n\n    /**\n     * Access to the site collection level navigation service\n     */\n    public get navigation(): INavigationService {\n        return this.create(NavigationService);\n    }\n\n    /**\n     * Creates a new batch object for use with the SharePointQueryable.addToBatch method\n     *\n     */\n    public createBatch(): SPBatch {\n        return this.web.createBatch();\n    }\n\n    /**\n     * Static utilities methods from SP.Utilities.Utility\n     */\n    public get utility(): UtilityMethods {\n        return this.create(UtilityMethod, \"\");\n    }\n\n    /**\n     * Access to sitescripts methods\n     */\n    public get siteScripts(): SiteScriptUtilityMethods {\n        return this.create(SiteScripts, \"\");\n    }\n\n    /**\n     * Access to sitedesigns methods\n     */\n    public get siteDesigns(): SiteDesignsUtilityMethods {\n        return this.create(SiteDesigns, \"\");\n    }\n\n    /**\n     * Access to Hub Site methods\n     */\n    public get hubSites(): HubSites {\n        return this.create(HubSites);\n    }\n\n    /**\n     * Gets the Web instance representing the tenant app catalog web\n     */\n    public getTenantAppCatalogWeb(): Promise<Web> {\n        return this.create(Web, \"_api/SP_TenantSettings_Current\").get<{ CorporateCatalogUrl: string }>().then(r => {\n            return (new Web(r.CorporateCatalogUrl)).configure(this._options);\n        });\n    }\n\n    /**\n     * Handles creating and configuring the objects returned from this class\n     * \n     * @param fm The factory method used to create the instance\n     * @param path Optional additional path information to pass to the factory method\n     */\n    private create<T extends SharePointQueryable>(fm: SharePointQueryableConstructor<T>, path?: string): T {\n        return new fm(this._baseUrl, path).configure(this._options);\n    }\n}\n\nexport const sp = new SPRest();\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","pop","push","extractWebUrl","candidateUrl","stringIsNullOrEmpty","index","indexOf","substr","odataUrlFrom","candidate","parts","s","hOP","__metadata","uri","Logger","write","combine","factory","_super","_this","o","extend","tslib_1.__extends","SPODataEntityParserImpl","parse","ODataParserBase","map","SPODataEntityArrayParserImpl","spODataEntity","SPRuntimeConfig","SPRuntimeConfigImpl","spPart","RuntimeConfig","get","undefined","headers","baseUrl","spfxContext","pageContext","web","absoluteUrl","fetchClientFactory","FetchClient","digests","Map","_httpClient","_digests","DigestCache","webUrl","cachedDigest","Date","expiration","url","fetchRaw","cache","credentials","Accept","Content-Type","method","response","ODataDefaultParser","GetContextWebInformation","data","newCachedDigest","CachedDigest","FormDigestValue","seconds","FormDigestTimeoutSeconds","setTime","getTime","set","clear","_impl","_digestCache","SPHttpClient","options","opts","Headers","mergeHeaders","has","append","toUpperCase","getDigest","digest","rawHeaders","retry","ctx","setRetry","delay","parseInt","attempts","retryCount","Error","status","statusText","setTimeout","getCtxCallback","fetch","catch","retryContext","global","self","window","toAbsoluteUrl","isUrlAbsolute","_spPageContextInfo","webAbsoluteUrl","webServerRelativeUrl","location","baseUrl_1","toString","toLowerCase","forEach","metadata","type","path","_forceCaching","lastIndexOf","_parentUrl","_url","slice","query","SharePointQueryable","aliasedParams","toUrl","replace","match","labelName","size","char","from","join","_i","selects","expands","batch","parentUrl","parent","configureFrom","inBatch","additionalPath","includeBatch","clone","_clone","parser","pipeline","dependencyDispose","hasBatch","_batchDependency","toUrlAndQuery","mergeOptions","_options","batchDependency","cachingOptions","_cachingOptions","clientFactory","isBatched","isCached","_useCaching","test","requestAbsoluteUrl","requestId","getGUID","ODataQueryable","SharePointQueryableCollection","filter","orderBy","ascending","split","skip","top","SharePointQueryableInstance","mapper","props","postCore","jsS","X-HTTP-Method","eTag","IF-Match","defaultPath","args","PrincipalType","SiteUsers","id","SiteUser","email","loginName","su","concat","encodeURIComponent","SiteUsers_1","LoginName","getByLoginName","UserBase","SiteGroups","_update","user","_delete","CurrentUser","ControlMode","FieldTypes","DateTimeFieldFormatType","DateTimeFieldFriendlyFormatType","AddFieldOptions","CalendarType","UrlFieldFormatType","PermissionKind","PrincipalSource","RoleType","PageType","SharingLinkKind","SharingRole","SharingOperationStatusCode","SPSharedObjectType","SharingDomainRestrictionMode","RenderListDataOptions","FieldUserSelectionMode","ChoiceFieldFormatType","UrlZone","sg","SiteGroup","properties","postBody","group","getById","Id","groupName","SiteGroups_1","retGroup","getParent","RoleAssignments","ra","RoleAssignment","principalId","roleDefId","RoleAssignments_1","RoleDefinitionBindings","RoleDefinitions","RoleDefinition","name","roleTypeKind","description","order","basePermissions","BasePermissions","Description","Name","Order","definition","retDef","getByName","CheckinType","WebPartsPersonalizationScope","MoveOperations","TemplateFileType","SharePointQueryableSecurable","q","GetUserEffectivePermissions","select","getUserEffectivePermissions","copyRoleAssignments","clearSubscopes","permission","perms","hasPermissions","getCurrentUserEffectivePermissions","perm","FullMask","High","Low","num","SharePointQueryableShareable","kind","expString","toISOString","request","createLink","emailData","settings","linkKind","loginNames","role","requireSignin","propagateAcl","isArray","userStr","login","Key","roleFilter","Edit","Contributor","Reader","def","includeAnonymousLinkInEmail","peoplePickerInput","roleValue","useSimplifiedRoles","emailBody","emailSubject","subject","sendEmail","bypass","sendShareObjectRequest","getRoleValue","recipients","expand","shareId","Guest","getShareObjectWeb","as","SharePointQueryableShareableWeb","View","dependency","addBatchDependency","shareObject","unshareObjectWeb","SharePointQueryableShareableItem","OrganizationView","getShareLink","shareWith","checkPermissions","getSharingInformation","getObjectSharingSettings","unshareObject","deleteLinkByKind","unshareLink","FileFolderShared","getShareable","shareable","SharePointQueryableShareableFile","SharePointQueryableShareableFolder","shareEverything","LimitedWebPartManager","WebPartDefinitions","webPartId","xml","webPartXml","WebPartDefinition","WebPart","zoneId","zoneIndex","Folders","Folder","Folders_1","folder","Files","listItemAllFields","Item","destUrl","_a","srcUrl","client","webBaseUrl","hostUrl","methodUrl","post","json","ContentTypes","contentTypeId","ContentTypes_1","contentType","ct","ContentType","additionalSettings","assign","Group","StringValue","FieldLinks","fl","FieldLink","AttachmentFiles","AttachmentFile","content","AttachmentFiles_1","file","files","reduce","chain","delete","recycle","_deleteWithETag","getParsed","TextParser","BlobParser","BufferParser","JSONParser","Views","title","personalView","PersonalView","Title","Views_1","view","ViewFields","viewXml","fieldTitleOrInternalName","ViewFields_1","fieldInternalName","field","Fields","Field","info","SchemaXml","parameters","Fields_1","fieldType","maxLength","FieldTypeKind","MaxLength","add","formula","dateFormat","outputType","Text","DateFormat","Formula","OutputType","displayFormat","calendarType","friendlyDisplayFormat","DateOnly","Gregorian","Unspecified","DateTimeCalendarType","DisplayFormat","FriendlyDisplayFormat","minValue","maxValue","MinimumValue","MaximumValue","currencyLocalId","CurrencyLocaleId","numberOfLines","richText","restrictedMode","appendOnly","allowHyperlink","AllowHyperlink","AppendOnly","NumberOfLines","RestrictedMode","RichText","Hyperlink","selectionMode","SelectionMode","lookupListId","lookupFieldName","LookupFieldName","LookupListId","choices","format","fillIn","Dropdown","Choices","results","EditFormat","FillInChoice","displayName","primaryLookupFieldId","showField","show","Forms","Form","Subscriptions","subscriptionId","Subscription","notificationUrl","expirationDate","clientState","expirationDateTime","resource","subscription","patchCore","deleteCore","UserCustomActions","uca","UserCustomAction","action","UserCustomActions_1","Lists","list","List","template","enableContentTypes","addSettings","AllowContentTypes","BaseTemplate","ContentTypesEnabled","getByTitle","addOrUpdateSettings","update","created","Lists_1","Items","viewId","retList","text","Recycle","JSON","RenderListData","overrideParameters","itemId","formId","mode","RenderListFormData","ReserveListItemId","ListItemEntityTypeFullName","formValues","decodedUrl","bNewDocumentUpdate","checkInComment","listItemCreateInfo","FolderPath","DecodedUrl","res","AddValidateUpdateItemUsingPath","Comments","Comments_1","Comment","Replies","Replies_1","stringId","reverse","PagedItemCollectionParser","requestSize","acceptHeader","items","Items_1","configure","k","itemsCollector","gatherer","last","hasNext","getNext","getPaged","listItemEntityTypeFullName","removeDependency","ensureListItemEntityTypeName","listItemEntityType","promise","item","candidatelistItemEntityTypeFullName","getListItemEntityTypeFullName","File","ItemVersions","ItemUpdatedParser","GetWOPIFrameUrl","newDocumentUpdate","getCore","versionId","ItemVersion","nextUrl","PagedItemCollection","_parent","handleError","__next","parseODataJSON","odata.etag","shouldOverWrite","Files_1","progress","chunkSize","setContentChunked","fileUrl","templateFileType","Versions","comment","uploadId","checkinType","Major","scope","Shared","moveOperations","Overwrite","binaryStringResponseBody","fileSize","blockCount","blockNumber","currentPointer","stage","totalBlocks","startUpload","pointer","continueUpload","finishUpload","fragment","StartUpload","parseFloat","fileOffset","ContinueUpload","Version","Versions_1","PromotedState","AppCatalog","App","filename","catalog","skipFeatureDeployment","SPBatch","responses","header","statusRegExp","RegExp","lines","state","line","trim","exec","Response","batchId","requests","absoluteRequestUrl","batchBody","currentChangeSetId","reqInfo","castHeaders","batchOptions","ParseResponse","ODataBatch","Features","force","Features_1","featdefScope","featureId","feature","Feature","remove","DefinitionId","Site","Web","rootWeb","Url","Site_1","SupportedSchemaVersions","absoluteWebUrl","GetDocumentLibraries","absolutePageUrl","GetWebUrlFromPageUrl","webId","fromUrl","siteId","lcid","shareByEmailEnabled","classification","siteDesignId","hubSiteId","Classification","HubSiteId","Lcid","ShareByEmailEnabled","SiteDesignId","WebTemplate","WebTemplateExtensionId","getRootWeb","alias","isPublic","owners","optionalParams","CreationOptions","Owners","NavigationNodes","node","NavigationNode","visible","IsVisible","nodeId","previousNodeId","Navigation","NavigationService","menuNodeKey","depth","mapProviderName","customProperties","currentUrl","RelatedItemManagerImpl","RelatedItemManagerImpl_1","sourceListName","sourceItemId","SourceItemID","SourceListName","sourceWebUrl","targetListName","targetItemID","targetWebUrl","tryAddReverseLink","SourceWebUrl","TargetItemID","TargetListName","TargetWebUrl","TryAddReverseLink","targetItemUrl","TargetItemUrl","sourceItemUrl","targetItemId","SourceItemUrl","tryDeleteReverseLink","TryDeleteReverseLink","RegionalSettings","InstalledLanguages","TimeZone","TimeZones","utcTime","dateIsoString","TimeZone_1","UTCToLocalTime","localTime","dateAdd","getTimezoneOffset","LocalTimeToUTC","TimeZones_1","Webs","language","inheritPermissions","Language","UseSamePermissionsAsParentSite","Webs_1","WebInfos","Web_1","ParentWeb","openWebById","nWebTemplateFilter","nConfigurationFilter","FromUrl","uniqueId","folderRelativeUrl","fileRelativeUrl","listRelativeUrl","colorPaletteUrl","fontSchemeUrl","backgroundImageUrl","shareGenerated","logonName","includeCrossLanugage","progId","comments","pageName","ClientSidePage","siteOwner","siteOwner2","groupNameSeed","forceRefresh","getNextOrder","collection","Math","max","reindex","columns","controls","noInit","sections","commentsDisabled","_bannerImageDirty","initFrom","_pageSettings","controlType","pageSettingsSlice","isDefaultDescription","isDefaultThumbnail","_layoutPart","getDefaultLayoutPart","fromJSON","pageLayoutType","PageLayoutType","pageInitData","newPage","save","getItem","load","dataVersion","instanceId","authors","layoutType","showPublishDate","showTopicHeader","textAlignment","topicHeader","serverProcessedContent","htmlStrings","searchablePlainTexts","imageSources","links","BannerImageUrl","imageSourceType","objectDefinedNotNull","TopicHeader","section","CanvasSection","pageData","canvasControls","CanvasContent1","layouts","LayoutWebpartsContent","setControls","CommentsDisabled","publish","origImgUrl","site","imgFile","getFileByServerRelativePath","imgId","listId","all","UniqueId","ParentList","bannerImageUrl","imageSource","customMetadata","IsPageCheckedOutToCurrentUser","saveBody","AuthorByline","getCanvasContent1","getLayoutWebpartsContent","updater","if-match","setCommentsOn","findControl","predicate","j","like","unlike","getLikedByInformation","pageLayout","page","getControls","bannerImageSourceType","translateX","translateY","altText","stringify","mergeColumnToTree","CanvasColumn","part","ClientSideWebpart","mergePartToTree","position","textData","ClientSideText","innerHTML","canvasData","column","displayMode","emphasis","getEmphasisObj","control","zoneEmphasis","on","positionData","sectionFactor","sectionIndex","addColumn","addControl","listData","_emphasis","_memId","_order","factor","defaultColumn","Default","_section","layoutIndex","ColumnControl","_column","onColumnChange","anchorComponentId","startsWith","controlIndex","col","addedFromPersistedData","editorType","import","webPartData","reservedHeight","reservedWidth","component","componendId","preconfiguredEntries","Manifest","setData","default","funcs","toPropCase","str","$1","SortDirection","ReorderingRuleMatchType","QueryPropertyValueType","Search","queryInit","parseQuery","HitHighlightedProperties","fixArrProp","Properties","RefinementFilters","ReorderingRules","SelectProperties","SortList","cacheKey","getHashCode","CachingOptions","SearchResults","prop","Querytext","toSearchQuery","rawResponse","_query","_raw","_primary","postquery","RawSearchResults","ElapsedTime","PrimaryQueryResult","RelevantResults","RowCount","TotalRows","TotalRowsIncludingDuplicates","formatSearchResults","Table","Rows","pageNumber","pageSize","rows","RowLimit","StartRow","execute","rawResults","tempResults_1","tempResult","cells","Cells","cell","configurable","enumerable","Value","writable","SocialActorType","SocialActorTypes","SocialFollowResult","SocialStatusCode","SearchBuiltInSourceId","SearchSuggest","mapQueryToQueryString","suggest","PeopleNames","PersonalResults","Queries","querytext","querySetter","checkProp","sp","clientPeoplePickerQuery","ClientPeoplePickerQuery","profileLoader","ProfileLoader","UserProfileQuery","maxCount","propertyName","follower","followee","profilePicSource","buffer","reader","FileReader","onload","readAsArrayBuffer","String","fromCharCode","Uint16Array","accountName","propertyValue","propertyValues","emails","createPersonalSiteEnqueueBulk","ownerUserProfile","userProfile","interactiveRequest","createPersonalSite","share","shareAllSocialData","queryParams","clientPeoplePickerResolveUser","clientPeoplePickerSearchUser","ProfileLoader_1","emailIDs","ClientPeoplePickerQuery_1","createClientPeoplePickerQueryParametersRequestBody","ClientPeoplePickerResolveUser","ClientPeoplePickerSearchUser","SocialQuery","MySocialQuery","SocialQuery_1","FollowedSitesUri","FollowedDocumentsUri","actorInfo","createSocialActorInfoRequestBody","actor","types","MySocialQuery_1","Followed","FollowedCount","Followers","Suggestions","methodName","SiteScripts","getBaseUrl","siteScriptUpdateInfo","Content","updateInfo","SiteDesigns","creationInfo","principalNames","grantedRights","UtilityMethod","params","Body","From","Subject","To","CC","BCC","AdditionalHeaders","excute","GetCurrentUserEmailAddresses","input","scopes","sources","inputIsEmailOnly","addToUserInfoList","matchUserInfoList","ResolvePrincipalInCurrentContext","SearchPrincipalsUsingContextWeb","pageAddress","CreateEmailBodyForInvitation","inputs","ExpandGroupsToPrincipals","CreateWikiPageInContextWeb","onPremise","InvalidFileFolderNameCharsOnPremiseRegex","InvalidFileFolderNameCharsOnlineRegex","replacer","HubSites","HubSite","_baseUrl","SPRest","config","finalQuery","usingCaching","createBatch","CorporateCatalogUrl","fm","queryText","Proxy","propertyKey","proxy","pk","mappedPk","propKey"],"mappings":"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"}