{"version":3,"sources":["webpack://VideojsRecord/webpack/universalModuleDefinition","webpack://VideojsRecord/webpack/bootstrap","webpack://VideojsRecord/./node_modules/global/window.js","webpack://VideojsRecord/(webpack)/buildin/global.js","webpack://VideojsRecord/./src/css/videojs.record.scss?e602","webpack://VideojsRecord/./src/js/controls/animation-display.js","webpack://VideojsRecord/./src/js/controls/camera-button.js","webpack://VideojsRecord/./src/js/controls/device-button.js","webpack://VideojsRecord/./src/js/controls/record-canvas.js","webpack://VideojsRecord/./src/js/controls/record-indicator.js","webpack://VideojsRecord/./src/js/controls/record-toggle.js","webpack://VideojsRecord/./src/js/defaults.js","webpack://VideojsRecord/./src/js/engine/convert-engine.js","webpack://VideojsRecord/./src/js/engine/engine-loader.js","webpack://VideojsRecord/./src/js/engine/record-engine.js","webpack://VideojsRecord/./src/js/engine/record-mode.js","webpack://VideojsRecord/./src/js/engine/record-rtc.js","webpack://VideojsRecord/./src/js/utils/browser-shim.js","webpack://VideojsRecord/./src/js/utils/detect-browser.js","webpack://VideojsRecord/./src/js/utils/file-util.js","webpack://VideojsRecord/./src/js/utils/format-time.js","webpack://VideojsRecord/./src/js/videojs.record.js","webpack://VideojsRecord/external \"videojs\""],"names":["Component","videojs","getComponent","AnimationDisplay","className","innerHTML","registerComponent","Button","CameraButton","on","player_","onStart","onStop","off","event","recorder","record","isProcessing","start","retrySnapshot","removeClass","addClass","controlText","prototype","controlText_","DeviceButton","getDevice","RecordCanvas","RecordIndicator","player","options","enable","dir","show","hide","RecordToggle","isRecording","stop","pluginDefaultOptions","image","audio","video","animation","screen","maxLength","maxFileSize","msDisplayMax","frameWidth","frameHeight","debug","autoMuteDevice","videoMimeType","videoRecorderType","audioEngine","audioRecorderType","audioMimeType","audioBufferSize","audioSampleRate","audioBitRate","audioChannels","audioWorkerURL","audioBufferUpdate","animationFrameRate","animationQuality","timeSlice","convertEngine","TSEBML","CONVERT_PLUGINS","ConvertEngine","evented","mediaType","data","fileObj","now","getAudioEngine","AudioEngineClass","RECORDRTC","RecordRTCEngine","LIBVORBISJS","LibVorbisEngine","RECORDERJS","RecorderjsEngine","LAMEJS","LamejsEngine","OPUSRECORDER","OpusRecorderEngine","VMSG","VmsgEngine","Error","isAudioPluginActive","AUDIO_PLUGINS","indexOf","getConvertEngine","ConvertEngineClass","TsEBMLEngine","RECORD_PLUGINS","RecordEngine","recordedData","undefined","URL","revokeObjectURL","addFileInfo","dispose","trigger","name","fileName","Object","keys","IMAGE_ONLY","AUDIO_ONLY","VIDEO_ONLY","AUDIO_VIDEO","ANIMATION","SCREEN_ONLY","getRecorderMode","isModeEnabled","mode","stream","inputStream","engine","RecordRTC","MRecordRTC","disableLogs","mimeType","bufferSize","sampleRate","numberOfAudioChannels","canvas","quality","frameRate","onTimeStamp","addStream","destroy","startRecording","stopRecording","onStopRecording","bind","pauseRecording","resumeRecording","save","audioVideoURL","type","mediaURL","recordType","getRecordType","getBlob","recording","gif","setSrcObject","element","srcObject","mozSrcObject","detectBrowser","result","browser","version","minVersion","window","navigator","mozGetUserMedia","extractVersion","userAgent","webkitGetUserMedia","mediaDevices","match","RTCPeerConnection","uastring","expr","pos","length","parseInt","isEdge","isSafari","isOpera","opera","isChrome","isFirefox","downloadBlob","msSaveOrOpenBlob","msSaveBlob","hyperlink","document","createElement","href","createObjectURL","download","style","body","documentElement","appendChild","click","target","dispatchEvent","MouseEvent","view","bubbles","cancelable","blobToArrayBuffer","Promise","resolve","reject","reader","FileReader","onloadend","onerror","ev","error","readAsArrayBuffer","Blob","File","Date","lastModified","getTime","lastModifiedDate","e","TypeError","fileExtension","split","formatTime","seconds","guide","s","Math","floor","m","h","gm","gh","ms","isNaN","Infinity","Plugin","getPlugin","Player","AUTO","play","retval","techGet_","then","Record","loadOptions","resetState","deviceIcon","buildCSSClass","deviceButton","addChild","recordIndicator","recordCanvas","animationDisplay","cameraButton","recordToggle","one","setupUI","newOptions","recordOptions","mergeOptions","options_","plugins","recordImage","recordAudio","recordVideo","recordAnimation","recordScreen","parseFloat","recordTimeSlice","videoFrameWidth","videoFrameHeight","controlBar","el","insertBefore","firstChild","remainingTimeDisplay","display","liveDisplay","loop","surfer","wavesurfer","bigPlayButton","setDuration","usingNativeControls_","tech_","el_","controls","removeTechControlsListeners_","progressControl","userActive","playToggle","_recording","_processing","destroyed","children","deviceReadyCallback","onDeviceReady","deviceErrorCallback","onDeviceError","engineStopCallback","onRecordComplete","microphone","un","setupPlaybackEvents","liveMode","paused","reloadBufferFunction","empty","loadDecodedBuffer","inputBuffer","getUserMedia","catch","getDisplayMedia","_deviceActive","setCurrentTime","playbackTimeUpdate","err","bitRate","width","height","setup","converter","uiElements","currentTimeDisplay","timeDivider","durationDisplay","forEach","disable","mediaElement","muted","displayVolumeControl","load","code","isDestroyed","deviceErrorCode","startVideoPreview","captureFrame","muteTracks","createSnapshot","pauseTime","pausedTime","startTime","countDown","setInterval","onCountDown","clearInterval","stopStream","stopDevice","getTracks","pause","resume","convert","loadingSpinner","once","streamDuration","showAnimation","hideAnimation","duration","currentTime","streamCurrentTime","getCurrentTime","contentEl","min","formattedTime_","lastChild","textContent","url","src","saveAs","reset","devices","mute","getAudioTracks","enabled","getVideoTracks","toDataURL","detected","ImageCapture","Function","track","imageCapture","grabFrame","imageBitmap","drawCanvas","getContext","drawImage","current","all","currentTimestamp","allTimestamps","internal","audioRecorder","gifRecorder","videoRecorder","maxFileSizeReached","getInternalRecorder","MediaStreamRecorder","getArrayOfBlobs","currentSize","size","enumerateDevices","enumerateErrorCode","device","push","deviceId","errorMessage","setSinkId","sinkId","volumePanel","VERSION","__VERSION__","registerPlugin","module","exports"],"mappings":"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","file":"videojs.record.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"videojs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"VideojsRecord\", [\"videojs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"VideojsRecord\"] = factory(require(\"videojs\"));\n\telse\n\t\troot[\"VideojsRecord\"] = factory(root[\"videojs\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE_video_js__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","var win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","// extracted by mini-css-extract-plugin","/**\n * @file animation-display.js\n * @since 2.0.0\n */\n\nconst Component = videojs.getComponent('Component');\n\n/**\n * Image for displaying animated GIF image.\n *\n * @class\n * @augments videojs.Component\n*/\nclass AnimationDisplay extends Component {\n\n    /**\n     * Create the `AnimationDisplay`s DOM element.\n     *\n     * @return {Element}\n     *         The dom element that gets created.\n     */\n    createEl() {\n        return super.createEl('div', {\n            className: 'vjs-animation-display',\n            innerHTML: '<img />'\n        });\n    }\n}\n\nComponent.registerComponent('AnimationDisplay', AnimationDisplay);\n\nexport default AnimationDisplay;\n","/**\n * @file camera-button.js\n * @since 2.0.0\n */\n\nconst Button = videojs.getComponent('Button');\nconst Component = videojs.getComponent('Component');\n\n/**\n * Button to toggle between create and retry snapshot image.\n *\n * @class\n * @augments videojs.Button\n*/\nclass CameraButton extends Button {\n    /**\n     * Builds the default DOM `className`.\n     *\n     * @return {string}\n     *         The DOM `className` for this object.\n     */\n    buildCSSClass() {\n        return 'vjs-camera-button vjs-control vjs-button vjs-icon-photo-camera';\n    }\n\n    /**\n     * Enable the `CameraButton` element so that it can be activated or clicked.\n     */\n    enable() {\n        super.enable();\n\n        this.on(this.player_, 'startRecord', this.onStart);\n        this.on(this.player_, 'stopRecord', this.onStop);\n    }\n\n    /**\n     * Disable the `CameraButton` element so that it cannot be activated or clicked.\n     */\n    disable() {\n        super.disable();\n\n        this.off(this.player_, 'startRecord', this.onStart);\n        this.off(this.player_, 'stopRecord', this.onStop);\n    }\n\n    /**\n     * This gets called when the button is clicked.\n     *\n     * @param {EventTarget~Event} event\n     *        The `tap` or `click` event that caused this function to be\n     *        called.\n     *\n     * @listens tap\n     * @listens click\n     */\n    handleClick(event) {\n        let recorder = this.player_.record();\n\n        if (!recorder.isProcessing()) {\n            // create snapshot\n            recorder.start();\n        } else {\n            // retry\n            recorder.retrySnapshot();\n\n            // reset camera button\n            this.onStop();\n        }\n    }\n\n    /**\n     * Add the vjs-icon-replay class to the element so it can change appearance.\n     *\n     * @param {EventTarget~Event} [event]\n     *        The event that caused this function to run.\n     *\n     * @listens Player#startRecord\n     */\n    onStart(event) {\n        // replace element class so it can change appearance\n        this.removeClass('vjs-icon-photo-camera');\n        this.addClass('vjs-icon-replay');\n\n        // change the button text\n        this.controlText('Retry');\n    }\n\n    /**\n     * Add the vjs-icon-photo-camera class to the element so it can change appearance.\n     *\n     * @param {EventTarget~Event} [event]\n     *        The event that caused this function to run.\n     *\n     * @listens Player#stopRecord\n     */\n    onStop(event) {\n        // replace element class so it can change appearance\n        this.removeClass('vjs-icon-replay');\n        this.addClass('vjs-icon-photo-camera');\n\n        // change the button text\n        this.controlText('Image');\n    }\n}\n\n/**\n * The text that should display over the `CameraButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\nCameraButton.prototype.controlText_ = 'Image';\n\nComponent.registerComponent('CameraButton', CameraButton);\n\nexport default CameraButton;\n","/**\n * @file device-button.js\n * @since 2.0.0\n */\n\nconst Button = videojs.getComponent('Button');\nconst Component = videojs.getComponent('Component');\n\n/**\n * Button to select recording device.\n *\n * @class\n * @augments videojs.Button\n*/\nclass DeviceButton extends Button {\n    /**\n     * This gets called when this button gets:\n     *\n     * - Clicked (via the `click` event, listening starts in the constructor)\n     * - Tapped (via the `tap` event, listening starts in the constructor)\n     *\n     * @param {EventTarget~Event} event\n     *        The `keydown`, `tap`, or `click` event that caused this function to be\n     *        called.\n     *\n     * @listens tap\n     * @listens click\n     */\n    handleClick(event) {\n        // open device dialog\n        this.player_.record().getDevice();\n    }\n}\n\n/**\n * The text that should display over the `DeviceButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\nDeviceButton.prototype.controlText_ = 'Device';\n\nComponent.registerComponent('DeviceButton', DeviceButton);\n\nexport default DeviceButton;\n","/**\n * @file record-canvas\n * @since 2.0.0\n */\n\nconst Component = videojs.getComponent('Component');\n\n/**\n * Canvas for displaying snapshot image.\n *\n * @class\n * @augments videojs.Component\n*/\nclass RecordCanvas extends Component {\n\n    /**\n     * Create the `RecordCanvas`s DOM element.\n     *\n     * @return {Element}\n     *         The dom element that gets created.\n     */\n    createEl() {\n        return super.createEl('div', {\n            className: 'vjs-record-canvas',\n            innerHTML: '<canvas></canvas>'\n        });\n    }\n}\n\nComponent.registerComponent('RecordCanvas', RecordCanvas);\n\nexport default RecordCanvas;\n","/**\n * @file record-indicator.js\n * @since 2.0.0\n */\n\nconst Component = videojs.getComponent('Component');\n\n/**\n * Icon indicating recording is active.\n *\n * @class\n * @augments videojs.Component\n*/\nclass RecordIndicator extends Component {\n    /**\n     * The constructor function for the class.\n     *\n     * @private\n     * @param {(videojs.Player|Object)} player - Video.js player instance.\n     * @param {Object} options - Player options.\n     */\n    constructor(player, options) {\n        super(player, options);\n\n        this.enable();\n    }\n\n    /**\n     * Create the `RecordIndicator`s DOM element.\n     *\n     * @return {Element}\n     *         The dom element that gets created.\n     */\n    createEl() {\n        return super.createEl('div', {\n            className: 'vjs-record-indicator vjs-control',\n            dir: 'ltr'\n        });\n    }\n\n    /**\n     * Enable event handlers.\n     */\n    enable() {\n        this.on(this.player_, 'startRecord', this.show);\n        this.on(this.player_, 'stopRecord', this.hide);\n    }\n\n    /**\n     * Disable event handlers.\n     */\n    disable() {\n        this.off(this.player_, 'startRecord', this.show);\n        this.off(this.player_, 'stopRecord', this.hide);\n    }\n}\n\nComponent.registerComponent('RecordIndicator', RecordIndicator);\n\nexport default RecordIndicator;\n","/**\n * @file record-toggle.js\n * @since 2.0.0\n */\n\nconst Button = videojs.getComponent('Button');\nconst Component = videojs.getComponent('Component');\n\n/**\n * Button to toggle between start and stop recording.\n *\n * @class\n * @augments videojs.Button\n*/\nclass RecordToggle extends Button {\n    /**\n     * Builds the default DOM `className`.\n     *\n     * @return {string}\n     *         The DOM `className` for this object.\n     */\n    buildCSSClass() {\n        return 'vjs-record-button vjs-control vjs-button vjs-icon-record-start';\n    }\n\n    /**\n     * Enable the `RecordToggle` element so that it can be activated or clicked.\n     */\n    enable() {\n        super.enable();\n\n        this.on(this.player_, 'startRecord', this.onStart);\n        this.on(this.player_, 'stopRecord', this.onStop);\n    }\n\n    /**\n     * Disable the `RecordToggle` element so that it cannot be activated or clicked.\n     */\n    disable() {\n        super.disable();\n\n        this.off(this.player_, 'startRecord', this.onStart);\n        this.off(this.player_, 'stopRecord', this.onStop);\n    }\n\n    /**\n     * This gets called when the button is clicked.\n     *\n     * @param {EventTarget~Event} event\n     *        The `tap` or `click` event that caused this function to be\n     *        called.\n     *\n     * @listens tap\n     * @listens click\n     */\n    handleClick(event) {\n        let recorder = this.player_.record();\n        if (!recorder.isRecording()) {\n            recorder.start();\n        } else {\n            recorder.stop();\n        }\n    }\n\n    /**\n     * Add the vjs-icon-record-stop class to the element so it can change appearance.\n     *\n     * @param {EventTarget~Event} [event]\n     *        The event that caused this function to run.\n     *\n     * @listens Player#startRecord\n     */\n    onStart(event) {\n        // replace element class so it can change appearance\n        this.removeClass('vjs-icon-record-start');\n        this.addClass('vjs-icon-record-stop');\n\n        // change the button text\n        this.controlText('Stop');\n    }\n\n    /**\n     * Add the vjs-icon-record-start class to the element so it can change appearance.\n     *\n     * @param {EventTarget~Event} [event]\n     *        The event that caused this function to run.\n     *\n     * @listens Player#stopRecord\n     */\n    onStop(event) {\n        // replace element class so it can change appearance\n        this.removeClass('vjs-icon-record-stop');\n        this.addClass('vjs-icon-record-start');\n\n        // change the button text\n        this.controlText('Record');\n    }\n}\n\n/**\n * The text that should display over the `RecordToggle`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\nRecordToggle.prototype.controlText_ = 'Record';\n\nComponent.registerComponent('RecordToggle', RecordToggle);\n\nexport default RecordToggle;\n","/**\n * @file defaults.js\n * @since 2.0.0\n */\n\n// plugin defaults\nconst pluginDefaultOptions = {\n    // Single snapshot image.\n    image: false,\n    // Include audio in the recorded clip.\n    audio: false,\n    // Include video in the recorded clip.\n    video: false,\n    // Animated GIF.\n    animation: false,\n    // Screen capture.\n    screen: false,\n    // Maximum length of the recorded clip.\n    maxLength: 10,\n    // Maximum file size of the recorded clip. Works only when the timeSlice\n    // option is also enabled.\n    maxFileSize: 0,\n    // msDisplayMax indicates the number of seconds that is\n    // considered the boundary value for displaying milliseconds\n    // in the time controls. An audio clip with a total length of\n    // 2 seconds and a msDisplayMax of 3 will use the format\n    // M:SS:MMM. Clips longer than msDisplayMax will be displayed\n    // as M:SS or HH:MM:SS.\n    msDisplayMax: 3,\n    // Width of the recorded video frames.\n    frameWidth: 320,\n    // Height of the recorded video frames.\n    frameHeight: 240,\n    // Enables console logging for debugging purposes.\n    debug: false,\n    // Turn off the camera/mic (and light) when audio and/or video recording\n    // stops, and turns them on again when you resume recording.\n    autoMuteDevice: false,\n    // The mime type for the video recorder. Default to 'video/webm'.\n    // Use 'video/mp4' (Firefox) or 'video/webm;codecs=H264' (Chrome 52 and\n    // newer) for MP4.\n    videoMimeType: 'video/webm',\n    // Video recorder type to use. This allows you to specify an alternative\n    // recorder class, e.g. WhammyRecorder. Defaults to 'auto' which let's\n    // recordrtc specify the best available recorder type.\n    videoRecorderType: 'auto',\n    // Audio recording library to use. Legal values are 'recordrtc',\n    // 'libvorbis.js', 'opus-recorder', 'lamejs', 'vmsg' and 'recorder.js'.\n    audioEngine: 'recordrtc',\n    // Audio recorder type to use. This allows you to specify an alternative\n    // recorder class, e.g. StereoAudioRecorder. Defaults to 'auto' which let's\n    // recordrtc specify the best available recorder type. Currently this\n    // setting is only used with the 'recordrtc' audioEngine.\n    audioRecorderType: 'auto',\n    // The mime type for the audio recorder. Defaults to 'auto' which will pick\n    // the best option available in the browser (e.g. either 'audio/wav',\n    // 'audio/ogg' or 'audio/webm').\n    audioMimeType: 'auto',\n    // The size of the audio buffer (in sample-frames) which needs to\n    // be processed each time onprocessaudio is called.\n    // From the spec: This value controls how frequently the audioprocess event is\n    // dispatched and how many sample-frames need to be processed each call.\n    // Lower values for buffer size will result in a lower (better) latency.\n    // Higher values will be necessary to avoid audio breakup and glitches.\n    // Legal values are 256, 512, 1024, 2048, 4096, 8192 or 16384.\n    audioBufferSize: 4096,\n    // The audio sample rate (in sample-frames per second) at which the\n    // AudioContext handles audio. It is assumed that all AudioNodes\n    // in the context run at this rate. In making this assumption,\n    // sample-rate converters or \"varispeed\" processors are not supported\n    // in real-time processing.\n    // The sampleRate parameter describes the sample-rate of the\n    // linear PCM audio data in the buffer in sample-frames per second.\n    // An implementation must support sample-rates in at least\n    // the range 22050 to 96000.\n    audioSampleRate: 44100,\n    // The audio bitrate in kbps (only used in lamejs plugin).\n    audioBitRate: 128,\n    // Allows you to record single-channel audio, which can reduce the\n    // file size.\n    audioChannels: 2,\n    // URL for the audio worker.\n    audioWorkerURL: '',\n    // Enables the audioBufferUpdate event that provides realtime AudioBuffer\n    // instances from the input audio device.\n    audioBufferUpdate: false,\n    // Frame rate in frames per second.\n    animationFrameRate: 200,\n    // Sets quality of color quantization (conversion of images to the\n    // maximum 256 colors allowed by the GIF specification).\n    // Lower values (minimum = 1) produce better colors,\n    // but slow processing significantly. 10 is the default,\n    // and produces good color mapping at reasonable speeds.\n    // Values greater than 20 do not yield significant improvements\n    // in speed.\n    animationQuality: 10,\n    // Accepts numbers in milliseconds; use this to force intervals-based blobs.\n    timeSlice: 0,\n    // Media converter library to use. Legal values are 'ts-ebml' or an empty\n    // string '' to disable (default).\n    convertEngine: ''\n};\n\nexport default pluginDefaultOptions;\n","/**\n * @file convert-engine.js\n * @since 3.3.0\n */\n\nimport {blobToArrayBuffer, addFileInfo} from '../utils/file-util';\n\nconst Component = videojs.getComponent('Component');\n\n// supported convert plugin engines\nconst TSEBML = 'ts-ebml';\n\n// all convert plugins\nconst CONVERT_PLUGINS = [TSEBML];\n\n/**\n * Base class for converter backends.\n * @class\n * @augments videojs.Component\n */\nclass ConvertEngine extends Component {\n    /**\n     * Creates an instance of this class.\n     *\n     * @param  {Player} player - The `Player` that this class should be\n     *     attached to.\n     * @param  {Object} [options] - The key/value store of player options.\n     */\n    constructor(player, options) {\n        // auto mixin the evented mixin (required since video.js v6.6.0)\n        options.evented = true;\n\n        super(player, options);\n    }\n\n    /**\n     * Setup recording engine.\n     *\n     * @param {Object} mediaType - Object describing the media type of this\n     *     engine.\n     * @param {Boolean} debug - Indicating whether or not debug messages should\n     *     be printed in the console.\n     */\n    setup(mediaType, debug) {\n        this.mediaType = mediaType;\n        this.debug = debug;\n    }\n\n    /**\n     * Load `Blob` and return `Promise`.\n     *\n     * @param {Blob} data - `Blob` to load.\n     * @returns {Promise} - Promise with `ArrayBuffer` data.\n     */\n    loadBlob(data) {\n        return blobToArrayBuffer(data);\n    }\n\n    /**\n     * Add filename and timestamp to converted file object.\n     *\n     * @param {(Blob|File)} fileObj - `Blob` or `File` object to modify.\n     * @param {date} [now] - Optional date information, default is\n     *    current timestamp.\n     */\n    addFileInfo(fileObj, now) {\n        addFileInfo(fileObj, now);\n    }\n}\n\n// expose component for external plugins\nvideojs.ConvertEngine = ConvertEngine;\nComponent.registerComponent('ConvertEngine', ConvertEngine);\n\nexport {\n    ConvertEngine, CONVERT_PLUGINS, TSEBML\n};\n","/**\n * @file engine-loader.js\n * @since 3.3.0\n */\n\nimport RecordRTCEngine from './record-rtc';\nimport {CONVERT_PLUGINS, TSEBML} from './convert-engine';\nimport {RECORDRTC, LIBVORBISJS, RECORDERJS, LAMEJS, OPUSRECORDER, VMSG, AUDIO_PLUGINS} from './record-engine';\n\n/**\n * Get audio plugin engine class.\n *\n * @private\n * @param {String} audioEngine - Name of the audio engine.\n * @returns {Object} Audio engine class.\n */\nconst getAudioEngine = function(audioEngine) {\n    let AudioEngineClass;\n    switch (audioEngine) {\n        case RECORDRTC:\n            // RecordRTC.js (default)\n            AudioEngineClass = RecordRTCEngine;\n            break;\n\n        case LIBVORBISJS:\n            // libvorbis.js\n            AudioEngineClass = videojs.LibVorbisEngine;\n            break;\n\n        case RECORDERJS:\n            // recorder.js\n            AudioEngineClass = videojs.RecorderjsEngine;\n            break;\n\n        case LAMEJS:\n            // lamejs\n            AudioEngineClass = videojs.LamejsEngine;\n            break;\n\n        case OPUSRECORDER:\n            // opus-recorder\n            AudioEngineClass = videojs.OpusRecorderEngine;\n            break;\n\n        case VMSG:\n            // vmsg\n            AudioEngineClass = videojs.VmsgEngine;\n            break;\n\n        default:\n            // unknown engine\n            throw new Error('Unknown audioEngine: ' + audioEngine);\n    }\n    return AudioEngineClass;\n};\n\n/**\n * Check whether any audio record plugins are enabled.\n *\n * @private\n * @param {String} audioEngine - Name of the audio engine.\n * @returns {Boolean} Whether any audio plugins are enabled or not.\n */\nconst isAudioPluginActive = function(audioEngine) {\n    return AUDIO_PLUGINS.indexOf(audioEngine) > -1;\n};\n\n/**\n * Get converter plugin engine class.\n *\n * @private\n * @param {String} convertEngine - Name of the convert engine.\n * @returns {Object} Convert engine class.\n */\nconst getConvertEngine = function(convertEngine) {\n    let ConvertEngineClass;\n    switch (convertEngine) {\n        case '':\n            // disabled (default)\n            break;\n\n        case TSEBML:\n            // ts-ebml\n            ConvertEngineClass = videojs.TsEBMLEngine;\n            break;\n\n        default:\n            // unknown engine\n            throw new Error('Unknown convertEngine: ' + convertEngine);\n    }\n    return ConvertEngineClass;\n};\n\nexport {\n    getAudioEngine, isAudioPluginActive, getConvertEngine\n};\n","/**\n * @file record-engine.js\n * @since 2.0.0\n */\n\nimport {downloadBlob, addFileInfo} from '../utils/file-util';\n\nconst Component = videojs.getComponent('Component');\n\n// supported recorder plugin engines\n// builtin\nconst RECORDRTC = 'recordrtc';\n// audio\nconst LIBVORBISJS = 'libvorbis.js';\nconst RECORDERJS = 'recorder.js';\nconst LAMEJS = 'lamejs';\nconst OPUSRECORDER = 'opus-recorder';\nconst VMSG = 'vmsg';\n\n// all audio plugins\nconst AUDIO_PLUGINS = [LIBVORBISJS, RECORDERJS, LAMEJS, OPUSRECORDER, VMSG];\n\n// all record plugins\nconst RECORD_PLUGINS = AUDIO_PLUGINS;\n\n\n/**\n * Base class for recorder backends.\n * @class\n * @augments videojs.Component\n */\nclass RecordEngine extends Component {\n    /**\n     * Creates an instance of this class.\n     *\n     * @param  {Player} player\n     *         The `Player` that this class should be attached to.\n     *\n     * @param  {Object} [options]\n     *         The key/value store of player options.\n     */\n    constructor(player, options) {\n        // auto mixin the evented mixin (required since video.js v6.6.0)\n        options.evented = true;\n\n        super(player, options);\n    }\n\n    /**\n     * Remove any temporary data and references to streams.\n     * @private\n     */\n    dispose() {\n        // dispose previous recording\n        if (this.recordedData !== undefined) {\n            URL.revokeObjectURL(this.recordedData);\n        }\n    }\n\n    /**\n     * Add filename and timestamp to recorded file object.\n     *\n     * @param {(Blob|File)} fileObj - Blob or File object to modify.\n     */\n    addFileInfo(fileObj) {\n        addFileInfo(fileObj);\n    }\n\n    /**\n     * Invoked when recording is stopped and resulting stream is available.\n     *\n     * @param {blob} data - Reference to the recorded `Blob`.\n     * @private\n     */\n    onStopRecording(data) {\n        this.recordedData = data;\n\n        // add filename and timestamp to recorded file object\n        this.addFileInfo(this.recordedData);\n\n        // remove reference to recorded stream\n        this.dispose();\n\n        // notify listeners\n        this.trigger('recordComplete');\n    }\n\n    /**\n     * Show save as dialog in browser so the user can store the recorded media\n     * locally.\n     *\n     * @param {Object} name - Object with names for the particular blob(s)\n     *     you want to save. File extensions are added automatically. For\n     *     example: {'video': 'name-of-video-file'}. Supported keys are\n     *     'audio', 'video' and 'gif'.\n     * @example\n     * // save video file as 'foo.webm'\n     * player.record().saveAs({'video': 'foo'});\n     * @returns {void}\n     */\n    saveAs(name) {\n        let fileName = name[Object.keys(name)[0]];\n\n        // download recorded file\n        downloadBlob(fileName, this.recordedData);\n    }\n}\n\n// expose component for external plugins\nvideojs.RecordEngine = RecordEngine;\nComponent.registerComponent('RecordEngine', RecordEngine);\n\nexport {\n    RecordEngine, RECORD_PLUGINS, AUDIO_PLUGINS,\n    RECORDRTC, LIBVORBISJS, RECORDERJS, LAMEJS, OPUSRECORDER, VMSG\n};\n","/**\n * @file record-mode.js\n * @since 2.0.0\n */\n\n// recorder modes\nconst IMAGE_ONLY = 'image_only';\nconst AUDIO_ONLY = 'audio_only';\nconst VIDEO_ONLY = 'video_only';\nconst AUDIO_VIDEO = 'audio_video';\nconst ANIMATION = 'animation';\nconst SCREEN_ONLY = 'screen_only';\n\n\nconst getRecorderMode = function(image, audio, video, animation, screen) {\n    if (isModeEnabled(image)) {\n        return IMAGE_ONLY;\n\n    } else if (isModeEnabled(animation)) {\n        return ANIMATION;\n\n    } else if (isModeEnabled(screen)) {\n        return SCREEN_ONLY;\n\n    } else if (isModeEnabled(audio) && !isModeEnabled(video)) {\n        return AUDIO_ONLY;\n\n    } else if (isModeEnabled(audio) && isModeEnabled(video)) {\n        return AUDIO_VIDEO;\n\n    } else if (!isModeEnabled(audio) && isModeEnabled(video)) {\n        return VIDEO_ONLY;\n    }\n};\n\n/**\n * Check whether mode is enabled or not.\n *\n * @param {(Object|Boolean)} mode - Mode.\n * @returns {Boolean} Return boolean indicating whether mode is enabled or not.\n * @private\n */\nconst isModeEnabled = function(mode) {\n    return mode === Object(mode) || mode === true;\n};\n\nexport {\n    getRecorderMode,\n    IMAGE_ONLY, AUDIO_ONLY, VIDEO_ONLY, AUDIO_VIDEO, ANIMATION, SCREEN_ONLY\n};\n","/**\n * @file record-rtc.js\n * @since 2.0.0\n */\n\nimport { RecordEngine } from './record-engine';\nimport { isChrome } from '../utils/detect-browser';\nimport {IMAGE_ONLY, AUDIO_ONLY, VIDEO_ONLY, AUDIO_VIDEO, ANIMATION, SCREEN_ONLY} from './record-mode';\n\nconst Component = videojs.getComponent('Component');\n\n/**\n * Engine used with the MRecordRTC class in the RecordRTC library.\n *\n * @class\n * @augments videojs.RecordEngine\n */\nclass RecordRTCEngine extends RecordEngine {\n\n    /**\n     * Setup recording engine.\n     *\n     * @param {LocalMediaStream} stream - Media stream to record.\n     * @param {Object} mediaType - Object describing the media type of this\n     *     engine.\n     * @param {Boolean} debug - Indicating whether or not debug messages should\n     *     be printed in the console.\n     */\n    setup(stream, mediaType, debug) {\n        this.inputStream = stream;\n        this.mediaType = mediaType;\n        this.debug = debug;\n\n        if ('screen' in this.mediaType) {\n            this.mediaType.video = true;\n        }\n\n        // setup RecordRTC\n        this.engine = new RecordRTC.MRecordRTC();\n        this.engine.mediaType = this.mediaType;\n        this.engine.disableLogs = !this.debug;\n        this.engine.mimeType = this.mimeType;\n\n        // audio settings\n        this.engine.bufferSize = this.bufferSize;\n        this.engine.sampleRate = this.sampleRate;\n        this.engine.numberOfAudioChannels = this.audioChannels;\n\n        // video/canvas settings\n        this.engine.video = this.video;\n        this.engine.canvas = this.canvas;\n\n        // animated gif settings\n        this.engine.quality = this.quality;\n        this.engine.frameRate = this.frameRate;\n        if (this.onTimeStamp !== undefined) {\n            this.engine.timeSlice = this.timeSlice;\n            this.engine.onTimeStamp = this.onTimeStamp;\n        }\n\n        // connect stream to recording engine\n        this.engine.addStream(this.inputStream);\n    }\n\n    /**\n     * Remove any temporary data and references to streams.\n     */\n    dispose() {\n        super.dispose();\n\n        if (typeof this.engine.destroy === 'function') {\n            this.engine.destroy();\n        }\n    }\n\n    /**\n     * Start recording.\n     */\n    start() {\n        this.engine.startRecording();\n    }\n\n    /**\n     * Stop recording. Result will be available async when onStopRecording\n     * is called.\n     */\n    stop() {\n        this.engine.stopRecording(this.onStopRecording.bind(this));\n    }\n\n    /**\n     * Pause recording.\n     */\n    pause() {\n        this.engine.pauseRecording();\n    }\n\n    /**\n     * Resume recording.\n     */\n    resume() {\n        this.engine.resumeRecording();\n    }\n\n    /**\n     * Show save as dialog in browser so the user can store the recorded media\n     * locally.\n     *\n     * @param {object} name - Object with names for the particular blob(s)\n     *     you want to save. File extensions are added automatically. For\n     *     example: {'video': 'name-of-video-file'}. Supported keys are\n     *     'audio', 'video' and 'gif'.\n     * @example\n     * // save video file as 'foo.webm'\n     * player.record().saveAs({'video': 'foo'});\n     */\n    saveAs(name) {\n        if (this.engine && name !== undefined) {\n            this.engine.save(name);\n        }\n    }\n\n    /**\n     * Invoked when recording is stopped and resulting stream is available.\n     *\n     * @private\n     * @param {string} audioVideoURL - Reference to the recorded Blob\n     *     object, e.g. 'blob:http://localhost:8080/10100016-4248-9949-b0d6-0bb40db56eba'\n     * @param {string} type - Media type, eg. 'video' or 'audio'.\n     */\n    onStopRecording(audioVideoURL, type) {\n        // store reference to recorded stream URL\n        this.mediaURL = audioVideoURL;\n\n        // store reference to recorded stream data\n        let recordType = this.player().record().getRecordType();\n        this.engine.getBlob((recording) => {\n            switch (recordType) {\n                case AUDIO_ONLY:\n                    if (recording.audio !== undefined) {\n                        this.recordedData = recording.audio;\n                    }\n                    break;\n\n                case VIDEO_ONLY:\n                case AUDIO_VIDEO:\n                case SCREEN_ONLY:\n                    // recordrtc returns a single blob that includes both audio\n                    // and video data\n                    if (recording.video !== undefined) {\n                        this.recordedData = recording.video;\n                    }\n                    break;\n\n                case ANIMATION:\n                    if (recording.gif !== undefined) {\n                        this.recordedData = recording.gif;\n                    }\n                    break;\n            }\n            // inject file info\n            this.addFileInfo(this.recordedData);\n\n            // notify listeners\n            this.trigger('recordComplete');\n\n        });\n    }\n}\n\n// expose plugin\nvideojs.RecordRTCEngine = RecordRTCEngine;\n\nComponent.registerComponent('RecordRTCEngine', RecordRTCEngine);\n\nexport default RecordRTCEngine;\n","/**\n * @file browser-shim.js\n * @since 2.0.0\n */\n\nconst setSrcObject = function (stream, element) {\n    if ('srcObject' in element) {\n        element.srcObject = stream;\n    } else if ('mozSrcObject' in element) {\n        element.mozSrcObject = stream;\n    } else {\n        element.srcObject = stream;\n    }\n};\n\nexport default setSrcObject;\n","/**\n * @file detect-browser.js\n * @since 2.0.0\n */\n\nimport window from 'global/window';\n\n/**\n * Browser detector.\n *\n * @private\n * @return {object} result containing browser, version and minVersion\n *     properties.\n */\nconst detectBrowser = function() {\n    // returned result object\n    let result = {};\n    result.browser = null;\n    result.version = null;\n    result.minVersion = null;\n\n    // fail early if it's not a browser\n    if (typeof window === 'undefined' || !window.navigator) {\n        result.browser = 'Not a supported browser.';\n        return result;\n    }\n\n    if (navigator.mozGetUserMedia) { // Firefox.\n        result.browser = 'firefox';\n        result.version = extractVersion(navigator.userAgent,\n            /Firefox\\/(\\d+)\\./, 1);\n        result.minVersion = 31;\n    } else if (navigator.webkitGetUserMedia) {\n        // Chrome, Chromium, Webview, Opera.\n        // Version matches Chrome/WebRTC version.\n        result.browser = 'chrome';\n        result.version = extractVersion(navigator.userAgent,\n            /Chrom(e|ium)\\/(\\d+)\\./, 2);\n        result.minVersion = 38;\n    } else if (navigator.mediaDevices &&\n               navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) { // Edge.\n        result.browser = 'edge';\n        result.version = extractVersion(navigator.userAgent,\n            /Edge\\/(\\d+).(\\d+)$/, 2);\n        result.minVersion = 10547;\n    } else if (window.RTCPeerConnection &&\n        navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n        result.browser = 'safari';\n        result.version = extractVersion(navigator.userAgent,\n            /AppleWebKit\\/(\\d+)\\./, 1);\n    } else {\n        // Default fallthrough: not supported.\n        result.browser = 'Not a supported browser.';\n        return result;\n    }\n\n    return result;\n};\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @private\n * @param {!string} uastring - userAgent string.\n * @param {!string} expr - Regular expression used as match criteria.\n * @param {!number} pos - position in the version string to be\n *     returned.\n * @return {!number} browser version.\n */\nconst extractVersion = function(uastring, expr, pos) {\n    let match = uastring.match(expr);\n    return match && match.length >= pos && parseInt(match[pos], 10);\n};\n\nconst isEdge = function() {\n    return detectBrowser().browser === 'edge';\n};\n\nconst isSafari = function() {\n    return detectBrowser().browser === 'safari';\n};\n\nconst isOpera = function() {\n    return !!window.opera || navigator.userAgent.indexOf('OPR/') !== -1;\n};\n\nconst isChrome = function() {\n    return detectBrowser().browser === 'chrome';\n};\n\nconst isFirefox = function() {\n    return detectBrowser().browser === 'firefox';\n};\n\nexport {\n    detectBrowser, isEdge, isOpera, isChrome, isSafari, isFirefox\n};\n","/**\n * @file file-util.js\n * @since 3.3.0\n */\n\n/**\n * Download `Blob` object in browser.\n *\n * @param {string} fileName - Name for the file to download.\n * @param {blob} data - File data.\n * @returns {void}\n */\nconst downloadBlob = function(fileName, data) {\n    if (typeof navigator.msSaveOrOpenBlob !== 'undefined') {\n        return navigator.msSaveOrOpenBlob(data, fileName);\n    } else if (typeof navigator.msSaveBlob !== 'undefined') {\n        return navigator.msSaveBlob(data, fileName);\n    }\n\n    let hyperlink = document.createElement('a');\n    hyperlink.href = URL.createObjectURL(data);\n    hyperlink.download = fileName;\n\n    hyperlink.style = 'display:none;opacity:0;color:transparent;';\n    (document.body || document.documentElement).appendChild(hyperlink);\n\n    if (typeof hyperlink.click === 'function') {\n        hyperlink.click();\n    } else {\n        hyperlink.target = '_blank';\n        hyperlink.dispatchEvent(new MouseEvent('click', {\n            view: window,\n            bubbles: true,\n            cancelable: true\n        }));\n    }\n\n    URL.revokeObjectURL(hyperlink.href);\n};\n\n/**\n * Read `Blob` as `ArrayBuffer`.\n *\n * @param {(Blob|File)} fileObj - Blob or File object to read.\n * @returns {void}\n */\nconst blobToArrayBuffer = function(fileObj) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n            resolve(reader.result);\n        };\n        reader.onerror = (ev) => {\n            reject(ev.error);\n        };\n        reader.readAsArrayBuffer(fileObj);\n    });\n};\n\n/**\n * Add filename and timestamp to recorded file object.\n *\n * @param {(Blob|File)} fileObj - Blob or File object to modify.\n * @param {date} [now] - Optional date information, default is\n *    current timestamp.\n */\nconst addFileInfo = function(fileObj, now) {\n    if (fileObj instanceof Blob || fileObj instanceof File) {\n        // set modification date\n        if (now === undefined) {\n            now = new Date();\n        }\n        try {\n            fileObj.lastModified = now.getTime();\n            fileObj.lastModifiedDate = now;\n        } catch (e) {\n            if (e instanceof TypeError) {\n                // ignore: setting getter-only property \"lastModifiedDate\"\n            } else {\n                // re-raise error\n                throw e;\n            }\n        }\n        // guess extension name from mime type, e.g. audio/ogg, but\n        // any extension is valid here. Chrome also accepts extended\n        // mime types like video/webm;codecs=h264,vp9,opus\n        let fileExtension = '.' + fileObj.type.split('/')[1];\n        if (fileExtension.indexOf(';') > -1) {\n            fileExtension = fileExtension.split(';')[0];\n        }\n\n        // use timestamp in filename, e.g. 1451180941326.ogg\n        try {\n            fileObj.name = now.getTime() + fileExtension;\n        } catch (e) {\n            if (e instanceof TypeError) {\n                // ignore: setting getter-only property \"name\"\n            } else {\n                // re-raise error\n                throw e;\n            }\n        }\n    }\n};\n\nexport {\n    downloadBlob, blobToArrayBuffer, addFileInfo\n};","/**\n * @file format-time.js\n * @since 2.0.0\n */\n\n/**\n * Format seconds as a time string, H:MM:SS, M:SS or M:SS:MMM.\n *\n * Supplying a guide (in seconds) will force a number of leading zeros\n * to cover the length of the guide.\n *\n * @param {number} seconds - Number of seconds to be turned into a\n *     string.\n * @param {number} guide - Number (in seconds) to model the string\n *     after.\n * @param {number} msDisplayMax - Number (in milliseconds) to model the string\n *     after.\n * @return {string} Time formatted as H:MM:SS, M:SS or M:SS:MMM, e.g.\n *     0:00:12.\n * @private\n */\nconst formatTime = function(seconds, guide, msDisplayMax) {\n    // Default to using seconds as guide\n    seconds = seconds < 0 ? 0 : seconds;\n    guide = guide || seconds;\n    let s = Math.floor(seconds % 60),\n        m = Math.floor(seconds / 60 % 60),\n        h = Math.floor(seconds / 3600),\n        gm = Math.floor(guide / 60 % 60),\n        gh = Math.floor(guide / 3600),\n        ms = Math.floor((seconds - s) * 1000);\n\n    // handle invalid times\n    if (isNaN(seconds) || seconds === Infinity) {\n        // '-' is false for all relational operators (e.g. <, >=) so this\n        // setting will add the minimum number of fields specified by the\n        // guide\n        h = m = s = ms = '-';\n    }\n\n    // Check if we need to show milliseconds\n    if (guide > 0 && guide < msDisplayMax) {\n        if (ms < 100) {\n            if (ms < 10) {\n                ms = '00' + ms;\n            } else {\n                ms = '0' + ms;\n            }\n        }\n        ms = ':' + ms;\n    } else {\n        ms = '';\n    }\n\n    // Check if we need to show hours\n    h = (h > 0 || gh > 0) ? h + ':' : '';\n\n    // If hours are showing, we may need to add a leading zero.\n    // Always show at least one digit of minutes.\n    m = (((h || gm >= 10) && m < 10) ? '0' + m : m) + ':';\n\n    // Check if leading zero is need for seconds\n    s = ((s < 10) ? '0' + s : s);\n\n    return h + m + s + ms;\n};\n\nexport default formatTime;\n","/**\n * @file videojs.record.js\n *\n * The main file for the videojs-record project.\n * MIT license: https://github.com/collab-project/videojs-record/blob/master/LICENSE\n */\n\nimport AnimationDisplay from './controls/animation-display';\nimport RecordCanvas from './controls/record-canvas';\nimport DeviceButton from './controls/device-button';\nimport CameraButton from './controls/camera-button';\nimport RecordToggle from './controls/record-toggle';\nimport RecordIndicator from './controls/record-indicator';\n\nimport pluginDefaultOptions from './defaults';\nimport formatTime from './utils/format-time';\nimport setSrcObject from './utils/browser-shim';\nimport {detectBrowser} from './utils/detect-browser';\n\nimport {getAudioEngine, isAudioPluginActive, getConvertEngine} from './engine/engine-loader';\nimport {IMAGE_ONLY, AUDIO_ONLY, VIDEO_ONLY, AUDIO_VIDEO, ANIMATION, SCREEN_ONLY, getRecorderMode} from './engine/record-mode';\n\nimport videojs from 'video.js';\n\nconst Plugin = videojs.getPlugin('plugin');\nconst Player = videojs.getComponent('Player');\n\nconst AUTO = 'auto';\n\n\n// monkey-patch play (#152)\nPlayer.prototype.play = function play() {\n    let retval = this.techGet_('play');\n    // silence errors (unhandled promise from play)\n    if (retval !== undefined && typeof retval.then === 'function') {\n        retval.then(null, (e) => {});\n    }\n    return retval;\n};\n\n/**\n * Record audio/video/images using the Video.js player.\n *\n * @class\n * @augments videojs.Plugin\n */\nclass Record extends Plugin {\n    /**\n     * The constructor function for the class.\n     *\n     * @param {(videojs.Player|Object)} player - video.js Player object.\n     * @param {Object} options - Player options.\n     */\n    constructor(player, options) {\n        super(player, options);\n\n        // add plugin style\n        player.addClass('vjs-record');\n\n        // setup plugin options\n        this.loadOptions();\n\n        // (re)set recorder state\n        this.resetState();\n\n        // add device button with icon based on type\n        let deviceIcon = 'av-perm';\n        switch (this.getRecordType()) {\n            case IMAGE_ONLY:\n            case VIDEO_ONLY:\n            case ANIMATION:\n                deviceIcon = 'video-perm';\n                break;\n            case AUDIO_ONLY:\n                deviceIcon = 'audio-perm';\n                break;\n            case SCREEN_ONLY:\n                deviceIcon = 'screen-perm';\n                break;\n        }\n        DeviceButton.prototype.buildCSSClass = () => {\n            // use dynamic icon class\n            return 'vjs-record vjs-device-button vjs-control vjs-icon-' + deviceIcon;\n        };\n        player.deviceButton = new DeviceButton(player, options);\n        player.addChild(player.deviceButton);\n\n        // add blinking record indicator\n        player.recordIndicator = new RecordIndicator(player, options);\n        player.recordIndicator.hide();\n        player.addChild(player.recordIndicator);\n\n        // add canvas for recording and displaying image\n        player.recordCanvas = new RecordCanvas(player, options);\n        player.recordCanvas.hide();\n        player.addChild(player.recordCanvas);\n\n        // add image for animation display\n        player.animationDisplay = new AnimationDisplay(player, options);\n        player.animationDisplay.hide();\n        player.addChild(player.animationDisplay);\n\n        // add camera button\n        player.cameraButton = new CameraButton(player, options);\n        player.cameraButton.hide();\n\n        // add record toggle\n        player.recordToggle = new RecordToggle(player, options);\n        player.recordToggle.hide();\n\n        // wait until player ui is ready\n        this.player.one('ready', this.setupUI.bind(this));\n    }\n\n    /**\n     * Setup plugin options.\n     *\n     * @param {Object} newOptions - Optional new player options.\n     */\n    loadOptions(newOptions = {}) {\n        let recordOptions = videojs.mergeOptions(pluginDefaultOptions,\n            this.player.options_.plugins.record, newOptions);\n\n        // record settings\n        this.recordImage = recordOptions.image;\n        this.recordAudio = recordOptions.audio;\n        this.recordVideo = recordOptions.video;\n        this.recordAnimation = recordOptions.animation;\n        this.recordScreen = recordOptions.screen;\n        this.maxLength = recordOptions.maxLength;\n        this.maxFileSize = recordOptions.maxFileSize;\n        this.msDisplayMax = parseFloat(recordOptions.msDisplayMax);\n        this.debug = recordOptions.debug;\n        this.recordTimeSlice = recordOptions.timeSlice;\n        this.autoMuteDevice = recordOptions.autoMuteDevice;\n\n        // video/canvas settings\n        this.videoFrameWidth = recordOptions.frameWidth;\n        this.videoFrameHeight = recordOptions.frameHeight;\n        this.videoRecorderType = recordOptions.videoRecorderType;\n        this.videoMimeType = recordOptions.videoMimeType;\n\n        // convert settings\n        this.convertEngine = recordOptions.convertEngine;\n\n        // audio settings\n        this.audioEngine = recordOptions.audioEngine;\n        this.audioRecorderType = recordOptions.audioRecorderType;\n        this.audioWorkerURL = recordOptions.audioWorkerURL;\n        this.audioBufferSize = recordOptions.audioBufferSize;\n        this.audioSampleRate = recordOptions.audioSampleRate;\n        this.audioBitRate = recordOptions.audioBitRate;\n        this.audioChannels = recordOptions.audioChannels;\n        this.audioMimeType = recordOptions.audioMimeType;\n        this.audioBufferUpdate = recordOptions.audioBufferUpdate;\n\n        // animation settings\n        this.animationFrameRate = recordOptions.animationFrameRate;\n        this.animationQuality = recordOptions.animationQuality;\n    }\n\n    /**\n     * Player UI is ready.\n     * @private\n     */\n    setupUI() {\n        // insert custom controls on left-side of controlbar\n        this.player.controlBar.addChild(this.player.cameraButton);\n        this.player.controlBar.el().insertBefore(\n            this.player.cameraButton.el(),\n            this.player.controlBar.el().firstChild);\n        this.player.controlBar.el().insertBefore(\n            this.player.recordToggle.el(),\n            this.player.controlBar.el().firstChild);\n\n        // get rid of unused controls\n        if (this.player.controlBar.remainingTimeDisplay !== undefined) {\n            this.player.controlBar.remainingTimeDisplay.el().style.display = 'none';\n        }\n        if (this.player.controlBar.liveDisplay !== undefined) {\n            this.player.controlBar.liveDisplay.el().style.display = 'none';\n        }\n\n        // loop feature is never used in this plugin\n        this.player.loop(false);\n\n        // tweak player UI based on type\n        switch (this.getRecordType()) {\n            case AUDIO_ONLY:\n                // reference to videojs-wavesurfer plugin\n                this.surfer = this.player.wavesurfer();\n                break;\n\n            case IMAGE_ONLY:\n            case VIDEO_ONLY:\n            case AUDIO_VIDEO:\n            case ANIMATION:\n            case SCREEN_ONLY:\n                // customize controls\n                this.player.bigPlayButton.hide();\n\n                // 'loadedmetadata' and 'loadstart' events reset the\n                // durationDisplay for the first time: prevent this\n                this.player.one('loadedmetadata', () => {\n                    // display max record time\n                    this.setDuration(this.maxLength);\n                });\n                this.player.one('loadstart', () => {\n                    // display max record time\n                    this.setDuration(this.maxLength);\n                });\n\n                // the native controls don't work for this UI so disable\n                // them no matter what\n                if (this.player.usingNativeControls_ === true) {\n                    if (this.player.tech_.el_ !== undefined) {\n                        this.player.tech_.el_.controls = false;\n                    }\n                }\n\n                // clicking or tapping the player video element should not try\n                // to start playback\n                this.player.removeTechControlsListeners_();\n\n                if (this.player.options_.controls) {\n                    // progress control isn't used by this plugin\n                    this.player.controlBar.progressControl.hide();\n\n                    // prevent controlbar fadeout\n                    this.player.on('userinactive', (event) => {\n                        this.player.userActive(true);\n                    });\n\n                    // videojs automatically hides the controls when no valid 'source'\n                    // element is included in the video or audio tag. Don't. Ever again.\n                    this.player.controlBar.show();\n                    this.player.controlBar.el().style.display = 'flex';\n                }\n                break;\n        }\n\n        // disable time display events that constantly try to reset the current time\n        // and duration values\n        this.player.off('timeupdate');\n        this.player.off('durationchange');\n        this.player.off('loadedmetadata');\n        this.player.off('loadstart');\n\n        // display max record time\n        this.setDuration(this.maxLength);\n\n        // hide play control\n        this.player.controlBar.playToggle.hide();\n    }\n\n    /**\n     * Indicates whether the plugin is currently recording or not.\n     *\n     * @return {boolean} Plugin currently recording or not.\n     */\n    isRecording() {\n        return this._recording;\n    }\n\n    /**\n     * Indicates whether the plugin is currently processing recorded data\n     * or not.\n     *\n     * @return {boolean} Plugin processing or not.\n     */\n    isProcessing() {\n        return this._processing;\n    }\n\n    /**\n     * Indicates whether the plugin is destroyed or not.\n     *\n     * @return {boolean} Plugin destroyed or not.\n     */\n    isDestroyed() {\n        let destroyed = (this.player === null);\n        if (destroyed === false) {\n            destroyed = (this.player.children() === null);\n        }\n        return destroyed;\n    }\n\n    /**\n     * Open the browser's recording device selection dialog.\n     */\n    getDevice() {\n        // define device callbacks once\n        if (this.deviceReadyCallback === undefined) {\n            this.deviceReadyCallback = this.onDeviceReady.bind(this);\n        }\n        if (this.deviceErrorCallback === undefined) {\n            this.deviceErrorCallback = this.onDeviceError.bind(this);\n        }\n        if (this.engineStopCallback === undefined) {\n            this.engineStopCallback = this.onRecordComplete.bind(this);\n        }\n        // ask the browser to give the user access to the media device\n        // and get a stream reference in the callback function\n        switch (this.getRecordType()) {\n            case AUDIO_ONLY:\n                // setup microphone\n                this.mediaType = {\n                    audio: (this.audioRecorderType === AUTO) ? true : this.audioRecorderType,\n                    video: false\n                };\n                // remove existing microphone listeners\n                this.surfer.surfer.microphone.un('deviceReady',\n                    this.deviceReadyCallback);\n                this.surfer.surfer.microphone.un('deviceError',\n                    this.deviceErrorCallback);\n\n                // setup new microphone listeners\n                this.surfer.surfer.microphone.on('deviceReady',\n                    this.deviceReadyCallback);\n                this.surfer.surfer.microphone.on('deviceError',\n                    this.deviceErrorCallback);\n\n                // disable existing playback events\n                this.surfer.setupPlaybackEvents(false);\n\n                // (re)set surfer liveMode\n                this.surfer.liveMode = true;\n                this.surfer.surfer.microphone.paused = false;\n\n                // assign custom reloadBufferFunction for microphone plugin to\n                // obtain AudioBuffer chunks\n                if (this.audioBufferUpdate === true) {\n                    this.surfer.surfer.microphone.reloadBufferFunction = (event) => {\n                        if (!this.surfer.surfer.microphone.paused) {\n                            // redraw\n                            this.surfer.surfer.empty();\n                            this.surfer.surfer.loadDecodedBuffer(event.inputBuffer);\n\n                            // store data and notify others\n                            this.player.recordedData = event.inputBuffer;\n                            this.player.trigger('audioBufferUpdate');\n                        }\n                    };\n                }\n                // open browser device selection dialog\n                this.surfer.surfer.microphone.start();\n                break;\n\n            case IMAGE_ONLY:\n            case VIDEO_ONLY:\n                // setup camera\n                this.mediaType = {\n                    audio: false,\n                    video: (this.videoRecorderType === AUTO) ? true : this.videoRecorderType\n                };\n                navigator.mediaDevices.getUserMedia({\n                    audio: false,\n                    video: (this.getRecordType() === IMAGE_ONLY) ? this.recordImage : this.recordVideo\n                }).then(\n                    this.onDeviceReady.bind(this)\n                ).catch(\n                    this.onDeviceError.bind(this)\n                );\n                break;\n\n            case AUDIO_VIDEO:\n                // setup camera and microphone\n                this.mediaType = {\n                    audio: (this.audioRecorderType === AUTO) ? true : this.audioRecorderType,\n                    video: (this.videoRecorderType === AUTO) ? true : this.videoRecorderType\n                };\n                navigator.mediaDevices.getUserMedia({\n                    audio: this.recordAudio,\n                    video: this.recordVideo\n                }).then(\n                    this.onDeviceReady.bind(this)\n                ).catch(\n                    this.onDeviceError.bind(this)\n                );\n                break;\n\n            case ANIMATION:\n                // setup camera\n                this.mediaType = {\n                    // animated GIF\n                    audio: false,\n                    video: false,\n                    gif: true\n                };\n                navigator.mediaDevices.getUserMedia({\n                    audio: false,\n                    video: this.recordAnimation\n                }).then(\n                    this.onDeviceReady.bind(this)\n                ).catch(\n                    this.onDeviceError.bind(this)\n                );\n                break;\n\n            case SCREEN_ONLY:\n                // setup screen\n                this.mediaType = {\n                    // screen capture\n                    audio: false,\n                    video: false,\n                    screen: true,\n                    gif: false\n                };\n                navigator.mediaDevices.getDisplayMedia({\n                    video: true\n                }).then(\n                    this.onDeviceReady.bind(this)\n                ).catch(\n                    this.onDeviceError.bind(this)\n                );\n                break;\n        }\n    }\n\n    /**\n     * Invoked when the device is ready.\n     *\n     * @private\n     * @param {LocalMediaStream} stream - Local media stream from device.\n     */\n    onDeviceReady(stream) {\n        this._deviceActive = true;\n\n        // store reference to stream for stopping etc.\n        this.stream = stream;\n\n        // hide device selection button\n        this.player.deviceButton.hide();\n\n        // reset time (e.g. when stopDevice was used)\n        this.setDuration(this.maxLength);\n        this.setCurrentTime(0);\n\n        // hide play/pause control (e.g. when stopDevice was used)\n        this.player.controlBar.playToggle.hide();\n\n        // reset playback listeners\n        this.off(this.player, 'timeupdate', this.playbackTimeUpdate);\n        this.off(this.player, 'ended', this.playbackTimeUpdate);\n\n        // setup recording engine\n        if (this.getRecordType() !== IMAGE_ONLY) {\n            // currently record plugins are only supported in audio-only mode\n            if (this.getRecordType() !== AUDIO_ONLY && isAudioPluginActive(this.audioEngine)) {\n                throw new Error('Currently ' + this.audioEngine +\n                    ' is only supported in audio-only mode.');\n            }\n            // get audio plugin engine class\n            let AudioEngineClass = getAudioEngine(this.audioEngine);\n\n            // create recording engine\n            try {\n                // connect stream to recording engine\n                this.engine = new AudioEngineClass(this.player, this.player.options_);\n            } catch (err) {\n                throw new Error('Could not load ' + this.audioEngine +\n                    ' plugin');\n            }\n\n            // listen for events\n            this.engine.on('recordComplete', this.engineStopCallback);\n\n            // audio settings\n            this.engine.bufferSize = this.audioBufferSize;\n            this.engine.sampleRate = this.audioSampleRate;\n            this.engine.bitRate = this.audioBitRate;\n            this.engine.audioChannels = this.audioChannels;\n            this.engine.audioWorkerURL = this.audioWorkerURL;\n\n            // mime type\n            this.engine.mimeType = {\n                video: this.videoMimeType,\n                gif: 'image/gif'\n            };\n            if (this.audioMimeType !== null &&\n                this.audioMimeType !== AUTO) {\n                this.engine.mimeType.audio = this.audioMimeType;\n            }\n\n            // video/canvas settings\n            this.engine.video = {\n                width: this.videoFrameWidth,\n                height: this.videoFrameHeight\n            };\n            this.engine.canvas = {\n                width: this.videoFrameWidth,\n                height: this.videoFrameHeight\n            };\n\n            // animated GIF settings\n            this.engine.quality = this.animationQuality;\n            this.engine.frameRate = this.animationFrameRate;\n\n            // timeSlice\n            if (this.recordTimeSlice && this.recordTimeSlice > 0) {\n                this.engine.timeSlice = this.recordTimeSlice;\n                this.engine.onTimeStamp = this.onTimeStamp.bind(this);\n            }\n\n            // initialize recorder\n            this.engine.setup(this.stream, this.mediaType, this.debug);\n\n            // create converter engine\n            if (this.convertEngine !== '') {\n                let ConvertEngineClass = getConvertEngine(this.convertEngine);\n                try {\n                    this.converter = new ConvertEngineClass(this.player,\n                        this.player.options_);\n                }\n                catch (err) {\n                    throw new Error('Could not load ' + this.convertEngine +\n                        ' plugin');\n                }\n\n                // initialize converter\n                this.converter.setup(this.mediaType, this.debug);\n            }\n\n            // show elements that should never be hidden in animation,\n            // audio and/or video modus\n            let uiElements = [\n                this.player.controlBar.currentTimeDisplay,\n                this.player.controlBar.timeDivider,\n                this.player.controlBar.durationDisplay\n            ];\n            uiElements.forEach((element) => {\n                if (element !== undefined) {\n                    element.el().style.display = 'block';\n                    element.show();\n                }\n            });\n\n            // show record button\n            this.player.recordToggle.show();\n        } else {\n            // disable record indicator\n            this.player.recordIndicator.disable();\n\n            // setup UI for retrying snapshot (e.g. when stopDevice was\n            // used)\n            this.retrySnapshot();\n\n            // reset and show camera button\n            this.player.cameraButton.onStop();\n            this.player.cameraButton.show();\n        }\n\n        // setup preview\n        if (this.getRecordType() !== AUDIO_ONLY) {\n            // show live preview\n            this.mediaElement = this.player.el().firstChild;\n            this.mediaElement.controls = false;\n\n            // mute incoming audio for feedback loops\n            this.mediaElement.muted = true;\n\n            // hide the volume bar while it's muted\n            this.displayVolumeControl(false);\n\n            // load stream\n            this.load(this.stream);\n\n            // stream loading is async, so we wait until it's ready to play\n            // the stream\n            this.player.one('loadedmetadata', () => {\n                // start stream\n                this.mediaElement.play();\n\n                // forward to listeners\n                this.player.trigger('deviceReady');\n            });\n        } else {\n            // forward to listeners\n            this.player.trigger('deviceReady');\n        }\n    }\n\n    /**\n     * Invoked when an device error occurred.\n     *\n     * @private\n     * @param {(string|number)} code - Error code/description.\n     */\n    onDeviceError(code) {\n        this._deviceActive = false;\n\n        if (!this.isDestroyed()) {\n            // store code\n            this.player.deviceErrorCode = code;\n\n            // forward error to player\n            this.player.trigger('deviceError');\n        }\n    }\n\n    /**\n     * Start recording.\n     */\n    start() {\n        if (!this.isProcessing()) {\n            this._recording = true;\n\n            // hide play/pause control\n            this.player.controlBar.playToggle.hide();\n\n            // reset playback listeners\n            this.off(this.player, 'timeupdate', this.playbackTimeUpdate);\n            this.off(this.player, 'ended', this.playbackTimeUpdate);\n\n            // start preview\n            switch (this.getRecordType()) {\n                case AUDIO_ONLY:\n                    // disable playback events\n                    this.surfer.setupPlaybackEvents(false);\n\n                    // start/resume live audio visualization\n                    this.surfer.surfer.microphone.paused = false;\n                    this.surfer.liveMode = true;\n                    this.surfer.surfer.microphone.play();\n                    break;\n\n                case VIDEO_ONLY:\n                case AUDIO_VIDEO:\n                case SCREEN_ONLY:\n                    // preview video stream in video element\n                    this.startVideoPreview();\n                    break;\n\n                case ANIMATION:\n                    // hide the first frame\n                    this.player.recordCanvas.hide();\n\n                    // hide the animation\n                    this.player.animationDisplay.hide();\n\n                    // show preview video\n                    this.mediaElement.style.display = 'block';\n\n                    // for animations, capture the first frame\n                    // that can be displayed as soon as recording\n                    // is complete\n                    this.captureFrame().then((result) => {\n                        // start video preview **after** capturing first frame\n                        this.startVideoPreview();\n                    });\n                    break;\n            }\n\n            if (this.autoMuteDevice) {\n                // unmute device\n                this.muteTracks(false);\n            }\n\n            // start recording\n            switch (this.getRecordType()) {\n                case IMAGE_ONLY:\n                    // create snapshot\n                    this.createSnapshot();\n\n                    // notify UI\n                    this.player.trigger('startRecord');\n                    break;\n\n                case VIDEO_ONLY:\n                case AUDIO_VIDEO:\n                case ANIMATION:\n                case SCREEN_ONLY:\n                    // wait for media stream on video element to actually load\n                    this.player.one('loadedmetadata', () => {\n                        // start actually recording process\n                        this.startRecording();\n                    });\n                    break;\n\n                default:\n                    // all resources have already loaded, so we can start\n                    // recording right away\n                    this.startRecording();\n            }\n        }\n    }\n\n    /**\n     * Start recording.\n     * @private\n     */\n    startRecording() {\n        // register starting point\n        this.paused = false;\n        this.pauseTime = this.pausedTime = 0;\n        this.startTime = new Date().getTime();\n\n        // start countdown\n        this.countDown = this.player.setInterval(\n            this.onCountDown.bind(this), 100);\n\n        // cleanup previous recording\n        if (this.engine !== undefined) {\n            this.engine.dispose();\n        }\n\n        // start recording stream\n        this.engine.start();\n\n        // notify UI\n        this.player.trigger('startRecord');\n    }\n\n    /**\n     * Stop recording.\n     */\n    stop() {\n        if (!this.isProcessing()) {\n            this._recording = false;\n            this._processing = true;\n\n            if (this.getRecordType() !== IMAGE_ONLY) {\n                // notify UI\n                this.player.trigger('stopRecord');\n\n                // stop countdown\n                this.player.clearInterval(this.countDown);\n\n                // stop recording stream (result will be available async)\n                if (this.engine) {\n                    this.engine.stop();\n                }\n\n                if (this.autoMuteDevice) {\n                    // mute device\n                    this.muteTracks(true);\n                }\n            } else {\n                if (this.player.recordedData) {\n                    // notify listeners that image data is (already) available\n                    this.player.trigger('finishRecord');\n                }\n            }\n        }\n    }\n\n    /**\n     * Stop device(s) and recording if active.\n     */\n    stopDevice() {\n        if (this.isRecording()) {\n            // stop stream once recorded data is available,\n            // otherwise it'll break recording\n            this.player.one('finishRecord', this.stopStream.bind(this));\n\n            // stop recording\n            this.stop();\n        } else {\n            // stop stream now, since there's no recorded data available\n            this.stopStream();\n        }\n    }\n\n    /**\n     * Stop stream and device.\n     */\n    stopStream() {\n        // stop stream and device\n        if (this.stream) {\n            this._deviceActive = false;\n\n            if (this.getRecordType() === AUDIO_ONLY) {\n                // make the microphone plugin stop it's device\n                this.surfer.surfer.microphone.stopDevice();\n                return;\n            }\n            this.stream.getTracks().forEach((stream) => {\n                stream.stop();\n            });\n        }\n    }\n\n    /**\n     * Pause recording.\n     */\n    pause() {\n        if (!this.paused) {\n            this.pauseTime = new Date().getTime();\n            this.paused = true;\n\n            this.engine.pause();\n        }\n    }\n\n    /**\n     * Resume recording.\n     */\n    resume() {\n        if (this.paused) {\n            this.pausedTime += new Date().getTime() - this.pauseTime;\n\n            this.engine.resume();\n            this.paused = false;\n        }\n    }\n\n    /**\n     * Invoked when recording completed and the resulting stream is\n     * available.\n     * @private\n     */\n    onRecordComplete() {\n        // store reference to recorded stream data\n        this.player.recordedData = this.engine.recordedData;\n\n        // change the replay button back to a play button\n        this.player.controlBar.playToggle.removeClass('vjs-ended');\n        this.player.controlBar.playToggle.show();\n\n        // notify converter\n        if (this.converter !== undefined) {\n            this.converter.convert(this.player.recordedData);\n        }\n\n        // notify listeners that data is available\n        this.player.trigger('finishRecord');\n\n        // skip loading when player is destroyed after finishRecord event\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        // load and display recorded data\n        switch (this.getRecordType()) {\n            case AUDIO_ONLY:\n                // pause player so user can start playback\n                this.surfer.pause();\n\n                // setup events for playback\n                this.surfer.setupPlaybackEvents(true);\n\n                // display loader\n                this.player.loadingSpinner.show();\n\n                // restore interaction with controls after waveform\n                // rendering is complete\n                this.surfer.surfer.once('ready', () => {\n                    this._processing = false;\n                });\n\n                // visualize recorded stream\n                this.load(this.player.recordedData);\n                break;\n\n            case VIDEO_ONLY:\n            case AUDIO_VIDEO:\n            case SCREEN_ONLY:\n                // pausing the player so we can visualize the recorded data\n                // will trigger an async video.js 'pause' event that we\n                // have to wait for.\n                this.player.one('pause', () => {\n                    // video data is ready\n                    this._processing = false;\n\n                    // hide loader\n                    this.player.loadingSpinner.hide();\n\n                    // show stream total duration\n                    this.setDuration(this.streamDuration);\n\n                    // update time during playback and at end\n                    this.on(this.player, 'timeupdate',\n                        this.playbackTimeUpdate);\n                    this.on(this.player, 'ended',\n                        this.playbackTimeUpdate);\n\n                    // unmute local audio during playback\n                    if (this.getRecordType() === AUDIO_VIDEO) {\n                        this.mediaElement.muted = false;\n\n                        // show the volume bar when it's unmuted\n                        this.displayVolumeControl(true);\n                    }\n\n                    // load recorded media\n                    this.load(this.player.recordedData);\n                });\n\n                // pause player so user can start playback\n                this.player.pause();\n                break;\n\n            case ANIMATION:\n                // animation data is ready\n                this._processing = false;\n\n                // hide loader\n                this.player.loadingSpinner.hide();\n\n                // show animation total duration\n                this.setDuration(this.streamDuration);\n\n                // hide preview video\n                this.mediaElement.style.display = 'none';\n\n                // show the first frame\n                this.player.recordCanvas.show();\n\n                // pause player so user can start playback\n                this.player.pause();\n\n                // show animation on play\n                this.on(this.player, 'play', this.showAnimation);\n\n                // hide animation on pause\n                this.on(this.player, 'pause', this.hideAnimation);\n                break;\n        }\n    }\n\n    /**\n     * Invoked during recording and displays the remaining time.\n     * @private\n     */\n    onCountDown() {\n        if (!this.paused) {\n            let now = new Date().getTime();\n            let duration = this.maxLength;\n            let currentTime = (now - (this.startTime + this.pausedTime)) / 1000;\n\n            this.streamDuration = currentTime;\n\n            if (currentTime >= duration) {\n                // at the end\n                currentTime = duration;\n\n                // stop recording\n                this.stop();\n            }\n\n            // update duration\n            this.setDuration(duration);\n\n            // update current time\n            this.setCurrentTime(currentTime, duration);\n\n            // notify listeners\n            this.player.trigger('progressRecord');\n        }\n    }\n\n    /**\n     * Get the current time of the recorded stream during playback.\n     *\n     * Returns 0 if no recording is available (yet).\n     *\n     * @returns {float} Current time of the recorded stream.\n     */\n    getCurrentTime() {\n        let currentTime = isNaN(this.streamCurrentTime) ? 0 : this.streamCurrentTime;\n\n        if (this.getRecordType() === AUDIO_ONLY) {\n            currentTime = this.surfer.getCurrentTime();\n        }\n\n        return currentTime;\n    }\n\n    /**\n     * Updates the player's element displaying the current time.\n     *\n     * @private\n     * @param {number} [currentTime=0] - Current position of the\n     *    playhead (in seconds).\n     * @param {number} [duration=0] - Duration in seconds.\n     */\n    setCurrentTime(currentTime, duration) {\n        currentTime = isNaN(currentTime) ? 0 : currentTime;\n        duration = isNaN(duration) ? 0 : duration;\n\n        switch (this.getRecordType()) {\n            case AUDIO_ONLY:\n                this.surfer.setCurrentTime(currentTime, duration);\n                break;\n\n            case VIDEO_ONLY:\n            case AUDIO_VIDEO:\n            case ANIMATION:\n            case SCREEN_ONLY:\n                if (this.player.controlBar.currentTimeDisplay &&\n                    this.player.controlBar.currentTimeDisplay.contentEl()) {\n                    this.streamCurrentTime = Math.min(currentTime, duration);\n\n                    // update current time display component\n                    this.player.controlBar.currentTimeDisplay.formattedTime_ =\n                        this.player.controlBar.currentTimeDisplay.contentEl().lastChild.textContent =\n                            formatTime(this.streamCurrentTime, duration, this.msDisplayMax);\n                }\n                break;\n        }\n    }\n\n    /**\n     * Get the length of the recorded stream in seconds.\n     *\n     * Returns 0 if no recording is available (yet).\n     *\n     * @returns {float} Duration of the recorded stream.\n     */\n    getDuration() {\n        let duration = isNaN(this.streamDuration) ? 0 : this.streamDuration;\n\n        return duration;\n    }\n\n    /**\n     * Updates the player's element displaying the duration time.\n     *\n     * @param {number} [duration=0] - Duration in seconds.\n     * @private\n     */\n    setDuration(duration) {\n        duration = isNaN(duration) ? 0 : duration;\n\n        switch (this.getRecordType()) {\n            case AUDIO_ONLY:\n                this.surfer.setDuration(duration);\n                break;\n\n            case VIDEO_ONLY:\n            case AUDIO_VIDEO:\n            case ANIMATION:\n            case SCREEN_ONLY:\n                // update duration display component\n                if (this.player.controlBar.durationDisplay &&\n                    this.player.controlBar.durationDisplay.contentEl()) {\n                    this.player.controlBar.durationDisplay.formattedTime_ =\n                    this.player.controlBar.durationDisplay.contentEl().lastChild.textContent =\n                        formatTime(duration, duration, this.msDisplayMax);\n                }\n                break;\n        }\n    }\n\n    /**\n     * Start loading data.\n     *\n     * @param {(string|blob|file)} url - Either the URL of the media file,\n     *     a Blob, a File object or MediaStream.\n     */\n    load(url) {\n        switch (this.getRecordType()) {\n            case AUDIO_ONLY:\n                // visualize recorded Blob stream\n                this.surfer.load(url);\n                break;\n\n            case IMAGE_ONLY:\n            case VIDEO_ONLY:\n            case AUDIO_VIDEO:\n            case ANIMATION:\n            case SCREEN_ONLY:\n                if (url instanceof Blob || url instanceof File) {\n                    // make sure to reset it (#312)\n                    this.mediaElement.srcObject = null;\n                    // assign blob using createObjectURL\n                    this.mediaElement.src = URL.createObjectURL(url);\n                } else {\n                    // assign stream with srcObject\n                    setSrcObject(url, this.mediaElement);\n                }\n                break;\n        }\n    }\n\n    /**\n     * Show save as dialog in browser so the user can store the recorded media\n     * locally.\n     *\n     * @param {object} name - Object with one or more names for the particular\n     *     blob(s) you want to save. File extensions are added automatically.\n     *     For example: {'video': 'name-of-video-file'}. Supported keys are\n     *     'audio', 'video' and 'gif'.\n     * @example\n     * // save video file as 'foo.webm'\n     * player.record().saveAs({'video': 'foo'});\n     */\n    saveAs(name) {\n        if (this.engine && name !== undefined) {\n            this.engine.saveAs(name);\n        }\n    }\n\n    /**\n     * Destroy plugin only.\n     *\n     * Use [destroy]{@link Record#destroy} to remove the plugin and the player\n     * as well.\n     */\n    dispose() {\n        // disable common event listeners\n        this.player.off('ready');\n        this.player.off('userinactive');\n        this.player.off('loadedmetadata');\n\n        // prevent callbacks if recording is in progress\n        if (this.engine) {\n            this.engine.dispose();\n            this.engine.off('recordComplete', this.engineStopCallback);\n        }\n\n        // stop recording and device\n        this.stop();\n        this.stopDevice();\n\n        // stop countdown\n        this.player.clearInterval(this.countDown);\n\n        // dispose wavesurfer.js\n        if (this.getRecordType() === AUDIO_ONLY) {\n            if (this.surfer) {\n                // also disposes player\n                this.surfer.destroy();\n            }\n        }\n\n        this.resetState();\n\n        super.dispose();\n    }\n\n    /**\n     * Destroy plugin and players and cleanup resources.\n     */\n    destroy() {\n        this.player.dispose();\n    }\n\n    /**\n     * Reset the plugin.\n     */\n    reset() {\n        // prevent callbacks if recording is in progress\n        if (this.engine) {\n            this.engine.dispose();\n            this.engine.off('recordComplete', this.engineStopCallback);\n        }\n\n        // stop recording and device\n        this.stop();\n        this.stopDevice();\n\n        // stop countdown\n        this.player.clearInterval(this.countDown);\n\n        // reset options\n        this.loadOptions();\n\n        // reset recorder state\n        this.resetState();\n\n        // reset record time\n        this.setDuration(this.maxLength);\n        this.setCurrentTime(0);\n\n        // reset player\n        this.player.reset();\n        switch (this.getRecordType()) {\n            case AUDIO_ONLY:\n                if (this.surfer && this.surfer.surfer) {\n                    // empty last frame\n                    this.surfer.surfer.empty();\n                }\n                break;\n\n            case IMAGE_ONLY:\n            case ANIMATION:\n                // reset UI\n                this.player.recordCanvas.hide();\n                this.player.cameraButton.hide();\n                break;\n        }\n\n        // hide play control\n        this.player.controlBar.playToggle.hide();\n\n        // show device selection button\n        this.player.deviceButton.show();\n\n        // hide record button\n        this.player.recordToggle.hide();\n\n        // loadedmetadata resets the durationDisplay for the\n        // first time\n        this.player.one('loadedmetadata', () => {\n            // display max record time\n            this.setDuration(this.maxLength);\n        });\n    }\n\n    /**\n     * Reset the plugin recorder state.\n     * @private\n     */\n    resetState() {\n        this._recording = false;\n        this._processing = false;\n        this._deviceActive = false;\n        this.devices = [];\n    }\n\n    /**\n     * Mute LocalMediaStream audio and video tracks.\n     *\n     * @param {boolean} mute - Whether or not the mute the track(s).\n     */\n    muteTracks(mute) {\n        if ((this.getRecordType() === AUDIO_ONLY ||\n            this.getRecordType() === AUDIO_VIDEO) &&\n            this.stream.getAudioTracks().length > 0) {\n            this.stream.getAudioTracks()[0].enabled = !mute;\n        }\n\n        if (this.getRecordType() !== AUDIO_ONLY &&\n            this.stream.getVideoTracks().length > 0) {\n            this.stream.getVideoTracks()[0].enabled = !mute;\n        }\n    }\n\n    /**\n     * Get recorder type.\n     *\n     * @returns {string} Recorder type constant.\n     * @example\n     * console.log(player.record().getRecordType()); // 'audio_video'\n     */\n    getRecordType() {\n        return getRecorderMode(this.recordImage, this.recordAudio,\n            this.recordVideo, this.recordAnimation, this.recordScreen);\n    }\n\n    /**\n     * Create and display snapshot image.\n     * @private\n     */\n    createSnapshot() {\n        this.captureFrame().then((result) => {\n            // turn the canvas data into base64 data with a PNG header\n            this.player.recordedData = result.toDataURL('image/png');\n\n            // hide preview video\n            this.mediaElement.style.display = 'none';\n\n            // show the snapshot\n            this.player.recordCanvas.show();\n\n            // stop recording\n            this.stop();\n        });\n    }\n\n    /**\n     * Reset UI for retrying a snapshot image.\n     * @private\n     */\n    retrySnapshot() {\n        this._processing = false;\n\n        // retry: hide the snapshot\n        this.player.recordCanvas.hide();\n\n        // show preview video\n        this.player.el().firstChild.style.display = 'block';\n    }\n\n    /**\n     * Capture frame from camera and copy data to canvas.\n     * @private\n     * @returns {void}\n     */\n    captureFrame() {\n        let detected = detectBrowser();\n        let recordCanvas = this.player.recordCanvas.el().firstChild;\n\n        // set the canvas size to the dimensions of the camera,\n        // which also wipes the content of the canvas\n        recordCanvas.width = this.player.width();\n        recordCanvas.height = this.player.height();\n\n        return new Promise((resolve, reject) => {\n            // MediaCapture is only supported on:\n            // - Chrome 60 and newer (see\n            // https://github.com/w3c/mediacapture-image/blob/gh-pages/implementation-status.md)\n            // - Firefox behind flag (https://bugzilla.mozilla.org/show_bug.cgi?id=888177)\n            //\n            // importing ImageCapture can fail when enabling chrome flag is still required.\n            // if so; ignore and continue\n            if ((detected.browser === 'chrome' && detected.version >= 60) &&\n               (typeof ImageCapture === typeof Function)) {\n                try {\n                    let track = this.stream.getVideoTracks()[0];\n                    let imageCapture = new ImageCapture(track);\n                    // take picture\n                    imageCapture.grabFrame().then((imageBitmap) => {\n                        // get a frame and copy it onto the canvas\n                        this.drawCanvas(recordCanvas, imageBitmap);\n\n                        // notify others\n                        resolve(recordCanvas);\n                    }).catch((error) => {\n                        // ignore, try oldskool\n                    });\n                } catch (err) {}\n            }\n            // no ImageCapture available: do it the oldskool way\n\n            // get a frame and copy it onto the canvas\n            this.drawCanvas(recordCanvas, this.mediaElement);\n\n            // notify others\n            resolve(recordCanvas);\n        });\n    }\n\n    /**\n     * Draw image frame on canvas element.\n     * @private\n     * @param {HTMLCanvasElement} canvas - Canvas to draw on.\n     * @param {HTMLElement} element - Element to draw onto the canvas.\n     */\n    drawCanvas(canvas, element) {\n        canvas.getContext('2d').drawImage(\n            element, 0, 0,\n            canvas.width,\n            canvas.height\n        );\n    }\n\n    /**\n     * Start preview of video stream.\n     * @private\n     */\n    startVideoPreview() {\n        // disable playback events\n        this.off('timeupdate');\n        this.off('durationchange');\n        this.off('loadedmetadata');\n        this.off('play');\n\n        // mute local audio\n        this.mediaElement.muted = true;\n\n        // hide volume control to prevent feedback\n        this.displayVolumeControl(false);\n\n        // start or resume live preview\n        this.load(this.stream);\n        this.mediaElement.play();\n    }\n\n    /**\n     * Show animated GIF.\n     * @private\n     */\n    showAnimation() {\n        let animationDisplay = this.player.animationDisplay.el().firstChild;\n\n        // set the image size to the dimensions of the recorded animation\n        animationDisplay.width = this.player.width();\n        animationDisplay.height = this.player.height();\n\n        // hide the first frame\n        this.player.recordCanvas.hide();\n\n        // show the animation\n        setSrcObject(this.player.recordedData, animationDisplay);\n        this.player.animationDisplay.show();\n    }\n\n    /**\n     * Hide animated GIF.\n     * @private\n     */\n    hideAnimation() {\n        // show the first frame\n        this.player.recordCanvas.show();\n\n        // hide the animation\n        this.player.animationDisplay.hide();\n    }\n\n    /**\n     * Update time during playback.\n     * @private\n     */\n    playbackTimeUpdate() {\n        this.setCurrentTime(this.player.currentTime(),\n            this.streamDuration);\n    }\n\n    /**\n     * Received new timestamp (when timeSlice option is enabled).\n     * @private\n     * @param {float} current - Current timestamp.\n     * @param {array} all - List of timestamps so far.\n     */\n    onTimeStamp(current, all) {\n        this.player.currentTimestamp = current;\n        this.player.allTimestamps = all;\n\n        // get blob (only for MediaStreamRecorder)\n        let internal;\n        switch (this.getRecordType()) {\n            case AUDIO_ONLY:\n                internal = this.engine.engine.audioRecorder;\n                break;\n\n            case ANIMATION:\n                internal = this.engine.engine.gifRecorder;\n                break;\n\n            default:\n                internal = this.engine.engine.videoRecorder;\n        }\n\n        let maxFileSizeReached = false;\n        if (internal) {\n            internal = internal.getInternalRecorder();\n        }\n\n        if ((internal instanceof MediaStreamRecorder) === true) {\n            this.player.recordedData = internal.getArrayOfBlobs();\n\n            // inject file info for newest blob\n            this.engine.addFileInfo(\n                this.player.recordedData[this.player.recordedData.length - 1]);\n\n            // check max file size\n            if (this.maxFileSize > 0) {\n                let currentSize = new Blob(this.player.recordedData).size;\n                if (currentSize >= this.maxFileSize) {\n                    maxFileSizeReached = true;\n                }\n            }\n        }\n\n        // notify others\n        this.player.trigger('timestamp');\n\n        // automatically stop when max file size was reached\n        if (maxFileSizeReached) {\n            this.stop();\n        }\n    }\n\n    /**\n     * Collects information about the media input and output devices\n     * available on the system.\n     */\n    enumerateDevices() {\n        if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n            this.player.enumerateErrorCode = 'enumerateDevices() not supported.';\n            this.player.trigger('enumerateError');\n            return;\n        }\n\n        // List cameras and microphones.\n        navigator.mediaDevices.enumerateDevices(this).then((devices) => {\n            this.devices = [];\n            devices.forEach((device) => {\n                this.devices.push(device);\n            });\n\n            // notify listeners\n            this.player.trigger('enumerateReady');\n        }).catch((err) => {\n            this.player.enumerateErrorCode = err;\n            this.player.trigger('enumerateError');\n        });\n    }\n\n    /**\n     * Change the audio output device.\n     *\n     * @param {string} deviceId - Id of audio output device.\n     */\n    setAudioOutput(deviceId) {\n        let errorMessage;\n\n        switch (this.getRecordType()) {\n            case AUDIO_ONLY:\n                // use wavesurfer\n                this.surfer.surfer.setSinkId(deviceId).then((result) => {\n                    // notify listeners\n                    this.player.trigger('audioOutputReady');\n                    return;\n                }).catch((err) => {\n                    errorMessage = err;\n                });\n                break;\n\n            default:\n                let element = player.tech_.el_;\n                if (deviceId) {\n                    if (typeof element.sinkId !== 'undefined') {\n                        element.setSinkId(deviceId).then((result) => {\n                            // notify listeners\n                            this.player.trigger('audioOutputReady');\n                            return;\n                        }).catch((err) => {\n                            errorMessage = err;\n                        });\n                    } else {\n                        errorMessage = 'Browser does not support audio output device selection.';\n                    }\n                } else {\n                    errorMessage = 'Invalid deviceId: ' + deviceId;\n                }\n                break;\n        }\n\n        // error if we get here: notify listeners\n        this.player.trigger('error', errorMessage);\n    }\n\n    /**\n     * Show or hide the volume menu.\n     *\n     * @private\n     * @param {boolean} display - Hide/show volume control.\n     */\n    displayVolumeControl(display) {\n        if (this.player.controlBar.volumePanel !== undefined) {\n            if (display === true) {\n                display = 'flex';\n            } else {\n                display = 'none';\n            }\n            this.player.controlBar.volumePanel.el().style.display = display;\n        }\n    }\n}\n\n// version nr is injected during build\nRecord.VERSION = __VERSION__;\n\n// register plugin\nvideojs.Record = Record;\nif (videojs.getPlugin('record') === undefined) {\n    videojs.registerPlugin('record', Record);\n}\n\n// export plugin\nmodule.exports = {\n    Record\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE_video_js__;"],"sourceRoot":""}