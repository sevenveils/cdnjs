{"version":3,"file":"config-store.es5.umd.min.js","sources":["../../../../packages/config-store/src/configuration.ts","../../../../packages/config-store/src/providers/cachingConfigurationProvider.ts","../../../../packages/config-store/src/providers/spListConfigurationProvider.ts"],"sourcesContent":["import { TypedHash, mergeMaps, objectToMap, jsS } from \"@pnp/common\";\n\n/**\n * Interface for configuration providers\n *\n */\nexport interface IConfigurationProvider {\n\n    /**\n     * Gets the configuration from the provider\n     */\n    getConfiguration(): Promise<TypedHash<string>>;\n}\n\n/**\n * Class used to manage the current application settings\n *\n */\nexport class Settings {\n\n    /**\n     * Creates a new instance of the settings class\n     *\n     * @constructor\n     */\n    constructor(private _settings = new Map<string, string>()) {\n    }\n\n    /**\n     * Adds a new single setting, or overwrites a previous setting with the same key\n     *\n     * @param {string} key The key used to store this setting\n     * @param {string} value The setting value to store\n     */\n    public add(key: string, value: string) {\n        this._settings.set(key, value);\n    }\n\n    /**\n     * Adds a JSON value to the collection as a string, you must use getJSON to rehydrate the object when read\n     *\n     * @param {string} key The key used to store this setting\n     * @param {any} value The setting value to store\n     */\n    public addJSON(key: string, value: any) {\n        this._settings.set(key, jsS(value));\n    }\n\n    /**\n     * Applies the supplied hash to the setting collection overwriting any existing value, or created new values\n     *\n     * @param {TypedHash<any>} hash The set of values to add\n     */\n    public apply(hash: TypedHash<any>): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            try {\n                this._settings = mergeMaps(this._settings, objectToMap(hash));\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Loads configuration settings into the collection from the supplied provider and returns a Promise\n     *\n     * @param {IConfigurationProvider} provider The provider from which we will load the settings\n     */\n    public load(provider: IConfigurationProvider): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            provider.getConfiguration().then((value) => {\n                this._settings = mergeMaps(this._settings, objectToMap(value));\n                resolve();\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * Gets a value from the configuration\n     *\n     * @param {string} key The key whose value we want to return. Returns null if the key does not exist\n     * @return {string} string value from the configuration\n     */\n    public get(key: string): string | null {\n        return this._settings.get(key) || null;\n    }\n\n    /**\n     * Gets a JSON value, rehydrating the stored string to the original object\n     *\n     * @param {string} key The key whose value we want to return. Returns null if the key does not exist\n     * @return {any} object from the configuration\n     */\n    public getJSON(key: string): any {\n        const o = this.get(key);\n        if (o === undefined || o === null) {\n            return o;\n        }\n\n        return JSON.parse(o);\n    }\n}\n","import { IConfigurationProvider } from \"../configuration\";\nimport { TypedHash, PnPClientStore, PnPClientStorage } from \"@pnp/common\";\n\n/**\n * A caching provider which can wrap other non-caching providers\n *\n */\nexport default class CachingConfigurationProvider implements IConfigurationProvider {\n\n    private store: PnPClientStore;\n\n    /**\n     * Creates a new caching configuration provider\n     * @constructor\n     * @param {IConfigurationProvider} wrappedProvider Provider which will be used to fetch the configuration\n     * @param {string} cacheKey Key that will be used to store cached items to the cache\n     * @param {IPnPClientStore} cacheStore OPTIONAL storage, which will be used to store cached settings.\n     */\n    constructor(private wrappedProvider: IConfigurationProvider, private cacheKey: string, cacheStore?: PnPClientStore) {\n        this.wrappedProvider = wrappedProvider;\n        this.store = (cacheStore) ? cacheStore : this.selectPnPCache();\n    }\n\n    /**\n     * Gets the wrapped configuration providers\n     *\n     * @return {IConfigurationProvider} Wrapped configuration provider\n     */\n    public getWrappedProvider(): IConfigurationProvider {\n        return this.wrappedProvider;\n    }\n\n    /**\n     * Loads the configuration values either from the cache or from the wrapped provider\n     *\n     * @return {Promise<TypedHash<string>>} Promise of loaded configuration values\n     */\n    public getConfiguration(): Promise<TypedHash<string>> {\n        // Cache not available, pass control to the wrapped provider\n        if ((!this.store) || (!this.store.enabled)) {\n            return this.wrappedProvider.getConfiguration();\n        }\n\n        return this.store.getOrPut(this.cacheKey, () => {\n            return this.wrappedProvider.getConfiguration().then((providedConfig) => {\n                this.store.put(this.cacheKey, providedConfig);\n                return providedConfig;\n            });\n        });\n    }\n\n    private selectPnPCache(): PnPClientStore {\n        const pnpCache = new PnPClientStorage();\n        if ((pnpCache.local) && (pnpCache.local.enabled)) {\n            return pnpCache.local;\n        }\n        if ((pnpCache.session) && (pnpCache.session.enabled)) {\n            return pnpCache.session;\n        }\n        throw Error(\"Cannot create a caching configuration provider since cache is not available.\");\n    }\n}\n","import { IConfigurationProvider } from \"../configuration\";\nimport { TypedHash } from \"@pnp/common\";\nimport { default as CachingConfigurationProvider } from \"./cachingConfigurationProvider\";\nimport { Web } from \"@pnp/sp\";\n\n/**\n * A configuration provider which loads configuration values from a SharePoint list\n *\n */\nexport default class SPListConfigurationProvider implements IConfigurationProvider {\n    /**\n     * Creates a new SharePoint list based configuration provider\n     * @constructor\n     * @param {string} webUrl Url of the SharePoint site, where the configuration list is located\n     * @param {string} listTitle Title of the SharePoint list, which contains the configuration settings (optional, default: \"config\")\n     * @param {string} keyFieldName The name of the field in the list to use as the setting key (optional, default: \"Title\")\n     * @param {string} valueFieldName The name of the field in the list to use as the setting value (optional, default: \"Value\")\n     */\n    constructor(public readonly web: Web, public readonly listTitle = \"config\", private keyFieldName = \"Title\", private valueFieldName = \"Value\") { }\n\n    /**\n     * Loads the configuration values from the SharePoint list\n     *\n     * @return {Promise<TypedHash<string>>} Promise of loaded configuration values\n     */\n    public getConfiguration(): Promise<TypedHash<string>> {\n\n        return this.web.lists.getByTitle(this.listTitle).items.select(this.keyFieldName, this.valueFieldName).get<any[]>()\n            .then((data) => data.reduce((c: any, item: any) => {\n                c[item[this.keyFieldName]] = item[this.valueFieldName];\n                return c;\n            }, {}));\n    }\n\n    /**\n     * Wraps the current provider in a cache enabled provider\n     *\n     * @return {CachingConfigurationProvider} Caching providers which wraps the current provider\n     */\n    public asCaching(cacheKey = `pnp_configcache_splist_${this.web.toUrl()}+${this.listTitle}`): CachingConfigurationProvider {\n        return new CachingConfigurationProvider(this, cacheKey);\n    }\n}\n"],"names":["_settings","Map","this","Settings","key","value","set","jsS","hash","Promise","resolve","reject","_this","mergeMaps","objectToMap","e","provider","getConfiguration","then","catch","get","o","JSON","parse","wrappedProvider","cacheKey","cacheStore","store","selectPnPCache","CachingConfigurationProvider","enabled","getOrPut","providedConfig","put","pnpCache","PnPClientStorage","local","session","Error","web","listTitle","keyFieldName","valueFieldName","SPListConfigurationProvider","lists","getByTitle","items","select","data","reduce","c","item","toUrl"],"mappings":";;;;;;;;;6RAyBI,WAAoBA,gBAAAA,MAAgBC,KAAhBC,eAAAF,EA6ExB,OApEWG,gBAAP,SAAWC,EAAaC,GACpBH,KAAKF,UAAUM,IAAIF,EAAKC,IASrBF,oBAAP,SAAeC,EAAaC,GACxBH,KAAKF,UAAUM,IAAIF,EAAKG,MAAIF,KAQzBF,kBAAP,SAAaK,GAAb,WACI,OAAO,IAAIC,QAAc,SAACC,EAASC,GAC/B,IACIC,EAAKZ,UAAYa,YAAUD,EAAKZ,UAAWc,cAAYN,IACvDE,IACF,MAAOK,GACLJ,EAAOI,OAUZZ,iBAAP,SAAYa,GAAZ,WACI,OAAO,IAAIP,QAAc,SAACC,EAASC,GAC/BK,EAASC,mBAAmBC,KAAK,SAACb,GAC9BO,EAAKZ,UAAYa,YAAUD,EAAKZ,UAAWc,cAAYT,IACvDK,MACDS,MAAMR,MAUVR,gBAAP,SAAWC,GACP,OAAOF,KAAKF,UAAUoB,IAAIhB,IAAQ,MAS/BD,oBAAP,SAAeC,GACX,IAAMiB,EAAInB,KAAKkB,IAAIhB,GACnB,OAAIiB,MAAAA,EACOA,EAGJC,KAAKC,MAAMF,sBClFtB,WAAoBG,EAAiDC,EAAkBC,GAAnExB,qBAAAsB,EAAiDtB,cAAAuB,EACjEvB,KAAKsB,gBAAkBA,EACvBtB,KAAKyB,MAAQ,GAA4BzB,KAAK0B,iBAyCtD,OAjCWC,+BAAP,WACI,OAAO3B,KAAKsB,iBAQTK,6BAAP,WAAA,WAEI,OAAM3B,KAAKyB,OAAYzB,KAAKyB,MAAMG,QAI3B5B,KAAKyB,MAAMI,SAAS7B,KAAKuB,SAAU,WACtC,OAAOb,EAAKY,gBAAgBP,mBAAmBC,KAAK,SAACc,GAEjD,OADApB,EAAKe,MAAMM,IAAIrB,EAAKa,SAAUO,GACvBA,MANJ9B,KAAKsB,gBAAgBP,oBAW5BY,2BAAR,WACI,IAAMK,EAAW,IAAIC,mBACrB,GAAKD,EAAc,OAAMA,EAASE,MAAa,QAC3C,OAAOF,EAASE,MAEpB,GAAKF,EAAgB,SAAMA,EAASG,QAAe,QAC/C,OAAOH,EAASG,QAEpB,MAAMC,MAAM,mGCzChB,WAA4BC,EAA0BC,EAA8BC,EAAgCC,gBAA9DF,yBAA8BC,wBAAgCC,WAAxFxC,SAAAqC,EAA0BrC,eAAAsC,EAA8BtC,kBAAAuC,EAAgCvC,oBAAAwC,EAwBxH,OAjBWC,6BAAP,WAAA,WAEI,OAAOzC,KAAKqC,IAAIK,MAAMC,WAAW3C,KAAKsC,WAAWM,MAAMC,OAAO7C,KAAKuC,aAAcvC,KAAKwC,gBAAgBtB,MACjGF,KAAK,SAAC8B,GAAS,OAAAA,EAAKC,OAAO,SAACC,EAAQC,GAEjC,OADAD,EAAEC,EAAKvC,EAAK6B,eAAiBU,EAAKvC,EAAK8B,gBAChCQ,GACR,OAQJP,sBAAP,SAAiBlB,GACb,oBADaA,4BAAqCvB,KAAKqC,IAAIa,YAAWlD,KAAKsC,WACpE,IAAIX,EAA6B3B,KAAMuB"}