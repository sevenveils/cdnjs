{"version":3,"file":"config-store.js","sources":["../../../../packages/config-store/src/configuration.ts","../../../../packages/config-store/src/providers/cachingConfigurationProvider.ts","../../../../packages/config-store/src/providers/spListConfigurationProvider.ts"],"sourcesContent":["import { TypedHash, mergeMaps, objectToMap, jsS } from \"@pnp/common\";\n\n/**\n * Interface for configuration providers\n *\n */\nexport interface IConfigurationProvider {\n\n    /**\n     * Gets the configuration from the provider\n     */\n    getConfiguration(): Promise<TypedHash<string>>;\n}\n\n/**\n * Class used to manage the current application settings\n *\n */\nexport class Settings {\n\n    /**\n     * Creates a new instance of the settings class\n     *\n     * @constructor\n     */\n    constructor(private _settings = new Map<string, string>()) {\n    }\n\n    /**\n     * Adds a new single setting, or overwrites a previous setting with the same key\n     *\n     * @param {string} key The key used to store this setting\n     * @param {string} value The setting value to store\n     */\n    public add(key: string, value: string) {\n        this._settings.set(key, value);\n    }\n\n    /**\n     * Adds a JSON value to the collection as a string, you must use getJSON to rehydrate the object when read\n     *\n     * @param {string} key The key used to store this setting\n     * @param {any} value The setting value to store\n     */\n    public addJSON(key: string, value: any) {\n        this._settings.set(key, jsS(value));\n    }\n\n    /**\n     * Applies the supplied hash to the setting collection overwriting any existing value, or created new values\n     *\n     * @param {TypedHash<any>} hash The set of values to add\n     */\n    public apply(hash: TypedHash<any>): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            try {\n                this._settings = mergeMaps(this._settings, objectToMap(hash));\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Loads configuration settings into the collection from the supplied provider and returns a Promise\n     *\n     * @param {IConfigurationProvider} provider The provider from which we will load the settings\n     */\n    public load(provider: IConfigurationProvider): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            provider.getConfiguration().then((value) => {\n                this._settings = mergeMaps(this._settings, objectToMap(value));\n                resolve();\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * Gets a value from the configuration\n     *\n     * @param {string} key The key whose value we want to return. Returns null if the key does not exist\n     * @return {string} string value from the configuration\n     */\n    public get(key: string): string | null {\n        return this._settings.get(key) || null;\n    }\n\n    /**\n     * Gets a JSON value, rehydrating the stored string to the original object\n     *\n     * @param {string} key The key whose value we want to return. Returns null if the key does not exist\n     * @return {any} object from the configuration\n     */\n    public getJSON(key: string): any {\n        const o = this.get(key);\n        if (o === undefined || o === null) {\n            return o;\n        }\n\n        return JSON.parse(o);\n    }\n}\n","import { IConfigurationProvider } from \"../configuration\";\nimport { TypedHash, PnPClientStore, PnPClientStorage } from \"@pnp/common\";\n\n/**\n * A caching provider which can wrap other non-caching providers\n *\n */\nexport default class CachingConfigurationProvider implements IConfigurationProvider {\n\n    private store: PnPClientStore;\n\n    /**\n     * Creates a new caching configuration provider\n     * @constructor\n     * @param {IConfigurationProvider} wrappedProvider Provider which will be used to fetch the configuration\n     * @param {string} cacheKey Key that will be used to store cached items to the cache\n     * @param {IPnPClientStore} cacheStore OPTIONAL storage, which will be used to store cached settings.\n     */\n    constructor(private wrappedProvider: IConfigurationProvider, private cacheKey: string, cacheStore?: PnPClientStore) {\n        this.wrappedProvider = wrappedProvider;\n        this.store = (cacheStore) ? cacheStore : this.selectPnPCache();\n    }\n\n    /**\n     * Gets the wrapped configuration providers\n     *\n     * @return {IConfigurationProvider} Wrapped configuration provider\n     */\n    public getWrappedProvider(): IConfigurationProvider {\n        return this.wrappedProvider;\n    }\n\n    /**\n     * Loads the configuration values either from the cache or from the wrapped provider\n     *\n     * @return {Promise<TypedHash<string>>} Promise of loaded configuration values\n     */\n    public getConfiguration(): Promise<TypedHash<string>> {\n        // Cache not available, pass control to the wrapped provider\n        if ((!this.store) || (!this.store.enabled)) {\n            return this.wrappedProvider.getConfiguration();\n        }\n\n        return this.store.getOrPut(this.cacheKey, () => {\n            return this.wrappedProvider.getConfiguration().then((providedConfig) => {\n                this.store.put(this.cacheKey, providedConfig);\n                return providedConfig;\n            });\n        });\n    }\n\n    private selectPnPCache(): PnPClientStore {\n        const pnpCache = new PnPClientStorage();\n        if ((pnpCache.local) && (pnpCache.local.enabled)) {\n            return pnpCache.local;\n        }\n        if ((pnpCache.session) && (pnpCache.session.enabled)) {\n            return pnpCache.session;\n        }\n        throw Error(\"Cannot create a caching configuration provider since cache is not available.\");\n    }\n}\n","import { IConfigurationProvider } from \"../configuration\";\nimport { TypedHash } from \"@pnp/common\";\nimport { default as CachingConfigurationProvider } from \"./cachingConfigurationProvider\";\nimport { Web } from \"@pnp/sp\";\n\n/**\n * A configuration provider which loads configuration values from a SharePoint list\n *\n */\nexport default class SPListConfigurationProvider implements IConfigurationProvider {\n    /**\n     * Creates a new SharePoint list based configuration provider\n     * @constructor\n     * @param {string} webUrl Url of the SharePoint site, where the configuration list is located\n     * @param {string} listTitle Title of the SharePoint list, which contains the configuration settings (optional, default: \"config\")\n     * @param {string} keyFieldName The name of the field in the list to use as the setting key (optional, default: \"Title\")\n     * @param {string} valueFieldName The name of the field in the list to use as the setting value (optional, default: \"Value\")\n     */\n    constructor(public readonly web: Web, public readonly listTitle = \"config\", private keyFieldName = \"Title\", private valueFieldName = \"Value\") { }\n\n    /**\n     * Loads the configuration values from the SharePoint list\n     *\n     * @return {Promise<TypedHash<string>>} Promise of loaded configuration values\n     */\n    public getConfiguration(): Promise<TypedHash<string>> {\n\n        return this.web.lists.getByTitle(this.listTitle).items.select(this.keyFieldName, this.valueFieldName).get<any[]>()\n            .then((data) => data.reduce((c: any, item: any) => {\n                c[item[this.keyFieldName]] = item[this.valueFieldName];\n                return c;\n            }, {}));\n    }\n\n    /**\n     * Wraps the current provider in a cache enabled provider\n     *\n     * @return {CachingConfigurationProvider} Caching providers which wraps the current provider\n     */\n    public asCaching(cacheKey = `pnp_configcache_splist_${this.web.toUrl()}+${this.listTitle}`): CachingConfigurationProvider {\n        return new CachingConfigurationProvider(this, cacheKey);\n    }\n}\n"],"names":[],"mappings":"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"}