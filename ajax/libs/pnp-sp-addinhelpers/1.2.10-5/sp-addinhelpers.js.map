{"version":3,"file":"sp-addinhelpers.js","sources":["../../../../packages/sp-addinhelpers/src/sprequestexecutorclient.ts","../../../../packages/sp-addinhelpers/src/sprestaddin.ts"],"sourcesContent":["import { extend, HttpClientImpl } from \"@pnp/common\";\n\n/**\n * Makes requests using the SP.RequestExecutor library.\n */\nexport class SPRequestExecutorClient implements HttpClientImpl {\n    /**\n     * Fetches a URL using the SP.RequestExecutor library.\n     */\n    public fetch(url: string, options: any): Promise<Response> {\n        if (SP === undefined || SP.RequestExecutor === undefined) {\n            throw Error(\"SP.RequestExecutor is undefined. Load the SP.RequestExecutor.js library (/_layouts/15/SP.RequestExecutor.js) before loading the PnP JS Core library.\");\n        }\n\n        const addinWebUrl = url.substring(0, url.indexOf(\"/_api\")),\n            executor = new SP.RequestExecutor(addinWebUrl);\n\n        let headers: { [key: string]: string; } = {},\n            iterator: IterableIterator<[string, string]>,\n            temp: IteratorResult<[string, string]>;\n\n        if (options.headers && options.headers instanceof Headers) {\n            iterator = <IterableIterator<[string, string]>>options.headers.entries();\n            temp = iterator.next();\n            while (!temp.done) {\n                headers[temp.value[0]] = temp.value[1];\n                temp = iterator.next();\n            }\n        } else {\n            headers = <any>options.headers;\n        }\n\n        return new Promise((resolve, reject) => {\n\n            let requestOptions = {\n                error: (error: SP.ResponseInfo) => {\n                    reject(this.convertToResponse(error));\n                },\n                headers: headers,\n                method: options.method,\n                success: (response: SP.ResponseInfo) => {\n                    resolve(this.convertToResponse(response));\n                },\n                url: url,\n            };\n\n            if (options.body) {\n                requestOptions = extend(requestOptions, { body: options.body });\n            } else {\n                requestOptions = extend(requestOptions, { binaryStringRequestBody: true });\n            }\n            executor.executeAsync(requestOptions);\n        });\n    }\n\n    /**\n     * Converts a SharePoint REST API response to a fetch API response.\n     */\n    private convertToResponse = (spResponse: SP.ResponseInfo): Response => {\n        const responseHeaders = new Headers();\n\n        if (spResponse.headers !== undefined) {\n            for (const h in spResponse.headers) {\n                if (spResponse.headers[h]) {\n                    responseHeaders.append(h, spResponse.headers[h]);\n                }\n            }\n        }\n\n        // Cannot have an empty string body when creating a Response with status 204\n        const body = spResponse.statusCode === 204 ? null : spResponse.body;\n\n        return new Response(body, {\n            headers: responseHeaders,\n            status: spResponse.statusCode,\n            statusText: spResponse.statusText,\n        });\n    }\n}\n","import {\n    SPRest,\n    Web,\n    Site,\n    SharePointQueryable,\n    SharePointQueryableConstructor,\n} from \"@pnp/sp\";\n\nimport {\n    isUrlAbsolute,\n    combine,\n} from \"@pnp/common\";\n\nexport class SPRestAddIn extends SPRest {\n\n    /**\n     * Begins a cross-domain, host site scoped REST request, for use in add-in webs\n     *\n     * @param addInWebUrl The absolute url of the add-in web\n     * @param hostWebUrl The absolute url of the host web\n     */\n    public crossDomainSite(addInWebUrl: string, hostWebUrl: string): Site {\n        return this._cdImpl(Site, addInWebUrl, hostWebUrl, \"site\");\n    }\n\n    /**\n     * Begins a cross-domain, host web scoped REST request, for use in add-in webs\n     *\n     * @param addInWebUrl The absolute url of the add-in web\n     * @param hostWebUrl The absolute url of the host web\n     */\n    public crossDomainWeb(addInWebUrl: string, hostWebUrl: string): Web {\n        return this._cdImpl(Web, addInWebUrl, hostWebUrl, \"web\");\n    }\n\n    /**\n     * Implements the creation of cross domain REST urls\n     *\n     * @param factory The constructor of the object to create Site | Web\n     * @param addInWebUrl The absolute url of the add-in web\n     * @param hostWebUrl The absolute url of the host web\n     * @param urlPart String part to append to the url \"site\" | \"web\"\n     */\n    private _cdImpl<T extends SharePointQueryable>(\n        factory: SharePointQueryableConstructor<T>,\n        addInWebUrl: string,\n        hostWebUrl: string,\n        urlPart: string): T {\n\n        if (!isUrlAbsolute(addInWebUrl)) {\n            throw Error(\"The addInWebUrl parameter must be an absolute url.\");\n        }\n\n        if (!isUrlAbsolute(hostWebUrl)) {\n            throw Error(\"The hostWebUrl parameter must be an absolute url.\");\n        }\n\n        const url = combine(addInWebUrl, \"_api/SP.AppContextSite(@target)\");\n\n        const instance = new factory(url, urlPart);\n        instance.query.set(\"@target\", \"'\" + encodeURIComponent(hostWebUrl) + \"'\");\n        return instance.configure(this._options);\n    }\n}\n\nexport const sp = new SPRestAddIn();\n"],"names":[],"mappings":"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"}