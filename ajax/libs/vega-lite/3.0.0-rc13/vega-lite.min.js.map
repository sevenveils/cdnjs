{"version":3,"sources":["../node_modules/vega-util/src/accessor.js","../node_modules/vega-util/src/error.js","../node_modules/vega-util/src/splitAccessPath.js","../node_modules/vega-util/src/isArray.js","../node_modules/vega-util/src/isObject.js","../node_modules/vega-util/src/isString.js","../node_modules/vega-util/src/stringValue.js","../node_modules/vega-util/src/accessors.js","../node_modules/vega-util/src/field.js","../node_modules/vega-util/src/logger.js","../node_modules/vega-util/src/isBoolean.js","../node_modules/vega-util/src/isNumber.js","../node_modules/vega-util/src/toSet.js","../node_modules/clone/clone.js","../node_modules/fast-deep-equal/index.js","../node_modules/fast-json-stable-stringify/index.js","../src/logical.ts","../src/util.ts","../src/aggregate.ts","../src/axis.ts","../src/channel.ts","../node_modules/tslib/tslib.es6.js","../src/log.ts","../src/datetime.ts","../src/timeunit.ts","../src/spec/facet.ts","../src/type.ts","../src/fielddef.ts","../src/bin.ts","../src/mark.ts","../src/spec/unit.ts","../src/compositemark/base.ts","../src/encoding.ts","../src/compositemark/common.ts","../src/compositemark/boxplot.ts","../src/compositemark/errorbar.ts","../src/compositemark/errorband.ts","../src/compositemark/index.ts","../src/guide.ts","../src/legend.ts","../src/scale.ts","../src/selection.ts","../src/title.ts","../src/config.ts","../src/data.ts","../src/header.ts","../src/spec/concat.ts","../src/spec/layer.ts","../src/spec/repeat.ts","../src/spec/map.ts","../src/stack.ts","../src/normalize/pathoverlay.ts","../src/normalize/ruleforrangedline.ts","../src/normalize/core.ts","../src/normalize/index.ts","../src/sort.ts","../src/predicate.ts","../src/transform.ts","../src/validate.ts","../src/spec/toplevel.ts","../src/spec/base.ts","../src/vega.schema.ts","../src/compile/axis/assemble.ts","../src/compile/common.ts","../src/compile/data/dataflow.ts","../node_modules/vega-expression/src/ast.js","../node_modules/vega-expression/src/parser.js","../src/compile/data/expressions.ts","../src/compile/data/calculate.ts","../src/compile/header/index.ts","../src/compile/layoutsize/assemble.ts","../node_modules/vega-event-selector/src/event-selector.js","../src/compile/data/timeunit.ts","../src/compile/selection/transforms/scales.ts","../src/compile/selection/transforms/project.ts","../src/compile/selection/interval.ts","../src/compile/selection/multi.ts","../src/compile/selection/single.ts","../src/compile/selection/transforms/nearest.ts","../src/compile/selection/transforms/translate.ts","../src/compile/selection/transforms/zoom.ts","../src/compile/selection/transforms/transforms.ts","../src/compile/selection/transforms/toggle.ts","../src/compile/selection/transforms/inputs.ts","../src/compile/selection/selection.ts","../src/compile/predicate.ts","../src/compile/mark/valueref.ts","../node_modules/vega-util/src/isFunction.js","../src/compile/mark/mixins.ts","../node_modules/vega-util/src/array.js","../src/compile/guide.ts","../src/compile/resolve.ts","../src/compile/split.ts","../src/compile/legend/component.ts","../src/compile/legend/properties.ts","../src/compile/legend/encode.ts","../src/compile/legend/parse.ts","../src/compile/legend/assemble.ts","../src/compile/projection/assemble.ts","../src/projection.ts","../src/compile/projection/component.ts","../src/compile/projection/parse.ts","../src/compile/data/debug.ts","../src/compile/data/source.ts","../src/compile/data/optimizer.ts","../src/compile/data/aggregate.ts","../src/compile/data/facet.ts","../src/compile/data/formatparse.ts","../src/compile/data/joinaggregate.ts","../src/compile/data/stack.ts","../src/compile/data/window.ts","../src/compile/data/optimizers.ts","../src/compile/data/optimize.ts","../src/compile/scale/domain.ts","../src/compile/scale/assemble.ts","../src/compile/scale/component.ts","../src/compile/signal.ts","../src/compile/scale/range.ts","../src/compile/scale/properties.ts","../src/compile/scale/type.ts","../src/compile/scale/parse.ts","../src/compile/model.ts","../src/compile/data/bin.ts","../src/compile/data/filter.ts","../src/compile/data/flatten.ts","../src/compile/data/fold.ts","../src/compile/data/geojson.ts","../src/compile/data/geopoint.ts","../src/compile/data/identifier.ts","../src/compile/mark/bar.ts","../src/compile/mark/point.ts","../src/compile/mark/tick.ts","../src/compile/mark/mark.ts","../src/compile/mark/area.ts","../src/compile/mark/geoshape.ts","../src/compile/mark/line.ts","../src/compile/mark/rect.ts","../src/compile/mark/rule.ts","../src/compile/mark/text.ts","../src/compile/data/impute.ts","../src/compile/data/index.ts","../src/compile/data/lookup.ts","../src/compile/data/sample.ts","../src/compile/data/assemble.ts","../src/compile/layoutsize/parse.ts","../src/compile/repeater.ts","../src/compile/facet.ts","../src/compile/data/parse.ts","../src/compile/data/joinaggregatefacet.ts","../src/compile/baseconcat.ts","../src/compile/concat.ts","../src/compile/axis/component.ts","../src/compile/axis/config.ts","../src/compile/axis/properties.ts","../src/compile/axis/parse.ts","../src/compile/axis/encode.ts","../src/compile/mark/init.ts","../src/compile/unit.ts","../src/compile/layer.ts","../src/compile/repeat.ts","../src/compile/buildmodel.ts","../src/transformextract.ts","../src/index.ts","../src/compile/compile.ts"],"names":["accessor","fn","fields","name","fname","error","message","Error","splitAccessPath","p","i","j","c","path","q","b","n","length","s","push","substring","isArray","Array","isObject","_","Object","isString","$","x","map","JSON","stringify","replace","empty","identity","field","code","stringValue","join","Function","log","method","level","input","args","concat","slice","call","console","apply","None","Warn","Info","Debug","isBoolean","isNumber","toSet","clone","_instanceof","obj","type","nativeMap","nativeSet","nativePromise","Map","Set","Promise","parent","circular","depth","prototype","includeNonEnumerable","allParents","allChildren","useBuffer","Buffer","Infinity","_clone","child","proto","resolve","reject","then","value","err","__isArray","__isRegExp","RegExp","source","__getRegExpFlags","lastIndex","__isDate","Date","getTime","isBuffer","allocUnsafe","copy","create","getPrototypeOf","index","indexOf","forEach","key","keyChild","valueChild","set","entryChild","add","attrs","getOwnPropertyDescriptor","getOwnPropertySymbols","symbols","symbol","descriptor","enumerable","defineProperty","allPropertyNames","getOwnPropertyNames","propertyName","__objToStr","o","toString","re","flags","global","ignoreCase","multiline","clonePrototype","module","exports","keyList","keys","hasProp","hasOwnProperty","fastJsonStableStringify","data","opts","cmp","f","cycles","node","a","aobj","bobj","seen","toJSON","undefined","isFinite","out","TypeError","seenIndex","sort","splice","isLogicalOr","op","or","isLogicalAnd","and","isLogicalNot","not","normalizeLogicalOperand","normalizer","deepEqual","equal","arrA","arrB","dateA","dateB","regexpA","regexpB","duplicate","clone_","pick","props","prop","omit","assign","this","stableStringify","hash","str","h","charCodeAt","contains","array","item","without","excludedItems","filter","some","arr","k","every","flatten","arrays","mergeDeep","dest","src","deepMerge_","constructor","unique","values","results","u","v","val","setEqual","size","e","has","hasIntersection","prefixGenerator","prefixes","wrappedWithAccessors","y","fieldIntersection","vals","_vals","flagKeys","varName","alphanumericS","match","logicalExpr","cb","deleteNestedProperty","orderedProps","shift","titlecase","charAt","toUpperCase","substr","accessPathWithDatum","datum","pieces","prefix","flatAccessWithDatum","replacePathInField","removePathFromField","accessPathDepth","getFirstDefined","arg","idCounter","uniqueId","id","String","internalField","isInternalField","other","len","dict","dictKeys","otherKeys","num","isNaN","_entries","AGGREGATE_OP_INDEX","argmax","argmin","average","count","distinct","max","mean","median","min","missing","q1","q3","ci0","ci1","stderr","stdev","stdevp","sum","valid","variance","variancep","AGGREGATE_OPS","isAggregateOp","COUNTING_OPS","isCountingAggregateOp","aggregate","isMinMaxOp","SUM_OPS","SHARED_DOMAIN_OPS","SHARED_DOMAIN_OP_INDEX","AXIS_PARTS","AXIS_PROPERTY_TYPE","grid","gridColor","gridDash","gridOpacity","gridScale","gridWidth","orient","bandPosition","domain","domainColor","domainOpacity","domainWidth","format","labelAlign","labelAngle","labelBaseline","labelBound","labelColor","labelFlush","labelFlushOffset","labelFont","labelFontSize","labelFontWeight","labelLimit","labelOpacity","labelOverlap","labelPadding","labels","maxExtent","minExtent","offset","position","tickColor","tickExtra","tickOffset","tickOpacity","tickRound","ticks","tickSize","title","titleAlign","titleAngle","titleBaseline","titleColor","titleFont","titleFontSize","titleFontWeight","titleLimit","titleOpacity","titlePadding","titleX","titleY","tickWidth","tickCount","scale","zindex","COMMON_AXIS_PROPERTIES_INDEX","labelFontStyle","labelSeparation","tickMinStep","titleFontStyle","AXIS_PROPERTIES_INDEX","encoding","isAxisProperty","VG_AXIS_PROPERTIES","encode","AXIS_PROPERTIES","Channel","__rest","t","ROW","COLUMN","X","Y","X2","Y2","LATITUDE","LONGITUDE","LATITUDE2","LONGITUDE2","COLOR","FILL","STROKE","SHAPE","SIZE","OPACITY","FILLOPACITY","STROKEOPACITY","STROKEWIDTH","TEXT","ORDER","DETAIL","KEY","TOOLTIP","HREF","GEOPOSITION_CHANNEL_INDEX","longitude","longitude2","latitude","latitude2","GEOPOSITION_CHANNELS","UNIT_CHANNEL_INDEX","x2","y2","color","fill","stroke","opacity","fillOpacity","strokeOpacity","strokeWidth","shape","order","text","detail","tooltip","href","isColorChannel","channel","FACET_CHANNEL_INDEX","row","column","FACET_CHANNELS","CHANNEL_INDEX","CHANNELS","SINGLE_DEF_CHANNELS","isChannel","isSecondaryRangeChannel","getMainRangeChannel","UNIT_CHANNELS","NONPOSITION_CHANNEL_INDEX","NONPOSITION_CHANNELS","POSITION_SCALE_CHANNEL_INDEX","POSITION_SCALE_CHANNELS","NONPOSITION_SCALE_CHANNEL_INDEX","NONPOSITION_SCALE_CHANNELS","isNonPositionScaleChannel","supportLegend","SCALE_CHANNEL_INDEX","SCALE_CHANNELS","isScaleChannel","supportMark","mark","point","tick","rule","circle","square","bar","rect","line","trail","area","geoshape","getSupportedMark","rangeType","main","arguments","warn","info","debug","current","INVALID_SPEC","FIT_NON_SINGLE","CANNOT_FIX_RANGE_STEP_WITH_FIT","cannotProjectOnChannelWithoutField","nearestNotSupportForContinuous","selectionNotSupported","selectionNotFound","SCALE_BINDINGS_CONTINUOUS","NO_INIT_SCALE_BINDINGS","noSuchRepeatedValue","CONCAT_CANNOT_SHARE_AXIS","REPEAT_CANNOT_SHARE_AXIS","cannotSetTitleAnchor","unrecognizedParse","differentParse","local","ancestor","invalidTransformIgnored","transform","NO_FIELDS_NEEDS_AS","encodingOverridden","channels","projectionOverridden","opt","parentProjection","projection","primitiveChannelDef","invalidFieldType","nonZeroScaleUsedWithLengthMark","scaleType","zeroFalse","invalidFieldTypeForCountAggregate","invalidAggregate","missingFieldType","newType","droppingColor","emptyFieldDef","fieldDef","latLongDeprecated","newChannel","LINE_WITH_VARYING_SIZE","incompatibleChannel","markOrFacet","when","invalidEncodingChannel","facetChannelShouldBeDiscrete","discreteChannelCannotEncode","BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL","lineWithRange","hasX2","hasY2","orientOverridden","original","actual","CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN","cannotUseScalePropertyWithNonColor","unaggregateDomainHasNoEffectForRawField","unaggregateDomainWithNonSharedDomainOp","unaggregatedDomainWithLogScale","cannotApplySizeToNonOrientedMark","rangeStepDropped","scaleTypeNotWorkWithChannel","defaultScaleType","scaleTypeNotWorkWithFieldDef","scalePropertyNotWorkWithScaleType","propName","scaleTypeNotWorkWithMark","mergeConflictingProperty","property","propertyOf","v1","v2","independentScaleMeansIndependentGuide","domainSortDropped","UNABLE_TO_MERGE_DOMAINS","MORE_THAN_ONE_SORT","INVALID_CHANNEL_FOR_AXIS","cannotStackRangedMark","cannotStackNonLinearScale","stackNonSummativeAggregate","invalidTimeUnit","unitName","dayReplacedWithDate","fullTimeUnit","droppedDay","d","errorBarCenterAndExtentAreNotNeeded","center","extent","errorBarCenterIsUsedWithWrongExtent","errorBarContinuousAxisHasCustomizedAggregate","compositeMark","errorBarCenterIsNotNeeded","errorBand1DNotSupport","channelRequiredForBinned","domainRequiredForThresholdScale","SUNDAY_YEAR","isDateTime","year","quarter","month","date","day","hours","minutes","seconds","milliseconds","MONTHS","SHORT_MONTHS","m","DAYS","SHORT_DAYS","dateTimeExpr","normalize","units","log.warn","log.message","lowerM","toLowerCase","monthIndex","shortM","shortMonthIndex","normalizeMonth","normalizeQuarter","lowerD","dayIndex","shortD","shortDayIndex","normalizeDay","timeUnit","utc","TimeUnit","isFacetSpec","spec","YEAR","MONTH","DAY","DATE","HOURS","MINUTES","SECONDS","MILLISECONDS","YEARMONTH","YEARMONTHDATE","YEARMONTHDATEHOURS","YEARMONTHDATEHOURSMINUTES","YEARMONTHDATEHOURSMINUTESSECONDS","MONTHDATE","MONTHDATEHOURS","HOURSMINUTES","HOURSMINUTESSECONDS","MINUTESSECONDS","SECONDSMILLISECONDS","QUARTER","YEARQUARTER","QUARTERMONTH","YEARQUARTERMONTH","UTCYEAR","UTCMONTH","UTCDAY","UTCDATE","UTCHOURS","UTCMINUTES","UTCSECONDS","UTCMILLISECONDS","UTCYEARMONTH","UTCYEARMONTHDATE","UTCYEARMONTHDATEHOURS","UTCYEARMONTHDATEHOURSMINUTES","UTCYEARMONTHDATEHOURSMINUTESSECONDS","UTCMONTHDATE","UTCMONTHDATEHOURS","UTCHOURSMINUTES","UTCHOURSMINUTESSECONDS","UTCMINUTESSECONDS","UTCSECONDSMILLISECONDS","UTCQUARTER","UTCYEARQUARTER","UTCQUARTERMONTH","UTCYEARQUARTERMONTH","LOCAL_SINGLE_TIMEUNIT_INDEX","TIMEUNIT_PARTS","isLocalSingleTimeUnit","UTC_SINGLE_TIMEUNIT_INDEX","utcyear","utcquarter","utcmonth","utcday","utcdate","utchours","utcminutes","utcseconds","utcmilliseconds","isUtcSingleTimeUnit","UTC_MULTI_TIMEUNIT_INDEX","utcyearquarter","utcyearquartermonth","utcyearmonth","utcyearmonthdate","utcyearmonthdatehours","utcyearmonthdatehoursminutes","utcyearmonthdatehoursminutesseconds","utcquartermonth","utcmonthdate","utcmonthdatehours","utchoursminutes","utchoursminutesseconds","utcminutesseconds","utcsecondsmilliseconds","UTC_TIMEUNIT_INDEX","isUTCTimeUnit","getLocalTimeUnit","TIMEUNIT_INDEX","yearquarter","yearquartermonth","yearmonth","yearmonthdate","yearmonthdatehours","yearmonthdatehoursminutes","yearmonthdatehoursminutesseconds","quartermonth","monthdate","monthdatehours","hoursminutes","hoursminutesseconds","minutesseconds","secondsmilliseconds","TIMEUNITS","SET_DATE_METHOD","dateMethods","singleUnit","isUtc","rawSetDateMethod","setDateMethod","getDateMethod","getTimeUnitParts","reduce","parts","part","containsTimeUnit","fieldExpr","fieldRef","dateExpr","tu","func","getDateTimeComponents","shortTimeLabels","dateComponents","hasYear","timeComponents","dateTimeComponents","formatExpression","isUTCScale","expression","normalizeTimeUnit","Type","unit","isUTC","result","UTC","timeUnitPart","Math","floor","QUANTITATIVE","ORDINAL","TEMPORAL","NOMINAL","GEOJSON","TYPE_INDEX","quantitative","ordinal","temporal","nominal","geojson","getFullName","isConditionalSelection","isRepeatRef","toFieldDefBase","bin","isSortableFieldDef","isTypedFieldDef","isConditionalDef","channelDef","condition","hasConditionalFieldDef","isFieldDef","hasConditionalValueDef","isValueDef","isStringFieldDef","isScaleFieldDef","isPositionFieldDef","isMarkPropFieldDef","isTextFieldDef","vgField","suffix","isCount","nofn","isOpFieldDef","isBinning","binToString","binSuffix","forAs","expr","isDiscrete","isContinuous","verbalTitleFormatter","config","countTitle","functionalTitleFormatter","defaultTitleFormatter","fieldTitle","titleFormatter","setTitleFormatter","formatter","resetTitleFormatter","allowDisabling","guideTitle","getGuide","defaultTitle","axis","legend","header","defaultType","getFieldDef","getTypedFieldDef","primitiveType","normalizeFieldDef","fieldDefWithoutAggregate","normalizeBin","isBinned","fullType","compatible","warning","channelCompatibility","maxbins","autoMaxBins","binned","step","COMPATIBLE","isNumberFieldDef","isTimeFieldDef","valueExpr","time","undefinedIfExprNotRequired","[object Object]","valueArray","signal","binRequiresRange","isBinParams","Mark","AREA","BAR","LINE","POINT","RECT","RULE","TICK","TRAIL","CIRCLE","SQUARE","GEOSHAPE","MARK_INDEX","isPathMark","PRIMITIVE_MARKS","isMarkDef","PRIMITIVE_MARK_INDEX","STROKE_CONFIG","FILL_CONFIG","FILL_STROKE_CONFIG","VL_ONLY_MARK_CONFIG_PROPERTIES","VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX","defaultMarkConfig","content","defaultBarConfig","binSpacing","continuousBandSize","defaultTickConfig","thickness","getMarkType","isUnitSpec","CompositeMarkNormalizer","run","channelHasField","isAggregate","extractTransformsFromEncoding","oldEncoding","groupby","bins","timeUnits","aggOp","remaining","guide","isTitleDefined","newField","newChannelDef","isPositionChannel","aggregateEntry","as","secondaryChannel","markChannelCompatible","markSupported","primaryFieldDef","normalizeEncoding","normalizedEncoding","defs","fieldDefs","def","mapping","thisArg","el","init","r","r1","getCompositeMarkTooltip","tooltipSummary","continuousAxisChannelDef","encodingWithoutContinuousAxis","withFieldName","fieldPrefix","titlePrefix","makeCompositeAggregatePartFactory","compositeMarkDef","continuousAxis","sharedEncoding","compositeMarkConfig","partName","positionPrefix","endPositionPrefix","extraEncoding","partLayerMixins","markDef","partBaseSpec","clip","style","compositeMarkContinuousAxis","continuousAxisChannelDef2","continuousAxisChannelDefError","continuousAxisChannelDefError2","filterAggregateFromChannelDef","continuousAxisWithoutAggregate","compositeMarkOrient","BOXPLOT","BOXPLOT_PARTS","box","outliers","boxPlotNormalizer","normalizeBoxPlot","getBoxPlotType","_encoding","selection","_p","outerSpec","boxplot","sizeValue","boxPlotType","ticksOrient","continuousFieldName","boxplotSpecificAggregate","boxParamsQuartiles","postAggregateCalculates","calculate","_a","_b","oldEncodingWithoutContinuousAxis","boxParams","encodingWithoutSizeColorAndContinuousAxis","makeBoxPlotPart","makeBoxPlotExtent","makeBoxPlotBox","makeBoxPlotMidTick","fiveSummaryTooltipEncoding","endTick","whiskerTooltipEncoding","whiskerLayers","boxLayers","filteredLayersMixins","lowerBoxExpr","upperBoxExpr","iqrExpr","lowerWhiskerExpr","upperWhiskerExpr","joinaggregateTransform","joinaggregate","filteredWhiskerSpec","layer","outlierLayersMixins","unshift","continousAxisField","ERRORBAR","ERRORBAR_PARTS","errorBarNormalizer","normalizeErrorBar","tooltipEncoding","errorBarParams","makeErrorBarPart","errorbar","errorBarOrientAndInputType","xError","xError2","yError","yError2","errorBarIsInputTypeRaw","inputType","isTypeAggregatedUpperLower","errorBarIsInputTypeAggregatedUpperLower","isTypeAggregatedError","errorBarIsInputTypeAggregatedError","errorBarSpecificAggregate","tooltipTitleWithFieldName","getTitlePrefix","centerOp","lowerExtentOp","upperExtentOp","postAggregateCalculate","errorBarAggregationAndCalculation","_c","_d","oldAggregate","oldGroupBy","operation","ERRORBAND","ERRORBAND_PARTS","band","borders","errorBandNormalizer","normalizeErrorBand","makeErrorBandPart","errorband","is2D","bandMark","bordersMark","interpolate","tension","compositeMarkRegistry","getAllCompositeMarks","VL_ONLY_GUIDE_CONFIG","VL_ONLY_LEGEND_CONFIG","defaultLegendConfig","gradientHorizontalMaxLength","gradientHorizontalMinLength","gradientVerticalMaxLength","gradientVerticalMinLength","COMMON_LEGEND_PROPERTY_INDEX","clipHeight","columnPadding","columns","cornerRadius","direction","fillColor","gradientLength","gradientOpacity","gradientStrokeColor","gradientStrokeWidth","gradientThickness","gridAlign","labelOffset","padding","rowPadding","strokeColor","symbolFillColor","symbolOffset","symbolOpacity","symbolSize","symbolStrokeColor","symbolStrokeWidth","symbolType","VG_LEGEND_PROPERTY_INDEX","LEGEND_PROPERTIES","VG_LEGEND_PROPERTIES","ScaleType","LINEAR","LOG","POW","SQRT","SYMLOG","TIME","QUANTILE","QUANTIZE","THRESHOLD","BIN_ORDINAL","BAND","SCALE_CATEGORY_INDEX","linear","pow","sqrt","symlog","bin-ordinal","quantile","quantize","threshold","SCALE_TYPES","scaleCompatible","scaleType1","scaleType2","scaleCategory1","scaleCategory2","SCALE_PRECEDENCE_INDEX","scaleTypePrecedence","CONTINUOUS_TO_CONTINUOUS_SCALES","CONTINUOUS_TO_CONTINUOUS_INDEX","CONTINUOUS_TO_DISCRETE_SCALES","CONTINUOUS_TO_DISCRETE_INDEX","CONTINUOUS_DOMAIN_SCALES","CONTINUOUS_DOMAIN_INDEX","DISCRETE_DOMAIN_SCALES","DISCRETE_DOMAIN_INDEX","hasDiscreteDomain","hasContinuousDomain","isContinuousToContinuous","isContinuousToDiscrete","defaultScaleConfig","textXRangeStep","rangeStep","pointPadding","barBandPaddingInner","rectBandPaddingInner","minBandSize","minFontSize","maxFontSize","minOpacity","maxOpacity","minSize","minStrokeWidth","maxStrokeWidth","quantileCount","quantizeCount","isExtendedScheme","scheme","isSelectionDomain","SCALE_PROPERTY_INDEX","range","reverse","round","clamp","nice","base","exponent","constant","zero","paddingInner","paddingOuter","SCALE_PROPERTIES","NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES","SCALE_TYPE_INDEX","fieldDefType","generateScaleTypeIndexKey","channelSupportScaleType","scaleTypeSupportDataType","generateScaleTypeIndex","scaleTypeSupportProperty","channelScalePropertyIncompatability","specifiedType","SELECTION_ID","extractTitleConfig","titleConfig","anchor","frame","titleMarkConfig","nonMark","defaultViewConfig","width","height","defaultConfig","timeFormat","invalidValues","view","mark.defaultMarkConfig","mark.defaultBarConfig","mark.defaultTickConfig","axisX","axisY","axisLeft","axisRight","axisTop","axisBottom","axisBand","single","on","multi","toggle","interval","encodings","translate","zoom","initConfig","MARK_STYLES","VL_ONLY_CONFIG_PROPERTIES","VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX","stripAndRedirectConfig","markType","vlOnlyMarkSpecificConfigs","redirectConfig","toProp","compositeMarkPart","propConfig","rangeConfig","isUrlData","isInlineData","isNamedData","MAIN","RAW","HEADER_TITLE_PROPERTIES_MAP","titleAnchor","HEADER_LABEL_PROPERTIES_MAP","HEADER_TITLE_PROPERTIES","HEADER_LABEL_PROPERTIES","isConcatSpec","isVConcatSpec","isHConcatSpec","isLayerSpec","isRepeatSpec","SpecMapper","params","mapFacet","mapRepeat","mapHConcat","mapVConcat","mapLayerOrUnit","mapLayer","mapUnit","subspec","hconcat","vconcat","STACK_OFFSET_INDEX","isStackOffset","STACKABLE_MARKS","STACK_BY_DEFAULT_MARKS","stack","stackConfig","fieldChannel","xDef","yDef","potentialStackedChannel","stackedFieldDef","stackedField","dimensionChannel","dimensionDef","dimensionField","stackBy","sc","cDef","groupbyChannel","impute","dropLineAndPoint","dropLineAndPointFromConfig","getPointOverlay","markConfig","getLineOverlay","PathOverlayNormalizer","pointOverlay","lineOverlay","stackProps","overlayEncoding","stackFieldChannel","filled","RuleForRangedLineNormalizer","mergeEncoding","parentEncoding","overriden","merged","mergeProjection","normalizeGenericSpec","nonFacetUnitNormalizers","hasRow","hasColumn","mapFacetedUnit","super","mapUnitWithParentEncodingOrProjection","normalizeLayerOrUnit","bind","unitNormalizer","hasMatchingType","mergedProjection","mergedEncoding","facet","otherParams","rest","DEFAULT_SORT_OP","isSortByEncoding","isSortField","isSortArray","isFieldEqualPredicate","predicate","isFieldLTPredicate","lt","isFieldLTEPredicate","lte","isFieldGTPredicate","gt","isFieldGTEPredicate","gte","isFieldRangePredicate","isFieldOneOfPredicate","oneOf","in","isFieldPredicate","predicateValueExpr","fieldFilterExpression","useInRange","timeUnitFieldExpr","predicateValuesExpr","isFieldValidPredicate","lower","upper","exprs","normalizePredicate","isFilter","isImputeSequence","isLookup","isSample","isWindow","isJoinAggregate","isFlatten","isCalculate","isBin","isImpute","isTimeUnit","isStack","isFold","normalizeTransform","DEFAULT_REQUIRED_CHANNEL_MAP","DEFAULT_SUPPORTED_CHANNEL_TYPE","requiredChannelMap","supportedChannelMap","requiredChannels","supportedChannels","_normalizeAutoSize","autosize","TOP_LEVEL_PROPERTIES","extractTopLevelProperties","DEFAULT_SPACING","isSignalRef","isVgRangeStep","isDataRefDomain","VG_MARK_CONFIGS","strokeCap","strokeDash","strokeDashOffset","strokeJoin","strokeMiterLimit","align","baseline","dir","dx","dy","ellipsis","limit","radius","theta","angle","font","fontSize","fontWeight","fontStyle","cursor","assembleAxis","axisCmpt","kind","combine","propType","mainExtracted","hasAxisPart","titleString","assembleTitle","getStyles","getMarkConfig","skipGeneralMarkConfig","getStyleConfig","styleConfigIndex","styles","styleConfig","formatSignalRef","specifiedFormat","numberFormat","binFormatExpression","formatExpr","timeFormatExpression","numberFormatExpr","startField","endField","rawTimeFormat","alwaysReturn","sortParams","orderDef","fieldRefOption","orderChannelDef","mergeTitleFieldDefs","f1","f2","fdToMerge","fieldDef1","mergeTitle","title1","title2","mergeTitleComponent","explicit","DataFlowNode","debugName","_children","_parent","_hash","addChild","children","loc","oldChild","removeChild","newParent","OutputNode","refCounts","_source","_name","cloneObj","TokenName","lookahead","RawCode","Literal","Property","Identifier","ArrayExpression","BinaryExpression","CallExpression","ConditionalExpression","LogicalExpression","MemberExpression","ObjectExpression","UnaryExpression","ASTNode","visit","visitor","elements","left","right","callee","test","consequent","alternate","object","properties","argument","TokenBooleanLiteral","TokenEOF","TokenIdentifier","TokenKeyword","TokenNullLiteral","TokenNumericLiteral","TokenPunctuator","TokenStringLiteral","SyntaxArrayExpression","SyntaxBinaryExpression","SyntaxCallExpression","SyntaxConditionalExpression","SyntaxIdentifier","SyntaxLiteral","SyntaxLogicalExpression","SyntaxMemberExpression","SyntaxObjectExpression","SyntaxProperty","SyntaxUnaryExpression","MessageUnexpectedToken","MessageUnexpectedNumber","MessageUnexpectedString","MessageUnexpectedIdentifier","MessageUnexpectedReserved","MessageUnexpectedEOS","MessageInvalidRegExp","MessageUnterminatedRegExp","MessageStrictOctalLiteral","MessageStrictDuplicateProperty","ILLEGAL","DISABLED","RegexNonAsciiIdentifierStart","RegexNonAsciiIdentifierPart","assert","isDecimalDigit","ch","isHexDigit","isOctalDigit","isWhiteSpace","isLineTerminator","isIdentifierStart","fromCharCode","isIdentifierPart","keywords","if","do","var","for","new","try","let","else","case","void","with","enum","while","break","catch","throw","const","yield","class","return","typeof","delete","switch","export","import","public","static","default","finally","extends","package","private","function","continue","debugger","interface","protected","instanceof","implements","skipComment","scanHexEscape","throwError","scanUnicodeCodePointEscape","cu1","cu2","getEscapedIdentifier","scanIdentifier","start","getIdentifier","end","scanPunctuator","code2","ch2","ch3","ch4","ch1","scanNumericLiteral","number","parseInt","scanHexLiteral","octal","scanOctalLiteral","parseFloat","scanRegExp","body","classMarker","terminated","literal","scanRegExpBody","search","scanRegExpFlags","pattern","tmp","$0","$1","exception","testRegExp","regex","advance","quote","scanStringLiteral","lex","token","peek","pos","finishBinaryExpression","operator","finishCallExpression","finishIdentifier","finishLiteral","raw","finishMemberExpression","computed","member","finishProperty","messageFormat","msg","whole","description","throwUnexpected","expect","matchKeyword","keyword","parseArrayInitialiser","parseConditionalExpression","finishArrayExpression","parseObjectPropertyKey","parseObjectProperty","parseObjectInitialiser","finishObjectExpression","legalKeywords","parsePrimaryExpression","parseExpression","parseGroupExpression","parseArguments","parseNonComputedProperty","isIdentifierName","parseComputedMember","parsePostfixExpression","parseLeftHandSideExpressionAllowCall","parseUnaryExpression","binaryPrecedence","prec","marker","markers","pop","parseBinaryExpression","finishConditionalExpression","getDependentFields","ast","parse","dependents","startsWithDatum","getName","CalculateNode","_dependentFields","model","forEachFieldDef","sortValue","sortArrayIndexField","HEADER_CHANNELS","HEADER_TYPES","assembleTitleGroup","component","layoutHeaders","facetFieldDef","role","getHeaderProperties","assembleHeaderGroups","layoutHeader","groups","headerType","headerCmpt","assembleHeaderGroup","getSort","update","axes","hasAxes","sizeChannel","from","sizeSignal","propertiesMap","assembleLayoutSignals","sizeSignals","sizeType","layoutSize","get","getSizeSignalRef","scaleComponent","getScaleComponent","scaleName","isFacetModel","stepSignal","sizeExpr","cardinality","parseSelector","selector","marks","DEFAULT_SOURCE","VIEW","MARKS","DEFAULT_MARKS","parseMerge","trim","LBRACK","RBRACK","LBRACE","RBRACE","COLON","COMMA","NAME","GT","*","arc","group","image","find","endChar","pushChar","popChar","output","stream","between","parseBetween","throttle","markname","lastIndexOf","split","parseThrottle","marktype","consume","debounce","parseStream","TimeUnitNode","formula","reduceFieldDef","timeUnitComponent","remove","scaleBindings","selCmpt","selDef","bound","scales","project","repeater","topLevelSignals","signals","channelSignals","channelSignalName","namedSg","VL_SELECTION_RESOLVE","cs","TUPLE_FIELDS","SCALE_TRIGGER","fieldsSg","TUPLE","hasScales","dataSignals","scaleTriggers","filterExpr","events","evt","filters","idx","vname","dname","scaled","coord","assembleInit","scaleStr","toNum","modifyExpr","xi","yi","positionalProjections","store","STORE","vgStroke","enter","singleOrMultiSignals","proj","force","insert","nearest","cellDef","isVoronoi","exists","ANCHOR","DELTA","scalesCompiler","onDelta","delta","sizeSg","scaleCmpt","sx","sy","compilers","parseInit","isIntervalSelection","tpl","sgname","forEachTransform","MODIFY","SELECTION_DOMAIN","assembleUnitSelectionMarks","forEachSelection","selCompiler","txCompiler","selectionPredicate","selections","dfnode","stores","predicateStr","getSelectionComponent","tunode","insertAsParentOf","sel","compiler","singleCompiler","multiCompiler","intervalCompiler","facetModel","getFacetModel","requiresSelectionId","identifier","sgNames","_signalNames","basename","counter","wrap","filterOp","isSelectionPredicate","getOffset","markDefOffsetValue","side","mixins","ref","bandRef","binMidSignal","fieldDef2","midPoint","channel2Def","defaultRef","channel2","tooltipForEncoding","keyValues","usedKey","mainChannel","mid","sizeRef","mult","getDefaultRef","domains","domainDefinitelyIncludeZero","isVisible","configValue","transparentIfNeeded","defaultFill","defaultStroke","colorVgChannel","fillStrokeMarkDefAndConfig","nonPosition","defaultValue","vgChannel","baseEncodeEntry","ignore","markDefProperties","wrapInvalid","ref.tooltipForEncoding","wrapCondition","tooltipRefFromChannelDef","ref.text","markTooltip","valueRef","validPredicate","invalid","filterIndex","aggregator","defined","ref.midPoint","refFn","conditionValueRef","centeredBandPositionMixins","ref.fieldRef","ref.bandRef","centeredBandPosition","defaultPosRef","defaultSizeRef","centerChannel","pointPosition","binPosition","spacing","ref.bin","ref.getOffset","ref.position","ref.getDefaultRef","pointPosition2","baseChannel","aFieldDef","a2fieldDef","ref.position2","guideEncodeEntry","valueDef","defaultScaleResolve","isLayerModel","isConcatModel","isRepeatModel","parseGuideResolve","channelScaleResolve","Split","implicit","getWithExplicit","setWithExplicit","makeExplicit","makeImplicit","tieBreakByComparing","compare","diff","defaultTieBreaker","mergeValuesWithExplicit","tieBreaker","LegendComponent","legendConfig","legendType","defaultDirection","gradientLengthSignal","legendCmp","getMaxValue","getConditionValue","conditionalDef","getFirstConditionValue","reducer","symbolsSpec","propsList","applyMarkConfig","mixins.color","gradientSpec","labelsSpec","parseLegend","isUnitModel","legends","legendComponent","legendCmpt","getLegendDefWithScale","getProperty","isExplicit","legendEncoding","legendEncode","legendEncodingPart","parseLegendForChannel","parseUnitLegend","mergeLegendComponent","parseNonUnitLegend","fieldDefTitle","properties.defaultLabelOverlap","properties.defaultGradientLength","properties.values","mergedLegend","childLegend","mergedOrient","childOrient","typeMerged","mergedValueWithExplicit","gradient","assembleLegends","legendComponentIndex","legendByDomain","domainHash","mergedLegendComponent","assembleProjections","projections","assembleProjectionForModel","assembleProjectionsForModelAndChildren","fit","sources","lookupDataSource","PROJECTION_PROPERTIES","ProjectionComponent","specifiedProjection","parseProjection","hasProjection","posssiblePair","requestDataName","projectionName","parseUnitProjection","nonUnitProjection","mergable","merge","first","second","allPropertiesShared","mergeIfNoConflict","modelProjection","renameProjection","parseNonUnitProjections","checkLinks","nodes","SourceNode","_data","url","defaultExtension","exec","dataName","OptimizerBase","_mutated","mutatedFlag","BottomUpOptimizer","_continue","continueFlag","setContinue","setMutated","next","optimizeNextFromLeaves","TopDownOptimizer","AggregateNode","dimensions","measures","groupBy","fd","meas","dims","scaleDomain","addDimension","parentMeasures","childMeasures","ops","mergeMeasures","log.debug","alias","FacetNode","sortField","sortIndexField","childModel","childIndependentFieldsWithStep","childScaleComponent","getFieldFromDomain","assembleDomain","crossedDataName","childChannel","getChildIndependentFieldsWithStep","assembleRowColumnData","ParseNode","_parse","ancestorParse","makeWithAncestors","forEachLeaf","subop","mainFieldDef","parsedAs","copyAll","parseNothing","formatParse","onlyNested","JoinAggregateTransformNode","w","getDefaultName","joinAggregateFieldDef","StackNode","_stack","stackTransform","sortFields","sortOrder","normalizedAs","isValidAsArray","stackField","facetby","stackProperties","dimensionFieldDef","stackby","by","_field","getStackByFields","getGroupbyFields","WindowTransformNode","window","windowFieldDef","param","ignorePeers","MoveParseUp","numChildren","producedFields","dependentFields","swapWithParent","MergeIdenticalNodes","mergedNode","hashes","buckets","mergeNodes","RemoveUnusedSubtrees","RemoveDuplicateTimeUnits","pfields","moveFacetDown","facetMain","moveMainDownToFacet","cloner","newName","FACET_SCALE_PREFIX","getSource","setSource","outputNodes","addDimensions","RemoveUnnecessaryNodes","isRequired","MergeParse","parseChildren","commonParse","parseNode","mergedParseNode","MergeAggregateNodes","aggChildren","groupedAggregates","agg","groupBys","mergeableAggs","mergedAggs","MAX_OPTIMIZATION_RUNS","getLeaves","roots","leaves","append","isTrue","runOptimizer","optimizer","flag","optimizerInstance","optimizationDataflowHelper","dataComponent","optimizers.RemoveUnnecessaryNodes","optimizers.RemoveUnusedSubtrees","optimizers.MoveParseUp","optimizers.RemoveDuplicateTimeUnits","optimizers.MergeParse","optimizers.MergeAggregateNodes","optimizers.MergeIdenticalNodes","parseScaleDomain","specifiedScales","localScaleComponents","util.keys","specifiedScale","specifiedDomain","scaleConfig","reason","canUseUnaggregatedDomain","useUnaggregatedDomain","normalizeUnaggregatedDomain","parseSingleChannelDomain","parseDomainForChannel","localScaleCmpt","util.hash","isFaceted","facetParent","parseUnitScaleDomain","domainRaw","childComponent","dr","parseNonUnitScaleDomain","mapDomainToDataSignal","isStacked","normalizeSortField","util.contains","domainSort","util.isBoolean","signalName","util.replacePathInField","isDataRefUnionedDomain","nonUnionDomain","isFieldRefUnionDomain","uniqueDomains","util.unique","sorts","simpleSorts","allData","mergeDomains","assembleScalesForModel","_r","otherScaleProps","scaleRange","assembleScaleRange","isRawSelectionDomain","selDomain","selectionScaleDomain","ScaleComponent","typeWithExplicit","SignalRefWrapper","exprGenerator","rename","RANGE_PROPERTIES","getSizeType","parseUnitScaleRange","mergedScaleCmpt","sizeSpecified","xyRangeSteps","steps","getRangeStep","getXYRangeStep","rangeWithExplicit","getSignalName","noRangeStep","supportedByScaleType","channelIncompatability","parseScheme","fromName","rangeMin","sizeRangeMin","rangeMax","maxBandSize","minXYRangeStep","maxSize","pointStep","MAX_SIZE_RANGE_STEP_RATIO","sizeRangeMax","rMax","interpolateRange","defaultContinuousToDiscreteCount","defaultRange","parseRangeForChannel","binSignal","binCount","util.omit","parseScaleProperty","specifiedValue","sType","copyKeyFromObject","scalePadding","scalePaddingInner","barConfig","continuousPadding","paddingValue","bandPaddingInner","paddingInnerValue","bandPaddingOuter","barBandPaddingOuter","rectBandPaddingOuter","getDefaultValue","parseUnitScaleProperty","parseNonUnitScaleProperty","parseScaleRange","valueWithExplicit","parseScaleCore","scaleComponents","parseUnitScaleCore","scaleTypeWithExplicitIndex","explicitScaleType","childScaleType","scaleTypeTieBreaker","childScale","renameScale","parseNonUnitScaleCore","st1","st2","NameMap","nameMap","oldName","Model","parentGivenName","correctDataNames","scaleNameMap","projectionNameMap","signalNameMap","transforms","layout","bounds","extractCompositionLayout","outputNodeRefCounts","parseScale","parseLayoutSize","renameTopLevelLayoutSizeSignal","parseSelection","parseData","parseAxisAndHeader","parseMarkGroup","renameSignal","baseView","isTopLevel","encodeEntry","assembleEncodeFromView","assembleDefaultLayout","headerMarks","axisComponents","assembleAxes","titleNoEncoding","assembleSelectionSignals","assembleLayout","assembleHeaderMarks","assembleMarks","assembleScales","hasDescendantWithFieldOnChannel","fullName","oldSignalName","originalScaleName","localScaleComponent","variableName","origName","ModelWithField","getMapping","acc","cd","createBinComponent","isBinTransform","normalizedBin","binKey","extentSignal","getSignalsFromModel","binComponent","BinNode","binComponentIndex","formulaAs","rangeFormula","binTrans","FilterNode","FlattenTransformNode","FoldTransformNode","specifiedAs","fold","GeoJSONNode","geoJsonCounter","coordinates","pair","GeoPointNode","IdentifierNode","sizeConfig","discreteBandSize","fixedShape","mixins.baseEncodeEntry","mixins.pointPosition","ref.mid","mixins.nonPosition","shapeMixins","defaultSize","bandSize","markCompiler","vgMark","mixins.pointPosition2","mixins.defined","sizeDef","x2Def","xScaleName","xScale","mixins.binPosition","xScaleType","mixins.bandPosition","mixins.centeredBandPosition","y2Def","yScaleName","yScale","yScaleType","postEncodingTransform","shapeDef","mixins.text","mixins.valueIfDefined","vgSizeChannel","vgThicknessChannel","details","pathGroupingFields","pathMarks","getMarkGroups","fromPrefix","FACETED_PATH_PREFIX","parsePathMark","scaleClip","dimensionChannelDef","ImputeNode","keyvals","stop","imputeTransform","imputedChannel","keyChannel","groupbyFields","initialImpute","processSequence","setImputedField","AncestorParse","LookupNode","secondary","fromSource","findSource","fromOutputName","fromOutputNode","foreign","asName","lookup","SampleTransformNode","sample","makeWalkTree","datasetIndex","walkTree","dataSource","assembleFormatParse","assembleTransforms","assemble","parseLayerLayoutSize","parseChildrenLayoutSize","layoutSizeCmpt","parseNonUnitLayoutSizeForChannel","parseRepeatLayoutSize","mergedSize","childSize","scaleResolve","defaultUnitSize","replaceRepeat","repeat","replaceRepeaterInFieldDef","replaceRepeaterInChannelDef","replaceRepeater","facetSortFieldName","FacetModel","buildModel","replaceRepeaterInFacet","initFacet","normalizedFacet","parseHeader","mergeChildAxis","makeHeaderComponent","headerChannel","axisComponent","mainAxis","assembleSelectionTopLevelSignals","assembleSelectionData","layoutMixins","layoutHeaderComponent","headerComponent","bandType","columnDistinctSignal","getHeaderLayoutMixins","assembleGroup","facetRoot","getCardinalityAggregateForChild","outputName","cross","root","assembleFacetData","assembleGroupEncodeEntry","assembleGroupStyle","assembleFacet","headerSortFields","headerSortOrder","assembleFacetSignals","otherData","srcVals","otherVals","head","existingSource","parseRoot","parentIsLayer","makeFromEncoding","lookupCounter","transformNode","derivedType","makeImplicitFromFilterTransform","makeFromTransform","make","parseTransformArray","makeImplicitFromEncoding","parseAll","parseAllForSortIndex","rawName","mainName","facetName","makeJoinAggregateFromFacet","BaseConcatModel","sg","db","ConcatModel","isVConcat","sizeTypeToMerge","parseConcatLayoutSize","AxisComponent","getAxisConfig","configTypes","configType","OPPOSITE_ORIENT","bottom","top","mergeAxisComponents","mergedAxisCmpts","childAxisCmpts","mergeAxisComponent","getFieldDefTitle","parseAxis","specifiedAxis","properties.labelAngle","gridChannel","properties.gridScale","properties.defaultGrid","axisOrient","properties.defaultLabelAlign","properties.orient","properties.defaultLabelBaseline","properties.defaultLabelFlush","properties.defaultTickCount","axisEncoding","axisEncode","axisEncodingPart","specifiedLabelsSpec","encode.labels","normalizeMarkDef","specifiedOrient","xIsContinuous","yIsContinuous","xIsTemporal","yIsTemporal","filledConfig","UnitModel","parentGivenSize","specifiedAxes","specifiedLegends","initSize","replaceRepeaterInEncoding","initScales","initAxes","initLegend","isGeoShapeMark","hasGeoPosition","_axis","axisSpec","_legend","layoutSizeComponent","parseUnitLayoutSize","selDefs","selCmpts","selectionConfig","cfg","parseUnitSelection","hasSelections","assembleTopLevelSignals","assembleUnitSelectionData","excludeConfig","excludeData","vlEncoding.channelHasField","LayerModel","axisCount","oppositeOrient","parseLayerAxis","assembleLayerSelectionMarks","RepeatModel","repeatValues","_initChildren","rowField","columnField","childRepeat","unitSize","extractor","oldTransforms","version","pkg","inputSpec","newLogger","logger","vlFieldDef.setTitleFormatter","topLevelAutosize","configAutosize","isUnitOrLayer","normalizeAutoSize","firstPassCounter","secondPassCounter","optimizers.moveFacetDown","optimizeDataflow","topLevelProperties","datasets","usermeta","vgConfig","sourceIndex","hasName","newData","whereTo","assembleRootData","layoutSignals","$schema","assembleTopLevelModel","topLevelSpec","getTopLevelProperties","vlFieldDef.resetTitleFormatter"],"mappings":"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","file":"build/vega-lite.min.js.map","sourcesContent":["export default function(fn, fields, name) {\n  fn.fields = fields || [];\n  fn.fname = name;\n  return fn;\n}\n\nexport function accessorName(fn) {\n  return fn == null ? null : fn.fname;\n}\n\nexport function accessorFields(fn) {\n  return fn == null ? null : fn.fields;\n}\n","export default function(message) {\n  throw Error(message);\n}\n","import error from './error';\n\nexport default function(p) {\n  var path = [],\n      q = null,\n      b = 0,\n      n = p.length,\n      s = '',\n      i, j, c;\n\n  p = p + '';\n\n  function push() {\n    path.push(s + p.substring(i, j));\n    s = '';\n    i = j + 1;\n  }\n\n  for (i=j=0; j<n; ++j) {\n    c = p[j];\n    if (c === '\\\\') {\n      s += p.substring(i, j);\n      i = ++j;\n    } else if (c === q) {\n      push();\n      q = null;\n      b = -1;\n    } else if (q) {\n      continue;\n    } else if (i === b && c === '\"') {\n      i = j + 1;\n      q = c;\n    } else if (i === b && c === \"'\") {\n      i = j + 1;\n      q = c;\n    } else if (c === '.' && !b) {\n      if (j > i) {\n        push();\n      } else {\n        i = j + 1;\n      }\n    } else if (c === '[') {\n      if (j > i) push();\n      b = i = j + 1;\n    } else if (c === ']') {\n      if (!b) error('Access path missing open bracket: ' + p);\n      if (b > 0) push();\n      b = 0;\n      i = j + 1;\n    }\n  }\n\n  if (b) error('Access path missing closing bracket: ' + p);\n  if (q) error('Access path missing closing quote: ' + p);\n\n  if (j > i) {\n    j++;\n    push();\n  }\n\n  return path;\n}\n","export default Array.isArray;\n","export default function(_) {\n  return _ === Object(_);\n}\n","export default function(_) {\n  return typeof _ === 'string';\n}\n","import isArray from './isArray';\nimport isObject from './isObject';\nimport isString from './isString';\n\nexport default function $(x) {\n  return isArray(x) ? '[' + x.map($) + ']'\n    : isObject(x) || isString(x) ?\n      // Output valid JSON and JS source strings.\n      // See http://timelessrepo.com/json-isnt-a-javascript-subset\n      JSON.stringify(x).replace('\\u2028','\\\\u2028').replace('\\u2029', '\\\\u2029')\n    : x;\n}\n","import accessor from './accessor';\nimport field from './field';\n\nvar empty = [];\n\nexport var id = field('id');\n\nexport var identity = accessor(function(_) { return _; }, empty, 'identity');\n\nexport var zero = accessor(function() { return 0; }, empty, 'zero');\n\nexport var one = accessor(function() { return 1; }, empty, 'one');\n\nexport var truthy = accessor(function() { return true; }, empty, 'true');\n\nexport var falsy = accessor(function() { return false; }, empty, 'false');\n","import accessor from './accessor';\nimport splitAccessPath from './splitAccessPath';\nimport stringValue from './stringValue';\n\nexport default function(field, name) {\n  var path = splitAccessPath(field),\n      code = 'return _[' + path.map(stringValue).join('][') + '];';\n\n  return accessor(\n    Function('_', code),\n    [(field = path.length===1 ? path[0] : field)],\n    name || field\n  );\n}\n","function log(method, level, input) {\n  var args = [level].concat([].slice.call(input));\n  console[method].apply(console, args); // eslint-disable-line no-console\n}\n\nexport var None  = 0;\nexport var Error = 1;\nexport var Warn  = 2;\nexport var Info  = 3;\nexport var Debug = 4;\n\nexport default function(_) {\n  var level = _ || None;\n  return {\n    level: function(_) {\n      if (arguments.length) {\n        level = +_;\n        return this;\n      } else {\n        return level;\n      }\n    },\n    error: function() {\n      if (level >= Error) log('error', 'ERROR', arguments);\n      return this;\n    },\n    warn: function() {\n      if (level >= Warn) log('warn', 'WARN', arguments);\n      return this;\n    },\n    info: function() {\n      if (level >= Info) log('log', 'INFO', arguments);\n      return this;\n    },\n    debug: function() {\n      if (level >= Debug) log('log', 'DEBUG', arguments);\n      return this;\n    }\n  }\n}\n","export default function(_) {\n  return typeof _ === 'boolean';\n}\n","export default function(_) {\n  return typeof _ === 'number';\n}\n","export default function(_) {\n  for (var s={}, i=0, n=_.length; i<n; ++i) s[_[i]] = true;\n  return s;\n}\n","var clone = (function() {\n'use strict';\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nvar nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nvar nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nvar nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      parent.forEach(function(value, key) {\n        var keyChild = _clone(key, depth - 1);\n        var valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      parent.forEach(function(value) {\n        var entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(parent);\n      for (var i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        var symbol = symbols[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      var allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (var i = 0; i < allPropertyNames.length; i++) {\n        var propertyName = allPropertyNames[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n\n// private utility functions\n\nfunction __objToStr(o) {\n  return Object.prototype.toString.call(o);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(re) {\n  var flags = '';\n  if (re.global) flags += 'g';\n  if (re.ignoreCase) flags += 'i';\n  if (re.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n})();\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = clone;\n}\n","'use strict';\n\nvar isArray = Array.isArray;\nvar keyList = Object.keys;\nvar hasProp = Object.prototype.hasOwnProperty;\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var arrA = isArray(a)\n      , arrB = isArray(b)\n      , i\n      , length\n      , key;\n\n    if (arrA && arrB) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n    if (arrA != arrB) return false;\n\n    var dateA = a instanceof Date\n      , dateB = b instanceof Date;\n    if (dateA != dateB) return false;\n    if (dateA && dateB) return a.getTime() == b.getTime();\n\n    var regexpA = a instanceof RegExp\n      , regexpB = b instanceof RegExp;\n    if (regexpA != regexpB) return false;\n    if (regexpA && regexpB) return a.toString() == b.toString();\n\n    var keys = keyList(a);\n    length = keys.length;\n\n    if (length !== keyList(b).length)\n      return false;\n\n    for (i = length; i-- !== 0;)\n      if (!hasProp.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      key = keys[i];\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  return a!==a && b!==b;\n};\n","'use strict';\n\nmodule.exports = function (data, opts) {\n    if (!opts) opts = {};\n    if (typeof opts === 'function') opts = { cmp: opts };\n    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;\n\n    var cmp = opts.cmp && (function (f) {\n        return function (node) {\n            return function (a, b) {\n                var aobj = { key: a, value: node[a] };\n                var bobj = { key: b, value: node[b] };\n                return f(aobj, bobj);\n            };\n        };\n    })(opts.cmp);\n\n    var seen = [];\n    return (function stringify (node) {\n        if (node && node.toJSON && typeof node.toJSON === 'function') {\n            node = node.toJSON();\n        }\n\n        if (node === undefined) return;\n        if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';\n        if (typeof node !== 'object') return JSON.stringify(node);\n\n        var i, out;\n        if (Array.isArray(node)) {\n            out = '[';\n            for (i = 0; i < node.length; i++) {\n                if (i) out += ',';\n                out += stringify(node[i]) || 'null';\n            }\n            return out + ']';\n        }\n\n        if (node === null) return 'null';\n\n        if (seen.indexOf(node) !== -1) {\n            if (cycles) return JSON.stringify('__cycle__');\n            throw new TypeError('Converting circular structure to JSON');\n        }\n\n        var seenIndex = seen.push(node) - 1;\n        var keys = Object.keys(node).sort(cmp && cmp(node));\n        out = '';\n        for (i = 0; i < keys.length; i++) {\n            var key = keys[i];\n            var value = stringify(node[key]);\n\n            if (!value) continue;\n            if (out) out += ',';\n            out += JSON.stringify(key) + ':' + value;\n        }\n        seen.splice(seenIndex, 1);\n        return '{' + out + '}';\n    })(data);\n};\n","export type LogicalOperand<T> = LogicalNot<T> | LogicalAnd<T> | LogicalOr<T> | T;\n\nexport interface LogicalOr<T> {\n  or: LogicalOperand<T>[];\n}\n\nexport interface LogicalAnd<T> {\n  and: LogicalOperand<T>[];\n}\n\nexport interface LogicalNot<T> {\n  not: LogicalOperand<T>;\n}\n\nexport function isLogicalOr(op: LogicalOperand<any>): op is LogicalOr<any> {\n  return !!op.or;\n}\n\nexport function isLogicalAnd(op: LogicalOperand<any>): op is LogicalAnd<any> {\n  return !!op.and;\n}\n\nexport function isLogicalNot(op: LogicalOperand<any>): op is LogicalNot<any> {\n  return !!op.not;\n}\n\nexport function forEachLeaf<T>(op: LogicalOperand<T>, fn: (op: T) => void) {\n  if (isLogicalNot(op)) {\n    forEachLeaf(op.not, fn);\n  } else if (isLogicalAnd(op)) {\n    for (const subop of op.and) {\n      forEachLeaf(subop, fn);\n    }\n  } else if (isLogicalOr(op)) {\n    for (const subop of op.or) {\n      forEachLeaf(subop, fn);\n    }\n  } else {\n    fn(op);\n  }\n}\n\nexport function normalizeLogicalOperand<T>(op: LogicalOperand<T>, normalizer: (o: T) => T): LogicalOperand<T> {\n  if (isLogicalNot(op)) {\n    return {not: normalizeLogicalOperand(op.not, normalizer)};\n  } else if (isLogicalAnd(op)) {\n    return {and: op.and.map(o => normalizeLogicalOperand(o, normalizer))};\n  } else if (isLogicalOr(op)) {\n    return {or: op.or.map(o => normalizeLogicalOperand(o, normalizer))};\n  } else {\n    return normalizer(op);\n  }\n}\n","import {default as clone_} from 'clone';\nimport deepEqual_ from 'fast-deep-equal';\nimport stableStringify from 'fast-json-stable-stringify';\nimport {isArray, isNumber, isString, splitAccessPath, stringValue} from 'vega-util';\nimport {isLogicalAnd, isLogicalNot, isLogicalOr, LogicalOperand} from './logical';\n\nexport const deepEqual = deepEqual_;\nexport const duplicate = clone_;\n\n/**\n * Creates an object composed of the picked object properties.\n *\n * var object = {'a': 1, 'b': '2', 'c': 3};\n * pick(object, ['a', 'c']);\n * // → {'a': 1, 'c': 3}\n *\n */\nexport function pick<T extends object, K extends keyof T>(obj: T, props: K[]): Pick<T, K> {\n  const copy: any = {};\n  for (const prop of props) {\n    if (obj.hasOwnProperty(prop)) {\n      copy[prop] = obj[prop];\n    }\n  }\n  return copy;\n}\n\n/**\n * The opposite of _.pick; this method creates an object composed of the own\n * and inherited enumerable string keyed properties of object that are not omitted.\n */\nexport function omit<T extends object, K extends keyof T>(obj: T, props: K[]): Omit<T, K> {\n  const copy = {...(obj as any)};\n  for (const prop of props) {\n    delete copy[prop];\n  }\n  return copy;\n}\n\n/**\n * Monkey patch Set so that `stringify` produces a string representation of sets.\n */\nSet.prototype['toJSON'] = function() {\n  return `Set(${[...this].map(stableStringify).join(',')})`;\n};\n\n/**\n * Converts any object to a string representation that can be consumed by humans.\n */\nexport const stringify = stableStringify;\n\n/**\n * Converts any object to a string of limited size, or a number.\n */\nexport function hash(a: any): string | number {\n  if (isNumber(a)) {\n    return a;\n  }\n\n  const str = isString(a) ? a : stableStringify(a);\n\n  // short strings can be used as hash directly, longer strings are hashed to reduce memory usage\n  if (str.length < 250) {\n    return str;\n  }\n\n  // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n  let h = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    h = (h << 5) - h + char;\n    h = h & h; // Convert to 32bit integer\n  }\n  return h;\n}\n\nexport function contains<T>(array: T[], item: T) {\n  return array.indexOf(item) > -1;\n}\n\n/** Returns the array without the elements in item */\nexport function without<T>(array: T[], excludedItems: T[]) {\n  return array.filter(item => !contains(excludedItems, item));\n}\n\nexport function union<T>(array: T[], other: T[]) {\n  return array.concat(without(other, array));\n}\n\n/**\n * Returns true if any item returns true.\n */\nexport function some<T>(arr: T[], f: (d: T, k?: any, i?: any) => boolean) {\n  let i = 0;\n  for (let k = 0; k < arr.length; k++) {\n    if (f(arr[k], k, i++)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns true if all items return true.\n */\nexport function every<T>(arr: T[], f: (d: T, k?: any, i?: any) => boolean) {\n  let i = 0;\n  for (let k = 0; k < arr.length; k++) {\n    if (!f(arr[k], k, i++)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function flatten<T>(arrays: T[][]): T[] {\n  return ([] as T[]).concat(...arrays);\n}\n\nexport function fill<T>(val: T, len: number) {\n  const arr = new Array<T>(len);\n  for (let i = 0; i < len; ++i) {\n    arr[i] = val;\n  }\n  return arr;\n}\n\n/**\n * Like TS Partial but applies recursively to all properties.\n */\nexport type DeepPartial<T> = {[P in keyof T]?: DeepPartial<T[P]>};\n\n/**\n * recursively merges src into dest\n */\nexport function mergeDeep<T>(dest: T, ...src: DeepPartial<T>[]): T {\n  for (const s of src) {\n    dest = deepMerge_(dest, s);\n  }\n  return dest;\n}\n\n// recursively merges src into dest\nfunction deepMerge_(dest: any, src: any) {\n  if (typeof src !== 'object' || src === null) {\n    return dest;\n  }\n\n  for (const p in src) {\n    if (!src.hasOwnProperty(p)) {\n      continue;\n    }\n    if (src[p] === undefined) {\n      continue;\n    }\n    if (typeof src[p] !== 'object' || isArray(src[p]) || src[p] === null) {\n      dest[p] = src[p];\n    } else if (typeof dest[p] !== 'object' || dest[p] === null) {\n      dest[p] = mergeDeep(isArray(src[p].constructor) ? [] : {}, src[p]);\n    } else {\n      mergeDeep(dest[p], src[p]);\n    }\n  }\n  return dest;\n}\n\nexport function unique<T>(values: T[], f: (item: T) => string | number): T[] {\n  const results: T[] = [];\n  const u = {};\n  let v: string | number;\n  for (const val of values) {\n    v = f(val);\n    if (v in u) {\n      continue;\n    }\n    u[v] = 1;\n    results.push(val);\n  }\n  return results;\n}\n\nexport interface Dict<T> {\n  [key: string]: T;\n}\n\n/**\n * Returns true if the two dictionaries disagree. Applies only to defined values.\n */\nexport function isEqual<T>(dict: Dict<T>, other: Dict<T>) {\n  const dictKeys = keys(dict);\n  const otherKeys = keys(other);\n  if (dictKeys.length !== otherKeys.length) {\n    return false;\n  }\n  for (const key of dictKeys) {\n    if (dict[key] !== other[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function setEqual<T>(a: Set<T>, b: Set<T>) {\n  if (a.size !== b.size) {\n    return false;\n  }\n  for (const e of a) {\n    if (!b.has(e)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function hasIntersection<T>(a: Set<T>, b: Set<T>) {\n  for (const key of a) {\n    if (b.has(key)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function prefixGenerator(a: Set<string>): Set<string> {\n  const prefixes = new Set<string>();\n  for (const x of a) {\n    const splitField = splitAccessPath(x);\n    // Wrap every element other than the first in `[]`\n    const wrappedWithAccessors = splitField.map((y, i) => (i === 0 ? y : `[${y}]`));\n    const computedPrefixes = wrappedWithAccessors.map((_, i) => wrappedWithAccessors.slice(0, i + 1).join(''));\n    computedPrefixes.forEach(y => prefixes.add(y));\n  }\n  return prefixes;\n}\n\nexport function fieldIntersection(a: Set<string>, b: Set<string>): boolean {\n  return hasIntersection(prefixGenerator(a), prefixGenerator(b));\n}\n\nexport function isNumeric(num: string | number) {\n  return !isNaN(num as any);\n}\n\nexport function differArray<T>(array: T[], other: T[]) {\n  if (array.length !== other.length) {\n    return true;\n  }\n\n  array.sort();\n  other.sort();\n\n  for (let i = 0; i < array.length; i++) {\n    if (other[i] !== array[i]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208\nexport const keys = Object.keys as <T>(o: T) => (Extract<keyof T, string>)[];\n\nexport function vals<T>(x: {[key: string]: T}): T[] {\n  const _vals: T[] = [];\n  for (const k in x) {\n    if (x.hasOwnProperty(k)) {\n      _vals.push(x[k]);\n    }\n  }\n  return _vals;\n}\n\nexport function entries<T>(x: {[key: string]: T}): {key: string; value: T}[] {\n  const _entries: {key: string; value: T}[] = [];\n  for (const k in x) {\n    if (x.hasOwnProperty(k)) {\n      _entries.push({\n        key: k,\n        value: x[k]\n      });\n    }\n  }\n  return _entries;\n}\n\n// Using mapped type to declare a collect of flags for a string literal type S\n// https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types\nexport type Flag<S extends string> = {[K in S]: 1};\n\nexport function flagKeys<S extends string>(f: Flag<S>): S[] {\n  return keys(f) as S[];\n}\n\nexport function isBoolean(b: any): b is boolean {\n  return b === true || b === false;\n}\n\n/**\n * Convert a string into a valid variable name\n */\nexport function varName(s: string): string {\n  // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _\n  const alphanumericS = s.replace(/\\W/g, '_');\n\n  // Add _ if the string has leading numbers.\n  return (s.match(/^\\d+/) ? '_' : '') + alphanumericS;\n}\n\nexport function logicalExpr<T>(op: LogicalOperand<T>, cb: (...args: any[]) => string): string {\n  if (isLogicalNot(op)) {\n    return '!(' + logicalExpr(op.not, cb) + ')';\n  } else if (isLogicalAnd(op)) {\n    return '(' + op.and.map((and: LogicalOperand<T>) => logicalExpr(and, cb)).join(') && (') + ')';\n  } else if (isLogicalOr(op)) {\n    return '(' + op.or.map((or: LogicalOperand<T>) => logicalExpr(or, cb)).join(') || (') + ')';\n  } else {\n    return cb(op);\n  }\n}\n\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n * Delete nested property of an object, and delete the ancestors of the property if they become empty.\n */\nexport function deleteNestedProperty(obj: any, orderedProps: string[]) {\n  if (orderedProps.length === 0) {\n    return true;\n  }\n  const prop = orderedProps.shift();\n  if (deleteNestedProperty(obj[prop], orderedProps)) {\n    delete obj[prop];\n  }\n  return keys(obj).length === 0;\n}\n\nexport function titlecase(s: string) {\n  return s.charAt(0).toUpperCase() + s.substr(1);\n}\n\n/**\n * Converts a path to an access path with datum.\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function accessPathWithDatum(path: string, datum = 'datum') {\n  const pieces = splitAccessPath(path);\n  const prefixes = [];\n  for (let i = 1; i <= pieces.length; i++) {\n    const prefix = `[${pieces\n      .slice(0, i)\n      .map(stringValue)\n      .join('][')}]`;\n    prefixes.push(`${datum}${prefix}`);\n  }\n  return prefixes.join(' && ');\n}\n\n/**\n * Return access with datum to the flattened field.\n *\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function flatAccessWithDatum(path: string, datum: 'datum' | 'parent' = 'datum') {\n  return `${datum}[${stringValue(splitAccessPath(path).join('.'))}]`;\n}\n\n/**\n * Replaces path accesses with access to non-nested field.\n * For example, `foo[\"bar\"].baz` becomes `foo\\\\.bar\\\\.baz`.\n */\nexport function replacePathInField(path: string) {\n  return `${splitAccessPath(path)\n    .map(p => p.replace('.', '\\\\.'))\n    .join('\\\\.')}`;\n}\n\n/**\n * Remove path accesses with access from field.\n * For example, `foo[\"bar\"].baz` becomes `foo.bar.baz`.\n */\nexport function removePathFromField(path: string) {\n  return `${splitAccessPath(path).join('.')}`;\n}\n\n/**\n * Count the depth of the path. Returns 1 for fields that are not nested.\n */\nexport function accessPathDepth(path: string) {\n  if (!path) {\n    return 0;\n  }\n  return splitAccessPath(path).length;\n}\n\n/**\n * This is a replacement for chained || for numeric properties or properties that respect null so that 0 will be included.\n */\nexport function getFirstDefined<T>(...args: T[]): T {\n  for (const arg of args) {\n    if (arg !== undefined) {\n      return arg;\n    }\n  }\n  return undefined;\n}\n\n// variable used to generate id\nlet idCounter = 42;\n\n/**\n * Returns a new random id every time it gets called.\n *\n * Has side effect!\n */\nexport function uniqueId(prefix?: string) {\n  const id = ++idCounter;\n  return prefix ? String(prefix) + id : id;\n}\n\n/**\n * Resets the id counter used in uniqueId. This can be useful for testing.\n */\nexport function resetIdCounter() {\n  idCounter = 42;\n}\n\nexport function internalField(name: string) {\n  return isInternalField(name) ? name : `__${name}`;\n}\n\nexport function isInternalField(name: string) {\n  return name.indexOf('__') === 0;\n}\n","import {AggregateOp} from 'vega';\nimport {toSet} from 'vega-util';\nimport {contains, Flag, flagKeys} from './util';\n\nconst AGGREGATE_OP_INDEX: Flag<AggregateOp> = {\n  argmax: 1,\n  argmin: 1,\n  average: 1,\n  count: 1,\n  distinct: 1,\n  max: 1,\n  mean: 1,\n  median: 1,\n  min: 1,\n  missing: 1,\n  q1: 1,\n  q3: 1,\n  ci0: 1,\n  ci1: 1,\n  stderr: 1,\n  stdev: 1,\n  stdevp: 1,\n  sum: 1,\n  valid: 1,\n  values: 1,\n  variance: 1,\n  variancep: 1\n};\n\nexport const AGGREGATE_OPS = flagKeys(AGGREGATE_OP_INDEX);\n\nexport function isAggregateOp(a: string): a is AggregateOp {\n  return !!AGGREGATE_OP_INDEX[a];\n}\n\nexport const COUNTING_OPS: AggregateOp[] = ['count', 'valid', 'missing', 'distinct'];\n\nexport function isCountingAggregateOp(aggregate: string): boolean {\n  return aggregate && contains(COUNTING_OPS, aggregate);\n}\n\nexport function isMinMaxOp(aggregate: string): boolean {\n  return aggregate && contains(['min', 'max'], aggregate);\n}\n\n/** Additive-based aggregation operations.  These can be applied to stack. */\nexport const SUM_OPS: AggregateOp[] = ['count', 'sum', 'distinct', 'valid', 'missing'];\n\n/**\n * Aggregation operators that always produce values within the range [domainMin, domainMax].\n */\nexport const SHARED_DOMAIN_OPS: AggregateOp[] = ['mean', 'average', 'median', 'q1', 'q3', 'min', 'max'];\n\nexport const SHARED_DOMAIN_OP_INDEX = toSet(SHARED_DOMAIN_OPS);\n","import {Align, Axis as VgAxis, AxisOrient, BaseAxis, FontStyle, FontWeight, LabelOverlap, TextBaseline} from 'vega';\nimport {DateTime} from './datetime';\nimport {Guide, GuideEncodingEntry, VlOnlyGuideConfig} from './guide';\nimport {Flag, flagKeys} from './util';\nimport {Color, LayoutAlign} from './vega.schema';\n\ntype BaseAxisNoSignals = AxisMixins &\n  BaseAxis<\n    number,\n    number,\n    boolean,\n    number | boolean,\n    string,\n    Color,\n    FontWeight,\n    FontStyle,\n    Align,\n    TextBaseline,\n    LayoutAlign,\n    LabelOverlap,\n    number[]\n  >;\n\n// Vega axis config is the same as vega axis base. If this is not the case, add specific type.\ntype VgAxisConfigNoSignals = BaseAxisNoSignals;\n\n// Change comments to be Vega-Lite specific\ninterface AxisMixins {\n  /**\n   * A boolean flag indicating if grid lines should be included as part of the axis\n   *\n   * __Default value:__ `true` for [continuous scales](https://vega.github.io/vega-lite/docs/scale.html#continuous) that are not binned; otherwise, `false`.\n   */\n  grid?: boolean;\n\n  /**\n   * Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.\n   *\n   * __Default value:__ `true` for axis of a continuous x-scale. Otherwise, `false`.\n   */\n  labelFlush?: boolean | number;\n\n  /**\n   * The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `\"parity\"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `\"greedy\"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).\n   *\n   * __Default value:__ `true` for non-nominal fields with non-log scales; `\"greedy\"` for log scales; otherwise `false`.\n   */\n  labelOverlap?: LabelOverlap;\n}\n\nexport type AxisConfig = VgAxisConfigNoSignals & VlOnlyGuideConfig;\n\nexport interface Axis extends BaseAxisNoSignals, Guide {\n  /**\n   * The orientation of the axis. One of `\"top\"`, `\"bottom\"`, `\"left\"` or `\"right\"`. The orientation can be used to further specialize the axis type (e.g., a y axis oriented for the right edge of the chart).\n   *\n   * __Default value:__ `\"bottom\"` for x-axes and `\"left\"` for y-axes.\n   */\n  orient?: AxisOrient;\n\n  /**\n   * The offset, in pixels, by which to displace the axis from the edge of the enclosing group or data rectangle.\n   *\n   * __Default value:__ derived from the [axis config](https://vega.github.io/vega-lite/docs/config.html#facet-scale-config)'s `offset` (`0` by default)\n   */\n  offset?: number;\n\n  /**\n   * The anchor position of the axis in pixels. For x-axes with top or bottom orientation, this sets the axis group x coordinate. For y-axes with left or right orientation, this sets the axis group y coordinate.\n   *\n   * __Default value__: `0`\n   */\n  position?: number;\n\n  /**\n   * A desired number of ticks, for axes visualizing quantitative scales. The resulting number may be different so that values are \"nice\" (multiples of 2, 5, 10) and lie within the underlying scale's range.\n   * @minimum 0\n   *\n   * __Default value__: Determine using a formula `ceil(width/40)` for x and `ceil(height/40)` for y.\n   */\n  tickCount?: number;\n\n  /**\n   * The minimum desired step between axis ticks, in terms of scale domain values. For example, a value of `1` indicates that ticks should not be less than 1 unit apart. If `tickMinStep` is specified, the `tickCount` value will be adjusted, if necessary, to enforce the minimum step value.\n   *\n   * __Default value__: `undefined`\n   */\n  tickMinStep?: number;\n\n  /**\n   * Explicitly set the visible axis tick values.\n   */\n  values?: number[] | string[] | boolean[] | DateTime[];\n\n  /**\n   * A non-positive integer indicating z-index of the axis.\n   * If zindex is 0, axes should be drawn behind all chart elements.\n   * To put them in front, use `\"zindex = 1\"`.\n   *\n   * __Default value:__ `1` (in front of the marks) for actual axis and `0` (behind the marks) for grids.\n   *\n   * @TJS-type integer\n   * @minimum 0\n   */\n  zindex?: number;\n\n  /**\n   * Mark definitions for custom axis encoding.\n   *\n   * @hide\n   */\n  encoding?: AxisEncoding;\n}\n\nexport type AxisPart = keyof AxisEncoding;\nexport const AXIS_PARTS: AxisPart[] = ['domain', 'grid', 'labels', 'ticks', 'title'];\n\n/**\n * A dictionary listing whether a certain axis property is applicable for only main axes or only grid axes.\n * (Properties not listed are applicable for both)\n */\nexport const AXIS_PROPERTY_TYPE: {\n  // Using Mapped Type to declare type (https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types)\n  [k in keyof VgAxis]: 'main' | 'grid' | 'both'\n} = {\n  grid: 'grid',\n  gridColor: 'grid',\n  gridDash: 'grid',\n  gridOpacity: 'grid',\n  gridScale: 'grid',\n  gridWidth: 'grid',\n\n  orient: 'main',\n\n  bandPosition: 'both', // Need to be applied to grid axis too, so the grid will align with ticks.\n  domain: 'main',\n  domainColor: 'main',\n  domainOpacity: 'main',\n  domainWidth: 'main',\n  format: 'main',\n  labelAlign: 'main',\n  labelAngle: 'main',\n  labelBaseline: 'main',\n  labelBound: 'main',\n  labelColor: 'main',\n  labelFlush: 'main',\n  labelFlushOffset: 'main',\n  labelFont: 'main',\n  labelFontSize: 'main',\n  labelFontWeight: 'main',\n  labelLimit: 'main',\n  labelOpacity: 'main',\n  labelOverlap: 'main',\n  labelPadding: 'main',\n  labels: 'main',\n  maxExtent: 'main',\n  minExtent: 'main',\n  offset: 'main',\n  position: 'main',\n  tickColor: 'main',\n  tickExtra: 'main',\n  tickOffset: 'both', // Need to be applied to grid axis too, so the grid will align with ticks.\n  tickOpacity: 'main',\n  tickRound: 'main',\n  ticks: 'main',\n  tickSize: 'main',\n  title: 'main',\n  titleAlign: 'main',\n  titleAngle: 'main',\n  titleBaseline: 'main',\n  titleColor: 'main',\n  titleFont: 'main',\n  titleFontSize: 'main',\n  titleFontWeight: 'main',\n  titleLimit: 'main',\n  titleOpacity: 'main',\n  titlePadding: 'main',\n  titleX: 'main',\n  titleY: 'main',\n\n  tickWidth: 'both',\n  tickCount: 'both',\n  values: 'both',\n  scale: 'both',\n  zindex: 'both' // this is actually set afterward, so it doesn't matter\n};\n\nexport interface AxisEncoding {\n  /**\n   * Custom encoding for the axis container.\n   */\n  axis?: GuideEncodingEntry;\n\n  /**\n   * Custom encoding for the axis domain rule mark.\n   */\n  domain?: GuideEncodingEntry;\n\n  /**\n   * Custom encoding for axis gridline rule marks.\n   */\n  grid?: GuideEncodingEntry;\n\n  /**\n   * Custom encoding for axis label text marks.\n   */\n  labels?: GuideEncodingEntry;\n\n  /**\n   * Custom encoding for axis tick rule marks.\n   */\n  ticks?: GuideEncodingEntry;\n\n  /**\n   * Custom encoding for the axis title text mark.\n   */\n  title?: GuideEncodingEntry;\n}\n\nconst COMMON_AXIS_PROPERTIES_INDEX: Flag<keyof (VgAxis | Axis)> = {\n  orient: 1, // other things can depend on orient\n\n  bandPosition: 1,\n  domain: 1,\n  domainColor: 1,\n  domainOpacity: 1,\n  domainWidth: 1,\n  format: 1,\n  grid: 1,\n  gridColor: 1,\n  gridDash: 1,\n  gridOpacity: 1,\n  gridWidth: 1,\n  labelAlign: 1,\n  labelAngle: 1,\n  labelBaseline: 1,\n  labelBound: 1,\n  labelColor: 1,\n  labelFlush: 1,\n  labelFlushOffset: 1,\n  labelFont: 1,\n  labelFontSize: 1,\n  labelFontStyle: 1,\n  labelFontWeight: 1,\n  labelLimit: 1,\n  labelOpacity: 1,\n  labelOverlap: 1,\n  labelPadding: 1,\n  labels: 1,\n  labelSeparation: 1,\n  maxExtent: 1,\n  minExtent: 1,\n  offset: 1,\n  position: 1,\n  tickColor: 1,\n  tickCount: 1,\n  tickExtra: 1,\n  tickMinStep: 1,\n  tickOffset: 1,\n  tickOpacity: 1,\n  tickRound: 1,\n  ticks: 1,\n  tickSize: 1,\n  tickWidth: 1,\n  title: 1,\n  titleAlign: 1,\n  titleAngle: 1,\n  titleBaseline: 1,\n  titleColor: 1,\n  titleFont: 1,\n  titleFontSize: 1,\n  titleFontStyle: 1,\n  titleFontWeight: 1,\n  titleLimit: 1,\n  titleOpacity: 1,\n  titlePadding: 1,\n  titleX: 1,\n  titleY: 1,\n  values: 1,\n  zindex: 1\n};\n\nconst AXIS_PROPERTIES_INDEX: Flag<keyof Axis> = {\n  ...COMMON_AXIS_PROPERTIES_INDEX,\n  encoding: 1\n};\n\nconst VG_AXIS_PROPERTIES_INDEX: Flag<keyof VgAxis> = {\n  gridScale: 1,\n  scale: 1,\n  ...COMMON_AXIS_PROPERTIES_INDEX,\n  encode: 1\n};\n\nexport function isAxisProperty(prop: string): prop is keyof Axis {\n  return !!AXIS_PROPERTIES_INDEX[prop];\n}\n\nexport const VG_AXIS_PROPERTIES = flagKeys(VG_AXIS_PROPERTIES_INDEX);\n\n// Export for dependent projects\nexport const AXIS_PROPERTIES = flagKeys(AXIS_PROPERTIES_INDEX);\n\nexport interface AxisConfigMixins {\n  /**\n   * Axis configuration, which determines default properties for all `x` and `y` [axes](https://vega.github.io/vega-lite/docs/axis.html). For a full list of axis configuration options, please see the [corresponding section of the axis documentation](https://vega.github.io/vega-lite/docs/axis.html#config).\n   */\n  axis?: AxisConfig;\n\n  /**\n   * X-axis specific config.\n   */\n  axisX?: AxisConfig;\n\n  /**\n   * Y-axis specific config.\n   */\n  axisY?: AxisConfig;\n\n  /**\n   * Specific axis config for y-axis along the left edge of the chart.\n   */\n  axisLeft?: AxisConfig;\n\n  /**\n   * Specific axis config for y-axis along the right edge of the chart.\n   */\n  axisRight?: AxisConfig;\n\n  /**\n   * Specific axis config for x-axis along the top edge of the chart.\n   */\n  axisTop?: AxisConfig;\n\n  /**\n   * Specific axis config for x-axis along the bottom edge of the chart.\n   */\n  axisBottom?: AxisConfig;\n\n  /**\n   * Specific axis config for axes with \"band\" scales.\n   */\n  axisBand?: AxisConfig;\n}\n","/*\n * Constants and utilities for encoding channels (Visual variables)\n * such as 'x', 'y', 'color'.\n */\n\nimport {RangeType} from './compile/scale/type';\nimport {Encoding} from './encoding';\nimport {Mark} from './mark';\nimport {FacetMapping} from './spec/facet';\nimport {Flag, flagKeys} from './util';\n\nexport namespace Channel {\n  // Facet\n  export const ROW: 'row' = 'row';\n  export const COLUMN: 'column' = 'column';\n\n  // Position\n  export const X: 'x' = 'x';\n  export const Y: 'y' = 'y';\n  export const X2: 'x2' = 'x2';\n  export const Y2: 'y2' = 'y2';\n  // Geo Position\n  export const LATITUDE: 'latitude' = 'latitude';\n  export const LONGITUDE: 'longitude' = 'longitude';\n  export const LATITUDE2: 'latitude2' = 'latitude2';\n  export const LONGITUDE2: 'longitude2' = 'longitude2';\n\n  // Mark property with scale\n  export const COLOR: 'color' = 'color';\n\n  export const FILL: 'fill' = 'fill';\n\n  export const STROKE: 'stroke' = 'stroke';\n\n  export const SHAPE: 'shape' = 'shape';\n  export const SIZE: 'size' = 'size';\n  export const OPACITY: 'opacity' = 'opacity';\n  export const FILLOPACITY: 'fillOpacity' = 'fillOpacity';\n\n  export const STROKEOPACITY: 'strokeOpacity' = 'strokeOpacity';\n\n  export const STROKEWIDTH: 'strokeWidth' = 'strokeWidth';\n\n  // Non-scale channel\n  export const TEXT: 'text' = 'text';\n  export const ORDER: 'order' = 'order';\n  export const DETAIL: 'detail' = 'detail';\n  export const KEY: 'key' = 'key';\n\n  export const TOOLTIP: 'tooltip' = 'tooltip';\n  export const HREF: 'href' = 'href';\n}\n\nexport type Channel = keyof Encoding<any> | keyof FacetMapping<any>;\n\nexport const X = Channel.X;\nexport const Y = Channel.Y;\nexport const X2 = Channel.X2;\nexport const Y2 = Channel.Y2;\n\nexport const LATITUDE = Channel.LATITUDE;\nexport const LATITUDE2 = Channel.LATITUDE2;\nexport const LONGITUDE = Channel.LONGITUDE;\nexport const LONGITUDE2 = Channel.LONGITUDE2;\n\nexport const ROW = Channel.ROW;\nexport const COLUMN = Channel.COLUMN;\nexport const SHAPE = Channel.SHAPE;\nexport const SIZE = Channel.SIZE;\nexport const COLOR = Channel.COLOR;\n\nexport const FILL = Channel.FILL;\nexport const STROKE = Channel.STROKE;\nexport const TEXT = Channel.TEXT;\nexport const DETAIL = Channel.DETAIL;\nexport const KEY = Channel.KEY;\nexport const ORDER = Channel.ORDER;\nexport const OPACITY = Channel.OPACITY;\nexport const FILLOPACITY = Channel.FILLOPACITY;\n\nexport const STROKEOPACITY = Channel.STROKEOPACITY;\n\nexport const STROKEWIDTH = Channel.STROKEWIDTH;\n\nexport const TOOLTIP = Channel.TOOLTIP;\nexport const HREF = Channel.HREF;\n\nexport type GeoPositionChannel = 'longitude' | 'latitude' | 'longitude2' | 'latitude2';\n\nexport const GEOPOSITION_CHANNEL_INDEX: Flag<GeoPositionChannel> = {\n  longitude: 1,\n  longitude2: 1,\n  latitude: 1,\n  latitude2: 1\n};\n\nexport const GEOPOSITION_CHANNELS = flagKeys(GEOPOSITION_CHANNEL_INDEX);\n\nconst UNIT_CHANNEL_INDEX: Flag<keyof Encoding<any>> = {\n  // position\n  x: 1,\n  y: 1,\n  x2: 1,\n  y2: 1,\n\n  ...GEOPOSITION_CHANNEL_INDEX,\n\n  // color\n  color: 1,\n  fill: 1,\n  stroke: 1,\n\n  // other non-position with scale\n  opacity: 1,\n  fillOpacity: 1,\n  strokeOpacity: 1,\n\n  strokeWidth: 1,\n  size: 1,\n  shape: 1,\n\n  // channels without scales\n  order: 1,\n  text: 1,\n  detail: 1,\n  key: 1,\n  tooltip: 1,\n  href: 1\n};\n\nexport type ColorChannel = 'color' | 'fill' | 'stroke';\n\nexport function isColorChannel(channel: Channel): channel is ColorChannel {\n  return channel === 'color' || channel === 'fill' || channel === 'stroke';\n}\n\nconst FACET_CHANNEL_INDEX: Flag<keyof FacetMapping<any>> = {\n  row: 1,\n  column: 1\n};\n\nexport const FACET_CHANNELS = flagKeys(FACET_CHANNEL_INDEX);\n\nexport type FacetChannel = keyof FacetMapping<any>;\n\nconst CHANNEL_INDEX = {\n  ...UNIT_CHANNEL_INDEX,\n  ...FACET_CHANNEL_INDEX\n};\n\nexport const CHANNELS = flagKeys(CHANNEL_INDEX);\n\nconst {order: _o, detail: _d, ...SINGLE_DEF_CHANNEL_INDEX} = CHANNEL_INDEX;\n/**\n * Channels that cannot have an array of channelDef.\n * model.fieldDef, getFieldDef only work for these channels.\n *\n * (The only two channels that can have an array of channelDefs are \"detail\" and \"order\".\n * Since there can be multiple fieldDefs for detail and order, getFieldDef/model.fieldDef\n * are not applicable for them.  Similarly, selection projection won't work with \"detail\" and \"order\".)\n */\n\nexport const SINGLE_DEF_CHANNELS: SingleDefChannel[] = flagKeys(SINGLE_DEF_CHANNEL_INDEX);\n\n// Using the following line leads to TypeError: Cannot read property 'elementTypes' of undefined\n// when running the schema generator\n// export type SingleDefChannel = typeof SINGLE_DEF_CHANNELS[0];\n\nexport type SingleDefUnitChannel =\n  | 'x'\n  | 'y'\n  | 'x2'\n  | 'y2'\n  | 'longitude'\n  | 'latitude'\n  | 'longitude2'\n  | 'latitude2'\n  | 'color'\n  | 'fill'\n  | 'stroke'\n  | 'strokeWidth'\n  | 'size'\n  | 'shape'\n  | 'fillOpacity'\n  | 'strokeOpacity'\n  | 'opacity'\n  | 'text'\n  | 'tooltip'\n  | 'href'\n  | 'key';\n\nexport type SingleDefChannel = SingleDefUnitChannel | 'row' | 'column';\n\nexport function isChannel(str: string): str is Channel {\n  return !!CHANNEL_INDEX[str];\n}\n\nexport function isSecondaryRangeChannel(c: Channel): c is 'x2' | 'y2' | 'latitude2' | 'longitude2' {\n  const main = getMainRangeChannel(c);\n  return main !== c;\n}\n\nexport function getMainRangeChannel(channel: Channel): Channel {\n  switch (channel) {\n    case 'x2':\n      return 'x';\n    case 'y2':\n      return 'y';\n    case 'latitude2':\n      return 'latitude';\n    case 'longitude2':\n      return 'longitude';\n  }\n  return channel;\n}\n\n// CHANNELS without COLUMN, ROW\nexport const UNIT_CHANNELS = flagKeys(UNIT_CHANNEL_INDEX);\n\n// NONPOSITION_CHANNELS = UNIT_CHANNELS without X, Y, X2, Y2;\nconst {\n  x: _x,\n  y: _y,\n  // x2 and y2 share the same scale as x and y\n  x2: _x2,\n  y2: _y2,\n  latitude: _latitude,\n  longitude: _longitude,\n  latitude2: _latitude2,\n  longitude2: _longitude2,\n  // The rest of unit channels then have scale\n  ...NONPOSITION_CHANNEL_INDEX\n} = UNIT_CHANNEL_INDEX;\n\nexport const NONPOSITION_CHANNELS = flagKeys(NONPOSITION_CHANNEL_INDEX);\nexport type NonPositionChannel = typeof NONPOSITION_CHANNELS[0];\n\n// POSITION_SCALE_CHANNELS = X and Y;\nconst POSITION_SCALE_CHANNEL_INDEX: {x: 1; y: 1} = {x: 1, y: 1};\nexport const POSITION_SCALE_CHANNELS = flagKeys(POSITION_SCALE_CHANNEL_INDEX);\nexport type PositionScaleChannel = typeof POSITION_SCALE_CHANNELS[0];\n\n// NON_POSITION_SCALE_CHANNEL = SCALE_CHANNELS without X, Y\nconst {\n  // x2 and y2 share the same scale as x and y\n  // text and tooltip have format instead of scale,\n  // href has neither format, nor scale\n  text: _t,\n  tooltip: _tt,\n  href: _hr,\n  // detail and order have no scale\n  detail: _dd,\n  key: _k,\n  order: _oo,\n  ...NONPOSITION_SCALE_CHANNEL_INDEX\n} = NONPOSITION_CHANNEL_INDEX;\nexport const NONPOSITION_SCALE_CHANNELS = flagKeys(NONPOSITION_SCALE_CHANNEL_INDEX);\nexport type NonPositionScaleChannel = typeof NONPOSITION_SCALE_CHANNELS[0];\n\nexport function isNonPositionScaleChannel(channel: Channel): channel is NonPositionScaleChannel {\n  return !!NONPOSITION_CHANNEL_INDEX[channel];\n}\n\n/**\n * @returns whether Vega supports legends for a particular channel\n */\nexport function supportLegend(channel: NonPositionScaleChannel) {\n  switch (channel) {\n    case COLOR:\n    case FILL:\n    case STROKE:\n    case SIZE:\n    case SHAPE:\n    case OPACITY:\n      return true;\n\n    case FILLOPACITY:\n    case STROKEOPACITY:\n    case STROKEWIDTH:\n      return false;\n  }\n}\n\n// Declare SCALE_CHANNEL_INDEX\nconst SCALE_CHANNEL_INDEX = {\n  ...POSITION_SCALE_CHANNEL_INDEX,\n  ...NONPOSITION_SCALE_CHANNEL_INDEX\n};\n\n/** List of channels with scales */\nexport const SCALE_CHANNELS = flagKeys(SCALE_CHANNEL_INDEX);\nexport type ScaleChannel = typeof SCALE_CHANNELS[0];\n\nexport function isScaleChannel(channel: Channel): channel is ScaleChannel {\n  return !!SCALE_CHANNEL_INDEX[channel];\n}\n\nexport type SupportedMark = {[mark in Mark]?: 'always' | 'binned'};\n\n/**\n * Return whether a channel supports a particular mark type.\n * @param channel  channel name\n * @param mark the mark type\n * @return whether the mark supports the channel\n */\nexport function supportMark(channel: Channel, mark: Mark) {\n  return getSupportedMark(channel)[mark];\n}\n\n/**\n * Return a dictionary showing whether a channel supports mark type.\n * @param channel\n * @return A dictionary mapping mark types to 'always', 'binned', or undefined\n */\nfunction getSupportedMark(channel: Channel): SupportedMark {\n  switch (channel) {\n    case COLOR:\n    case FILL:\n    case STROKE:\n\n    case DETAIL:\n    case KEY:\n    case TOOLTIP:\n    case HREF:\n    case ORDER: // TODO: revise (order might not support rect, which is not stackable?)\n    case OPACITY:\n    case FILLOPACITY:\n    case STROKEOPACITY:\n    case STROKEWIDTH:\n    case ROW:\n    case COLUMN:\n      return {\n        // all marks\n        point: 'always',\n        tick: 'always',\n        rule: 'always',\n        circle: 'always',\n        square: 'always',\n        bar: 'always',\n        rect: 'always',\n        line: 'always',\n        trail: 'always',\n        area: 'always',\n        text: 'always',\n        geoshape: 'always'\n      };\n    case X:\n    case Y:\n    case LATITUDE:\n    case LONGITUDE:\n      return {\n        // all marks except geoshape. geoshape does not use X, Y -- it uses a projection\n        point: 'always',\n        tick: 'always',\n        rule: 'always',\n        circle: 'always',\n        square: 'always',\n        bar: 'always',\n        rect: 'always',\n        line: 'always',\n        trail: 'always',\n        area: 'always',\n        text: 'always'\n      };\n    case X2:\n    case Y2:\n    case LATITUDE2:\n    case LONGITUDE2:\n      return {\n        rule: 'always',\n        bar: 'always',\n        rect: 'always',\n        area: 'always',\n        circle: 'binned',\n        point: 'binned',\n        square: 'binned',\n        tick: 'binned'\n      };\n    case SIZE:\n      return {\n        point: 'always',\n        tick: 'always',\n        rule: 'always',\n        circle: 'always',\n        square: 'always',\n        bar: 'always',\n        text: 'always',\n        line: 'always',\n        trail: 'always'\n      };\n    case SHAPE:\n      return {point: 'always', geoshape: 'always'};\n    case TEXT:\n      return {text: 'always'};\n  }\n}\n\nexport function rangeType(channel: Channel): RangeType {\n  switch (channel) {\n    case X:\n    case Y:\n    case SIZE:\n    case STROKEWIDTH:\n    case OPACITY:\n    case FILLOPACITY:\n    case STROKEOPACITY:\n    // X2 and Y2 use X and Y scales, so they similarly have continuous range.\n    case X2:\n    case Y2:\n      return undefined;\n\n    case ROW:\n    case COLUMN:\n    case SHAPE:\n    // TEXT, TOOLTIP, and HREF have no scale but have discrete output\n    case TEXT:\n    case TOOLTIP:\n    case HREF:\n      return 'discrete';\n\n    // Color can be either continuous or discrete, depending on scale type.\n    case COLOR:\n    case FILL:\n    case STROKE:\n      return 'flexible';\n\n    // No scale, no range type.\n\n    case LATITUDE:\n    case LONGITUDE:\n    case LATITUDE2:\n    case LONGITUDE2:\n    case DETAIL:\n    case KEY:\n    case ORDER:\n      return undefined;\n  }\n  /* istanbul ignore next: should never reach here. */\n  throw new Error('rangeType not implemented for ' + channel);\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * Vega-Lite's singleton logger utility.\n */\n\nimport {AggregateOp} from 'vega';\nimport {logger, LoggerInterface, Warn} from 'vega-util';\nimport {Channel, GeoPositionChannel} from './channel';\nimport {CompositeMark} from './compositemark';\nimport {ErrorBarCenter, ErrorBarExtent} from './compositemark/errorbar';\nimport {DateTime, DateTimeExpr} from './datetime';\nimport {Aggregate, TypedFieldDef} from './fielddef';\nimport {Mark} from './mark';\nimport {Projection} from './projection';\nimport {ScaleType} from './scale';\nimport {Type} from './type';\nimport {stringify} from './util';\nimport {VgSortField} from './vega.schema';\n\nexport {LoggerInterface} from 'vega-util';\n\n/**\n * Main (default) Vega Logger instance for Vega-Lite\n */\nconst main = logger(Warn);\nlet current: LoggerInterface = main;\n\n/**\n * Logger tool for checking if the code throws correct warning\n */\nexport class LocalLogger implements LoggerInterface {\n  public warns: any[] = [];\n  public infos: any[] = [];\n  public debugs: any[] = [];\n\n  public level() {\n    return this;\n  }\n\n  public warn(...args: any[]) {\n    this.warns.push(...args);\n    return this;\n  }\n\n  public info(...args: any[]) {\n    this.infos.push(...args);\n    return this;\n  }\n\n  public debug(...args: any[]) {\n    this.debugs.push(...args);\n    return this;\n  }\n}\n\nexport function wrap(f: (logger: LocalLogger) => void) {\n  return () => {\n    current = new LocalLogger();\n    f(current as LocalLogger);\n    reset();\n  };\n}\n\n/**\n * Set the singleton logger to be a custom logger\n */\nexport function set(newLogger: LoggerInterface) {\n  current = newLogger;\n  return current;\n}\n\n/**\n * Reset the main logger to use the default Vega Logger\n */\nexport function reset() {\n  current = main;\n  return current;\n}\n\nexport function warn(..._: any[]) {\n  current.warn.apply(current, arguments);\n}\n\nexport function info(..._: any[]) {\n  current.info.apply(current, arguments);\n}\n\nexport function debug(..._: any[]) {\n  current.debug.apply(current, arguments);\n}\n\n/**\n * Collection of all Vega-Lite Error Messages\n */\nexport namespace message {\n  export const INVALID_SPEC = 'Invalid spec';\n\n  // FIT\n  export const FIT_NON_SINGLE = 'Autosize \"fit\" only works for single views and layered views.';\n\n  export const CANNOT_FIX_RANGE_STEP_WITH_FIT = 'Cannot use a fixed value of \"rangeStep\" when \"autosize\" is \"fit\".';\n\n  // SELECTION\n  export function cannotProjectOnChannelWithoutField(channel: Channel) {\n    return `Cannot project a selection on encoding channel \"${channel}\", which has no field.`;\n  }\n\n  export function nearestNotSupportForContinuous(mark: string) {\n    return `The \"nearest\" transform is not supported for ${mark} marks.`;\n  }\n\n  export function selectionNotSupported(mark: CompositeMark) {\n    return `Selection not supported for ${mark} yet`;\n  }\n\n  export function selectionNotFound(name: string) {\n    return `Cannot find a selection named \"${name}\"`;\n  }\n\n  export const SCALE_BINDINGS_CONTINUOUS =\n    'Scale bindings are currently only supported for scales with unbinned, continuous domains.';\n\n  export const NO_INIT_SCALE_BINDINGS = 'Selections bound to scales cannot be separately initialized.';\n\n  // REPEAT\n  export function noSuchRepeatedValue(field: string) {\n    return `Unknown repeated value \"${field}\".`;\n  }\n\n  // CONCAT\n  export const CONCAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in concatenated views.';\n\n  // REPEAT\n  export const REPEAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in repeated views.';\n\n  // TITLE\n  export function cannotSetTitleAnchor(type: string) {\n    return `Cannot set title \"anchor\" for a ${type} spec`;\n  }\n\n  // DATA\n  export function unrecognizedParse(p: string) {\n    return `Unrecognized parse \"${p}\".`;\n  }\n\n  export function differentParse(field: string, local: string, ancestor: string) {\n    return `An ancestor parsed field \"${field}\" as ${ancestor} but a child wants to parse the field as ${local}.`;\n  }\n\n  // TRANSFORMS\n  export function invalidTransformIgnored(transform: any) {\n    return `Ignoring an invalid transform: ${stringify(transform)}.`;\n  }\n\n  export const NO_FIELDS_NEEDS_AS =\n    'If \"from.fields\" is not specified, \"as\" has to be a string that specifies the key to be used for the data from the secondary source.';\n\n  // ENCODING & FACET\n\n  export function encodingOverridden(channels: Channel[]) {\n    return `Layer's shared ${channels.join(',')} channel ${channels.length === 1 ? 'is' : 'are'} overriden`;\n  }\n  export function projectionOverridden(opt: {parentProjection: Projection; projection: Projection}) {\n    const {parentProjection, projection} = opt;\n    return `Layer's shared projection ${stringify(parentProjection)} is overridden by a child projection ${stringify(\n      projection\n    )}.`;\n  }\n\n  export function primitiveChannelDef(\n    channel: Channel,\n    type: 'string' | 'number' | 'boolean',\n    value: string | number | boolean\n  ) {\n    return `Channel ${channel} is a ${type}. Converted to {value: ${stringify(value)}}.`;\n  }\n\n  export function invalidFieldType(type: Type) {\n    return `Invalid field type \"${type}\"`;\n  }\n\n  export function nonZeroScaleUsedWithLengthMark(\n    mark: 'bar' | 'area',\n    channel: Channel,\n    opt: {scaleType?: ScaleType; zeroFalse?: boolean}\n  ) {\n    const scaleText = opt.scaleType\n      ? `${opt.scaleType} scale`\n      : opt.zeroFalse\n      ? 'scale with zero=false'\n      : 'scale with custom domain that excludes zero';\n\n    return `A ${scaleText} is used to encode ${mark}'s ${channel}. This can be misleading as the ${\n      channel === 'x' ? 'width' : 'height'\n    } of the ${mark} can be arbitrary based on the scale domain. You may want to use point mark instead.`;\n  }\n\n  export function invalidFieldTypeForCountAggregate(type: Type, aggregate: string) {\n    return `Invalid field type \"${type}\" for aggregate: \"${aggregate}\", using \"quantitative\" instead.`;\n  }\n\n  export function invalidAggregate(aggregate: AggregateOp | string) {\n    return `Invalid aggregation operator \"${aggregate}\"`;\n  }\n\n  export function missingFieldType(channel: Channel, newType: Type) {\n    return `Missing type for channel \"${channel}\", using \"${newType}\" instead.`;\n  }\n  export function droppingColor(type: 'encoding' | 'property', opt: {fill?: boolean; stroke?: boolean}) {\n    const {fill, stroke} = opt;\n    return (\n      `Dropping color ${type} as the plot also has ` + (fill && stroke ? 'fill and stroke' : fill ? 'fill' : 'stroke')\n    );\n  }\n\n  export function emptyFieldDef(fieldDef: TypedFieldDef<string>, channel: Channel) {\n    return `Dropping ${stringify(fieldDef)} from channel \"${channel}\" since it does not contain data field or value.`;\n  }\n  export function latLongDeprecated(channel: Channel, type: Type, newChannel: GeoPositionChannel) {\n    return `${channel}-encoding with type ${type} is deprecated. Replacing with ${newChannel}-encoding.`;\n  }\n\n  export const LINE_WITH_VARYING_SIZE =\n    'Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.';\n\n  export function incompatibleChannel(channel: Channel, markOrFacet: Mark | 'facet' | CompositeMark, when?: string) {\n    return `${channel} dropped as it is incompatible with \"${markOrFacet}\"${when ? ` when ${when}` : ''}.`;\n  }\n\n  export function invalidEncodingChannel(channel: string) {\n    return `${channel}-encoding is dropped as ${channel} is not a valid encoding channel.`;\n  }\n\n  export function facetChannelShouldBeDiscrete(channel: string) {\n    return `${channel} encoding should be discrete (ordinal / nominal / binned).`;\n  }\n\n  export function discreteChannelCannotEncode(channel: Channel, type: Type) {\n    return `Using discrete channel \"${channel}\" to encode \"${type}\" field can be misleading as it does not encode ${\n      type === 'ordinal' ? 'order' : 'magnitude'\n    }.`;\n  }\n\n  // Mark\n  export const BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL =\n    'Bar mark should not be used with point scale when rangeStep is null. Please use band scale instead.';\n\n  export function lineWithRange(hasX2: boolean, hasY2: boolean) {\n    const channels = hasX2 && hasY2 ? 'x2 and y2' : hasX2 ? 'x2' : 'y2';\n    return `Line mark is for continuous lines and thus cannot be used with ${channels}. We will use the rule mark (line segments) instead.`;\n  }\n\n  export function orientOverridden(original: string, actual: string) {\n    return `Specified orient \"${original}\" overridden with \"${actual}\"`;\n  }\n\n  // SCALE\n  export const CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN =\n    'custom domain scale cannot be unioned with default field-based domain';\n\n  export function cannotUseScalePropertyWithNonColor(prop: string) {\n    return `Cannot use the scale property \"${prop}\" with non-color channel.`;\n  }\n\n  export function unaggregateDomainHasNoEffectForRawField(fieldDef: TypedFieldDef<string>) {\n    return `Using unaggregated domain with raw field has no effect (${stringify(fieldDef)}).`;\n  }\n\n  export function unaggregateDomainWithNonSharedDomainOp(aggregate: string) {\n    return `Unaggregated domain not applicable for \"${aggregate}\" since it produces values outside the origin domain of the source data.`;\n  }\n\n  export function unaggregatedDomainWithLogScale(fieldDef: TypedFieldDef<string>) {\n    return `Unaggregated domain is currently unsupported for log scale (${stringify(fieldDef)}).`;\n  }\n\n  export function cannotApplySizeToNonOrientedMark(mark: Mark) {\n    return `Cannot apply size to non-oriented mark \"${mark}\".`;\n  }\n\n  export function rangeStepDropped(channel: Channel) {\n    return `rangeStep for \"${channel}\" is dropped as top-level ${channel === 'x' ? 'width' : 'height'} is provided.`;\n  }\n\n  export function scaleTypeNotWorkWithChannel(channel: Channel, scaleType: ScaleType, defaultScaleType: ScaleType) {\n    return `Channel \"${channel}\" does not work with \"${scaleType}\" scale. We are using \"${defaultScaleType}\" scale instead.`;\n  }\n\n  export function scaleTypeNotWorkWithFieldDef(scaleType: ScaleType, defaultScaleType: ScaleType) {\n    return `FieldDef does not work with \"${scaleType}\" scale. We are using \"${defaultScaleType}\" scale instead.`;\n  }\n\n  export function scalePropertyNotWorkWithScaleType(scaleType: ScaleType, propName: string, channel: Channel) {\n    return `${channel}-scale's \"${propName}\" is dropped as it does not work with ${scaleType} scale.`;\n  }\n\n  export function scaleTypeNotWorkWithMark(mark: Mark, scaleType: ScaleType) {\n    return `Scale type \"${scaleType}\" does not work with mark \"${mark}\".`;\n  }\n\n  export function mergeConflictingProperty<T>(\n    property: string | number | symbol,\n    propertyOf: string | number | symbol,\n    v1: T,\n    v2: T\n  ) {\n    return `Conflicting ${propertyOf.toString()} property \"${property.toString()}\" (${stringify(v1)} and ${stringify(\n      v2\n    )}).  Using ${stringify(v1)}.`;\n  }\n\n  export function independentScaleMeansIndependentGuide(channel: Channel) {\n    return `Setting the scale to be independent for \"${channel}\" means we also have to set the guide (axis or legend) to be independent.`;\n  }\n\n  export function domainSortDropped(sort: VgSortField) {\n    return `Dropping sort property ${stringify(sort)} as unioned domains only support boolean or op 'count'.`;\n  }\n\n  export const UNABLE_TO_MERGE_DOMAINS = 'Unable to merge domains';\n\n  export const MORE_THAN_ONE_SORT =\n    'Domains that should be unioned has conflicting sort properties. Sort will be set to true.';\n\n  // AXIS\n  export const INVALID_CHANNEL_FOR_AXIS = 'Invalid channel for axis.';\n\n  // STACK\n  export function cannotStackRangedMark(channel: Channel) {\n    return `Cannot stack \"${channel}\" if there is already \"${channel}2\"`;\n  }\n\n  export function cannotStackNonLinearScale(scaleType: ScaleType) {\n    return `Cannot stack non-linear scale (${scaleType})`;\n  }\n\n  export function stackNonSummativeAggregate(aggregate: string) {\n    return `Stacking is applied even though the aggregate function is non-summative (\"${aggregate}\")`;\n  }\n\n  // TIMEUNIT\n  export function invalidTimeUnit(unitName: string, value: string | number) {\n    return `Invalid ${unitName}: ${stringify(value)}`;\n  }\n\n  export function dayReplacedWithDate(fullTimeUnit: string) {\n    return `Time unit \"${fullTimeUnit}\" is not supported. We are replacing it with ${fullTimeUnit.replace(\n      'day',\n      'date'\n    )}.`;\n  }\n\n  export function droppedDay(d: DateTime | DateTimeExpr) {\n    return `Dropping day from datetime ${stringify(d)} as day cannot be combined with other units.`;\n  }\n\n  export function errorBarCenterAndExtentAreNotNeeded(center: ErrorBarCenter, extent: ErrorBarExtent) {\n    return `${extent ? 'extent ' : ''}${extent && center ? 'and ' : ''}${center ? 'center ' : ''}${\n      extent && center ? 'are ' : 'is '\n    }not needed when data are aggregated.`;\n  }\n\n  export function errorBarCenterIsUsedWithWrongExtent(\n    center: ErrorBarCenter,\n    extent: ErrorBarExtent,\n    mark: 'errorbar' | 'errorband'\n  ) {\n    return `${center} is not usually used with ${extent} for ${mark}.`;\n  }\n\n  export function errorBarContinuousAxisHasCustomizedAggregate(aggregate: Aggregate, compositeMark: CompositeMark) {\n    return `Continuous axis should not have customized aggregation function ${aggregate}; ${compositeMark} already agregates the axis.`;\n  }\n\n  export function errorBarCenterIsNotNeeded(extent: ErrorBarExtent, mark: 'errorbar' | 'errorband') {\n    return `Center is not needed to be specified in ${mark} when extent is ${extent}.`;\n  }\n\n  export function errorBand1DNotSupport(property: 'interpolate' | 'tension') {\n    return `1D error band does not support ${property}`;\n  }\n\n  // CHANNEL\n  export function channelRequiredForBinned(channel: Channel) {\n    return `Channel ${channel} is required for \"binned\" bin`;\n  }\n\n  export function domainRequiredForThresholdScale(channel: Channel) {\n    return `Domain for ${channel} is required for threshold scale`;\n  }\n}\n","// DateTime definition object\n\nimport {isNumber} from 'vega-util';\nimport * as log from './log';\nimport {duplicate, keys} from './util';\n\n/*\n * A designated year that starts on Sunday.\n */\nconst SUNDAY_YEAR = 2006;\n\n/**\n * @minimum 1\n * @maximum 12\n * @TJS-type integer\n */\nexport type Month = number;\n\n/**\n * @minimum 1\n * @maximum 7\n */\nexport type Day = number;\n\n/**\n * Object for defining datetime in Vega-Lite Filter.\n * If both month and quarter are provided, month has higher precedence.\n * `day` cannot be combined with other date.\n * We accept string for month and day names.\n */\nexport interface DateTime {\n  /**\n   * Integer value representing the year.\n   * @TJS-type integer\n   */\n  year?: number;\n\n  /**\n   * Integer value representing the quarter of the year (from 1-4).\n   * @minimum 1\n   * @maximum 4\n   * @TJS-type integer\n   */\n  quarter?: number;\n\n  /** One of: (1) integer value representing the month from `1`-`12`. `1` represents January;  (2) case-insensitive month name (e.g., `\"January\"`);  (3) case-insensitive, 3-character short month name (e.g., `\"Jan\"`). */\n  month?: Month | string;\n\n  /**\n   * Integer value representing the date from 1-31.\n   * @minimum 1\n   * @maximum 31\n   * @TJS-type integer\n   */\n  date?: number;\n\n  /**\n   * Value representing the day of a week.  This can be one of: (1) integer value -- `1` represents Monday; (2) case-insensitive day name (e.g., `\"Monday\"`);  (3) case-insensitive, 3-character short day name (e.g., `\"Mon\"`).   <br/> **Warning:** A DateTime definition object with `day`** should not be combined with `year`, `quarter`, `month`, or `date`.\n   */\n  day?: Day | string;\n\n  /**\n   * Integer value representing the hour of a day from 0-23.\n   * @minimum 0\n   * @maximum 23\n   * @TJS-type integer\n   */\n  hours?: number;\n\n  /**\n   * Integer value representing the minute segment of time from 0-59.\n   * @minimum 0\n   * @maximum 59\n   * @TJS-type integer\n   */\n  minutes?: number;\n\n  /**\n   * Integer value representing the second segment (0-59) of a time value\n   * @minimum 0\n   * @maximum 59\n   * @TJS-type integer\n   */\n  seconds?: number;\n\n  /**\n   * Integer value representing the millisecond segment of time.\n   * @minimum 0\n   * @maximum 999\n   * @TJS-type integer\n   */\n  milliseconds?: number;\n\n  /**\n   * A boolean flag indicating if date time is in utc time. If false, the date time is in local time\n   */\n  utc?: boolean;\n}\n\n/**\n * Internal Object for defining datetime expressions.\n * This is an expression version of DateTime.\n * If both month and quarter are provided, month has higher precedence.\n * `day` cannot be combined with other date.\n */\nexport interface DateTimeExpr {\n  year?: string;\n  quarter?: string;\n  month?: string;\n  date?: string;\n  day?: string;\n  hours?: string;\n  minutes?: string;\n  seconds?: string;\n  milliseconds?: string;\n  utc?: boolean;\n}\n\nexport function isDateTime(o: any): o is DateTime {\n  return (\n    !!o &&\n    (!!o.year ||\n      !!o.quarter ||\n      !!o.month ||\n      !!o.date ||\n      !!o.day ||\n      !!o.hours ||\n      !!o.minutes ||\n      !!o.seconds ||\n      !!o.milliseconds)\n  );\n}\n\nexport const MONTHS = [\n  'january',\n  'february',\n  'march',\n  'april',\n  'may',\n  'june',\n  'july',\n  'august',\n  'september',\n  'october',\n  'november',\n  'december'\n];\nexport const SHORT_MONTHS = MONTHS.map(m => m.substr(0, 3));\n\nexport const DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\nexport const SHORT_DAYS = DAYS.map(d => d.substr(0, 3));\n\nfunction normalizeQuarter(q: number | string) {\n  if (isNumber(q)) {\n    if (q > 4) {\n      log.warn(log.message.invalidTimeUnit('quarter', q));\n    }\n    // We accept 1-based quarter, so need to readjust to 0-based quarter\n    return (q - 1).toString();\n  } else {\n    // Invalid quarter\n    throw new Error(log.message.invalidTimeUnit('quarter', q));\n  }\n}\n\nfunction normalizeMonth(m: string | number) {\n  if (isNumber(m)) {\n    // We accept 1-based month, so need to readjust to 0-based month\n    return (m - 1).toString();\n  } else {\n    const lowerM = m.toLowerCase();\n    const monthIndex = MONTHS.indexOf(lowerM);\n    if (monthIndex !== -1) {\n      return monthIndex + ''; // 0 for january, ...\n    }\n    const shortM = lowerM.substr(0, 3);\n    const shortMonthIndex = SHORT_MONTHS.indexOf(shortM);\n    if (shortMonthIndex !== -1) {\n      return shortMonthIndex + '';\n    }\n    // Invalid month\n    throw new Error(log.message.invalidTimeUnit('month', m));\n  }\n}\n\nfunction normalizeDay(d: string | number) {\n  if (isNumber(d)) {\n    // mod so that this can be both 0-based where 0 = sunday\n    // and 1-based where 7=sunday\n    return (d % 7) + '';\n  } else {\n    const lowerD = d.toLowerCase();\n    const dayIndex = DAYS.indexOf(lowerD);\n    if (dayIndex !== -1) {\n      return dayIndex + ''; // 0 for january, ...\n    }\n    const shortD = lowerD.substr(0, 3);\n    const shortDayIndex = SHORT_DAYS.indexOf(shortD);\n    if (shortDayIndex !== -1) {\n      return shortDayIndex + '';\n    }\n    // Invalid day\n    throw new Error(log.message.invalidTimeUnit('day', d));\n  }\n}\n\n/**\n * Return Vega Expression for a particular date time.\n * @param d\n * @param normalize whether to normalize quarter, month, day.\n */\nexport function dateTimeExpr(d: DateTime | DateTimeExpr, normalize = false) {\n  const units: (string | number)[] = [];\n\n  if (normalize && d.day !== undefined) {\n    if (keys(d).length > 1) {\n      log.warn(log.message.droppedDay(d));\n      d = duplicate(d);\n      delete d.day;\n    }\n  }\n\n  if (d.year !== undefined) {\n    units.push(d.year);\n  } else if (d.day !== undefined) {\n    // Set year to 2006 for working with day since January 1 2006 is a Sunday\n    units.push(SUNDAY_YEAR);\n  } else {\n    units.push(0);\n  }\n\n  if (d.month !== undefined) {\n    const month = normalize ? normalizeMonth(d.month) : d.month;\n    units.push(month);\n  } else if (d.quarter !== undefined) {\n    const quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;\n    units.push(quarter + '*3');\n  } else {\n    units.push(0); // months start at zero in JS\n  }\n\n  if (d.date !== undefined) {\n    units.push(d.date);\n  } else if (d.day !== undefined) {\n    // HACK: Day only works as a standalone unit\n    // This is only correct because we always set year to 2006 for day\n    const day = normalize ? normalizeDay(d.day) : d.day;\n    units.push(day + '+1');\n  } else {\n    units.push(1); // Date starts at 1 in JS\n  }\n\n  // Note: can't use TimeUnit enum here as importing it will create\n  // circular dependency problem!\n  for (const timeUnit of ['hours', 'minutes', 'seconds', 'milliseconds']) {\n    if (d[timeUnit] !== undefined) {\n      units.push(d[timeUnit]);\n    } else {\n      units.push(0);\n    }\n  }\n\n  if (d.utc) {\n    return `utc(${units.join(', ')})`;\n  } else {\n    return `datetime(${units.join(', ')})`;\n  }\n}\n","import {DateTimeExpr, dateTimeExpr} from './datetime';\nimport * as log from './log';\nimport {accessPathWithDatum, Flag, flagKeys} from './util';\n\nexport namespace TimeUnit {\n  export const YEAR: 'year' = 'year';\n  export const MONTH: 'month' = 'month';\n  export const DAY: 'day' = 'day';\n  export const DATE: 'date' = 'date';\n  export const HOURS: 'hours' = 'hours';\n  export const MINUTES: 'minutes' = 'minutes';\n  export const SECONDS: 'seconds' = 'seconds';\n  export const MILLISECONDS: 'milliseconds' = 'milliseconds';\n  export const YEARMONTH: 'yearmonth' = 'yearmonth';\n  export const YEARMONTHDATE: 'yearmonthdate' = 'yearmonthdate';\n  export const YEARMONTHDATEHOURS: 'yearmonthdatehours' = 'yearmonthdatehours';\n  export const YEARMONTHDATEHOURSMINUTES: 'yearmonthdatehoursminutes' = 'yearmonthdatehoursminutes';\n  export const YEARMONTHDATEHOURSMINUTESSECONDS: 'yearmonthdatehoursminutesseconds' =\n    'yearmonthdatehoursminutesseconds';\n\n  // MONTHDATE and MONTHDATEHOURS always include 29 February since we use year 0th (which is a leap year);\n  export const MONTHDATE: 'monthdate' = 'monthdate';\n  export const MONTHDATEHOURS: 'monthdatehours' = 'monthdatehours';\n  export const HOURSMINUTES: 'hoursminutes' = 'hoursminutes';\n  export const HOURSMINUTESSECONDS: 'hoursminutesseconds' = 'hoursminutesseconds';\n  export const MINUTESSECONDS: 'minutesseconds' = 'minutesseconds';\n  export const SECONDSMILLISECONDS: 'secondsmilliseconds' = 'secondsmilliseconds';\n  export const QUARTER: 'quarter' = 'quarter';\n  export const YEARQUARTER: 'yearquarter' = 'yearquarter';\n  export const QUARTERMONTH: 'quartermonth' = 'quartermonth';\n  export const YEARQUARTERMONTH: 'yearquartermonth' = 'yearquartermonth';\n  export const UTCYEAR: 'utcyear' = 'utcyear';\n  export const UTCMONTH: 'utcmonth' = 'utcmonth';\n  export const UTCDAY: 'utcday' = 'utcday';\n  export const UTCDATE: 'utcdate' = 'utcdate';\n  export const UTCHOURS: 'utchours' = 'utchours';\n  export const UTCMINUTES: 'utcminutes' = 'utcminutes';\n  export const UTCSECONDS: 'utcseconds' = 'utcseconds';\n  export const UTCMILLISECONDS: 'utcmilliseconds' = 'utcmilliseconds';\n  export const UTCYEARMONTH: 'utcyearmonth' = 'utcyearmonth';\n  export const UTCYEARMONTHDATE: 'utcyearmonthdate' = 'utcyearmonthdate';\n  export const UTCYEARMONTHDATEHOURS: 'utcyearmonthdatehours' = 'utcyearmonthdatehours';\n  export const UTCYEARMONTHDATEHOURSMINUTES: 'utcyearmonthdatehoursminutes' = 'utcyearmonthdatehoursminutes';\n  export const UTCYEARMONTHDATEHOURSMINUTESSECONDS: 'utcyearmonthdatehoursminutesseconds' =\n    'utcyearmonthdatehoursminutesseconds';\n\n  // UTCMONTHDATE and UTCMONTHDATEHOURS always include 29 February since we use year 0th (which is a leap year);\n  export const UTCMONTHDATE: 'utcmonthdate' = 'utcmonthdate';\n  export const UTCMONTHDATEHOURS: 'utcmonthdatehours' = 'utcmonthdatehours';\n  export const UTCHOURSMINUTES: 'utchoursminutes' = 'utchoursminutes';\n  export const UTCHOURSMINUTESSECONDS: 'utchoursminutesseconds' = 'utchoursminutesseconds';\n  export const UTCMINUTESSECONDS: 'utcminutesseconds' = 'utcminutesseconds';\n  export const UTCSECONDSMILLISECONDS: 'utcsecondsmilliseconds' = 'utcsecondsmilliseconds';\n  export const UTCQUARTER: 'utcquarter' = 'utcquarter';\n  export const UTCYEARQUARTER: 'utcyearquarter' = 'utcyearquarter';\n  export const UTCQUARTERMONTH: 'utcquartermonth' = 'utcquartermonth';\n  export const UTCYEARQUARTERMONTH: 'utcyearquartermonth' = 'utcyearquartermonth';\n}\n\nexport type LocalSingleTimeUnit =\n  | typeof TimeUnit.YEAR\n  | typeof TimeUnit.QUARTER\n  | typeof TimeUnit.MONTH\n  | typeof TimeUnit.DAY\n  | typeof TimeUnit.DATE\n  | typeof TimeUnit.HOURS\n  | typeof TimeUnit.MINUTES\n  | typeof TimeUnit.SECONDS\n  | typeof TimeUnit.MILLISECONDS;\n\n/** Time Unit that only corresponds to only one part of Date objects. */\nconst LOCAL_SINGLE_TIMEUNIT_INDEX: Flag<LocalSingleTimeUnit> = {\n  year: 1,\n  quarter: 1,\n  month: 1,\n  day: 1,\n  date: 1,\n  hours: 1,\n  minutes: 1,\n  seconds: 1,\n  milliseconds: 1\n};\n\nexport const TIMEUNIT_PARTS = flagKeys(LOCAL_SINGLE_TIMEUNIT_INDEX);\n\nexport function isLocalSingleTimeUnit(timeUnit: string): timeUnit is LocalSingleTimeUnit {\n  return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];\n}\n\nexport type UtcSingleTimeUnit =\n  | typeof TimeUnit.UTCYEAR\n  | typeof TimeUnit.UTCQUARTER\n  | typeof TimeUnit.UTCMONTH\n  | typeof TimeUnit.UTCDAY\n  | typeof TimeUnit.UTCDATE\n  | typeof TimeUnit.UTCHOURS\n  | typeof TimeUnit.UTCMINUTES\n  | typeof TimeUnit.UTCSECONDS\n  | typeof TimeUnit.UTCMILLISECONDS;\n\nconst UTC_SINGLE_TIMEUNIT_INDEX: Flag<UtcSingleTimeUnit> = {\n  utcyear: 1,\n  utcquarter: 1,\n  utcmonth: 1,\n  utcday: 1,\n  utcdate: 1,\n  utchours: 1,\n  utcminutes: 1,\n  utcseconds: 1,\n  utcmilliseconds: 1\n};\n\nexport function isUtcSingleTimeUnit(timeUnit: string): timeUnit is UtcSingleTimeUnit {\n  return !!UTC_SINGLE_TIMEUNIT_INDEX[timeUnit];\n}\n\nexport type SingleTimeUnit = LocalSingleTimeUnit | UtcSingleTimeUnit;\n\nexport type LocalMultiTimeUnit =\n  // Local Time\n  | typeof TimeUnit.YEARQUARTER\n  | typeof TimeUnit.YEARQUARTERMONTH\n  | typeof TimeUnit.YEARMONTH\n  | typeof TimeUnit.YEARMONTHDATE\n  | typeof TimeUnit.YEARMONTHDATEHOURS\n  | typeof TimeUnit.YEARMONTHDATEHOURSMINUTES\n  | typeof TimeUnit.YEARMONTHDATEHOURSMINUTESSECONDS\n  | typeof TimeUnit.QUARTERMONTH\n  | typeof TimeUnit.MONTHDATE\n  | typeof TimeUnit.MONTHDATEHOURS\n  | typeof TimeUnit.HOURSMINUTES\n  | typeof TimeUnit.HOURSMINUTESSECONDS\n  | typeof TimeUnit.MINUTESSECONDS\n  | typeof TimeUnit.SECONDSMILLISECONDS;\n\nconst LOCAL_MULTI_TIMEUNIT_INDEX: Flag<LocalMultiTimeUnit> = {\n  yearquarter: 1,\n  yearquartermonth: 1,\n\n  yearmonth: 1,\n  yearmonthdate: 1,\n  yearmonthdatehours: 1,\n  yearmonthdatehoursminutes: 1,\n  yearmonthdatehoursminutesseconds: 1,\n\n  quartermonth: 1,\n\n  monthdate: 1,\n  monthdatehours: 1,\n\n  hoursminutes: 1,\n  hoursminutesseconds: 1,\n\n  minutesseconds: 1,\n\n  secondsmilliseconds: 1\n};\n\nexport type UtcMultiTimeUnit =\n  | typeof TimeUnit.UTCYEARQUARTER\n  | typeof TimeUnit.UTCYEARQUARTERMONTH\n  | typeof TimeUnit.UTCYEARMONTH\n  | typeof TimeUnit.UTCYEARMONTHDATE\n  | typeof TimeUnit.UTCYEARMONTHDATEHOURS\n  | typeof TimeUnit.UTCYEARMONTHDATEHOURSMINUTES\n  | typeof TimeUnit.UTCYEARMONTHDATEHOURSMINUTESSECONDS\n  | typeof TimeUnit.UTCQUARTERMONTH\n  | typeof TimeUnit.UTCMONTHDATE\n  | typeof TimeUnit.UTCMONTHDATEHOURS\n  | typeof TimeUnit.UTCHOURSMINUTES\n  | typeof TimeUnit.UTCHOURSMINUTESSECONDS\n  | typeof TimeUnit.UTCMINUTESSECONDS\n  | typeof TimeUnit.UTCSECONDSMILLISECONDS;\n\nconst UTC_MULTI_TIMEUNIT_INDEX: Flag<UtcMultiTimeUnit> = {\n  utcyearquarter: 1,\n  utcyearquartermonth: 1,\n\n  utcyearmonth: 1,\n  utcyearmonthdate: 1,\n  utcyearmonthdatehours: 1,\n  utcyearmonthdatehoursminutes: 1,\n  utcyearmonthdatehoursminutesseconds: 1,\n\n  utcquartermonth: 1,\n\n  utcmonthdate: 1,\n  utcmonthdatehours: 1,\n\n  utchoursminutes: 1,\n  utchoursminutesseconds: 1,\n\n  utcminutesseconds: 1,\n\n  utcsecondsmilliseconds: 1\n};\n\nexport type MultiTimeUnit = LocalMultiTimeUnit | UtcMultiTimeUnit;\n\nexport type LocalTimeUnit = LocalSingleTimeUnit | LocalMultiTimeUnit;\nexport type UtcTimeUnit = UtcSingleTimeUnit | UtcMultiTimeUnit;\n\nconst UTC_TIMEUNIT_INDEX: Flag<UtcTimeUnit> = {\n  ...UTC_SINGLE_TIMEUNIT_INDEX,\n  ...UTC_MULTI_TIMEUNIT_INDEX\n};\n\nexport function isUTCTimeUnit(t: string): t is UtcTimeUnit {\n  return !!UTC_TIMEUNIT_INDEX[t];\n}\n\nexport function getLocalTimeUnit(t: UtcTimeUnit): LocalTimeUnit {\n  return t.substr(3) as LocalTimeUnit;\n}\n\nexport type TimeUnit = SingleTimeUnit | MultiTimeUnit;\n\nconst TIMEUNIT_INDEX: Flag<TimeUnit> = {\n  ...LOCAL_SINGLE_TIMEUNIT_INDEX,\n  ...UTC_SINGLE_TIMEUNIT_INDEX,\n  ...LOCAL_MULTI_TIMEUNIT_INDEX,\n  ...UTC_MULTI_TIMEUNIT_INDEX\n};\n\nexport const TIMEUNITS = flagKeys(TIMEUNIT_INDEX);\n\nexport function isTimeUnit(t: string): t is TimeUnit {\n  return !!TIMEUNIT_INDEX[t];\n}\n\ntype DateMethodName = keyof Date;\n\nconst SET_DATE_METHOD: Record<LocalSingleTimeUnit, DateMethodName> = {\n  year: 'setFullYear',\n  month: 'setMonth',\n  date: 'setDate',\n  hours: 'setHours',\n  minutes: 'setMinutes',\n  seconds: 'setSeconds',\n  milliseconds: 'setMilliseconds',\n  // Day and quarter have their own special cases\n  quarter: null,\n  day: null\n};\n\n/**\n * Converts a date to only have the measurements relevant to the specified unit\n * i.e. ('yearmonth', '2000-12-04 07:58:14') -> '2000-12-01 00:00:00'\n * Note: the base date is Jan 01 1900 00:00:00\n */\nexport function convert(unit: TimeUnit, date: Date): Date {\n  const isUTC = isUTCTimeUnit(unit);\n  const result: Date = isUTC\n    ? // start with uniform date\n      new Date(Date.UTC(1972, 0, 1, 0, 0, 0, 0)) // 1972 is the first leap year after 1970, the start of unix time\n    : new Date(1972, 0, 1, 0, 0, 0, 0);\n  for (const timeUnitPart of TIMEUNIT_PARTS) {\n    if (containsTimeUnit(unit, timeUnitPart)) {\n      switch (timeUnitPart) {\n        case TimeUnit.DAY:\n          throw new Error(\"Cannot convert to TimeUnits containing 'day'\");\n        case TimeUnit.QUARTER: {\n          const {getDateMethod, setDateMethod} = dateMethods('month', isUTC);\n          // indicate quarter by setting month to be the first of the quarter i.e. may (4) -> april (3)\n          result[setDateMethod](Math.floor(date[getDateMethod]() / 3) * 3);\n          break;\n        }\n        default:\n          const {getDateMethod, setDateMethod} = dateMethods(timeUnitPart, isUTC);\n          result[setDateMethod](date[getDateMethod]());\n      }\n    }\n  }\n  return result;\n}\n\nfunction dateMethods(singleUnit: SingleTimeUnit, isUtc: boolean) {\n  const rawSetDateMethod = SET_DATE_METHOD[singleUnit];\n  const setDateMethod = isUtc ? 'setUTC' + rawSetDateMethod.substr(3) : rawSetDateMethod;\n  const getDateMethod = 'get' + (isUtc ? 'UTC' : '') + rawSetDateMethod.substr(3);\n  return {setDateMethod, getDateMethod};\n}\n\nexport function getTimeUnitParts(timeUnit: TimeUnit) {\n  return TIMEUNIT_PARTS.reduce((parts, part) => {\n    if (containsTimeUnit(timeUnit, part)) {\n      return [...parts, part];\n    }\n    return parts;\n  }, []);\n}\n\n/** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */\nexport function containsTimeUnit(fullTimeUnit: TimeUnit, timeUnit: TimeUnit) {\n  const index = fullTimeUnit.indexOf(timeUnit);\n  return (\n    index > -1 && (timeUnit !== TimeUnit.SECONDS || index === 0 || fullTimeUnit.charAt(index - 1) !== 'i') // exclude milliseconds\n  );\n}\n\n/**\n * Returns Vega expresssion for a given timeUnit and fieldRef\n */\nexport function fieldExpr(fullTimeUnit: TimeUnit, field: string): string {\n  const fieldRef = accessPathWithDatum(field);\n\n  const utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';\n  function func(timeUnit: TimeUnit) {\n    if (timeUnit === TimeUnit.QUARTER) {\n      // quarter starting at 0 (0,3,6,9).\n      return `(${utc}quarter(${fieldRef})-1)`;\n    } else {\n      return `${utc}${timeUnit}(${fieldRef})`;\n    }\n  }\n\n  const d = TIMEUNIT_PARTS.reduce(\n    (dateExpr: DateTimeExpr, tu: TimeUnit) => {\n      if (containsTimeUnit(fullTimeUnit, tu)) {\n        dateExpr[tu] = func(tu);\n      }\n      return dateExpr;\n    },\n    {} as {[key in SingleTimeUnit]: string}\n  );\n\n  return dateTimeExpr(d);\n}\n\nexport function getDateTimeComponents(timeUnit: TimeUnit, shortTimeLabels: boolean) {\n  if (!timeUnit) {\n    return undefined;\n  }\n\n  const dateComponents: string[] = [];\n  const hasYear = containsTimeUnit(timeUnit, TimeUnit.YEAR);\n\n  if (containsTimeUnit(timeUnit, TimeUnit.MONTH)) {\n    // By default use short month name\n    dateComponents.push(shortTimeLabels !== false ? '%b' : '%B');\n  }\n\n  if (containsTimeUnit(timeUnit, TimeUnit.DAY)) {\n    dateComponents.push(shortTimeLabels ? '%a' : '%A');\n  } else if (containsTimeUnit(timeUnit, TimeUnit.DATE)) {\n    dateComponents.push('%d' + (hasYear ? ',' : '')); // add comma if there is year\n  }\n\n  if (hasYear) {\n    dateComponents.push(shortTimeLabels ? '%y' : '%Y');\n  }\n\n  const timeComponents: string[] = [];\n\n  if (containsTimeUnit(timeUnit, TimeUnit.HOURS)) {\n    timeComponents.push('%H');\n  }\n  if (containsTimeUnit(timeUnit, TimeUnit.MINUTES)) {\n    timeComponents.push('%M');\n  }\n  if (containsTimeUnit(timeUnit, TimeUnit.SECONDS)) {\n    timeComponents.push('%S');\n  }\n  if (containsTimeUnit(timeUnit, TimeUnit.MILLISECONDS)) {\n    timeComponents.push('%L');\n  }\n\n  const dateTimeComponents: string[] = [];\n  if (dateComponents.length > 0) {\n    dateTimeComponents.push(dateComponents.join(' '));\n  }\n  if (timeComponents.length > 0) {\n    dateTimeComponents.push(timeComponents.join(':'));\n  }\n\n  return dateTimeComponents;\n}\n\n/**\n * returns the signal expression used for axis labels for a time unit\n */\nexport function formatExpression(\n  timeUnit: TimeUnit,\n  field: string,\n  shortTimeLabels: boolean,\n  isUTCScale: boolean\n): string {\n  if (!timeUnit) {\n    return undefined;\n  }\n\n  const dateTimeComponents: string[] = getDateTimeComponents(timeUnit, shortTimeLabels);\n  let expression = '';\n\n  if (containsTimeUnit(timeUnit, TimeUnit.QUARTER)) {\n    // special expression for quarter as prefix\n    expression = `'Q' + quarter(${field})`;\n  }\n\n  if (dateTimeComponents.length > 0) {\n    if (expression) {\n      // Add space between quarter and main time format\n      expression += ` + ' ' + `;\n    }\n\n    // We only use utcFormat for utc scale\n    // For utc time units, the data is already converted as a part of timeUnit transform.\n    // Thus, utc time units should use timeFormat to avoid shifting the time twice.\n    if (isUTCScale) {\n      expression += `utcFormat(${field}, '${dateTimeComponents.join(' ')}')`;\n    } else {\n      expression += `timeFormat(${field}, '${dateTimeComponents.join(' ')}')`;\n    }\n  }\n\n  // If expression is still an empty string, return undefined instead.\n  return expression || undefined;\n}\n\nexport function normalizeTimeUnit(timeUnit: TimeUnit): TimeUnit {\n  if (timeUnit !== 'day' && timeUnit.indexOf('day') >= 0) {\n    log.warn(log.message.dayReplacedWithDate(timeUnit));\n    return timeUnit.replace('day', 'date') as TimeUnit;\n  }\n  return timeUnit;\n}\n","import {ChannelDef, Field, FieldDef, TypedFieldDef} from '../fielddef';\nimport {Header} from '../header';\nimport {Resolve} from '../resolve';\nimport {EncodingSortField, SortArray, SortOrder} from '../sort';\nimport {BaseSpec, GenericCompositionLayout} from './base';\nimport {FacetMapping} from './facet';\nimport {GenericLayerSpec, NormalizedLayerSpec} from './layer';\nimport {GenericUnitSpec, NormalizedUnitSpec} from './unit';\n\nexport interface FacetFieldDef<F extends Field> extends TypedFieldDef<F> {\n  /**\n   * An object defining properties of a facet's header.\n   */\n  header?: Header;\n\n  // Note: `\"sort\"` for facet field def is different from encoding field def as it does not support `SortByEncoding`\n\n  /**\n   * Sort order for the encoded field.\n   *\n   * For continuous fields (quantitative or temporal), `sort` can be either `\"ascending\"` or `\"descending\"`.\n   *\n   * For discrete fields, `sort` can be one of the following:\n   * - `\"ascending\"` or `\"descending\"` -- for sorting by the values' natural order in Javascript.\n   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\n   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order.  For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\"month\"` and `\"day\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\"Mon\"`, `\"Tue\"`).\n   * - `null` indicating no sort.\n   *\n   * __Default value:__ `\"ascending\"`\n   *\n   * __Note:__ `null` is not supported for `row` and `column`.\n   */\n  sort?: SortArray | SortOrder | EncodingSortField<F> | null;\n}\n\nexport interface FacetMapping<F extends Field> {\n  /**\n   * Vertical facets for trellis plots.\n   */\n  row?: FacetFieldDef<F>;\n\n  /**\n   * Horizontal facets for trellis plots.\n   */\n  column?: FacetFieldDef<F>;\n}\n\nexport function isFacetFieldDef<F extends Field>(channelDef: ChannelDef<FieldDef<F>>): channelDef is FacetFieldDef<F> {\n  return !!channelDef && !!channelDef['header'];\n}\n\n/**\n * Base interface for a facet specification.\n */\nexport interface GenericFacetSpec<U extends GenericUnitSpec<any, any>, L extends GenericLayerSpec<any>>\n  extends BaseSpec,\n    GenericCompositionLayout {\n  /**\n   * An object that describes mappings between `row` and `column` channels and their field definitions.\n   */\n  facet: FacetMapping<Field>;\n\n  /**\n   * A specification of the view that gets faceted.\n   */\n  spec: L | U;\n  // TODO: replace this with GenericSpec<U> once we support all cases;\n\n  /**\n   * Scale, axis, and legend resolutions for facets.\n   */\n  resolve?: Resolve;\n}\n\n/**\n * A facet specification without any shortcut / expansion syntax\n */\nexport type NormalizedFacetSpec = GenericFacetSpec<NormalizedUnitSpec, NormalizedLayerSpec>;\n\nexport function isFacetSpec(spec: BaseSpec): spec is GenericFacetSpec<any, any> {\n  return spec['facet'] !== undefined;\n}\n","import {Flag} from './util';\n/** Constants and utilities for data type */\n/** Data type based on level of measurement */\n\nexport namespace Type {\n  export const QUANTITATIVE: 'quantitative' = 'quantitative';\n  export const ORDINAL: 'ordinal' = 'ordinal';\n  export const TEMPORAL: 'temporal' = 'temporal';\n  export const NOMINAL: 'nominal' = 'nominal';\n\n  export const GEOJSON: 'geojson' = 'geojson';\n}\n\nexport type StandardType = typeof Type.QUANTITATIVE | typeof Type.ORDINAL | typeof Type.TEMPORAL | typeof Type.NOMINAL;\n\nexport type Type = StandardType | typeof Type.GEOJSON;\n\nexport const TYPE_INDEX: Flag<Type> = {\n  quantitative: 1,\n  ordinal: 1,\n  temporal: 1,\n  nominal: 1,\n  geojson: 1\n};\n\nexport function isType(t: any): t is Type {\n  return !!TYPE_INDEX[t];\n}\n\nexport const QUANTITATIVE = Type.QUANTITATIVE;\nexport const ORDINAL = Type.ORDINAL;\nexport const TEMPORAL = Type.TEMPORAL;\nexport const NOMINAL = Type.NOMINAL;\n\nexport const GEOJSON = Type.GEOJSON;\n\n/**\n * Get full, lowercase type name for a given type.\n * @param  type\n * @return Full type name.\n */\nexport function getFullName(type: Type | string): Type {\n  if (type) {\n    type = type.toLowerCase();\n    switch (type) {\n      case 'q':\n      case QUANTITATIVE:\n        return 'quantitative';\n      case 't':\n      case TEMPORAL:\n        return 'temporal';\n      case 'o':\n      case ORDINAL:\n        return 'ordinal';\n      case 'n':\n      case NOMINAL:\n        return 'nominal';\n      case GEOJSON:\n        return 'geojson';\n    }\n  }\n  // If we get invalid input, return undefined type.\n  return undefined;\n}\n","// Declaration and utility for variants of a field definition object\nimport {AggregateOp} from 'vega';\nimport {isArray, isBoolean, isNumber, isString} from 'vega-util';\nimport {isAggregateOp, isCountingAggregateOp} from './aggregate';\nimport {Axis} from './axis';\nimport {autoMaxBins, BinParams, binToString, isBinned, isBinning} from './bin';\nimport {Channel, isScaleChannel, isSecondaryRangeChannel, POSITION_SCALE_CHANNELS, rangeType} from './channel';\nimport {CompositeAggregate} from './compositemark';\nimport {Config} from './config';\nimport {DateTime, dateTimeExpr, isDateTime} from './datetime';\nimport {Guide, TitleMixins} from './guide';\nimport {ImputeParams} from './impute';\nimport {Legend} from './legend';\nimport * as log from './log';\nimport {LogicalOperand} from './logical';\nimport {Predicate} from './predicate';\nimport {Scale} from './scale';\nimport {Sort, SortOrder} from './sort';\nimport {isFacetFieldDef} from './spec/facet';\nimport {StackOffset} from './stack';\nimport {\n  getLocalTimeUnit,\n  getTimeUnitParts,\n  isLocalSingleTimeUnit,\n  isUtcSingleTimeUnit,\n  normalizeTimeUnit,\n  TimeUnit\n} from './timeunit';\nimport {AggregatedFieldDef, WindowFieldDef} from './transform';\nimport {getFullName, QUANTITATIVE, StandardType, Type} from './type';\nimport {contains, flatAccessWithDatum, getFirstDefined, internalField, replacePathInField, titlecase} from './util';\n\nexport type Value = number | string | boolean | null;\n\n/**\n * Definition object for a constant value of an encoding channel.\n */\nexport interface ValueDef<V extends Value = Value> {\n  /**\n   * A constant value in visual domain (e.g., `\"red\"` / \"#0099ff\" for color, values between `0` to `1` for opacity).\n   */\n  value: V;\n}\n\n/**\n * Generic type for conditional channelDef.\n * F defines the underlying FieldDef type.\n */\n\nexport type ChannelDefWithCondition<F extends FieldDef<any>, V extends Value> =\n  | FieldDefWithCondition<F, V>\n  | ValueDefWithCondition<F, V>;\n\n/**\n * A ValueDef with Condition<ValueDef | FieldDef> where either the conition or the value are optional.\n * {\n *   condition: {field: ...} | {value: ...},\n *   value: ...,\n * }\n */\n\nexport type ValueDefWithCondition<F extends FieldDef<any>, V extends Value = Value> =\n  | ValueDefWithOptionalCondition<F, V>\n  | ConditionOnlyDef<F>;\n\nexport type ColorValueDefWithCondition<F extends Field> = ValueDefWithCondition<\n  MarkPropFieldDef<F, StandardType>,\n  string | null\n>;\n\nexport type NumericValueDefWithCondition<F extends Field> = ValueDefWithCondition<\n  MarkPropFieldDef<F, StandardType>,\n  number\n>;\n\nexport type StringValueDefWithCondition<F extends Field, T extends Type = 'nominal'> = ValueDefWithCondition<\n  MarkPropFieldDef<F, T>,\n  string\n>;\n\nexport type TypeForShape = 'nominal' | 'ordinal' | 'geojson';\n\nexport type ShapeValueDefWithCondition<F extends Field> = StringValueDefWithCondition<F, TypeForShape>;\n\nexport type TextValueDefWithCondition<F extends Field> = ValueDefWithCondition<\n  TextFieldDef<F>,\n  string | number | boolean\n>;\n\nexport type Conditional<CD extends FieldDef<any> | ValueDef<any>> = ConditionalPredicate<CD> | ConditionalSelection<CD>;\n\nexport type ConditionalPredicate<CD extends FieldDef<any> | ValueDef<any>> = {\n  test: LogicalOperand<Predicate>;\n} & CD;\n\nexport type ConditionalSelection<CD extends FieldDef<any> | ValueDef<any>> = {\n  /**\n   * A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).\n   */\n  selection: LogicalOperand<string>;\n} & CD;\n\nexport function isConditionalSelection<T>(c: Conditional<T>): c is ConditionalSelection<T> {\n  return c['selection'];\n}\n\nexport interface ConditionValueDefMixins<V extends Value = Value> {\n  /**\n   * One or more value definition(s) with a selection predicate.\n   *\n   * __Note:__ A field definition's `condition` property can only contain [value definitions](https://vega.github.io/vega-lite/docs/encoding.html#value-def)\n   * since Vega-Lite only allows at most one encoded field per encoding channel.\n   */\n  condition?: Conditional<ValueDef<V>> | Conditional<ValueDef<V>>[];\n}\n\n/**\n * A FieldDef with Condition<ValueDef>\n * {\n *   condition: {value: ...},\n *   field: ...,\n *   ...\n * }\n */\n\nexport type FieldDefWithCondition<F extends FieldDef<any>, V extends Value = Value> = F & ConditionValueDefMixins<V>;\n\nexport type ColorFieldDefWithCondition<F extends Field> = FieldDefWithCondition<\n  MarkPropFieldDef<F, StandardType>,\n  string | null\n>;\n\nexport type NumericFieldDefWithCondition<F extends Field> = FieldDefWithCondition<\n  MarkPropFieldDef<F, StandardType>,\n  number\n>;\nexport type StringFieldDefWithCondition<F extends Field, T extends Type = 'nominal'> = FieldDefWithCondition<\n  MarkPropFieldDef<F, T>,\n  string\n>;\n\nexport type ShapeFieldDefWithCondition<F extends Field> = StringFieldDefWithCondition<F, TypeForShape>;\n\nexport type TextFieldDefWithCondition<F extends Field> = FieldDefWithCondition<\n  TextFieldDef<F>,\n  string | number | boolean\n>;\n\n/**\n * A ValueDef with optional Condition<ValueDef | FieldDef>\n * {\n *   condition: {field: ...} | {value: ...},\n *   value: ...,\n * }\n */\n\nexport interface ValueDefWithOptionalCondition<FD extends FieldDef<any>, V extends number | string | boolean | null>\n  extends ValueDef<V> {\n  /**\n   * A field definition or one or more value definition(s) with a selection predicate.\n   */\n  condition?: Conditional<FD> | Conditional<ValueDef<V>> | Conditional<ValueDef<V>>[];\n}\n\n/**\n * A Condition<ValueDef | FieldDef> only definition.\n * {\n *   condition: {field: ...} | {value: ...}\n * }\n */\nexport interface ConditionOnlyDef<\n  F extends FieldDef<any>,\n  V extends number | string | boolean | null = number | string | boolean | null\n> {\n  /**\n   * A field definition or one or more value definition(s) with a selection predicate.\n   */\n  condition: Conditional<F> | Conditional<ValueDef<V>> | Conditional<ValueDef<V>>[];\n}\n\n/**\n * Reference to a repeated value.\n */\nexport interface RepeatRef {\n  repeat: 'row' | 'column';\n}\n\nexport type Field = string | RepeatRef;\n\nexport function isRepeatRef(field: Field): field is RepeatRef {\n  return field && !isString(field) && 'repeat' in field;\n}\n\n/** @hide */\nexport type HiddenCompositeAggregate = CompositeAggregate;\n\nexport type Aggregate = AggregateOp | HiddenCompositeAggregate;\n\nexport interface GenericBinMixins<B> {\n  /**\n   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\"binned\"`).\n   *\n   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n   *\n   * - To indicate that the data for the `x` (or `y`) channel are already binned, you can set the `bin` property of the `x` (or `y`) channel to `\"binned\"` and map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n   *\n   * __Default value:__ `false`\n   */\n  bin?: B;\n}\n\nexport type BaseBinMixins = GenericBinMixins<boolean | BinParams | 'binned' | null>;\nexport type BinWithoutBinnedMixins = GenericBinMixins<boolean | BinParams>;\n\nexport interface FieldDefBase<F> extends BaseBinMixins {\n  /**\n   * __Required.__ A string defining the name of the field from which to pull a data value\n   * or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n   *\n   * __Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`).\n   * If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`).\n   * See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n   *\n   * __Note:__ `field` is not required if `aggregate` is `count`.\n   */\n  field?: F;\n\n  // function\n\n  /**\n   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\n   * or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n   *\n   * __Default value:__ `undefined` (None)\n   */\n  timeUnit?: TimeUnit;\n\n  /**\n   * Aggregation function for the field\n   * (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).\n   *\n   * __Default value:__ `undefined` (None)\n   */\n  aggregate?: Aggregate;\n}\n\nexport function toFieldDefBase(fieldDef: TypedFieldDef<string>): FieldDefBase<string> {\n  const {field, timeUnit, bin, aggregate} = fieldDef;\n  return {\n    ...(timeUnit ? {timeUnit} : {}),\n    ...(bin ? {bin} : {}),\n    ...(aggregate ? {aggregate} : {}),\n    field\n  };\n}\n\nexport interface TypeMixins<T extends Type> {\n  /**\n   * The encoded field's type of measurement (`\"quantitative\"`, `\"temporal\"`, `\"ordinal\"`, or `\"nominal\"`).\n   * It can also be a `\"geojson\"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).\n   *\n   * __Note:__ Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they have exactly the same type as their primary channels (e.g., `x`, `y`)\n   */\n  // * or an initial character of the type name (`\"Q\"`, `\"T\"`, `\"O\"`, `\"N\"`).\n  // * This property is case-insensitive.\n  type: T;\n}\n\n/**\n *  Definition object for a data field, its type and transformation of an encoding channel.\n */\nexport type TypedFieldDef<F extends Field, T extends Type = Type> = FieldDefBase<F> & TitleMixins & TypeMixins<T>;\n\nexport interface SortableFieldDef<F extends Field, T extends Type = StandardType> extends TypedFieldDef<F, T> {\n  /**\n   * Sort order for the encoded field.\n   *\n   * For continuous fields (quantitative or temporal), `sort` can be either `\"ascending\"` or `\"descending\"`.\n   *\n   * For discrete fields, `sort` can be one of the following:\n   * - `\"ascending\"` or `\"descending\"` -- for sorting by the values' natural order in Javascript.\n   * - [A sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) for sorting by another encoding channel. (This type of sort definition is not available for `row` and `column` channels.)\n   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\n   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order.  For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\"month\"` and `\"day\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\"Mon\"`, `\"Tue\"`).\n   * - `null` indicating no sort.\n   *\n   * __Default value:__ `\"ascending\"`\n   *\n   * __Note:__ `null` is not supported for `row` and `column`.\n   */\n  sort?: Sort<F>;\n}\n\nexport function isSortableFieldDef<F extends Field>(fieldDef: FieldDef<F>): fieldDef is SortableFieldDef<F> {\n  return isTypedFieldDef(fieldDef) && !!fieldDef['sort'];\n}\n\nexport interface ScaleFieldDef<F extends Field, T extends Type = StandardType> extends SortableFieldDef<F, T> {\n  /**\n   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\n   *\n   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\n   *\n   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\n   */\n  scale?: Scale | null;\n}\n\n/**\n * A field definition of a secondary channel that shares a scale with another primary channel.  For example, `x2`, `xError` and `xError2` share the same scale with `x`.\n */\nexport type SecondaryFieldDef<F extends Field> = FieldDefBase<F> & TitleMixins;\n\n/**\n * Field Def without scale (and without bin: \"binned\" support).\n */\nexport type FieldDefWithoutScale<F extends Field, T extends Type = StandardType> = TypedFieldDef<F, T> &\n  BinWithoutBinnedMixins;\n\nexport type LatLongFieldDef<F extends Field> = FieldDefBase<F> &\n  TitleMixins &\n  Partial<TypeMixins<'quantitative'>> &\n  GenericBinMixins<null>; // Lat long shouldn't have bin, but we keep bin property for simplicity of the codebase.\n\nexport interface PositionFieldDef<F extends Field> extends ScaleFieldDef<F> {\n  /**\n   * An object defining properties of axis's gridlines, ticks and labels.\n   * If `null`, the axis for the encoding channel will be removed.\n   *\n   * __Default value:__ If undefined, default [axis properties](https://vega.github.io/vega-lite/docs/axis.html) are applied.\n   */\n  axis?: Axis | null;\n\n  /**\n   * Type of stacking offset if the field should be stacked.\n   * `stack` is only applicable for `x` and `y` channels with continuous domains.\n   * For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.\n   *\n   * `stack` can be one of the following values:\n   * - `\"zero\"`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).\n   * - `\"normalize\"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>\n   * -`\"center\"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).\n   * - `null` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.\n   *\n   * __Default value:__ `zero` for plots with all of the following conditions are true:\n   * (1) the mark is `bar` or `area`;\n   * (2) the stacked measure channel (x or y) has a linear scale;\n   * (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y.  Otherwise, `null` by default.\n   */\n  stack?: StackOffset | null;\n\n  /**\n   * An object defining the properties of the Impute Operation to be applied.\n   * The field value of the other positional channel is taken as `key` of the `Impute` Operation.\n   * The field of the `color` channel if specified is used as `groupby` of the `Impute` Operation.\n   */\n  impute?: ImputeParams;\n}\n\n/**\n * Field definition of a mark property, which can contain a legend.\n */\nexport type MarkPropFieldDef<F extends Field, T extends Type = Type> = ScaleFieldDef<F, T> &\n  BinWithoutBinnedMixins & {\n    /**\n     * An object defining properties of the legend.\n     * If `null`, the legend for the encoding channel will be removed.\n     *\n     * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\n     */\n    legend?: Legend | null;\n  };\n\n// Detail\n\n// Order Path have no scale\n\nexport interface OrderFieldDef<F extends Field> extends FieldDefWithoutScale<F> {\n  /**\n   * The sort order. One of `\"ascending\"` (default) or `\"descending\"`.\n   */\n  sort?: SortOrder;\n}\n\nexport interface TextFieldDef<F extends Field> extends FieldDefWithoutScale<F, StandardType> {\n  /**\n   * The [formatting pattern](https://vega.github.io/vega-lite/docs/format.html) for a text field. If not defined, this will be determined automatically.\n   */\n  format?: string;\n}\n\nexport type FieldDef<F extends Field> = SecondaryFieldDef<F> | TypedFieldDef<F>;\nexport type ChannelDef<FD extends FieldDef<any> = FieldDef<string>, V extends Value = Value> = ChannelDefWithCondition<\n  FD,\n  V\n>;\n\nexport function isConditionalDef<F extends Field, V extends Value>(\n  channelDef: ChannelDef<FieldDef<F>, V>\n): channelDef is ChannelDefWithCondition<FieldDef<F>, V> {\n  return !!channelDef && !!channelDef.condition;\n}\n\n/**\n * Return if a channelDef is a ConditionalValueDef with ConditionFieldDef\n */\n\nexport function hasConditionalFieldDef<F extends Field, V extends Value>(\n  channelDef: ChannelDef<FieldDef<F>, V>\n): channelDef is ValueDef<V> & {condition: Conditional<TypedFieldDef<F>>} {\n  return !!channelDef && !!channelDef.condition && !isArray(channelDef.condition) && isFieldDef(channelDef.condition);\n}\n\nexport function hasConditionalValueDef<F extends Field, V extends Value>(\n  channelDef: ChannelDef<FieldDef<F>, V>\n): channelDef is ValueDef<V> & {condition: Conditional<ValueDef<V>> | Conditional<ValueDef<V>>[]} {\n  return !!channelDef && !!channelDef.condition && (isArray(channelDef.condition) || isValueDef(channelDef.condition));\n}\n\nexport function isFieldDef<F extends Field>(\n  channelDef: ChannelDef<FieldDef<F>>\n): channelDef is\n  | TypedFieldDef<F>\n  | SecondaryFieldDef<F>\n  | PositionFieldDef<F>\n  | ScaleFieldDef<F>\n  | MarkPropFieldDef<F>\n  | OrderFieldDef<F>\n  | TextFieldDef<F> {\n  return !!channelDef && (!!channelDef['field'] || channelDef['aggregate'] === 'count');\n}\n\nexport function isTypedFieldDef<F extends Field>(channelDef: ChannelDef<FieldDef<F>>): channelDef is TypedFieldDef<F> {\n  return !!channelDef && ((!!channelDef['field'] && !!channelDef['type']) || channelDef['aggregate'] === 'count');\n}\n\nexport function isStringFieldDef(channelDef: ChannelDef<FieldDef<Field>>): channelDef is TypedFieldDef<string> {\n  return isFieldDef(channelDef) && isString(channelDef.field);\n}\n\nexport function isValueDef<F extends Field, V extends Value>(\n  channelDef: ChannelDef<FieldDef<F>, V>\n): channelDef is ValueDef<V> {\n  return channelDef && 'value' in channelDef && channelDef['value'] !== undefined;\n}\n\nexport function isScaleFieldDef<F extends Field>(channelDef: ChannelDef<FieldDef<F>>): channelDef is ScaleFieldDef<F> {\n  return !!channelDef && (!!channelDef['scale'] || !!channelDef['sort']);\n}\n\nexport function isPositionFieldDef<F extends Field>(\n  channelDef: ChannelDef<FieldDef<F>>\n): channelDef is PositionFieldDef<F> {\n  return !!channelDef && (!!channelDef['axis'] || !!channelDef['stack'] || !!channelDef['impute']);\n}\n\nexport function isMarkPropFieldDef<F extends Field>(\n  channelDef: ChannelDef<FieldDef<F>>\n): channelDef is MarkPropFieldDef<F> {\n  return !!channelDef && !!channelDef['legend'];\n}\n\nexport function isTextFieldDef<F extends Field>(channelDef: ChannelDef<FieldDef<F>>): channelDef is TextFieldDef<F> {\n  return !!channelDef && !!channelDef['format'];\n}\n\nexport interface FieldRefOption {\n  /** Exclude bin, aggregate, timeUnit */\n  nofn?: boolean;\n  /** Wrap the field with datum or parent (e.g., datum['...'] for Vega Expression */\n  expr?: 'datum' | 'parent';\n  /** Prepend fn with custom function prefix */\n  prefix?: string;\n  /** Append suffix to the field ref for bin (default='start') */\n  binSuffix?: 'end' | 'range' | 'mid';\n  /** Append suffix to the field ref (general) */\n  suffix?: string;\n  /**\n   * Use the field name for `as` in a transform.\n   * We will not escape nested accesses because Vega transform outputs cannot be nested.\n   */\n  forAs?: boolean;\n}\n\nfunction isOpFieldDef(\n  fieldDef: FieldDefBase<string> | WindowFieldDef | AggregatedFieldDef\n): fieldDef is WindowFieldDef | AggregatedFieldDef {\n  return !!fieldDef['op'];\n}\n\n/**\n * Get a Vega field reference from a Vega-Lite field def.\n */\nexport function vgField(\n  fieldDef: FieldDefBase<string> | WindowFieldDef | AggregatedFieldDef,\n  opt: FieldRefOption = {}\n): string {\n  let field = fieldDef.field;\n  const prefix = opt.prefix;\n  let suffix = opt.suffix;\n\n  if (isCount(fieldDef)) {\n    field = internalField('count');\n  } else {\n    let fn: string;\n\n    if (!opt.nofn) {\n      if (isOpFieldDef(fieldDef)) {\n        fn = fieldDef.op;\n      } else if (isBinning(fieldDef.bin)) {\n        fn = binToString(fieldDef.bin);\n        suffix = (opt.binSuffix || '') + (opt.suffix || '');\n      } else if (fieldDef.aggregate) {\n        fn = String(fieldDef.aggregate);\n      } else if (fieldDef.timeUnit) {\n        fn = String(fieldDef.timeUnit);\n      }\n    }\n\n    if (fn) {\n      field = field ? `${fn}_${field}` : fn;\n    }\n  }\n\n  if (suffix) {\n    field = `${field}_${suffix}`;\n  }\n\n  if (prefix) {\n    field = `${prefix}_${field}`;\n  }\n\n  if (opt.forAs) {\n    return field;\n  } else if (opt.expr) {\n    // Expression to access flattened field. No need to escape dots.\n    return flatAccessWithDatum(field, opt.expr);\n  } else {\n    // We flattened all fields so paths should have become dot.\n    return replacePathInField(field);\n  }\n}\n\nexport function isDiscrete(fieldDef: TypedFieldDef<Field>) {\n  switch (fieldDef.type) {\n    case 'nominal':\n    case 'ordinal':\n    case 'geojson':\n      return true;\n    case 'quantitative':\n      return !!fieldDef.bin;\n    case 'temporal':\n      return false;\n  }\n  throw new Error(log.message.invalidFieldType(fieldDef.type));\n}\n\nexport function isContinuous(fieldDef: TypedFieldDef<Field>) {\n  return !isDiscrete(fieldDef);\n}\n\nexport function isCount(fieldDef: FieldDefBase<Field>) {\n  return fieldDef.aggregate === 'count';\n}\n\nexport type FieldTitleFormatter = (fieldDef: FieldDefBase<string>, config: Config) => string;\n\nexport function verbalTitleFormatter(fieldDef: FieldDefBase<string>, config: Config) {\n  const {field: field, bin, timeUnit, aggregate} = fieldDef;\n  if (aggregate === 'count') {\n    return config.countTitle;\n  } else if (isBinning(bin)) {\n    return `${field} (binned)`;\n  } else if (timeUnit) {\n    const units = getTimeUnitParts(timeUnit).join('-');\n    return `${field} (${units})`;\n  } else if (aggregate) {\n    return `${titlecase(aggregate)} of ${field}`;\n  }\n  return field;\n}\n\nexport function functionalTitleFormatter(fieldDef: FieldDefBase<string>, config: Config) {\n  const fn = fieldDef.aggregate || fieldDef.timeUnit || (isBinning(fieldDef.bin) && 'bin');\n  if (fn) {\n    return fn.toUpperCase() + '(' + fieldDef.field + ')';\n  } else {\n    return fieldDef.field;\n  }\n}\n\nexport const defaultTitleFormatter: FieldTitleFormatter = (fieldDef: FieldDefBase<string>, config: Config) => {\n  switch (config.fieldTitle) {\n    case 'plain':\n      return fieldDef.field;\n    case 'functional':\n      return functionalTitleFormatter(fieldDef, config);\n    default:\n      return verbalTitleFormatter(fieldDef, config);\n  }\n};\n\nlet titleFormatter = defaultTitleFormatter;\n\nexport function setTitleFormatter(formatter: FieldTitleFormatter) {\n  titleFormatter = formatter;\n}\n\nexport function resetTitleFormatter() {\n  setTitleFormatter(defaultTitleFormatter);\n}\n\nexport function title(\n  fieldDef: TypedFieldDef<string> | SecondaryFieldDef<string>,\n  config: Config,\n  {allowDisabling}: {allowDisabling: boolean}\n) {\n  const guide = getGuide(fieldDef) || {};\n  const guideTitle = guide.title;\n  if (allowDisabling) {\n    return getFirstDefined(guideTitle, fieldDef.title, defaultTitle(fieldDef, config));\n  } else {\n    return guideTitle || fieldDef.title || defaultTitle(fieldDef, config);\n  }\n}\n\nexport function getGuide(fieldDef: TypedFieldDef<string> | SecondaryFieldDef<string>): Guide {\n  if (isPositionFieldDef(fieldDef) && fieldDef.axis) {\n    return fieldDef.axis;\n  } else if (isMarkPropFieldDef(fieldDef) && fieldDef.legend) {\n    return fieldDef.legend;\n  } else if (isFacetFieldDef(fieldDef) && fieldDef.header) {\n    return fieldDef.header;\n  }\n  return undefined;\n}\n\nexport function defaultTitle(fieldDef: FieldDefBase<string>, config: Config) {\n  return titleFormatter(fieldDef, config);\n}\n\nexport function format(fieldDef: TypedFieldDef<string>) {\n  if (isTextFieldDef(fieldDef) && fieldDef.format) {\n    return fieldDef.format;\n  } else {\n    const guide = getGuide(fieldDef) || {};\n    return guide.format;\n  }\n}\n\nexport function defaultType(fieldDef: TypedFieldDef<Field>, channel: Channel): Type {\n  if (fieldDef.timeUnit) {\n    return 'temporal';\n  }\n  if (isBinning(fieldDef.bin)) {\n    return 'quantitative';\n  }\n  switch (rangeType(channel)) {\n    case 'continuous':\n      return 'quantitative';\n    case 'discrete':\n      return 'nominal';\n    case 'flexible': // color\n      return 'nominal';\n    default:\n      return 'quantitative';\n  }\n}\n\n/**\n * Returns the fieldDef -- either from the outer channelDef or from the condition of channelDef.\n * @param channelDef\n */\n\nexport function getFieldDef<F extends Field>(channelDef: ChannelDef<FieldDef<F>>): FieldDef<F> {\n  if (isFieldDef(channelDef)) {\n    return channelDef;\n  } else if (hasConditionalFieldDef(channelDef)) {\n    return channelDef.condition;\n  }\n  return undefined;\n}\n\nexport function getTypedFieldDef<F extends Field>(channelDef: ChannelDef<TypedFieldDef<F>>): TypedFieldDef<F> {\n  if (isFieldDef(channelDef)) {\n    return channelDef;\n  } else if (hasConditionalFieldDef(channelDef)) {\n    return channelDef.condition;\n  }\n  return undefined;\n}\n\n/**\n * Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.\n */\nexport function normalize(channelDef: ChannelDef, channel: Channel): ChannelDef<any> {\n  if (isString(channelDef) || isNumber(channelDef) || isBoolean(channelDef)) {\n    const primitiveType = isString(channelDef) ? 'string' : isNumber(channelDef) ? 'number' : 'boolean';\n    log.warn(log.message.primitiveChannelDef(channel, primitiveType, channelDef));\n    return {value: channelDef};\n  }\n\n  // If a fieldDef contains a field, we need type.\n  if (isFieldDef(channelDef)) {\n    return normalizeFieldDef(channelDef, channel);\n  } else if (hasConditionalFieldDef(channelDef)) {\n    return {\n      ...channelDef,\n      // Need to cast as normalizeFieldDef normally return FieldDef, but here we know that it is definitely Condition<FieldDef>\n      condition: normalizeFieldDef(channelDef.condition, channel) as Conditional<TypedFieldDef<string>>\n    };\n  }\n  return channelDef;\n}\nexport function normalizeFieldDef(fieldDef: FieldDef<string>, channel: Channel) {\n  // Drop invalid aggregate\n  if (fieldDef.aggregate && !isAggregateOp(fieldDef.aggregate)) {\n    const {aggregate, ...fieldDefWithoutAggregate} = fieldDef;\n    log.warn(log.message.invalidAggregate(fieldDef.aggregate));\n    fieldDef = fieldDefWithoutAggregate;\n  }\n\n  // Normalize Time Unit\n  if (fieldDef.timeUnit) {\n    fieldDef = {\n      ...fieldDef,\n      timeUnit: normalizeTimeUnit(fieldDef.timeUnit)\n    };\n  }\n\n  // Normalize bin\n  if (isBinning(fieldDef.bin)) {\n    fieldDef = {\n      ...fieldDef,\n      bin: normalizeBin(fieldDef.bin, channel)\n    };\n  }\n\n  if (isBinned(fieldDef.bin) && !contains(POSITION_SCALE_CHANNELS, channel)) {\n    log.warn(`Channel ${channel} should not be used with \"binned\" bin`);\n  }\n\n  // Normalize Type\n  if (isTypedFieldDef(fieldDef)) {\n    const fullType = getFullName(fieldDef.type);\n    if (fieldDef.type !== fullType) {\n      // convert short type to full type\n      fieldDef = {\n        ...fieldDef,\n        type: fullType\n      };\n    }\n    if (fieldDef.type !== 'quantitative') {\n      if (isCountingAggregateOp(fieldDef.aggregate)) {\n        log.warn(log.message.invalidFieldTypeForCountAggregate(fieldDef.type, fieldDef.aggregate));\n        fieldDef = {\n          ...fieldDef,\n          type: 'quantitative'\n        };\n      }\n    }\n  } else if (!isSecondaryRangeChannel(channel)) {\n    // If type is empty / invalid, then augment with default type\n    const newType = defaultType(fieldDef as TypedFieldDef<any>, channel);\n    log.warn(log.message.missingFieldType(channel, newType));\n\n    fieldDef = {\n      ...fieldDef,\n      type: newType\n    };\n  }\n\n  if (isTypedFieldDef(fieldDef)) {\n    const {compatible, warning} = channelCompatibility(fieldDef, channel);\n    if (!compatible) {\n      log.warn(warning);\n    }\n  }\n  return fieldDef;\n}\n\nexport function normalizeBin(bin: BinParams | boolean | 'binned', channel: Channel) {\n  if (isBoolean(bin)) {\n    return {maxbins: autoMaxBins(channel)};\n  } else if (bin === 'binned') {\n    return {\n      binned: true\n    };\n  } else if (!bin.maxbins && !bin.step) {\n    return {...bin, maxbins: autoMaxBins(channel)};\n  } else {\n    return bin;\n  }\n}\n\nconst COMPATIBLE = {compatible: true};\nexport function channelCompatibility(\n  fieldDef: TypedFieldDef<Field>,\n  channel: Channel\n): {compatible: boolean; warning?: string} {\n  const type = fieldDef.type;\n\n  if (type === 'geojson' && channel !== 'shape') {\n    return {\n      compatible: false,\n      warning: `Channel ${channel} should not be used with a geojson data.`\n    };\n  }\n\n  switch (channel) {\n    case 'row':\n    case 'column':\n      if (isContinuous(fieldDef)) {\n        return {\n          compatible: false,\n          warning: log.message.facetChannelShouldBeDiscrete(channel)\n        };\n      }\n      return COMPATIBLE;\n\n    case 'x':\n    case 'y':\n    case 'color':\n    case 'fill':\n    case 'stroke':\n    case 'text':\n    case 'detail':\n    case 'key':\n    case 'tooltip':\n    case 'href':\n      return COMPATIBLE;\n\n    case 'longitude':\n    case 'longitude2':\n    case 'latitude':\n    case 'latitude2':\n      if (type !== QUANTITATIVE) {\n        return {\n          compatible: false,\n          warning: `Channel ${channel} should be used with a quantitative field only, not ${fieldDef.type} field.`\n        };\n      }\n      return COMPATIBLE;\n\n    case 'opacity':\n    case 'fillOpacity':\n    case 'strokeOpacity':\n    case 'strokeWidth':\n    case 'size':\n    case 'x2':\n    case 'y2':\n      if (type === 'nominal' && !fieldDef['sort']) {\n        return {\n          compatible: false,\n          warning: `Channel ${channel} should not be used with an unsorted discrete field.`\n        };\n      }\n      return COMPATIBLE;\n\n    case 'shape':\n      if (!contains(['ordinal', 'nominal', 'geojson'], fieldDef.type)) {\n        return {\n          compatible: false,\n          warning: 'Shape channel should be used with only either discrete or geojson data.'\n        };\n      }\n      return COMPATIBLE;\n\n    case 'order':\n      if (fieldDef.type === 'nominal' && !('sort' in fieldDef)) {\n        return {\n          compatible: false,\n          warning: `Channel order is inappropriate for nominal field, which has no inherent order.`\n        };\n      }\n      return COMPATIBLE;\n  }\n  throw new Error('channelCompatability not implemented for channel ' + channel);\n}\n\nexport function isNumberFieldDef(fieldDef: TypedFieldDef<any>) {\n  return fieldDef.type === 'quantitative' || isBinning(fieldDef.bin);\n}\n\nexport function isTimeFieldDef(fieldDef: TypedFieldDef<any>) {\n  return fieldDef.type === 'temporal' || !!fieldDef.timeUnit;\n}\n\n/**\n * Getting a value associated with a fielddef.\n * Convert the value to Vega expression if applicable (for datetime object, or string if the field def is temporal or has timeUnit)\n */\nexport function valueExpr(\n  v: number | string | boolean | DateTime,\n  {\n    timeUnit,\n    type,\n    time,\n    undefinedIfExprNotRequired\n  }: {\n    timeUnit: TimeUnit;\n    type?: Type;\n    time?: boolean;\n    undefinedIfExprNotRequired?: boolean;\n  }\n): string {\n  let expr;\n  if (isDateTime(v)) {\n    expr = dateTimeExpr(v, true);\n  } else if (isString(v) || isNumber(v)) {\n    if (timeUnit || type === 'temporal') {\n      if (isLocalSingleTimeUnit(timeUnit)) {\n        expr = dateTimeExpr({[timeUnit]: v}, true);\n      } else if (isUtcSingleTimeUnit(timeUnit)) {\n        // FIXME is this really correct?\n        expr = valueExpr(v, {timeUnit: getLocalTimeUnit(timeUnit)});\n      } else {\n        // just pass the string to date function (which will call JS Date.parse())\n        expr = `datetime(${JSON.stringify(v)})`;\n      }\n    }\n  }\n  if (expr) {\n    return time ? `time(${expr})` : expr;\n  }\n  // number or boolean or normal string\n  return undefinedIfExprNotRequired ? undefined : JSON.stringify(v);\n}\n\n/**\n * Standardize value array -- convert each value to Vega expression if applicable\n */\nexport function valueArray(fieldDef: TypedFieldDef<string>, values: (number | string | boolean | DateTime)[]) {\n  const {timeUnit, type} = fieldDef;\n  return values.map(v => {\n    const expr = valueExpr(v, {timeUnit, type, undefinedIfExprNotRequired: true});\n    // return signal for the expression if we need an expression\n    if (expr !== undefined) {\n      return {signal: expr};\n    }\n    // otherwise just return the original value\n    return v;\n  });\n}\n\n/**\n * Checks whether a fieldDef for a particular channel requires a computed bin range.\n */\nexport function binRequiresRange(fieldDef: TypedFieldDef<string>, channel: Channel) {\n  if (!isBinning(fieldDef.bin)) {\n    console.warn('Only use this method with binned field defs');\n    return false;\n  }\n\n  // We need the range only when the user explicitly forces a binned field to be use discrete scale. In this case, bin range is used in axis and legend labels.\n  // We could check whether the axis or legend exists (not disabled) but that seems overkill.\n  return isScaleChannel(channel) && contains(['ordinal', 'nominal'], fieldDef.type);\n}\n","import {isBoolean, isObject} from 'vega-util';\nimport {BinParams} from './bin';\nimport {\n  Channel,\n  COLOR,\n  COLUMN,\n  FILL,\n  FILLOPACITY,\n  OPACITY,\n  ROW,\n  SHAPE,\n  SIZE,\n  STROKE,\n  STROKEOPACITY,\n  STROKEWIDTH\n} from './channel';\nimport {normalizeBin} from './fielddef';\nimport {keys, varName} from './util';\n\nexport interface BaseBin {\n  /**\n   * The number base to use for automatic bin determination (default is base 10).\n   *\n   * __Default value:__ `10`\n   *\n   */\n  base?: number;\n  /**\n   * An exact step size to use between bins.\n   *\n   * __Note:__ If provided, options such as maxbins will be ignored.\n   */\n  step?: number;\n  /**\n   * An array of allowable step sizes to choose from.\n   * @minItems 1\n   */\n  steps?: number[];\n  /**\n   * A minimum allowable step size (particularly useful for integer values).\n   */\n  minstep?: number;\n  /**\n   * Scale factors indicating allowable subdivisions. The default value is [5, 2], which indicates that for base 10 numbers (the default base), the method may consider dividing bin sizes by 5 and/or 2. For example, for an initial step size of 10, the method can check if bin sizes of 2 (= 10/5), 5 (= 10/2), or 1 (= 10/(5*2)) might also satisfy the given constraints.\n   *\n   * __Default value:__ `[5, 2]`\n   *\n   * @minItems 1\n   */\n  divide?: number[];\n  /**\n   * Maximum number of bins.\n   *\n   * __Default value:__ `6` for `row`, `column` and `shape` channels; `10` for other channels\n   *\n   * @minimum 2\n   */\n  maxbins?: number;\n  /**\n   * A value in the binned domain at which to anchor the bins, shifting the bin boundaries if necessary to ensure that a boundary aligns with the anchor value.\n   *\n   * __Default Value:__ the minimum bin extent value\n   */\n  anchor?: number;\n  /**\n   * If true (the default), attempts to make the bin boundaries use human-friendly boundaries, such as multiples of ten.\n   */\n  nice?: boolean;\n}\n\n/**\n * Binning properties or boolean flag for determining whether to bin data or not.\n */\nexport interface BinParams extends BaseBin {\n  /**\n   * A two-element (`[min, max]`) array indicating the range of desired bin values.\n   * @minItems 2\n   * @maxItems 2\n   */\n  extent?: number[]; // VgBinTransform uses a different extent so we need to pull this out.\n\n  /**\n   * When set to true, Vega-Lite treats the input data as already binned.\n   */\n  binned?: boolean;\n}\n\n/**\n * Create a key for the bin configuration. Not for prebinned bin.\n */\nexport function binToString(bin: BinParams | true) {\n  if (isBoolean(bin)) {\n    bin = normalizeBin(bin, undefined);\n  }\n  return (\n    'bin' +\n    keys(bin)\n      .map(p => varName(`_${p}_${bin[p]}`))\n      .join('')\n  );\n}\n\n/**\n * Vega-Lite should bin the data.\n */\nexport function isBinning(bin: BinParams | boolean | 'binned'): bin is BinParams | true {\n  return bin === true || (isBinParams(bin) && !bin.binned);\n}\n\n/**\n * The data is already binned and so Vega-Lite should not bin it again.\n */\nexport function isBinned(bin: BinParams | boolean | 'binned'): bin is 'binned' {\n  return bin === 'binned' || (isBinParams(bin) && bin.binned);\n}\n\nexport function isBinParams(bin: BinParams | boolean | 'binned'): bin is BinParams {\n  return isObject(bin);\n}\n\nexport function autoMaxBins(channel: Channel): number {\n  switch (channel) {\n    case ROW:\n    case COLUMN:\n    case SIZE:\n    case COLOR:\n    case FILL:\n    case STROKE:\n    case STROKEWIDTH:\n    case OPACITY:\n    case FILLOPACITY:\n    case STROKEOPACITY:\n    // Facets and Size shouldn't have too many bins\n    // We choose 6 like shape to simplify the rule\n    case SHAPE:\n      return 6; // Vega's \"shape\" has 6 distinct values\n    default:\n      return 10;\n  }\n}\n","import {toSet} from 'vega-util';\nimport {CompositeMark, CompositeMarkDef} from './compositemark/index';\nimport {contains, flagKeys} from './util';\nimport {BaseMarkConfig} from './vega.schema';\n\nexport namespace Mark {\n  export const AREA: 'area' = 'area';\n  export const BAR: 'bar' = 'bar';\n  export const LINE: 'line' = 'line';\n  export const POINT: 'point' = 'point';\n  export const RECT: 'rect' = 'rect';\n  export const RULE: 'rule' = 'rule';\n  export const TEXT: 'text' = 'text';\n  export const TICK: 'tick' = 'tick';\n  export const TRAIL: 'trail' = 'trail';\n  export const CIRCLE: 'circle' = 'circle';\n  export const SQUARE: 'square' = 'square';\n  export const GEOSHAPE: 'geoshape' = 'geoshape';\n}\n\n/**\n * All types of primitive marks.\n */\nexport type Mark =\n  | typeof Mark.AREA\n  | typeof Mark.BAR\n  | typeof Mark.LINE\n  | typeof Mark.TRAIL\n  | typeof Mark.POINT\n  | typeof Mark.TEXT\n  | typeof Mark.TICK\n  | typeof Mark.RECT\n  | typeof Mark.RULE\n  | typeof Mark.CIRCLE\n  | typeof Mark.SQUARE\n  | typeof Mark.GEOSHAPE;\n\nexport const AREA = Mark.AREA;\nexport const BAR = Mark.BAR;\nexport const LINE = Mark.LINE;\nexport const POINT = Mark.POINT;\nexport const TEXT = Mark.TEXT;\nexport const TICK = Mark.TICK;\nexport const TRAIL = Mark.TRAIL;\nexport const RECT = Mark.RECT;\nexport const RULE = Mark.RULE;\nexport const GEOSHAPE = Mark.GEOSHAPE;\n\nexport const CIRCLE = Mark.CIRCLE;\nexport const SQUARE = Mark.SQUARE;\n\n// Using mapped type to declare index, ensuring we always have all marks when we add more.\nconst MARK_INDEX: {[M in Mark]: 1} = {\n  area: 1,\n  bar: 1,\n  line: 1,\n  point: 1,\n  text: 1,\n  tick: 1,\n  trail: 1,\n  rect: 1,\n  geoshape: 1,\n  rule: 1,\n  circle: 1,\n  square: 1\n};\n\nexport function isMark(m: string): m is Mark {\n  return !!MARK_INDEX[m];\n}\n\nexport function isPathMark(m: Mark | CompositeMark): m is 'line' | 'area' | 'trail' {\n  return contains(['line', 'area', 'trail'], m);\n}\n\nexport const PRIMITIVE_MARKS = flagKeys(MARK_INDEX);\n\nexport interface ColorMixins {\n  /**\n   * Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.\n   *\n   * __Default value:__ <span style=\"color: #4682b4;\">&#9632;</span> `\"#4682b4\"`\n   *\n   * __Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).\n   */\n  color?: string;\n}\n\nexport interface TooltipContent {\n  content: 'encoding' | 'data';\n}\n\nexport interface MarkConfig extends ColorMixins, BaseMarkConfig {\n  // ========== VL-Specific ==========\n\n  /**\n   * Whether the mark's color should be used as fill color instead of stroke color.\n   *\n   * __Default value:__ `false` for `point`, `line` and `rule`; otherwise, `true`.\n   *\n   * __Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).\n   *\n   */\n  filled?: boolean;\n\n  // ========== Overriding Vega ==========\n\n  /**\n   * The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.\n   *\n   * - If `tooltip` is `{\"content\": \"encoding\"}`, then all fields from `encoding` will be used.\n   * - If `tooltip` is `{\"content\": \"data\"}`, then all fields that appear in the highlighted data point will be used.\n   * - If set to `null`, then no tooltip will be used.\n   */\n  tooltip?: string | TooltipContent | null;\n\n  /**\n   * Default size for marks.\n   * - For `point`/`circle`/`square`, this represents the pixel area of the marks. For example: in the case of circles, the radius is determined in part by the square root of the size value.\n   * - For `bar`, this represents the band size of the bar, in pixels.\n   * - For `text`, this represents the font size, in pixels.\n   *\n   * __Default value:__ `30` for point, circle, square marks; `rangeStep` - 1 for bar marks with discrete dimensions; `5` for bar marks with continuous dimensions; `11` for text marks.\n   *\n   * @minimum 0\n   */\n  size?: number;\n}\n\nexport interface BarBinSpacingMixins {\n  /**\n   * Offset between bars for binned field.  Ideal value for this is either 0 (Preferred by statisticians) or 1 (Vega-Lite Default, D3 example style).\n   *\n   * __Default value:__ `1`\n   *\n   * @minimum 0\n   */\n  binSpacing?: number;\n}\n\nexport type AnyMark = CompositeMark | CompositeMarkDef | Mark | MarkDef;\n\nexport function isMarkDef(mark: string | GenericMarkDef<any>): mark is GenericMarkDef<any> {\n  return mark['type'];\n}\n\nconst PRIMITIVE_MARK_INDEX = toSet(PRIMITIVE_MARKS);\n\nexport function isPrimitiveMark(mark: AnyMark): mark is Mark {\n  const markType = isMarkDef(mark) ? mark.type : mark;\n  return markType in PRIMITIVE_MARK_INDEX;\n}\n\nexport const STROKE_CONFIG = [\n  'stroke',\n  'strokeWidth',\n  'strokeDash',\n  'strokeDashOffset',\n  'strokeOpacity',\n  'strokeJoin',\n  'strokeMiterLimit'\n];\n\nexport const FILL_CONFIG = ['fill', 'fillOpacity'];\n\nexport const FILL_STROKE_CONFIG = [].concat(STROKE_CONFIG, FILL_CONFIG);\n\nexport const VL_ONLY_MARK_CONFIG_PROPERTIES: (keyof MarkConfig)[] = ['filled', 'color', 'tooltip'];\n\nexport const VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX: {\n  [k in typeof PRIMITIVE_MARKS[0]]?: (keyof MarkConfigMixins[k])[]\n} = {\n  area: ['line', 'point'],\n  bar: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],\n  line: ['point'],\n  text: ['shortTimeLabels'],\n  tick: ['bandSize', 'thickness']\n};\n\nexport const defaultMarkConfig: MarkConfig = {\n  color: '#4c78a8',\n  tooltip: {content: 'encoding'}\n};\n\nexport interface MarkConfigMixins {\n  /** Mark Config */\n  mark?: MarkConfig;\n\n  // MARK-SPECIFIC CONFIGS\n  /** Area-Specific Config */\n  area?: AreaConfig;\n\n  /** Bar-Specific Config */\n  bar?: BarConfig;\n\n  /** Circle-Specific Config */\n  circle?: MarkConfig;\n\n  /** Line-Specific Config */\n  line?: LineConfig;\n\n  /** Point-Specific Config */\n  point?: MarkConfig;\n\n  /** Rect-Specific Config */\n  rect?: MarkConfig;\n\n  /** Rule-Specific Config */\n  rule?: MarkConfig;\n\n  /** Square-Specific Config */\n  square?: MarkConfig;\n\n  /** Text-Specific Config */\n  text?: TextConfig;\n\n  /** Tick-Specific Config */\n  tick?: TickConfig;\n\n  /** Trail-Specific Config */\n  trail?: LineConfig;\n\n  /** Geoshape-Specific Config */\n  geoshape?: MarkConfig;\n}\n\nexport interface BarConfig extends BarBinSpacingMixins, MarkConfig {\n  /**\n   * The default size of the bars on continuous scales.\n   *\n   * __Default value:__ `5`\n   *\n   * @minimum 0\n   */\n  continuousBandSize?: number;\n\n  /**\n   * The default size of the bars with discrete dimensions.  If unspecified, the default size is  `bandSize-1`,\n   * which provides 1 pixel offset between bars.\n   * @minimum 0\n   */\n  discreteBandSize?: number;\n}\n\nexport type OverlayMarkDef = MarkConfig & MarkDefMixins;\n\nexport interface PointOverlayMixins {\n  /**\n   * A flag for overlaying points on top of line or area marks, or an object defining the properties of the overlayed points.\n   *\n   * - If this property is `\"transparent\"`, transparent points will be used (for enhancing tooltips and selections).\n   *\n   * - If this property is an empty object (`{}`) or `true`, filled points with default properties will be used.\n   *\n   * - If this property is `false`, no points would be automatically added to line or area marks.\n   *\n   * __Default value:__ `false`.\n   */\n  point?: boolean | OverlayMarkDef | 'transparent';\n}\n\nexport interface LineConfig extends MarkConfig, PointOverlayMixins {}\n\nexport interface LineOverlayMixins {\n  /**\n   * A flag for overlaying line on top of area marks, or an object defining the properties of the overlayed lines.\n   *\n   * - If this value is an empty object (`{}`) or `true`, lines with default properties will be used.\n   *\n   * - If this value is `false`, no lines would be automatically added to area marks.\n   *\n   * __Default value:__ `false`.\n   */\n  line?: boolean | OverlayMarkDef;\n}\n\nexport interface AreaConfig extends MarkConfig, PointOverlayMixins, LineOverlayMixins {}\n\nexport interface TickThicknessMixins {\n  /**\n   * Thickness of the tick mark.\n   *\n   * __Default value:__  `1`\n   *\n   * @minimum 0\n   */\n  thickness?: number;\n}\n\nexport interface GenericMarkDef<M> {\n  /**\n   * The mark type. This could a primitive mark type\n   * (one of `\"bar\"`, `\"circle\"`, `\"square\"`, `\"tick\"`, `\"line\"`,\n   * `\"area\"`, `\"point\"`, `\"geoshape\"`, `\"rule\"`, and `\"text\"`)\n   * or a composite mark type (`\"boxplot\"`, `\"errorband\"`, `\"errorbar\"`).\n   */\n  type: M;\n}\n\nexport interface MarkDefMixins {\n  /**\n   * A string or array of strings indicating the name of custom styles to apply to the mark. A style is a named collection of mark property defaults defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles. Any [mark properties](https://vega.github.io/vega-lite/docs/encoding.html#mark-prop) explicitly defined within the `encoding` will override a style default.\n   *\n   * __Default value:__ The mark's name.  For example, a bar mark will have style `\"bar\"` by default.\n   * __Note:__ Any specified style will augment the default style. For example, a bar mark with `\"style\": \"foo\"` will receive from `config.style.bar` and `config.style.foo` (the specified style `\"foo\"` has higher precedence).\n   */\n  style?: string | string[];\n\n  /**\n   * Whether a mark be clipped to the enclosing group’s width and height.\n   */\n  clip?: boolean;\n\n  // Offset properties should not be a part of config\n\n  /**\n   * Offset for x-position.\n   */\n  xOffset?: number;\n\n  /**\n   * Offset for y-position.\n   */\n  yOffset?: number;\n\n  /**\n   * Offset for x2-position.\n   */\n  x2Offset?: number;\n\n  /**\n   * Offset for y2-position.\n   */\n  y2Offset?: number;\n}\n\n// Point/Line OverlayMixins are only for area, line, and trail but we don't want to declare multiple types of MarkDef\n\n// Point/Line OverlayMixins are only for area, line, and trail but we don't want to declare multiple types of MarkDef\nexport interface MarkDef<M extends string | Mark = Mark>\n  extends GenericMarkDef<M>,\n    BarBinSpacingMixins,\n    MarkConfig,\n    PointOverlayMixins,\n    LineOverlayMixins,\n    TickThicknessMixins,\n    MarkDefMixins {}\n\nexport const defaultBarConfig: BarConfig = {\n  binSpacing: 1,\n  continuousBandSize: 5\n};\n\nexport interface TextConfig extends MarkConfig {\n  /**\n   * Whether month names and weekday names should be abbreviated.\n   */\n  shortTimeLabels?: boolean;\n}\n\nexport interface TickConfig extends MarkConfig, TickThicknessMixins {\n  /**\n   * The width of the ticks.\n   *\n   * __Default value:__  3/4 of rangeStep.\n   * @minimum 0\n   */\n  bandSize?: number;\n}\n\nexport const defaultTickConfig: TickConfig = {\n  thickness: 1\n};\n\nexport function getMarkType(m: string | GenericMarkDef<any>) {\n  return isMarkDef(m) ? m.type : m;\n}\n","import {CompositeEncoding, FacetedCompositeEncoding} from '../compositemark/index';\nimport {Encoding} from '../encoding';\nimport {Field} from '../fielddef';\nimport {AnyMark, Mark, MarkDef} from '../mark';\nimport {Projection} from '../projection';\nimport {SelectionDef} from '../selection';\nimport {BaseSpec, DataMixins, LayerUnitMixins} from './base';\nimport {TopLevel} from './toplevel';\n\n/**\n * Base interface for a unit (single-view) specification.\n */\nexport interface GenericUnitSpec<E extends Encoding<any>, M> extends BaseSpec, LayerUnitMixins {\n  /**\n   * A string describing the mark type (one of `\"bar\"`, `\"circle\"`, `\"square\"`, `\"tick\"`, `\"line\"`,\n   * `\"area\"`, `\"point\"`, `\"rule\"`, `\"geoshape\"`, and `\"text\"`) or a [mark definition object](https://vega.github.io/vega-lite/docs/mark.html#mark-def).\n   */\n  mark: M;\n\n  /**\n   * A key-value mapping between encoding channels and definition of fields.\n   */\n  encoding?: E;\n\n  /**\n   * An object defining properties of geographic projection, which will be applied to `shape` path for `\"geoshape\"` marks\n   * and to `latitude` and `\"longitude\"` channels for other marks.\n   */\n  projection?: Projection;\n\n  /**\n   * A key-value mapping between selection names and definitions.\n   */\n  selection?: {[name: string]: SelectionDef};\n}\n\n/**\n * A unit specification without any shortcut/expansion syntax.\n */\nexport type NormalizedUnitSpec = GenericUnitSpec<Encoding<Field>, Mark | MarkDef>;\n\n/**\n * Unit spec that can be normalized/expanded into a layer spec or another unit spec.\n */\nexport type CompositeUnitSpec = GenericUnitSpec<CompositeEncoding, AnyMark>;\n\n/**\n * Unit spec that can have a composite mark and row or column channels (shorthand for a facet spec).\n */\nexport type FacetedCompositeUnitSpec = GenericUnitSpec<FacetedCompositeEncoding, AnyMark>;\n\nexport type TopLevelUnitSpec = TopLevel<FacetedCompositeUnitSpec> & DataMixins;\n\nexport function isUnitSpec(spec: BaseSpec): spec is FacetedCompositeUnitSpec | NormalizedUnitSpec {\n  return !!spec['mark'];\n}\n","import {Config} from '../config';\nimport {GenericMarkDef, getMarkType} from '../mark';\nimport {NonFacetUnitNormalizer, Normalize, NormalizerParams} from '../normalize/base';\nimport {GenericSpec} from '../spec/index';\nimport {GenericLayerSpec, NormalizedLayerSpec} from '../spec/layer';\nimport {GenericUnitSpec, isUnitSpec, NormalizedUnitSpec} from '../spec/unit';\n\nexport type CompositeMarkUnitSpec<M extends string> = GenericUnitSpec<any, M | GenericMarkDef<M>>;\n\nexport class CompositeMarkNormalizer<M extends string> implements NonFacetUnitNormalizer<CompositeMarkUnitSpec<M>> {\n  constructor(\n    public name: string,\n    public run: (\n      spec: CompositeMarkUnitSpec<M>,\n      params: NormalizerParams,\n      normalize: Normalize<\n        // Input of the normalize method\n        GenericUnitSpec<any, any> | GenericLayerSpec<any>,\n        // Output of the normalize method\n        NormalizedLayerSpec | NormalizedUnitSpec\n      >\n    ) => NormalizedLayerSpec\n  ) {}\n\n  public hasMatchingType(spec: GenericSpec<any, any>, config: Config): spec is CompositeMarkUnitSpec<M> {\n    if (isUnitSpec(spec)) {\n      return getMarkType(spec.mark) === this.name;\n    }\n    return false;\n  }\n}\n","import {isArray} from 'vega-util';\nimport {isAggregateOp} from './aggregate';\nimport {isBinning} from './bin';\nimport {Channel, CHANNELS, isChannel, isNonPositionScaleChannel, isSecondaryRangeChannel, supportMark} from './channel';\nimport {Config} from './config';\nimport {\n  binRequiresRange,\n  ChannelDef,\n  ColorFieldDefWithCondition,\n  ColorValueDefWithCondition,\n  Field,\n  FieldDef,\n  FieldDefWithoutScale,\n  getFieldDef,\n  getGuide,\n  getTypedFieldDef,\n  hasConditionalFieldDef,\n  isConditionalDef,\n  isFieldDef,\n  isTypedFieldDef,\n  isValueDef,\n  LatLongFieldDef,\n  normalize,\n  normalizeFieldDef,\n  NumericFieldDefWithCondition,\n  NumericValueDefWithCondition,\n  OrderFieldDef,\n  PositionFieldDef,\n  SecondaryFieldDef,\n  ShapeFieldDefWithCondition,\n  ShapeValueDefWithCondition,\n  StringFieldDefWithCondition,\n  StringValueDefWithCondition,\n  TextFieldDef,\n  TextFieldDefWithCondition,\n  TextValueDefWithCondition,\n  title,\n  TypedFieldDef,\n  ValueDef,\n  vgField\n} from './fielddef';\nimport * as log from './log';\nimport {Mark} from './mark';\nimport {FacetMapping} from './spec/facet';\nimport {getDateTimeComponents} from './timeunit';\nimport {AggregatedFieldDef, BinTransform, TimeUnitTransform} from './transform';\nimport {Type} from './type';\nimport {keys, some} from './util';\n\nexport interface Encoding<F extends Field> {\n  /**\n   * X coordinates of the marks, or width of horizontal `\"bar\"` and `\"area\"`.\n   *\n   * The `value` of this channel can be a number or a string `\"width\"`.\n   */\n  x?: PositionFieldDef<F> | ValueDef<number | 'width'>;\n\n  /**\n   * Y coordinates of the marks, or height of vertical `\"bar\"` and `\"area\"`.\n   *\n   * The `value` of this channel can be a number or a string `\"height\"`.\n   */\n  y?: PositionFieldDef<F> | ValueDef<number | 'height'>;\n\n  /**\n   * X2 coordinates for ranged `\"area\"`, `\"bar\"`, `\"rect\"`, and  `\"rule\"`.\n   *\n   * The `value` of this channel can be a number or a string `\"width\"`.\n   */\n  // TODO: Ham need to add default behavior\n  // `x2` cannot have type as it should have the same type as `x`\n  x2?: SecondaryFieldDef<F> | ValueDef<number | 'width'>;\n\n  /**\n   * Y2 coordinates for ranged `\"area\"`, `\"bar\"`, `\"rect\"`, and  `\"rule\"`.\n   *\n   * The `value` of this channel can be a number or a string `\"height\"`.\n   */\n  // TODO: Ham need to add default behavior\n  // `y2` cannot have type as it should have the same type as `y`\n  y2?: SecondaryFieldDef<F> | ValueDef<number | 'height'>;\n\n  /**\n   * Longitude position of geographically projected marks.\n   */\n  longitude?: LatLongFieldDef<F>;\n\n  /**\n   * Latitude position of geographically projected marks.\n   */\n  latitude?: LatLongFieldDef<F>;\n\n  /**\n   * Longitude-2 position for geographically projected ranged `\"area\"`, `\"bar\"`, `\"rect\"`, and  `\"rule\"`.\n   */\n  // `longitude2` cannot have type as it should have the same type as `longitude`\n  longitude2?: SecondaryFieldDef<F>;\n\n  /**\n   * Latitude-2 position for geographically projected ranged `\"area\"`, `\"bar\"`, `\"rect\"`, and  `\"rule\"`.\n   */\n  // `latitude2` cannot have type as it should have the same type as `latitude`\n  latitude2?: SecondaryFieldDef<F>;\n\n  /**\n   * Color of the marks – either fill or stroke color based on  the `filled` property of mark definition.\n   * By default, `color` represents fill color for `\"area\"`, `\"bar\"`, `\"tick\"`,\n   * `\"text\"`, `\"trail\"`, `\"circle\"`, and `\"square\"` / stroke color for `\"line\"` and `\"point\"`.\n   *\n   * __Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s `color` property.\n   *\n   * _Note:_\n   * 1) For fine-grained control over both fill and stroke colors of the marks, please use the `fill` and `stroke` channels.  If either `fill` or `stroke` channel is specified, `color` channel will be ignored.\n   * 2) See the scale documentation for more information about customizing [color scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme).\n   */\n  color?: ColorFieldDefWithCondition<F> | ColorValueDefWithCondition<F>;\n\n  /**\n   * Fill color of the marks.\n   * __Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s `color` property.\n   *\n   * _Note:_ When using `fill` channel, `color ` channel will be ignored. To customize both fill and stroke, please use `fill` and `stroke` channels (not `fill` and `color`).\n   */\n  fill?: ColorFieldDefWithCondition<F> | ColorValueDefWithCondition<F>;\n\n  /**\n   * Stroke color of the marks.\n   * __Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s `color` property.\n   *\n   * _Note:_ When using `stroke` channel, `color ` channel will be ignored. To customize both stroke and fill, please use `stroke` and `fill` channels (not `stroke` and `color`).\n   */\n\n  stroke?: ColorFieldDefWithCondition<F> | ColorValueDefWithCondition<F>;\n\n  /**\n   * Opacity of the marks.\n   *\n   * __Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s `opacity` property.\n   */\n  opacity?: NumericFieldDefWithCondition<F> | NumericValueDefWithCondition<F>;\n\n  /**\n   * Fill opacity of the marks.\n   *\n   * __Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s `fillOpacity` property.\n   */\n  fillOpacity?: NumericFieldDefWithCondition<F> | NumericValueDefWithCondition<F>;\n\n  /**\n   * Stroke opacity of the marks.\n   *\n   * __Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s `strokeOpacity` property.\n   */\n  strokeOpacity?: NumericFieldDefWithCondition<F> | NumericValueDefWithCondition<F>;\n\n  /**\n   * Stroke width of the marks.\n   *\n   * __Default value:__ If undefined, the default stroke width depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s `strokeWidth` property.\n   */\n  strokeWidth?: NumericFieldDefWithCondition<F> | NumericValueDefWithCondition<F>;\n\n  /**\n   * Size of the mark.\n   * - For `\"point\"`, `\"square\"` and `\"circle\"`, – the symbol size, or pixel area of the mark.\n   * - For `\"bar\"` and `\"tick\"` – the bar and tick's size.\n   * - For `\"text\"` – the text's font size.\n   * - Size is unsupported for `\"line\"`, `\"area\"`, and `\"rect\"`. (Use `\"trail\"` instead of line with varying size)\n   */\n  size?: NumericFieldDefWithCondition<F> | NumericValueDefWithCondition<F>;\n\n  /**\n   * For `point` marks the supported values are\n   * `\"circle\"` (default), `\"square\"`, `\"cross\"`, `\"diamond\"`, `\"triangle-up\"`,\n   * or `\"triangle-down\"`, or else a custom SVG path string.\n   * For `geoshape` marks it should be a field definition of the geojson data\n   *\n   * __Default value:__ If undefined, the default shape depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#point-config)'s `shape` property.\n   */\n  shape?: ShapeFieldDefWithCondition<F> | ShapeValueDefWithCondition<F>;\n  /**\n   * Additional levels of detail for grouping data in aggregate views and\n   * in line, trail, and area marks without mapping data to a specific visual channel.\n   */\n  detail?: FieldDefWithoutScale<F> | FieldDefWithoutScale<F>[];\n\n  /**\n   * A data field to use as a unique key for data binding. When a visualization’s data is updated, the key value will be used to match data elements to existing mark instances. Use a key channel to enable object constancy for transitions over dynamic data.\n   */\n  key?: FieldDefWithoutScale<F>;\n\n  /**\n   * Text of the `text` mark.\n   */\n  text?: TextFieldDefWithCondition<F> | TextValueDefWithCondition<F>;\n\n  /**\n   * The tooltip text to show upon mouse hover.\n   */\n  tooltip?: TextFieldDefWithCondition<F> | TextValueDefWithCondition<F> | TextFieldDef<F>[] | null;\n\n  /**\n   * A URL to load upon mouse click.\n   */\n  href?: StringFieldDefWithCondition<F> | StringValueDefWithCondition<F>;\n\n  /**\n   * Order of the marks.\n   * - For stacked marks, this `order` channel encodes [stack order](https://vega.github.io/vega-lite/docs/stack.html#order).\n   * - For line and trail marks, this `order` channel encodes order of data points in the lines. This can be useful for creating [a connected scatterplot](https://vega.github.io/vega-lite/examples/connected_scatterplot.html).  Setting `order` to `{\"value\": null}` makes the line marks use the original order in the data sources.\n   * - Otherwise, this `order` channel encodes layer order of the marks.\n   *\n   * __Note__: In aggregate plots, `order` field should be `aggregate`d to avoid creating additional aggregation grouping.\n   */\n  order?: OrderFieldDef<F> | OrderFieldDef<F>[] | ValueDef<number>;\n}\n\nexport interface EncodingWithFacet<F extends Field> extends Encoding<F>, FacetMapping<F> {}\n\nexport function channelHasField<F extends Field>(encoding: EncodingWithFacet<F>, channel: Channel): boolean {\n  const channelDef = encoding && encoding[channel];\n  if (channelDef) {\n    if (isArray(channelDef)) {\n      return some(channelDef, fieldDef => !!fieldDef.field);\n    } else {\n      return isFieldDef(channelDef) || hasConditionalFieldDef(channelDef);\n    }\n  }\n  return false;\n}\n\nexport function isAggregate(encoding: EncodingWithFacet<Field>) {\n  return some(CHANNELS, channel => {\n    if (channelHasField(encoding, channel)) {\n      const channelDef = encoding[channel];\n      if (isArray(channelDef)) {\n        return some(channelDef, fieldDef => !!fieldDef.aggregate);\n      } else {\n        const fieldDef = getFieldDef(channelDef);\n        return fieldDef && !!fieldDef.aggregate;\n      }\n    }\n    return false;\n  });\n}\nexport function extractTransformsFromEncoding(oldEncoding: Encoding<Field>, config: Config) {\n  const groupby: string[] = [];\n  const bins: BinTransform[] = [];\n  const timeUnits: TimeUnitTransform[] = [];\n  const aggregate: AggregatedFieldDef[] = [];\n  const encoding: Encoding<string> = {};\n\n  forEach(oldEncoding, (channelDef, channel) => {\n    // Extract potential embedded transformations along with remaining properties\n    if (isFieldDef(channelDef)) {\n      const {field, aggregate: aggOp, timeUnit, bin, ...remaining} = channelDef;\n      if (aggOp || timeUnit || bin) {\n        const guide = getGuide(channelDef);\n        const isTitleDefined = guide && guide.title;\n        const newField = vgField(channelDef, {forAs: true});\n        const newChannelDef = {\n          // Only add title if it doesn't exist\n          ...(isTitleDefined ? [] : {title: title(channelDef, config, {allowDisabling: true})}),\n          ...remaining,\n          // Always overwrite field\n          field: newField\n        };\n        const isPositionChannel: boolean = channel === Channel.X || channel === Channel.Y;\n        if (aggOp && isAggregateOp(aggOp)) {\n          const aggregateEntry: AggregatedFieldDef = {\n            op: aggOp,\n            as: newField\n          };\n          if (field) {\n            aggregateEntry.field = field;\n          }\n          aggregate.push(aggregateEntry);\n        } else if (isTypedFieldDef(channelDef) && isBinning(bin)) {\n          bins.push({bin, field, as: newField});\n          // Add additional groupbys for range and end of bins\n          groupby.push(vgField(channelDef, {binSuffix: 'end'}));\n          if (binRequiresRange(channelDef, channel)) {\n            groupby.push(vgField(channelDef, {binSuffix: 'range'}));\n          }\n          // Create accompanying 'x2' or 'y2' field if channel is 'x' or 'y' respectively\n          if (isPositionChannel) {\n            const secondaryChannel: SecondaryFieldDef<string> = {\n              field: newField + '_end'\n            };\n            encoding[channel + '2'] = secondaryChannel;\n          }\n          newChannelDef['bin'] = 'binned';\n          if (!isSecondaryRangeChannel(channel)) {\n            newChannelDef['type'] = Type.QUANTITATIVE;\n          }\n        } else if (timeUnit) {\n          timeUnits.push({timeUnit, field, as: newField});\n\n          // Add formatting to appropriate property based on the type of channel we're processing\n          const format = getDateTimeComponents(timeUnit, config.axis.shortTimeLabels).join(' ');\n          if (isNonPositionScaleChannel(channel)) {\n            newChannelDef['legend'] = {format, ...newChannelDef['legend']};\n          } else if (isPositionChannel) {\n            newChannelDef['axis'] = {format, ...newChannelDef['axis']};\n          } else if (channel === 'text' || channel === 'tooltip') {\n            newChannelDef['format'] = newChannelDef['format'] || format;\n          }\n        }\n        if (!aggOp) {\n          groupby.push(newField);\n        }\n        // now the field should refer to post-transformed field instead\n        encoding[channel] = newChannelDef;\n      } else {\n        groupby.push(field);\n        encoding[channel] = oldEncoding[channel];\n      }\n    } else {\n      // For value def, just copy\n      encoding[channel] = oldEncoding[channel];\n    }\n  });\n\n  return {\n    bins,\n    timeUnits,\n    aggregate,\n    groupby,\n    encoding\n  };\n}\n\nexport function markChannelCompatible(encoding: Encoding<string>, channel: Channel, mark: Mark) {\n  const markSupported = supportMark(channel, mark);\n  if (!markSupported) {\n    return false;\n  } else if (markSupported === 'binned') {\n    const primaryFieldDef = encoding[channel === 'x2' ? 'x' : 'y'];\n\n    // circle, point, square and tick only support x2/y2 when their corresponding x/y fieldDef\n    // has \"binned\" data and thus need x2/y2 to specify the bin-end field.\n    if (isFieldDef(primaryFieldDef) && isFieldDef(encoding[channel]) && primaryFieldDef.bin === 'binned') {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function normalizeEncoding(encoding: Encoding<string>, mark: Mark): Encoding<string> {\n  return keys(encoding).reduce((normalizedEncoding: Encoding<string>, channel: Channel | string) => {\n    if (!isChannel(channel)) {\n      // Drop invalid channel\n      log.warn(log.message.invalidEncodingChannel(channel));\n      return normalizedEncoding;\n    }\n\n    if (!markChannelCompatible(encoding, channel, mark)) {\n      // Drop unsupported channel\n      log.warn(log.message.incompatibleChannel(channel, mark));\n      return normalizedEncoding;\n    }\n\n    // Drop line's size if the field is aggregated.\n    if (channel === 'size' && mark === 'line') {\n      const fieldDef = getTypedFieldDef(encoding[channel]);\n      if (fieldDef && fieldDef.aggregate) {\n        log.warn(log.message.LINE_WITH_VARYING_SIZE);\n        return normalizedEncoding;\n      }\n    }\n\n    // Drop color if either fill or stroke is specified\n    if (channel === 'color' && ('fill' in encoding || 'stroke' in encoding)) {\n      log.warn(log.message.droppingColor('encoding', {fill: 'fill' in encoding, stroke: 'stroke' in encoding}));\n      return normalizedEncoding;\n    }\n\n    const channelDef = encoding[channel];\n    if (\n      channel === 'detail' ||\n      (channel === 'order' && !isArray(channelDef) && !isValueDef(channelDef)) ||\n      (channel === 'tooltip' && isArray(channelDef))\n    ) {\n      if (channelDef) {\n        // Array of fieldDefs for detail channel (or production rule)\n        normalizedEncoding[channel] = (isArray(channelDef) ? channelDef : [channelDef]).reduce(\n          (defs: FieldDef<string>[], fieldDef: FieldDef<string>) => {\n            if (!isFieldDef(fieldDef)) {\n              log.warn(log.message.emptyFieldDef(fieldDef, channel));\n            } else {\n              defs.push(normalizeFieldDef(fieldDef, channel));\n            }\n            return defs;\n          },\n          []\n        );\n      }\n    } else {\n      if (channel === 'tooltip' && channelDef === null) {\n        // Preserve null so we can use it to disable tooltip\n        normalizedEncoding[channel] = null;\n      } else if (!isFieldDef(channelDef) && !isValueDef(channelDef) && !isConditionalDef(channelDef)) {\n        log.warn(log.message.emptyFieldDef(channelDef, channel));\n        return normalizedEncoding;\n      }\n      normalizedEncoding[channel] = normalize(channelDef as ChannelDef, channel);\n    }\n    return normalizedEncoding;\n  }, {});\n}\n\nexport function isRanged(encoding: EncodingWithFacet<any>) {\n  return encoding && ((!!encoding.x && !!encoding.x2) || (!!encoding.y && !!encoding.y2));\n}\n\nexport function fieldDefs<F extends Field>(encoding: EncodingWithFacet<F>): FieldDef<F>[] {\n  const arr: FieldDef<F>[] = [];\n  for (const channel of keys(encoding)) {\n    if (channelHasField(encoding, channel)) {\n      const channelDef = encoding[channel];\n      (isArray(channelDef) ? channelDef : [channelDef]).forEach(def => {\n        if (isFieldDef(def)) {\n          arr.push(def);\n        } else if (hasConditionalFieldDef(def)) {\n          arr.push(def.condition);\n        }\n      });\n    }\n  }\n  return arr;\n}\n\nexport function forEach<U extends {[k in Channel]?: any}>(\n  mapping: U,\n  f: (cd: ChannelDef, c: Channel) => void,\n  thisArg?: any\n) {\n  if (!mapping) {\n    return;\n  }\n\n  for (const channel of keys(mapping)) {\n    const el = mapping[channel];\n    if (isArray(el)) {\n      el.forEach((channelDef: ChannelDef) => {\n        f.call(thisArg, channelDef, channel);\n      });\n    } else {\n      f.call(thisArg, el, channel);\n    }\n  }\n}\n\nexport function reduce<T, U extends {[k in Channel]?: any}>(\n  mapping: U,\n  f: (acc: any, fd: TypedFieldDef<string>, c: Channel) => U,\n  init: T,\n  thisArg?: any\n) {\n  if (!mapping) {\n    return init;\n  }\n\n  return keys(mapping).reduce((r, channel) => {\n    const map = mapping[channel];\n    if (isArray(map)) {\n      return map.reduce((r1: T, channelDef: ChannelDef) => {\n        return f.call(thisArg, r1, channelDef, channel);\n      }, r);\n    } else {\n      return f.call(thisArg, r, map, channel);\n    }\n  }, init);\n}\n","import {isBoolean, isString} from 'vega-util';\nimport {CompositeMark, CompositeMarkDef} from '.';\nimport {Encoding, fieldDefs} from '../encoding';\nimport {\n  Field,\n  FieldDefBase,\n  FieldDefWithoutScale,\n  isContinuous,\n  isFieldDef,\n  PositionFieldDef,\n  SecondaryFieldDef,\n  TextFieldDef\n} from '../fielddef';\nimport * as log from '../log';\nimport {ColorMixins, GenericMarkDef, isMarkDef, Mark, MarkConfig, MarkDef} from '../mark';\nimport {GenericUnitSpec, NormalizedUnitSpec} from '../spec';\nimport {StandardType} from '../type';\nimport {Orient} from '../vega.schema';\n\nexport type PartsMixins<P extends string> = Partial<Record<P, boolean | MarkConfig>>;\n\nexport type GenericCompositeMarkDef<T> = GenericMarkDef<T> &\n  ColorMixins & {\n    /**\n     * The opacity (value between [0,1]) of the mark.\n     */\n    opacity?: number;\n\n    /**\n     * Whether a composite mark be clipped to the enclosing group’s width and height.\n     */\n    clip?: boolean;\n  };\n\nexport interface CompositeMarkTooltipSummary {\n  /**\n   * The prefix of the field to be shown in tooltip\n   */\n  fieldPrefix: string;\n\n  /**\n   * The title prefix to show, corresponding to the field with field prefix `fieldPrefix`\n   */\n  titlePrefix: string;\n}\n\nexport function getCompositeMarkTooltip(\n  tooltipSummary: CompositeMarkTooltipSummary[],\n  continuousAxisChannelDef: PositionFieldDef<string>,\n  encodingWithoutContinuousAxis: Encoding<string>,\n  withFieldName: boolean = true\n): Encoding<string> {\n  const fiveSummaryTooltip: TextFieldDef<string>[] = tooltipSummary.map(\n    ({fieldPrefix, titlePrefix}): TextFieldDef<string> => ({\n      field: fieldPrefix + continuousAxisChannelDef.field,\n      type: continuousAxisChannelDef.type,\n      title: titlePrefix + (withFieldName ? ' of ' + continuousAxisChannelDef.field : '')\n    })\n  );\n\n  return {\n    tooltip: [\n      ...fiveSummaryTooltip,\n      // need to cast because TextFieldDef support fewer types of bin\n      ...(fieldDefs(encodingWithoutContinuousAxis) as TextFieldDef<string>[])\n    ]\n  };\n}\n\nexport function makeCompositeAggregatePartFactory<P extends PartsMixins<any>>(\n  compositeMarkDef: GenericCompositeMarkDef<any> & P,\n  continuousAxis: 'x' | 'y',\n  continuousAxisChannelDef: PositionFieldDef<string>,\n  sharedEncoding: Encoding<string>,\n  compositeMarkConfig: P\n) {\n  const {scale, axis} = continuousAxisChannelDef;\n\n  return ({\n    partName,\n    mark,\n    positionPrefix,\n    endPositionPrefix = undefined,\n    extraEncoding = {}\n  }: {\n    partName: keyof P;\n    mark: Mark | MarkDef;\n    positionPrefix: string;\n    endPositionPrefix?: string;\n    extraEncoding?: Encoding<string>;\n  }) => {\n    const title =\n      axis && axis.title !== undefined\n        ? undefined\n        : continuousAxisChannelDef.title !== undefined\n        ? continuousAxisChannelDef.title\n        : continuousAxisChannelDef.field;\n\n    return partLayerMixins<P>(compositeMarkDef, partName, compositeMarkConfig, {\n      mark, // TODO better remove this method and just have mark as a parameter of the method\n      encoding: {\n        [continuousAxis]: {\n          field: positionPrefix + '_' + continuousAxisChannelDef.field,\n          type: continuousAxisChannelDef.type,\n          ...(title ? {title} : {}),\n          ...(scale ? {scale} : {}),\n          ...(axis ? {axis} : {})\n        },\n        ...(isString(endPositionPrefix)\n          ? {\n              [continuousAxis + '2']: {\n                field: endPositionPrefix + '_' + continuousAxisChannelDef.field,\n                type: continuousAxisChannelDef.type\n              }\n            }\n          : {}),\n        ...sharedEncoding,\n        ...extraEncoding\n      }\n    });\n  };\n}\n\nexport function partLayerMixins<P extends PartsMixins<any>>(\n  markDef: GenericCompositeMarkDef<any> & P,\n  part: keyof P,\n  compositeMarkConfig: P,\n  partBaseSpec: NormalizedUnitSpec\n): NormalizedUnitSpec[] {\n  const {clip, color, opacity} = markDef;\n\n  const mark = markDef.type;\n\n  if (markDef[part] || (markDef[part] === undefined && compositeMarkConfig[part])) {\n    return [\n      {\n        ...partBaseSpec,\n        mark: {\n          ...(compositeMarkConfig[part] as MarkConfig),\n          ...(clip ? {clip} : {}),\n          ...(color ? {color} : {}),\n          ...(opacity ? {opacity} : {}),\n          ...(isMarkDef(partBaseSpec.mark) ? partBaseSpec.mark : {type: partBaseSpec.mark}),\n          style: `${mark}-${part}`,\n          ...(isBoolean(markDef[part]) ? {} : (markDef[part] as MarkConfig))\n        }\n      }\n    ];\n  }\n  return [];\n}\n\nexport function compositeMarkContinuousAxis<M extends CompositeMark>(\n  spec: GenericUnitSpec<Encoding<string>, CompositeMark | CompositeMarkDef>,\n  orient: Orient,\n  compositeMark: M\n): {\n  continuousAxisChannelDef: PositionFieldDef<string>;\n  continuousAxisChannelDef2: SecondaryFieldDef<string>;\n  continuousAxisChannelDefError: FieldDefWithoutScale<string, StandardType>;\n  continuousAxisChannelDefError2: FieldDefWithoutScale<string, StandardType>;\n  continuousAxis: 'x' | 'y';\n} {\n  const {encoding} = spec;\n  const continuousAxis: 'x' | 'y' = orient === 'vertical' ? 'y' : 'x';\n\n  const continuousAxisChannelDef = encoding[continuousAxis] as PositionFieldDef<string>; // Safe to cast because if x is not continuous fielddef, the orient would not be horizontal.\n  const continuousAxisChannelDef2 = encoding[continuousAxis + '2'] as SecondaryFieldDef<string>;\n  const continuousAxisChannelDefError = encoding[continuousAxis + 'Error'] as FieldDefWithoutScale<string>;\n  const continuousAxisChannelDefError2 = encoding[continuousAxis + 'Error2'] as FieldDefWithoutScale<string>;\n\n  return {\n    continuousAxisChannelDef: filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark),\n    continuousAxisChannelDef2: filterAggregateFromChannelDef(continuousAxisChannelDef2, compositeMark),\n    continuousAxisChannelDefError: filterAggregateFromChannelDef(continuousAxisChannelDefError, compositeMark),\n    continuousAxisChannelDefError2: filterAggregateFromChannelDef(continuousAxisChannelDefError2, compositeMark),\n    continuousAxis\n  };\n}\n\nfunction filterAggregateFromChannelDef<M extends CompositeMark, F extends FieldDefBase<string>>(\n  continuousAxisChannelDef: F,\n  compositeMark: M\n): F {\n  if (isFieldDef(continuousAxisChannelDef) && continuousAxisChannelDef && continuousAxisChannelDef.aggregate) {\n    const {aggregate, ...continuousAxisWithoutAggregate} = continuousAxisChannelDef;\n    if (aggregate !== compositeMark) {\n      log.warn(log.message.errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark));\n    }\n    return continuousAxisWithoutAggregate as F;\n  } else {\n    return continuousAxisChannelDef;\n  }\n}\n\nexport function compositeMarkOrient<M extends CompositeMark>(\n  spec: GenericUnitSpec<Encoding<Field>, CompositeMark | CompositeMarkDef>,\n  compositeMark: M\n): Orient {\n  const {mark, encoding} = spec;\n\n  if (isFieldDef(encoding.x) && isContinuous(encoding.x)) {\n    // x is continuous\n    if (isFieldDef(encoding.y) && isContinuous(encoding.y)) {\n      // both x and y are continuous\n      if (encoding.x.aggregate === undefined && encoding.y.aggregate === compositeMark) {\n        return 'vertical';\n      } else if (encoding.y.aggregate === undefined && encoding.x.aggregate === compositeMark) {\n        return 'horizontal';\n      } else if (encoding.x.aggregate === compositeMark && encoding.y.aggregate === compositeMark) {\n        throw new Error('Both x and y cannot have aggregate');\n      } else {\n        if (isMarkDef(mark) && mark.orient) {\n          return mark.orient;\n        }\n\n        // default orientation = vertical\n        return 'vertical';\n      }\n    }\n\n    // x is continuous but y is not\n    return 'horizontal';\n  } else if (isFieldDef(encoding.y) && isContinuous(encoding.y)) {\n    // y is continuous but x is not\n    return 'vertical';\n  } else {\n    // Neither x nor y is continuous.\n    throw new Error('Need a valid continuous axis for ' + compositeMark + 's');\n  }\n}\n","import {isNumber, isObject} from 'vega-util';\nimport {Config} from '../config';\nimport {Encoding, extractTransformsFromEncoding} from '../encoding';\nimport {PositionFieldDef} from '../fielddef';\nimport * as log from '../log';\nimport {isMarkDef, MarkDef} from '../mark';\nimport {NormalizerParams} from '../normalize';\nimport {GenericUnitSpec, NormalizedLayerSpec, NormalizedUnitSpec} from '../spec';\nimport {AggregatedFieldDef, CalculateTransform, JoinAggregateTransform, Transform} from '../transform';\nimport {Flag, getFirstDefined, keys} from '../util';\nimport {Orient} from '../vega.schema';\nimport {CompositeMarkNormalizer} from './base';\nimport {\n  compositeMarkContinuousAxis,\n  compositeMarkOrient,\n  GenericCompositeMarkDef,\n  getCompositeMarkTooltip,\n  makeCompositeAggregatePartFactory,\n  partLayerMixins,\n  PartsMixins\n} from './common';\n\nexport const BOXPLOT: 'boxplot' = 'boxplot';\nexport type BoxPlot = typeof BOXPLOT;\n\nexport type BoxPlotPart = 'box' | 'median' | 'outliers' | 'rule' | 'ticks';\n\nconst BOXPLOT_PART_INDEX: Flag<BoxPlotPart> = {\n  box: 1,\n  median: 1,\n  outliers: 1,\n  rule: 1,\n  ticks: 1\n};\n\nexport const BOXPLOT_PARTS = keys(BOXPLOT_PART_INDEX);\n\nexport type BoxPlotPartsMixins = PartsMixins<BoxPlotPart>;\n\nexport interface BoxPlotConfig extends BoxPlotPartsMixins {\n  /** Size of the box and median tick of a box plot */\n  size?: number;\n\n  /**\n   * The extent of the whiskers. Available options include:\n   * - `\"min-max\"`: min and max are the lower and upper whiskers respectively.\n   * - A number representing multiple of the interquartile range.  This number will be multiplied by the IQR to determine whisker boundary, which spans from the smallest data to the largest data within the range _[Q1 - k * IQR, Q3 + k * IQR]_ where _Q1_ and _Q3_ are the first and third quartiles while _IQR_ is the interquartile range (_Q3-Q1_).\n   *\n   * __Default value:__ `1.5`.\n   */\n  extent?: 'min-max' | number;\n}\n\nexport type BoxPlotDef = GenericCompositeMarkDef<BoxPlot> &\n  BoxPlotConfig & {\n    /**\n     * Type of the mark.  For box plots, this should always be `\"boxplot\"`.\n     * [boxplot](https://vega.github.io/vega-lite/docs/boxplot.html)\n     */\n    type: BoxPlot;\n\n    /**\n     * Orientation of the box plot.  This is normally automatically determined based on types of fields on x and y channels. However, an explicit `orient` be specified when the orientation is ambiguous.\n     *\n     * __Default value:__ `\"vertical\"`.\n     */\n    orient?: Orient;\n  };\n\nexport interface BoxPlotConfigMixins {\n  /**\n   * Box Config\n   */\n  boxplot?: BoxPlotConfig;\n}\n\nexport const boxPlotNormalizer = new CompositeMarkNormalizer(BOXPLOT, normalizeBoxPlot);\n\nexport function getBoxPlotType(extent: number | 'min-max') {\n  if (isNumber(extent)) {\n    return 'tukey';\n  }\n  // Ham: If we ever want to, we could add another extent syntax `{kIQR: number}` for the original [Q1-k*IQR, Q3+k*IQR] whisker and call this boxPlotType = `kIQR`.  However, I'm not exposing this for now.\n  return extent;\n}\n\nexport function normalizeBoxPlot(\n  spec: GenericUnitSpec<Encoding<string>, BoxPlot | BoxPlotDef>,\n  {config}: NormalizerParams\n): NormalizedLayerSpec {\n  // TODO: use selection\n  const {mark, encoding: _encoding, selection, projection: _p, ...outerSpec} = spec;\n  const markDef: BoxPlotDef = isMarkDef(mark) ? mark : {type: mark};\n\n  // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support\n  if (selection) {\n    log.warn(log.message.selectionNotSupported('boxplot'));\n  }\n\n  const extent = markDef.extent || config.boxplot.extent;\n  const sizeValue = getFirstDefined(markDef.size, config.boxplot.size);\n  const boxPlotType = getBoxPlotType(extent);\n  const {\n    transform,\n    continuousAxisChannelDef,\n    continuousAxis,\n    groupby,\n    encodingWithoutContinuousAxis,\n    ticksOrient\n  } = boxParams(spec, extent, config);\n\n  const {color, size, ...encodingWithoutSizeColorAndContinuousAxis} = encodingWithoutContinuousAxis;\n\n  const makeBoxPlotPart = (sharedEncoding: Encoding<string>) => {\n    return makeCompositeAggregatePartFactory<BoxPlotPartsMixins>(\n      markDef,\n      continuousAxis,\n      continuousAxisChannelDef,\n      sharedEncoding,\n      config.boxplot\n    );\n  };\n\n  const makeBoxPlotExtent = makeBoxPlotPart(encodingWithoutSizeColorAndContinuousAxis);\n  const makeBoxPlotBox = makeBoxPlotPart(encodingWithoutContinuousAxis);\n  const makeBoxPlotMidTick = makeBoxPlotPart({...encodingWithoutSizeColorAndContinuousAxis, ...(size ? {size} : {})});\n\n  const fiveSummaryTooltipEncoding: Encoding<string> = getCompositeMarkTooltip(\n    [\n      {fieldPrefix: boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_', titlePrefix: 'Max'},\n      {fieldPrefix: 'upper_box_', titlePrefix: 'Q3'},\n      {fieldPrefix: 'mid_box_', titlePrefix: 'Median'},\n      {fieldPrefix: 'lower_box_', titlePrefix: 'Q1'},\n      {fieldPrefix: boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_', titlePrefix: 'Min'}\n    ],\n    continuousAxisChannelDef,\n    encodingWithoutContinuousAxis\n  );\n\n  // ## Whisker Layers\n\n  const endTick: MarkDef = {type: 'tick', color: 'black', opacity: 1, orient: ticksOrient};\n  const whiskerTooltipEncoding: Encoding<string> =\n    boxPlotType === 'min-max'\n      ? fiveSummaryTooltipEncoding // for min-max, show five-summary tooltip for whisker\n      : // for tukey / k-IQR, just show upper/lower-whisker\n        getCompositeMarkTooltip(\n          [\n            {fieldPrefix: 'upper_whisker_', titlePrefix: 'Upper Whisker'},\n            {fieldPrefix: 'lower_whisker_', titlePrefix: 'Lower Whisker'}\n          ],\n          continuousAxisChannelDef,\n          encodingWithoutContinuousAxis\n        );\n\n  const whiskerLayers = [\n    ...makeBoxPlotExtent({\n      partName: 'rule',\n      mark: 'rule',\n      positionPrefix: 'lower_whisker',\n      endPositionPrefix: 'lower_box',\n      extraEncoding: whiskerTooltipEncoding\n    }),\n    ...makeBoxPlotExtent({\n      partName: 'rule',\n      mark: 'rule',\n      positionPrefix: 'upper_box',\n      endPositionPrefix: 'upper_whisker',\n      extraEncoding: whiskerTooltipEncoding\n    }),\n    ...makeBoxPlotExtent({\n      partName: 'ticks',\n      mark: endTick,\n      positionPrefix: 'lower_whisker',\n      extraEncoding: whiskerTooltipEncoding\n    }),\n    ...makeBoxPlotExtent({\n      partName: 'ticks',\n      mark: endTick,\n      positionPrefix: 'upper_whisker',\n      extraEncoding: whiskerTooltipEncoding\n    })\n  ];\n\n  // ## Box Layers\n\n  // TODO: support hiding certain mark parts\n  const boxLayers: NormalizedUnitSpec[] = [\n    ...(boxPlotType !== 'tukey' ? whiskerLayers : []),\n    ...makeBoxPlotBox({\n      partName: 'box',\n      mark: {type: 'bar', ...(sizeValue ? {size: sizeValue} : {})},\n      positionPrefix: 'lower_box',\n      endPositionPrefix: 'upper_box',\n      extraEncoding: fiveSummaryTooltipEncoding\n    }),\n    ...makeBoxPlotMidTick({\n      partName: 'median',\n      mark: {\n        type: 'tick',\n        ...(isObject(config.boxplot.median) && config.boxplot.median.color ? {color: config.boxplot.median.color} : {}),\n        ...(sizeValue ? {size: sizeValue} : {}),\n        orient: ticksOrient\n      },\n      positionPrefix: 'mid_box',\n      extraEncoding: fiveSummaryTooltipEncoding\n    })\n  ];\n\n  // ## Filtered Layers\n\n  let filteredLayersMixins: NormalizedUnitSpec | NormalizedLayerSpec;\n\n  if (boxPlotType !== 'min-max') {\n    const lowerBoxExpr = 'datum.lower_box_' + continuousAxisChannelDef.field;\n    const upperBoxExpr = 'datum.upper_box_' + continuousAxisChannelDef.field;\n    const iqrExpr = `(${upperBoxExpr} - ${lowerBoxExpr})`;\n    const lowerWhiskerExpr = `${lowerBoxExpr} - ${extent} * ${iqrExpr}`;\n    const upperWhiskerExpr = `${upperBoxExpr} + ${extent} * ${iqrExpr}`;\n    const fieldExpr = `datum.${continuousAxisChannelDef.field}`;\n\n    const joinaggregateTransform: JoinAggregateTransform = {\n      joinaggregate: boxParamsQuartiles(continuousAxisChannelDef.field),\n      groupby\n    };\n\n    let filteredWhiskerSpec: NormalizedLayerSpec = undefined;\n    if (boxPlotType === 'tukey') {\n      filteredWhiskerSpec = {\n        transform: [\n          {\n            filter: `(${lowerWhiskerExpr} <= ${fieldExpr}) && (${fieldExpr} <= ${upperWhiskerExpr})`\n          },\n          {\n            aggregate: [\n              {\n                op: 'min',\n                field: continuousAxisChannelDef.field,\n                as: 'lower_whisker_' + continuousAxisChannelDef.field\n              },\n              {\n                op: 'max',\n                field: continuousAxisChannelDef.field,\n                as: 'upper_whisker_' + continuousAxisChannelDef.field\n              },\n              // preserve lower_box / upper_box\n              {\n                op: 'min',\n                field: 'lower_box_' + continuousAxisChannelDef.field,\n                as: 'lower_box_' + continuousAxisChannelDef.field\n              },\n              {\n                op: 'max',\n                field: 'upper_box_' + continuousAxisChannelDef.field,\n                as: 'upper_box_' + continuousAxisChannelDef.field\n              }\n            ],\n            groupby\n          }\n        ],\n        layer: whiskerLayers\n      };\n    }\n\n    const outlierLayersMixins = partLayerMixins<BoxPlotPartsMixins>(markDef, 'outliers', config.boxplot, {\n      transform: [{filter: `(${fieldExpr} < ${lowerWhiskerExpr}) || (${fieldExpr} > ${upperWhiskerExpr})`}],\n      mark: 'point',\n      encoding: {\n        [continuousAxis]: {\n          field: continuousAxisChannelDef.field,\n          type: continuousAxisChannelDef.type\n        },\n        ...encodingWithoutSizeColorAndContinuousAxis\n      }\n    })[0];\n\n    if (outlierLayersMixins && filteredWhiskerSpec) {\n      filteredLayersMixins = {\n        transform: [joinaggregateTransform],\n        layer: [outlierLayersMixins, filteredWhiskerSpec]\n      };\n    } else if (outlierLayersMixins) {\n      filteredLayersMixins = outlierLayersMixins;\n      filteredLayersMixins.transform.unshift(joinaggregateTransform);\n    } else if (filteredWhiskerSpec) {\n      filteredLayersMixins = filteredWhiskerSpec;\n      filteredLayersMixins.transform.unshift(joinaggregateTransform);\n    }\n  }\n\n  if (filteredLayersMixins) {\n    // tukey box plot with outliers included\n    return {\n      ...outerSpec,\n      layer: [\n        ...(filteredLayersMixins ? [filteredLayersMixins] : []),\n        {\n          // boxplot\n          transform,\n          layer: boxLayers\n        }\n      ]\n    };\n  }\n  return {\n    ...outerSpec,\n    transform: (outerSpec.transform || []).concat(transform),\n    layer: boxLayers\n  };\n}\n\nfunction boxParamsQuartiles(continousAxisField: string): AggregatedFieldDef[] {\n  return [\n    {\n      op: 'q1',\n      field: continousAxisField,\n      as: 'lower_box_' + continousAxisField\n    },\n    {\n      op: 'q3',\n      field: continousAxisField,\n      as: 'upper_box_' + continousAxisField\n    }\n  ];\n}\n\nfunction boxParams(\n  spec: GenericUnitSpec<Encoding<string>, BoxPlot | BoxPlotDef>,\n  extent: 'min-max' | number,\n  config: Config\n): {\n  transform: Transform[];\n  groupby: string[];\n  continuousAxisChannelDef: PositionFieldDef<string>;\n  continuousAxis: 'x' | 'y';\n  encodingWithoutContinuousAxis: Encoding<string>;\n  ticksOrient: Orient;\n} {\n  const orient = compositeMarkOrient(spec, BOXPLOT);\n  const {continuousAxisChannelDef, continuousAxis} = compositeMarkContinuousAxis(spec, orient, BOXPLOT);\n  const continuousFieldName: string = continuousAxisChannelDef.field;\n\n  const boxPlotType = getBoxPlotType(extent);\n\n  const boxplotSpecificAggregate: AggregatedFieldDef[] = [\n    ...boxParamsQuartiles(continuousFieldName),\n    {\n      op: 'median',\n      field: continuousFieldName,\n      as: 'mid_box_' + continuousFieldName\n    },\n    {\n      op: 'min',\n      field: continuousFieldName,\n      as: (boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_') + continuousFieldName\n    },\n    {\n      op: 'max',\n      field: continuousFieldName,\n      as: (boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_') + continuousFieldName\n    }\n  ];\n\n  const postAggregateCalculates: CalculateTransform[] =\n    boxPlotType === 'min-max' || boxPlotType === 'tukey'\n      ? []\n      : [\n          // This is for the  original k-IQR, which we do not expose\n          {\n            calculate: `datum.upper_box_${continuousFieldName} - datum.lower_box_${continuousFieldName}`,\n            as: 'iqr_' + continuousFieldName\n          },\n          {\n            calculate: `min(datum.upper_box_${continuousFieldName} + datum.iqr_${continuousFieldName} * ${extent}, datum.max_${continuousFieldName})`,\n            as: 'upper_whisker_' + continuousFieldName\n          },\n          {\n            calculate: `max(datum.lower_box_${continuousFieldName} - datum.iqr_${continuousFieldName} * ${extent}, datum.min_${continuousFieldName})`,\n            as: 'lower_whisker_' + continuousFieldName\n          }\n        ];\n\n  const {[continuousAxis]: oldContinuousAxisChannelDef, ...oldEncodingWithoutContinuousAxis} = spec.encoding;\n\n  const {bins, timeUnits, aggregate, groupby, encoding: encodingWithoutContinuousAxis} = extractTransformsFromEncoding(\n    oldEncodingWithoutContinuousAxis,\n    config\n  );\n\n  const ticksOrient: Orient = orient === 'vertical' ? 'horizontal' : 'vertical';\n\n  return {\n    transform: [\n      ...bins,\n      ...timeUnits,\n      {\n        aggregate: [...aggregate, ...boxplotSpecificAggregate],\n        groupby\n      },\n      ...postAggregateCalculates\n    ],\n    groupby,\n    continuousAxisChannelDef,\n    continuousAxis,\n    encodingWithoutContinuousAxis,\n    ticksOrient\n  };\n}\n","import {AggregateOp} from 'vega';\nimport {Config} from '../config';\nimport {Data} from '../data';\nimport {Encoding, extractTransformsFromEncoding} from '../encoding';\nimport {\n  Field,\n  FieldDefWithoutScale,\n  isContinuous,\n  isFieldDef,\n  PositionFieldDef,\n  SecondaryFieldDef,\n  title,\n  ValueDef\n} from '../fielddef';\nimport * as log from '../log';\nimport {isMarkDef, MarkDef} from '../mark';\nimport {NormalizerParams} from '../normalize/index';\nimport {GenericUnitSpec, NormalizedLayerSpec} from '../spec';\nimport {TitleParams} from '../title';\nimport {AggregatedFieldDef, CalculateTransform, Transform} from '../transform';\nimport {Flag, keys, titlecase} from '../util';\nimport {Orient} from '../vega.schema';\nimport {CompositeMarkNormalizer} from './base';\nimport {\n  compositeMarkContinuousAxis,\n  compositeMarkOrient,\n  CompositeMarkTooltipSummary,\n  GenericCompositeMarkDef,\n  getCompositeMarkTooltip,\n  makeCompositeAggregatePartFactory,\n  PartsMixins\n} from './common';\nimport {ErrorBand, ErrorBandDef} from './errorband';\n\nexport const ERRORBAR: 'errorbar' = 'errorbar';\nexport type ErrorBar = typeof ERRORBAR;\n\nexport type ErrorBarExtent = 'ci' | 'iqr' | 'stderr' | 'stdev';\nexport type ErrorBarCenter = 'mean' | 'median';\n\nexport type ErrorBarPart = 'ticks' | 'rule';\n\nexport type ErrorInputType = 'raw' | 'aggregated-upper-lower' | 'aggregated-error';\n\nconst ERRORBAR_PART_INDEX: Flag<ErrorBarPart> = {\n  ticks: 1,\n  rule: 1\n};\n\nexport interface ErrorExtraEncoding<F extends Field> {\n  /**\n   * Error value of x coordinates for error specified `\"errorbar\"` and `\"errorband\"`.\n   */\n  xError?: SecondaryFieldDef<F> | ValueDef<number>;\n\n  /**\n   * Secondary error value of x coordinates for error specified `\"errorbar\"` and `\"errorband\"`.\n   */\n  // `xError2` cannot have type as it should have the same type as `xError`\n  xError2?: SecondaryFieldDef<F> | ValueDef<number>;\n\n  /**\n   * Error value of y coordinates for error specified `\"errorbar\"` and `\"errorband\"`.\n   */\n  yError?: SecondaryFieldDef<F> | ValueDef<number>;\n\n  /**\n   * Secondary error value of y coordinates for error specified `\"errorbar\"` and `\"errorband\"`.\n   */\n  // `yError2` cannot have type as it should have the same type as `yError`\n  yError2?: SecondaryFieldDef<F> | ValueDef<number>;\n}\n\nexport type ErrorEncoding<F extends Field> = Pick<\n  Encoding<F>,\n  'x' | 'y' | 'x2' | 'y2' | 'color' | 'detail' | 'opacity'\n> &\n  ErrorExtraEncoding<F>;\n\nexport const ERRORBAR_PARTS = keys(ERRORBAR_PART_INDEX);\n\nexport type ErrorBarPartsMixins = PartsMixins<ErrorBarPart>;\n\nexport interface ErrorBarConfig extends ErrorBarPartsMixins {\n  /**\n   * The center of the errorbar. Available options include:\n   * - `\"mean\"`: the mean of the data points.\n   * - `\"median\"`: the median of the data points.\n   *\n   * __Default value:__ `\"mean\"`.\n   * @hide\n   */\n\n  // center is not needed right now but will be added back to the schema if future features require it.\n  center?: ErrorBarCenter;\n\n  /**\n   * The extent of the rule. Available options include:\n   * - `\"ci\"`: Extend the rule to the confidence interval of the mean.\n   * - `\"stderr\"`: The size of rule are set to the value of standard error, extending from the mean.\n   * - `\"stdev\"`: The size of rule are set to the value of standard deviation, extending from the mean.\n   * - `\"iqr\"`: Extend the rule to the q1 and q3.\n   *\n   * __Default value:__ `\"stderr\"`.\n   */\n  extent?: ErrorBarExtent;\n}\n\nexport type ErrorBarDef = GenericCompositeMarkDef<ErrorBar> &\n  ErrorBarConfig & {\n    /**\n     * Orientation of the error bar.  This is normally automatically determined, but can be specified when the orientation is ambiguous and cannot be automatically determined.\n     */\n    orient?: Orient;\n  };\n\nexport interface ErrorBarConfigMixins {\n  /**\n   * ErrorBar Config\n   */\n  errorbar?: ErrorBarConfig;\n}\n\nexport const errorBarNormalizer = new CompositeMarkNormalizer(ERRORBAR, normalizeErrorBar);\n\nexport function normalizeErrorBar(\n  spec: GenericUnitSpec<ErrorEncoding<string>, ErrorBar | ErrorBarDef>,\n  {config}: NormalizerParams\n): NormalizedLayerSpec {\n  const {\n    transform,\n    continuousAxisChannelDef,\n    continuousAxis,\n    encodingWithoutContinuousAxis,\n    ticksOrient,\n    markDef,\n    outerSpec,\n    tooltipEncoding\n  } = errorBarParams(spec, ERRORBAR, config);\n\n  const makeErrorBarPart = makeCompositeAggregatePartFactory<ErrorBarPartsMixins>(\n    markDef,\n    continuousAxis,\n    continuousAxisChannelDef,\n    encodingWithoutContinuousAxis,\n    config.errorbar\n  );\n\n  const tick: MarkDef = {type: 'tick', orient: ticksOrient};\n\n  return {\n    ...outerSpec,\n    transform,\n    layer: [\n      ...makeErrorBarPart({\n        partName: 'ticks',\n        mark: tick,\n        positionPrefix: 'lower',\n        extraEncoding: tooltipEncoding\n      }),\n      ...makeErrorBarPart({\n        partName: 'ticks',\n        mark: tick,\n        positionPrefix: 'upper',\n        extraEncoding: tooltipEncoding\n      }),\n      ...makeErrorBarPart({\n        partName: 'rule',\n        mark: 'rule',\n        positionPrefix: 'lower',\n        endPositionPrefix: 'upper',\n        extraEncoding: tooltipEncoding\n      })\n    ]\n  };\n}\n\nfunction errorBarOrientAndInputType(\n  spec: GenericUnitSpec<ErrorEncoding<Field>, ErrorBar | ErrorBand | ErrorBarDef | ErrorBandDef>,\n  compositeMark: ErrorBar | ErrorBand\n): {\n  orient: Orient;\n  inputType: ErrorInputType;\n} {\n  const {encoding} = spec;\n\n  if (errorBarIsInputTypeRaw(encoding)) {\n    return {\n      orient: compositeMarkOrient(spec, compositeMark),\n      inputType: 'raw'\n    };\n  }\n\n  const isTypeAggregatedUpperLower: boolean = errorBarIsInputTypeAggregatedUpperLower(encoding);\n  const isTypeAggregatedError: boolean = errorBarIsInputTypeAggregatedError(encoding);\n  const x = encoding.x;\n  const y = encoding.y;\n\n  if (isTypeAggregatedUpperLower) {\n    // type is aggregated-upper-lower\n\n    if (isTypeAggregatedError) {\n      throw new Error(compositeMark + ' cannot be both type aggregated-upper-lower and aggregated-error');\n    }\n\n    const x2 = encoding.x2;\n    const y2 = encoding.y2;\n\n    if (isFieldDef(x2) && isFieldDef(y2)) {\n      // having both x, x2 and y, y2\n      throw new Error(compositeMark + ' cannot have both x2 and y2');\n    } else if (isFieldDef(x2)) {\n      if (isFieldDef(x) && isContinuous(x)) {\n        // having x, x2 quantitative and field y, y2 are not specified\n        return {orient: 'horizontal', inputType: 'aggregated-upper-lower'};\n      } else {\n        // having x, x2 that are not both quantitative\n        throw new Error('Both x and x2 have to be quantitative in ' + compositeMark);\n      }\n    } else if (isFieldDef(y2)) {\n      // y2 is a FieldDef\n      if (isFieldDef(y) && isContinuous(y)) {\n        // having y, y2 quantitative and field x, x2 are not specified\n        return {orient: 'vertical', inputType: 'aggregated-upper-lower'};\n      } else {\n        // having y, y2 that are not both quantitative\n        throw new Error('Both y and y2 have to be quantitative in ' + compositeMark);\n      }\n    }\n    throw new Error('No ranged axis');\n  } else {\n    // type is aggregated-error\n\n    const xError = encoding.xError;\n    const xError2 = encoding.xError2;\n    const yError = encoding.yError;\n    const yError2 = encoding.yError2;\n\n    if (isFieldDef(xError2) && !isFieldDef(xError)) {\n      // having xError2 without xError\n      throw new Error(compositeMark + ' cannot have xError2 without xError');\n    }\n\n    if (isFieldDef(yError2) && !isFieldDef(yError)) {\n      // having yError2 without yError\n      throw new Error(compositeMark + ' cannot have yError2 without yError');\n    }\n\n    if (isFieldDef(xError) && isFieldDef(yError)) {\n      // having both xError and yError\n      throw new Error(compositeMark + ' cannot have both xError and yError with both are quantiative');\n    } else if (isFieldDef(xError)) {\n      if (isFieldDef(x) && isContinuous(x)) {\n        // having x and xError that are all quantitative\n        return {orient: 'horizontal', inputType: 'aggregated-error'};\n      } else {\n        // having x, xError, and xError2 that are not all quantitative\n        throw new Error('All x, xError, and xError2 (if exist) have to be quantitative');\n      }\n    } else if (isFieldDef(yError)) {\n      if (isFieldDef(y) && isContinuous(y)) {\n        // having y and yError that are all quantitative\n        return {orient: 'vertical', inputType: 'aggregated-error'};\n      } else {\n        // having y, yError, and yError2 that are not all quantitative\n        throw new Error('All y, yError, and yError2 (if exist) have to be quantitative');\n      }\n    }\n    throw new Error('No ranged axis');\n  }\n}\n\nfunction errorBarIsInputTypeRaw(encoding: ErrorEncoding<Field>): boolean {\n  return (\n    (isFieldDef(encoding.x) || isFieldDef(encoding.y)) &&\n    !isFieldDef(encoding.x2) &&\n    !isFieldDef(encoding.y2) &&\n    !isFieldDef(encoding.xError) &&\n    !isFieldDef(encoding.xError2) &&\n    !isFieldDef(encoding.yError) &&\n    !isFieldDef(encoding.yError2)\n  );\n}\n\nfunction errorBarIsInputTypeAggregatedUpperLower(encoding: ErrorEncoding<Field>): boolean {\n  return isFieldDef(encoding.x2) || isFieldDef(encoding.y2);\n}\n\nfunction errorBarIsInputTypeAggregatedError(encoding: ErrorEncoding<Field>): boolean {\n  return (\n    isFieldDef(encoding.xError) ||\n    isFieldDef(encoding.xError2) ||\n    isFieldDef(encoding.yError) ||\n    isFieldDef(encoding.yError2)\n  );\n}\n\nexport function errorBarParams<\n  M extends ErrorBar | ErrorBand,\n  MD extends GenericCompositeMarkDef<M> & (ErrorBarDef | ErrorBandDef)\n>(\n  spec: GenericUnitSpec<ErrorEncoding<string>, M | MD>,\n  compositeMark: M,\n  config: Config\n): {\n  transform: Transform[];\n  groupby: string[];\n  continuousAxisChannelDef: PositionFieldDef<string>;\n  continuousAxis: 'x' | 'y';\n  encodingWithoutContinuousAxis: ErrorEncoding<string>;\n  ticksOrient: Orient;\n  markDef: MD;\n  outerSpec: {\n    data?: Data;\n    title?: string | TitleParams;\n    name?: string;\n    description?: string;\n    transform?: Transform[];\n    width?: number;\n    height?: number;\n  };\n  tooltipEncoding: ErrorEncoding<string>;\n} {\n  // TODO: use selection\n  const {mark, encoding, selection, projection: _p, ...outerSpec} = spec;\n  const markDef: MD = isMarkDef(mark) ? mark : ({type: mark} as MD);\n\n  // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support\n  if (selection) {\n    log.warn(log.message.selectionNotSupported(compositeMark));\n  }\n\n  const {orient, inputType} = errorBarOrientAndInputType(spec, compositeMark);\n  const {\n    continuousAxisChannelDef,\n    continuousAxisChannelDef2,\n    continuousAxisChannelDefError,\n    continuousAxisChannelDefError2,\n    continuousAxis\n  } = compositeMarkContinuousAxis(spec, orient, compositeMark);\n\n  const {\n    errorBarSpecificAggregate,\n    postAggregateCalculates,\n    tooltipSummary,\n    tooltipTitleWithFieldName\n  } = errorBarAggregationAndCalculation(\n    markDef,\n    continuousAxisChannelDef,\n    continuousAxisChannelDef2,\n    continuousAxisChannelDefError,\n    continuousAxisChannelDefError2,\n    inputType,\n    compositeMark,\n    config\n  );\n\n  const {\n    [continuousAxis]: oldContinuousAxisChannelDef,\n    [continuousAxis === 'x' ? 'x2' : 'y2']: oldContinuousAxisChannelDef2,\n    [continuousAxis === 'x' ? 'xError' : 'yError']: oldContinuousAxisChannelDefError,\n    [continuousAxis === 'x' ? 'xError2' : 'yError2']: oldContinuousAxisChannelDefError2,\n    ...oldEncodingWithoutContinuousAxis\n  } = encoding;\n\n  const {\n    bins,\n    timeUnits,\n    aggregate: oldAggregate,\n    groupby: oldGroupBy,\n    encoding: encodingWithoutContinuousAxis\n  } = extractTransformsFromEncoding(oldEncodingWithoutContinuousAxis, config);\n\n  const aggregate: AggregatedFieldDef[] = [...oldAggregate, ...errorBarSpecificAggregate];\n  const groupby: string[] = inputType !== 'raw' ? [] : oldGroupBy;\n\n  const tooltipEncoding: ErrorEncoding<string> = getCompositeMarkTooltip(\n    tooltipSummary,\n    continuousAxisChannelDef,\n    encodingWithoutContinuousAxis,\n    tooltipTitleWithFieldName\n  );\n\n  return {\n    transform: [\n      ...(outerSpec.transform || []),\n      ...bins,\n      ...timeUnits,\n      ...(!aggregate.length ? [] : [{aggregate, groupby}]),\n      ...postAggregateCalculates\n    ],\n    groupby,\n    continuousAxisChannelDef,\n    continuousAxis,\n    encodingWithoutContinuousAxis,\n    ticksOrient: orient === 'vertical' ? 'horizontal' : 'vertical',\n    markDef,\n    outerSpec,\n    tooltipEncoding\n  };\n}\n\nfunction errorBarAggregationAndCalculation<\n  M extends ErrorBar | ErrorBand,\n  MD extends GenericCompositeMarkDef<M> & (ErrorBarDef | ErrorBandDef)\n>(\n  markDef: MD,\n  continuousAxisChannelDef: PositionFieldDef<string>,\n  continuousAxisChannelDef2: SecondaryFieldDef<string>,\n  continuousAxisChannelDefError: FieldDefWithoutScale<string>,\n  continuousAxisChannelDefError2: SecondaryFieldDef<string>,\n  inputType: ErrorInputType,\n  compositeMark: M,\n  config: Config\n): {\n  postAggregateCalculates: CalculateTransform[];\n  errorBarSpecificAggregate: AggregatedFieldDef[];\n  tooltipSummary: CompositeMarkTooltipSummary[];\n  tooltipTitleWithFieldName: boolean;\n} {\n  let errorBarSpecificAggregate: AggregatedFieldDef[] = [];\n  let postAggregateCalculates: CalculateTransform[] = [];\n  const continuousFieldName: string = continuousAxisChannelDef.field;\n\n  let tooltipSummary: CompositeMarkTooltipSummary[];\n  let tooltipTitleWithFieldName = false;\n\n  if (inputType === 'raw') {\n    const center: ErrorBarCenter = markDef.center\n      ? markDef.center\n      : markDef.extent\n      ? markDef.extent === 'iqr'\n        ? 'median'\n        : 'mean'\n      : config.errorbar.center;\n    const extent: ErrorBarExtent = markDef.extent ? markDef.extent : center === 'mean' ? 'stderr' : 'iqr';\n\n    if ((center === 'median') !== (extent === 'iqr')) {\n      log.warn(log.message.errorBarCenterIsUsedWithWrongExtent(center, extent, compositeMark));\n    }\n\n    if (extent === 'stderr' || extent === 'stdev') {\n      errorBarSpecificAggregate = [\n        {op: extent, field: continuousFieldName, as: 'extent_' + continuousFieldName},\n        {op: center, field: continuousFieldName, as: 'center_' + continuousFieldName}\n      ];\n\n      postAggregateCalculates = [\n        {\n          calculate: `datum.center_${continuousFieldName} + datum.extent_${continuousFieldName}`,\n          as: 'upper_' + continuousFieldName\n        },\n        {\n          calculate: `datum.center_${continuousFieldName} - datum.extent_${continuousFieldName}`,\n          as: 'lower_' + continuousFieldName\n        }\n      ];\n\n      tooltipSummary = [\n        {fieldPrefix: 'center_', titlePrefix: titlecase(center)},\n        {fieldPrefix: 'upper_', titlePrefix: getTitlePrefix(center, extent, '+')},\n        {fieldPrefix: 'lower_', titlePrefix: getTitlePrefix(center, extent, '-')}\n      ];\n      tooltipTitleWithFieldName = true;\n    } else {\n      if (markDef.center && markDef.extent) {\n        log.warn(log.message.errorBarCenterIsNotNeeded(markDef.extent, compositeMark));\n      }\n\n      let centerOp: AggregateOp;\n      let lowerExtentOp: AggregateOp;\n      let upperExtentOp: AggregateOp;\n      if (extent === 'ci') {\n        centerOp = 'mean';\n        lowerExtentOp = 'ci0';\n        upperExtentOp = 'ci1';\n      } else {\n        centerOp = 'median';\n        lowerExtentOp = 'q1';\n        upperExtentOp = 'q3';\n      }\n\n      errorBarSpecificAggregate = [\n        {op: lowerExtentOp, field: continuousFieldName, as: 'lower_' + continuousFieldName},\n        {op: upperExtentOp, field: continuousFieldName, as: 'upper_' + continuousFieldName},\n        {op: centerOp, field: continuousFieldName, as: 'center_' + continuousFieldName}\n      ];\n\n      tooltipSummary = [\n        {\n          fieldPrefix: 'upper_',\n          titlePrefix: title({field: continuousFieldName, aggregate: upperExtentOp, type: 'quantitative'}, config, {\n            allowDisabling: false\n          })\n        },\n        {\n          fieldPrefix: 'lower_',\n          titlePrefix: title({field: continuousFieldName, aggregate: lowerExtentOp, type: 'quantitative'}, config, {\n            allowDisabling: false\n          })\n        },\n        {\n          fieldPrefix: 'center_',\n          titlePrefix: title({field: continuousFieldName, aggregate: centerOp, type: 'quantitative'}, config, {\n            allowDisabling: false\n          })\n        }\n      ];\n    }\n  } else {\n    if (markDef.center || markDef.extent) {\n      log.warn(log.message.errorBarCenterAndExtentAreNotNeeded(markDef.center, markDef.extent));\n    }\n\n    if (inputType === 'aggregated-upper-lower') {\n      tooltipSummary = [];\n      postAggregateCalculates = [\n        {calculate: `datum.${continuousAxisChannelDef2.field}`, as: `upper_` + continuousFieldName},\n        {calculate: `datum.${continuousFieldName}`, as: `lower_` + continuousFieldName}\n      ];\n    } else if (inputType === 'aggregated-error') {\n      tooltipSummary = [{fieldPrefix: '', titlePrefix: continuousFieldName}];\n      postAggregateCalculates = [\n        {\n          calculate: `datum.${continuousFieldName} + datum.${continuousAxisChannelDefError.field}`,\n          as: `upper_` + continuousFieldName\n        }\n      ];\n\n      if (continuousAxisChannelDefError2) {\n        postAggregateCalculates.push({\n          calculate: `datum.${continuousFieldName} + datum.${continuousAxisChannelDefError2.field}`,\n          as: `lower_` + continuousFieldName\n        });\n      } else {\n        postAggregateCalculates.push({\n          calculate: `datum.${continuousFieldName} - datum.${continuousAxisChannelDefError.field}`,\n          as: `lower_` + continuousFieldName\n        });\n      }\n    }\n\n    for (const postAggregateCalculate of postAggregateCalculates) {\n      tooltipSummary.push({\n        fieldPrefix: postAggregateCalculate.as.substring(0, 6),\n        titlePrefix: postAggregateCalculate.calculate.replace(new RegExp('datum.', 'g'), '')\n      });\n    }\n  }\n  return {postAggregateCalculates, errorBarSpecificAggregate, tooltipSummary, tooltipTitleWithFieldName};\n}\n\nfunction getTitlePrefix(center: ErrorBarCenter, extent: ErrorBarExtent, operation: '+' | '-'): string {\n  return titlecase(center) + ' ' + operation + ' ' + extent;\n}\n","import {Encoding} from '../encoding';\nimport {Field} from '../fielddef';\nimport * as log from '../log';\nimport {MarkDef} from '../mark';\nimport {NormalizerParams} from '../normalize/index';\nimport {GenericUnitSpec, NormalizedLayerSpec} from '../spec';\nimport {Flag, keys} from '../util';\nimport {Interpolate, Orient} from '../vega.schema';\nimport {CompositeMarkNormalizer} from './base';\nimport {GenericCompositeMarkDef, makeCompositeAggregatePartFactory, PartsMixins} from './common';\nimport {ErrorBarCenter, ErrorBarExtent, errorBarParams, ErrorEncoding} from './errorbar';\n\nexport type ErrorBandUnitSpec<\n  EE = {} // extra encoding parameter (for faceted composite unit spec)\n> = GenericUnitSpec<ErrorEncoding<Field> & EE, ErrorBand | ErrorBandDef>;\n\nexport const ERRORBAND: 'errorband' = 'errorband';\nexport type ErrorBand = typeof ERRORBAND;\n\nexport type ErrorBandPart = 'band' | 'borders';\n\nconst ERRORBAND_PART_INDEX: Flag<ErrorBandPart> = {\n  band: 1,\n  borders: 1\n};\n\nexport const ERRORBAND_PARTS = keys(ERRORBAND_PART_INDEX);\n\nexport type ErrorBandPartsMixins = PartsMixins<ErrorBandPart>;\n\nexport interface ErrorBandConfig extends ErrorBandPartsMixins {\n  /**\n   * The center of the error band. Available options include:\n   * - `\"mean\"`: the mean of the data points.\n   * - `\"median\"`: the median of the data points.\n   *\n   * __Default value:__ `\"mean\"`.\n   * @hide\n   */\n\n  // center is not needed right now but will be added back to the schema if future features require it.\n  center?: ErrorBarCenter;\n\n  /**\n   * The extent of the band. Available options include:\n   * - `\"ci\"`: Extend the band to the confidence interval of the mean.\n   * - `\"stderr\"`: The size of band are set to the value of standard error, extending from the mean.\n   * - `\"stdev\"`: The size of band are set to the value of standard deviation, extending from the mean.\n   * - `\"iqr\"`: Extend the band to the q1 and q3.\n   *\n   * __Default value:__ `\"stderr\"`.\n   */\n  extent?: ErrorBarExtent;\n\n  /**\n   * The line interpolation method for the error band. One of the following:\n   * - `\"linear\"`: piecewise linear segments, as in a polyline.\n   * - `\"linear-closed\"`: close the linear segments to form a polygon.\n   * - `\"step\"`: alternate between horizontal and vertical segments, as in a step function.\n   * - `\"step-before\"`: alternate between vertical and horizontal segments, as in a step function.\n   * - `\"step-after\"`: alternate between horizontal and vertical segments, as in a step function.\n   * - `\"basis\"`: a B-spline, with control point duplication on the ends.\n   * - `\"basis-open\"`: an open B-spline; may not intersect the start or end.\n   * - `\"basis-closed\"`: a closed B-spline, as in a loop.\n   * - `\"cardinal\"`: a Cardinal spline, with control point duplication on the ends.\n   * - `\"cardinal-open\"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\n   * - `\"cardinal-closed\"`: a closed Cardinal spline, as in a loop.\n   * - `\"bundle\"`: equivalent to basis, except the tension parameter is used to straighten the spline.\n   * - `\"monotone\"`: cubic interpolation that preserves monotonicity in y.\n   */\n  interpolate?: Interpolate;\n\n  /**\n   * The tension parameter for the interpolation type of the error band.\n   * @minimum 0\n   * @maximum 1\n   */\n  tension?: number;\n}\n\nexport type ErrorBandDef = GenericCompositeMarkDef<ErrorBand> &\n  ErrorBandConfig & {\n    /**\n     * Orientation of the error band. This is normally automatically determined, but can be specified when the orientation is ambiguous and cannot be automatically determined.\n     */\n    orient?: Orient;\n  };\n\nexport interface ErrorBandConfigMixins {\n  /**\n   * ErrorBand Config\n   */\n  errorband?: ErrorBandConfig;\n}\n\nexport const errorBandNormalizer = new CompositeMarkNormalizer(ERRORBAND, normalizeErrorBand);\n\nexport function normalizeErrorBand(\n  spec: GenericUnitSpec<Encoding<string>, ErrorBand | ErrorBandDef>,\n  {config}: NormalizerParams\n): NormalizedLayerSpec {\n  const {\n    transform,\n    continuousAxisChannelDef,\n    continuousAxis,\n    encodingWithoutContinuousAxis,\n    markDef,\n    outerSpec,\n    tooltipEncoding\n  } = errorBarParams(spec, ERRORBAND, config);\n\n  const makeErrorBandPart = makeCompositeAggregatePartFactory<ErrorBandPartsMixins>(\n    markDef,\n    continuousAxis,\n    continuousAxisChannelDef,\n    encodingWithoutContinuousAxis,\n    config.errorband\n  );\n\n  const is2D = spec.encoding.x !== undefined && spec.encoding.y !== undefined;\n\n  let bandMark: MarkDef = {type: is2D ? 'area' : 'rect'};\n  let bordersMark: MarkDef = {type: is2D ? 'line' : 'rule'};\n  const interpolate = {\n    ...(markDef.interpolate ? {interpolate: markDef.interpolate} : {}),\n    ...(markDef.tension && markDef.interpolate ? {interpolate: markDef.tension} : {})\n  };\n\n  if (is2D) {\n    bandMark = {\n      ...bandMark,\n      ...interpolate\n    };\n    bordersMark = {\n      ...bordersMark,\n      ...interpolate\n    };\n  } else if (markDef.interpolate) {\n    log.warn(log.message.errorBand1DNotSupport('interpolate'));\n  } else if (markDef.tension) {\n    log.warn(log.message.errorBand1DNotSupport('tension'));\n  }\n\n  return {\n    ...outerSpec,\n    transform,\n    layer: [\n      ...makeErrorBandPart({\n        partName: 'band',\n        mark: bandMark,\n        positionPrefix: 'lower',\n        endPositionPrefix: 'upper',\n        extraEncoding: tooltipEncoding\n      }),\n      ...makeErrorBandPart({\n        partName: 'borders',\n        mark: bordersMark,\n        positionPrefix: 'lower',\n        extraEncoding: tooltipEncoding\n      }),\n      ...makeErrorBandPart({\n        partName: 'borders',\n        mark: bordersMark,\n        positionPrefix: 'upper',\n        extraEncoding: tooltipEncoding\n      })\n    ]\n  };\n}\n","import {Encoding} from '../encoding';\nimport {Field} from '../fielddef';\nimport {NormalizerParams} from '../normalize/index';\nimport {GenericUnitSpec, NormalizedLayerSpec} from '../spec';\nimport {FacetMapping} from '../spec/facet';\nimport {keys} from '../util';\nimport {CompositeMarkNormalizer} from './base';\nimport {BOXPLOT, BoxPlot, BOXPLOT_PARTS, BoxPlotConfigMixins, BoxPlotDef, normalizeBoxPlot} from './boxplot';\nimport {\n  ERRORBAND,\n  ErrorBand,\n  ERRORBAND_PARTS,\n  ErrorBandConfigMixins,\n  ErrorBandDef,\n  normalizeErrorBand\n} from './errorband';\nimport {\n  ERRORBAR,\n  ErrorBar,\n  ERRORBAR_PARTS,\n  ErrorBarConfigMixins,\n  ErrorBarDef,\n  ErrorExtraEncoding,\n  normalizeErrorBar\n} from './errorbar';\n\nexport {BoxPlotConfig} from './boxplot';\nexport {ErrorBandConfigMixins} from './errorband';\nexport {ErrorBarConfigMixins} from './errorbar';\n\nexport type CompositeMarkNormalizerRun = (\n  spec: GenericUnitSpec<any, any>,\n  params: NormalizerParams\n) => NormalizedLayerSpec;\n\n/**\n * Registry index for all composite mark's normalizer\n */\nconst compositeMarkRegistry: {\n  [mark: string]: {\n    normalizer: CompositeMarkNormalizer<any>;\n    parts: string[];\n  };\n} = {};\n\nexport function add(mark: string, run: CompositeMarkNormalizerRun, parts: string[]) {\n  const normalizer = new CompositeMarkNormalizer(mark, run);\n  compositeMarkRegistry[mark] = {normalizer, parts};\n}\n\nexport function remove(mark: string) {\n  delete compositeMarkRegistry[mark];\n}\n\nexport type CompositeEncoding = Encoding<Field> & ErrorExtraEncoding<Field>;\nexport type FacetedCompositeEncoding = Encoding<Field> & ErrorExtraEncoding<Field> & FacetMapping<Field>;\n\nexport type CompositeMark = BoxPlot | ErrorBar | ErrorBand;\n\nexport function getAllCompositeMarks() {\n  return keys(compositeMarkRegistry);\n}\n\nexport type CompositeMarkDef = BoxPlotDef | ErrorBarDef | ErrorBandDef;\n\nexport type CompositeAggregate = BoxPlot | ErrorBar | ErrorBand;\n\nexport interface CompositeMarkConfigMixins extends BoxPlotConfigMixins, ErrorBarConfigMixins, ErrorBandConfigMixins {}\n\nadd(BOXPLOT, normalizeBoxPlot, BOXPLOT_PARTS);\nadd(ERRORBAR, normalizeErrorBar, ERRORBAR_PARTS);\nadd(ERRORBAND, normalizeErrorBand, ERRORBAND_PARTS);\n","import {ConditionValueDefMixins, ValueDef} from './fielddef';\nimport {LegendConfig} from './legend';\nimport {VgEncodeChannel} from './vega.schema';\n\nexport interface TitleMixins {\n  /**\n   * A title for the field. If `null`, the title will be removed.\n   *\n   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `\"Sum of Profit\"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `\"Profit (binned)\"`, `\"Transaction Date (year-month)\"`).  Otherwise, the title is simply the field name.\n   *\n   * __Notes__:\n   *\n   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n   *\n   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.\n   */\n  title?: string | null;\n}\n\nexport interface Guide extends TitleMixins {\n  /**\n   * The formatting pattern for labels. This is D3's [number format pattern](https://github.com/d3/d3-format#locale_format) for quantitative fields and D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format) for time field.\n   *\n   * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more information.\n   *\n   * __Default value:__  derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for quantitative fields and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for temporal fields.\n   */\n  format?: string;\n}\nexport interface VlOnlyGuideConfig {\n  /**\n   * Whether month names and weekday names should be abbreviated.\n   *\n   * __Default value:__  `false`\n   */\n  shortTimeLabels?: boolean;\n}\n\nexport type GuideEncodingEntry = {[k in VgEncodeChannel]?: ValueDef & ConditionValueDefMixins};\n\nexport const VL_ONLY_GUIDE_CONFIG: (keyof VlOnlyGuideConfig)[] = ['shortTimeLabels'];\n\nexport const VL_ONLY_LEGEND_CONFIG: (keyof LegendConfig)[] = [\n  'gradientHorizontalMaxLength',\n  'gradientHorizontalMinLength',\n  'gradientVerticalMaxLength',\n  'gradientVerticalMinLength'\n];\n","import {\n  Align,\n  BaseLegend,\n  FontStyle,\n  FontWeight,\n  LabelOverlap,\n  Legend as VgLegend,\n  LegendConfig as VgLegendConfig,\n  LegendOrient,\n  Orientation,\n  SymbolShape,\n  TextBaseline\n} from 'vega';\nimport {DateTime} from './datetime';\nimport {Guide, GuideEncodingEntry, VlOnlyGuideConfig} from './guide';\nimport {Flag, flagKeys} from './util';\nimport {Color, LayoutAlign} from './vega.schema';\n\nexport type LegendConfig = LegendMixins &\n  VlOnlyGuideConfig &\n  VgLegendConfig<\n    number,\n    number,\n    string,\n    Color,\n    FontWeight,\n    FontStyle,\n    Align,\n    TextBaseline,\n    LayoutAlign,\n    LabelOverlap,\n    SymbolShape\n  > & {\n    /**\n     * Max legend length for a vertical gradient when `config.legend.gradientLength` is undefined.\n     *\n     * __Default value:__ `200`\n     */\n    gradientVerticalMaxLength?: number;\n\n    /**\n     * Min legend length for a vertical gradient when `config.legend.gradientLength` is undefined.\n     *\n     * __Default value:__ `100`\n     */\n    gradientVerticalMinLength?: number;\n\n    /**\n     * Max legend length for a horizontal gradient when `config.legend.gradientLength` is undefined.\n     *\n     * __Default value:__ `200`\n     */\n    gradientHorizontalMaxLength?: number;\n\n    /**\n     * Min legend length for a horizontal gradient when `config.legend.gradientLength` is undefined.\n     *\n     * __Default value:__ `100`\n     */\n    gradientHorizontalMinLength?: number;\n\n    /**\n     * The length in pixels of the primary axis of a color gradient. This value corresponds to the height of a vertical gradient or the width of a horizontal gradient.\n     *\n     * __Default value:__ `undefined`.  If `undefined`, the default gradient will be determined based on the following rules:\n     * - For vertical gradients, `clamp(plot_height, gradientVerticalMinLength, gradientVerticalMaxLength)`\n     * - For top-`orient`ed or bottom-`orient`ed horizontal gradients, `clamp(plot_width, gradientHorizontalMinLength, gradientHorizontalMaxLength)`\n     * - For other horizontal gradients, `gradientHorizontalMinLength`\n     *\n     * where `clamp(value, min, max)` restricts _value_ to be between the specified _min_ and _max_.\n     * @minimum 0\n     */\n    gradientLength?: number;\n  };\n\n/**\n * Properties of a legend or boolean flag for determining whether to show it.\n */\nexport interface Legend\n  extends BaseLegend<\n      number,\n      number,\n      string,\n      Color,\n      FontWeight,\n      FontStyle,\n      Align,\n      TextBaseline,\n      LayoutAlign,\n      LabelOverlap,\n      SymbolShape\n    >,\n    LegendMixins,\n    Guide {\n  /**\n   * Mark definitions for custom legend encoding.\n   *\n   * @hide\n   */\n  encoding?: LegendEncoding;\n\n  /**\n   * The desired number of tick values for quantitative legends.\n   */\n  tickCount?: number;\n\n  /**\n   * The minimum desired step between legend ticks, in terms of scale domain values. For example, a value of `1` indicates that ticks should not be less than 1 unit apart. If `tickMinStep` is specified, the `tickCount` value will be adjusted, if necessary, to enforce the minimum step value.\n   *\n   * __Default value__: `undefined`\n   */\n  tickMinStep?: number;\n\n  /**\n   * Explicitly set the visible legend values.\n   */\n  values?: (number | string | boolean | DateTime)[];\n\n  /**\n   * The type of the legend. Use `\"symbol\"` to create a discrete legend and `\"gradient\"` for a continuous color gradient.\n   *\n   * __Default value:__ `\"gradient\"` for non-binned quantitative fields and temporal fields; `\"symbol\"` otherwise.\n   */\n  type?: 'symbol' | 'gradient';\n\n  /**\n   * A non-positive integer indicating z-index of the legend.\n   * If zindex is 0, legend should be drawn behind all chart elements.\n   * To put them in front, use zindex = 1.\n   *\n   * @TJS-type integer\n   * @minimum 0\n   */\n  zindex?: number;\n\n  /**\n   * The direction of the legend, one of `\"vertical\"` or `\"horizontal\"`.\n   *\n   * __Default value:__\n   * - For top-/bottom-`orient`ed legends, `\"horizontal\"`\n   * - For left-/right-`orient`ed legends, `\"vertical\"`\n   * - For top/bottom-left/right-`orient`ed legends, `\"horizontal\"` for gradient legends and `\"vertical\"` for symbol legends.\n   */\n  direction?: Orientation;\n\n  /**\n   * The orientation of the legend, which determines how the legend is positioned within the scene. One of `\"left\"`, `\"right\"`, `\"top-left\"`, `\"top-right\"`, `\"bottom-left\"`, `\"bottom-right\"`, `\"none\"`.\n   *\n   * __Default value:__ `\"right\"`\n   */\n  orient?: LegendOrient;\n}\n\n// Change comments to be Vega-Lite specific\ninterface LegendMixins {\n  /**\n   * The strategy to use for resolving overlap of labels in gradient legends. If `false`, no overlap reduction is attempted. If set to `true` or `\"parity\"`, a strategy of removing every other label is used. If set to `\"greedy\"`, a linear scan of the labels is performed, removing any label that overlaps with the last visible label (this often works better for log-scaled axes).\n   *\n   * __Default value:__ `\"greedy\"` for `log scales otherwise `true`.\n   */\n  labelOverlap?: LabelOverlap;\n}\n\nexport interface LegendEncoding {\n  /**\n   * Custom encoding for the legend container.\n   * This can be useful for creating legend with custom x, y position.\n   */\n  legend?: GuideEncodingEntry;\n\n  /**\n   * Custom encoding for the legend title text mark.\n   */\n  title?: GuideEncodingEntry;\n\n  /**\n   * Custom encoding for legend label text marks.\n   */\n  labels?: GuideEncodingEntry;\n\n  /**\n   * Custom encoding for legend symbol marks.\n   */\n  symbols?: GuideEncodingEntry;\n\n  /**\n   * Custom encoding for legend gradient filled rect marks.\n   */\n  gradient?: GuideEncodingEntry;\n}\n\nexport const defaultLegendConfig: LegendConfig = {\n  gradientHorizontalMaxLength: 200,\n  gradientHorizontalMinLength: 100,\n  gradientVerticalMaxLength: 200,\n  gradientVerticalMinLength: 64 // This is the Vega's minimum.\n};\n\nconst COMMON_LEGEND_PROPERTY_INDEX: Flag<keyof (VgLegend | Legend)> = {\n  clipHeight: 1,\n  columnPadding: 1,\n  columns: 1,\n  cornerRadius: 1,\n  direction: 1,\n  fillColor: 1,\n  format: 1,\n  gradientLength: 1,\n  gradientOpacity: 1,\n  gradientStrokeColor: 1,\n  gradientStrokeWidth: 1,\n  gradientThickness: 1,\n  gridAlign: 1,\n  labelAlign: 1,\n  labelBaseline: 1,\n  labelColor: 1,\n  labelFont: 1,\n  labelFontSize: 1,\n  labelFontStyle: 1,\n  labelFontWeight: 1,\n  labelLimit: 1,\n  labelOffset: 1,\n  labelOpacity: 1,\n  labelOverlap: 1,\n  labelPadding: 1,\n  labelSeparation: 1,\n  offset: 1,\n  orient: 1,\n  padding: 1,\n  rowPadding: 1,\n  strokeColor: 1,\n  symbolFillColor: 1,\n  symbolOffset: 1,\n  symbolOpacity: 1,\n  symbolSize: 1,\n  symbolStrokeColor: 1,\n  symbolStrokeWidth: 1,\n  symbolType: 1,\n  tickCount: 1,\n  tickMinStep: 1,\n  title: 1,\n  titleAlign: 1,\n  titleBaseline: 1,\n  titleColor: 1,\n  titleFont: 1,\n  titleFontSize: 1,\n  titleFontStyle: 1,\n  titleFontWeight: 1,\n  titleLimit: 1,\n  titleOpacity: 1,\n  titlePadding: 1,\n  type: 1,\n  values: 1,\n  zindex: 1\n};\n\nconst VG_LEGEND_PROPERTY_INDEX: Flag<Exclude<keyof VgLegend, 'strokeDash'>> = {\n  ...COMMON_LEGEND_PROPERTY_INDEX,\n  // channel scales\n  opacity: 1,\n  shape: 1,\n  stroke: 1,\n  fill: 1,\n  size: 1,\n  strokeWidth: 1,\n  // encode\n  encode: 1\n};\n\nexport const LEGEND_PROPERTIES = flagKeys(COMMON_LEGEND_PROPERTY_INDEX);\n\nexport const VG_LEGEND_PROPERTIES = flagKeys(VG_LEGEND_PROPERTY_INDEX);\n","import {toSet} from 'vega-util';\nimport {Channel, CHANNELS, isColorChannel} from './channel';\nimport {DateTime} from './datetime';\nimport * as log from './log';\nimport {Type, TYPE_INDEX} from './type';\nimport {contains, Flag, flagKeys, keys} from './util';\nimport {ScaleInterpolate, ScaleInterpolateParams} from './vega.schema';\n\nexport namespace ScaleType {\n  // Continuous - Quantitative\n  export const LINEAR: 'linear' = 'linear';\n  export const LOG: 'log' = 'log';\n  export const POW: 'pow' = 'pow';\n  export const SQRT: 'sqrt' = 'sqrt';\n  export const SYMLOG: 'symlog' = 'symlog';\n  // Continuous - Time\n  export const TIME: 'time' = 'time';\n  export const UTC: 'utc' = 'utc';\n\n  // Discretizing scales\n  export const QUANTILE: 'quantile' = 'quantile';\n  export const QUANTIZE: 'quantize' = 'quantize';\n  export const THRESHOLD: 'threshold' = 'threshold';\n  export const BIN_ORDINAL: 'bin-ordinal' = 'bin-ordinal';\n\n  // Discrete scales\n  export const ORDINAL: 'ordinal' = 'ordinal';\n  export const POINT: 'point' = 'point';\n  export const BAND: 'band' = 'band';\n}\n\nexport type ScaleType =\n  | typeof ScaleType.LINEAR\n  | typeof ScaleType.LOG\n  | typeof ScaleType.POW\n  | typeof ScaleType.SQRT\n  | typeof ScaleType.SYMLOG\n  | typeof ScaleType.TIME\n  | typeof ScaleType.UTC\n  | typeof ScaleType.QUANTILE\n  | typeof ScaleType.QUANTIZE\n  | typeof ScaleType.THRESHOLD\n  | typeof ScaleType.BIN_ORDINAL\n  | typeof ScaleType.ORDINAL\n  | typeof ScaleType.POINT\n  | typeof ScaleType.BAND;\n\n/**\n * Index for scale categories -- only scale of the same categories can be merged together.\n * Current implementation is trying to be conservative and avoid merging scale type that might not work together\n */\nconst SCALE_CATEGORY_INDEX: {\n  // Using Mapped Type to declare type (https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types)\n  [k in ScaleType]: ScaleType | 'numeric' | 'ordinal-position' | 'discretizing'\n} = {\n  linear: 'numeric',\n  log: 'numeric',\n  pow: 'numeric',\n  sqrt: 'numeric',\n  symlog: 'numeric',\n  time: 'time',\n  utc: 'time',\n  ordinal: 'ordinal',\n  'bin-ordinal': 'bin-ordinal', // TODO: should bin-ordinal support merging with other\n  point: 'ordinal-position',\n  band: 'ordinal-position',\n  quantile: 'discretizing',\n  quantize: 'discretizing',\n  threshold: 'discretizing'\n};\n\nexport const SCALE_TYPES = keys(SCALE_CATEGORY_INDEX) as ScaleType[];\n\n/**\n * Whether the two given scale types can be merged together.\n */\nexport function scaleCompatible(scaleType1: ScaleType, scaleType2: ScaleType) {\n  const scaleCategory1 = SCALE_CATEGORY_INDEX[scaleType1];\n  const scaleCategory2 = SCALE_CATEGORY_INDEX[scaleType2];\n  return (\n    scaleCategory1 === scaleCategory2 ||\n    (scaleCategory1 === 'ordinal-position' && scaleCategory2 === 'time') ||\n    (scaleCategory2 === 'ordinal-position' && scaleCategory1 === 'time')\n  );\n}\n\n/**\n * Index for scale precedence -- high score = higher priority for merging.\n */\nconst SCALE_PRECEDENCE_INDEX: {\n  // Using Mapped Type to declare type (https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types)\n  [k in ScaleType]: number\n} = {\n  // numeric\n  linear: 0,\n  log: 1,\n  pow: 1,\n  sqrt: 1,\n  symlog: 1,\n  // time\n  time: 0,\n  utc: 0,\n  // ordinal-position -- these have higher precedence than continuous scales as they support more types of data\n  point: 10,\n  band: 11, // band has higher precedence as it is better for interaction\n  // non grouped types\n  ordinal: 0,\n  'bin-ordinal': 0,\n  quantile: 0,\n  quantize: 0,\n  threshold: 0\n};\n\n/**\n * Return scale categories -- only scale of the same categories can be merged together.\n */\nexport function scaleTypePrecedence(scaleType: ScaleType): number {\n  return SCALE_PRECEDENCE_INDEX[scaleType];\n}\n\nexport const CONTINUOUS_TO_CONTINUOUS_SCALES: ScaleType[] = ['linear', 'log', 'pow', 'sqrt', 'symlog', 'time', 'utc'];\nconst CONTINUOUS_TO_CONTINUOUS_INDEX = toSet(CONTINUOUS_TO_CONTINUOUS_SCALES);\n\nexport const CONTINUOUS_TO_DISCRETE_SCALES: ScaleType[] = ['quantile', 'quantize', 'threshold'];\nconst CONTINUOUS_TO_DISCRETE_INDEX = toSet(CONTINUOUS_TO_DISCRETE_SCALES);\n\nexport const CONTINUOUS_DOMAIN_SCALES: ScaleType[] = CONTINUOUS_TO_CONTINUOUS_SCALES.concat([\n  'quantile',\n  'quantize',\n  'threshold'\n]);\nconst CONTINUOUS_DOMAIN_INDEX = toSet(CONTINUOUS_DOMAIN_SCALES);\n\nexport const DISCRETE_DOMAIN_SCALES: ScaleType[] = ['ordinal', 'bin-ordinal', 'point', 'band'];\nconst DISCRETE_DOMAIN_INDEX = toSet(DISCRETE_DOMAIN_SCALES);\n\nexport const TIME_SCALE_TYPES: ScaleType[] = ['time', 'utc'];\n\nexport function hasDiscreteDomain(type: ScaleType): type is 'ordinal' | 'bin-ordinal' | 'point' | 'band' {\n  return type in DISCRETE_DOMAIN_INDEX;\n}\n\nexport function hasContinuousDomain(\n  type: ScaleType\n): type is 'linear' | 'log' | 'pow' | 'sqrt' | 'symlog' | 'time' | 'utc' | 'quantile' | 'quantize' | 'threshold' {\n  return type in CONTINUOUS_DOMAIN_INDEX;\n}\n\nexport function isContinuousToContinuous(\n  type: ScaleType\n): type is 'linear' | 'log' | 'pow' | 'sqrt' | 'symlog' | 'time' | 'utc' {\n  return type in CONTINUOUS_TO_CONTINUOUS_INDEX;\n}\n\nexport function isContinuousToDiscrete(type: ScaleType): type is 'quantile' | 'quantize' | 'threshold' {\n  return type in CONTINUOUS_TO_DISCRETE_INDEX;\n}\n\nexport type NiceTime = 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year';\n\nexport interface ScaleConfig {\n  /**\n   * If true, rounds numeric output values to integers.\n   * This can be helpful for snapping to the pixel grid.\n   * (Only available for `x`, `y`, and `size` scales.)\n   */\n  round?: boolean;\n\n  /**\n   * If true, values that exceed the data domain are clamped to either the minimum or maximum range value\n   */\n  clamp?: boolean;\n  /**\n   *  Default range step for `x` band and point scales of text marks.\n   *\n   * __Default value:__ `90`\n   *\n   *  @minimum 0\n   */\n  textXRangeStep?: number; // FIXME: consider if we will rename this \"tableColumnWidth\"\n\n  /**\n   * Default range step for band and point scales of (1) the `y` channel\n   * and (2) the `x` channel when the mark is not `text`.\n   *\n   * __Default value:__ `20`\n   *\n   * @minimum 0\n   */\n  rangeStep?: number | null;\n\n  /**\n   * Default inner padding for `x` and `y` band-ordinal scales.\n   *\n   * __Default value:__\n   * - `barBandPaddingInner` for bar marks (`0.1` by default)\n   * - `rectBandPaddingInner` for rect and other marks (`0` by default)\n   *\n   * @minimum 0\n   * @maximum 1\n   */\n  bandPaddingInner?: number;\n\n  /**\n   * Default outer padding for `x` and `y` band-ordinal scales.\n   *\n   * If not specified, by default, band scale's paddingOuter is paddingInner/2.\n   * @minimum 0\n   * @maximum 1\n   */\n  bandPaddingOuter?: number;\n\n  /**\n   * Default inner padding for `x` and `y` band-ordinal scales of `\"bar\"` marks.\n   *\n   * __Default value:__ `0.1`\n   *\n   * @minimum 0\n   * @maximum 1\n   */\n  barBandPaddingInner?: number;\n\n  /**\n   * Default outer padding for `x` and `y` band-ordinal scales of `\"bar\"` marks.\n   * If not specified, by default, band scale's paddingOuter is paddingInner/2.\n   * @minimum 0\n   * @maximum 1\n   */\n  barBandPaddingOuter?: number;\n\n  /**\n   * Default inner padding for `x` and `y` band-ordinal scales of `\"rect\"` marks.\n   *\n   * __Default value:__ `0`\n   *\n   * @minimum 0\n   * @maximum 1\n   */\n  rectBandPaddingInner?: number;\n\n  /**\n   * Default outer padding for `x` and `y` band-ordinal scales of `\"rect\"` marks.\n   * If not specified, by default, band scale's paddingOuter is paddingInner/2.\n   * @minimum 0\n   * @maximum 1\n   */\n  rectBandPaddingOuter?: number;\n\n  /**\n   * Default padding for continuous scales.\n   *\n   * __Default:__ `5` for continuous x-scale of a vertical bar and continuous y-scale of a horizontal bar.; `0` otherwise.\n   *\n   * @minimum 0\n   */\n  continuousPadding?: number;\n\n  /**\n   * Default outer padding for `x` and `y` point-ordinal scales.\n   *\n   * __Default value:__ `0.5`\n   *\n   * @minimum 0\n   * @maximum 1\n   */\n  pointPadding?: number;\n\n  /**\n   * Use the source data range before aggregation as scale domain instead of aggregated data for aggregate axis.\n   *\n   * This is equivalent to setting `domain` to `\"unaggregate\"` for aggregated _quantitative_ fields by default.\n   *\n   * This property only works with aggregate functions that produce values within the raw data domain (`\"mean\"`, `\"average\"`, `\"median\"`, `\"q1\"`, `\"q3\"`, `\"min\"`, `\"max\"`). For other aggregations that produce values outside of the raw data domain (e.g. `\"count\"`, `\"sum\"`), this property is ignored.\n   *\n   * __Default value:__ `false`\n   */\n  useUnaggregatedDomain?: boolean;\n\n  // nice should depends on type (quantitative or temporal), so\n  // let's not make a config.\n\n  // Configs for Range\n\n  /**\n   * The default max value for mapping quantitative fields to bar's size/bandSize.\n   *\n   * If undefined (default), we will use the scale's `rangeStep` - 1.\n   * @minimum 0\n   */\n  maxBandSize?: number;\n\n  /**\n   * The default min value for mapping quantitative fields to bar and tick's size/bandSize scale with zero=false.\n   *\n   * __Default value:__ `2`\n   *\n   * @minimum 0\n   */\n  minBandSize?: number;\n\n  /**\n   * The default max value for mapping quantitative fields to text's size/fontSize.\n   *\n   * __Default value:__ `40`\n   *\n   * @minimum 0\n   */\n  maxFontSize?: number;\n\n  /**\n   * The default min value for mapping quantitative fields to tick's size/fontSize scale with zero=false\n   *\n   * __Default value:__ `8`\n   *\n   * @minimum 0\n   */\n  minFontSize?: number;\n\n  /**\n   * Default minimum opacity for mapping a field to opacity.\n   *\n   * __Default value:__ `0.3`\n   *\n   * @minimum 0\n   * @maximum 1\n   */\n  minOpacity?: number;\n\n  /**\n   * Default max opacity for mapping a field to opacity.\n   *\n   * __Default value:__ `0.8`\n   *\n   * @minimum 0\n   * @maximum 1\n   */\n  maxOpacity?: number;\n\n  /**\n   * Default minimum value for point size scale with zero=false.\n   *\n   * __Default value:__ `9`\n   *\n   * @minimum 0\n   */\n  minSize?: number;\n\n  /**\n   * Default max value for point size scale.\n   * @minimum 0\n   */\n  maxSize?: number;\n\n  /**\n   * Default minimum strokeWidth for the scale of strokeWidth for rule and line marks and of size for trail marks with zero=false.\n   *\n   * __Default value:__ `1`\n   *\n   * @minimum 0\n   */\n  minStrokeWidth?: number;\n\n  /**\n   * Default max strokeWidth for the scale of strokeWidth for rule and line marks and of size for trail marks.\n   *\n   * __Default value:__ `4`\n   *\n   * @minimum 0\n   */\n  maxStrokeWidth?: number;\n\n  /**\n   * Default range cardinality for [`quantile`](https://vega.github.io/vega-lite/docs/scale.html#quantile) scale.\n   *\n   * __Default value:__ `4`\n   *\n   * @minimum 0\n   */\n  quantileCount?: number;\n\n  /**\n   * Default range cardinality for [`quantize`](https://vega.github.io/vega-lite/docs/scale.html#quantize) scale.\n   *\n   * __Default value:__ `4`\n   *\n   * @minimum 0\n   */\n  quantizeCount?: number;\n}\n\nexport const defaultScaleConfig: ScaleConfig = {\n  textXRangeStep: 90,\n  rangeStep: 20,\n  pointPadding: 0.5,\n\n  barBandPaddingInner: 0.1,\n  rectBandPaddingInner: 0,\n\n  minBandSize: 2,\n\n  minFontSize: 8,\n  maxFontSize: 40,\n\n  minOpacity: 0.3,\n  maxOpacity: 0.8,\n\n  // FIXME: revise if these *can* become ratios of rangeStep\n  minSize: 9, // Point size is area. For square point, 9 = 3 pixel ^ 2, not too small!\n\n  minStrokeWidth: 1,\n  maxStrokeWidth: 4,\n  quantileCount: 4,\n  quantizeCount: 4\n};\n\nexport interface SchemeParams {\n  /**\n   * A color scheme name for ordinal scales (e.g., `\"category10\"` or `\"blues\"`).\n   *\n   * For the full list of supported schemes, please refer to the [Vega Scheme](https://vega.github.io/vega/docs/schemes/#reference) reference.\n   */\n  name: string;\n\n  /**\n   * The extent of the color range to use. For example `[0.2, 1]` will rescale the color scheme such that color values in the range _[0, 0.2)_ are excluded from the scheme.\n   */\n  extent?: number[];\n\n  /**\n   * The number of colors to use in the scheme. This can be useful for scale types such as `\"quantize\"`, which use the length of the scale range to determine the number of discrete bins for the scale domain.\n   */\n  count?: number;\n}\n\nexport type SelectionDomain =\n  | {\n      /**\n       * The name of a selection.\n       */\n      selection: string;\n      /**\n       * The field name to extract selected values for, when a selection is [projected](https://vega.github.io/vega-lite/docs/project.html)\n       * over multiple fields or encodings.\n       */\n      field?: string;\n    }\n  | {\n      /**\n       * The name of a selection.\n       */\n      selection: string;\n      /**\n       * The encoding channel to extract selected values for, when a selection is [projected](https://vega.github.io/vega-lite/docs/project.html)\n       * over multiple fields or encodings.\n       */\n      encoding?: string;\n    };\n\nexport type Domain = number[] | string[] | boolean[] | DateTime[] | 'unaggregated' | SelectionDomain;\nexport type Scheme = string | SchemeParams;\n\nexport function isExtendedScheme(scheme: string | SchemeParams): scheme is SchemeParams {\n  return scheme && !!scheme['name'];\n}\n\nexport function isSelectionDomain(domain: Domain): domain is SelectionDomain {\n  return domain && domain['selection'];\n}\n\nexport interface Scale {\n  /**\n   * The type of scale.  Vega-Lite supports the following categories of scale types:\n   *\n   * 1) [**Continuous Scales**](https://vega.github.io/vega-lite/docs/scale.html#continuous) -- mapping continuous domains to continuous output ranges ([`\"linear\"`](https://vega.github.io/vega-lite/docs/scale.html#linear), [`\"pow\"`](https://vega.github.io/vega-lite/docs/scale.html#pow), [`\"sqrt\"`](https://vega.github.io/vega-lite/docs/scale.html#sqrt), [`\"symlog\"`](https://vega.github.io/vega-lite/docs/scale.html#symlog), [`\"log\"`](https://vega.github.io/vega-lite/docs/scale.html#log), [`\"time\"`](https://vega.github.io/vega-lite/docs/scale.html#time), [`\"utc\"`](https://vega.github.io/vega-lite/docs/scale.html#utc).\n   *\n   * 2) [**Discrete Scales**](https://vega.github.io/vega-lite/docs/scale.html#discrete) -- mapping discrete domains to discrete ([`\"ordinal\"`](https://vega.github.io/vega-lite/docs/scale.html#ordinal)) or continuous ([`\"band\"`](https://vega.github.io/vega-lite/docs/scale.html#band) and [`\"point\"`](https://vega.github.io/vega-lite/docs/scale.html#point)) output ranges.\n   *\n   * 3) [**Discretizing Scales**](https://vega.github.io/vega-lite/docs/scale.html#discretizing) -- mapping continuous domains to discrete output ranges [`\"bin-ordinal\"`](https://vega.github.io/vega-lite/docs/scale.html#bin-ordinal), [`\"quantile\"`](https://vega.github.io/vega-lite/docs/scale.html#quantile), [`\"quantize\"`](https://vega.github.io/vega-lite/docs/scale.html#quantize) and [`\"threshold\"`](https://vega.github.io/vega-lite/docs/scale.html#threshold).\n   *\n   * __Default value:__ please see the [scale type table](https://vega.github.io/vega-lite/docs/scale.html#type).\n   */\n  type?: ScaleType;\n\n  /**\n   * Customized domain values.\n   *\n   * For _quantitative_ fields, `domain` can take the form of a two-element array with minimum and maximum values.  [Piecewise scales](https://vega.github.io/vega-lite/docs/scale.html#piecewise) can be created by providing a `domain` with more than two entries.\n   * If the input field is aggregated, `domain` can also be a string value `\"unaggregated\"`, indicating that the domain should include the raw data values prior to the aggregation.\n   *\n   * For _temporal_ fields, `domain` can be a two-element array minimum and maximum values, in the form of either timestamps or the [DateTime definition objects](https://vega.github.io/vega-lite/docs/types.html#datetime).\n   *\n   * For _ordinal_ and _nominal_ fields, `domain` can be an array that lists valid input values.\n   *\n   * The `selection` property can be used to [interactively determine](https://vega.github.io/vega-lite/docs/selection.html#scale-domains) the scale domain.\n   */\n  domain?: number[] | string[] | boolean[] | DateTime[] | 'unaggregated' | SelectionDomain;\n\n  // Hide because we might not really need this.\n  /**\n   * If true, reverses the order of the scale range.\n   * __Default value:__ `false`.\n   *\n   * @hide\n   */\n  reverse?: boolean;\n\n  /**\n   * The range of the scale. One of:\n   *\n   * - A string indicating a [pre-defined named scale range](https://vega.github.io/vega-lite/docs/scale.html#range-config) (e.g., example, `\"symbol\"`, or `\"diverging\"`).\n   *\n   * - For [continuous scales](https://vega.github.io/vega-lite/docs/scale.html#continuous), two-element array indicating  minimum and maximum values, or an array with more than two entries for specifying a [piecewise scale](https://vega.github.io/vega-lite/docs/scale.html#piecewise).\n   *\n   * - For [discrete](https://vega.github.io/vega-lite/docs/scale.html#discrete) and [discretizing](https://vega.github.io/vega-lite/docs/scale.html#discretizing) scales, an array of desired output values.\n   *\n   * __Notes:__\n   *\n   * 1) For color scales you can also specify a color [`scheme`](https://vega.github.io/vega-lite/docs/scale.html#scheme) instead of `range`.\n   *\n   * 2) Any directly specified `range` for `x` and `y` channels will be ignored. Range can be customized via the view's corresponding [size](https://vega.github.io/vega-lite/docs/size.html) (`width` and `height`) or via [range steps and paddings properties](#range-step) for [band](#band) and [point](#point) scales.\n   */\n  range?: number[] | string[] | string;\n\n  // ordinal\n  /**\n   * The distance between the starts of adjacent bands or points in [band](https://vega.github.io/vega-lite/docs/scale.html#band) and [point](https://vega.github.io/vega-lite/docs/scale.html#point) scales.\n   *\n   * If `rangeStep` is `null` or if the view contains the scale's corresponding [size](https://vega.github.io/vega-lite/docs/size.html) (`width` for `x` scales and `height` for `y` scales), `rangeStep` will be automatically determined to fit the size of the view.\n   *\n   * __Default value:__  derived the [scale config](https://vega.github.io/vega-lite/docs/config.html#scale-config)'s `textXRangeStep` (`90` by default) for x-scales of `text` marks and `rangeStep` (`21` by default) for x-scales of other marks and y-scales.\n   *\n   * __Warning__: If `rangeStep` is `null` and the cardinality of the scale's domain is higher than `width` or `height`, the rangeStep might become less than one pixel and the mark might not appear correctly.\n   *\n   * @minimum 0\n   */\n  rangeStep?: number | null;\n\n  /**\n   * A string indicating a color [scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme) name (e.g., `\"category10\"` or `\"blues\"`) or a [scheme parameter object](https://vega.github.io/vega-lite/docs/scale.html#scheme-params).\n   *\n   * Discrete color schemes may be used with [discrete](https://vega.github.io/vega-lite/docs/scale.html#discrete) or [discretizing](https://vega.github.io/vega-lite/docs/scale.html#discretizing) scales. Continuous color schemes are intended for use with color scales.\n   *\n   * For the full list of supported schemes, please refer to the [Vega Scheme](https://vega.github.io/vega/docs/schemes/#reference) reference.\n   */\n  scheme?: string | SchemeParams;\n\n  /**\n   * An array of bin boundaries over the scale domain. If provided, axes and legends will use the bin boundaries to inform the choice of tick marks and text labels.\n   */\n  bins?: number[];\n\n  /**\n   * If `true`, rounds numeric output values to integers. This can be helpful for snapping to the pixel grid.\n   *\n   * __Default value:__ `false`.\n   */\n  round?: boolean;\n\n  /**\n   * For _[continuous](https://vega.github.io/vega-lite/docs/scale.html#continuous)_ scales, expands the scale domain to accommodate the specified number of pixels on each of the scale range. The scale range must represent pixels for this parameter to function as intended. Padding adjustment is performed prior to all other adjustments, including the effects of the zero, nice, domainMin, and domainMax properties.\n   *\n   * For _[band](https://vega.github.io/vega-lite/docs/scale.html#band)_ scales, shortcut for setting `paddingInner` and `paddingOuter` to the same value.\n   *\n   * For _[point](https://vega.github.io/vega-lite/docs/scale.html#point)_ scales, alias for `paddingOuter`.\n   *\n   * __Default value:__ For _continuous_ scales, derived from the [scale config](https://vega.github.io/vega-lite/docs/scale.html#config)'s `continuousPadding`.\n   * For _band and point_ scales, see `paddingInner` and `paddingOuter`.\n   *\n   * @minimum 0\n   */\n  padding?: number;\n\n  /**\n   * The inner padding (spacing) within each band step of band scales, as a fraction of the step size. This value must lie in the range [0,1].\n   *\n   * For point scale, this property is invalid as point scales do not have internal band widths (only step sizes between bands).\n   *\n   * __Default value:__ derived from the [scale config](https://vega.github.io/vega-lite/docs/scale.html#config)'s `bandPaddingInner`.\n   *\n   * @minimum 0\n   * @maximum 1\n   */\n  paddingInner?: number;\n\n  /**\n   * The outer padding (spacing) at the ends of the range of band and point scales,\n   * as a fraction of the step size. This value must lie in the range [0,1].\n   *\n   * __Default value:__ derived from the [scale config](https://vega.github.io/vega-lite/docs/scale.html#config)'s `bandPaddingOuter` for band scales and `pointPadding` for point scales.\n   *\n   * @minimum 0\n   * @maximum 1\n   */\n  paddingOuter?: number;\n\n  // typical\n  /**\n   * If `true`, values that exceed the data domain are clamped to either the minimum or maximum range value\n   *\n   * __Default value:__ derived from the [scale config](https://vega.github.io/vega-lite/docs/config.html#scale-config)'s `clamp` (`true` by default).\n   */\n  clamp?: boolean;\n\n  /**\n   * Extending the domain so that it starts and ends on nice round values. This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value. Nicing is useful if the domain is computed from data and may be irregular. For example, for a domain of _[0.201479…, 0.996679…]_, a nice domain might be _[0.2, 1.0]_.\n   *\n   * For quantitative scales such as linear, `nice` can be either a boolean flag or a number. If `nice` is a number, it will represent a desired tick count. This allows greater control over the step size used to extend the bounds, guaranteeing that the returned ticks will exactly cover the domain.\n   *\n   * For temporal fields with time and utc scales, the `nice` value can be a string indicating the desired time interval. Legal values are `\"millisecond\"`, `\"second\"`, `\"minute\"`, `\"hour\"`, `\"day\"`, `\"week\"`, `\"month\"`, and `\"year\"`. Alternatively, `time` and `utc` scales can accept an object-valued interval specifier of the form `{\"interval\": \"month\", \"step\": 3}`, which includes a desired number of interval steps. Here, the domain would snap to quarter (Jan, Apr, Jul, Oct) boundaries.\n   *\n   * __Default value:__ `true` for unbinned _quantitative_ fields; `false` otherwise.\n   *\n   */\n  nice?: boolean | number | NiceTime | {interval: string; step: number};\n\n  /**\n   * The logarithm base of the `log` scale (default `10`).\n   */\n  base?: number;\n\n  /**\n   * The exponent of the `pow` scale.\n   */\n  exponent?: number;\n\n  /**\n   * A constant determining the slope of the symlog function around zero. Only used for `symlog` scales.\n   *\n   * __Default value:__ `1`\n   */\n  constant?: number;\n\n  /**\n   * If `true`, ensures that a zero baseline value is included in the scale domain.\n   *\n   * __Default value:__ `true` for x and y channels if the quantitative field is not binned and no custom `domain` is provided; `false` otherwise.\n   *\n   * __Note:__ Log, time, and utc scales do not support `zero`.\n   */\n  zero?: boolean;\n\n  /**\n   * The interpolation method for range values. By default, a general interpolator for numbers, dates, strings and colors (in HCL space) is used. For color ranges, this property allows interpolation in alternative color spaces. Legal values include `rgb`, `hsl`, `hsl-long`, `lab`, `hcl`, `hcl-long`, `cubehelix` and `cubehelix-long` ('-long' variants use longer paths in polar coordinate spaces). If object-valued, this property accepts an object with a string-valued _type_ property and an optional numeric _gamma_ property applicable to rgb and cubehelix interpolators. For more, see the [d3-interpolate documentation](https://github.com/d3/d3-interpolate).\n   *\n   * * __Default value:__ `hcl`\n   */\n  interpolate?: ScaleInterpolate | ScaleInterpolateParams;\n}\n\nconst SCALE_PROPERTY_INDEX: Flag<keyof Scale> = {\n  type: 1,\n  domain: 1,\n  range: 1,\n  rangeStep: 1,\n  scheme: 1,\n  bins: 1,\n  // Other properties\n  reverse: 1,\n  round: 1,\n  // quantitative / time\n  clamp: 1,\n  nice: 1,\n  // quantitative\n  base: 1,\n  exponent: 1,\n  constant: 1,\n  interpolate: 1,\n  zero: 1, // zero depends on domain\n  // band/point\n  padding: 1,\n  paddingInner: 1,\n  paddingOuter: 1\n};\n\nexport const SCALE_PROPERTIES = flagKeys(SCALE_PROPERTY_INDEX);\n\nconst {\n  type,\n  domain,\n  range,\n  rangeStep,\n  scheme,\n  ...NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX\n} = SCALE_PROPERTY_INDEX;\n\nexport const NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES = flagKeys(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX);\n\nexport const SCALE_TYPE_INDEX = generateScaleTypeIndex();\n\nexport function scaleTypeSupportProperty(scaleType: ScaleType, propName: keyof Scale) {\n  switch (propName) {\n    case 'type':\n    case 'domain':\n    case 'reverse':\n    case 'range':\n      return true;\n    case 'scheme':\n    case 'interpolate':\n      return !contains(['point', 'band', 'identity'], scaleType);\n    case 'bins':\n      return !contains(['point', 'band', 'identity', 'ordinal'], scaleType);\n    case 'round':\n      return isContinuousToContinuous(scaleType) || scaleType === 'band' || scaleType === 'point';\n    case 'padding':\n      return isContinuousToContinuous(scaleType) || contains(['point', 'band'], scaleType);\n    case 'paddingOuter':\n    case 'rangeStep':\n      return contains(['point', 'band'], scaleType);\n    case 'paddingInner':\n      return scaleType === 'band';\n    case 'clamp':\n      return isContinuousToContinuous(scaleType);\n    case 'nice':\n      return isContinuousToContinuous(scaleType) || scaleType === 'quantize' || scaleType === 'threshold';\n    case 'exponent':\n      return scaleType === 'pow';\n    case 'base':\n      return scaleType === 'log';\n    case 'constant':\n      return scaleType === 'symlog';\n    case 'zero':\n      return (\n        hasContinuousDomain(scaleType) &&\n        !contains(\n          [\n            'log', // log scale cannot have zero value\n            'time',\n            'utc', // zero is not meaningful for time\n            'threshold', // threshold requires custom domain so zero does not matter\n            'quantile' // quantile depends on distribution so zero does not matter\n          ],\n          scaleType\n        )\n      );\n  }\n  /* istanbul ignore next: should never reach here*/\n  throw new Error(`Invalid scale property ${propName}.`);\n}\n\n/**\n * Returns undefined if the input channel supports the input scale property name\n */\nexport function channelScalePropertyIncompatability(channel: Channel, propName: keyof Scale): string {\n  switch (propName) {\n    case 'interpolate':\n    case 'scheme':\n      if (!isColorChannel(channel)) {\n        return log.message.cannotUseScalePropertyWithNonColor(channel);\n      }\n      return undefined;\n    case 'type':\n    case 'bins':\n    case 'domain':\n    case 'range':\n    case 'base':\n    case 'exponent':\n    case 'constant':\n    case 'nice':\n    case 'padding':\n    case 'paddingInner':\n    case 'paddingOuter':\n    case 'rangeStep':\n    case 'reverse':\n    case 'round':\n    case 'clamp':\n    case 'zero':\n      return undefined; // GOOD!\n  }\n  /* istanbul ignore next: it should never reach here */\n  throw new Error(`Invalid scale property \"${propName}\".`);\n}\n\nexport function scaleTypeSupportDataType(specifiedType: ScaleType, fieldDefType: Type): boolean {\n  if (contains([Type.ORDINAL, Type.NOMINAL], fieldDefType)) {\n    return specifiedType === undefined || hasDiscreteDomain(specifiedType);\n  } else if (fieldDefType === Type.TEMPORAL) {\n    return contains([ScaleType.TIME, ScaleType.UTC, undefined], specifiedType);\n  } else if (fieldDefType === Type.QUANTITATIVE) {\n    return contains(\n      [\n        ScaleType.LOG,\n        ScaleType.POW,\n        ScaleType.SQRT,\n        ScaleType.SYMLOG,\n        ScaleType.QUANTILE,\n        ScaleType.QUANTIZE,\n        ScaleType.THRESHOLD,\n        ScaleType.LINEAR,\n        undefined\n      ],\n      specifiedType\n    );\n  }\n\n  return true;\n}\n\nexport function channelSupportScaleType(channel: Channel, scaleType: ScaleType): boolean {\n  switch (channel) {\n    case Channel.X:\n    case Channel.Y:\n      return isContinuousToContinuous(scaleType) || contains(['band', 'point'], scaleType);\n    case Channel.SIZE: // TODO: size and opacity can support ordinal with more modification\n    case Channel.STROKEWIDTH:\n    case Channel.OPACITY:\n    case Channel.FILLOPACITY:\n    case Channel.STROKEOPACITY:\n      // Although it generally doesn't make sense to use band with size and opacity,\n      // it can also work since we use band: 0.5 to get midpoint.\n      return (\n        isContinuousToContinuous(scaleType) ||\n        isContinuousToDiscrete(scaleType) ||\n        contains(['band', 'point'], scaleType)\n      );\n    case Channel.COLOR:\n    case Channel.FILL:\n    case Channel.STROKE:\n      return scaleType !== 'band'; // band does not make sense with color\n    case Channel.SHAPE:\n      return scaleType === 'ordinal'; // shape = lookup only\n  }\n  /* istanbul ignore next: it should never reach here */\n  return false;\n}\n\nexport function getSupportedScaleType(channel: Channel, fieldDefType: Type) {\n  return SCALE_TYPE_INDEX[generateScaleTypeIndexKey(channel, fieldDefType)];\n}\n\nexport interface ScaleTypeIndex {\n  [channel: string]: ScaleType[];\n}\n\n// generates ScaleTypeIndex where keys are encoding channels and values are list of valid ScaleTypes\nfunction generateScaleTypeIndex() {\n  const index: ScaleTypeIndex = {};\n  for (const channel of CHANNELS) {\n    for (const fieldDefType of keys(TYPE_INDEX)) {\n      for (const scaleType of SCALE_TYPES) {\n        const key = generateScaleTypeIndexKey(channel, fieldDefType);\n        if (channelSupportScaleType(channel, scaleType) && scaleTypeSupportDataType(scaleType, fieldDefType)) {\n          index[key] = index[key] || [];\n          index[key].push(scaleType);\n        }\n      }\n    }\n  }\n  return index;\n}\n\nfunction generateScaleTypeIndexKey(channel: Channel, fieldDefType: Type) {\n  return channel + '_' + fieldDefType;\n}\n","import {Binding} from 'vega';\nimport {SingleDefChannel} from './channel';\nimport {DateTime} from './datetime';\nimport {EventStream} from './vega.schema';\n\nexport const SELECTION_ID = '_vgsid_';\nexport type SelectionType = 'single' | 'multi' | 'interval';\nexport type SelectionResolution = 'global' | 'union' | 'intersect';\n\nexport type SelectionInit = boolean | number | string | DateTime;\nexport type SelectionInitArray = boolean[] | number[] | string[] | DateTime[];\nexport interface SelectionInitMapping {\n  [key: string]: SelectionInit;\n}\n\nexport interface SelectionInitArrayMapping {\n  [key: string]: SelectionInitArray;\n}\n\nexport interface BaseSelectionDef {\n  /**\n   * A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection.\n   * For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).\n   */\n  on?: EventStream;\n  /**\n   * With layered and multi-view displays, a strategy that determines how\n   * selections' data queries are resolved when applied in a filter transform,\n   * conditional encoding rule, or scale domain.\n   *\n   */\n  resolve?: SelectionResolution;\n\n  // TODO(https://github.com/vega/vega-lite/issues/2596).\n  // predicate?: string;\n  // domain?: SelectionDomain;\n\n  // Transforms\n\n  /**\n   * An array of encoding channels. The corresponding data field values\n   * must match for a data tuple to fall within the selection.\n   */\n  encodings?: SingleDefChannel[];\n\n  /**\n   * An array of field names whose values must match for a data tuple to\n   * fall within the selection.\n   */\n  fields?: string[];\n\n  /**\n   * By default, all data values are considered to lie within an empty selection.\n   * When set to `none`, empty selections contain no data values.\n   */\n  empty?: 'all' | 'none';\n}\n\nexport interface SingleSelectionConfig extends BaseSelectionDef {\n  /**\n   * Establish a two-way binding between a single selection and input elements\n   * (also known as dynamic query widgets). A binding takes the form of\n   * Vega's [input element binding definition](https://vega.github.io/vega/docs/signals/#bind)\n   * or can be a mapping between projected field/encodings and binding definitions.\n   *\n   * See the [bind transform](https://vega.github.io/vega-lite/docs/bind.html) documentation for more information.\n   */\n  bind?: Binding | {[key: string]: Binding};\n\n  /**\n   * When true, an invisible voronoi diagram is computed to accelerate discrete\n   * selection. The data value _nearest_ the mouse cursor is added to the selection.\n   *\n   * See the [nearest transform](https://vega.github.io/vega-lite/docs/nearest.html) documentation for more information.\n   */\n  nearest?: boolean;\n\n  /**\n   * Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/project.html) and initial values.\n   */\n  init?: SelectionInitMapping;\n}\n\nexport interface MultiSelectionConfig extends BaseSelectionDef {\n  /**\n   * Controls whether data values should be toggled or only ever inserted into\n   * multi selections. Can be `true`, `false` (for insertion only), or a\n   * [Vega expression](https://vega.github.io/vega/docs/expressions/).\n   *\n   * __Default value:__ `true`, which corresponds to `event.shiftKey` (i.e.,\n   * data values are toggled when a user interacts with the shift-key pressed).\n   *\n   * See the [toggle transform](https://vega.github.io/vega-lite/docs/toggle.html) documentation for more information.\n   */\n  toggle?: string | boolean;\n\n  /**\n   * When true, an invisible voronoi diagram is computed to accelerate discrete\n   * selection. The data value _nearest_ the mouse cursor is added to the selection.\n   *\n   * See the [nearest transform](https://vega.github.io/vega-lite/docs/nearest.html) documentation for more information.\n   */\n  nearest?: boolean;\n\n  /**\n   * Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/project.html) and an initial\n   * value (or array of values).\n   */\n  init?: SelectionInitMapping | SelectionInitMapping[];\n}\n\nexport interface BrushConfig {\n  /**\n   * The fill color of the interval mark.\n   *\n   * __Default value:__ `#333333`\n   *\n   */\n  fill?: string;\n  /**\n   * The fill opacity of the interval mark (a value between 0 and 1).\n   *\n   * __Default value:__ `0.125`\n   */\n  fillOpacity?: number;\n  /**\n   * The stroke color of the interval mark.\n   *\n   * __Default value:__ `#ffffff`\n   */\n  stroke?: string;\n  /**\n   * The stroke opacity of the interval mark (a value between 0 and 1).\n   */\n  strokeOpacity?: number;\n  /**\n   * The stroke width of the interval mark.\n   */\n  strokeWidth?: number;\n  /**\n   * An array of alternating stroke and space lengths,\n   * for creating dashed or dotted lines.\n   */\n  strokeDash?: number[];\n  /**\n   * The offset (in pixels) with which to begin drawing the stroke dash array.\n   */\n  strokeDashOffset?: number;\n}\n\nexport interface IntervalSelectionConfig extends BaseSelectionDef {\n  /**\n   * When truthy, allows a user to interactively move an interval selection\n   * back-and-forth. Can be `true`, `false` (to disable panning), or a\n   * [Vega event stream definition](https://vega.github.io/vega/docs/event-streams/)\n   * which must include a start and end event to trigger continuous panning.\n   *\n   * __Default value:__ `true`, which corresponds to\n   * `[mousedown, window:mouseup] > window:mousemove!` which corresponds to\n   * clicks and dragging within an interval selection to reposition it.\n   */\n  translate?: string | boolean;\n\n  /**\n   * When truthy, allows a user to interactively resize an interval selection.\n   * Can be `true`, `false` (to disable zooming), or a [Vega event stream\n   * definition](https://vega.github.io/vega/docs/event-streams/). Currently,\n   * only `wheel` events are supported.\n   *\n   *\n   * __Default value:__ `true`, which corresponds to `wheel!`.\n   */\n  zoom?: string | boolean;\n\n  /**\n   * Establishes a two-way binding between the interval selection and the scales\n   * used within the same view. This allows a user to interactively pan and\n   * zoom the view.\n   */\n  bind?: 'scales';\n\n  /**\n   * An interval selection also adds a rectangle mark to depict the\n   * extents of the interval. The `mark` property can be used to customize the\n   * appearance of the mark.\n   */\n  mark?: BrushConfig;\n\n  /**\n   * Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/project.html) and arrays of\n   * initial values.\n   */\n  init?: SelectionInitArrayMapping;\n}\n\nexport interface SingleSelection extends SingleSelectionConfig {\n  type: 'single';\n}\n\nexport interface MultiSelection extends MultiSelectionConfig {\n  type: 'multi';\n}\n\nexport interface IntervalSelection extends IntervalSelectionConfig {\n  type: 'interval';\n}\n\nexport type SelectionDef = SingleSelection | MultiSelection | IntervalSelection;\n\nexport function isIntervalSelection(s: SelectionDef): s is IntervalSelection {\n  return s.type === 'interval';\n}\n\nexport interface SelectionConfig {\n  /**\n   * The default definition for a [`single`](https://vega.github.io/vega-lite/docs/selection.html#type) selection. All properties and transformations\n   *  for a single selection definition (except `type`) may be specified here.\n   *\n   * For instance, setting `single` to `{\"on\": \"dblclick\"}` populates single selections on double-click by default.\n   */\n  single?: SingleSelectionConfig;\n  /**\n   * The default definition for a [`multi`](https://vega.github.io/vega-lite/docs/selection.html#type) selection. All properties and transformations\n   * for a multi selection definition (except `type`) may be specified here.\n   *\n   * For instance, setting `multi` to `{\"toggle\": \"event.altKey\"}` adds additional values to\n   * multi selections when clicking with the alt-key pressed by default.\n   */\n  multi?: MultiSelectionConfig;\n  /**\n   * The default definition for an [`interval`](https://vega.github.io/vega-lite/docs/selection.html#type) selection. All properties and transformations\n   * for an interval selection definition (except `type`) may be specified here.\n   *\n   * For instance, setting `interval` to `{\"translate\": false}` disables the ability to move\n   * interval selections by default.\n   */\n  interval?: IntervalSelectionConfig;\n}\n\nexport const defaultConfig: SelectionConfig = {\n  single: {\n    on: 'click',\n    fields: [SELECTION_ID],\n    resolve: 'global',\n    empty: 'all'\n  },\n  multi: {\n    on: 'click',\n    fields: [SELECTION_ID],\n    toggle: 'event.shiftKey',\n    resolve: 'global',\n    empty: 'all'\n  },\n  interval: {\n    on: '[mousedown, window:mouseup] > window:mousemove!',\n    encodings: ['x', 'y'],\n    translate: '[mousedown, window:mouseup] > window:mousemove!',\n    zoom: 'wheel!',\n    mark: {fill: '#333', fillOpacity: 0.125, stroke: 'white'},\n    resolve: 'global'\n  }\n};\n","import {Align, BaseTitle, FontStyle, FontWeight, TextBaseline, TextEncodeEntry, TitleAnchor, TitleFrame} from 'vega';\nimport {BaseMarkConfig, Color} from './vega.schema';\ntype BaseTitleNoSignals = BaseTitle<\n  number,\n  string,\n  Color,\n  FontWeight,\n  FontStyle,\n  Align,\n  TextBaseline,\n  TitleFrame,\n  TitleAnchor\n>;\n\nexport type TitleConfig = BaseTitleNoSignals;\n\nexport interface TitleBase extends BaseTitleNoSignals {\n  /**\n   * The anchor position for placing the title. One of `\"start\"`, `\"middle\"`, or `\"end\"`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title.\n   *\n   * __Default value:__ `\"middle\"` for [single](https://vega.github.io/vega-lite/docs/spec.html) and [layered](https://vega.github.io/vega-lite/docs/layer.html) views.\n   * `\"start\"` for other composite views.\n   *\n   * __Note:__ [For now](https://github.com/vega/vega-lite/issues/2875), `anchor` is only customizable only for [single](https://vega.github.io/vega-lite/docs/spec.html) and [layered](https://vega.github.io/vega-lite/docs/layer.html) views.  For other composite views, `anchor` is always `\"start\"`.\n   */\n  anchor?: TitleAnchor;\n\n  /**\n   * A [mark style property](https://vega.github.io/vega-lite/docs/config.html#style) to apply to the title text mark.\n   *\n   * __Default value:__ `\"group-title\"`.\n   */\n  style?: string | string[];\n\n  /**\n   * \tThe integer z-index indicating the layering of the title group relative to other axis, mark and legend groups.\n   *\n   * __Default value:__ `0`.\n   *\n   * @TJS-type integer\n   * @minimum 0\n   */\n  zindex?: number;\n\n  /**\n   * Mark definitions for custom axis encoding.\n   *\n   * @hide\n   */\n  encoding?: TextEncodeEntry;\n}\n\nexport interface TitleParams extends TitleBase {\n  /**\n   * The title text.\n   */\n  text: string;\n}\n\nexport function extractTitleConfig(\n  titleConfig: TitleConfig\n): {\n  mark: BaseMarkConfig;\n  nonMark: BaseTitleNoSignals;\n} {\n  const {\n    // These are non-mark title config that need to be hardcoded\n    anchor,\n    frame,\n    offset,\n    orient,\n    // color needs to be redirect to fill\n    color,\n    // The rest are mark config.\n    ...titleMarkConfig\n  } = titleConfig;\n\n  const mark: BaseMarkConfig = {\n    ...titleMarkConfig,\n    ...(color ? {fill: color} : {})\n  };\n\n  const nonMark: BaseTitleNoSignals = {\n    ...(anchor ? {anchor} : {}),\n    ...(frame ? {frame} : {}),\n    ...(offset ? {offset} : {}),\n    ...(orient ? {orient} : {})\n  };\n\n  return {mark, nonMark};\n}\n","import {isObject} from 'vega-util';\nimport {AxisConfigMixins} from './axis';\nimport {CompositeMarkConfigMixins, getAllCompositeMarks} from './compositemark';\nimport {VL_ONLY_GUIDE_CONFIG, VL_ONLY_LEGEND_CONFIG} from './guide';\nimport {HeaderConfig} from './header';\nimport {defaultLegendConfig, LegendConfig} from './legend';\nimport * as mark from './mark';\nimport {\n  Mark,\n  MarkConfigMixins,\n  PRIMITIVE_MARKS,\n  VL_ONLY_MARK_CONFIG_PROPERTIES,\n  VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX\n} from './mark';\nimport {ProjectionConfig} from './projection';\nimport {defaultScaleConfig, ScaleConfig} from './scale';\nimport {defaultConfig as defaultSelectionConfig, SelectionConfig} from './selection';\nimport {BaseViewBackground} from './spec/base';\nimport {TopLevelProperties} from './spec/toplevel';\nimport {StackOffset} from './stack';\nimport {extractTitleConfig, TitleConfig} from './title';\nimport {duplicate, keys, mergeDeep} from './util';\nimport {BaseMarkConfig, SchemeConfig} from './vega.schema';\n\nexport interface ViewConfig extends BaseViewBackground {\n  /**\n   * The default width of the single plot or each plot in a trellis plot when the visualization has a continuous (non-ordinal) x-scale or ordinal x-scale with `rangeStep` = `null`.\n   *\n   * __Default value:__ `200`\n   *\n   */\n  width?: number;\n\n  /**\n   * The default height of the single plot or each plot in a trellis plot when the visualization has a continuous (non-ordinal) y-scale with `rangeStep` = `null`.\n   *\n   * __Default value:__ `200`\n   *\n   */\n  height?: number;\n\n  /**\n   * Whether the view should be clipped.\n   */\n  clip?: boolean;\n}\n\nexport const defaultViewConfig: ViewConfig = {\n  width: 200,\n  height: 200\n};\n\nexport type RangeConfigValue = (number | string)[] | SchemeConfig | {step: number};\n\nexport type RangeConfig = RangeConfigProps & {[key: string]: RangeConfigValue};\n\nexport interface RangeConfigProps {\n  /**\n   * Default range for _nominal_ (categorical) fields.\n   */\n  category?: string[] | SchemeConfig;\n\n  /**\n   * Default range for diverging _quantitative_ fields.\n   */\n  diverging?: string[] | SchemeConfig;\n\n  /**\n   * Default range for _quantitative_ heatmaps.\n   */\n  heatmap?: string[] | SchemeConfig;\n\n  /**\n   * Default range for _ordinal_ fields.\n   */\n  ordinal?: string[] | SchemeConfig;\n\n  /**\n   * Default range for _quantitative_ and _temporal_ fields.\n   */\n  ramp?: string[] | SchemeConfig;\n\n  /**\n   * Default range palette for the `shape` channel.\n   */\n  symbol?: string[];\n}\n\nexport function isVgScheme(rangeConfig: string[] | SchemeConfig): rangeConfig is SchemeConfig {\n  return rangeConfig && !!rangeConfig['scheme'];\n}\n\nexport interface VLOnlyConfig {\n  /**\n   * Default axis and legend title for count fields.\n   *\n   * __Default value:__ `'Count of Records`.\n   *\n   * @type {string}\n   */\n  countTitle?: string;\n\n  /**\n   * Defines how Vega-Lite should handle invalid values (`null` and `NaN`).\n   * - If set to `\"filter\"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).\n   * - If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.\n   */\n  invalidValues?: 'filter' | null;\n\n  /**\n   * Defines how Vega-Lite generates title for fields.  There are three possible styles:\n   * - `\"verbal\"` (Default) - displays function in a verbal style (e.g., \"Sum of field\", \"Year-month of date\", \"field (binned)\").\n   * - `\"function\"` - displays function using parentheses and capitalized texts (e.g., \"SUM(field)\", \"YEARMONTH(date)\", \"BIN(field)\").\n   * - `\"plain\"` - displays only the field name without functions (e.g., \"field\", \"date\", \"field\").\n   */\n  fieldTitle?: 'verbal' | 'functional' | 'plain';\n\n  /**\n   * D3 Number format for guide labels and text marks. For example \"s\" for SI units. Use [D3's number format pattern](https://github.com/d3/d3-format#locale_format).\n   */\n  numberFormat?: string;\n\n  /**\n   * Default time format for raw time values (without time units) in text marks, legend labels and header labels.\n   *\n   * __Default value:__ `\"%b %d, %Y\"`\n   * __Note:__ Axes automatically determine format each label automatically so this config would not affect axes.\n   */\n  timeFormat?: string;\n\n  /** Default properties for [single view plots](https://vega.github.io/vega-lite/docs/spec.html#single). */\n  view?: ViewConfig;\n\n  /**\n   * Scale configuration determines default properties for all [scales](https://vega.github.io/vega-lite/docs/scale.html). For a full list of scale configuration options, please see the [corresponding section of the scale documentation](https://vega.github.io/vega-lite/docs/scale.html#config).\n   */\n  scale?: ScaleConfig;\n\n  /** An object hash for defining default properties for each type of selections. */\n  selection?: SelectionConfig;\n\n  /** Default stack offset for stackable mark. */\n  stack?: StackOffset;\n}\n\nexport interface StyleConfigIndex {\n  [style: string]: BaseMarkConfig;\n}\n\nexport interface Config\n  extends TopLevelProperties,\n    VLOnlyConfig,\n    MarkConfigMixins,\n    CompositeMarkConfigMixins,\n    AxisConfigMixins {\n  /**\n   * CSS color property to use as the background of the whole Vega-Lite view\n   *\n   * __Default value:__ none (transparent)\n   */\n  background?: string;\n\n  /**\n   * An object hash that defines default range arrays or schemes for using with scales.\n   * For a full list of scale range configuration options, please see the [corresponding section of the scale documentation](https://vega.github.io/vega-lite/docs/scale.html#config).\n   */\n  range?: RangeConfig;\n\n  /**\n   * Legend configuration, which determines default properties for all [legends](https://vega.github.io/vega-lite/docs/legend.html). For a full list of legend configuration options, please see the [corresponding section of in the legend documentation](https://vega.github.io/vega-lite/docs/legend.html#config).\n   */\n  legend?: LegendConfig;\n\n  /**\n   * Header configuration, which determines default properties for all [header](https://vega.github.io/vega-lite/docs/header.html). For a full list of header configuration options, please see the [corresponding section of in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config).\n   */\n  header?: HeaderConfig;\n\n  /**\n   * Title configuration, which determines default properties for all [titles](https://vega.github.io/vega-lite/docs/title.html). For a full list of title configuration options, please see the [corresponding section of the title documentation](https://vega.github.io/vega-lite/docs/title.html#config).\n   */\n  title?: TitleConfig;\n\n  /**\n   * Projection configuration, which determines default properties for all [projections](https://vega.github.io/vega-lite/docs/projection.html). For a full list of projection configuration options, please see the [corresponding section of the projection documentation](https://vega.github.io/vega-lite/docs/projection.html#config).\n   */\n  projection?: ProjectionConfig;\n\n  /** An object hash that defines key-value mappings to determine default properties for marks with a given [style](https://vega.github.io/vega-lite/docs/mark.html#mark-def).  The keys represent styles names; the values have to be valid [mark configuration objects](https://vega.github.io/vega-lite/docs/mark.html#config).  */\n  style?: StyleConfigIndex;\n}\n\nexport const defaultConfig: Config = {\n  padding: 5,\n  timeFormat: '%b %d, %Y',\n  countTitle: 'Count of Records',\n\n  invalidValues: 'filter',\n\n  view: defaultViewConfig,\n\n  mark: mark.defaultMarkConfig,\n  area: {},\n  bar: mark.defaultBarConfig,\n  circle: {},\n  geoshape: {},\n  line: {},\n  point: {},\n  rect: {},\n  rule: {color: 'black'}, // Need this to override default color in mark config\n  square: {},\n  text: {color: 'black'}, // Need this to override default color in mark config\n  tick: mark.defaultTickConfig,\n  trail: {},\n\n  boxplot: {\n    size: 14,\n    extent: 1.5,\n    box: {},\n    median: {color: 'white'},\n    outliers: {},\n    rule: {},\n    ticks: null\n  },\n\n  errorbar: {\n    center: 'mean',\n    rule: true,\n    ticks: false\n  },\n\n  errorband: {\n    band: {\n      opacity: 0.3\n    },\n    borders: false\n  },\n\n  scale: defaultScaleConfig,\n\n  projection: {},\n\n  axis: {},\n  axisX: {},\n  axisY: {minExtent: 30},\n  axisLeft: {},\n  axisRight: {},\n  axisTop: {},\n  axisBottom: {},\n  axisBand: {},\n  legend: defaultLegendConfig,\n\n  selection: defaultSelectionConfig,\n  style: {},\n\n  title: {}\n};\n\nexport function initConfig(config: Config) {\n  return mergeDeep(duplicate(defaultConfig), config);\n}\n\nconst MARK_STYLES = ['view', ...PRIMITIVE_MARKS] as ('view' | Mark)[];\n\nconst VL_ONLY_CONFIG_PROPERTIES: (keyof Config)[] = [\n  'padding',\n  'numberFormat',\n  'timeFormat',\n  'countTitle',\n  'stack',\n  'scale',\n  'selection',\n  'invalidValues',\n  'overlay' as keyof Config // FIXME: Redesign and unhide this\n];\n\nconst VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {\n  view: ['width', 'height'],\n  ...VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX\n};\n\nexport function stripAndRedirectConfig(config: Config) {\n  config = duplicate(config);\n\n  for (const prop of VL_ONLY_CONFIG_PROPERTIES) {\n    delete config[prop];\n  }\n\n  // Remove Vega-Lite only axis/legend config\n  if (config.axis) {\n    for (const prop of VL_ONLY_GUIDE_CONFIG) {\n      delete config.axis[prop];\n    }\n  }\n  if (config.legend) {\n    for (const prop of VL_ONLY_GUIDE_CONFIG) {\n      delete config.legend[prop];\n    }\n\n    for (const prop of VL_ONLY_LEGEND_CONFIG) {\n      delete config.legend[prop];\n    }\n  }\n\n  // Remove Vega-Lite only generic mark config\n  if (config.mark) {\n    for (const prop of VL_ONLY_MARK_CONFIG_PROPERTIES) {\n      delete config.mark[prop];\n    }\n  }\n\n  for (const markType of MARK_STYLES) {\n    // Remove Vega-Lite-only mark config\n    for (const prop of VL_ONLY_MARK_CONFIG_PROPERTIES) {\n      delete config[markType][prop];\n    }\n\n    // Remove Vega-Lite only mark-specific config\n    const vlOnlyMarkSpecificConfigs = VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX[markType];\n    if (vlOnlyMarkSpecificConfigs) {\n      for (const prop of vlOnlyMarkSpecificConfigs) {\n        delete config[markType][prop];\n      }\n    }\n\n    // Redirect mark config to config.style so that mark config only affect its own mark type\n    // without affecting other marks that share the same underlying Vega marks.\n    // For example, config.rect should not affect bar marks.\n    redirectConfig(config, markType);\n  }\n\n  for (const m of getAllCompositeMarks()) {\n    // Clean up the composite mark config as we don't need them in the output specs anymore\n    delete config[m];\n  }\n\n  // Redirect config.title -- so that title config do not\n  // affect header labels, which also uses `title` directive to implement.\n  redirectConfig(config, 'title', 'group-title');\n\n  // Remove empty config objects\n  for (const prop in config) {\n    if (isObject(config[prop]) && keys(config[prop]).length === 0) {\n      delete config[prop];\n    }\n  }\n\n  return keys(config).length > 0 ? config : undefined;\n}\n\nfunction redirectConfig(\n  config: Config,\n  prop: Mark | 'title' | 'view' | string, // string = composite mark\n  toProp?: string,\n  compositeMarkPart?: string\n) {\n  const propConfig: BaseMarkConfig =\n    prop === 'title'\n      ? extractTitleConfig(config.title).mark\n      : compositeMarkPart\n      ? config[prop][compositeMarkPart]\n      : config[prop];\n\n  if (prop === 'view') {\n    toProp = 'cell'; // View's default style is \"cell\"\n  }\n\n  const style: BaseMarkConfig = {\n    ...propConfig,\n    ...config.style[prop]\n  };\n  // set config.style if it is not an empty object\n  if (keys(style).length > 0) {\n    config.style[toProp || prop] = style;\n  }\n\n  if (!compositeMarkPart) {\n    // For composite mark, so don't delete the whole config yet as we have to do multiple redirections.\n    delete config[prop];\n  }\n}\n","/*\n * Constants and utilities for data.\n */\nimport {VgData} from './vega.schema';\n\nexport type ParseValue = null | string | 'string' | 'boolean' | 'date' | 'number';\n\nexport interface Parse {\n  [field: string]: ParseValue;\n}\n\nexport interface DataFormatBase {\n  /**\n   * If set to `null`, disable type inference based on the spec and only use type inference based on the data.\n   * Alternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of `\"number\"`, `\"boolean\"`, `\"date\"`, or null (do not parse the field)).\n   * For example, `\"parse\": {\"modified_on\": \"date\"}` parses the `modified_on` field in each input record a Date value.\n   *\n   * For `\"date\"`, we parse data based using Javascript's [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).\n   * For Specific date formats can be provided (e.g., `{foo: 'date:\"%m%d%Y\"'}`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., `{foo: 'utc:\"%m%d%Y\"'}`). See more about [UTC time](https://vega.github.io/vega-lite/docs/timeunit.html#utc)\n   */\n  parse?: Parse | null;\n}\n\nexport interface CsvDataFormat extends DataFormatBase {\n  /**\n   * Type of input data: `\"json\"`, `\"csv\"`, `\"tsv\"`, `\"dsv\"`.\n   * The default format type is determined by the extension of the file URL.\n   * If no extension is detected, `\"json\"` will be used by default.\n   */\n  type?: 'csv' | 'tsv';\n}\n\nexport interface DsvDataFormat extends DataFormatBase {\n  /**\n   * Type of input data: `\"json\"`, `\"csv\"`, `\"tsv\"`, `\"dsv\"`.\n   * The default format type is determined by the extension of the file URL.\n   * If no extension is detected, `\"json\"` will be used by default.\n   */\n  type?: 'dsv';\n\n  /**\n   * The delimiter between records. The delimiter must be a single character (i.e., a single 16-bit code unit); so, ASCII delimiters are fine, but emoji delimiters are not.\n   *\n   * @minLength 1\n   * @maxLength 1\n   */\n  delimiter: string;\n}\n\nexport interface JsonDataFormat extends DataFormatBase {\n  /**\n   * Type of input data: `\"json\"`, `\"csv\"`, `\"tsv\"`, `\"dsv\"`.\n   * The default format type is determined by the extension of the file URL.\n   * If no extension is detected, `\"json\"` will be used by default.\n   */\n  type?: 'json';\n  /**\n   * The JSON property containing the desired data.\n   * This parameter can be used when the loaded JSON file may have surrounding structure or meta-data.\n   * For example `\"property\": \"values.features\"` is equivalent to retrieving `json.values.features`\n   * from the loaded JSON object.\n   */\n  property?: string;\n}\n\nexport interface TopoDataFormat extends DataFormatBase {\n  /**\n   * Type of input data: `\"json\"`, `\"csv\"`, `\"tsv\"`, `\"dsv\"`.\n   * The default format type is determined by the extension of the file URL.\n   * If no extension is detected, `\"json\"` will be used by default.\n   */\n  type?: 'topojson';\n  /**\n   * The name of the TopoJSON object set to convert to a GeoJSON feature collection.\n   * For example, in a map of the world, there may be an object set named `\"countries\"`.\n   * Using the feature property, we can extract this set and generate a GeoJSON feature object for each country.\n   */\n  feature?: string;\n  /**\n   * The name of the TopoJSON object set to convert to mesh.\n   * Similar to the `feature` option, `mesh` extracts a named TopoJSON object set.\n   *  Unlike the `feature` option, the corresponding geo data is returned as a single, unified mesh instance, not as individual GeoJSON features.\n   * Extracting a mesh is useful for more efficiently drawing borders or other geographic elements that you do not need to associate with specific regions such as individual countries, states or counties.\n   */\n  mesh?: string;\n}\n\nexport type DataFormat = CsvDataFormat | DsvDataFormat | JsonDataFormat | TopoDataFormat;\n\nexport type DataFormatType = 'json' | 'csv' | 'tsv' | 'dsv' | 'topojson';\n\nexport type Data = UrlData | InlineData | NamedData;\n\nexport type InlineDataset = number[] | string[] | boolean[] | object[] | string | object;\n\nexport interface DataBase {\n  /**\n   * An object that specifies the format for parsing the data.\n   */\n  format?: DataFormat;\n  /**\n   * Provide a placeholder name and bind data at runtime.\n   */\n  name?: string;\n}\n\nexport interface UrlData extends DataBase {\n  /**\n   * An URL from which to load the data set. Use the `format.type` property\n   * to ensure the loaded data is correctly parsed.\n   */\n  url: string;\n}\n\nexport interface InlineData extends DataBase {\n  /**\n   * The full data set, included inline. This can be an array of objects or primitive values, an object, or a string.\n   * Arrays of primitive values are ingested as objects with a `data` property. Strings are parsed according to the specified format type.\n   */\n  values: InlineDataset;\n}\n\nexport interface NamedData extends DataBase {\n  /**\n   * Provide a placeholder name and bind data at runtime.\n   */\n  name: string;\n}\n\nexport function isUrlData(data: Partial<Data> | Partial<VgData>): data is UrlData {\n  return !!data['url'];\n}\n\nexport function isInlineData(data: Partial<Data> | Partial<VgData>): data is InlineData {\n  return !!data['values'];\n}\n\nexport function isNamedData(data: Partial<Data> | Partial<VgData>): data is NamedData {\n  return !!data['name'] && !isUrlData(data) && !isInlineData(data);\n}\n\nexport type DataSourceType = 'raw' | 'main' | 'row' | 'column' | 'lookup';\n\nexport const MAIN: 'main' = 'main';\nexport const RAW: 'raw' = 'raw';\n","import {FontWeight, TextBaseline, TitleConfig} from 'vega';\nimport {Guide} from './guide';\nimport {keys} from './util';\n\nexport const HEADER_TITLE_PROPERTIES_MAP: {[k in keyof HeaderConfig]: keyof TitleConfig} = {\n  titleAnchor: 'anchor',\n  titleAngle: 'angle',\n  titleBaseline: 'baseline',\n  titleColor: 'color',\n  titleFont: 'font',\n  titleFontSize: 'fontSize',\n  titleFontWeight: 'fontWeight',\n  titleLimit: 'limit',\n  titlePadding: 'offset'\n};\n\nexport const HEADER_LABEL_PROPERTIES_MAP: {[k in keyof HeaderConfig]: keyof TitleConfig} = {\n  labelAngle: 'angle',\n  labelColor: 'color',\n  labelFont: 'font',\n  labelFontSize: 'fontSize',\n  labelLimit: 'limit',\n  labelPadding: 'offset'\n};\n\nexport const HEADER_TITLE_PROPERTIES = keys(HEADER_TITLE_PROPERTIES_MAP);\n\nexport const HEADER_LABEL_PROPERTIES = keys(HEADER_LABEL_PROPERTIES_MAP);\n\nexport interface HeaderConfig {\n  // ---------- Title ----------\n  /**\n   * The anchor position for placing the title. One of `\"start\"`, `\"middle\"`, or `\"end\"`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title.\n   *\n   * __Default value:__ `\"middle\"` for [single](https://vega.github.io/vega-lite/docs/spec.html) and [layered](https://vega.github.io/vega-lite/docs/layer.html) views.\n   * `\"start\"` for other composite views.\n   *\n   * __Note:__ [For now](https://github.com/vega/vega-lite/issues/2875), `anchor` is only customizable only for [single](https://vega.github.io/vega-lite/docs/spec.html) and [layered](https://vega.github.io/vega-lite/docs/layer.html) views.  For other composite views, `anchor` is always `\"start\"`.\n   */\n  titleAnchor?: string;\n\n  /**\n   * The rotation angle of the header title.\n   *\n   * __Default value:__ `0`.\n   *\n   * @minimum -360\n   * @maximum 360\n   */\n  titleAngle?: number;\n  /**\n   * Vertical text baseline for the header title. One of `\"top\"`, `\"bottom\"`, `\"middle\"`.\n   *\n   * __Default value:__ `\"middle\"`\n   */\n  titleBaseline?: TextBaseline;\n  /**\n   * Color of the header title, can be in hex color code or regular color name.\n   */\n  titleColor?: string;\n\n  /**\n   * Font of the header title. (e.g., `\"Helvetica Neue\"`).\n   */\n  titleFont?: string;\n\n  /**\n   * Font size of the header title.\n   *\n   * @minimum 0\n   */\n  titleFontSize?: number;\n\n  /**\n   * Font weight of the header title.\n   * This can be either a string (e.g `\"bold\"`, `\"normal\"`) or a number (`100`, `200`, `300`, ..., `900` where `\"normal\"` = `400` and `\"bold\"` = `700`).\n   */\n  titleFontWeight?: FontWeight;\n\n  /**\n   * The maximum length of the header title in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\n   *\n   * __Default value:__ `0`, indicating no limit\n   */\n  titleLimit?: number;\n\n  /**\n   * The padding, in pixel, between facet header's title and the label.\n   *\n   * __Default value:__ `10`\n   */\n  titlePadding?: number;\n\n  // ---------- Label ----------\n  /**\n   * The rotation angle of the header labels.\n   *\n   * __Default value:__ `0` for column header, `-90` for row header.\n   *\n   * @minimum -360\n   * @maximum 360\n   */\n  labelAngle?: number;\n\n  /**\n   * The color of the header label, can be in hex color code or regular color name.\n   */\n  labelColor?: string;\n\n  /**\n   * The font of the header label.\n   */\n  labelFont?: string;\n\n  /**\n   * The font size of the header label, in pixels.\n   *\n   * @minimum 0\n   */\n  labelFontSize?: number;\n\n  /**\n   * The maximum length of the header label in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\n   *\n   * __Default value:__ `0`, indicating no limit\n   */\n  labelLimit?: number;\n\n  /**\n   * The padding, in pixel, between facet header's label and the plot.\n   *\n   * __Default value:__ `10`\n   */\n  labelPadding?: number;\n}\n\n/**\n * Headers of row / column channels for faceted plots.\n */\nexport interface Header extends HeaderConfig, Guide {}\n","import {Resolve} from '../resolve';\nimport {BaseSpec, BoundsMixins} from './base';\nimport {GenericSpec} from './index';\nimport {GenericLayerSpec, NormalizedLayerSpec} from './layer';\nimport {GenericUnitSpec, NormalizedUnitSpec} from './unit';\n\n/**\n * Base layout mixins for V/HConcatSpec.\n * Concat layout should not have RowCol<T> generic fo its property.\n */\nexport interface ConcatLayout extends BoundsMixins {\n  /**\n   * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\n   *\n   * __Default value:__ `false`\n   */\n  center?: boolean;\n\n  /**\n   * The spacing in pixels between sub-views of the concat operator.\n   *\n   * __Default value__: `10`\n   */\n  spacing?: number;\n}\n\n/**\n * Base interface for a vertical concatenation specification.\n */\nexport interface GenericVConcatSpec<U extends GenericUnitSpec<any, any>, L extends GenericLayerSpec<any>>\n  extends BaseSpec,\n    ConcatLayout {\n  /**\n   * A list of views that should be concatenated and put into a column.\n   */\n  vconcat: (GenericSpec<U, L>)[];\n\n  /**\n   * Scale, axis, and legend resolutions for vertically concatenated charts.\n   */\n  resolve?: Resolve;\n}\n\n/**\n * Base interface for a horizontal concatenation specification.\n */\nexport interface GenericHConcatSpec<U extends GenericUnitSpec<any, any>, L extends GenericLayerSpec<any>>\n  extends BaseSpec,\n    ConcatLayout {\n  /**\n   * A list of views that should be concatenated and put into a row.\n   */\n  hconcat: (GenericSpec<U, L>)[];\n\n  /**\n   * Scale, axis, and legend resolutions for horizontally concatenated charts.\n   */\n  resolve?: Resolve;\n}\n/** A concat spec without any shortcut/expansion syntax */\nexport type NormalizedConcatSpec =\n  | GenericVConcatSpec<NormalizedUnitSpec, NormalizedLayerSpec>\n  | GenericHConcatSpec<NormalizedUnitSpec, NormalizedLayerSpec>;\n\nexport function isConcatSpec(spec: BaseSpec): spec is GenericVConcatSpec<any, any> | GenericHConcatSpec<any, any> {\n  return isVConcatSpec(spec) || isHConcatSpec(spec);\n}\n\nexport function isVConcatSpec(spec: BaseSpec): spec is GenericVConcatSpec<any, any> {\n  return spec['vconcat'] !== undefined;\n}\n\nexport function isHConcatSpec(spec: BaseSpec): spec is GenericHConcatSpec<any, any> {\n  return spec['hconcat'] !== undefined;\n}\n","import {CompositeEncoding} from '../compositemark/index';\nimport {Projection} from '../projection';\nimport {Resolve} from '../resolve';\nimport {BaseSpec, LayerUnitMixins} from './base';\nimport {CompositeUnitSpec, GenericUnitSpec, NormalizedUnitSpec} from './unit';\n\n/**\n * Base interface for a layer specification.\n */\nexport interface GenericLayerSpec<U extends GenericUnitSpec<any, any>> extends BaseSpec, LayerUnitMixins {\n  /**\n   * Layer or single view specifications to be layered.\n   *\n   * __Note__: Specifications inside `layer` cannot use `row` and `column` channels as layering facet specifications is not allowed. Instead, use the [facet operator](https://vega.github.io/vega-lite/docs/facet.html) and place a layer inside a facet.\n   */\n  layer: (GenericLayerSpec<U> | U)[];\n\n  /**\n   * Scale, axis, and legend resolutions for layers.\n   */\n  resolve?: Resolve;\n}\n\n/**\n * Layer Spec with `encoding` and `projection` shorthands that will be applied to underlying unit (single-view) specifications.\n */\nexport interface ExtendedLayerSpec extends GenericLayerSpec<CompositeUnitSpec> {\n  /**\n   * A shared key-value mapping between encoding channels and definition of fields in the underlying layers.\n   */\n  encoding?: CompositeEncoding;\n\n  /**\n   * An object defining properties of the geographic projection shared by underlying layers.\n   */\n  projection?: Projection;\n}\n\n/**\n * A layered specification without any shortcut/expansion syntax.\n */\nexport type NormalizedLayerSpec = GenericLayerSpec<NormalizedUnitSpec>;\n\nexport function isLayerSpec(spec: BaseSpec): spec is GenericLayerSpec<any> {\n  return spec['layer'] !== undefined;\n}\n","import {Resolve} from '../resolve';\nimport {BaseSpec, GenericCompositionLayout} from './base';\nimport {GenericSpec} from './index';\nimport {GenericLayerSpec, NormalizedLayerSpec} from './layer';\nimport {Repeat} from './repeat';\nimport {GenericUnitSpec, NormalizedUnitSpec} from './unit';\n\nexport interface Repeat {\n  /**\n   * Vertical repeated views.\n   */\n  row?: string[];\n\n  /**\n   * Horizontal repeated views.\n   */\n  column?: string[];\n}\n\n/**\n * Base interface for a repeat specification.\n */\nexport interface GenericRepeatSpec<U extends GenericUnitSpec<any, any>, L extends GenericLayerSpec<any>>\n  extends BaseSpec,\n    GenericCompositionLayout {\n  /**\n   * An object that describes what fields should be repeated into views that are laid out as a `row` or `column`.\n   */\n  repeat: Repeat;\n\n  spec: GenericSpec<U, L>;\n\n  /**\n   * Scale and legend resolutions for repeated charts.\n   */\n  resolve?: Resolve;\n}\n\n/**\n * A repeat specification without any shortcut/expansion syntax.\n */\nexport type NormalizedRepeatSpec = GenericRepeatSpec<NormalizedUnitSpec, NormalizedLayerSpec>;\n\nexport function isRepeatSpec(spec: BaseSpec): spec is GenericRepeatSpec<any, any> {\n  return spec['repeat'] !== undefined;\n}\n","import * as log from '../log';\nimport {GenericHConcatSpec, GenericVConcatSpec, isHConcatSpec, isVConcatSpec} from './concat';\nimport {GenericFacetSpec, isFacetSpec} from './facet';\nimport {GenericSpec} from './index';\nimport {GenericLayerSpec, isLayerSpec} from './layer';\nimport {GenericRepeatSpec, isRepeatSpec} from './repeat';\nimport {GenericUnitSpec, isUnitSpec, NormalizedUnitSpec} from './unit';\n\nexport abstract class SpecMapper<\n  P,\n  UI extends GenericUnitSpec<any, any>,\n  LI extends GenericLayerSpec<any> = GenericLayerSpec<UI>,\n  UO extends GenericUnitSpec<any, any> = NormalizedUnitSpec\n> {\n  public map(spec: GenericSpec<UI, LI>, params: P): GenericSpec<UO, GenericLayerSpec<UO>> {\n    if (isFacetSpec(spec)) {\n      return this.mapFacet(spec, params);\n    } else if (isRepeatSpec(spec)) {\n      return this.mapRepeat(spec, params);\n    } else if (isHConcatSpec(spec)) {\n      return this.mapHConcat(spec, params);\n    } else if (isVConcatSpec(spec)) {\n      return this.mapVConcat(spec, params);\n    } else {\n      return this.mapLayerOrUnit(spec, params);\n    }\n  }\n\n  public mapLayerOrUnit(spec: UI | LI, params: P): UO | GenericLayerSpec<UO> {\n    if (isLayerSpec(spec)) {\n      return this.mapLayer(spec, params);\n    } else if (isUnitSpec(spec)) {\n      return this.mapUnit(spec, params);\n    }\n    throw new Error(log.message.INVALID_SPEC);\n  }\n\n  public abstract mapUnit(spec: UI, params: P): UO | GenericLayerSpec<UO>;\n\n  protected mapLayer(spec: LI, params: P): GenericLayerSpec<UO> {\n    return {\n      ...spec,\n      layer: spec.layer.map(subspec => this.mapLayerOrUnit(subspec, params))\n    };\n  }\n\n  protected mapHConcat(spec: GenericHConcatSpec<UI, LI>, params: P): GenericHConcatSpec<UO, GenericLayerSpec<UO>> {\n    return {\n      ...spec,\n      hconcat: spec.hconcat.map(subspec => this.map(subspec, params))\n    };\n  }\n\n  protected mapVConcat(spec: GenericVConcatSpec<UI, LI>, params: P): GenericVConcatSpec<UO, GenericLayerSpec<UO>> {\n    return {\n      ...spec,\n      vconcat: spec.vconcat.map(subspec => this.map(subspec, params))\n    };\n  }\n\n  protected mapFacet(spec: GenericFacetSpec<UI, LI>, params: P): GenericFacetSpec<UO, GenericLayerSpec<UO>> {\n    return {\n      ...spec,\n      // TODO: remove \"any\" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760\n      spec: this.map(spec.spec, params) as any\n    };\n  }\n\n  protected mapRepeat(spec: GenericRepeatSpec<UI, LI>, params: P): GenericRepeatSpec<UO, GenericLayerSpec<UO>> {\n    return {\n      ...spec,\n      spec: this.map(spec.spec, params)\n    };\n  }\n}\n","import {isArray} from 'vega-util';\nimport {SUM_OPS} from './aggregate';\nimport {NONPOSITION_CHANNELS, NonPositionChannel, X, X2, Y2} from './channel';\nimport {channelHasField, Encoding} from './encoding';\nimport {\n  Field,\n  getTypedFieldDef,\n  isFieldDef,\n  isStringFieldDef,\n  PositionFieldDef,\n  TypedFieldDef,\n  vgField\n} from './fielddef';\nimport * as log from './log';\nimport {AREA, BAR, CIRCLE, isMarkDef, isPathMark, LINE, Mark, MarkDef, POINT, RULE, SQUARE, TEXT, TICK} from './mark';\nimport {ScaleType} from './scale';\nimport {contains, Flag, getFirstDefined} from './util';\n\nexport type StackOffset = 'zero' | 'center' | 'normalize';\n\nconst STACK_OFFSET_INDEX: Flag<StackOffset> = {\n  zero: 1,\n  center: 1,\n  normalize: 1\n};\n\nexport function isStackOffset(s: string): s is StackOffset {\n  return !!STACK_OFFSET_INDEX[s];\n}\n\nexport interface StackProperties {\n  /** Dimension axis of the stack. */\n  groupbyChannel: 'x' | 'y';\n\n  /** Measure axis of the stack. */\n  fieldChannel: 'x' | 'y';\n\n  /** Stack-by fields e.g., color, detail */\n  stackBy: {\n    fieldDef: TypedFieldDef<string>;\n    channel: NonPositionChannel;\n  }[];\n\n  /**\n   * See `\"stack\"` property of Position Field Def.\n   */\n  offset: StackOffset;\n\n  /**\n   * Whether this stack will produce impute transform\n   */\n  impute: boolean;\n}\n\nexport const STACKABLE_MARKS = [BAR, AREA, RULE, POINT, CIRCLE, SQUARE, LINE, TEXT, TICK];\nexport const STACK_BY_DEFAULT_MARKS = [BAR, AREA];\n\nfunction potentialStackedChannel(encoding: Encoding<Field>): 'x' | 'y' | undefined {\n  const xDef = encoding.x;\n  const yDef = encoding.y;\n\n  if (isFieldDef(xDef) && isFieldDef(yDef)) {\n    if (xDef.type === 'quantitative' && yDef.type === 'quantitative') {\n      if (xDef.stack) {\n        return 'x';\n      } else if (yDef.stack) {\n        return 'y';\n      }\n      // if there is no explicit stacking, only apply stack if there is only one aggregate for x or y\n      if (!!xDef.aggregate !== !!yDef.aggregate) {\n        return xDef.aggregate ? 'x' : 'y';\n      }\n    } else if (xDef.type === 'quantitative') {\n      return 'x';\n    } else if (yDef.type === 'quantitative') {\n      return 'y';\n    }\n  } else if (isFieldDef(xDef) && xDef.type === 'quantitative') {\n    return 'x';\n  } else if (isFieldDef(yDef) && yDef.type === 'quantitative') {\n    return 'y';\n  }\n  return undefined;\n}\n\n// Note: CompassQL uses this method and only pass in required properties of each argument object.\n// If required properties change, make sure to update CompassQL.\nexport function stack(m: Mark | MarkDef, encoding: Encoding<Field>, stackConfig: StackOffset): StackProperties {\n  const mark = isMarkDef(m) ? m.type : m;\n  // Should have stackable mark\n  if (!contains(STACKABLE_MARKS, mark)) {\n    return null;\n  }\n\n  const fieldChannel = potentialStackedChannel(encoding);\n  if (!fieldChannel) {\n    return null;\n  }\n\n  const stackedFieldDef = encoding[fieldChannel] as PositionFieldDef<string>;\n  const stackedField = isStringFieldDef(stackedFieldDef) ? vgField(stackedFieldDef, {}) : undefined;\n\n  const dimensionChannel = fieldChannel === 'x' ? 'y' : 'x';\n  const dimensionDef = encoding[dimensionChannel];\n  const dimensionField = isStringFieldDef(dimensionDef) ? vgField(dimensionDef, {}) : undefined;\n\n  // Should have grouping level of detail that is different from the dimension field\n  const stackBy = NONPOSITION_CHANNELS.reduce((sc, channel) => {\n    // Ignore tooltip in stackBy (https://github.com/vega/vega-lite/issues/4001)\n    if (channel !== 'tooltip' && channelHasField(encoding, channel)) {\n      const channelDef = encoding[channel];\n      (isArray(channelDef) ? channelDef : [channelDef]).forEach(cDef => {\n        const fieldDef = getTypedFieldDef(cDef);\n        if (fieldDef.aggregate) {\n          return;\n        }\n\n        // Check whether the channel's field is identical to x/y's field or if the channel is a repeat\n        const f = isStringFieldDef(fieldDef) ? vgField(fieldDef, {}) : undefined;\n        if (\n          // if fielddef is a repeat, just include it in the stack by\n          !f ||\n          // otherwise, the field must be different from x and y fields.\n          (f !== dimensionField && f !== stackedField)\n        ) {\n          sc.push({channel, fieldDef});\n        }\n      });\n    }\n    return sc;\n  }, []);\n\n  if (stackBy.length === 0) {\n    return null;\n  }\n\n  // Automatically determine offset\n  let offset: StackOffset;\n  if (stackedFieldDef.stack !== undefined) {\n    offset = stackedFieldDef.stack;\n  } else if (contains(STACK_BY_DEFAULT_MARKS, mark)) {\n    // Bar and Area with sum ops are automatically stacked by default\n    offset = getFirstDefined(stackConfig, 'zero');\n  } else {\n    offset = stackConfig;\n  }\n\n  if (!offset || !isStackOffset(offset)) {\n    return null;\n  }\n\n  // warn when stacking non-linear\n  if (stackedFieldDef.scale && stackedFieldDef.scale.type && stackedFieldDef.scale.type !== ScaleType.LINEAR) {\n    log.warn(log.message.cannotStackNonLinearScale(stackedFieldDef.scale.type));\n  }\n\n  // Check if it is a ranged mark\n  if (channelHasField(encoding, fieldChannel === X ? X2 : Y2)) {\n    if (stackedFieldDef.stack !== undefined) {\n      log.warn(log.message.cannotStackRangedMark(fieldChannel));\n    }\n    return null;\n  }\n\n  // Warn if stacking summative aggregate\n  if (stackedFieldDef.aggregate && !contains(SUM_OPS, stackedFieldDef.aggregate)) {\n    log.warn(log.message.stackNonSummativeAggregate(stackedFieldDef.aggregate));\n  }\n\n  return {\n    groupbyChannel: dimensionDef ? dimensionChannel : undefined,\n    fieldChannel,\n    impute: isPathMark(mark),\n    stackBy,\n    offset\n  };\n}\n","import {isObject} from 'vega-util';\nimport {Config} from '../config';\nimport {Encoding} from '../encoding';\nimport {Field} from '../fielddef';\nimport {AreaConfig, isMarkDef, LineConfig, Mark, MarkConfig, MarkDef} from '../mark';\nimport {GenericUnitSpec, NormalizedUnitSpec} from '../spec';\nimport {isUnitSpec} from '../spec/unit';\nimport {stack} from '../stack';\nimport {keys, omit, pick} from '../util';\nimport {NonFacetUnitNormalizer, NormalizeLayerOrUnit, NormalizerParams} from './base';\n\ntype UnitSpecWithPathOverlay = GenericUnitSpec<Encoding<string>, Mark | MarkDef<'line' | 'area' | 'rule' | 'trail'>>;\n\nfunction dropLineAndPoint(markDef: MarkDef): MarkDef | Mark {\n  const {point: _point, line: _line, ...mark} = markDef;\n\n  return keys(mark).length > 1 ? mark : mark.type;\n}\n\nfunction dropLineAndPointFromConfig(config: Config) {\n  for (const mark of ['line', 'area', 'rule', 'trail']) {\n    if (config[mark]) {\n      config = {\n        ...config,\n        [mark]: omit(config[mark], ['point', 'line'])\n      };\n    }\n  }\n  return config;\n}\n\nfunction getPointOverlay(markDef: MarkDef, markConfig: LineConfig = {}, encoding: Encoding<Field>): MarkConfig {\n  if (markDef.point === 'transparent') {\n    return {opacity: 0};\n  } else if (markDef.point) {\n    // truthy : true or object\n    return isObject(markDef.point) ? markDef.point : {};\n  } else if (markDef.point !== undefined) {\n    // false or null\n    return null;\n  } else {\n    // undefined (not disabled)\n    if (markConfig.point || encoding.shape) {\n      // enable point overlay if config[mark].point is truthy or if encoding.shape is provided\n      return isObject(markConfig.point) ? markConfig.point : {};\n    }\n    // markDef.point is defined as falsy\n    return undefined;\n  }\n}\n\nfunction getLineOverlay(markDef: MarkDef, markConfig: AreaConfig = {}): MarkConfig {\n  if (markDef.line) {\n    // true or object\n    return markDef.line === true ? {} : markDef.line;\n  } else if (markDef.line !== undefined) {\n    // false or null\n    return null;\n  } else {\n    // undefined (not disabled)\n    if (markConfig.line) {\n      // enable line overlay if config[mark].line is truthy\n      return markConfig.line === true ? {} : markConfig.line;\n    }\n    // markDef.point is defined as falsy\n    return undefined;\n  }\n}\n\nexport class PathOverlayNormalizer implements NonFacetUnitNormalizer<UnitSpecWithPathOverlay> {\n  public name = 'path-overlay';\n  public hasMatchingType(spec: GenericUnitSpec<any, Mark | MarkDef>, config: Config): spec is UnitSpecWithPathOverlay {\n    if (isUnitSpec(spec)) {\n      const {mark, encoding} = spec;\n      const markDef = isMarkDef(mark) ? mark : {type: mark};\n      switch (markDef.type) {\n        case 'line':\n        case 'rule':\n        case 'trail':\n          return !!getPointOverlay(markDef, config[markDef.type], encoding);\n        case 'area':\n          return (\n            // false / null are also included as we want to remove the properties\n            !!getPointOverlay(markDef, config[markDef.type], encoding) ||\n            !!getLineOverlay(markDef, config[markDef.type])\n          );\n      }\n    }\n    return false;\n  }\n  public run(spec: UnitSpecWithPathOverlay, params: NormalizerParams, normalize: NormalizeLayerOrUnit) {\n    const {config} = params;\n    const {selection, projection, encoding, mark, ...outerSpec} = spec;\n    const markDef: MarkDef = isMarkDef(mark) ? mark : {type: mark};\n\n    const pointOverlay = getPointOverlay(markDef, config[markDef.type], encoding);\n    const lineOverlay = markDef.type === 'area' && getLineOverlay(markDef, config[markDef.type]);\n\n    const layer: NormalizedUnitSpec[] = [\n      {\n        ...(selection ? {selection} : {}),\n        // Do not include point / line overlay in the normalize spec\n        mark: dropLineAndPoint({\n          ...markDef,\n          // make area mark translucent by default\n          // TODO: extract this 0.7 to be shared with default opacity for point/tick/...\n          ...(markDef.type === 'area' ? {opacity: 0.7} : {})\n        }),\n        // drop shape from encoding as this might be used to trigger point overlay\n        encoding: omit(encoding, ['shape'])\n      }\n    ];\n\n    // FIXME: determine rules for applying selections.\n\n    // Need to copy stack config to overlayed layer\n    const stackProps = stack(markDef, encoding, config ? config.stack : undefined);\n\n    let overlayEncoding = encoding;\n    if (stackProps) {\n      const {fieldChannel: stackFieldChannel, offset} = stackProps;\n      overlayEncoding = {\n        ...encoding,\n        [stackFieldChannel]: {\n          ...encoding[stackFieldChannel],\n          ...(offset ? {stack: offset} : {})\n        }\n      };\n    }\n\n    if (lineOverlay) {\n      layer.push({\n        ...(projection ? {projection} : {}),\n        mark: {\n          type: 'line',\n          ...pick(markDef, ['clip', 'interpolate', 'tension']),\n          ...lineOverlay\n        },\n        encoding: overlayEncoding\n      });\n    }\n    if (pointOverlay) {\n      layer.push({\n        ...(projection ? {projection} : {}),\n        mark: {\n          type: 'point',\n          opacity: 1,\n          filled: true,\n          ...pick(markDef, ['clip']),\n          ...pointOverlay\n        },\n        encoding: overlayEncoding\n      });\n    }\n\n    return normalize(\n      {\n        ...outerSpec,\n        layer\n      },\n      {\n        ...params,\n        config: dropLineAndPointFromConfig(config)\n      }\n    );\n  }\n}\n","import {Encoding} from '../encoding';\nimport {Field} from '../fielddef';\nimport * as log from '../log';\nimport {GenericSpec} from '../spec/index';\nimport {GenericUnitSpec, isUnitSpec} from '../spec/unit';\nimport {NonFacetUnitNormalizer, NormalizeLayerOrUnit, NormalizerParams} from './base';\n\ninterface EncodingX2Mixins {\n  x2: Encoding<Field>['x2'];\n}\n\ninterface EncodingY2Mixins {\n  y2: Encoding<Field>['y2'];\n}\n\ntype RangedLineSpec = GenericUnitSpec<Encoding<Field> & (EncodingX2Mixins | EncodingY2Mixins), 'line'>;\n\nexport class RuleForRangedLineNormalizer implements NonFacetUnitNormalizer<RangedLineSpec> {\n  public name = 'RuleForRangedLine';\n\n  public hasMatchingType(spec: GenericSpec<any, any>): spec is RangedLineSpec {\n    if (isUnitSpec(spec)) {\n      const {encoding, mark} = spec;\n      return mark === 'line' && (!!encoding['x2'] || !!encoding['y2']);\n    }\n    return false;\n  }\n\n  public run(spec: RangedLineSpec, params: NormalizerParams, normalize: NormalizeLayerOrUnit) {\n    const {encoding} = spec;\n    log.warn(log.message.lineWithRange(!!encoding.x2, !!encoding.y2));\n\n    return normalize(\n      {\n        ...spec,\n        mark: 'rule'\n      },\n      params\n    );\n  }\n}\n","import {COLUMN, ROW} from '../channel';\nimport {boxPlotNormalizer} from '../compositemark/boxplot';\nimport {errorBandNormalizer} from '../compositemark/errorband';\nimport {errorBarNormalizer} from '../compositemark/errorbar';\nimport {channelHasField, Encoding} from '../encoding';\nimport * as log from '../log';\nimport {Projection} from '../projection';\nimport {ExtendedLayerSpec, ExtendedUnitSpec, FacetedExtendedUnitSpec, GenericSpec} from '../spec';\nimport {NormalizedFacetSpec} from '../spec/facet';\nimport {GenericLayerSpec, NormalizedLayerSpec} from '../spec/layer';\nimport {SpecMapper} from '../spec/map';\nimport {isUnitSpec, NormalizedUnitSpec} from '../spec/unit';\nimport {keys} from '../util';\nimport {NonFacetUnitNormalizer, NormalizerParams} from './base';\nimport {PathOverlayNormalizer} from './pathoverlay';\nimport {RuleForRangedLineNormalizer} from './ruleforrangedline';\n\nexport class CoreNormalizer extends SpecMapper<NormalizerParams, FacetedExtendedUnitSpec, ExtendedLayerSpec> {\n  private nonFacetUnitNormalizers: NonFacetUnitNormalizer<any>[] = [\n    boxPlotNormalizer,\n    errorBarNormalizer,\n    errorBandNormalizer,\n    new PathOverlayNormalizer(),\n    new RuleForRangedLineNormalizer()\n  ];\n\n  public map(spec: GenericSpec<FacetedExtendedUnitSpec, ExtendedLayerSpec>, params: NormalizerParams) {\n    // Special handling for a faceted unit spec as it can return a facet spec, not just a layer or unit spec like a normal unit spec.\n    if (isUnitSpec(spec)) {\n      const hasRow = channelHasField(spec.encoding, ROW);\n      const hasColumn = channelHasField(spec.encoding, COLUMN);\n\n      if (hasRow || hasColumn) {\n        return this.mapFacetedUnit(spec, params);\n      }\n    }\n\n    return super.map(spec, params);\n  }\n\n  // This is for normalizing non-facet unit\n  public mapUnit(spec: ExtendedUnitSpec, params: NormalizerParams): NormalizedUnitSpec | NormalizedLayerSpec {\n    const {parentEncoding, parentProjection} = params;\n    if (parentEncoding || parentProjection) {\n      return this.mapUnitWithParentEncodingOrProjection(spec, params);\n    }\n\n    const normalizeLayerOrUnit = this.mapLayerOrUnit.bind(this);\n\n    for (const unitNormalizer of this.nonFacetUnitNormalizers) {\n      if (unitNormalizer.hasMatchingType(spec, params.config)) {\n        return unitNormalizer.run(spec, params, normalizeLayerOrUnit);\n      }\n    }\n\n    return spec as NormalizedUnitSpec;\n  }\n\n  private mapUnitWithParentEncodingOrProjection(\n    spec: FacetedExtendedUnitSpec,\n    params: NormalizerParams\n  ): NormalizedUnitSpec | NormalizedLayerSpec {\n    const {encoding, projection} = spec;\n    const {parentEncoding, parentProjection, config} = params;\n    const mergedProjection = mergeProjection({parentProjection, projection});\n    const mergedEncoding = mergeEncoding({parentEncoding, encoding});\n    return this.mapUnit(\n      {\n        ...spec,\n        ...(mergedProjection ? {projection: mergedProjection} : {}),\n        ...(mergedEncoding ? {encoding: mergedEncoding} : {})\n      },\n      {config}\n    );\n  }\n\n  private mapFacetedUnit(spec: FacetedExtendedUnitSpec, params: NormalizerParams): NormalizedFacetSpec {\n    // New encoding in the inside spec should not contain row / column\n    // as row/column should be moved to facet\n    const {row, column, ...encoding} = spec.encoding;\n\n    // Mark and encoding should be moved into the inner spec\n    const {mark, width, projection, height, selection, encoding: _, ...outerSpec} = spec;\n\n    return {\n      ...outerSpec,\n      facet: {\n        ...(row ? {row} : {}),\n        ...(column ? {column} : {})\n      },\n      spec: this.mapUnit(\n        {\n          ...(projection ? {projection} : {}),\n          mark,\n          ...(width ? {width} : {}),\n          ...(height ? {height} : {}),\n          encoding,\n          ...(selection ? {selection} : {})\n        },\n        params\n      )\n    };\n  }\n\n  public mapLayer(\n    spec: ExtendedLayerSpec,\n    {parentEncoding, parentProjection, ...otherParams}: NormalizerParams\n  ): GenericLayerSpec<NormalizedUnitSpec> {\n    // Special handling for extended layer spec\n\n    const {encoding, projection, ...rest} = spec;\n    const params: NormalizerParams = {\n      ...otherParams,\n      parentEncoding: mergeEncoding({parentEncoding, encoding}),\n      parentProjection: mergeProjection({parentProjection, projection})\n    };\n    return super.mapLayer(rest, params);\n  }\n}\n\nfunction mergeEncoding(opt: {parentEncoding: Encoding<any>; encoding: Encoding<any>}): Encoding<any> {\n  const {parentEncoding, encoding} = opt;\n  if (parentEncoding && encoding) {\n    const overriden = keys(parentEncoding).reduce((o, key) => {\n      if (encoding[key]) {\n        o.push(key);\n      }\n      return o;\n    }, []);\n\n    if (overriden.length > 0) {\n      log.warn(log.message.encodingOverridden(overriden));\n    }\n  }\n\n  const merged = {\n    ...(parentEncoding || {}),\n    ...(encoding || {})\n  };\n  return keys(merged).length > 0 ? merged : undefined;\n}\n\nfunction mergeProjection(opt: {parentProjection: Projection; projection: Projection}) {\n  const {parentProjection, projection} = opt;\n  if (parentProjection && projection) {\n    log.warn(log.message.projectionOverridden({parentProjection, projection}));\n  }\n  return projection || parentProjection;\n}\n","import {Config, initConfig} from '../config';\nimport {ExtendedLayerSpec, ExtendedUnitSpec, FacetedExtendedUnitSpec, GenericSpec, NormalizedSpec} from '../spec';\nimport {TopLevelSpec} from '../spec/index';\nimport {TopLevel} from '../spec/toplevel';\nimport {NormalizerParams} from './base';\nimport {CoreNormalizer} from './core';\n\nexport function normalize(spec: TopLevelSpec, config?: Config): TopLevel<NormalizedSpec> {\n  if (config === undefined) {\n    config = initConfig(spec.config);\n  }\n\n  return normalizeGenericSpec(spec, config);\n}\n\nconst normalizer = new CoreNormalizer();\n\n/**\n * Decompose extended unit specs into composition of pure unit specs.\n */\nfunction normalizeGenericSpec(\n  spec: GenericSpec<ExtendedUnitSpec, ExtendedLayerSpec> | FacetedExtendedUnitSpec,\n  config: Config = {}\n): NormalizedSpec {\n  return normalizer.map(spec, {config});\n}\n\nexport {NormalizerParams};\n","import {AggregateOp} from 'vega';\nimport {isArray} from 'vega-util';\nimport {SingleDefUnitChannel} from './channel';\nimport {DateTime} from './datetime';\n\nexport type SortOrder = 'ascending' | 'descending';\n\n/**\n * A sort definition for transform\n */\nexport interface SortField {\n  /**\n   * The name of the field to sort.\n   */\n  field: string;\n\n  /**\n   * Whether to sort the field in ascending or descending order. One of `\"ascending\"` (default), `\"descending\"`, or `null` (no not sort).\n   */\n  order?: SortOrder | null;\n}\n\nexport interface SortFields {\n  field: string[];\n  order?: (SortOrder)[];\n}\n\nexport const DEFAULT_SORT_OP = 'mean';\n\n/**\n * A sort definition for sorting a discrete scale in an encoding field definition.\n */\n\nexport interface EncodingSortField<F> {\n  /**\n   * The data [field](https://vega.github.io/vega-lite/docs/field.html) to sort by.\n   *\n   * __Default value:__ If unspecified, defaults to the field specified in the outer data reference.\n   */\n  field?: F;\n  /**\n   * An [aggregate operation](https://vega.github.io/vega-lite/docs/aggregate.html#ops) to perform on the field prior to sorting (e.g., `\"count\"`, `\"mean\"` and `\"median\"`).\n   * An aggregation is required when there are multiple values of the sort field for each encoded data field.\n   * The input data objects will be aggregated, grouped by the encoded data field.\n   *\n   * For a full list of operations, please see the documentation for [aggregate](https://vega.github.io/vega-lite/docs/aggregate.html#ops).\n   *\n   * __Default value:__ `\"sum\"` for stacked plots. Otherwise, `\"mean\"`.\n   */\n  op?: AggregateOp;\n\n  /**\n   * The sort order. One of `\"ascending\"` (default), `\"descending\"`, or `null` (no not sort).\n   */\n  order?: SortOrder | null;\n}\n\nexport interface SortByEncoding {\n  /**\n   * The [encoding channel](https://vega.github.io/vega-lite/docs/encoding.html#channels) to sort by (e.g., `\"x\"`, `\"y\"`)\n   */\n  encoding: SingleDefUnitChannel;\n\n  /**\n   * The sort order. One of `\"ascending\"` (default), `\"descending\"`, or `null` (no not sort).\n   */\n  order?: SortOrder | null;\n}\n\nexport type SortArray = number[] | string[] | boolean[] | DateTime[];\n\nexport type Sort<F> = SortArray | SortOrder | EncodingSortField<F> | SortByEncoding | null;\n\nexport function isSortByEncoding<F>(sort: Sort<F>): sort is SortByEncoding {\n  return !!sort && !!sort['encoding'];\n}\n\nexport function isSortField<F>(sort: Sort<F>): sort is EncodingSortField<F> {\n  return !!sort && (sort['op'] === 'count' || !!sort['field']);\n}\n\nexport function isSortArray<F>(sort: Sort<F>): sort is SortArray {\n  return !!sort && isArray(sort);\n}\n","import {isArray} from 'vega-util';\nimport {DateTime} from './datetime';\nimport {valueExpr, vgField} from './fielddef';\nimport {LogicalOperand} from './logical';\nimport {fieldExpr as timeUnitFieldExpr, normalizeTimeUnit, TimeUnit} from './timeunit';\n\nexport type Predicate =\n  // a) FieldPredicate (but we don't type FieldFilter here so the schema has no nesting\n  // and thus the documentation shows all of the types clearly)\n  | FieldEqualPredicate\n  | FieldRangePredicate\n  | FieldOneOfPredicate\n  | FieldLTPredicate\n  | FieldGTPredicate\n  | FieldLTEPredicate\n  | FieldGTEPredicate\n  | FieldValidPredicate\n  // b) Selection Predicate\n  | SelectionPredicate\n  // c) Vega Expression string\n  | string;\n\nexport type FieldPredicate =\n  | FieldEqualPredicate\n  | FieldLTPredicate\n  | FieldGTPredicate\n  | FieldLTEPredicate\n  | FieldGTEPredicate\n  | FieldRangePredicate\n  | FieldOneOfPredicate\n  | FieldValidPredicate;\n\nexport interface SelectionPredicate {\n  /**\n   * Filter using a selection name.\n   */\n  selection: LogicalOperand<string>;\n}\n\nexport function isSelectionPredicate(predicate: LogicalOperand<Predicate>): predicate is SelectionPredicate {\n  return predicate && predicate['selection'];\n}\n\nexport interface FieldPredicateBase {\n  // TODO: support aggregate\n\n  /**\n   * Time unit for the field to be filtered.\n   */\n  timeUnit?: TimeUnit;\n\n  /**\n   * Field to be filtered.\n   */\n  field: string;\n}\n\nexport interface FieldEqualPredicate extends FieldPredicateBase {\n  /**\n   * The value that the field should be equal to.\n   */\n  equal: string | number | boolean | DateTime;\n}\n\nexport function isFieldEqualPredicate(predicate: any): predicate is FieldEqualPredicate {\n  return predicate && !!predicate.field && predicate.equal !== undefined;\n}\n\nexport interface FieldLTPredicate extends FieldPredicateBase {\n  /**\n   * The value that the field should be less than.\n   */\n  lt: string | number | DateTime;\n}\n\nexport function isFieldLTPredicate(predicate: any): predicate is FieldLTPredicate {\n  return predicate && !!predicate.field && predicate.lt !== undefined;\n}\n\nexport interface FieldLTEPredicate extends FieldPredicateBase {\n  /**\n   * The value that the field should be less than or equals to.\n   */\n  lte: string | number | DateTime;\n}\n\nexport function isFieldLTEPredicate(predicate: any): predicate is FieldLTEPredicate {\n  return predicate && !!predicate.field && predicate.lte !== undefined;\n}\n\nexport interface FieldGTPredicate extends FieldPredicateBase {\n  /**\n   * The value that the field should be greater than.\n   */\n  gt: string | number | DateTime;\n}\n\nexport function isFieldGTPredicate(predicate: any): predicate is FieldGTPredicate {\n  return predicate && !!predicate.field && predicate.gt !== undefined;\n}\n\nexport interface FieldGTEPredicate extends FieldPredicateBase {\n  /**\n   * The value that the field should be greater than or equals to.\n   */\n  gte: string | number | DateTime;\n}\n\nexport function isFieldGTEPredicate(predicate: any): predicate is FieldGTEPredicate {\n  return predicate && !!predicate.field && predicate.gte !== undefined;\n}\n\nexport interface FieldRangePredicate extends FieldPredicateBase {\n  /**\n   * An array of inclusive minimum and maximum values\n   * for a field value of a data item to be included in the filtered data.\n   * @maxItems 2\n   * @minItems 2\n   */\n  range: (number | DateTime | null)[];\n}\n\nexport function isFieldRangePredicate(predicate: any): predicate is FieldRangePredicate {\n  if (predicate && predicate.field) {\n    if (isArray(predicate.range) && predicate.range.length === 2) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport interface FieldOneOfPredicate extends FieldPredicateBase {\n  /**\n   * A set of values that the `field`'s value should be a member of,\n   * for a data item included in the filtered data.\n   */\n  oneOf: string[] | number[] | boolean[] | DateTime[];\n}\n\nexport interface FieldValidPredicate extends FieldPredicateBase {\n  /**\n   * If set to true the field's value has to be valid, meaning both not `null` and not [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n   */\n  valid: boolean;\n}\n\nexport function isFieldOneOfPredicate(predicate: any): predicate is FieldOneOfPredicate {\n  return (\n    predicate && !!predicate.field && (isArray(predicate.oneOf) || isArray(predicate.in)) // backward compatibility\n  );\n}\n\nexport function isFieldValidPredicate(predicate: any): predicate is FieldValidPredicate {\n  return predicate && !!predicate.field && predicate.valid !== undefined;\n}\n\nexport function isFieldPredicate(\n  predicate: Predicate\n): predicate is\n  | FieldOneOfPredicate\n  | FieldEqualPredicate\n  | FieldRangePredicate\n  | FieldLTPredicate\n  | FieldGTPredicate\n  | FieldLTEPredicate\n  | FieldGTEPredicate {\n  return (\n    isFieldOneOfPredicate(predicate) ||\n    isFieldEqualPredicate(predicate) ||\n    isFieldRangePredicate(predicate) ||\n    isFieldLTPredicate(predicate) ||\n    isFieldGTPredicate(predicate) ||\n    isFieldLTEPredicate(predicate) ||\n    isFieldGTEPredicate(predicate)\n  );\n}\n\nfunction predicateValueExpr(v: number | string | boolean | DateTime, timeUnit: TimeUnit) {\n  return valueExpr(v, {timeUnit, time: true});\n}\n\nfunction predicateValuesExpr(vals: (number | string | boolean | DateTime)[], timeUnit: TimeUnit) {\n  return vals.map(v => predicateValueExpr(v, timeUnit));\n}\n\n// This method is used by Voyager.  Do not change its behavior without changing Voyager.\nexport function fieldFilterExpression(predicate: FieldPredicate, useInRange = true) {\n  const {field, timeUnit} = predicate;\n  const fieldExpr = timeUnit\n    ? // For timeUnit, cast into integer with time() so we can use ===, inrange, indexOf to compare values directly.\n      // TODO: We calculate timeUnit on the fly here. Consider if we would like to consolidate this with timeUnit pipeline\n      // TODO: support utc\n      'time(' + timeUnitFieldExpr(timeUnit, field) + ')'\n    : vgField(predicate, {expr: 'datum'});\n\n  if (isFieldEqualPredicate(predicate)) {\n    return fieldExpr + '===' + predicateValueExpr(predicate.equal, timeUnit);\n  } else if (isFieldLTPredicate(predicate)) {\n    const upper = predicate.lt;\n    return `${fieldExpr}<${predicateValueExpr(upper, timeUnit)}`;\n  } else if (isFieldGTPredicate(predicate)) {\n    const lower = predicate.gt;\n    return `${fieldExpr}>${predicateValueExpr(lower, timeUnit)}`;\n  } else if (isFieldLTEPredicate(predicate)) {\n    const upper = predicate.lte;\n    return `${fieldExpr}<=${predicateValueExpr(upper, timeUnit)}`;\n  } else if (isFieldGTEPredicate(predicate)) {\n    const lower = predicate.gte;\n    return `${fieldExpr}>=${predicateValueExpr(lower, timeUnit)}`;\n  } else if (isFieldOneOfPredicate(predicate)) {\n    return `indexof([${predicateValuesExpr(predicate.oneOf, timeUnit).join(',')}], ${fieldExpr}) !== -1`;\n  } else if (isFieldValidPredicate(predicate)) {\n    return predicate.valid ? `${fieldExpr}!==null&&!isNaN(${fieldExpr})` : `${fieldExpr}===null||isNaN(${fieldExpr})`;\n  } else if (isFieldRangePredicate(predicate)) {\n    const lower = predicate.range[0];\n    const upper = predicate.range[1];\n\n    if (lower !== null && upper !== null && useInRange) {\n      return (\n        'inrange(' +\n        fieldExpr +\n        ', [' +\n        predicateValueExpr(lower, timeUnit) +\n        ', ' +\n        predicateValueExpr(upper, timeUnit) +\n        '])'\n      );\n    }\n\n    const exprs = [];\n    if (lower !== null) {\n      exprs.push(`${fieldExpr} >= ${predicateValueExpr(lower, timeUnit)}`);\n    }\n    if (upper !== null) {\n      exprs.push(`${fieldExpr} <= ${predicateValueExpr(upper, timeUnit)}`);\n    }\n\n    return exprs.length > 0 ? exprs.join(' && ') : 'true';\n  }\n\n  /* istanbul ignore next: it should never reach here */\n  throw new Error(`Invalid field predicate: ${JSON.stringify(predicate)}`);\n}\n\nexport function normalizePredicate(f: Predicate): Predicate {\n  if (isFieldPredicate(f) && f.timeUnit) {\n    return {\n      ...f,\n      timeUnit: normalizeTimeUnit(f.timeUnit)\n    };\n  }\n  return f;\n}\n","import {AggregateOp} from 'vega';\nimport {BinParams} from './bin';\nimport {Data} from './data';\nimport {ImputeParams} from './impute';\nimport {LogicalOperand, normalizeLogicalOperand} from './logical';\nimport {normalizePredicate, Predicate} from './predicate';\nimport {SortField} from './sort';\nimport {TimeUnit} from './timeunit';\nimport {JoinAggregateTransform} from './transform';\n\nexport interface FilterTransform {\n  /**\n   * The `filter` property must be one of the predicate definitions:\n   *\n   * 1) an [expression](https://vega.github.io/vega-lite/docs/types.html#expression) string,\n   * where `datum` can be used to refer to the current data object\n   *\n   * 2) one of the field predicates: [`equal`](https://vega.github.io/vega-lite/docs/filter.html#equal-predicate),\n   * [`lt`](https://vega.github.io/vega-lite/docs/filter.html#lt-predicate),\n   * [`lte`](https://vega.github.io/vega-lite/docs/filter.html#lte-predicate),\n   * [`gt`](https://vega.github.io/vega-lite/docs/filter.html#gt-predicate),\n   * [`gte`](https://vega.github.io/vega-lite/docs/filter.html#gte-predicate),\n   * [`range`](https://vega.github.io/vega-lite/docs/filter.html#range-predicate),\n   * [`oneOf`](https://vega.github.io/vega-lite/docs/filter.html#one-of-predicate),\n   * or [`valid`](https://vega.github.io/vega-lite/docs/filter.html#valid-predicate),\n   *\n   * 3) a [selection predicate](https://vega.github.io/vega-lite/docs/filter.html#selection-predicate)\n   *\n   * 4) a logical operand that combines (1), (2), or (3).\n   */\n  // TODO: https://github.com/vega/vega-lite/issues/2901\n  filter: LogicalOperand<Predicate>;\n}\n\nexport function isFilter(t: Transform): t is FilterTransform {\n  return t['filter'] !== undefined;\n}\n\nexport interface CalculateTransform {\n  /**\n   * A [expression](https://vega.github.io/vega-lite/docs/types.html#expression) string. Use the variable `datum` to refer to the current data object.\n   */\n  calculate: string;\n\n  /**\n   * The field for storing the computed formula value.\n   */\n  as: string;\n}\n\nexport interface BinTransform {\n  /**\n   * An object indicating bin properties, or simply `true` for using default bin parameters.\n   */\n  bin: boolean | BinParams;\n\n  /**\n   * The data field to bin.\n   */\n  field: string;\n\n  /**\n   * The output fields at which to write the start and end bin values.\n   */\n  as: string | string[];\n}\n\nexport interface TimeUnitTransform {\n  /**\n   * The timeUnit.\n   */\n  timeUnit: TimeUnit;\n\n  /**\n   * The data field to apply time unit.\n   */\n  field: string;\n\n  /**\n   * The output field to write the timeUnit value.\n   */\n  as: string;\n}\n\nexport interface AggregateTransform {\n  /**\n   * Array of objects that define fields to aggregate.\n   */\n  aggregate: AggregatedFieldDef[];\n\n  /**\n   * The data fields to group by. If not specified, a single group containing all data objects will be used.\n   */\n  groupby?: string[];\n}\n\nexport interface AggregatedFieldDef {\n  /**\n   * The aggregation operation to apply to the fields (e.g., sum, average or count).\n   * See the [full list of supported aggregation operations](https://vega.github.io/vega-lite/docs/aggregate.html#ops)\n   * for more information.\n   */\n  op: AggregateOp;\n\n  /**\n   * The data field for which to compute aggregate function. This is required for all aggregation operations except `\"count\"`.\n   */\n  field?: string;\n\n  /**\n   * The output field names to use for each aggregated field.\n   */\n  as: string;\n}\n\nexport interface StackTransform {\n  /**\n   * The field which is stacked.\n   */\n  stack: string;\n  /**\n   * The data fields to group by.\n   */\n  groupby: string[];\n  /**\n   * Mode for stacking marks.\n   * __Default value:__ `\"zero\"`\n   */\n  offset?: 'zero' | 'center' | 'normalize';\n  /**\n   * Field that determines the order of leaves in the stacked charts.\n   */\n  sort?: SortField[];\n  /**\n   * Output field names. This can be either a string or an array of strings with\n   * two elements denoting the name for the fields for stack start and stack end\n   * respectively.\n   * If a single string(eg.\"val\") is provided, the end field will be \"val_end\".\n   */\n  as: string | string[];\n}\n\nexport type WindowOnlyOp =\n  | 'row_number'\n  | 'rank'\n  | 'dense_rank'\n  | 'percent_rank'\n  | 'cume_dist'\n  | 'ntile'\n  | 'lag'\n  | 'lead'\n  | 'first_value'\n  | 'last_value'\n  | 'nth_value';\n\nexport interface WindowFieldDef {\n  /**\n   * The window or aggregation operation to apply within a window (e.g.,`rank`, `lead`, `sum`, `average` or `count`). See the list of all supported operations [here](https://vega.github.io/vega-lite/docs/window.html#ops).\n   */\n  op: AggregateOp | WindowOnlyOp;\n\n  /**\n   * Parameter values for the window functions. Parameter values can be omitted for operations that do not accept a parameter.\n   *\n   * See the list of all supported operations and their parameters [here](https://vega.github.io/vega-lite/docs/transforms/window.html).\n   */\n  param?: number;\n\n  /**\n   * The data field for which to compute the aggregate or window function. This can be omitted for window functions that do not operate over a field such as `count`, `rank`, `dense_rank`.\n   */\n  field?: string;\n\n  /**\n   * The output name for the window operation.\n   */\n  as: string;\n}\n\nexport interface WindowTransform {\n  /**\n   * The definition of the fields in the window, and what calculations to use.\n   */\n  window: WindowFieldDef[];\n\n  /**\n   * A frame specification as a two-element array indicating how the sliding window should proceed. The array entries should either be a number indicating the offset from the current data object, or null to indicate unbounded rows preceding or following the current data object. The default value is `[null, 0]`, indicating that the sliding window includes the current object and all preceding objects. The value `[-5, 5]` indicates that the window should include five objects preceding and five objects following the current object. Finally, `[null, null]` indicates that the window frame should always include all data objects. If you this frame and want to assign the same value to add objects, you can use the simpler [join aggregate transform](https://vega.github.io/vega-lite/docs/joinaggregate.html). The only operators affected are the aggregation operations and the `first_value`, `last_value`, and `nth_value` window operations. The other window operations are not affected by this.\n   *\n   * __Default value:__:  `[null, 0]` (includes the current object and all preceding objects)\n   */\n  frame?: (null | number)[];\n\n  /**\n   * Indicates if the sliding window frame should ignore peer values (data that are considered identical by the sort criteria). The default is false, causing the window frame to expand to include all peer values. If set to true, the window frame will be defined by offset values only. This setting only affects those operations that depend on the window frame, namely aggregation operations and the first_value, last_value, and nth_value window operations.\n   *\n   * __Default value:__ `false`\n   */\n  ignorePeers?: boolean;\n\n  /**\n   * The data fields for partitioning the data objects into separate windows. If unspecified, all data points will be in a single window.\n   */\n  groupby?: string[];\n\n  /**\n   * A sort field definition for sorting data objects within a window. If two data objects are considered equal by the comparator, they are considered “peer” values of equal rank. If sort is not specified, the order is undefined: data objects are processed in the order they are observed and none are considered peers (the ignorePeers parameter is ignored and treated as if set to `true`).\n   */\n  sort?: SortField[];\n}\n\nexport interface JoinAggregateFieldDef {\n  /**\n   * The aggregation operation to apply (e.g., sum, average or count). See the list of all supported operations [here](https://vega.github.io/vega-lite/docs/aggregate.html#ops).\n   */\n  op: AggregateOp;\n\n  /**\n   * The data field for which to compute the aggregate function. This can be omitted for functions that do not operate over a field such as `count`.\n   */\n  field?: string;\n\n  /**\n   * The output name for the join aggregate operation.\n   */\n  as: string;\n}\n\nexport interface JoinAggregateTransform {\n  /**\n   * The definition of the fields in the join aggregate, and what calculations to use.\n   */\n  joinaggregate: JoinAggregateFieldDef[];\n\n  /**\n   * The data fields for partitioning the data objects into separate groups. If unspecified, all data points will be in a single group.\n   */\n  groupby?: string[];\n}\n\nexport interface ImputeSequence {\n  /**\n   * The starting value of the sequence.\n   * __Default value:__ `0`\n   */\n  start?: number;\n  /**\n   * The ending value(exclusive) of the sequence.\n   */\n  stop: number;\n  /**\n   * The step value between sequence entries.\n   * __Default value:__ `1` or `-1` if `stop < start`\n   */\n  step?: number;\n}\n\nexport function isImputeSequence(t: ImputeSequence | any[] | undefined): t is ImputeSequence {\n  return t && t['start'] !== undefined && t['stop'] !== undefined;\n}\n\nexport interface ImputeTransform extends ImputeParams {\n  /**\n   * The data field for which the missing values should be imputed.\n   */\n  impute: string;\n\n  /**\n   * A key field that uniquely identifies data objects within a group.\n   * Missing key values (those occurring in the data but not in the current group) will be imputed.\n   */\n  key: string;\n\n  /**\n   * An optional array of fields by which to group the values.\n   * Imputation will then be performed on a per-group basis.\n   */\n  groupby?: string[];\n}\n\nexport interface FlattenTransform {\n  /**\n   * An array of one or more data fields containing arrays to flatten.\n   * If multiple fields are specified, their array values should have a parallel structure, ideally with the same length.\n   * If the lengths of parallel arrays do not match,\n   * the longest array will be used with `null` values added for missing entries.\n   */\n  flatten: string[];\n\n  /**\n   * The output field names for extracted array values.\n   *\n   * __Default value:__ The field name of the corresponding array field\n   */\n  as?: string[];\n}\n\nexport interface SampleTransform {\n  /**\n   * The maximum number of data objects to include in the sample.\n   *\n   * __Default value:__ `1000`\n   */\n  sample: number;\n}\n\nexport interface LookupData {\n  /**\n   * Secondary data source to lookup in.\n   */\n  data: Data;\n  /**\n   * Key in data to lookup.\n   */\n  key: string;\n  /**\n   * Fields in foreign data to lookup.\n   * If not specified, the entire object is queried.\n   */\n  fields?: string[];\n}\n\nexport interface LookupTransform {\n  /**\n   * Key in primary data source.\n   */\n  lookup: string;\n\n  /**\n   * Secondary data reference.\n   */\n  from: LookupData;\n\n  /**\n   * The field or fields for storing the computed formula value.\n   * If `from.fields` is specified, the transform will use the same names for `as`.\n   * If `from.fields` is not specified, `as` has to be a string and we put the whole object into the data under the specified name.\n   */\n  as?: string | string[];\n\n  /**\n   * The default value to use if lookup fails.\n   *\n   * __Default value:__ `null`\n   */\n  default?: string;\n}\n\nexport interface FoldTransform {\n  /**\n   * An array of data fields indicating the properties to fold.\n   */\n  fold: string[];\n\n  /**\n   * The output field names for the key and value properties produced by the fold transform.\n   * __Default value:__ `[\"key\", \"value\"]`\n   */\n  as?: [string, string];\n}\n\nexport function isLookup(t: Transform): t is LookupTransform {\n  return t['lookup'] !== undefined;\n}\n\nexport function isSample(t: Transform): t is SampleTransform {\n  return t['sample'] !== undefined;\n}\n\nexport function isWindow(t: Transform): t is WindowTransform {\n  return t['window'] !== undefined;\n}\n\nexport function isJoinAggregate(t: Transform): t is JoinAggregateTransform {\n  return t['joinaggregate'] !== undefined;\n}\n\nexport function isFlatten(t: Transform): t is FlattenTransform {\n  return t['flatten'] !== undefined;\n}\nexport function isCalculate(t: Transform): t is CalculateTransform {\n  return t['calculate'] !== undefined;\n}\n\nexport function isBin(t: Transform): t is BinTransform {\n  return !!t['bin'];\n}\n\nexport function isImpute(t: Transform): t is ImputeTransform {\n  return t['impute'] !== undefined;\n}\n\nexport function isTimeUnit(t: Transform): t is TimeUnitTransform {\n  return t['timeUnit'] !== undefined;\n}\n\nexport function isAggregate(t: Transform): t is AggregateTransform {\n  return t['aggregate'] !== undefined;\n}\n\nexport function isStack(t: Transform): t is StackTransform {\n  return t['stack'] !== undefined;\n}\n\nexport function isFold(t: Transform): t is FoldTransform {\n  return t['fold'] !== undefined;\n}\n\nexport type Transform =\n  | FilterTransform\n  | CalculateTransform\n  | LookupTransform\n  | BinTransform\n  | TimeUnitTransform\n  | ImputeTransform\n  | AggregateTransform\n  | WindowTransform\n  | JoinAggregateTransform\n  | StackTransform\n  | FlattenTransform\n  | FoldTransform\n  | SampleTransform;\n\nexport function normalizeTransform(transform: Transform[]) {\n  return transform.map(t => {\n    if (isFilter(t)) {\n      return {\n        filter: normalizeLogicalOperand(t.filter, normalizePredicate)\n      };\n    }\n    return t;\n  });\n}\n","import {toSet} from 'vega-util';\nimport {BAR, isMarkDef} from './mark';\nimport {FacetedCompositeUnitSpec} from './spec/unit';\n\n// TODO: move to vl.spec.validator?\nexport interface RequiredChannelMap {\n  [mark: string]: string[];\n}\n\n/**\n * Required Encoding Channels for each mark type\n */\nexport const DEFAULT_REQUIRED_CHANNEL_MAP: RequiredChannelMap = {\n  text: ['text'],\n  line: ['x', 'y'],\n  trail: ['x', 'y'],\n  area: ['x', 'y']\n};\n\nexport interface SupportedChannelMap {\n  [mark: string]: {\n    [channel: string]: boolean;\n  };\n}\n\n/**\n * Supported Encoding Channel for each mark type\n */\nexport const DEFAULT_SUPPORTED_CHANNEL_TYPE: SupportedChannelMap = {\n  bar: toSet(['row', 'column', 'x', 'y', 'size', 'color', 'fill', 'stroke', 'detail']),\n  line: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'color', 'detail']),\n  trail: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'color', 'detail', 'size']),\n  area: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'detail']),\n  tick: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'detail']),\n  circle: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'size', 'detail']),\n  square: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'size', 'detail']),\n  point: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'size', 'detail', 'shape']),\n  geoshape: toSet(['row', 'column', 'color', 'fill', 'stroke', 'detail', 'shape']),\n  text: toSet(['row', 'column', 'size', 'color', 'fill', 'stroke', 'text']) // TODO(#724) revise\n};\n\n// TODO: consider if we should add validate method and\n// requires ZSchema in the main vega-lite repo\n\n/**\n * Further check if encoding mapping of a spec is invalid and\n * return error if it is invalid.\n *\n * This checks if\n * (1) all the required encoding channels for the mark type are specified\n * (2) all the specified encoding channels are supported by the mark type\n * @param  {[type]} spec [description]\n * @param  {RequiredChannelMap = DefaultRequiredChannelMap}  requiredChannelMap\n * @param  {SupportedChannelMap = DefaultSupportedChannelMap} supportedChannelMap\n * @return {String} Return one reason why the encoding is invalid,\n *                  or null if the encoding is valid.\n */\nexport function getEncodingMappingError(\n  spec: FacetedCompositeUnitSpec,\n  requiredChannelMap: RequiredChannelMap = DEFAULT_REQUIRED_CHANNEL_MAP,\n  supportedChannelMap: SupportedChannelMap = DEFAULT_SUPPORTED_CHANNEL_TYPE\n) {\n  const mark = isMarkDef(spec.mark) ? spec.mark.type : spec.mark;\n  const encoding = spec.encoding;\n  const requiredChannels = requiredChannelMap[mark];\n  const supportedChannels = supportedChannelMap[mark];\n\n  for (const i in requiredChannels) {\n    // all required channels are in encoding`\n    if (!(requiredChannels[i] in encoding)) {\n      return 'Missing encoding channel \"' + requiredChannels[i] + '\" for mark \"' + mark + '\"';\n    }\n  }\n\n  for (const channel in encoding) {\n    // all channels in encoding are supported\n    if (!supportedChannels[channel]) {\n      return 'Encoding channel \"' + channel + '\" is not supported by mark type \"' + mark + '\"';\n    }\n  }\n\n  if (mark === BAR && !encoding.x && !encoding.y) {\n    return 'Missing both x and y for bar';\n  }\n\n  return null;\n}\n","import {isString} from 'vega-util';\nimport {Config} from '../config';\nimport {InlineDataset} from '../data';\nimport * as log from '../log';\nimport {Dict} from '../util';\nimport {BaseSpec} from './index';\n\n/**\n * @minimum 0\n */\nexport type Padding = number | {top?: number; bottom?: number; left?: number; right?: number};\n\nexport type Datasets = Dict<InlineDataset>;\n\nexport type TopLevel<S extends BaseSpec> = S &\n  TopLevelProperties & {\n    /**\n     * URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v3.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.\n     * @format uri\n     */\n    $schema?: string;\n\n    /**\n     * Vega-Lite configuration object.  This property can only be defined at the top-level of a specification.\n     */\n    config?: Config;\n\n    /**\n     * A global data store for named datasets. This is a mapping from names to inline datasets.\n     * This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property.\n     */\n    datasets?: Datasets;\n\n    /**\n     * Optional metadata that will be passed to Vega.\n     * This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.\n     */\n    usermeta?: object;\n  };\n\nexport interface TopLevelProperties {\n  /**\n   * CSS color property to use as the background of the entire view.\n   *\n   * __Default value:__ none (transparent)\n   */\n  background?: string;\n\n  /**\n   * The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle.  If a number, specifies padding for all sides.\n   * If an object, the value should have the format `{\"left\": 5, \"top\": 5, \"right\": 5, \"bottom\": 5}` to specify padding for each side of the visualization.\n   *\n   * __Default value__: `5`\n   */\n  padding?: Padding;\n\n  /**\n   * Sets how the visualization size should be determined. If a string, should be one of `\"pad\"`, `\"fit\"` or `\"none\"`.\n   * Object values can additionally specify parameters for content sizing and automatic resizing.\n   * `\"fit\"` is only supported for single and layered views that don't use `rangeStep`.\n   *\n   * __Default value__: `pad`\n   */\n  autosize?: AutosizeType | AutoSizeParams;\n}\n\nexport type AutosizeType = 'pad' | 'fit' | 'none';\n\nexport interface AutoSizeParams {\n  /**\n   * The sizing format type. One of `\"pad\"`, `\"fit\"` or `\"none\"`. See the [autosize type](https://vega.github.io/vega-lite/docs/size.html#autosize) documentation for descriptions of each.\n   *\n   * __Default value__: `\"pad\"`\n   */\n  type?: AutosizeType;\n\n  /**\n   * A boolean flag indicating if autosize layout should be re-calculated on every view update.\n   *\n   * __Default value__: `false`\n   */\n  resize?: boolean;\n\n  /**\n   * Determines how size calculation should be performed, one of `\"content\"` or `\"padding\"`. The default setting (`\"content\"`) interprets the width and height settings as the data rectangle (plotting) dimensions, to which padding is then added. In contrast, the `\"padding\"` setting includes the padding within the view size calculations, such that the width and height settings indicate the **total** intended size of the view.\n   *\n   * __Default value__: `\"content\"`\n   */\n  contains?: 'content' | 'padding';\n}\n\nfunction _normalizeAutoSize(autosize: AutosizeType | AutoSizeParams) {\n  return isString(autosize) ? {type: autosize} : autosize || {};\n}\n\nexport function normalizeAutoSize(\n  topLevelAutosize: AutosizeType | AutoSizeParams,\n  configAutosize: AutosizeType | AutoSizeParams,\n  isUnitOrLayer: boolean = true\n): AutoSizeParams {\n  const autosize: AutoSizeParams = {\n    type: 'pad',\n    ..._normalizeAutoSize(configAutosize),\n    ..._normalizeAutoSize(topLevelAutosize)\n  };\n\n  if (autosize.type === 'fit') {\n    if (!isUnitOrLayer) {\n      log.warn(log.message.FIT_NON_SINGLE);\n      autosize.type = 'pad';\n    }\n  }\n\n  return autosize;\n}\n\nconst TOP_LEVEL_PROPERTIES: (keyof TopLevelProperties)[] = [\n  'background',\n  'padding'\n  // We do not include \"autosize\" here as it is supported by only unit and layer specs and thus need to be normalized\n];\n\nexport function extractTopLevelProperties<T extends TopLevelProperties>(t: T) {\n  return TOP_LEVEL_PROPERTIES.reduce((o, p) => {\n    if (t && t[p] !== undefined) {\n      o[p] = t[p];\n    }\n    return o;\n  }, {});\n}\n","import {Data} from '../data';\nimport {TitleParams} from '../title';\nimport {Transform} from '../transform';\nimport {BaseMarkConfig, LayoutAlign, RowCol} from '../vega.schema';\n\nexport {TopLevel} from './toplevel';\n\n/**\n * Common properties for all types of specification\n */\nexport type BaseSpec = Partial<DataMixins> & {\n  /**\n   * Title for the plot.\n   */\n  title?: string | TitleParams;\n\n  /**\n   * Name of the visualization for later reference.\n   */\n  name?: string;\n\n  /**\n   * Description of this mark for commenting purpose.\n   */\n  description?: string;\n\n  /**\n   * An object describing the data source\n   */\n  data?: Data;\n\n  /**\n   * An array of data transformations such as filter and new field calculation.\n   */\n  transform?: Transform[];\n};\n\nexport interface DataMixins {\n  /**\n   * An object describing the data source\n   */\n  data: Data;\n}\n\n// TODO(https://github.com/vega/vega-lite/issues/2503): Make this generic so we can support some form of top-down sizing.\n/**\n * Common properties for specifying width and height of unit and layer specifications.\n */\nexport interface LayoutSizeMixins {\n  /**\n   * The width of a visualization.\n   *\n   * __Default value:__ This will be determined by the following rules:\n   *\n   * - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its x-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config).\n   * - For x-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the width is [determined by the range step, paddings, and the cardinality of the field mapped to x-channel](https://vega.github.io/vega-lite/docs/scale.html#band).   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config).\n   * - If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](https://vega.github.io/vega-lite/docs/size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.\n   *\n   * __Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view.\n   *\n   * __See also:__ The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n   */\n  width?: number;\n\n  /**\n   * The height of a visualization.\n   *\n   * __Default value:__\n   * - If a view's [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `\"fit\"` or its y-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config).\n   * - For y-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the height is [determined by the range step, paddings, and the cardinality of the field mapped to y-channel](https://vega.github.io/vega-lite/docs/scale.html#band). Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config).\n   * - If no field is mapped to `y` channel, the `height` will be the value of `rangeStep`.\n   *\n   * __Note__: For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view.\n   *\n   * __See also:__ The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.\n   */\n  height?: number;\n}\n\nexport interface LayerUnitMixins extends LayoutSizeMixins {\n  /**\n   * An object defining the view background's fill and stroke.\n   *\n   * __Default value:__ none (transparent)\n   */\n  view?: ViewBackground;\n}\n\nexport interface BaseViewBackground\n  extends Partial<\n    Pick<\n      BaseMarkConfig,\n      | 'cornerRadius'\n      | 'fillOpacity'\n      | 'opacity'\n      | 'strokeCap'\n      | 'strokeDash'\n      | 'strokeDashOffset'\n      | 'strokeJoin'\n      | 'strokeMiterLimit'\n      | 'strokeOpacity'\n      | 'strokeWidth'\n    >\n  > {\n  // Override documentations for fill and stroke\n  /**\n   * The fill color.\n   *\n   * __Default value:__ `undefined`\n   */\n  fill?: string;\n\n  /**\n   * The stroke color.\n   *\n   * __Default value:__ `\"#ddd\"`\n   */\n  stroke?: string;\n}\n\nexport interface ViewBackground extends BaseViewBackground {\n  /**\n   * A string or array of strings indicating the name of custom styles to apply to the view background. A style is a named collection of mark property defaults defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles.\n   *\n   * __Default value:__ `\"cell\"`\n   * __Note:__ Any specified view background properties will augment the default style.\n   */\n  style?: string;\n}\n\nexport interface BoundsMixins {\n  /**\n   * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\n   *\n   * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\n   * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\n   *\n   * __Default value:__ `\"full\"`\n   */\n\n  bounds?: 'full' | 'flush';\n}\n\n/**\n * Base layout for FacetSpec and RepeatSpec.\n * This is named \"GenericComposition\" layout as ConcatLayout is a GenericCompositionLayout too\n * (but _not_ vice versa).\n */\nexport interface GenericCompositionLayout extends BoundsMixins {\n  /**\n   * The alignment to apply to grid rows and columns.\n   * The supported string values are `\"all\"`, `\"each\"`, and `\"none\"`.\n   *\n   * - For `\"none\"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.\n   * - For `\"each\"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.\n   * - For `\"all\"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.\n   *\n   * Alternatively, an object value of the form `{\"row\": string, \"column\": string}` can be used to supply different alignments for rows and columns.\n   *\n   * __Default value:__ `\"all\"`.\n   */\n  align?: LayoutAlign | RowCol<LayoutAlign>;\n\n  /**\n   * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\n   *\n   * An object value of the form `{\"row\": boolean, \"column\": boolean}` can be used to supply different centering values for rows and columns.\n   *\n   * __Default value:__ `false`\n   */\n  center?: boolean | RowCol<boolean>;\n\n  /**\n   * The spacing in pixels between sub-views of the composition operator.\n   * An object of the form `{\"row\": number, \"column\": number}` can be used to set\n   * different spacing values for rows and columns.\n   *\n   * __Default value__: `20`\n   */\n  spacing?: number | RowCol<number>;\n}\n\nexport const DEFAULT_SPACING = 20;\n\nexport function extractCompositionLayout(layout: GenericCompositionLayout): GenericCompositionLayout {\n  const {align = undefined, center = undefined, bounds = undefined, spacing = undefined} = layout || {};\n  return {align, bounds, center, spacing};\n}\n","import {\n  AggregateOp,\n  Align,\n  Compare as VgCompare,\n  Field as VgField,\n  FlattenTransform as VgFlattenTransform,\n  FoldTransform as VgFoldTransform,\n  FontStyle as VgFontStyle,\n  FontWeight as VgFontWeight,\n  LayoutAlign,\n  ProjectionType,\n  SampleTransform as VgSampleTransform,\n  SignalRef,\n  SortField as VgSortField,\n  TextBaseline as VgTextBaseline,\n  UnionSortField as VgUnionSortField\n} from 'vega';\nimport {isArray} from 'vega-util';\nimport {BaseBin} from './bin';\nimport {NiceTime, ScaleType} from './scale';\nimport {StackOffset} from './stack';\nimport {WindowOnlyOp} from './transform';\nimport {Flag, flagKeys} from './util';\n\nexport {VgSortField, VgUnionSortField, VgCompare, LayoutAlign, ProjectionType};\n\nexport type Color = string;\n\nexport interface VgData {\n  name: string;\n  source?: string;\n  values?: any;\n  format?: {\n    type?: string;\n    parse?: string | object;\n    property?: string;\n    feature?: string;\n    mesh?: string;\n  };\n  url?: string;\n  transform?: VgTransform[];\n}\n\nexport interface VgDataRef {\n  data: string;\n  field: VgField;\n  sort?: VgSortField;\n}\n\nexport function isSignalRef(o: any): o is SignalRef {\n  return !!o['signal'];\n}\n\nexport type EventStream = any;\n\n// TODO: add type of value (Make it VgValueRef<T> {value?:T ...})\nexport interface VgValueRef {\n  value?: number | string | boolean;\n  field?:\n    | string\n    | {\n        datum?: string;\n        group?: string;\n        parent?: string;\n      };\n  signal?: string;\n  scale?: string; // TODO: object\n  mult?: number;\n  offset?: number | VgValueRef;\n  band?: boolean | number | VgValueRef;\n}\n\n// TODO: add vg prefix\nexport interface DataRefUnionDomain {\n  fields: (any[] | VgDataRef | SignalRef)[];\n  sort?: VgUnionSortField;\n}\n\nexport interface VgFieldRefUnionDomain {\n  data: string;\n  fields: VgField[];\n  sort?: VgUnionSortField;\n}\n\nexport interface SchemeConfig {\n  scheme: string;\n  extent?: number[];\n  count?: number;\n}\n\nexport type VgRange =\n  | string\n  | VgDataRef\n  | (number | string | VgDataRef | SignalRef)[]\n  | SchemeConfig\n  | VgRangeStep\n  | SignalRef;\n\nexport function isVgRangeStep(range: VgRange): range is VgRangeStep {\n  return !!range['step'];\n}\n\nexport interface VgRangeStep {\n  step: number | SignalRef;\n}\n// Domains that are not a union of domains\nexport type VgNonUnionDomain = any[] | VgDataRef | SignalRef;\nexport type VgDomain = VgNonUnionDomain | DataRefUnionDomain | VgFieldRefUnionDomain;\n\nexport type VgMarkGroup = any;\n\nexport interface VgProjection {\n  /*\n   * The name of the projection.\n   */\n  name: string;\n  /*\n   * The type of the projection.\n   */\n  type?: ProjectionType;\n  /*\n   * The clip angle of the projection.\n   */\n  clipAngle?: number;\n  /*\n   * Sets the projection’s viewport clip extent to the specified bounds in pixels\n   */\n  clipExtent?: number[][];\n  /*\n   * Sets the projection’s scale factor to the specified value\n   */\n  scale?: number;\n  /*\n   * The translation of the projection.\n   */\n  translate?: number[];\n  /*\n   * The center of the projection.\n   */\n  center?: number[];\n  /**\n   * The rotation of the projection.\n   */\n  rotate?: number[];\n  /*\n   * The desired precision of the projection.\n   */\n  precision?: string;\n  /*\n   * GeoJSON data to which the projection should attempt to automatically fit the translate and scale parameters..\n   */\n  fit?: SignalRef | object | any[];\n  /*\n   * Used in conjunction with fit, provides the pixel area to which the projection should be automatically fit.\n   */\n  extent?: SignalRef | number[][];\n  /*\n   * Used in conjunction with fit, provides the width and height in pixels of the area to which the projection should be automatically fit.\n   */\n  size?: SignalRef | (number | SignalRef)[];\n\n  /* The following properties are all supported for specific types of projections. Consult the d3-geo-projection library for more information: https://github.com/d3/d3-geo-projection */\n  coefficient?: number;\n  distance?: number;\n  fraction?: number;\n  lobes?: number;\n  parallel?: number;\n  radius?: number;\n  ratio?: number;\n  spacing?: number;\n  tilt?: number;\n}\n\n// TODO: Eventually migrate to Vega-typings and make Vega typings take generic SR that can allow us to replace SignalRef with SignalComponent\nexport interface VgScale {\n  name: string;\n  type: ScaleType;\n  domain?: VgDomain;\n  domainRaw?: SignalRef;\n  bins?: number[] | SignalRef;\n  range: VgRange;\n  clamp?: boolean;\n  base?: number;\n  exponent?: number;\n  constant?: number;\n  interpolate?: ScaleInterpolate | ScaleInterpolateParams;\n  nice?: boolean | number | NiceTime | {interval: string; step: number};\n  padding?: number;\n  paddingInner?: number;\n  paddingOuter?: number;\n  reverse?: boolean;\n  round?: boolean;\n  zero?: boolean;\n}\n\nexport type ScaleInterpolate = 'rgb' | 'lab' | 'hcl' | 'hsl' | 'hsl-long' | 'hcl-long' | 'cubehelix' | 'cubehelix-long';\n\nexport interface ScaleInterpolateParams {\n  type: 'rgb' | 'cubehelix' | 'cubehelix-long';\n  gamma?: number;\n}\n\nexport interface RowCol<T> {\n  row?: T;\n  column?: T;\n}\n\nexport interface VgLayout {\n  center?: boolean | RowCol<boolean>;\n  padding?: number | RowCol<number>;\n  headerBand?: number | RowCol<number>;\n  footerBand?: number | RowCol<number>;\n  offset?:\n    | number\n    | {\n        rowHeader?: number;\n        rowFooter?: number;\n        rowTitle?: number;\n        columnHeader?: number;\n        columnFooter?: number;\n        columnTitle?: number;\n      };\n  bounds?: 'full' | 'flush';\n  columns?: number | {signal: string};\n  align?: LayoutAlign | RowCol<LayoutAlign>;\n}\n\nexport function isDataRefUnionedDomain(domain: VgDomain): domain is DataRefUnionDomain {\n  if (!isArray(domain)) {\n    return 'fields' in domain && !('data' in domain);\n  }\n  return false;\n}\n\nexport function isFieldRefUnionDomain(domain: VgDomain): domain is VgFieldRefUnionDomain {\n  if (!isArray(domain)) {\n    return 'fields' in domain && 'data' in domain;\n  }\n  return false;\n}\n\nexport function isDataRefDomain(domain: VgDomain): domain is VgDataRef {\n  if (!isArray(domain)) {\n    return 'field' in domain && 'data' in domain;\n  }\n  return false;\n}\n\nexport type VgEncodeChannel =\n  | 'x'\n  | 'x2'\n  | 'xc'\n  | 'width'\n  | 'y'\n  | 'y2'\n  | 'yc'\n  | 'height'\n  | 'opacity'\n  | 'fill'\n  | 'fillOpacity'\n  | 'stroke'\n  | 'strokeWidth'\n  | 'strokeCap'\n  | 'strokeOpacity'\n  | 'strokeDash'\n  | 'strokeDashOffset'\n  | 'strokeMiterLimit'\n  | 'strokeJoin'\n  | 'cursor'\n  | 'clip'\n  | 'size'\n  | 'shape'\n  | 'path'\n  | 'innerRadius'\n  | 'outerRadius'\n  | 'startAngle'\n  | 'endAngle'\n  | 'interpolate'\n  | 'tension'\n  | 'orient'\n  | 'url'\n  | 'align'\n  | 'baseline'\n  | 'text'\n  | 'dir'\n  | 'ellipsis'\n  | 'limit'\n  | 'dx'\n  | 'dy'\n  | 'radius'\n  | 'theta'\n  | 'angle'\n  | 'font'\n  | 'fontSize'\n  | 'fontWeight'\n  | 'fontStyle'\n  | 'tooltip'\n  | 'href'\n  | 'cursor'\n  | 'defined'\n  | 'cornerRadius';\nexport type VgEncodeEntry = {[k in VgEncodeChannel]?: VgValueRef | (VgValueRef & {test?: string})[]};\n\n// TODO: make export interface VgEncodeEntry {\n//   x?: VgValueRef<number>\n//   y?: VgValueRef<number>\n//  ...\n//   color?: VgValueRef<string>\n//  ...\n// }\n\nexport interface VgBinTransform extends BaseBin {\n  type: 'bin';\n  extent?: number[] | {signal: string};\n  field: string;\n  as: string[];\n  signal?: string;\n}\n\nexport interface VgExtentTransform {\n  type: 'extent';\n  field: string;\n  signal: string;\n}\n\nexport interface VgFormulaTransform {\n  type: 'formula';\n  as: string;\n  expr: string;\n}\n\nexport interface VgFilterTransform {\n  type: 'filter';\n  expr: string;\n}\n\nexport interface VgAggregateTransform {\n  type: 'aggregate';\n  groupby?: VgField[];\n  fields?: VgField[];\n  ops?: AggregateOp[];\n  as?: string[];\n  cross?: boolean;\n  drop?: boolean;\n}\n\nexport interface VgCollectTransform {\n  type: 'collect';\n  sort: VgCompare;\n}\n\nexport interface VgLookupTransform {\n  type: 'lookup';\n  from: string;\n  key: string;\n  fields: string[];\n  values?: string[];\n  as?: string[];\n  default?: string;\n}\n\nexport interface VgStackTransform {\n  type: 'stack';\n  offset?: StackOffset;\n  groupby: string[];\n  field: string;\n  sort: VgCompare;\n  as: string[];\n}\n\nexport interface VgIdentifierTransform {\n  type: 'identifier';\n  as: string;\n}\n\nexport type VgTransform =\n  | VgBinTransform\n  | VgExtentTransform\n  | VgFormulaTransform\n  | VgAggregateTransform\n  | VgFilterTransform\n  | VgFlattenTransform\n  | VgImputeTransform\n  | VgStackTransform\n  | VgCollectTransform\n  | VgLookupTransform\n  | VgIdentifierTransform\n  | VgGeoPointTransform\n  | VgGeoJSONTransform\n  | VgWindowTransform\n  | VgJoinAggregateTransform\n  | VgFoldTransform\n  | VgSampleTransform;\n\nexport interface VgGeoPointTransform {\n  type: 'geopoint';\n  projection: string; // projection name\n  fields: VgField[];\n  as?: string[];\n}\n\nexport interface VgGeoShapeTransform {\n  type: 'geoshape';\n  projection: string; // projection name\n  field?: VgField;\n  as?: string;\n}\n\nexport interface VgGeoJSONTransform {\n  type: 'geojson';\n  fields?: VgField[];\n  geojson?: VgField;\n  signal: string;\n}\n\nexport type VgPostEncodingTransform = VgGeoShapeTransform;\n\nexport type VgGuideEncode = any; // TODO: replace this (See guideEncode in Vega Schema)\n\nexport type ImputeMethod = 'value' | 'median' | 'max' | 'min' | 'mean';\n\nexport interface VgImputeTransform {\n  type: 'impute';\n  groupby?: string[];\n  field: string;\n  key: string;\n  keyvals?: any[] | SignalRef;\n  method?: ImputeMethod;\n  value?: any;\n}\n\nexport type Interpolate =\n  | 'linear'\n  | 'linear-closed'\n  | 'step'\n  | 'step-before'\n  | 'step-after'\n  | 'basis'\n  | 'basis-open'\n  | 'basis-closed'\n  | 'cardinal'\n  | 'cardinal-open'\n  | 'cardinal-closed'\n  | 'bundle'\n  | 'monotone';\nexport type Orient = 'horizontal' | 'vertical';\nexport type Cursor =\n  | 'auto'\n  | 'default'\n  | 'none'\n  | 'context-menu'\n  | 'help'\n  | 'pointer'\n  | 'progress'\n  | 'wait'\n  | 'cell'\n  | 'crosshair'\n  | 'text'\n  | 'vertical-text'\n  | 'alias'\n  | 'copy'\n  | 'move'\n  | 'no-drop'\n  | 'not-allowed'\n  | 'e-resize'\n  | 'n-resize'\n  | 'ne-resize'\n  | 'nw-resize'\n  | 's-resize'\n  | 'se-resize'\n  | 'sw-resize'\n  | 'w-resize'\n  | 'ew-resize'\n  | 'ns-resize'\n  | 'nesw-resize'\n  | 'nwse-resize'\n  | 'col-resize'\n  | 'row-resize'\n  | 'all-scroll'\n  | 'zoom-in'\n  | 'zoom-out'\n  | 'grab'\n  | 'grabbing';\nexport type StrokeCap = 'butt' | 'round' | 'square';\nexport type StrokeJoin = 'miter' | 'round' | 'bevel';\nexport type Dir = 'ltr' | 'rtl';\n\nexport interface BaseMarkConfig {\n  /**\n   * Default Fill Color.  This has higher precedence than `config.color`\n   *\n   * __Default value:__ (None)\n   *\n   */\n  fill?: Color;\n\n  /**\n   * Default Stroke Color.  This has higher precedence than `config.color`\n   *\n   * __Default value:__ (None)\n   *\n   */\n  stroke?: Color;\n\n  // ---------- Opacity ----------\n  /**\n   * The overall opacity (value between [0,1]).\n   *\n   * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.\n   *\n   * @minimum 0\n   * @maximum 1\n   */\n  opacity?: number;\n\n  /**\n   * The fill opacity (value between [0,1]).\n   *\n   * __Default value:__ `1`\n   *\n   * @minimum 0\n   * @maximum 1\n   */\n  fillOpacity?: number;\n\n  /**\n   * The stroke opacity (value between [0,1]).\n   *\n   * __Default value:__ `1`\n   *\n   * @minimum 0\n   * @maximum 1\n   */\n  strokeOpacity?: number;\n\n  // ---------- Stroke Style ----------\n  /**\n   * The stroke width, in pixels.\n   *\n   * @minimum 0\n   */\n  strokeWidth?: number;\n\n  /**\n   * The stroke cap for line ending style. One of `\"butt\"`, `\"round\"`, or `\"square\"`.\n   *\n   * __Default value:__ `\"square\"`\n   */\n  strokeCap?: StrokeCap;\n\n  /**\n   * An array of alternating stroke, space lengths for creating dashed or dotted lines.\n   */\n  strokeDash?: number[];\n\n  /**\n   * The offset (in pixels) into which to begin drawing with the stroke dash array.\n   */\n  strokeDashOffset?: number;\n\n  /**\n   * The stroke line join method. One of `\"miter\"`, `\"round\"` or `\"bevel\"`.\n   *\n   * __Default value:__ `\"miter\"`\n   */\n  strokeJoin?: StrokeJoin;\n\n  /**\n   * The miter limit at which to bevel a line join.\n   */\n  strokeMiterLimit?: number;\n\n  // ---------- Orientation: Bar, Tick, Line, Area ----------\n  /**\n   * The orientation of a non-stacked bar, tick, area, and line charts.\n   * The value is either horizontal (default) or vertical.\n   * - For bar, rule and tick, this determines whether the size of the bar and tick\n   * should be applied to x or y dimension.\n   * - For area, this property determines the orient property of the Vega output.\n   * - For line and trail marks, this property determines the sort order of the points in the line\n   * if `config.sortLineBy` is not specified.\n   * For stacked charts, this is always determined by the orientation of the stack;\n   * therefore explicitly specified value will be ignored.\n   */\n  orient?: Orient;\n\n  // ---------- Interpolation: Line / area ----------\n  /**\n   * The line interpolation method to use for line and area marks. One of the following:\n   * - `\"linear\"`: piecewise linear segments, as in a polyline.\n   * - `\"linear-closed\"`: close the linear segments to form a polygon.\n   * - `\"step\"`: alternate between horizontal and vertical segments, as in a step function.\n   * - `\"step-before\"`: alternate between vertical and horizontal segments, as in a step function.\n   * - `\"step-after\"`: alternate between horizontal and vertical segments, as in a step function.\n   * - `\"basis\"`: a B-spline, with control point duplication on the ends.\n   * - `\"basis-open\"`: an open B-spline; may not intersect the start or end.\n   * - `\"basis-closed\"`: a closed B-spline, as in a loop.\n   * - `\"cardinal\"`: a Cardinal spline, with control point duplication on the ends.\n   * - `\"cardinal-open\"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\n   * - `\"cardinal-closed\"`: a closed Cardinal spline, as in a loop.\n   * - `\"bundle\"`: equivalent to basis, except the tension parameter is used to straighten the spline.\n   * - `\"monotone\"`: cubic interpolation that preserves monotonicity in y.\n   */\n  interpolate?: Interpolate;\n  /**\n   * Depending on the interpolation type, sets the tension parameter (for line and area marks).\n   * @minimum 0\n   * @maximum 1\n   */\n  tension?: number;\n\n  /**\n   * The default symbol shape to use. One of: `\"circle\"` (default), `\"square\"`, `\"cross\"`, `\"diamond\"`, `\"triangle-up\"`, or `\"triangle-down\"`, or a custom SVG path.\n   *\n   * __Default value:__ `\"circle\"`\n   *\n   */\n  shape?: string;\n\n  /**\n   * The pixel area each the point/circle/square.\n   * For example: in the case of circles, the radius is determined in part by the square root of the size value.\n   *\n   * __Default value:__ `30`\n   *\n   * @minimum 0\n   */\n  size?: number;\n\n  // Text / Label Mark Config\n\n  /**\n   * The horizontal alignment of the text. One of `\"left\"`, `\"right\"`, `\"center\"`.\n   */\n  align?: Align;\n\n  /**\n   * The rotation angle of the text, in degrees.\n   * @minimum 0\n   * @maximum 360\n   */\n  angle?: number;\n\n  /**\n   * The vertical alignment of the text. One of `\"top\"`, `\"middle\"`, `\"bottom\"`.\n   *\n   * __Default value:__ `\"middle\"`\n   *\n   */\n  baseline?: VgTextBaseline;\n\n  /**\n   * The direction of the text. One of `\"ltr\"` (left-to-right) or `\"rtl\"` (right-to-left). This property determines on which side is truncated in response to the limit parameter.\n   *\n   * __Default value:__ `\"ltr\"`\n   */\n  dir?: Dir;\n\n  /**\n   * The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n   */\n  dx?: number;\n\n  /**\n   * The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\n   */\n  dy?: number;\n\n  /**\n   * Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.\n   * @minimum 0\n   */\n  radius?: number;\n\n  /**\n   * The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\n   *\n   * __Default value:__ `0`, indicating no limit\n   */\n  limit?: number;\n\n  /**\n   * The ellipsis string for text truncated in response to the limit parameter.\n   *\n   * __Default value:__ `\"…\"`\n   */\n  ellipsis?: string;\n\n  /**\n   * Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating \"north\".\n   */\n  theta?: number;\n\n  /**\n   * The typeface to set the text in (e.g., `\"Helvetica Neue\"`).\n   */\n  font?: string;\n\n  /**\n   * The font size, in pixels.\n   * @minimum 0\n   *\n   * __Default value:__ `11`\n   */\n  fontSize?: number;\n\n  /**\n   * The font style (e.g., `\"italic\"`).\n   */\n  fontStyle?: VgFontStyle;\n  /**\n   * The font weight.\n   * This can be either a string (e.g `\"bold\"`, `\"normal\"`) or a number (`100`, `200`, `300`, ..., `900` where `\"normal\"` = `400` and `\"bold\"` = `700`).\n   */\n  fontWeight?: VgFontWeight;\n\n  /**\n   * Placeholder text if the `text` channel is not specified\n   */\n  text?: string;\n\n  /**\n   * A URL to load upon mouse click. If defined, the mark acts as a hyperlink.\n   *\n   * @format uri\n   */\n  href?: string;\n\n  /**\n   * The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.\n   */\n  cursor?: Cursor;\n\n  /**\n   * The tooltip text to show upon mouse hover.\n   */\n  tooltip?: any;\n\n  // ---------- Corner Radius: Bar, Tick, Rect ----------\n\n  /**\n   * The radius in pixels of rounded rectangle corners.\n   *\n   * __Default value:__ `0`\n   */\n  cornerRadius?: number;\n}\n\nconst VG_MARK_CONFIG_INDEX: Flag<keyof BaseMarkConfig> = {\n  opacity: 1,\n  fill: 1,\n  fillOpacity: 1,\n  stroke: 1,\n  strokeCap: 1,\n  strokeWidth: 1,\n  strokeOpacity: 1,\n  strokeDash: 1,\n  strokeDashOffset: 1,\n  strokeJoin: 1,\n  strokeMiterLimit: 1,\n  size: 1,\n  shape: 1,\n  interpolate: 1,\n  tension: 1,\n  orient: 1,\n  align: 1,\n  baseline: 1,\n  text: 1,\n  dir: 1,\n  dx: 1,\n  dy: 1,\n  ellipsis: 1,\n  limit: 1,\n  radius: 1,\n  theta: 1,\n  angle: 1,\n  font: 1,\n  fontSize: 1,\n  fontWeight: 1,\n  fontStyle: 1,\n  cursor: 1,\n  href: 1,\n  tooltip: 1,\n  cornerRadius: 1\n  // commented below are vg channel that do not have mark config.\n  // 'x'|'x2'|'xc'|'width'|'y'|'y2'|'yc'|'height'\n  // clip: 1,\n  // endAngle: 1,\n  // innerRadius: 1,\n  // outerRadius: 1,\n  // path: 1,\n  // startAngle: 1,\n  // url: 1,\n};\n\nexport const VG_MARK_CONFIGS = flagKeys(VG_MARK_CONFIG_INDEX);\n\nexport type VgComparatorOrder = 'ascending' | 'descending';\n\nexport interface VgComparator {\n  field?: string | string[];\n  order?: VgComparatorOrder | VgComparatorOrder[];\n}\n\nexport interface VgWindowTransform {\n  type: 'window';\n  params?: number[];\n  as?: string[];\n  ops?: (AggregateOp | WindowOnlyOp)[];\n  fields?: string[];\n  frame?: number[];\n  ignorePeers?: boolean;\n  groupby?: string[];\n  sort?: VgComparator;\n}\n\nexport interface VgJoinAggregateTransform {\n  type: 'joinaggregate';\n  as?: string[];\n  ops?: AggregateOp[];\n  fields?: string[];\n  groupby?: string[];\n}\n","import {Axis as VgAxis} from 'vega';\nimport {isArray} from 'vega-util';\nimport {AXIS_PARTS, AXIS_PROPERTY_TYPE} from '../../axis';\nimport {Config} from '../../config';\nimport {defaultTitle, FieldDefBase} from '../../fielddef';\nimport {getFirstDefined, keys} from '../../util';\nimport {AxisComponent, AxisComponentIndex} from './component';\n\nfunction assembleTitle(title: string | FieldDefBase<string>[], config: Config) {\n  if (isArray(title)) {\n    return title.map(fieldDef => defaultTitle(fieldDef, config)).join(', ');\n  }\n  return title;\n}\n\nexport function assembleAxis(\n  axisCmpt: AxisComponent,\n  kind: 'main' | 'grid',\n  config: Config,\n  opt: {\n    header: boolean; // whether this is called via a header\n  } = {header: false}\n): VgAxis {\n  const {orient, scale, title, zindex, ...axis} = axisCmpt.combine();\n\n  // Remove properties that are not valid for this kind of axis\n  keys(axis).forEach(key => {\n    const propType = AXIS_PROPERTY_TYPE[key];\n    if (propType && propType !== kind && propType !== 'both') {\n      delete axis[key];\n    }\n  });\n\n  if (kind === 'grid') {\n    if (!axis.grid) {\n      return undefined;\n    }\n\n    // Remove unnecessary encode block\n    if (axis.encode) {\n      // Only need to keep encode block for grid\n      const {grid} = axis.encode;\n      axis.encode = {\n        ...(grid ? {grid} : {})\n      };\n\n      if (keys(axis.encode).length === 0) {\n        delete axis.encode;\n      }\n    }\n\n    return {\n      scale,\n      orient,\n      ...axis,\n      domain: false,\n      labels: false,\n\n      // Always set min/maxExtent to 0 to ensure that `config.axis*.minExtent` and `config.axis*.maxExtent`\n      // would not affect gridAxis\n      maxExtent: 0,\n      minExtent: 0,\n      ticks: false,\n      zindex: getFirstDefined(zindex, 0) // put grid behind marks by default\n    };\n  } else {\n    // kind === 'main'\n\n    if (!opt.header && axisCmpt.mainExtracted) {\n      // if mainExtracted has been extracted to a separate facet\n      return undefined;\n    }\n\n    // Remove unnecessary encode block\n    if (axis.encode) {\n      for (const part of AXIS_PARTS) {\n        if (!axisCmpt.hasAxisPart(part)) {\n          delete axis.encode[part];\n        }\n      }\n      if (keys(axis.encode).length === 0) {\n        delete axis.encode;\n      }\n    }\n\n    const titleString = assembleTitle(title, config);\n\n    return {\n      scale,\n      orient,\n      grid: false,\n      ...(titleString ? {title: titleString} : {}),\n      ...axis,\n      zindex: getFirstDefined(zindex, 1) // put axis line above marks by default\n    };\n  }\n}\n\nexport function assembleAxes(axisComponents: AxisComponentIndex, config: Config): VgAxis[] {\n  const {x = [], y = []} = axisComponents;\n  return [\n    ...x.map(a => assembleAxis(a, 'main', config)),\n    ...x.map(a => assembleAxis(a, 'grid', config)),\n    ...y.map(a => assembleAxis(a, 'main', config)),\n    ...y.map(a => assembleAxis(a, 'grid', config))\n  ].filter(a => a); // filter undefined\n}\n","import {isArray} from 'vega-util';\nimport {isBinning} from '../bin';\nimport {Config, StyleConfigIndex} from '../config';\nimport {\n  FieldDefBase,\n  FieldRefOption,\n  isScaleFieldDef,\n  isTimeFieldDef,\n  OrderFieldDef,\n  TypedFieldDef,\n  vgField\n} from '../fielddef';\nimport {MarkConfig, MarkDef} from '../mark';\nimport {ScaleType} from '../scale';\nimport {formatExpression, TimeUnit} from '../timeunit';\nimport {QUANTITATIVE} from '../type';\nimport {getFirstDefined, stringify} from '../util';\nimport {BaseMarkConfig, VgCompare, VgEncodeEntry} from '../vega.schema';\nimport {AxisComponentProps} from './axis/component';\nimport {Explicit} from './split';\nimport {UnitModel} from './unit';\n\nexport function applyMarkConfig(e: VgEncodeEntry, model: UnitModel, propsList: (keyof MarkConfig)[]) {\n  for (const property of propsList) {\n    const value = getMarkConfig(property, model.markDef, model.config);\n    if (value !== undefined) {\n      e[property] = {value: value};\n    }\n  }\n  return e;\n}\n\nexport function getStyles(mark: MarkDef): string[] {\n  return [].concat(mark.type, mark.style || []);\n}\n\n/**\n * Return property value from style or mark specific config property if exists.\n * Otherwise, return general mark specific config.\n */\nexport function getMarkConfig<P extends keyof MarkConfig>(\n  prop: P,\n  mark: MarkDef,\n  config: Config,\n  {skipGeneralMarkConfig = false}: {skipGeneralMarkConfig?: boolean} = {}\n): MarkConfig[P] {\n  return getFirstDefined(\n    // style config has highest precedence\n    getStyleConfig(prop, mark, config.style),\n    // then mark-specific config\n    config[mark.type][prop],\n    // then general mark config (if not skipped)\n    skipGeneralMarkConfig ? undefined : config.mark[prop]\n  );\n}\n\nexport function getStyleConfig<P extends keyof MarkConfig>(prop: P, mark: MarkDef, styleConfigIndex: StyleConfigIndex) {\n  const styles = getStyles(mark);\n  let value;\n  for (const style of styles) {\n    const styleConfig = styleConfigIndex[style];\n\n    // MarkConfig extends VgMarkConfig so a prop may not be a valid property for style\n    // However here we also check if it is defined, so it is okay to cast here\n    const p = prop as keyof BaseMarkConfig;\n    if (styleConfig && styleConfig[p] !== undefined) {\n      value = styleConfig[p];\n    }\n  }\n  return value;\n}\n\nexport function formatSignalRef(\n  fieldDef: TypedFieldDef<string>,\n  specifiedFormat: string,\n  expr: 'datum' | 'parent',\n  config: Config\n) {\n  const format = numberFormat(fieldDef, specifiedFormat, config);\n  if (isBinning(fieldDef.bin)) {\n    const startField = vgField(fieldDef, {expr});\n    const endField = vgField(fieldDef, {expr, binSuffix: 'end'});\n    return {\n      signal: binFormatExpression(startField, endField, format, config)\n    };\n  } else if (fieldDef.type === 'quantitative') {\n    return {\n      signal: `${formatExpr(vgField(fieldDef, {expr, binSuffix: 'range'}), format)}`\n    };\n  } else if (isTimeFieldDef(fieldDef)) {\n    const isUTCScale = isScaleFieldDef(fieldDef) && fieldDef['scale'] && fieldDef['scale'].type === ScaleType.UTC;\n    return {\n      signal: timeFormatExpression(\n        vgField(fieldDef, {expr}),\n        fieldDef.timeUnit,\n        specifiedFormat,\n        config.text.shortTimeLabels,\n        config.timeFormat,\n        isUTCScale,\n        true\n      )\n    };\n  } else {\n    return {\n      signal: `''+${vgField(fieldDef, {expr})}`\n    };\n  }\n}\n\n/**\n * Returns number format for a fieldDef\n */\nexport function numberFormat(fieldDef: TypedFieldDef<string>, specifiedFormat: string, config: Config) {\n  if (isTimeFieldDef(fieldDef)) {\n    return undefined;\n  }\n\n  // Specified format in axis/legend has higher precedence than fieldDef.format\n  if (specifiedFormat) {\n    return specifiedFormat;\n  }\n\n  if (fieldDef.type === QUANTITATIVE) {\n    // we only apply the default if the field is quantitative\n    return config.numberFormat;\n  }\n  return undefined;\n}\n\nfunction formatExpr(field: string, format: string) {\n  return `format(${field}, \"${format || ''}\")`;\n}\n\nexport function numberFormatExpr(field: string, specifiedFormat: string, config: Config) {\n  return formatExpr(field, specifiedFormat || config.numberFormat);\n}\n\nexport function binFormatExpression(startField: string, endField: string, format: string, config: Config) {\n  return `${startField} === null || isNaN(${startField}) ? \"null\" : ${numberFormatExpr(\n    startField,\n    format,\n    config\n  )} + \" - \" + ${numberFormatExpr(endField, format, config)}`;\n}\n\n/**\n * Returns the time expression used for axis/legend labels or text mark for a temporal field\n */\nexport function timeFormatExpression(\n  field: string,\n  timeUnit: TimeUnit,\n  format: string,\n  shortTimeLabels: boolean,\n  rawTimeFormat: string, // should be provided only for actual text and headers, not axis/legend labels\n  isUTCScale: boolean,\n  alwaysReturn: boolean = false\n): string {\n  if (!timeUnit || format) {\n    // If there is not time unit, or if user explicitly specify format for axis/legend/text.\n    format = format || rawTimeFormat; // only use provided timeFormat if there is no timeUnit.\n\n    if (format || alwaysReturn) {\n      return `${isUTCScale ? 'utc' : 'time'}Format(${field}, '${format}')`;\n    } else {\n      return undefined;\n    }\n  } else {\n    return formatExpression(timeUnit, field, shortTimeLabels, isUTCScale);\n  }\n}\n\n/**\n * Return Vega sort parameters (tuple of field and order).\n */\nexport function sortParams(\n  orderDef: OrderFieldDef<string> | OrderFieldDef<string>[],\n  fieldRefOption?: FieldRefOption\n): VgCompare {\n  return (isArray(orderDef) ? orderDef : [orderDef]).reduce(\n    (s, orderChannelDef) => {\n      s.field.push(vgField(orderChannelDef, fieldRefOption));\n      s.order.push(orderChannelDef.sort || 'ascending');\n      return s;\n    },\n    {field: [], order: []}\n  );\n}\n\nexport type AxisTitleComponent = AxisComponentProps['title'];\n\nexport function mergeTitleFieldDefs(f1: FieldDefBase<string>[], f2: FieldDefBase<string>[]) {\n  const merged = [...f1];\n\n  f2.forEach(fdToMerge => {\n    for (const fieldDef1 of merged) {\n      // If already exists, no need to append to merged array\n      if (stringify(fieldDef1) === stringify(fdToMerge)) {\n        return;\n      }\n    }\n    merged.push(fdToMerge);\n  });\n  return merged;\n}\n\nexport function mergeTitle(title1: string, title2: string) {\n  if (title1 === title2 || !title2) {\n    // if titles are the same or title2 is falsy\n    return title1;\n  } else if (!title1) {\n    // if title1 is falsy\n    return title2;\n  } else {\n    // join title with comma if they are different\n    return title1 + ', ' + title2;\n  }\n}\n\nexport function mergeTitleComponent(v1: Explicit<AxisTitleComponent>, v2: Explicit<AxisTitleComponent>) {\n  if (isArray(v1.value) && isArray(v2.value)) {\n    return {\n      explicit: v1.explicit,\n      value: mergeTitleFieldDefs(v1.value, v2.value)\n    };\n  } else if (!isArray(v1.value) && !isArray(v2.value)) {\n    return {\n      explicit: v1.explicit, // keep the old explicit\n      value: mergeTitle(v1.value, v2.value)\n    };\n  }\n  /* istanbul ignore next: Condition should not happen -- only for warning in development. */\n  throw new Error('It should never reach here');\n}\n","import {DataSourceType} from '../../data';\nimport {Dict, uniqueId} from '../../util';\n\n/**\n * A node in the dataflow tree.\n */\nexport class DataFlowNode {\n  private _children: DataFlowNode[] = [];\n\n  private _parent: DataFlowNode = null;\n\n  protected _hash: string | number;\n\n  constructor(parent: DataFlowNode, public readonly debugName?: string) {\n    if (parent) {\n      this.parent = parent;\n    }\n  }\n\n  /**\n   * Clone this node with a deep copy but don't clone links to children or parents.\n   */\n  public clone(): DataFlowNode {\n    throw new Error('Cannot clone node');\n  }\n\n  /**\n   * Return a hash of the node.\n   */\n  public hash(): string | number {\n    if (this._hash === undefined) {\n      this._hash = uniqueId();\n    }\n\n    return this._hash;\n  }\n\n  /**\n   * Set of fields that are being created by this node.\n   */\n  public producedFields(): Set<string> {\n    return new Set();\n  }\n\n  public dependentFields(): Set<string> {\n    return new Set();\n  }\n\n  get parent() {\n    return this._parent;\n  }\n\n  /**\n   * Set the parent of the node and also add this not to the parent's children.\n   */\n  set parent(parent: DataFlowNode) {\n    this._parent = parent;\n    parent.addChild(this);\n  }\n\n  get children() {\n    return this._children;\n  }\n\n  public numChildren() {\n    return this._children.length;\n  }\n\n  public addChild(child: DataFlowNode, loc?: number) {\n    // do not add the same child twice\n    if (this._children.indexOf(child) > -1) {\n      console.warn('Attempt to add the same child twice.');\n      return;\n    }\n\n    if (loc !== undefined) {\n      this._children.splice(loc, 0, child);\n    } else {\n      this._children.push(child);\n    }\n  }\n\n  public removeChild(oldChild: DataFlowNode) {\n    const loc = this._children.indexOf(oldChild);\n    this._children.splice(loc, 1);\n    return loc;\n  }\n\n  /**\n   * Remove node from the dataflow.\n   */\n  public remove() {\n    let loc = this._parent.removeChild(this);\n    for (const child of this._children) {\n      // do not use the set method because we want to insert at a particular location\n      child._parent = this._parent;\n      this._parent.addChild(child, loc++);\n    }\n  }\n\n  /**\n   * Insert another node as a parent of this node.\n   */\n  public insertAsParentOf(other: DataFlowNode) {\n    const parent = other.parent;\n    parent.removeChild(this);\n    this.parent = parent;\n    other.parent = this;\n  }\n\n  public swapWithParent() {\n    const parent = this._parent;\n    const newParent = parent.parent;\n\n    // reconnect the children\n    for (const child of this._children) {\n      child.parent = parent;\n    }\n\n    // remove old links\n    this._children = []; // equivalent to removing every child link one by one\n    parent.removeChild(this);\n    parent.parent.removeChild(parent);\n\n    // swap two nodes\n    this.parent = newParent;\n    parent.parent = this;\n  }\n}\n\nexport class OutputNode extends DataFlowNode {\n  private _source: string;\n\n  private _name: string;\n\n  public clone(): this {\n    const cloneObj = new (this.constructor as any)();\n    cloneObj.debugName = 'clone_' + this.debugName;\n    cloneObj._source = this._source;\n    cloneObj._name = 'clone_' + this._name;\n    cloneObj.type = this.type;\n    cloneObj.refCounts = this.refCounts;\n    cloneObj.refCounts[cloneObj._name] = 0;\n    return cloneObj;\n  }\n\n  /**\n   * @param source The name of the source. Will change in assemble.\n   * @param type The type of the output node.\n   * @param refCounts A global ref counter map.\n   */\n  constructor(\n    parent: DataFlowNode,\n    source: string,\n    public readonly type: DataSourceType,\n    private readonly refCounts: Dict<number>\n  ) {\n    super(parent, source);\n\n    this._source = this._name = source;\n\n    if (this.refCounts && !(this._name in this.refCounts)) {\n      this.refCounts[this._name] = 0;\n    }\n  }\n\n  /**\n   * Request the datasource name and increase the ref counter.\n   *\n   * During the parsing phase, this will return the simple name such as 'main' or 'raw'.\n   * It is crucial to request the name from an output node to mark it as a required node.\n   * If nobody ever requests the name, this datasource will not be instantiated in the assemble phase.\n   *\n   * In the assemble phase, this will return the correct name.\n   */\n  public getSource() {\n    this.refCounts[this._name]++;\n    return this._source;\n  }\n\n  public isRequired(): boolean {\n    return !!this.refCounts[this._name];\n  }\n\n  public setSource(source: string) {\n    this._source = source;\n  }\n}\n","export var RawCode = 'RawCode';\nexport var Literal = 'Literal';\nexport var Property = 'Property';\nexport var Identifier = 'Identifier';\n\nexport var ArrayExpression = 'ArrayExpression';\nexport var BinaryExpression = 'BinaryExpression';\nexport var CallExpression = 'CallExpression';\nexport var ConditionalExpression = 'ConditionalExpression';\nexport var LogicalExpression = 'LogicalExpression';\nexport var MemberExpression = 'MemberExpression';\nexport var ObjectExpression = 'ObjectExpression';\nexport var UnaryExpression = 'UnaryExpression';\n\nexport default function ASTNode(type) {\n  this.type = type;\n}\n\nASTNode.prototype.visit = function(visitor) {\n  var node = this, c, i, n;\n\n  if (visitor(node)) return 1;\n\n  for (c=children(node), i=0, n=c.length; i<n; ++i) {\n    if (c[i].visit(visitor)) return 1;\n  }\n};\n\nfunction children(node) {\n  switch (node.type) {\n    case ArrayExpression:\n      return node.elements;\n    case BinaryExpression:\n    case LogicalExpression:\n      return [node.left, node.right];\n    case CallExpression:\n      var args = node.arguments.slice();\n      args.unshift(node.callee);\n      return args;\n    case ConditionalExpression:\n      return [node.test, node.consequent, node.alternate];\n    case MemberExpression:\n      return [node.object, node.property];\n    case ObjectExpression:\n      return node.properties;\n    case Property:\n      return [node.key, node.value];\n    case UnaryExpression:\n      return [node.argument];\n    case Identifier:\n    case Literal:\n    case RawCode:\n    default:\n      return [];\n  }\n}\n","/*\n  The following expression parser is based on Esprima (http://esprima.org/).\n  Original header comment and license for Esprima is included here:\n\n  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>\n  Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\nimport ASTNode from './ast';\n\nvar TokenName,\n    source,\n    index,\n    length,\n    lookahead;\n\nvar TokenBooleanLiteral = 1,\n    TokenEOF = 2,\n    TokenIdentifier = 3,\n    TokenKeyword = 4,\n    TokenNullLiteral = 5,\n    TokenNumericLiteral = 6,\n    TokenPunctuator = 7,\n    TokenStringLiteral = 8,\n    TokenRegularExpression = 9;\n\nTokenName = {};\nTokenName[TokenBooleanLiteral] = 'Boolean';\nTokenName[TokenEOF] = '<end>';\nTokenName[TokenIdentifier] = 'Identifier';\nTokenName[TokenKeyword] = 'Keyword';\nTokenName[TokenNullLiteral] = 'Null';\nTokenName[TokenNumericLiteral] = 'Numeric';\nTokenName[TokenPunctuator] = 'Punctuator';\nTokenName[TokenStringLiteral] = 'String';\nTokenName[TokenRegularExpression] = 'RegularExpression';\n\nvar SyntaxArrayExpression = 'ArrayExpression',\n    SyntaxBinaryExpression = 'BinaryExpression',\n    SyntaxCallExpression = 'CallExpression',\n    SyntaxConditionalExpression = 'ConditionalExpression',\n    SyntaxIdentifier = 'Identifier',\n    SyntaxLiteral = 'Literal',\n    SyntaxLogicalExpression = 'LogicalExpression',\n    SyntaxMemberExpression = 'MemberExpression',\n    SyntaxObjectExpression = 'ObjectExpression',\n    SyntaxProperty = 'Property',\n    SyntaxUnaryExpression = 'UnaryExpression';\n\n// Error messages should be identical to V8.\nvar MessageUnexpectedToken = 'Unexpected token %0',\n    MessageUnexpectedNumber = 'Unexpected number',\n    MessageUnexpectedString = 'Unexpected string',\n    MessageUnexpectedIdentifier = 'Unexpected identifier',\n    MessageUnexpectedReserved = 'Unexpected reserved word',\n    MessageUnexpectedEOS = 'Unexpected end of input',\n    MessageInvalidRegExp = 'Invalid regular expression',\n    MessageUnterminatedRegExp = 'Invalid regular expression: missing /',\n    MessageStrictOctalLiteral = 'Octal literals are not allowed in strict mode.',\n    MessageStrictDuplicateProperty = 'Duplicate data property in object literal not allowed in strict mode';\n\nvar ILLEGAL = 'ILLEGAL',\n    DISABLED = 'Disabled.';\n\n// See also tools/generate-unicode-regex.py.\n  var RegexNonAsciiIdentifierStart = new RegExp(\"[\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0370-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0620-\\\\u064A\\\\u066E\\\\u066F\\\\u0671-\\\\u06D3\\\\u06D5\\\\u06E5\\\\u06E6\\\\u06EE\\\\u06EF\\\\u06FA-\\\\u06FC\\\\u06FF\\\\u0710\\\\u0712-\\\\u072F\\\\u074D-\\\\u07A5\\\\u07B1\\\\u07CA-\\\\u07EA\\\\u07F4\\\\u07F5\\\\u07FA\\\\u0800-\\\\u0815\\\\u081A\\\\u0824\\\\u0828\\\\u0840-\\\\u0858\\\\u08A0-\\\\u08B2\\\\u0904-\\\\u0939\\\\u093D\\\\u0950\\\\u0958-\\\\u0961\\\\u0971-\\\\u0980\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BD\\\\u09CE\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E1\\\\u09F0\\\\u09F1\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A72-\\\\u0A74\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABD\\\\u0AD0\\\\u0AE0\\\\u0AE1\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3D\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B61\\\\u0B71\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BD0\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D\\\\u0C58\\\\u0C59\\\\u0C60\\\\u0C61\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBD\\\\u0CDE\\\\u0CE0\\\\u0CE1\\\\u0CF1\\\\u0CF2\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D\\\\u0D4E\\\\u0D60\\\\u0D61\\\\u0D7A-\\\\u0D7F\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0E01-\\\\u0E30\\\\u0E32\\\\u0E33\\\\u0E40-\\\\u0E46\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB0\\\\u0EB2\\\\u0EB3\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F40-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F88-\\\\u0F8C\\\\u1000-\\\\u102A\\\\u103F\\\\u1050-\\\\u1055\\\\u105A-\\\\u105D\\\\u1061\\\\u1065\\\\u1066\\\\u106E-\\\\u1070\\\\u1075-\\\\u1081\\\\u108E\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1711\\\\u1720-\\\\u1731\\\\u1740-\\\\u1751\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1780-\\\\u17B3\\\\u17D7\\\\u17DC\\\\u1820-\\\\u1877\\\\u1880-\\\\u18A8\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1950-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19C1-\\\\u19C7\\\\u1A00-\\\\u1A16\\\\u1A20-\\\\u1A54\\\\u1AA7\\\\u1B05-\\\\u1B33\\\\u1B45-\\\\u1B4B\\\\u1B83-\\\\u1BA0\\\\u1BAE\\\\u1BAF\\\\u1BBA-\\\\u1BE5\\\\u1C00-\\\\u1C23\\\\u1C4D-\\\\u1C4F\\\\u1C5A-\\\\u1C7D\\\\u1CE9-\\\\u1CEC\\\\u1CEE-\\\\u1CF1\\\\u1CF5\\\\u1CF6\\\\u1D00-\\\\u1DBF\\\\u1E00-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CEE\\\\u2CF2\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D80-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u3029\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FCC\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA61F\\\\uA62A\\\\uA62B\\\\uA640-\\\\uA66E\\\\uA67F-\\\\uA69D\\\\uA6A0-\\\\uA6EF\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA78E\\\\uA790-\\\\uA7AD\\\\uA7B0\\\\uA7B1\\\\uA7F7-\\\\uA801\\\\uA803-\\\\uA805\\\\uA807-\\\\uA80A\\\\uA80C-\\\\uA822\\\\uA840-\\\\uA873\\\\uA882-\\\\uA8B3\\\\uA8F2-\\\\uA8F7\\\\uA8FB\\\\uA90A-\\\\uA925\\\\uA930-\\\\uA946\\\\uA960-\\\\uA97C\\\\uA984-\\\\uA9B2\\\\uA9CF\\\\uA9E0-\\\\uA9E4\\\\uA9E6-\\\\uA9EF\\\\uA9FA-\\\\uA9FE\\\\uAA00-\\\\uAA28\\\\uAA40-\\\\uAA42\\\\uAA44-\\\\uAA4B\\\\uAA60-\\\\uAA76\\\\uAA7A\\\\uAA7E-\\\\uAAAF\\\\uAAB1\\\\uAAB5\\\\uAAB6\\\\uAAB9-\\\\uAABD\\\\uAAC0\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEA\\\\uAAF2-\\\\uAAF4\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB5F\\\\uAB64\\\\uAB65\\\\uABC0-\\\\uABE2\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D\\\\uFB1F-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF21-\\\\uFF3A\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]\"),\n      RegexNonAsciiIdentifierPart = new RegExp(\"[\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0300-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u0483-\\\\u0487\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u0591-\\\\u05BD\\\\u05BF\\\\u05C1\\\\u05C2\\\\u05C4\\\\u05C5\\\\u05C7\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0610-\\\\u061A\\\\u0620-\\\\u0669\\\\u066E-\\\\u06D3\\\\u06D5-\\\\u06DC\\\\u06DF-\\\\u06E8\\\\u06EA-\\\\u06FC\\\\u06FF\\\\u0710-\\\\u074A\\\\u074D-\\\\u07B1\\\\u07C0-\\\\u07F5\\\\u07FA\\\\u0800-\\\\u082D\\\\u0840-\\\\u085B\\\\u08A0-\\\\u08B2\\\\u08E4-\\\\u0963\\\\u0966-\\\\u096F\\\\u0971-\\\\u0983\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BC-\\\\u09C4\\\\u09C7\\\\u09C8\\\\u09CB-\\\\u09CE\\\\u09D7\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E3\\\\u09E6-\\\\u09F1\\\\u0A01-\\\\u0A03\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A3C\\\\u0A3E-\\\\u0A42\\\\u0A47\\\\u0A48\\\\u0A4B-\\\\u0A4D\\\\u0A51\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A66-\\\\u0A75\\\\u0A81-\\\\u0A83\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABC-\\\\u0AC5\\\\u0AC7-\\\\u0AC9\\\\u0ACB-\\\\u0ACD\\\\u0AD0\\\\u0AE0-\\\\u0AE3\\\\u0AE6-\\\\u0AEF\\\\u0B01-\\\\u0B03\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3C-\\\\u0B44\\\\u0B47\\\\u0B48\\\\u0B4B-\\\\u0B4D\\\\u0B56\\\\u0B57\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B63\\\\u0B66-\\\\u0B6F\\\\u0B71\\\\u0B82\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BBE-\\\\u0BC2\\\\u0BC6-\\\\u0BC8\\\\u0BCA-\\\\u0BCD\\\\u0BD0\\\\u0BD7\\\\u0BE6-\\\\u0BEF\\\\u0C00-\\\\u0C03\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D-\\\\u0C44\\\\u0C46-\\\\u0C48\\\\u0C4A-\\\\u0C4D\\\\u0C55\\\\u0C56\\\\u0C58\\\\u0C59\\\\u0C60-\\\\u0C63\\\\u0C66-\\\\u0C6F\\\\u0C81-\\\\u0C83\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBC-\\\\u0CC4\\\\u0CC6-\\\\u0CC8\\\\u0CCA-\\\\u0CCD\\\\u0CD5\\\\u0CD6\\\\u0CDE\\\\u0CE0-\\\\u0CE3\\\\u0CE6-\\\\u0CEF\\\\u0CF1\\\\u0CF2\\\\u0D01-\\\\u0D03\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D-\\\\u0D44\\\\u0D46-\\\\u0D48\\\\u0D4A-\\\\u0D4E\\\\u0D57\\\\u0D60-\\\\u0D63\\\\u0D66-\\\\u0D6F\\\\u0D7A-\\\\u0D7F\\\\u0D82\\\\u0D83\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0DCA\\\\u0DCF-\\\\u0DD4\\\\u0DD6\\\\u0DD8-\\\\u0DDF\\\\u0DE6-\\\\u0DEF\\\\u0DF2\\\\u0DF3\\\\u0E01-\\\\u0E3A\\\\u0E40-\\\\u0E4E\\\\u0E50-\\\\u0E59\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB9\\\\u0EBB-\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EC8-\\\\u0ECD\\\\u0ED0-\\\\u0ED9\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F18\\\\u0F19\\\\u0F20-\\\\u0F29\\\\u0F35\\\\u0F37\\\\u0F39\\\\u0F3E-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F71-\\\\u0F84\\\\u0F86-\\\\u0F97\\\\u0F99-\\\\u0FBC\\\\u0FC6\\\\u1000-\\\\u1049\\\\u1050-\\\\u109D\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u135D-\\\\u135F\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1714\\\\u1720-\\\\u1734\\\\u1740-\\\\u1753\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1772\\\\u1773\\\\u1780-\\\\u17D3\\\\u17D7\\\\u17DC\\\\u17DD\\\\u17E0-\\\\u17E9\\\\u180B-\\\\u180D\\\\u1810-\\\\u1819\\\\u1820-\\\\u1877\\\\u1880-\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1920-\\\\u192B\\\\u1930-\\\\u193B\\\\u1946-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19B0-\\\\u19C9\\\\u19D0-\\\\u19D9\\\\u1A00-\\\\u1A1B\\\\u1A20-\\\\u1A5E\\\\u1A60-\\\\u1A7C\\\\u1A7F-\\\\u1A89\\\\u1A90-\\\\u1A99\\\\u1AA7\\\\u1AB0-\\\\u1ABD\\\\u1B00-\\\\u1B4B\\\\u1B50-\\\\u1B59\\\\u1B6B-\\\\u1B73\\\\u1B80-\\\\u1BF3\\\\u1C00-\\\\u1C37\\\\u1C40-\\\\u1C49\\\\u1C4D-\\\\u1C7D\\\\u1CD0-\\\\u1CD2\\\\u1CD4-\\\\u1CF6\\\\u1CF8\\\\u1CF9\\\\u1D00-\\\\u1DF5\\\\u1DFC-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u200C\\\\u200D\\\\u203F\\\\u2040\\\\u2054\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u20D0-\\\\u20DC\\\\u20E1\\\\u20E5-\\\\u20F0\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D7F-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2DE0-\\\\u2DFF\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u302F\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u3099\\\\u309A\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FCC\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA62B\\\\uA640-\\\\uA66F\\\\uA674-\\\\uA67D\\\\uA67F-\\\\uA69D\\\\uA69F-\\\\uA6F1\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA78E\\\\uA790-\\\\uA7AD\\\\uA7B0\\\\uA7B1\\\\uA7F7-\\\\uA827\\\\uA840-\\\\uA873\\\\uA880-\\\\uA8C4\\\\uA8D0-\\\\uA8D9\\\\uA8E0-\\\\uA8F7\\\\uA8FB\\\\uA900-\\\\uA92D\\\\uA930-\\\\uA953\\\\uA960-\\\\uA97C\\\\uA980-\\\\uA9C0\\\\uA9CF-\\\\uA9D9\\\\uA9E0-\\\\uA9FE\\\\uAA00-\\\\uAA36\\\\uAA40-\\\\uAA4D\\\\uAA50-\\\\uAA59\\\\uAA60-\\\\uAA76\\\\uAA7A-\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEF\\\\uAAF2-\\\\uAAF6\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB5F\\\\uAB64\\\\uAB65\\\\uABC0-\\\\uABEA\\\\uABEC\\\\uABED\\\\uABF0-\\\\uABF9\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE00-\\\\uFE0F\\\\uFE20-\\\\uFE2D\\\\uFE33\\\\uFE34\\\\uFE4D-\\\\uFE4F\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF10-\\\\uFF19\\\\uFF21-\\\\uFF3A\\\\uFF3F\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]\");\n\n// Ensure the condition is true, otherwise throw an error.\n// This is only to have a better contract semantic, i.e. another safety net\n// to catch a logic error. The condition shall be fulfilled in normal case.\n// Do NOT use this to enforce a certain condition on any user input.\n\nfunction assert(condition, message) {\n  /* istanbul ignore next */\n  if (!condition) {\n    throw new Error('ASSERT: ' + message);\n  }\n}\n\nfunction isDecimalDigit(ch) {\n  return (ch >= 0x30 && ch <= 0x39); // 0..9\n}\n\nfunction isHexDigit(ch) {\n  return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n}\n\nfunction isOctalDigit(ch) {\n  return '01234567'.indexOf(ch) >= 0;\n}\n\n// 7.2 White Space\n\nfunction isWhiteSpace(ch) {\n  return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||\n    (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);\n}\n\n// 7.3 Line Terminators\n\nfunction isLineTerminator(ch) {\n  return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);\n}\n\n// 7.6 Identifier Names and Identifiers\n\nfunction isIdentifierStart(ch) {\n  return (ch === 0x24) || (ch === 0x5F) || // $ (dollar) and _ (underscore)\n    (ch >= 0x41 && ch <= 0x5A) || // A..Z\n    (ch >= 0x61 && ch <= 0x7A) || // a..z\n    (ch === 0x5C) || // \\ (backslash)\n    ((ch >= 0x80) && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch)));\n}\n\nfunction isIdentifierPart(ch) {\n  return (ch === 0x24) || (ch === 0x5F) || // $ (dollar) and _ (underscore)\n    (ch >= 0x41 && ch <= 0x5A) || // A..Z\n    (ch >= 0x61 && ch <= 0x7A) || // a..z\n    (ch >= 0x30 && ch <= 0x39) || // 0..9\n    (ch === 0x5C) || // \\ (backslash)\n    ((ch >= 0x80) && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch)));\n}\n\n// 7.6.1.1 Keywords\n\nvar keywords = {\n  'if':1, 'in':1, 'do':1,\n  'var':1, 'for':1, 'new':1, 'try':1, 'let':1,\n  'this':1, 'else':1, 'case':1, 'void':1, 'with':1, 'enum':1,\n  'while':1, 'break':1, 'catch':1, 'throw':1, 'const':1, 'yield':1, 'class':1, 'super':1,\n  'return':1, 'typeof':1, 'delete':1, 'switch':1, 'export':1, 'import':1, 'public':1, 'static':1,\n  'default':1, 'finally':1, 'extends':1, 'package':1, 'private':1,\n  'function':1, 'continue':1, 'debugger':1,\n  'interface':1, 'protected':1,\n  'instanceof':1, 'implements':1\n};\n\nfunction skipComment() {\n  var ch;\n\n  while (index < length) {\n    ch = source.charCodeAt(index);\n\n    if (isWhiteSpace(ch) || isLineTerminator(ch)) {\n      ++index;\n    } else {\n      break;\n    }\n  }\n}\n\nfunction scanHexEscape(prefix) {\n  var i, len, ch, code = 0;\n\n  len = (prefix === 'u') ? 4 : 2;\n  for (i = 0; i < len; ++i) {\n    if (index < length && isHexDigit(source[index])) {\n      ch = source[index++];\n      code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n    } else {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n  }\n  return String.fromCharCode(code);\n}\n\nfunction scanUnicodeCodePointEscape() {\n  var ch, code, cu1, cu2;\n\n  ch = source[index];\n  code = 0;\n\n  // At least, one hex digit is required.\n  if (ch === '}') {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  while (index < length) {\n    ch = source[index++];\n    if (!isHexDigit(ch)) {\n      break;\n    }\n    code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n  }\n\n  if (code > 0x10FFFF || ch !== '}') {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  // UTF-16 Encoding\n  if (code <= 0xFFFF) {\n    return String.fromCharCode(code);\n  }\n  cu1 = ((code - 0x10000) >> 10) + 0xD800;\n  cu2 = ((code - 0x10000) & 1023) + 0xDC00;\n  return String.fromCharCode(cu1, cu2);\n}\n\nfunction getEscapedIdentifier() {\n  var ch, id;\n\n  ch = source.charCodeAt(index++);\n  id = String.fromCharCode(ch);\n\n  // '\\u' (U+005C, U+0075) denotes an escaped character.\n  if (ch === 0x5C) {\n    if (source.charCodeAt(index) !== 0x75) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n    ++index;\n    ch = scanHexEscape('u');\n    if (!ch || ch === '\\\\' || !isIdentifierStart(ch.charCodeAt(0))) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n    id = ch;\n  }\n\n  while (index < length) {\n    ch = source.charCodeAt(index);\n    if (!isIdentifierPart(ch)) {\n      break;\n    }\n    ++index;\n    id += String.fromCharCode(ch);\n\n    // '\\u' (U+005C, U+0075) denotes an escaped character.\n    if (ch === 0x5C) {\n      id = id.substr(0, id.length - 1);\n      if (source.charCodeAt(index) !== 0x75) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n      ++index;\n      ch = scanHexEscape('u');\n      if (!ch || ch === '\\\\' || !isIdentifierPart(ch.charCodeAt(0))) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n      id += ch;\n    }\n  }\n\n  return id;\n}\n\nfunction getIdentifier() {\n  var start, ch;\n\n  start = index++;\n  while (index < length) {\n    ch = source.charCodeAt(index);\n    if (ch === 0x5C) {\n      // Blackslash (U+005C) marks Unicode escape sequence.\n      index = start;\n      return getEscapedIdentifier();\n    }\n    if (isIdentifierPart(ch)) {\n      ++index;\n    } else {\n      break;\n    }\n  }\n\n  return source.slice(start, index);\n}\n\nfunction scanIdentifier() {\n  var start, id, type;\n\n  start = index;\n\n  // Backslash (U+005C) starts an escaped character.\n  id = (source.charCodeAt(index) === 0x5C) ? getEscapedIdentifier() : getIdentifier();\n\n  // There is no keyword or literal with only one character.\n  // Thus, it must be an identifier.\n  if (id.length === 1) {\n    type = TokenIdentifier;\n  } else if (keywords.hasOwnProperty(id)) {\n    type = TokenKeyword;\n  } else if (id === 'null') {\n    type = TokenNullLiteral;\n  } else if (id === 'true' || id === 'false') {\n    type = TokenBooleanLiteral;\n  } else {\n    type = TokenIdentifier;\n  }\n\n  return {\n    type: type,\n    value: id,\n    start: start,\n    end: index\n  };\n}\n\n// 7.7 Punctuators\n\nfunction scanPunctuator() {\n  var start = index,\n    code = source.charCodeAt(index),\n    code2,\n    ch1 = source[index],\n    ch2,\n    ch3,\n    ch4;\n\n  switch (code) {\n\n    // Check for most common single-character punctuators.\n    case 0x2E: // . dot\n    case 0x28: // ( open bracket\n    case 0x29: // ) close bracket\n    case 0x3B: // ; semicolon\n    case 0x2C: // , comma\n    case 0x7B: // { open curly brace\n    case 0x7D: // } close curly brace\n    case 0x5B: // [\n    case 0x5D: // ]\n    case 0x3A: // :\n    case 0x3F: // ?\n    case 0x7E: // ~\n      ++index;\n      return {\n        type: TokenPunctuator,\n        value: String.fromCharCode(code),\n        start: start,\n        end: index\n      };\n\n    default:\n      code2 = source.charCodeAt(index + 1);\n\n      // '=' (U+003D) marks an assignment or comparison operator.\n      if (code2 === 0x3D) {\n        switch (code) {\n          case 0x2B: // +\n          case 0x2D: // -\n          case 0x2F: // /\n          case 0x3C: // <\n          case 0x3E: // >\n          case 0x5E: // ^\n          case 0x7C: // |\n          case 0x25: // %\n          case 0x26: // &\n          case 0x2A: // *\n            index += 2;\n            return {\n              type: TokenPunctuator,\n              value: String.fromCharCode(code) + String.fromCharCode(code2),\n              start: start,\n              end: index\n            };\n\n          case 0x21: // !\n          case 0x3D: // =\n            index += 2;\n\n            // !== and ===\n            if (source.charCodeAt(index) === 0x3D) {\n              ++index;\n            }\n            return {\n              type: TokenPunctuator,\n              value: source.slice(start, index),\n              start: start,\n              end: index\n            };\n        }\n      }\n  }\n\n  // 4-character punctuator: >>>=\n\n  ch4 = source.substr(index, 4);\n\n  if (ch4 === '>>>=') {\n    index += 4;\n    return {\n      type: TokenPunctuator,\n      value: ch4,\n      start: start,\n      end: index\n    };\n  }\n\n  // 3-character punctuators: === !== >>> <<= >>=\n\n  ch3 = ch4.substr(0, 3);\n\n  if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {\n    index += 3;\n    return {\n      type: TokenPunctuator,\n      value: ch3,\n      start: start,\n      end: index\n    };\n  }\n\n  // Other 2-character punctuators: ++ -- << >> && ||\n  ch2 = ch3.substr(0, 2);\n\n  if ((ch1 === ch2[1] && ('+-<>&|'.indexOf(ch1) >= 0)) || ch2 === '=>') {\n    index += 2;\n    return {\n      type: TokenPunctuator,\n      value: ch2,\n      start: start,\n      end: index\n    };\n  }\n\n  // 1-character punctuators: < > = ! + - * % & | ^ /\n\n  if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\n    ++index;\n    return {\n      type: TokenPunctuator,\n      value: ch1,\n      start: start,\n      end: index\n    };\n  }\n\n  throwError({}, MessageUnexpectedToken, ILLEGAL);\n}\n\n// 7.8.3 Numeric Literals\n\nfunction scanHexLiteral(start) {\n  var number = '';\n\n  while (index < length) {\n    if (!isHexDigit(source[index])) {\n      break;\n    }\n    number += source[index++];\n  }\n\n  if (number.length === 0) {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  if (isIdentifierStart(source.charCodeAt(index))) {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  return {\n    type: TokenNumericLiteral,\n    value: parseInt('0x' + number, 16),\n    start: start,\n    end: index\n  };\n}\n\nfunction scanOctalLiteral(start) {\n  var number = '0' + source[index++];\n  while (index < length) {\n    if (!isOctalDigit(source[index])) {\n      break;\n    }\n    number += source[index++];\n  }\n\n  if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  return {\n    type: TokenNumericLiteral,\n    value: parseInt(number, 8),\n    octal: true,\n    start: start,\n    end: index\n  };\n}\n\nfunction scanNumericLiteral() {\n  var number, start, ch;\n\n  ch = source[index];\n  assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),\n    'Numeric literal must start with a decimal digit or a decimal point');\n\n  start = index;\n  number = '';\n  if (ch !== '.') {\n    number = source[index++];\n    ch = source[index];\n\n    // Hex number starts with '0x'.\n    // Octal number starts with '0'.\n    if (number === '0') {\n      if (ch === 'x' || ch === 'X') {\n        ++index;\n        return scanHexLiteral(start);\n      }\n      if (isOctalDigit(ch)) {\n        return scanOctalLiteral(start);\n      }\n\n      // decimal number starts with '0' such as '09' is illegal.\n      if (ch && isDecimalDigit(ch.charCodeAt(0))) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n    }\n\n    while (isDecimalDigit(source.charCodeAt(index))) {\n      number += source[index++];\n    }\n    ch = source[index];\n  }\n\n  if (ch === '.') {\n    number += source[index++];\n    while (isDecimalDigit(source.charCodeAt(index))) {\n      number += source[index++];\n    }\n    ch = source[index];\n  }\n\n  if (ch === 'e' || ch === 'E') {\n    number += source[index++];\n\n    ch = source[index];\n    if (ch === '+' || ch === '-') {\n      number += source[index++];\n    }\n    if (isDecimalDigit(source.charCodeAt(index))) {\n      while (isDecimalDigit(source.charCodeAt(index))) {\n        number += source[index++];\n      }\n    } else {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n  }\n\n  if (isIdentifierStart(source.charCodeAt(index))) {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  return {\n    type: TokenNumericLiteral,\n    value: parseFloat(number),\n    start: start,\n    end: index\n  };\n}\n\n// 7.8.4 String Literals\n\nfunction scanStringLiteral() {\n  var str = '',\n    quote, start, ch, code, octal = false;\n\n  quote = source[index];\n  assert((quote === '\\'' || quote === '\"'),\n    'String literal must starts with a quote');\n\n  start = index;\n  ++index;\n\n  while (index < length) {\n    ch = source[index++];\n\n    if (ch === quote) {\n      quote = '';\n      break;\n    } else if (ch === '\\\\') {\n      ch = source[index++];\n      if (!ch || !isLineTerminator(ch.charCodeAt(0))) {\n        switch (ch) {\n          case 'u':\n          case 'x':\n            if (source[index] === '{') {\n              ++index;\n              str += scanUnicodeCodePointEscape();\n            } else {\n              str += scanHexEscape(ch);\n            }\n            break;\n          case 'n':\n            str += '\\n';\n            break;\n          case 'r':\n            str += '\\r';\n            break;\n          case 't':\n            str += '\\t';\n            break;\n          case 'b':\n            str += '\\b';\n            break;\n          case 'f':\n            str += '\\f';\n            break;\n          case 'v':\n            str += '\\x0B';\n            break;\n\n          default:\n            if (isOctalDigit(ch)) {\n              code = '01234567'.indexOf(ch);\n\n              // \\0 is not octal escape sequence\n              if (code !== 0) {\n                octal = true;\n              }\n\n              if (index < length && isOctalDigit(source[index])) {\n                octal = true;\n                code = code * 8 + '01234567'.indexOf(source[index++]);\n\n                // 3 digits are only allowed when string starts\n                // with 0, 1, 2, 3\n                if ('0123'.indexOf(ch) >= 0 &&\n                  index < length &&\n                  isOctalDigit(source[index])) {\n                  code = code * 8 + '01234567'.indexOf(source[index++]);\n                }\n              }\n              str += String.fromCharCode(code);\n            } else {\n              str += ch;\n            }\n            break;\n        }\n      } else {\n        if (ch === '\\r' && source[index] === '\\n') {\n          ++index;\n        }\n      }\n    } else if (isLineTerminator(ch.charCodeAt(0))) {\n      break;\n    } else {\n      str += ch;\n    }\n  }\n\n  if (quote !== '') {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  return {\n    type: TokenStringLiteral,\n    value: str,\n    octal: octal,\n    start: start,\n    end: index\n  };\n}\n\nfunction testRegExp(pattern, flags) {\n  var tmp = pattern;\n\n  if (flags.indexOf('u') >= 0) {\n    // Replace each astral symbol and every Unicode code point\n    // escape sequence with a single ASCII symbol to avoid throwing on\n    // regular expressions that are only valid in combination with the\n    // `/u` flag.\n    // Note: replacing with the ASCII symbol `x` might cause false\n    // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n    // perfectly valid pattern that is equivalent to `[a-b]`, but it\n    // would be replaced by `[x-b]` which throws an error.\n    tmp = tmp\n      .replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, function($0, $1) {\n        if (parseInt($1, 16) <= 0x10FFFF) {\n          return 'x';\n        }\n        throwError({}, MessageInvalidRegExp);\n      })\n      .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, 'x');\n  }\n\n  // First, detect invalid regular expressions.\n  try {\n    new RegExp(tmp);\n  } catch (e) {\n    throwError({}, MessageInvalidRegExp);\n  }\n\n  // Return a regular expression object for this pattern-flag pair, or\n  // `null` in case the current environment doesn't support the flags it\n  // uses.\n  try {\n    return new RegExp(pattern, flags);\n  } catch (exception) {\n    return null;\n  }\n}\n\nfunction scanRegExpBody() {\n  var ch, str, classMarker, terminated, body;\n\n  ch = source[index];\n  assert(ch === '/', 'Regular expression literal must start with a slash');\n  str = source[index++];\n\n  classMarker = false;\n  terminated = false;\n  while (index < length) {\n    ch = source[index++];\n    str += ch;\n    if (ch === '\\\\') {\n      ch = source[index++];\n      // ECMA-262 7.8.5\n      if (isLineTerminator(ch.charCodeAt(0))) {\n        throwError({}, MessageUnterminatedRegExp);\n      }\n      str += ch;\n    } else if (isLineTerminator(ch.charCodeAt(0))) {\n      throwError({}, MessageUnterminatedRegExp);\n    } else if (classMarker) {\n      if (ch === ']') {\n        classMarker = false;\n      }\n    } else {\n      if (ch === '/') {\n        terminated = true;\n        break;\n      } else if (ch === '[') {\n        classMarker = true;\n      }\n    }\n  }\n\n  if (!terminated) {\n    throwError({}, MessageUnterminatedRegExp);\n  }\n\n  // Exclude leading and trailing slash.\n  body = str.substr(1, str.length - 2);\n  return {\n    value: body,\n    literal: str\n  };\n}\n\nfunction scanRegExpFlags() {\n  var ch, str, flags;\n\n  str = '';\n  flags = '';\n  while (index < length) {\n    ch = source[index];\n    if (!isIdentifierPart(ch.charCodeAt(0))) {\n      break;\n    }\n\n    ++index;\n    if (ch === '\\\\' && index < length) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    } else {\n      flags += ch;\n      str += ch;\n    }\n  }\n\n  if (flags.search(/[^gimuy]/g) >= 0) {\n    throwError({}, MessageInvalidRegExp, flags);\n  }\n\n  return {\n    value: flags,\n    literal: str\n  };\n}\n\nfunction scanRegExp() {\n  var start, body, flags, value;\n\n  lookahead = null;\n  skipComment();\n  start = index;\n\n  body = scanRegExpBody();\n  flags = scanRegExpFlags();\n  value = testRegExp(body.value, flags.value);\n\n  return {\n    literal: body.literal + flags.literal,\n    value: value,\n    regex: {\n      pattern: body.value,\n      flags: flags.value\n    },\n    start: start,\n    end: index\n  };\n}\n\nfunction isIdentifierName(token) {\n  return token.type === TokenIdentifier ||\n    token.type === TokenKeyword ||\n    token.type === TokenBooleanLiteral ||\n    token.type === TokenNullLiteral;\n}\n\nfunction advance() {\n  var ch;\n\n  skipComment();\n\n  if (index >= length) {\n    return {\n      type: TokenEOF,\n      start: index,\n      end: index\n    };\n  }\n\n  ch = source.charCodeAt(index);\n\n  if (isIdentifierStart(ch)) {\n    return scanIdentifier();\n  }\n\n  // Very common: ( and ) and ;\n  if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {\n    return scanPunctuator();\n  }\n\n  // String literal starts with single quote (U+0027) or double quote (U+0022).\n  if (ch === 0x27 || ch === 0x22) {\n    return scanStringLiteral();\n  }\n\n\n  // Dot (.) U+002E can also start a floating-point number, hence the need\n  // to check the next character.\n  if (ch === 0x2E) {\n    if (isDecimalDigit(source.charCodeAt(index + 1))) {\n      return scanNumericLiteral();\n    }\n    return scanPunctuator();\n  }\n\n  if (isDecimalDigit(ch)) {\n    return scanNumericLiteral();\n  }\n\n  return scanPunctuator();\n}\n\nfunction lex() {\n  var token;\n\n  token = lookahead;\n  index = token.end;\n\n  lookahead = advance();\n\n  index = token.end;\n\n  return token;\n}\n\nfunction peek() {\n  var pos;\n\n  pos = index;\n\n  lookahead = advance();\n  index = pos;\n}\n\nfunction finishArrayExpression(elements) {\n  var node = new ASTNode(SyntaxArrayExpression);\n  node.elements = elements;\n  return node;\n}\n\nfunction finishBinaryExpression(operator, left, right) {\n  var node = new ASTNode((operator === '||' || operator === '&&') ? SyntaxLogicalExpression : SyntaxBinaryExpression);\n  node.operator = operator;\n  node.left = left;\n  node.right = right;\n  return node;\n}\n\nfunction finishCallExpression(callee, args) {\n  var node = new ASTNode(SyntaxCallExpression);\n  node.callee = callee;\n  node.arguments = args;\n  return node;\n}\n\nfunction finishConditionalExpression(test, consequent, alternate) {\n  var node = new ASTNode(SyntaxConditionalExpression);\n  node.test = test;\n  node.consequent = consequent;\n  node.alternate = alternate;\n  return node;\n}\n\nfunction finishIdentifier(name) {\n  var node = new ASTNode(SyntaxIdentifier);\n  node.name = name;\n  return node;\n}\n\nfunction finishLiteral(token) {\n  var node = new ASTNode(SyntaxLiteral);\n  node.value = token.value;\n  node.raw = source.slice(token.start, token.end);\n  if (token.regex) {\n    if (node.raw === '//') {\n      node.raw = '/(?:)/';\n    }\n    node.regex = token.regex;\n  }\n  return node;\n}\n\nfunction finishMemberExpression(accessor, object, property) {\n  var node = new ASTNode(SyntaxMemberExpression);\n  node.computed = accessor === '[';\n  node.object = object;\n  node.property = property;\n  if (!node.computed) property.member = true;\n  return node;\n}\n\nfunction finishObjectExpression(properties) {\n  var node = new ASTNode(SyntaxObjectExpression);\n  node.properties = properties;\n  return node;\n}\n\nfunction finishProperty(kind, key, value) {\n  var node = new ASTNode(SyntaxProperty);\n  node.key = key;\n  node.value = value;\n  node.kind = kind;\n  return node;\n}\n\nfunction finishUnaryExpression(operator, argument) {\n  var node = new ASTNode(SyntaxUnaryExpression);\n  node.operator = operator;\n  node.argument = argument;\n  node.prefix = true;\n  return node;\n}\n\n// Throw an exception\n\nfunction throwError(token, messageFormat) {\n  var error,\n    args = Array.prototype.slice.call(arguments, 2),\n    msg = messageFormat.replace(\n      /%(\\d)/g,\n      function(whole, index) {\n        assert(index < args.length, 'Message reference must be in range');\n        return args[index];\n      }\n    );\n\n\n  error = new Error(msg);\n  error.index = index;\n  error.description = msg;\n  throw error;\n}\n\n// Throw an exception because of the token.\n\nfunction throwUnexpected(token) {\n  if (token.type === TokenEOF) {\n    throwError(token, MessageUnexpectedEOS);\n  }\n\n  if (token.type === TokenNumericLiteral) {\n    throwError(token, MessageUnexpectedNumber);\n  }\n\n  if (token.type === TokenStringLiteral) {\n    throwError(token, MessageUnexpectedString);\n  }\n\n  if (token.type === TokenIdentifier) {\n    throwError(token, MessageUnexpectedIdentifier);\n  }\n\n  if (token.type === TokenKeyword) {\n    throwError(token, MessageUnexpectedReserved);\n  }\n\n  // BooleanLiteral, NullLiteral, or Punctuator.\n  throwError(token, MessageUnexpectedToken, token.value);\n}\n\n// Expect the next token to match the specified punctuator.\n// If not, an exception will be thrown.\n\nfunction expect(value) {\n  var token = lex();\n  if (token.type !== TokenPunctuator || token.value !== value) {\n    throwUnexpected(token);\n  }\n}\n\n// Return true if the next token matches the specified punctuator.\n\nfunction match(value) {\n  return lookahead.type === TokenPunctuator && lookahead.value === value;\n}\n\n// Return true if the next token matches the specified keyword\n\nfunction matchKeyword(keyword) {\n  return lookahead.type === TokenKeyword && lookahead.value === keyword;\n}\n\n// 11.1.4 Array Initialiser\n\nfunction parseArrayInitialiser() {\n  var elements = [];\n\n  index = lookahead.start;\n  expect('[');\n\n  while (!match(']')) {\n    if (match(',')) {\n      lex();\n      elements.push(null);\n    } else {\n      elements.push(parseConditionalExpression());\n\n      if (!match(']')) {\n        expect(',');\n      }\n    }\n  }\n\n  lex();\n\n  return finishArrayExpression(elements);\n}\n\n// 11.1.5 Object Initialiser\n\nfunction parseObjectPropertyKey() {\n  var token;\n\n  index = lookahead.start;\n  token = lex();\n\n  // Note: This function is called only from parseObjectProperty(), where\n  // EOF and Punctuator tokens are already filtered out.\n\n  if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {\n    if (token.octal) {\n      throwError(token, MessageStrictOctalLiteral);\n    }\n    return finishLiteral(token);\n  }\n\n  return finishIdentifier(token.value);\n}\n\nfunction parseObjectProperty() {\n  var token, key, id, value;\n\n  index = lookahead.start;\n  token = lookahead;\n\n  if (token.type === TokenIdentifier) {\n    id = parseObjectPropertyKey();\n    expect(':');\n    value = parseConditionalExpression();\n    return finishProperty('init', id, value);\n  }\n  if (token.type === TokenEOF || token.type === TokenPunctuator) {\n    throwUnexpected(token);\n  } else {\n    key = parseObjectPropertyKey();\n    expect(':');\n    value = parseConditionalExpression();\n    return finishProperty('init', key, value);\n  }\n}\n\nfunction parseObjectInitialiser() {\n  var properties = [],\n    property, name, key, map = {},\n    toString = String;\n\n  index = lookahead.start;\n  expect('{');\n\n  while (!match('}')) {\n    property = parseObjectProperty();\n\n    if (property.key.type === SyntaxIdentifier) {\n      name = property.key.name;\n    } else {\n      name = toString(property.key.value);\n    }\n\n    key = '$' + name;\n    if (Object.prototype.hasOwnProperty.call(map, key)) {\n      throwError({}, MessageStrictDuplicateProperty);\n    } else {\n      map[key] = true;\n    }\n\n    properties.push(property);\n\n    if (!match('}')) {\n      expect(',');\n    }\n  }\n\n  expect('}');\n\n  return finishObjectExpression(properties);\n}\n\n// 11.1.6 The Grouping Operator\n\nfunction parseGroupExpression() {\n  var expr;\n\n  expect('(');\n\n  expr = parseExpression();\n\n  expect(')');\n\n  return expr;\n}\n\n\n// 11.1 Primary Expressions\n\nvar legalKeywords = {\n  \"if\": 1,\n  \"this\": 1\n};\n\nfunction parsePrimaryExpression() {\n  var type, token, expr;\n\n  if (match('(')) {\n    return parseGroupExpression();\n  }\n\n  if (match('[')) {\n    return parseArrayInitialiser();\n  }\n\n  if (match('{')) {\n    return parseObjectInitialiser();\n  }\n\n  type = lookahead.type;\n  index = lookahead.start;\n\n\n  if (type === TokenIdentifier || legalKeywords[lookahead.value]) {\n    expr = finishIdentifier(lex().value);\n  } else if (type === TokenStringLiteral || type === TokenNumericLiteral) {\n    if (lookahead.octal) {\n      throwError(lookahead, MessageStrictOctalLiteral);\n    }\n    expr = finishLiteral(lex());\n  } else if (type === TokenKeyword) {\n    throw new Error(DISABLED);\n  } else if (type === TokenBooleanLiteral) {\n    token = lex();\n    token.value = (token.value === 'true');\n    expr = finishLiteral(token);\n  } else if (type === TokenNullLiteral) {\n    token = lex();\n    token.value = null;\n    expr = finishLiteral(token);\n  } else if (match('/') || match('/=')) {\n    expr = finishLiteral(scanRegExp());\n    peek();\n  } else {\n    throwUnexpected(lex());\n  }\n\n  return expr;\n}\n\n// 11.2 Left-Hand-Side Expressions\n\nfunction parseArguments() {\n  var args = [];\n\n  expect('(');\n\n  if (!match(')')) {\n    while (index < length) {\n      args.push(parseConditionalExpression());\n      if (match(')')) {\n        break;\n      }\n      expect(',');\n    }\n  }\n\n  expect(')');\n\n  return args;\n}\n\nfunction parseNonComputedProperty() {\n  var token;\n  index = lookahead.start;\n  token = lex();\n\n  if (!isIdentifierName(token)) {\n    throwUnexpected(token);\n  }\n\n  return finishIdentifier(token.value);\n}\n\nfunction parseNonComputedMember() {\n  expect('.');\n\n  return parseNonComputedProperty();\n}\n\nfunction parseComputedMember() {\n  var expr;\n\n  expect('[');\n\n  expr = parseExpression();\n\n  expect(']');\n\n  return expr;\n}\n\nfunction parseLeftHandSideExpressionAllowCall() {\n  var expr, args, property;\n\n  expr = parsePrimaryExpression();\n\n  for (;;) {\n    if (match('.')) {\n      property = parseNonComputedMember();\n      expr = finishMemberExpression('.', expr, property);\n    } else if (match('(')) {\n      args = parseArguments();\n      expr = finishCallExpression(expr, args);\n    } else if (match('[')) {\n      property = parseComputedMember();\n      expr = finishMemberExpression('[', expr, property);\n    } else {\n      break;\n    }\n  }\n\n  return expr;\n}\n\n// 11.3 Postfix Expressions\n\nfunction parsePostfixExpression() {\n  var expr = parseLeftHandSideExpressionAllowCall();\n\n  if (lookahead.type === TokenPunctuator) {\n    if ((match('++') || match('--'))) {\n      throw new Error(DISABLED);\n    }\n  }\n\n  return expr;\n}\n\n// 11.4 Unary Operators\n\nfunction parseUnaryExpression() {\n  var token, expr;\n\n  if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) {\n    expr = parsePostfixExpression();\n  } else if (match('++') || match('--')) {\n    throw new Error(DISABLED);\n  } else if (match('+') || match('-') || match('~') || match('!')) {\n    token = lex();\n    expr = parseUnaryExpression();\n    expr = finishUnaryExpression(token.value, expr);\n  } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n    throw new Error(DISABLED);\n  } else {\n    expr = parsePostfixExpression();\n  }\n\n  return expr;\n}\n\nfunction binaryPrecedence(token) {\n  var prec = 0;\n\n  if (token.type !== TokenPunctuator && token.type !== TokenKeyword) {\n    return 0;\n  }\n\n  switch (token.value) {\n    case '||':\n      prec = 1;\n      break;\n\n    case '&&':\n      prec = 2;\n      break;\n\n    case '|':\n      prec = 3;\n      break;\n\n    case '^':\n      prec = 4;\n      break;\n\n    case '&':\n      prec = 5;\n      break;\n\n    case '==':\n    case '!=':\n    case '===':\n    case '!==':\n      prec = 6;\n      break;\n\n    case '<':\n    case '>':\n    case '<=':\n    case '>=':\n    case 'instanceof':\n    case 'in':\n      prec = 7;\n      break;\n\n    case '<<':\n    case '>>':\n    case '>>>':\n      prec = 8;\n      break;\n\n    case '+':\n    case '-':\n      prec = 9;\n      break;\n\n    case '*':\n    case '/':\n    case '%':\n      prec = 11;\n      break;\n\n    default:\n      break;\n  }\n\n  return prec;\n}\n\n// 11.5 Multiplicative Operators\n// 11.6 Additive Operators\n// 11.7 Bitwise Shift Operators\n// 11.8 Relational Operators\n// 11.9 Equality Operators\n// 11.10 Binary Bitwise Operators\n// 11.11 Binary Logical Operators\n\nfunction parseBinaryExpression() {\n  var marker, markers, expr, token, prec, stack, right, operator, left, i;\n\n  marker = lookahead;\n  left = parseUnaryExpression();\n\n  token = lookahead;\n  prec = binaryPrecedence(token);\n  if (prec === 0) {\n    return left;\n  }\n  token.prec = prec;\n  lex();\n\n  markers = [marker, lookahead];\n  right = parseUnaryExpression();\n\n  stack = [left, token, right];\n\n  while ((prec = binaryPrecedence(lookahead)) > 0) {\n\n    // Reduce: make a binary expression from the three topmost entries.\n    while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {\n      right = stack.pop();\n      operator = stack.pop().value;\n      left = stack.pop();\n      markers.pop();\n      expr = finishBinaryExpression(operator, left, right);\n      stack.push(expr);\n    }\n\n    // Shift.\n    token = lex();\n    token.prec = prec;\n    stack.push(token);\n    markers.push(lookahead);\n    expr = parseUnaryExpression();\n    stack.push(expr);\n  }\n\n  // Final reduce to clean-up the stack.\n  i = stack.length - 1;\n  expr = stack[i];\n  markers.pop();\n  while (i > 1) {\n    markers.pop()\n    expr = finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);\n    i -= 2;\n  }\n\n  return expr;\n}\n\n// 11.12 Conditional Operator\n\nfunction parseConditionalExpression() {\n  var expr, consequent, alternate;\n\n  expr = parseBinaryExpression();\n\n  if (match('?')) {\n    lex();\n    consequent = parseConditionalExpression();\n    expect(':');\n    alternate = parseConditionalExpression();\n\n    expr = finishConditionalExpression(expr, consequent, alternate);\n  }\n\n  return expr;\n}\n\n// 11.14 Comma Operator\n\nfunction parseExpression() {\n  var expr = parseConditionalExpression();\n\n  if (match(',')) {\n    throw new Error(DISABLED); // no sequence expressions\n  }\n\n  return expr;\n}\n\nexport default function(code) {\n  source = code;\n  index = 0;\n  length = source.length;\n  lookahead = null;\n\n  peek();\n\n  var expr = parseExpression();\n\n  if (lookahead.type !== TokenEOF) {\n    throw new Error(\"Unexpect token after expression.\");\n  }\n  return expr;\n}\n","import {parse} from 'vega-expression';\n\nfunction getName(node: any) {\n  const name: string[] = [];\n\n  if (node.type === 'Identifier') {\n    return [node.name];\n  }\n\n  if (node.type === 'Literal') {\n    return [node.value];\n  }\n\n  if (node.type === 'MemberExpression') {\n    name.push(...getName(node.object));\n    name.push(...getName(node.property));\n  }\n\n  return name;\n}\n\nfunction startsWithDatum(node: any): boolean {\n  if (node.object.type === 'MemberExpression') {\n    return startsWithDatum(node.object);\n  }\n  return node.object.name === 'datum';\n}\n\nexport function getDependentFields(expression: string) {\n  const ast = parse(expression);\n  const dependents = new Set<string>();\n  ast.visit((node: any) => {\n    if (node.type === 'MemberExpression' && startsWithDatum(node)) {\n      dependents.add(\n        getName(node)\n          .slice(1)\n          .join('.')\n      );\n    }\n  });\n\n  return dependents;\n}\n","import {SingleDefChannel} from '../../channel';\nimport {DateTime} from '../../datetime';\nimport {FieldRefOption, isScaleFieldDef, TypedFieldDef, vgField} from '../../fielddef';\nimport {fieldFilterExpression} from '../../predicate';\nimport {isSortArray} from '../../sort';\nimport {CalculateTransform} from '../../transform';\nimport {duplicate, hash} from '../../util';\nimport {VgFormulaTransform} from '../../vega.schema';\nimport {ModelWithField} from '../model';\nimport {DataFlowNode} from './dataflow';\nimport {getDependentFields} from './expressions';\n\n/**\n * We don't know what a calculate node depends on so we should never move it beyond anything that produces fields.\n */\n\nexport class CalculateNode extends DataFlowNode {\n  private _dependentFields: Set<string>;\n\n  public clone() {\n    return new CalculateNode(null, duplicate(this.transform));\n  }\n\n  constructor(parent: DataFlowNode, private readonly transform: CalculateTransform) {\n    super(parent);\n\n    this._dependentFields = getDependentFields(this.transform.calculate);\n  }\n\n  public static parseAllForSortIndex(parent: DataFlowNode, model: ModelWithField) {\n    // get all the encoding with sort fields from model\n    model.forEachFieldDef((fieldDef: TypedFieldDef<string>, channel: SingleDefChannel) => {\n      if (!isScaleFieldDef(fieldDef)) {\n        return;\n      }\n      if (isSortArray(fieldDef.sort)) {\n        const {field, timeUnit} = fieldDef;\n        const sort: (number | string | boolean | DateTime)[] = fieldDef.sort;\n        // generate `datum[\"a\"] === val0 ? 0 : datum[\"a\"] === val1 ? 1 : ... : n` via FieldEqualPredicate\n        const calculate =\n          sort\n            .map((sortValue, i) => {\n              return `${fieldFilterExpression({field, timeUnit, equal: sortValue})} ? ${i} : `;\n            })\n            .join('') + sort.length;\n\n        parent = new CalculateNode(parent, {\n          calculate,\n          as: sortArrayIndexField(fieldDef, channel, {forAs: true})\n        });\n      }\n    });\n    return parent;\n  }\n\n  public producedFields() {\n    return new Set([this.transform.as]);\n  }\n\n  public dependentFields() {\n    return this._dependentFields;\n  }\n\n  public assemble(): VgFormulaTransform {\n    return {\n      type: 'formula',\n      expr: this.transform.calculate,\n      as: this.transform.as\n    };\n  }\n\n  public hash() {\n    return `Calculate ${hash(this.transform)}`;\n  }\n}\n\nexport function sortArrayIndexField(fieldDef: TypedFieldDef<string>, channel: SingleDefChannel, opt?: FieldRefOption) {\n  return vgField(fieldDef, {prefix: channel, suffix: 'sort_index', ...(opt || {})});\n}\n","/**\n * Utility for generating row / column headers\n */\nimport {Axis as VgAxis, AxisOrient, TitleConfig} from 'vega';\nimport {isArray} from 'vega-util';\nimport {Config} from '../../config';\nimport {vgField} from '../../fielddef';\nimport {\n  HEADER_LABEL_PROPERTIES,\n  HEADER_LABEL_PROPERTIES_MAP,\n  HEADER_TITLE_PROPERTIES,\n  HEADER_TITLE_PROPERTIES_MAP,\n  HeaderConfig\n} from '../../header';\nimport {isSortField} from '../../sort';\nimport {FacetFieldDef} from '../../spec/facet';\nimport {keys} from '../../util';\nimport {VgComparator, VgMarkGroup} from '../../vega.schema';\nimport {formatSignalRef} from '../common';\nimport {sortArrayIndexField} from '../data/calculate';\nimport {Model} from '../model';\n\nexport type HeaderChannel = 'row' | 'column';\nexport const HEADER_CHANNELS: HeaderChannel[] = ['row', 'column'];\n\nexport type HeaderType = 'header' | 'footer';\nexport const HEADER_TYPES: HeaderType[] = ['header', 'footer'];\n\n/**\n * A component that represents all header, footers and title of a Vega group with layout directive.\n */\nexport interface LayoutHeaderComponent {\n  title?: string;\n\n  // TODO: repeat and concat can have multiple header / footer.\n  // Need to redesign this part a bit.\n\n  facetFieldDef?: FacetFieldDef<string>;\n\n  /**\n   * An array of header components for headers.\n   * For facet, there should be only one header component, which is data-driven.\n   * For repeat and concat, there can be multiple header components that explicitly list different axes.\n   */\n  header?: HeaderComponent[];\n\n  /**\n   * An array of header components for footers.\n   * For facet, there should be only one header component, which is data-driven.\n   * For repeat and concat, there can be multiple header components that explicitly list different axes.\n   */\n  footer?: HeaderComponent[];\n}\n\n/**\n * A component that represents one group of row/column-header/footer.\n */\nexport interface HeaderComponent {\n  labels: boolean;\n\n  sizeSignal: {signal: string};\n\n  axes: VgAxis[];\n}\n\nexport function getHeaderType(orient: AxisOrient) {\n  if (orient === 'top' || orient === 'left') {\n    return 'header';\n  }\n  return 'footer';\n}\n\nexport function assembleTitleGroup(model: Model, channel: HeaderChannel) {\n  const title = model.component.layoutHeaders[channel].title;\n  const config = model.config ? model.config : undefined;\n  const facetFieldDef = model.component.layoutHeaders[channel].facetFieldDef\n    ? model.component.layoutHeaders[channel].facetFieldDef\n    : undefined;\n\n  return {\n    name: `${channel}-title`,\n    type: 'group',\n    role: `${channel}-title`,\n    title: {\n      text: title,\n      offset: 10,\n      ...(channel === 'row' ? {orient: 'left'} : {}),\n      style: 'guide-title',\n      ...getHeaderProperties(config, facetFieldDef, HEADER_TITLE_PROPERTIES, HEADER_TITLE_PROPERTIES_MAP)\n    }\n  };\n}\n\nexport function assembleHeaderGroups(model: Model, channel: HeaderChannel): VgMarkGroup[] {\n  const layoutHeader = model.component.layoutHeaders[channel];\n  const groups = [];\n  for (const headerType of HEADER_TYPES) {\n    if (layoutHeader[headerType]) {\n      for (const headerCmpt of layoutHeader[headerType]) {\n        groups.push(assembleHeaderGroup(model, channel, headerType, layoutHeader, headerCmpt));\n      }\n    }\n  }\n  return groups;\n}\n\n// 0, (0,90), 90, (90, 180), 180, (180, 270), 270, (270, 0)\n\nexport function labelAlign(angle: number) {\n  // to keep angle in [0, 360)\n  angle = ((angle % 360) + 360) % 360;\n  if ((angle + 90) % 180 === 0) {\n    // for 90 and 270\n    return {}; // default center\n  } else if (angle < 90 || 270 < angle) {\n    return {align: {value: 'right'}};\n  } else if (135 <= angle && angle < 225) {\n    return {align: {value: 'left'}};\n  }\n  return {};\n}\n\nexport function labelBaseline(angle: number) {\n  // to keep angle in [0, 360)\n  angle = ((angle % 360) + 360) % 360;\n  if (45 <= angle && angle <= 135) {\n    return {baseline: 'top'};\n  }\n  return {baseline: 'middle'};\n}\n\nfunction getSort(facetFieldDef: FacetFieldDef<string>, channel: 'row' | 'column'): VgComparator {\n  const {sort} = facetFieldDef;\n  if (isSortField(sort)) {\n    return {\n      field: vgField(sort, {expr: 'datum'}),\n      order: sort.order || 'ascending'\n    };\n  } else if (isArray(sort)) {\n    return {\n      field: sortArrayIndexField(facetFieldDef, channel, {expr: 'datum'}),\n      order: 'ascending'\n    };\n  } else {\n    return {\n      field: vgField(facetFieldDef, {expr: 'datum'}),\n      order: sort || 'ascending'\n    };\n  }\n}\n\nexport function assembleHeaderGroup(\n  model: Model,\n  channel: HeaderChannel,\n  headerType: HeaderType,\n  layoutHeader: LayoutHeaderComponent,\n  headerCmpt: HeaderComponent\n) {\n  if (headerCmpt) {\n    let title = null;\n    const {facetFieldDef} = layoutHeader;\n    if (facetFieldDef && headerCmpt.labels) {\n      const {header = {}} = facetFieldDef;\n      const {format, labelAngle} = header;\n      const config = model.config ? model.config : undefined;\n\n      const update = {\n        ...labelAlign(labelAngle)\n      };\n\n      title = {\n        text: formatSignalRef(facetFieldDef, format, 'parent', model.config),\n        offset: 10,\n        ...(channel === 'row' ? {orient: 'left'} : {}),\n        style: 'guide-label',\n        ...(labelAngle !== undefined ? {angle: labelAngle} : {}),\n        ...labelBaseline(labelAngle),\n        ...getHeaderProperties(config, facetFieldDef, HEADER_LABEL_PROPERTIES, HEADER_LABEL_PROPERTIES_MAP),\n        ...(keys(update).length > 0 ? {encode: {update}} : {})\n      };\n    }\n\n    const axes = headerCmpt.axes;\n\n    const hasAxes = axes && axes.length > 0;\n    if (title || hasAxes) {\n      const sizeChannel = channel === 'row' ? 'height' : 'width';\n\n      return {\n        name: model.getName(`${channel}_${headerType}`),\n        type: 'group',\n        role: `${channel}-${headerType}`,\n        ...(layoutHeader.facetFieldDef\n          ? {\n              from: {data: model.getName(channel + '_domain')},\n              sort: getSort(facetFieldDef, channel)\n            }\n          : {}),\n        ...(title ? {title} : {}),\n        ...(headerCmpt.sizeSignal\n          ? {\n              encode: {\n                update: {\n                  [sizeChannel]: headerCmpt.sizeSignal\n                }\n              }\n            }\n          : {}),\n        ...(hasAxes ? {axes} : {})\n      };\n    }\n  }\n  return null;\n}\n\nexport function getHeaderProperties(\n  config: Config,\n  facetFieldDef: FacetFieldDef<string>,\n  properties: (keyof HeaderConfig)[],\n  propertiesMap: {[k in keyof HeaderConfig]: keyof TitleConfig}\n) {\n  const props = {};\n  for (const prop of properties) {\n    if (config && config.header) {\n      if (config.header[prop]) {\n        props[propertiesMap[prop]] = config.header[prop];\n      }\n    }\n    if (facetFieldDef && facetFieldDef.header) {\n      if (facetFieldDef.header[prop]) {\n        props[propertiesMap[prop]] = facetFieldDef.header[prop];\n      }\n    }\n  }\n  return props;\n}\n","import {NewSignal} from 'vega';\nimport {hasDiscreteDomain} from '../../scale';\nimport {getFirstDefined} from '../../util';\nimport {isVgRangeStep, VgRangeStep} from '../../vega.schema';\nimport {isFacetModel, Model} from '../model';\nimport {ScaleComponent} from '../scale/component';\n\nexport function assembleLayoutSignals(model: Model): NewSignal[] {\n  return [...sizeSignals(model, 'width'), ...sizeSignals(model, 'height')];\n}\n\nexport function sizeSignals(model: Model, sizeType: 'width' | 'height'): NewSignal[] {\n  const channel = sizeType === 'width' ? 'x' : 'y';\n  const size = model.component.layoutSize.get(sizeType);\n  if (!size || size === 'merged') {\n    return [];\n  }\n\n  // Read size signal name from name map, just in case it is the top-level size signal that got renamed.\n  const name = model.getSizeSignalRef(sizeType).signal;\n\n  if (size === 'range-step') {\n    const scaleComponent = model.getScaleComponent(channel);\n\n    if (scaleComponent) {\n      const type = scaleComponent.get('type');\n      const range = scaleComponent.get('range');\n\n      if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n        const scaleName = model.scaleName(channel);\n\n        if (isFacetModel(model.parent)) {\n          // If parent is facet and this is an independent scale, return only signal signal\n          // as the width/height will be calculated using the cardinality from\n          // facet's aggregate rather than reading from scale domain\n          const parentResolve = model.parent.component.resolve;\n          if (parentResolve.scale[channel] === 'independent') {\n            return [stepSignal(scaleName, range)];\n          }\n        }\n\n        return [\n          stepSignal(scaleName, range),\n          {\n            name,\n            update: sizeExpr(scaleName, scaleComponent, `domain('${scaleName}').length`)\n          }\n        ];\n      }\n    }\n    /* istanbul ignore next: Condition should not happen -- only for warning in development. */\n    throw new Error('layout size is range step although there is no rangeStep.');\n  } else {\n    return [\n      {\n        name,\n        value: size\n      }\n    ];\n  }\n}\n\nfunction stepSignal(scaleName: string, range: VgRangeStep): NewSignal {\n  return {\n    name: scaleName + '_step',\n    value: range.step\n  };\n}\n\nexport function sizeExpr(scaleName: string, scaleComponent: ScaleComponent, cardinality: string) {\n  const type = scaleComponent.get('type');\n  const padding = scaleComponent.get('padding');\n  const paddingOuter = getFirstDefined(scaleComponent.get('paddingOuter'), padding);\n\n  let paddingInner = scaleComponent.get('paddingInner');\n  paddingInner =\n    type === 'band'\n      ? // only band has real paddingInner\n        paddingInner !== undefined\n        ? paddingInner\n        : padding\n      : // For point, as calculated in https://github.com/vega/vega-scale/blob/master/src/band.js#L128,\n        // it's equivalent to have paddingInner = 1 since there is only n-1 steps between n points.\n        1;\n  return `bandspace(${cardinality}, ${paddingInner}, ${paddingOuter}) * ${scaleName}_step`;\n}\n","/**\n * Parse an event selector string.\n * Returns an array of event stream definitions.\n */\nexport default function(selector, source, marks) {\n  DEFAULT_SOURCE = source || VIEW;\n  MARKS = marks || DEFAULT_MARKS;\n  return parseMerge(selector.trim()).map(parseSelector);\n}\n\nvar VIEW    = 'view',\n    LBRACK  = '[',\n    RBRACK  = ']',\n    LBRACE  = '{',\n    RBRACE  = '}',\n    COLON   = ':',\n    COMMA   = ',',\n    NAME    = '@',\n    GT      = '>',\n    ILLEGAL = /[[\\]{}]/,\n    DEFAULT_SOURCE,\n    MARKS,\n    DEFAULT_MARKS = {\n      '*': 1,\n      arc: 1,\n      area: 1,\n      group: 1,\n      image: 1,\n      line: 1,\n      path: 1,\n      rect: 1,\n      rule: 1,\n      shape: 1,\n      symbol: 1,\n      text: 1,\n      trail: 1\n    };\n\nfunction isMarkType(type) {\n  return MARKS.hasOwnProperty(type);\n}\n\nfunction find(s, i, endChar, pushChar, popChar) {\n  var count = 0,\n      n = s.length,\n      c;\n  for (; i<n; ++i) {\n    c = s[i];\n    if (!count && c === endChar) return i;\n    else if (popChar && popChar.indexOf(c) >= 0) --count;\n    else if (pushChar && pushChar.indexOf(c) >= 0) ++count;\n  }\n  return i;\n}\n\nfunction parseMerge(s) {\n  var output = [],\n      start = 0,\n      n = s.length,\n      i = 0;\n\n  while (i < n) {\n    i = find(s, i, COMMA, LBRACK + LBRACE, RBRACK + RBRACE);\n    output.push(s.substring(start, i).trim());\n    start = ++i;\n  }\n\n  if (output.length === 0) {\n    throw 'Empty event selector: ' + s;\n  }\n  return output;\n}\n\nfunction parseSelector(s) {\n  return s[0] === '['\n    ? parseBetween(s)\n    : parseStream(s);\n}\n\nfunction parseBetween(s) {\n  var n = s.length,\n      i = 1,\n      b, stream;\n\n  i = find(s, i, RBRACK, LBRACK, RBRACK);\n  if (i === n) {\n    throw 'Empty between selector: ' + s;\n  }\n\n  b = parseMerge(s.substring(1, i));\n  if (b.length !== 2) {\n    throw 'Between selector must have two elements: ' + s;\n  }\n\n  s = s.slice(i + 1).trim();\n  if (s[0] !== GT) {\n    throw 'Expected \\'>\\' after between selector: ' + s;\n  }\n\n  b = b.map(parseSelector);\n\n  stream = parseSelector(s.slice(1).trim());\n  if (stream.between) {\n    return {\n      between: b,\n      stream: stream\n    };\n  } else {\n    stream.between = b;\n  }\n\n  return stream;\n}\n\nfunction parseStream(s) {\n  var stream = {source: DEFAULT_SOURCE},\n      source = [],\n      throttle = [0, 0],\n      markname = 0,\n      start = 0,\n      n = s.length,\n      i = 0, j,\n      filter;\n\n  // extract throttle from end\n  if (s[n-1] === RBRACE) {\n    i = s.lastIndexOf(LBRACE);\n    if (i >= 0) {\n      try {\n        throttle = parseThrottle(s.substring(i+1, n-1));\n      } catch (e) {\n        throw 'Invalid throttle specification: ' + s;\n      }\n      s = s.slice(0, i).trim();\n      n = s.length;\n    } else throw 'Unmatched right brace: ' + s;\n    i = 0;\n  }\n\n  if (!n) throw s;\n\n  // set name flag based on first char\n  if (s[0] === NAME) markname = ++i;\n\n  // extract first part of multi-part stream selector\n  j = find(s, i, COLON);\n  if (j < n) {\n    source.push(s.substring(start, j).trim());\n    start = i = ++j;\n  }\n\n  // extract remaining part of stream selector\n  i = find(s, i, LBRACK);\n  if (i === n) {\n    source.push(s.substring(start, n).trim());\n  } else {\n    source.push(s.substring(start, i).trim());\n    filter = [];\n    start = ++i;\n    if (start === n) throw 'Unmatched left bracket: ' + s;\n  }\n\n  // extract filters\n  while (i < n) {\n    i = find(s, i, RBRACK);\n    if (i === n) throw 'Unmatched left bracket: ' + s;\n    filter.push(s.substring(start, i).trim());\n    if (i < n-1 && s[++i] !== LBRACK) throw 'Expected left bracket: ' + s;\n    start = ++i;\n  }\n\n  // marshall event stream specification\n  if (!(n = source.length) || ILLEGAL.test(source[n-1])) {\n    throw 'Invalid event selector: ' + s;\n  }\n\n  if (n > 1) {\n    stream.type = source[1];\n    if (markname) {\n      stream.markname = source[0].slice(1);\n    } else if (isMarkType(source[0])) {\n      stream.marktype = source[0];\n    } else {\n      stream.source = source[0];\n    }\n  } else {\n    stream.type = source[0];\n  }\n  if (stream.type.slice(-1) === '!') {\n    stream.consume = true;\n    stream.type = stream.type.slice(0, -1)\n  }\n  if (filter != null) stream.filter = filter;\n  if (throttle[0]) stream.throttle = throttle[0];\n  if (throttle[1]) stream.debounce = throttle[1];\n\n  return stream;\n}\n\nfunction parseThrottle(s) {\n  var a = s.split(COMMA);\n  if (!s.length || a.length > 2) throw s;\n  return a.map(function(_) {\n    var x = +_;\n    if (x !== x) throw s;\n    return x;\n  });\n}\n","import {vgField} from '../../fielddef';\nimport {fieldExpr, TimeUnit} from '../../timeunit';\nimport {TimeUnitTransform} from '../../transform';\nimport {Dict, duplicate, hash, keys, vals} from '../../util';\nimport {VgFormulaTransform} from '../../vega.schema';\nimport {ModelWithField} from '../model';\nimport {DataFlowNode} from './dataflow';\n\nexport interface TimeUnitComponent {\n  as: string;\n  timeUnit: TimeUnit;\n  field: string;\n}\n\nexport class TimeUnitNode extends DataFlowNode {\n  public clone() {\n    return new TimeUnitNode(null, duplicate(this.formula));\n  }\n\n  constructor(parent: DataFlowNode, private formula: Dict<TimeUnitComponent>) {\n    super(parent);\n  }\n\n  public static makeFromEncoding(parent: DataFlowNode, model: ModelWithField) {\n    const formula = model.reduceFieldDef(\n      (timeUnitComponent: TimeUnitComponent, fieldDef) => {\n        if (fieldDef.timeUnit) {\n          const f = vgField(fieldDef, {forAs: true});\n          timeUnitComponent[f] = {\n            as: f,\n            timeUnit: fieldDef.timeUnit,\n            field: fieldDef.field\n          };\n        }\n        return timeUnitComponent;\n      },\n      {} as Dict<TimeUnitComponent>\n    );\n\n    if (keys(formula).length === 0) {\n      return null;\n    }\n\n    return new TimeUnitNode(parent, formula);\n  }\n\n  public static makeFromTransform(parent: DataFlowNode, t: TimeUnitTransform) {\n    return new TimeUnitNode(parent, {\n      [t.field]: {\n        as: t.as,\n        timeUnit: t.timeUnit,\n        field: t.field\n      }\n    });\n  }\n\n  public merge(other: TimeUnitNode) {\n    this.formula = {...this.formula, ...other.formula};\n    other.remove();\n  }\n\n  public producedFields() {\n    return new Set(vals(this.formula).map(f => f.as));\n  }\n\n  public dependentFields() {\n    return new Set(vals(this.formula).map(f => f.field));\n  }\n\n  public hash() {\n    return `TimeUnit ${hash(this.formula)}`;\n  }\n\n  public assemble() {\n    return vals(this.formula).map(c => {\n      return {\n        type: 'formula',\n        as: c.as,\n        expr: fieldExpr(c.timeUnit, c.field)\n      } as VgFormulaTransform;\n    });\n  }\n}\n","import {stringValue} from 'vega-util';\nimport {Channel, isScaleChannel, X, Y} from '../../../channel';\nimport * as log from '../../../log';\nimport {hasContinuousDomain} from '../../../scale';\nimport {accessPathWithDatum, varName} from '../../../util';\nimport {UnitModel} from '../../unit';\nimport {channelSignalName, VL_SELECTION_RESOLVE} from '../selection';\nimport {TransformCompiler} from './transforms';\n\nconst scaleBindings: TransformCompiler = {\n  has: selCmpt => {\n    return selCmpt.type === 'interval' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind === 'scales';\n  },\n\n  parse: (model, selDef, selCmpt) => {\n    const name = varName(selCmpt.name);\n    const bound: Channel[] = (selCmpt.scales = []);\n\n    for (const p of selCmpt.project) {\n      const channel = p.channel;\n\n      if (!isScaleChannel(channel)) {\n        continue;\n      }\n\n      const scale = model.getScaleComponent(channel);\n      const scaleType = scale ? scale.get('type') : undefined;\n\n      if (!scale || !hasContinuousDomain(scaleType)) {\n        log.warn(log.message.SCALE_BINDINGS_CONTINUOUS);\n        continue;\n      }\n\n      scale.set('domainRaw', {signal: accessPathWithDatum(p.field, name)}, true);\n      bound.push(channel);\n\n      // Bind both x/y for diag plot of repeated views.\n      if (model.repeater && model.repeater.row === model.repeater.column) {\n        const scale2 = model.getScaleComponent(channel === X ? Y : X);\n        scale2.set('domainRaw', {signal: accessPathWithDatum(p.field, name)}, true);\n      }\n    }\n  },\n\n  topLevelSignals: (model, selCmpt, signals) => {\n    const channelSignals = selCmpt.scales\n      .filter(channel => {\n        return !signals.filter(s => s.name === channelSignalName(selCmpt, channel, 'data')).length;\n      })\n      .map(channel => {\n        return {channel, signal: channelSignalName(selCmpt, channel, 'data')};\n      });\n\n    // Top-level signals are only needed for multiview displays and if this\n    // view's top-level signals haven't already been generated.\n    if (!model.parent || !channelSignals.length) {\n      return signals;\n    }\n\n    // vlSelectionResolve does not account for the behavior of bound scales in\n    // multiview displays. Each unit view adds a tuple to the store, but the\n    // state of the selection is the unit selection most recently updated. This\n    // state is captured by the top-level signals that we insert and \"push\n    // outer\" to from within the units. We need to reassemble this state into\n    // the top-level named signal, except no single selCmpt has a global view.\n    const namedSg = signals.filter(s => s.name === selCmpt.name)[0];\n    const update = namedSg.update;\n    if (update.indexOf(VL_SELECTION_RESOLVE) >= 0) {\n      namedSg.update =\n        '{' + channelSignals.map(cs => `${stringValue(selCmpt.fields[cs.channel])}: ${cs.signal}`).join(', ') + '}';\n    } else {\n      for (const cs of channelSignals) {\n        const mapping = `, ${stringValue(selCmpt.fields[cs.channel])}: ${cs.signal}`;\n        if (update.indexOf(mapping) < 0) {\n          namedSg.update = update.substring(0, update.length - 1) + mapping + '}';\n        }\n      }\n    }\n\n    return signals.concat(channelSignals.map(cs => ({name: cs.signal})));\n  },\n\n  signals: (model, selCmpt, signals) => {\n    // Nested signals need only push to top-level signals with multiview displays.\n    if (model.parent) {\n      for (const channel of selCmpt.scales) {\n        const signal: any = signals.filter(s => s.name === channelSignalName(selCmpt, channel, 'data'))[0];\n\n        // convert to PushSignal\n        signal.push = 'outer';\n        delete signal.value;\n        delete signal.update;\n      }\n    }\n\n    return signals;\n  }\n};\n\nexport default scaleBindings;\n\nexport function domain(model: UnitModel, channel: Channel) {\n  const scale = stringValue(model.scaleName(channel));\n  return `domain(${scale})`;\n}\n","import {isArray} from 'vega-util';\nimport {ScaleChannel} from '../../../channel';\nimport * as log from '../../../log';\nimport {hasContinuousDomain} from '../../../scale';\nimport {isIntervalSelection, SelectionDef, SelectionInitArrayMapping, SelectionInitMapping} from '../../../selection';\nimport {Dict, keys} from '../../../util';\nimport {TimeUnitComponent, TimeUnitNode} from '../../data/timeunit';\nimport {ProjectSelectionComponent, SelectionComponent, TUPLE, TupleStoreType} from '../selection';\nimport scales from './scales';\nimport {TransformCompiler} from './transforms';\n\nexport const TUPLE_FIELDS = '_fields';\n\nconst project: TransformCompiler = {\n  has: (selDef: SelectionComponent | SelectionDef) => {\n    const def = selDef as SelectionDef;\n    return def.fields !== undefined || def.encodings !== undefined;\n  },\n\n  parse: (model, selDef, selCmpt) => {\n    const timeUnits: Dict<TimeUnitComponent> = {};\n    const f: Dict<ProjectSelectionComponent> = {};\n\n    // Selection component may already have a projection from the config. (Interval selection will have `encodings: ['x', 'y'].)\n    const proj = selCmpt.project || (selCmpt.project = []);\n    selCmpt.fields = {};\n\n    // TODO: find a possible channel mapping for these fields.\n    if (selDef.fields) {\n      proj.push(...selDef.fields.map<ProjectSelectionComponent>(field => ({field, type: 'E'})));\n    }\n\n    for (const channel of selDef.encodings || []) {\n      const fieldDef = model.fieldDef(channel);\n      if (fieldDef) {\n        let field = fieldDef.field;\n        if (fieldDef.timeUnit) {\n          field = model.vgField(channel);\n\n          // Construct TimeUnitComponents which will be combined into a\n          // TimeUnitNode. This node may need to be inserted into the\n          // dataflow if the selection is used across views that do not\n          // have these time units defined.\n          timeUnits[field] = {\n            as: field,\n            field: fieldDef.field,\n            timeUnit: fieldDef.timeUnit\n          };\n        }\n\n        // Prevent duplicate projections on the same field.\n        // TODO: what if the same field is bound to multiple channels (e.g., SPLOM diag).\n        if (!f[field]) {\n          // Determine whether the tuple will store enumerated or ranged values.\n          // Interval selections store ranges for continuous scales, and enumerations otherwise.\n          // Single/multi selections store ranges for binned fields, and enumerations otherwise.\n          let type: TupleStoreType = 'E';\n          if (selCmpt.type === 'interval') {\n            const scaleType = model.getScaleComponent(channel as ScaleChannel).get('type');\n            if (hasContinuousDomain(scaleType)) {\n              type = 'R';\n            }\n          } else if (fieldDef.bin) {\n            type = 'R-RE';\n          }\n\n          proj.push((f[field] = {field, channel, type}));\n        }\n\n        selCmpt.fields[channel] = field;\n      } else {\n        log.warn(log.message.cannotProjectOnChannelWithoutField(channel));\n      }\n    }\n\n    if (selDef.init) {\n      if (scales.has(selCmpt)) {\n        log.warn(log.message.NO_INIT_SCALE_BINDINGS);\n      } else {\n        function parseInit<T extends SelectionInitMapping | SelectionInitArrayMapping>(i: T): T['a'][] {\n          return proj.map(p => (i[p.channel] !== undefined ? i[p.channel] : i[p.field]));\n        }\n\n        if (isIntervalSelection(selDef)) {\n          selCmpt.init = parseInit(selDef.init);\n        } else {\n          const init = isArray(selDef.init) ? selDef.init : [selDef.init];\n          selCmpt.init = init.map(parseInit);\n        }\n      }\n    }\n\n    if (keys(timeUnits).length) {\n      selCmpt.timeUnit = new TimeUnitNode(null, timeUnits);\n    }\n  },\n\n  signals: (model, selCmpt, signals) => {\n    const name = selCmpt.name + TUPLE + TUPLE_FIELDS;\n    const hasSignal = signals.filter(s => s.name === name);\n    return hasSignal.length\n      ? signals\n      : signals.concat({\n          name,\n          value: selCmpt.project\n        });\n  }\n};\n\nexport default project;\n","import {stringValue} from 'vega-util';\nimport {X, Y} from '../../channel';\nimport {warn} from '../../log';\nimport {hasContinuousDomain} from '../../scale';\nimport {keys} from '../../util';\nimport {EventStream} from '../../vega.schema';\nimport {UnitModel} from '../unit';\nimport {\n  assembleInit,\n  channelSignalName,\n  positionalProjections,\n  SelectionCompiler,\n  SelectionComponent,\n  STORE,\n  TUPLE,\n  unitName\n} from './selection';\nimport {TUPLE_FIELDS} from './transforms/project';\nimport scales from './transforms/scales';\n\nexport const BRUSH = '_brush';\nexport const SCALE_TRIGGER = '_scale_trigger';\n\nconst interval: SelectionCompiler<'interval'> = {\n  signals: (model, selCmpt) => {\n    const name = selCmpt.name;\n    const fieldsSg = name + TUPLE + TUPLE_FIELDS;\n    const hasScales = scales.has(selCmpt);\n    const signals: any[] = [];\n    const dataSignals: string[] = [];\n    const scaleTriggers: any[] = [];\n\n    if (selCmpt.translate && !hasScales) {\n      const filterExpr = `!event.item || event.item.mark.name !== ${stringValue(name + BRUSH)}`;\n      events(selCmpt, (_: any[], evt: EventStream) => {\n        const filters = evt.between[0].filter || (evt.between[0].filter = []);\n        if (filters.indexOf(filterExpr) < 0) {\n          filters.push(filterExpr);\n        }\n      });\n    }\n\n    selCmpt.project.forEach((p, i) => {\n      const channel = p.channel;\n      if (channel !== X && channel !== Y) {\n        warn('Interval selections only support x and y encoding channels.');\n        return;\n      }\n\n      const cs = channelSignals(model, selCmpt, channel, i);\n      const dname = channelSignalName(selCmpt, channel, 'data');\n      const vname = channelSignalName(selCmpt, channel, 'visual');\n      const scaleStr = stringValue(model.scaleName(channel));\n      const scaleType = model.getScaleComponent(channel).get('type');\n      const toNum = hasContinuousDomain(scaleType) ? '+' : '';\n\n      signals.push(...cs);\n      dataSignals.push(dname);\n\n      scaleTriggers.push({\n        scaleName: model.scaleName(channel),\n        expr:\n          `(!isArray(${dname}) || ` +\n          `(${toNum}invert(${scaleStr}, ${vname})[0] === ${toNum}${dname}[0] && ` +\n          `${toNum}invert(${scaleStr}, ${vname})[1] === ${toNum}${dname}[1]))`\n      });\n    });\n\n    // Proxy scale reactions to ensure that an infinite loop doesn't occur\n    // when an interval selection filter touches the scale.\n    if (!hasScales) {\n      signals.push({\n        name: name + SCALE_TRIGGER,\n        update: scaleTriggers.map(t => t.expr).join(' && ') + ` ? ${name + SCALE_TRIGGER} : {}`\n      });\n    }\n\n    // Only add an interval to the store if it has valid data extents. Data extents\n    // are set to null if pixel extents are equal to account for intervals over\n    // ordinal/nominal domains which, when inverted, will still produce a valid datum.\n    const init = selCmpt.init;\n    const update = `unit: ${unitName(model)}, fields: ${fieldsSg}, values`;\n    return signals.concat({\n      name: name + TUPLE,\n      ...(init ? {init: `{${update}: ${assembleInit(init)}}`} : {}),\n      on: [\n        {\n          events: dataSignals.map(t => ({signal: t})),\n          update: dataSignals.join(' && ') + ` ? {${update}: [${dataSignals}]} : null`\n        }\n      ]\n    });\n  },\n\n  modifyExpr: (model, selCmpt) => {\n    const tpl = selCmpt.name + TUPLE;\n    return tpl + ', ' + (selCmpt.resolve === 'global' ? 'true' : `{unit: ${unitName(model)}}`);\n  },\n\n  marks: (model, selCmpt, marks) => {\n    const name = selCmpt.name;\n    const {xi, yi} = positionalProjections(selCmpt);\n    const store = `data(${stringValue(selCmpt.name + STORE)})`;\n\n    // Do not add a brush if we're binding to scales.\n    if (scales.has(selCmpt)) {\n      return marks;\n    }\n\n    const update: any = {\n      x: xi !== null ? {signal: `${name}_x[0]`} : {value: 0},\n      y: yi !== null ? {signal: `${name}_y[0]`} : {value: 0},\n      x2: xi !== null ? {signal: `${name}_x[1]`} : {field: {group: 'width'}},\n      y2: yi !== null ? {signal: `${name}_y[1]`} : {field: {group: 'height'}}\n    };\n\n    // If the selection is resolved to global, only a single interval is in\n    // the store. Wrap brush mark's encodings with a production rule to test\n    // this based on the `unit` property. Hide the brush mark if it corresponds\n    // to a unit different from the one in the store.\n    if (selCmpt.resolve === 'global') {\n      for (const key of keys(update)) {\n        update[key] = [\n          {\n            test: `${store}.length && ${store}[0].unit === ${unitName(model)}`,\n            ...update[key]\n          },\n          {value: 0}\n        ];\n      }\n    }\n\n    // Two brush marks ensure that fill colors and other aesthetic choices do\n    // not interefere with the core marks, but that the brushed region can still\n    // be interacted with (e.g., dragging it around).\n    const {fill, fillOpacity, ...stroke} = selCmpt.mark;\n    const vgStroke = keys(stroke).reduce((def, k) => {\n      def[k] = [\n        {\n          test: [xi !== null && `${name}_x[0] !== ${name}_x[1]`, yi != null && `${name}_y[0] !== ${name}_y[1]`]\n            .filter(x => x)\n            .join(' && '),\n          value: stroke[k]\n        },\n        {value: null}\n      ];\n      return def;\n    }, {});\n\n    return [\n      {\n        name: name + BRUSH + '_bg',\n        type: 'rect',\n        clip: true,\n        encode: {\n          enter: {\n            fill: {value: fill},\n            fillOpacity: {value: fillOpacity}\n          },\n          update: update\n        }\n      } as any,\n      ...marks,\n      {\n        name: name + BRUSH,\n        type: 'rect',\n        clip: true,\n        encode: {\n          enter: {\n            fill: {value: 'transparent'}\n          },\n          update: {...update, ...vgStroke}\n        }\n      }\n    ];\n  }\n};\nexport default interval;\n\n/**\n * Returns the visual and data signals for an interval selection.\n */\nfunction channelSignals(\n  model: UnitModel,\n  selCmpt: SelectionComponent<'interval'>,\n  channel: 'x' | 'y',\n  idx: number\n): any {\n  const vname = channelSignalName(selCmpt, channel, 'visual');\n  const dname = channelSignalName(selCmpt, channel, 'data');\n  const init = selCmpt.init && selCmpt.init[idx];\n  const hasScales = scales.has(selCmpt);\n  const scaleName = stringValue(model.scaleName(channel));\n  const scale = model.getScaleComponent(channel);\n  const scaleType = scale ? scale.get('type') : undefined;\n  const scaled = (str: string) => `scale(${scaleName}, ${str})`;\n  const size = model.getSizeSignalRef(channel === X ? 'width' : 'height').signal;\n  const coord = `${channel}(unit)`;\n\n  const on = events(selCmpt, (def: any[], evt: EventStream) => {\n    return [\n      ...def,\n      {events: evt.between[0], update: `[${coord}, ${coord}]`}, // Brush Start\n      {events: evt, update: `[${vname}[0], clamp(${coord}, 0, ${size})]`} // Brush End\n    ];\n  });\n\n  // React to pan/zooms of continuous scales. Non-continuous scales\n  // (band, point) cannot be pan/zoomed and any other changes\n  // to their domains (e.g., filtering) should clear the brushes.\n  on.push({\n    events: {signal: selCmpt.name + SCALE_TRIGGER},\n    update: hasContinuousDomain(scaleType) ? `[${scaled(`${dname}[0]`)}, ${scaled(`${dname}[1]`)}]` : `[0, 0]`\n  });\n\n  return hasScales\n    ? [{name: dname, on: []}]\n    : [\n        {\n          name: vname,\n          ...(init ? {init: assembleInit(init, scaled)} : {value: []}),\n          on: on\n        },\n        {\n          name: dname,\n          ...(init ? {init: assembleInit(init)} : {}),\n          on: [\n            {\n              events: {signal: vname},\n              update: `${vname}[0] === ${vname}[1] ? null : invert(${scaleName}, ${vname})`\n            }\n          ]\n        }\n      ];\n}\n\nfunction events(selCmpt: SelectionComponent<'interval'>, cb: (...args: any[]) => void) {\n  return selCmpt.events.reduce((on: any[], evt: EventStream) => {\n    if (!evt.between) {\n      warn(`${evt} is not an ordered event stream for interval selections`);\n      return on;\n    }\n    return cb(on, evt);\n  }, []);\n}\n","import {stringValue} from 'vega-util';\nimport {SelectionInit} from '../../selection';\nimport {accessPathWithDatum} from '../../util';\nimport {UnitModel} from '../unit';\nimport {assembleInit, SelectionCompiler, SelectionComponent, STORE, TUPLE, unitName} from './selection';\nimport {TUPLE_FIELDS} from './transforms/project';\n\nexport function singleOrMultiSignals(model: UnitModel, selCmpt: SelectionComponent<'single' | 'multi'>) {\n  const name = selCmpt.name;\n  const fieldsSg = name + TUPLE + TUPLE_FIELDS;\n  const proj = selCmpt.project;\n  const datum = '(item().isVoronoi ? datum.datum : datum)';\n  const values = proj\n    .map(p => {\n      const fieldDef = model.fieldDef(p.channel);\n      // Binned fields should capture extents, for a range test against the raw field.\n      return fieldDef && fieldDef.bin\n        ? `[${accessPathWithDatum(model.vgField(p.channel, {}), datum)}, ` +\n            `${accessPathWithDatum(model.vgField(p.channel, {binSuffix: 'end'}), datum)}]`\n        : `${accessPathWithDatum(p.field, datum)}`;\n    })\n    .join(', ');\n\n  // Only add a discrete selection to the store if a datum is present _and_\n  // the interaction isn't occurring on a group mark. This guards against\n  // polluting interactive state with invalid values in faceted displays\n  // as the group marks are also data-driven. We force the update to account\n  // for constant null states but varying toggles (e.g., shift-click in\n  // whitespace followed by a click in whitespace; the store should only\n  // be cleared on the second click).\n  const update = `unit: ${unitName(model)}, fields: ${fieldsSg}, values`;\n  const signals: any[] = [\n    {\n      name: name + TUPLE,\n      on: [\n        {\n          events: selCmpt.events,\n          update: `datum && item().mark.marktype !== 'group' ? {${update}: [${values}]} : null`,\n          force: true\n        }\n      ]\n    }\n  ];\n\n  if (selCmpt.init) {\n    const insert = selCmpt.init.map((i: SelectionInit | SelectionInit[]) => {\n      const str = assembleInit(i);\n      return `{${update}: ${str}}`;\n    });\n    signals.push({\n      name: `${name}_init`,\n      init: `modify(${stringValue(selCmpt.name + STORE)}, [${insert}])`\n    });\n  }\n\n  return signals;\n}\n\nconst multi: SelectionCompiler<'multi'> = {\n  signals: singleOrMultiSignals,\n\n  modifyExpr: (model, selCmpt) => {\n    const tpl = selCmpt.name + TUPLE;\n    return tpl + ', ' + (selCmpt.resolve === 'global' ? 'null' : `{unit: ${unitName(model)}}`);\n  }\n};\n\nexport default multi;\n","import {singleOrMultiSignals} from './multi';\nimport {SelectionCompiler, TUPLE, unitName} from './selection';\n\nconst single: SelectionCompiler<'single'> = {\n  signals: singleOrMultiSignals,\n\n  modifyExpr: (model, selCmpt) => {\n    const tpl = selCmpt.name + TUPLE;\n    return tpl + ', ' + (selCmpt.resolve === 'global' ? 'true' : `{unit: ${unitName(model)}}`);\n  }\n};\n\nexport default single;\n","import * as log from '../../../log';\nimport {isPathMark} from '../../../mark';\nimport {positionalProjections} from '../selection';\nimport {TransformCompiler} from './transforms';\n\nconst VORONOI = 'voronoi';\n\nconst nearest: TransformCompiler = {\n  has: selCmpt => {\n    return selCmpt.type !== 'interval' && selCmpt.nearest;\n  },\n\n  marks: (model, selCmpt, marks) => {\n    const {x, y} = positionalProjections(selCmpt);\n    const markType = model.mark;\n    if (isPathMark(markType)) {\n      log.warn(log.message.nearestNotSupportForContinuous(markType));\n      return marks;\n    }\n\n    const cellDef = {\n      name: model.getName(VORONOI),\n      type: 'path',\n      from: {data: model.getName('marks')},\n      encode: {\n        enter: {\n          fill: {value: 'transparent'},\n          strokeWidth: {value: 0.35},\n          stroke: {value: 'transparent'},\n          isVoronoi: {value: true}\n        }\n      },\n      transform: [\n        {\n          type: 'voronoi',\n          x: {expr: x || (!x && !y) ? 'datum.datum.x || 0' : '0'},\n          y: {expr: y || (!x && !y) ? 'datum.datum.y || 0' : '0'},\n          size: [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')]\n        }\n      ]\n    };\n\n    let index = 0;\n    let exists = false;\n    marks.forEach((mark, i) => {\n      const name = mark.name || '';\n      if (name === model.component.mark[0].name) {\n        index = i;\n      } else if (name.indexOf(VORONOI) >= 0) {\n        exists = true;\n      }\n    });\n\n    if (!exists) {\n      marks.splice(index + 1, 0, cellDef);\n    }\n\n    return marks;\n  }\n};\n\nexport default nearest;\n","import {NewSignal} from 'vega';\nimport {selector as parseSelector} from 'vega-event-selector';\nimport {ScaleChannel, X, Y} from '../../../channel';\nimport {UnitModel} from '../../unit';\nimport {BRUSH as INTERVAL_BRUSH} from '../interval';\nimport {channelSignalName, positionalProjections, SelectionComponent} from '../selection';\nimport scalesCompiler, {domain} from './scales';\nimport {TransformCompiler} from './transforms';\n\nconst ANCHOR = '_translate_anchor';\nconst DELTA = '_translate_delta';\n\nconst translate: TransformCompiler = {\n  has: selCmpt => {\n    return selCmpt.type === 'interval' && selCmpt.translate;\n  },\n\n  signals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const hasScales = scalesCompiler.has(selCmpt);\n    const anchor = name + ANCHOR;\n    const {x, y} = positionalProjections(selCmpt);\n    let events = parseSelector(selCmpt.translate, 'scope');\n\n    if (!hasScales) {\n      events = events.map(e => ((e.between[0].markname = name + INTERVAL_BRUSH), e));\n    }\n\n    signals.push(\n      {\n        name: anchor,\n        value: {},\n        on: [\n          {\n            events: events.map(e => e.between[0]),\n            update:\n              '{x: x(unit), y: y(unit)' +\n              (x !== null\n                ? ', extent_x: ' +\n                  (hasScales ? domain(model, X) : `slice(${channelSignalName(selCmpt, 'x', 'visual')})`)\n                : '') +\n              (y !== null\n                ? ', extent_y: ' +\n                  (hasScales ? domain(model, Y) : `slice(${channelSignalName(selCmpt, 'y', 'visual')})`)\n                : '') +\n              '}'\n          }\n        ]\n      },\n      {\n        name: name + DELTA,\n        value: {},\n        on: [\n          {\n            events: events,\n            update: `{x: ${anchor}.x - x(unit), y: ${anchor}.y - y(unit)}`\n          }\n        ]\n      }\n    );\n\n    if (x !== null) {\n      onDelta(model, selCmpt, X, 'width', signals);\n    }\n\n    if (y !== null) {\n      onDelta(model, selCmpt, Y, 'height', signals);\n    }\n\n    return signals;\n  }\n};\n\nexport default translate;\n\nfunction onDelta(\n  model: UnitModel,\n  selCmpt: SelectionComponent,\n  channel: ScaleChannel,\n  size: 'width' | 'height',\n  signals: NewSignal[]\n) {\n  const name = selCmpt.name;\n  const hasScales = scalesCompiler.has(selCmpt);\n  const signal = signals.filter(s => {\n    return s.name === channelSignalName(selCmpt, channel, hasScales ? 'data' : 'visual');\n  })[0];\n  const anchor = name + ANCHOR;\n  const delta = name + DELTA;\n  const sizeSg = model.getSizeSignalRef(size).signal;\n  const scaleCmpt = model.getScaleComponent(channel);\n  const scaleType = scaleCmpt.get('type');\n  const sign = hasScales && channel === X ? '-' : ''; // Invert delta when panning x-scales.\n  const extent = `${anchor}.extent_${channel}`;\n  const offset = `${sign}${delta}.${channel} / ` + (hasScales ? `${sizeSg}` : `span(${extent})`);\n  const panFn = !hasScales\n    ? 'panLinear'\n    : scaleType === 'log'\n    ? 'panLog'\n    : scaleType === 'pow'\n    ? 'panPow'\n    : 'panLinear';\n  const update =\n    `${panFn}(${extent}, ${offset}` +\n    (hasScales && scaleType === 'pow' ? `, ${scaleCmpt.get('exponent') || 1}` : '') +\n    ')';\n\n  signal.on.push({\n    events: {signal: delta},\n    update: hasScales ? update : `clampRange(${update}, 0, ${sizeSg})`\n  });\n}\n","import {NewSignal} from 'vega';\nimport {selector as parseSelector} from 'vega-event-selector';\nimport {stringValue} from 'vega-util';\nimport {ScaleChannel, X, Y} from '../../../channel';\nimport {UnitModel} from '../../unit';\nimport {BRUSH as INTERVAL_BRUSH} from '../interval';\nimport {channelSignalName, positionalProjections, SelectionComponent} from '../selection';\nimport {default as scalesCompiler, domain} from './scales';\nimport {TransformCompiler} from './transforms';\n\nconst ANCHOR = '_zoom_anchor';\nconst DELTA = '_zoom_delta';\n\nconst zoom: TransformCompiler = {\n  has: selCmpt => {\n    return selCmpt.type === 'interval' && selCmpt.zoom;\n  },\n\n  signals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const hasScales = scalesCompiler.has(selCmpt);\n    const delta = name + DELTA;\n    const {x, y} = positionalProjections(selCmpt);\n    const sx = stringValue(model.scaleName(X));\n    const sy = stringValue(model.scaleName(Y));\n    let events = parseSelector(selCmpt.zoom, 'scope');\n\n    if (!hasScales) {\n      events = events.map(e => ((e.markname = name + INTERVAL_BRUSH), e));\n    }\n\n    signals.push(\n      {\n        name: name + ANCHOR,\n        on: [\n          {\n            events: events,\n            update: !hasScales\n              ? `{x: x(unit), y: y(unit)}`\n              : '{' +\n                [sx ? `x: invert(${sx}, x(unit))` : '', sy ? `y: invert(${sy}, y(unit))` : '']\n                  .filter(expr => !!expr)\n                  .join(', ') +\n                '}'\n          }\n        ]\n      },\n      {\n        name: delta,\n        on: [\n          {\n            events: events,\n            force: true,\n            update: 'pow(1.001, event.deltaY * pow(16, event.deltaMode))'\n          }\n        ]\n      }\n    );\n\n    if (x !== null) {\n      onDelta(model, selCmpt, 'x', 'width', signals);\n    }\n\n    if (y !== null) {\n      onDelta(model, selCmpt, 'y', 'height', signals);\n    }\n\n    return signals;\n  }\n};\n\nexport default zoom;\n\nfunction onDelta(\n  model: UnitModel,\n  selCmpt: SelectionComponent,\n  channel: ScaleChannel,\n  size: 'width' | 'height',\n  signals: NewSignal[]\n) {\n  const name = selCmpt.name;\n  const hasScales = scalesCompiler.has(selCmpt);\n  const signal = signals.filter(s => {\n    return s.name === channelSignalName(selCmpt, channel, hasScales ? 'data' : 'visual');\n  })[0];\n  const sizeSg = model.getSizeSignalRef(size).signal;\n  const scaleCmpt = model.getScaleComponent(channel);\n  const scaleType = scaleCmpt.get('type');\n  const base = hasScales ? domain(model, channel) : signal.name;\n  const delta = name + DELTA;\n  const anchor = `${name}${ANCHOR}.${channel}`;\n  const zoomFn = !hasScales\n    ? 'zoomLinear'\n    : scaleType === 'log'\n    ? 'zoomLog'\n    : scaleType === 'pow'\n    ? 'zoomPow'\n    : 'zoomLinear';\n  const update =\n    `${zoomFn}(${base}, ${anchor}, ${delta}` +\n    (hasScales && scaleType === 'pow' ? `, ${scaleCmpt.get('exponent') || 1}` : '') +\n    ')';\n\n  signal.on.push({\n    events: {signal: delta},\n    update: hasScales ? update : `clampRange(${update}, 0, ${sizeSg})`\n  });\n}\n","import {NewSignal, Signal} from 'vega';\nimport {SelectionDef} from '../../../selection';\nimport {Dict} from '../../../util';\nimport {Model} from '../../model';\nimport {UnitModel} from '../../unit';\nimport {SelectionComponent} from '../selection';\nimport inputs from './inputs';\nimport nearest from './nearest';\nimport project from './project';\nimport scales from './scales';\nimport toggle from './toggle';\nimport translate from './translate';\nimport zoom from './zoom';\n\nexport interface TransformCompiler {\n  has: (selCmpt: SelectionComponent | SelectionDef) => boolean;\n  parse?: (model: UnitModel, def: SelectionDef, selCmpt: SelectionComponent) => void;\n  signals?: (model: UnitModel, selCmpt: SelectionComponent, signals: NewSignal[]) => Signal[]; // the output can be a new or a push signal\n  topLevelSignals?: (model: Model, selCmpt: SelectionComponent, signals: NewSignal[]) => NewSignal[];\n  modifyExpr?: (model: UnitModel, selCmpt: SelectionComponent, expr: string) => string;\n  marks?: (model: UnitModel, selCmpt: SelectionComponent, marks: any[]) => any[];\n}\n\nconst compilers: Dict<TransformCompiler> = {\n  project,\n  toggle,\n  scales,\n  translate,\n  zoom,\n  inputs,\n  nearest\n};\n\nexport function forEachTransform(selCmpt: SelectionComponent, cb: (tx: TransformCompiler) => void) {\n  for (const t in compilers) {\n    if (compilers[t].has(selCmpt)) {\n      cb(compilers[t]);\n    }\n  }\n}\n","import {TUPLE, unitName} from '../selection';\nimport {TransformCompiler} from './transforms';\n\nconst TOGGLE = '_toggle';\n\nconst toggle: TransformCompiler = {\n  has: selCmpt => {\n    return selCmpt.type === 'multi' && selCmpt.toggle;\n  },\n\n  signals: (model, selCmpt, signals) => {\n    return signals.concat({\n      name: selCmpt.name + TOGGLE,\n      value: false,\n      on: [{events: selCmpt.events, update: selCmpt.toggle}]\n    });\n  },\n\n  modifyExpr: (model, selCmpt, expr) => {\n    const tpl = selCmpt.name + TUPLE;\n    const signal = selCmpt.name + TOGGLE;\n\n    return (\n      `${signal} ? null : ${tpl}, ` +\n      (selCmpt.resolve === 'global' ? `${signal} ? null : true, ` : `${signal} ? null : {unit: ${unitName(model)}}, `) +\n      `${signal} ? ${tpl} : null`\n    );\n  }\n};\n\nexport default toggle;\n","import {accessPathWithDatum, varName} from '../../../util';\nimport {assembleInit, TUPLE} from '../selection';\nimport nearest from './nearest';\nimport {TUPLE_FIELDS} from './project';\nimport {TransformCompiler} from './transforms';\n\nconst inputBindings: TransformCompiler = {\n  has: selCmpt => {\n    return selCmpt.type === 'single' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind !== 'scales';\n  },\n\n  topLevelSignals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const proj = selCmpt.project;\n    const bind = selCmpt.bind;\n    const init = selCmpt.init && selCmpt.init[0]; // Can only exist on single selections (one initial value).\n    const datum = nearest.has(selCmpt) ? '(item().isVoronoi ? datum.datum : datum)' : 'datum';\n\n    proj.forEach((p, i) => {\n      const sgname = varName(`${name}_${p.field}`);\n      const hasSignal = signals.filter(s => s.name === sgname);\n      if (!hasSignal.length) {\n        signals.unshift({\n          name: sgname,\n          ...(init ? {init: assembleInit(init[i])} : {value: null}),\n          on: [\n            {\n              events: selCmpt.events,\n              update: `datum && item().mark.marktype !== 'group' ? ${accessPathWithDatum(p.field, datum)} : null`\n            }\n          ],\n          bind: bind[p.field] || bind[p.channel] || bind\n        });\n      }\n    });\n\n    return signals;\n  },\n\n  signals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const proj = selCmpt.project;\n    const signal = signals.filter(s => s.name === name + TUPLE)[0];\n    const fields = name + TUPLE + TUPLE_FIELDS;\n    const values = proj.map(p => varName(`${name}_${p.field}`));\n    const valid = values.map(v => `${v} !== null`).join(' && ');\n\n    if (values.length) {\n      signal.update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;\n    }\n\n    delete signal.value;\n    delete signal.on;\n\n    return signals;\n  }\n};\n\nexport default inputBindings;\n","import {Binding, NewSignal, SignalRef} from 'vega';\nimport {selector as parseSelector} from 'vega-event-selector';\nimport {identity, isArray, isString, stringValue} from 'vega-util';\nimport {Channel, FACET_CHANNELS, ScaleChannel, SingleDefChannel, X, Y} from '../../channel';\nimport {dateTimeExpr, isDateTime} from '../../datetime';\nimport {warn} from '../../log';\nimport {LogicalOperand} from '../../logical';\nimport {\n  BrushConfig,\n  SELECTION_ID,\n  SelectionDef,\n  SelectionInit,\n  SelectionInitArray,\n  SelectionResolution,\n  SelectionType\n} from '../../selection';\nimport {accessPathWithDatum, Dict, duplicate, keys, logicalExpr, varName} from '../../util';\nimport {EventStream, VgData} from '../../vega.schema';\nimport {DataFlowNode} from '../data/dataflow';\nimport {TimeUnitNode} from '../data/timeunit';\nimport {FacetModel} from '../facet';\nimport {LayerModel} from '../layer';\nimport {isFacetModel, isUnitModel, Model} from '../model';\nimport {UnitModel} from '../unit';\nimport intervalCompiler from './interval';\nimport multiCompiler from './multi';\nimport {SelectionComponent} from './selection';\nimport singleCompiler from './single';\nimport {forEachTransform} from './transforms/transforms';\n\nexport const STORE = '_store';\nexport const TUPLE = '_tuple';\nexport const MODIFY = '_modify';\nexport const SELECTION_DOMAIN = '_selection_domain_';\nexport const VL_SELECTION_RESOLVE = 'vlSelectionResolve';\n\nexport interface SelectionComponent<T extends SelectionType = SelectionType> {\n  name: string;\n  type: T;\n\n  // Use conditional typing (https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html)\n  // so we have stricter type of init (as the type of init depends on selection type)\n  init?: (T extends 'interval'\n    ? SelectionInitArray //\n    : T extends 'single'\n    ? SelectionInit\n    : SelectionInit | SelectionInit[])[]; // multi\n  events: EventStream;\n  // predicate?: string;\n  bind?: 'scales' | Binding | Dict<Binding>;\n  resolve: SelectionResolution;\n  empty: 'all' | 'none';\n  mark?: BrushConfig;\n\n  _signalNames: {};\n\n  // Transforms\n  project?: ProjectSelectionComponent[];\n  fields?: {[c in SingleDefChannel]?: string};\n  timeUnit?: TimeUnitNode;\n  scales?: ScaleChannel[];\n  toggle?: any;\n  translate?: any;\n  zoom?: any;\n  nearest?: any;\n}\n\n// Do the selection tuples hold enumerated or ranged values for a field?\n// Ranged values can be left-right inclusive (R) or left-inclusive, right-exclusive (R-LE).\nexport type TupleStoreType = 'E' | 'R' | 'R-RE';\n\nexport interface ProjectSelectionComponent {\n  field?: string;\n  channel?: SingleDefChannel;\n  type: TupleStoreType;\n}\n\nexport interface SelectionCompiler<T extends SelectionType = SelectionType> {\n  signals: (model: UnitModel, selCmpt: SelectionComponent<T>) => NewSignal[];\n  topLevelSignals?: (model: Model, selCmpt: SelectionComponent<T>, signals: NewSignal[]) => NewSignal[];\n  modifyExpr: (model: UnitModel, selCmpt: SelectionComponent<T>) => string;\n  marks?: (model: UnitModel, selCmpt: SelectionComponent<T>, marks: any[]) => any[];\n}\n\nexport function parseUnitSelection(model: UnitModel, selDefs: Dict<SelectionDef>) {\n  const selCmpts: Dict<SelectionComponent<any /* this has to be \"any\" so typing won't fail in test files*/>> = {};\n  const selectionConfig = model.config.selection;\n\n  if (selDefs) {\n    selDefs = duplicate(selDefs); // duplicate to avoid side effects to original spec\n  }\n\n  for (let name in selDefs) {\n    if (!selDefs.hasOwnProperty(name)) {\n      continue;\n    }\n\n    const selDef = selDefs[name];\n    const cfg = selectionConfig[selDef.type];\n\n    // Set default values from config if a property hasn't been specified,\n    // or if it is true. E.g., \"translate\": true should use the default\n    // event handlers for translate. However, true may be a valid value for\n    // a property (e.g., \"nearest\": true).\n    for (const key in cfg) {\n      // A selection should contain either `encodings` or `fields`, only use\n      // default values for these two values if neither of them is specified.\n      if ((key === 'encodings' && selDef.fields) || (key === 'fields' && selDef.encodings)) {\n        continue;\n      }\n\n      if (key === 'mark') {\n        selDef[key] = {...cfg[key], ...selDef[key]};\n      }\n\n      if (selDef[key] === undefined || selDef[key] === true) {\n        selDef[key] = cfg[key] || selDef[key];\n      }\n    }\n\n    name = varName(name);\n    const selCmpt = (selCmpts[name] = {\n      ...selDef,\n      name: name,\n      events: isString(selDef.on) ? parseSelector(selDef.on, 'scope') : selDef.on\n    } as any);\n\n    forEachTransform(selCmpt, txCompiler => {\n      if (txCompiler.parse) {\n        txCompiler.parse(model, selDef, selCmpt);\n      }\n    });\n  }\n\n  return selCmpts;\n}\n\nexport function assembleUnitSelectionSignals(model: UnitModel, signals: any[]) {\n  forEachSelection(model, (selCmpt, selCompiler) => {\n    const name = selCmpt.name;\n    let modifyExpr = selCompiler.modifyExpr(model, selCmpt);\n\n    signals.push(...selCompiler.signals(model, selCmpt));\n\n    forEachTransform(selCmpt, txCompiler => {\n      if (txCompiler.signals) {\n        signals = txCompiler.signals(model, selCmpt, signals);\n      }\n      if (txCompiler.modifyExpr) {\n        modifyExpr = txCompiler.modifyExpr(model, selCmpt, modifyExpr);\n      }\n    });\n\n    signals.push({\n      name: name + MODIFY,\n      update: `modify(${stringValue(selCmpt.name + STORE)}, ${modifyExpr})`\n    });\n  });\n\n  return signals;\n}\n\nexport function assembleFacetSignals(model: FacetModel, signals: any[]) {\n  if (model.component.selection && keys(model.component.selection).length) {\n    const name = stringValue(model.getName('cell'));\n    signals.unshift({\n      name: 'facet',\n      value: {},\n      on: [\n        {\n          events: parseSelector('mousemove', 'scope'),\n          update: `isTuple(facet) ? facet : group(${name}).datum`\n        }\n      ]\n    });\n  }\n\n  return signals;\n}\n\nexport function assembleTopLevelSignals(model: UnitModel, signals: any[]) {\n  let hasSelections = false;\n  forEachSelection(model, (selCmpt, selCompiler) => {\n    const name = selCmpt.name;\n    const store = stringValue(name + STORE);\n    const hasSg = signals.filter(s => s.name === name);\n    if (!hasSg.length) {\n      signals.push({\n        name: selCmpt.name,\n        update:\n          `${VL_SELECTION_RESOLVE}(${store}` +\n          (selCmpt.resolve === 'global' ? ')' : `, ${stringValue(selCmpt.resolve)})`)\n      });\n    }\n    hasSelections = true;\n\n    if (selCompiler.topLevelSignals) {\n      signals = selCompiler.topLevelSignals(model, selCmpt, signals);\n    }\n\n    forEachTransform(selCmpt, txCompiler => {\n      if (txCompiler.topLevelSignals) {\n        signals = txCompiler.topLevelSignals(model, selCmpt, signals);\n      }\n    });\n  });\n\n  if (hasSelections) {\n    const hasUnit = signals.filter(s => s.name === 'unit');\n    if (!hasUnit.length) {\n      signals.unshift({\n        name: 'unit',\n        value: {},\n        on: [{events: 'mousemove', update: 'isTuple(group()) ? group() : unit'}]\n      });\n    }\n  }\n\n  return signals;\n}\n\nexport function assembleUnitSelectionData(model: UnitModel, data: VgData[]): VgData[] {\n  forEachSelection(model, selCmpt => {\n    const contains = data.filter(d => d.name === selCmpt.name + STORE);\n    if (!contains.length) {\n      data.push({name: selCmpt.name + STORE});\n    }\n  });\n\n  return data;\n}\n\nexport function assembleUnitSelectionMarks(model: UnitModel, marks: any[]): any[] {\n  forEachSelection(model, (selCmpt, selCompiler) => {\n    marks = selCompiler.marks ? selCompiler.marks(model, selCmpt, marks) : marks;\n    forEachTransform(selCmpt, txCompiler => {\n      if (txCompiler.marks) {\n        marks = txCompiler.marks(model, selCmpt, marks);\n      }\n    });\n  });\n\n  return marks;\n}\n\nexport function assembleLayerSelectionMarks(model: LayerModel, marks: any[]): any[] {\n  for (const child of model.children) {\n    if (isUnitModel(child)) {\n      marks = assembleUnitSelectionMarks(child, marks);\n    }\n  }\n\n  return marks;\n}\n\nexport function selectionPredicate(model: Model, selections: LogicalOperand<string>, dfnode?: DataFlowNode): string {\n  const stores: string[] = [];\n  function expr(name: string): string {\n    const vname = varName(name);\n    const selCmpt = model.getSelectionComponent(vname, name);\n    const store = stringValue(vname + STORE);\n\n    if (selCmpt.timeUnit) {\n      const child = dfnode || model.component.data.raw;\n      const tunode = selCmpt.timeUnit.clone();\n      if (child.parent) {\n        tunode.insertAsParentOf(child);\n      } else {\n        child.parent = tunode;\n      }\n    }\n\n    if (selCmpt.empty !== 'none') {\n      stores.push(store);\n    }\n\n    return (\n      `vlSelectionTest(${store}, datum` + (selCmpt.resolve === 'global' ? ')' : `, ${stringValue(selCmpt.resolve)})`)\n    );\n  }\n\n  const predicateStr = logicalExpr(selections, expr);\n  return (\n    (stores.length ? '!(' + stores.map(s => `length(data(${s}))`).join(' || ') + ') || ' : '') + `(${predicateStr})`\n  );\n}\n\n// Selections are parsed _after_ scales. If a scale domain is set to\n// use a selection, the SELECTION_DOMAIN constant is used as the\n// domainRaw.signal during scale.parse and then replaced with the necessary\n// selection expression function during scale.assemble. To not pollute the\n// type signatures to account for this setup, the selection domain definition\n// is coerced to a string and appended to SELECTION_DOMAIN.\nexport function isRawSelectionDomain(domainRaw: SignalRef) {\n  return domainRaw.signal.indexOf(SELECTION_DOMAIN) >= 0;\n}\nexport function selectionScaleDomain(model: Model, domainRaw: SignalRef): SignalRef {\n  const selDomain = JSON.parse(domainRaw.signal.replace(SELECTION_DOMAIN, ''));\n  const name = varName(selDomain.selection);\n  const encoding = selDomain.encoding;\n  let field = selDomain.field;\n\n  let selCmpt = model.component.selection && model.component.selection[name];\n  if (selCmpt) {\n    warn('Use \"bind\": \"scales\" to setup a binding for scales and selections within the same view.');\n  } else {\n    selCmpt = model.getSelectionComponent(name, selDomain.selection);\n    if (!encoding && !field) {\n      field = selCmpt.project[0].field;\n      if (selCmpt.project.length > 1) {\n        warn(\n          'A \"field\" or \"encoding\" must be specified when using a selection as a scale domain. ' +\n            `Using \"field\": ${stringValue(field)}.`\n        );\n      }\n    } else if (encoding && !field) {\n      const encodings = selCmpt.project.filter(p => p.channel === encoding);\n      if (!encodings.length || encodings.length > 1) {\n        field = selCmpt.project[0].field;\n        warn(\n          (!encodings.length ? 'No ' : 'Multiple ') +\n            `matching ${stringValue(encoding)} encoding found for selection ${stringValue(selDomain.selection)}. ` +\n            `Using \"field\": ${stringValue(field)}.`\n        );\n      } else {\n        field = encodings[0].field;\n      }\n    }\n\n    return {signal: accessPathWithDatum(field, name)};\n  }\n\n  return {signal: 'null'};\n}\n\n// Utility functions\n\nfunction forEachSelection(model: Model, cb: (selCmpt: SelectionComponent, selCompiler: SelectionCompiler) => void) {\n  const selections = model.component.selection;\n  for (const name in selections) {\n    if (selections.hasOwnProperty(name)) {\n      const sel = selections[name];\n      cb(sel, compiler(sel.type));\n    }\n  }\n}\n\nfunction compiler(type: SelectionType): SelectionCompiler {\n  switch (type) {\n    case 'single':\n      return singleCompiler;\n    case 'multi':\n      return multiCompiler;\n    case 'interval':\n      return intervalCompiler;\n  }\n  return null;\n}\n\nfunction getFacetModel(model: Model): FacetModel {\n  let parent = model.parent;\n  while (parent) {\n    if (isFacetModel(parent)) {\n      break;\n    }\n    parent = parent.parent;\n  }\n\n  return parent as FacetModel;\n}\n\nexport function unitName(model: Model) {\n  let name = stringValue(model.name);\n  const facetModel = getFacetModel(model);\n  if (facetModel) {\n    const {facet} = facetModel;\n    for (const channel of FACET_CHANNELS) {\n      if (facet[channel]) {\n        name += ` + '__facet_${channel}_' + (${accessPathWithDatum(facetModel.vgField(channel), 'facet')})`;\n      }\n    }\n  }\n  return name;\n}\n\nexport function requiresSelectionId(model: Model) {\n  let identifier = false;\n  forEachSelection(model, selCmpt => {\n    identifier = identifier || selCmpt.project.some(proj => proj.field === SELECTION_ID);\n  });\n  return identifier;\n}\n\nexport function channelSignalName(selCmpt: SelectionComponent, channel: Channel, range: 'visual' | 'data') {\n  const sgNames = selCmpt._signalNames || (selCmpt._signalNames = {});\n  if (sgNames[channel] && sgNames[channel][range]) {\n    return sgNames[channel][range];\n  }\n\n  sgNames[channel] = sgNames[channel] || {};\n  const basename = varName(selCmpt.name + '_' + (range === 'visual' ? channel : selCmpt.fields[channel]));\n  let name = basename;\n  let counter = 1;\n  while (sgNames[name]) {\n    name = `${basename}_${counter++}`;\n  }\n\n  return (sgNames[name] = sgNames[channel][range] = name);\n}\n\nexport function positionalProjections(selCmpt: SelectionComponent) {\n  let x: ProjectSelectionComponent = null;\n  let xi: number = null;\n  let y: ProjectSelectionComponent = null;\n  let yi: number = null;\n\n  selCmpt.project.forEach((p, i) => {\n    if (p.channel === X) {\n      x = p;\n      xi = i;\n    } else if (p.channel === Y) {\n      y = p;\n      yi = i;\n    }\n  });\n  return {x, xi, y, yi};\n}\n\nexport function assembleInit(\n  init: (SelectionInit | SelectionInit[] | SelectionInitArray)[] | SelectionInit,\n  wrap: (str: string) => string = identity\n): string {\n  if (isArray(init)) {\n    const str = init.map(v => assembleInit(v, wrap)).join(', ');\n    return `[${str}]`;\n  } else if (isDateTime(init)) {\n    return wrap(dateTimeExpr(init));\n  }\n  return wrap(JSON.stringify(init));\n}\n","import {isString} from 'vega-util';\nimport {LogicalOperand} from '../logical';\nimport {fieldFilterExpression, isSelectionPredicate, Predicate} from '../predicate';\nimport {logicalExpr} from '../util';\nimport {DataFlowNode} from './data/dataflow';\nimport {Model} from './model';\nimport {selectionPredicate} from './selection/selection';\n\n/**\n * Converts a predicate into an expression.\n */\n// model is only used for selection filters.\nexport function expression(model: Model, filterOp: LogicalOperand<Predicate>, node?: DataFlowNode): string {\n  return logicalExpr(filterOp, (predicate: Predicate) => {\n    if (isString(predicate)) {\n      return predicate;\n    } else if (isSelectionPredicate(predicate)) {\n      return selectionPredicate(model, predicate.selection, node);\n    } else {\n      // Filter Object\n      return fieldFilterExpression(predicate);\n    }\n  });\n}\n","/**\n * Utility files for producing Vega ValueRef for marks\n */\nimport {SignalRef} from 'vega';\nimport {isArray, isFunction, isString, stringValue} from 'vega-util';\nimport {isBinned, isBinning} from '../../bin';\nimport {Channel, getMainRangeChannel, X, X2, Y, Y2} from '../../channel';\nimport {Config} from '../../config';\nimport {Encoding, forEach} from '../../encoding';\nimport {\n  binRequiresRange,\n  ChannelDef,\n  ChannelDefWithCondition,\n  FieldDef,\n  FieldDefBase,\n  FieldRefOption,\n  format,\n  hasConditionalFieldDef,\n  isFieldDef,\n  isTypedFieldDef,\n  isValueDef,\n  SecondaryFieldDef,\n  title,\n  TypedFieldDef,\n  vgField\n} from '../../fielddef';\nimport * as log from '../../log';\nimport {Mark, MarkDef} from '../../mark';\nimport {hasDiscreteDomain, ScaleType} from '../../scale';\nimport {StackProperties} from '../../stack';\nimport {QUANTITATIVE} from '../../type';\nimport {contains, some} from '../../util';\nimport {VgValueRef} from '../../vega.schema';\nimport {formatSignalRef} from '../common';\nimport {ScaleComponent} from '../scale/component';\n\n// TODO: we need to find a way to refactor these so that scaleName is a part of scale\n// but that's complicated.  For now, this is a huge step moving forward.\n\n/**\n * @return Vega ValueRef for normal x- or y-position without projection\n */\nexport function position(\n  channel: 'x' | 'y',\n  channelDef: ChannelDef,\n  channel2Def: ChannelDef,\n  scaleName: string,\n  scale: ScaleComponent,\n  stack: StackProperties,\n  defaultRef: VgValueRef | (() => VgValueRef)\n): VgValueRef {\n  if (isFieldDef(channelDef) && stack && channel === stack.fieldChannel) {\n    // x or y use stack_end so that stacked line's point mark use stack_end too.\n    return fieldRef(channelDef, scaleName, {suffix: 'end'});\n  }\n  return midPoint(channel, channelDef, channel2Def, scaleName, scale, stack, defaultRef);\n}\n\n/**\n * @return Vega ValueRef for normal x2- or y2-position without projection\n */\nexport function position2(\n  channel: 'x2' | 'y2',\n  aFieldDef: ChannelDef,\n  a2fieldDef: ChannelDef,\n  scaleName: string,\n  scale: ScaleComponent,\n  stack: StackProperties,\n  defaultRef: VgValueRef | (() => VgValueRef)\n): VgValueRef {\n  if (\n    isFieldDef(aFieldDef) &&\n    stack &&\n    // If fieldChannel is X and channel is X2 (or Y and Y2)\n    channel.charAt(0) === stack.fieldChannel.charAt(0)\n  ) {\n    return fieldRef(aFieldDef, scaleName, {suffix: 'start'});\n  }\n  return midPoint(channel, a2fieldDef, undefined, scaleName, scale, stack, defaultRef);\n}\n\nexport function getOffset(channel: 'x' | 'y' | 'x2' | 'y2', markDef: MarkDef) {\n  const offsetChannel = channel + 'Offset';\n  // TODO: in the future read from encoding channel too\n\n  const markDefOffsetValue = markDef[offsetChannel];\n  if (markDefOffsetValue) {\n    return markDefOffsetValue;\n  }\n\n  return undefined;\n}\n\n/**\n * Value Ref for binned fields\n */\nexport function bin(fieldDef: TypedFieldDef<string>, scaleName: string, side: 'start' | 'end', offset?: number) {\n  const binSuffix = side === 'start' ? undefined : 'end';\n  return fieldRef(fieldDef, scaleName, {binSuffix}, offset ? {offset} : {});\n}\n\nexport function fieldRef(\n  fieldDef: FieldDefBase<string>,\n  scaleName: string,\n  opt: FieldRefOption,\n  mixins?: {offset?: number | VgValueRef; band?: number | boolean}\n): VgValueRef {\n  const ref: VgValueRef = {\n    ...(scaleName ? {scale: scaleName} : {}),\n    field: vgField(fieldDef, opt)\n  };\n\n  if (mixins) {\n    return {\n      ...ref,\n      ...mixins\n    };\n  }\n  return ref;\n}\n\nexport function bandRef(scaleName: string, band: number | boolean = true): VgValueRef {\n  return {\n    scale: scaleName,\n    band: band\n  };\n}\n\n/**\n * Signal that returns the middle of a bin from start and end field. Should only be used with x and y.\n */\nfunction binMidSignal(scaleName: string, fieldDef: TypedFieldDef<string>, fieldDef2?: SecondaryFieldDef<string>) {\n  const start = vgField(fieldDef, {expr: 'datum'});\n  const end =\n    fieldDef2 !== undefined\n      ? vgField(fieldDef2, {expr: 'datum'})\n      : vgField(fieldDef, {binSuffix: 'end', expr: 'datum'});\n\n  return {\n    signal: `scale(\"${scaleName}\", (${start} + ${end}) / 2)`\n  };\n}\n\n/**\n * @returns {VgValueRef} Value Ref for xc / yc or mid point for other channels.\n */\nexport function midPoint(\n  channel: Channel,\n  channelDef: ChannelDef,\n  channel2Def: ChannelDef<SecondaryFieldDef<string>>,\n  scaleName: string,\n  scale: ScaleComponent,\n  stack: StackProperties,\n  defaultRef: VgValueRef | (() => VgValueRef)\n): VgValueRef {\n  // TODO: datum support\n\n  if (channelDef) {\n    /* istanbul ignore else */\n\n    if (isFieldDef(channelDef)) {\n      if (isTypedFieldDef(channelDef)) {\n        if (isBinning(channelDef.bin)) {\n          // Use middle only for x an y to place marks in the center between start and end of the bin range.\n          // We do not use the mid point for other channels (e.g. size) so that properties of legends and marks match.\n          if (contains([X, Y], channel) && channelDef.type === QUANTITATIVE) {\n            if (stack && stack.impute) {\n              // For stack, we computed bin_mid so we can impute.\n              return fieldRef(channelDef, scaleName, {binSuffix: 'mid'});\n            }\n            // For non-stack, we can just calculate bin mid on the fly using signal.\n            return binMidSignal(scaleName, channelDef);\n          }\n          return fieldRef(channelDef, scaleName, binRequiresRange(channelDef, channel) ? {binSuffix: 'range'} : {});\n        } else if (isBinned(channelDef.bin)) {\n          if (isFieldDef(channel2Def)) {\n            return binMidSignal(scaleName, channelDef, channel2Def);\n          } else {\n            const channel2 = channel === X ? X2 : Y2;\n            log.warn(log.message.channelRequiredForBinned(channel2));\n          }\n        }\n      }\n\n      if (scale) {\n        const scaleType = scale.get('type');\n        if (hasDiscreteDomain(scaleType)) {\n          if (scaleType === 'band') {\n            // For band, to get mid point, need to offset by half of the band\n            return fieldRef(channelDef, scaleName, {binSuffix: 'range'}, {band: 0.5});\n          }\n          return fieldRef(channelDef, scaleName, {binSuffix: 'range'});\n        }\n      }\n      return fieldRef(channelDef, scaleName, {}); // no need for bin suffix\n    } else if (isValueDef(channelDef)) {\n      const value = channelDef.value;\n\n      if (contains(['x', 'x2'], channel) && value === 'width') {\n        return {field: {group: 'width'}};\n      } else if (contains(['y', 'y2'], channel) && value === 'height') {\n        return {field: {group: 'height'}};\n      }\n\n      return {value};\n    }\n\n    // If channelDef is neither field def or value def, it's a condition-only def.\n    // In such case, we will use default ref.\n  }\n\n  return isFunction(defaultRef) ? defaultRef() : defaultRef;\n}\n\nexport function tooltipForEncoding(encoding: Encoding<string>, config: Config) {\n  const keyValues: string[] = [];\n  const usedKey = {};\n\n  function add(fieldDef: TypedFieldDef<string> | SecondaryFieldDef<string>, channel: Channel) {\n    const mainChannel = getMainRangeChannel(channel);\n    if (channel !== mainChannel) {\n      fieldDef = {\n        ...fieldDef,\n        type: encoding[mainChannel].type\n      };\n    }\n\n    const key = title(fieldDef, config, {allowDisabling: false});\n    const value = text(fieldDef, config).signal;\n\n    if (!usedKey[key]) {\n      keyValues.push(`${stringValue(key)}: ${value}`);\n    }\n    usedKey[key] = true;\n  }\n\n  forEach(encoding, (channelDef, channel) => {\n    if (isFieldDef(channelDef)) {\n      add(channelDef, channel);\n    } else if (hasConditionalFieldDef(channelDef)) {\n      add(channelDef.condition, channel);\n    }\n  });\n  return keyValues.length ? {signal: `{${keyValues.join(', ')}}`} : undefined;\n}\n\nexport function text(\n  channelDef: ChannelDefWithCondition<FieldDef<string>, string | number | boolean>,\n  config: Config\n): VgValueRef {\n  // text\n  if (channelDef) {\n    if (isValueDef(channelDef)) {\n      return {value: channelDef.value};\n    }\n    if (isTypedFieldDef(channelDef)) {\n      return formatSignalRef(channelDef, format(channelDef), 'datum', config);\n    }\n  }\n  return undefined;\n}\n\nexport function mid(sizeRef: SignalRef): VgValueRef {\n  return {...sizeRef, mult: 0.5};\n}\n\n/**\n * Whether the scale definitely includes zero in the domain\n */\nfunction domainDefinitelyIncludeZero(scale: ScaleComponent) {\n  if (scale.get('zero') !== false) {\n    return true;\n  }\n  const domains = scale.domains;\n  if (isArray(domains)) {\n    return some(domains, d => isArray(d) && d.length === 2 && d[0] <= 0 && d[1] >= 0);\n  }\n  return false;\n}\n\nexport function getDefaultRef(\n  defaultRef: VgValueRef | 'zeroOrMin' | 'zeroOrMax',\n  channel: 'x' | 'y',\n  scaleName: string,\n  scale: ScaleComponent,\n  mark: Mark\n) {\n  return () => {\n    if (isString(defaultRef)) {\n      if (scaleName) {\n        const scaleType = scale.get('type');\n        if (contains([ScaleType.LOG, ScaleType.TIME, ScaleType.UTC], scaleType)) {\n          // Log scales cannot have zero.\n          // Zero in time scale is arbitrary, and does not affect ratio.\n          // (Time is an interval level of measurement, not ratio).\n          // See https://en.wikipedia.org/wiki/Level_of_measurement for more info.\n          if (mark === 'bar' || mark === 'area') {\n            log.warn(log.message.nonZeroScaleUsedWithLengthMark(mark, channel, {scaleType}));\n          }\n        } else {\n          if (domainDefinitelyIncludeZero(scale)) {\n            return {\n              scale: scaleName,\n              value: 0\n            };\n          }\n          if (mark === 'bar' || mark === 'area') {\n            log.warn(\n              log.message.nonZeroScaleUsedWithLengthMark(mark, channel, {zeroFalse: scale.explicit.zero === false})\n            );\n          }\n        }\n      }\n\n      if (defaultRef === 'zeroOrMin') {\n        return channel === 'x' ? {value: 0} : {field: {group: 'height'}};\n      } else {\n        // zeroOrMax\n        return channel === 'x' ? {field: {group: 'width'}} : {value: 0};\n      }\n    }\n    return defaultRef;\n  };\n}\n","export default function(_) {\n  return typeof _ === 'function';\n}\n","import {array, isArray, isObject, isString} from 'vega-util';\nimport {isBinned, isBinning} from '../../bin';\nimport {Channel, NonPositionScaleChannel, SCALE_CHANNELS, ScaleChannel, X, X2, Y2} from '../../channel';\nimport {\n  ChannelDef,\n  getTypedFieldDef,\n  isConditionalSelection,\n  isFieldDef,\n  isValueDef,\n  SecondaryFieldDef,\n  TypedFieldDef,\n  ValueDef\n} from '../../fielddef';\nimport * as log from '../../log';\nimport {isPathMark, MarkDef} from '../../mark';\nimport {hasContinuousDomain} from '../../scale';\nimport {contains, Dict, getFirstDefined, keys} from '../../util';\nimport {VG_MARK_CONFIGS, VgEncodeEntry, VgValueRef} from '../../vega.schema';\nimport {getMarkConfig} from '../common';\nimport {expression} from '../predicate';\nimport {selectionPredicate} from '../selection/selection';\nimport {UnitModel} from '../unit';\nimport * as ref from './valueref';\n\nfunction isVisible(c: string) {\n  return c !== 'transparent' && c !== null && c !== undefined;\n}\n\nexport function color(model: UnitModel): VgEncodeEntry {\n  const {markDef, encoding, config} = model;\n  const {filled, type: markType} = markDef;\n\n  const configValue = {\n    fill: getMarkConfig('fill', markDef, config),\n    stroke: getMarkConfig('stroke', markDef, config),\n    color: getMarkConfig('color', markDef, config)\n  };\n\n  const transparentIfNeeded = contains(['bar', 'point', 'circle', 'square', 'geoshape'], markType)\n    ? 'transparent'\n    : undefined;\n\n  const defaultFill = getFirstDefined(\n    markDef.fill,\n    configValue.fill,\n    // If there is no fill, always fill symbols, bar, geoshape\n    // with transparent fills https://github.com/vega/vega-lite/issues/1316\n    transparentIfNeeded\n  );\n\n  const defaultStroke = getFirstDefined(markDef.stroke, configValue.stroke);\n\n  const colorVgChannel = filled ? 'fill' : 'stroke';\n\n  const fillStrokeMarkDefAndConfig: VgEncodeEntry = {\n    ...(defaultFill ? {fill: {value: defaultFill}} : {}),\n    ...(defaultStroke ? {stroke: {value: defaultStroke}} : {})\n  };\n\n  if (encoding.fill || encoding.stroke) {\n    // ignore encoding.color, markDef.color, config.color\n    if (markDef.color) {\n      // warn for markDef.color  (no need to warn encoding.color as it will be dropped in normalized already)\n      log.warn(log.message.droppingColor('property', {fill: 'fill' in encoding, stroke: 'stroke' in encoding}));\n    }\n\n    return {\n      ...nonPosition('fill', model, {defaultValue: getFirstDefined(defaultFill, transparentIfNeeded)}),\n      ...nonPosition('stroke', model, {defaultValue: defaultStroke})\n    };\n  } else if (encoding.color) {\n    return {\n      ...fillStrokeMarkDefAndConfig,\n      // override them with encoded color field\n      ...nonPosition('color', model, {\n        vgChannel: colorVgChannel,\n        // apply default fill/stroke first, then color config, then transparent if needed.\n        defaultValue: getFirstDefined(\n          markDef[colorVgChannel],\n          markDef.color,\n          configValue[colorVgChannel],\n          configValue.color,\n          filled ? transparentIfNeeded : undefined\n        )\n      })\n    };\n  } else if (isVisible(markDef.fill) || isVisible(markDef.stroke)) {\n    // Ignore markDef.color\n    if (markDef.color) {\n      log.warn(log.message.droppingColor('property', {fill: 'fill' in markDef, stroke: 'stroke' in markDef}));\n    }\n    return fillStrokeMarkDefAndConfig;\n  } else if (markDef.color) {\n    return {\n      ...fillStrokeMarkDefAndConfig, // in this case, fillStrokeMarkDefAndConfig only include config\n\n      // override config with markDef.color\n      [colorVgChannel]: {value: markDef.color}\n    };\n  } else if (isVisible(configValue.fill) || isVisible(configValue.stroke)) {\n    // ignore config.color\n    return fillStrokeMarkDefAndConfig;\n  } else if (configValue.color) {\n    return {\n      ...(transparentIfNeeded ? {fill: {value: 'transparent'}} : {}),\n      [colorVgChannel]: {value: configValue.color}\n    };\n  }\n  return {};\n}\n\nexport type Ignore = Record<'size' | 'orient', 'ignore' | 'include'>;\n\nexport function baseEncodeEntry(model: UnitModel, ignore: Ignore) {\n  const {fill, stroke} = color(model);\n  return {\n    ...markDefProperties(model.markDef, ignore),\n    ...wrapInvalid(model, 'fill', fill),\n    ...wrapInvalid(model, 'stroke', stroke),\n    ...nonPosition('opacity', model),\n    ...nonPosition('fillOpacity', model),\n    ...nonPosition('strokeOpacity', model),\n    ...nonPosition('strokeWidth', model),\n    ...tooltip(model),\n    ...text(model, 'href')\n  };\n}\n\nfunction wrapInvalid(model: UnitModel, channel: Channel, valueRef: VgValueRef | VgValueRef[]): VgEncodeEntry {\n  const {config, mark} = model;\n\n  if (config.invalidValues && valueRef && !isPathMark(mark)) {\n    // For non-path marks, we have to exclude invalid values (null and NaN) for scales with continuous domains.\n    // For path marks, we will use \"defined\" property and skip these values instead.\n    const test = validPredicate(model, {invalid: true, channels: SCALE_CHANNELS});\n    if (test) {\n      return {\n        [channel]: [\n          // prepend the invalid case\n          // TODO: support custom value\n          {test, value: null},\n          ...array(valueRef)\n        ]\n      };\n    }\n  }\n  return valueRef ? {[channel]: valueRef} : {};\n}\n\nfunction markDefProperties(mark: MarkDef, ignore: Ignore) {\n  return VG_MARK_CONFIGS.reduce((m, prop) => {\n    if (mark[prop] !== undefined && ignore[prop] !== 'ignore') {\n      m[prop] = {value: mark[prop]};\n    }\n    return m;\n  }, {});\n}\n\nexport function valueIfDefined(prop: string, value: string | number | boolean): VgEncodeEntry {\n  if (value !== undefined) {\n    return {[prop]: {value: value}};\n  }\n  return undefined;\n}\n\nfunction validPredicate(model: UnitModel, {invalid = false, channels}: {invalid?: boolean; channels: ScaleChannel[]}) {\n  const filterIndex = channels.reduce((aggregator: Dict<true>, channel) => {\n    const scaleComponent = model.getScaleComponent(channel);\n    if (scaleComponent) {\n      const scaleType = scaleComponent.get('type');\n      const field = model.vgField(channel, {expr: 'datum'});\n\n      // While discrete domain scales can handle invalid values, continuous scales can't.\n      if (field && hasContinuousDomain(scaleType)) {\n        aggregator[field] = true;\n      }\n    }\n    return aggregator;\n  }, {});\n\n  const fields = keys(filterIndex);\n  if (fields.length > 0) {\n    const op = invalid ? '||' : '&&';\n    return fields\n      .map(field => {\n        const eq = invalid ? '===' : '!==';\n        return `${field} ${eq} null ${op} ${invalid ? '' : '!'}isNaN(${field})`;\n      })\n      .join(` ${op} `);\n  }\n  return undefined;\n}\nexport function defined(model: UnitModel): VgEncodeEntry {\n  if (model.config.invalidValues === 'filter') {\n    const signal = validPredicate(model, {channels: ['x', 'y']});\n\n    if (signal) {\n      return {defined: {signal}};\n    }\n  }\n  return {};\n}\n\n/**\n * Return mixins for non-positional channels with scales.  (Text doesn't have scale.)\n */\nexport function nonPosition(\n  channel: NonPositionScaleChannel,\n  model: UnitModel,\n  opt: {defaultValue?: number | string | boolean; vgChannel?: string; defaultRef?: VgValueRef} = {}\n): VgEncodeEntry {\n  const {markDef, encoding} = model;\n  const {vgChannel = channel} = opt;\n\n  const {defaultValue = markDef[vgChannel]} = opt;\n  const defaultRef = opt.defaultRef || (defaultValue !== undefined ? {value: defaultValue} : undefined);\n\n  const channelDef = encoding[channel];\n\n  return wrapCondition(model, channelDef, vgChannel, cDef => {\n    return ref.midPoint(\n      channel,\n      cDef,\n      undefined,\n      model.scaleName(channel),\n      model.getScaleComponent(channel),\n      null, // No need to provide stack for non-position as it does not affect mid point\n      defaultRef\n    );\n  });\n}\n\n/**\n * Return a mixin that include a Vega production rule for a Vega-Lite conditional channel definition.\n * or a simple mixin if channel def has no condition.\n */\nexport function wrapCondition(\n  model: UnitModel,\n  channelDef: ChannelDef,\n  vgChannel: string,\n  refFn: (cDef: ChannelDef) => VgValueRef\n): VgEncodeEntry {\n  const condition = channelDef && channelDef.condition;\n  const valueRef = refFn(channelDef);\n  if (condition) {\n    const conditions = isArray(condition) ? condition : [condition];\n    const vgConditions = conditions.map(c => {\n      const conditionValueRef = refFn(c);\n      const test = isConditionalSelection(c) ? selectionPredicate(model, c.selection) : expression(model, c.test);\n      return {\n        test,\n        ...conditionValueRef\n      };\n    });\n    return {\n      [vgChannel]: [...vgConditions, ...(valueRef !== undefined ? [valueRef] : [])]\n    };\n  } else {\n    return valueRef !== undefined ? {[vgChannel]: valueRef} : {};\n  }\n}\n\nexport function tooltip(model: UnitModel) {\n  const {encoding, markDef, config} = model;\n  const channelDef = encoding.tooltip;\n  if (isArray(channelDef)) {\n    return {tooltip: ref.tooltipForEncoding({tooltip: channelDef}, config)};\n  } else {\n    return wrapCondition(model, channelDef, 'tooltip', cDef => {\n      // use valueRef based on channelDef first\n      const tooltipRefFromChannelDef = ref.text(cDef, model.config);\n      if (tooltipRefFromChannelDef) {\n        return tooltipRefFromChannelDef;\n      }\n\n      if (cDef === null) {\n        // Allow using encoding.tooltip = null to disable tooltip\n        return undefined;\n      }\n\n      // If tooltipDef does not exist, then use value from markDef or config\n      const markTooltip = getFirstDefined(markDef.tooltip, getMarkConfig('tooltip', markDef, config));\n      if (isString(markTooltip)) {\n        return {value: markTooltip};\n      } else if (isObject(markTooltip)) {\n        // `tooltip` is `{fields: 'encodings' | 'fields'}`\n        if (markTooltip.content === 'encoding') {\n          return ref.tooltipForEncoding(encoding, config);\n        } else {\n          return {signal: 'datum'};\n        }\n      }\n\n      return undefined;\n    });\n  }\n}\n\nexport function text(model: UnitModel, channel: 'text' | 'href' = 'text') {\n  const channelDef = model.encoding[channel];\n  return wrapCondition(model, channelDef, channel, cDef => ref.text(cDef, model.config));\n}\n\nexport function bandPosition(fieldDef: TypedFieldDef<string>, channel: 'x' | 'y', model: UnitModel) {\n  const scaleName = model.scaleName(channel);\n  const sizeChannel = channel === 'x' ? 'width' : 'height';\n\n  if (model.encoding.size || model.markDef.size !== undefined) {\n    const orient = model.markDef.orient;\n    if (orient) {\n      const centeredBandPositionMixins = {\n        // Use xc/yc and place the mark at the middle of the band\n        // This way we never have to deal with size's condition for x/y position.\n        [channel + 'c']: ref.fieldRef(fieldDef, scaleName, {}, {band: 0.5})\n      };\n\n      if (getTypedFieldDef(model.encoding.size)) {\n        return {\n          ...centeredBandPositionMixins,\n          ...nonPosition('size', model, {vgChannel: sizeChannel})\n        };\n      } else if (isValueDef(model.encoding.size)) {\n        return {\n          ...centeredBandPositionMixins,\n          ...nonPosition('size', model, {vgChannel: sizeChannel})\n        };\n      } else if (model.markDef.size !== undefined) {\n        return {\n          ...centeredBandPositionMixins,\n          [sizeChannel]: {value: model.markDef.size}\n        };\n      }\n    } else {\n      log.warn(log.message.cannotApplySizeToNonOrientedMark(model.markDef.type));\n    }\n  }\n  return {\n    [channel]: ref.fieldRef(fieldDef, scaleName, {binSuffix: 'range'}),\n    [sizeChannel]: ref.bandRef(scaleName)\n  };\n}\n\nexport function centeredBandPosition(\n  channel: 'x' | 'y',\n  model: UnitModel,\n  defaultPosRef: VgValueRef,\n  defaultSizeRef: VgValueRef\n) {\n  const centerChannel: 'xc' | 'yc' = channel === 'x' ? 'xc' : 'yc';\n  const sizeChannel = channel === 'x' ? 'width' : 'height';\n  return {\n    ...pointPosition(channel, model, defaultPosRef, centerChannel),\n    ...nonPosition('size', model, {defaultRef: defaultSizeRef, vgChannel: sizeChannel})\n  };\n}\n\nexport function binPosition(\n  fieldDef: TypedFieldDef<string>,\n  fieldDef2: ValueDef | SecondaryFieldDef<string>,\n  channel: 'x' | 'y',\n  scaleName: string,\n  spacing: number,\n  reverse: boolean\n) {\n  const binSpacing = {\n    x: reverse ? spacing : 0,\n    x2: reverse ? 0 : spacing,\n    y: reverse ? 0 : spacing,\n    y2: reverse ? spacing : 0\n  };\n  const channel2 = channel === X ? X2 : Y2;\n  if (isBinning(fieldDef.bin)) {\n    return {\n      [channel2]: ref.bin(fieldDef, scaleName, 'start', binSpacing[`${channel}2`]),\n      [channel]: ref.bin(fieldDef, scaleName, 'end', binSpacing[channel])\n    };\n  } else if (isBinned(fieldDef.bin) && isFieldDef(fieldDef2)) {\n    return {\n      [channel2]: ref.fieldRef(fieldDef, scaleName, {}, {offset: binSpacing[`${channel}2`]}),\n      [channel]: ref.fieldRef(fieldDef2, scaleName, {}, {offset: binSpacing[channel]})\n    };\n  } else {\n    log.warn(log.message.channelRequiredForBinned(channel2));\n    return undefined;\n  }\n}\n\n/**\n * Return mixins for point (non-band) position channels.\n */\nexport function pointPosition(\n  channel: 'x' | 'y',\n  model: UnitModel,\n  defaultRef: VgValueRef | 'zeroOrMin' | 'zeroOrMax',\n  vgChannel?: 'x' | 'y' | 'xc' | 'yc'\n) {\n  // TODO: refactor how refer to scale as discussed in https://github.com/vega/vega-lite/pull/1613\n\n  const {encoding, mark, stack} = model;\n\n  const channelDef = encoding[channel];\n  const channel2Def = encoding[channel === X ? X2 : Y2];\n  const scaleName = model.scaleName(channel);\n  const scale = model.getScaleComponent(channel);\n\n  const offset = ref.getOffset(channel, model.markDef);\n\n  const valueRef =\n    !channelDef && (encoding.latitude || encoding.longitude)\n      ? // use geopoint output if there are lat/long and there is no point position overriding lat/long.\n        {field: model.getName(channel)}\n      : {\n          ...ref.position(\n            channel,\n            channelDef,\n            channel2Def,\n            scaleName,\n            scale,\n            stack,\n            ref.getDefaultRef(defaultRef, channel, scaleName, scale, mark)\n          ),\n          ...(offset ? {offset} : {})\n        };\n\n  return {\n    [vgChannel || channel]: valueRef\n  };\n}\n\n/**\n * Return mixins for x2, y2.\n * If channel is not specified, return one channel based on orientation.\n */\nexport function pointPosition2(model: UnitModel, defaultRef: 'zeroOrMin' | 'zeroOrMax', channel: 'x2' | 'y2') {\n  const {encoding, mark, stack} = model;\n\n  const baseChannel = channel === 'x2' ? 'x' : 'y';\n  const channelDef = encoding[baseChannel];\n  const scaleName = model.scaleName(baseChannel);\n  const scale = model.getScaleComponent(baseChannel);\n\n  const offset = ref.getOffset(channel, model.markDef);\n\n  const valueRef =\n    !channelDef && (encoding.latitude || encoding.longitude)\n      ? // use geopoint output if there are lat2/long2 and there is no point position2 overriding lat2/long2.\n        {field: model.getName(channel)}\n      : {\n          ...ref.position2(\n            channel,\n            channelDef,\n            encoding[channel],\n            scaleName,\n            scale,\n            stack,\n            ref.getDefaultRef(defaultRef, baseChannel, scaleName, scale, mark)\n          ),\n          ...(offset ? {offset} : {})\n        };\n\n  return {[channel]: valueRef};\n}\n","import isArray from './isArray';\n\nexport default function(_) {\n  return _ != null ? (isArray(_) ? _ : [_]) : [];\n}\n","import {ValueDef} from '../fielddef';\nimport {GuideEncodingEntry} from '../guide';\nimport {keys} from '../util';\nimport {VgEncodeChannel} from '../vega.schema';\nimport {wrapCondition} from './mark/mixins';\nimport {UnitModel} from './unit';\n\nexport function guideEncodeEntry(encoding: GuideEncodingEntry, model: UnitModel) {\n  return keys(encoding).reduce((encode, channel: VgEncodeChannel) => {\n    const valueDef = encoding[channel];\n    return {\n      ...encode,\n      ...wrapCondition(model, valueDef, channel, (x: ValueDef) => ({value: x.value}))\n    };\n  }, {});\n}\n","import {POSITION_SCALE_CHANNELS, ScaleChannel} from '../channel';\nimport * as log from '../log';\nimport {Resolve, ResolveMode} from '../resolve';\nimport {contains} from '../util';\nimport {isConcatModel, isFacetModel, isLayerModel, isRepeatModel, Model} from './model';\n\nexport function defaultScaleResolve(channel: ScaleChannel, model: Model): ResolveMode {\n  if (isLayerModel(model) || isFacetModel(model)) {\n    return 'shared';\n  } else if (isConcatModel(model) || isRepeatModel(model)) {\n    return contains(POSITION_SCALE_CHANNELS, channel) ? 'independent' : 'shared';\n  }\n  /* istanbul ignore next: should never reach here. */\n  throw new Error('invalid model type for resolve');\n}\n\nexport function parseGuideResolve(resolve: Resolve, channel: ScaleChannel): ResolveMode {\n  const channelScaleResolve = resolve.scale[channel];\n  const guide = contains(POSITION_SCALE_CHANNELS, channel) ? 'axis' : 'legend';\n\n  if (channelScaleResolve === 'independent') {\n    if (resolve[guide][channel] === 'shared') {\n      log.warn(log.message.independentScaleMeansIndependentGuide(channel));\n    }\n    return 'independent';\n  }\n\n  return resolve[guide][channel] || 'shared';\n}\n","import * as log from '../log';\nimport {duplicate, getFirstDefined, keys, stringify} from '../util';\n\n/**\n * Generic class for storing properties that are explicitly specified\n * and implicitly determined by the compiler.\n * This is important for scale/axis/legend merging as\n * we want to prioritize properties that users explicitly specified.\n */\nexport class Split<T extends object> {\n  constructor(public readonly explicit: Partial<T> = {}, public readonly implicit: Partial<T> = {}) {}\n\n  public clone() {\n    return new Split(duplicate(this.explicit), duplicate(this.implicit));\n  }\n\n  public combine(): Partial<T> {\n    // FIXME remove \"as any\".\n    // Add \"as any\" to avoid an error \"Spread types may only be created from object types\".\n    return {\n      ...(this.explicit as any), // Explicit properties comes first\n      ...(this.implicit as any)\n    };\n  }\n\n  public get<K extends keyof T>(key: K): T[K] {\n    // Explicit has higher precedence\n    return getFirstDefined(this.explicit[key], this.implicit[key]);\n  }\n\n  public getWithExplicit<K extends keyof T>(key: K): Explicit<T[K]> {\n    // Explicit has higher precedence\n    if (this.explicit[key] !== undefined) {\n      return {explicit: true, value: this.explicit[key]};\n    } else if (this.implicit[key] !== undefined) {\n      return {explicit: false, value: this.implicit[key]};\n    }\n    return {explicit: false, value: undefined};\n  }\n\n  public setWithExplicit<K extends keyof T>(key: K, value: Explicit<T[K]>) {\n    if (value.value !== undefined) {\n      this.set(key, value.value, value.explicit);\n    }\n  }\n\n  public set<K extends keyof T>(key: K, value: T[K], explicit: boolean) {\n    delete this[explicit ? 'implicit' : 'explicit'][key];\n    this[explicit ? 'explicit' : 'implicit'][key] = value;\n    return this;\n  }\n\n  public copyKeyFromSplit<S extends T>(key: keyof T, s: Split<S>) {\n    // Explicit has higher precedence\n    if (s.explicit[key] !== undefined) {\n      this.set(key, s.explicit[key], true);\n    } else if (s.implicit[key] !== undefined) {\n      this.set(key, s.implicit[key], false);\n    }\n  }\n  public copyKeyFromObject<S extends Partial<T>>(key: keyof T, s: S) {\n    // Explicit has higher precedence\n    if (s[key] !== undefined) {\n      this.set(key, s[key], true);\n    }\n  }\n\n  /**\n   * Merge split object into this split object. Properties from the other split\n   * overwrite properties from this split.\n   */\n  public copyAll(other: Split<T>) {\n    for (const key of keys(other.combine())) {\n      const val = other.getWithExplicit(key);\n      this.setWithExplicit(key, val);\n    }\n  }\n}\n\nexport interface Explicit<T> {\n  explicit: boolean;\n  value: T;\n}\n\nexport function makeExplicit<T>(value: T): Explicit<T> {\n  return {\n    explicit: true,\n    value\n  };\n}\n\nexport function makeImplicit<T>(value: T): Explicit<T> {\n  return {\n    explicit: false,\n    value\n  };\n}\n\nexport function tieBreakByComparing<S, T>(compare: (v1: T, v2: T) => number) {\n  return (\n    v1: Explicit<T>,\n    v2: Explicit<T>,\n    property: keyof S | never,\n    propertyOf: string | number | symbol\n  ): Explicit<T> => {\n    const diff = compare(v1.value, v2.value);\n    if (diff > 0) {\n      return v1;\n    } else if (diff < 0) {\n      return v2;\n    }\n    return defaultTieBreaker<S, T>(v1, v2, property, propertyOf);\n  };\n}\n\nexport function defaultTieBreaker<S, T>(\n  v1: Explicit<T>,\n  v2: Explicit<T>,\n  property: keyof S,\n  propertyOf: string | number | symbol\n) {\n  if (v1.explicit && v2.explicit) {\n    log.warn(log.message.mergeConflictingProperty(property, propertyOf, v1.value, v2.value));\n  }\n  // If equal score, prefer v1.\n  return v1;\n}\n\nexport function mergeValuesWithExplicit<S, T>(\n  v1: Explicit<T>,\n  v2: Explicit<T>,\n  property: keyof S,\n  propertyOf: 'scale' | 'axis' | 'legend' | '',\n  tieBreaker: (\n    v1: Explicit<T>,\n    v2: Explicit<T>,\n    property: keyof S,\n    propertyOf: string\n  ) => Explicit<T> = defaultTieBreaker\n) {\n  if (v1 === undefined || v1.value === undefined) {\n    // For first run\n    return v2;\n  }\n\n  if (v1.explicit && !v2.explicit) {\n    return v1;\n  } else if (v2.explicit && !v1.explicit) {\n    return v2;\n  } else if (stringify(v1.value) === stringify(v2.value)) {\n    return v1;\n  } else {\n    return tieBreaker(v1, v2, property, propertyOf);\n  }\n}\n","import {Legend as VgLegend} from 'vega';\nimport {NonPositionScaleChannel} from '../../channel';\nimport {Legend} from '../../legend';\nimport {Split} from '../split';\n\nexport class LegendComponent extends Split<VgLegend> {}\n\nexport type LegendComponentIndex = {[P in NonPositionScaleChannel]?: LegendComponent};\n\nexport type LegendIndex = {[P in NonPositionScaleChannel]?: Legend};\n","import {LabelOverlap, LegendOrient, LegendType} from 'vega';\nimport {Channel, isColorChannel} from '../../channel';\nimport {TypedFieldDef, valueArray} from '../../fielddef';\nimport {Legend, LegendConfig} from '../../legend';\nimport {isContinuousToContinuous, ScaleType} from '../../scale';\nimport {TimeUnit} from '../../timeunit';\nimport {contains, getFirstDefined} from '../../util';\nimport {Model} from '../model';\n\nexport function values(legend: Legend, fieldDef: TypedFieldDef<string>) {\n  const vals = legend.values;\n\n  if (vals) {\n    return valueArray(fieldDef, vals);\n  }\n  return undefined;\n}\n\nexport function clipHeight(legendType: LegendType) {\n  if (legendType === 'gradient') {\n    return 20;\n  }\n  return undefined;\n}\n\nexport function type(params: {\n  legend: Legend;\n  channel: Channel;\n  timeUnit?: TimeUnit;\n  scaleType: ScaleType;\n  alwaysReturn: boolean;\n}): LegendType {\n  const {legend} = params;\n\n  return getFirstDefined(legend.type, defaultType(params));\n}\n\nexport function defaultType({\n  channel,\n  timeUnit,\n  scaleType,\n  alwaysReturn\n}: {\n  channel: Channel;\n  timeUnit?: TimeUnit;\n  scaleType: ScaleType;\n  alwaysReturn: boolean;\n}): LegendType {\n  // Following the logic in https://github.com/vega/vega-parser/blob/master/src/parsers/legend.js\n\n  if (isColorChannel(channel)) {\n    if (contains(['quarter', 'month', 'day'], timeUnit)) {\n      return 'symbol';\n    }\n\n    if (isContinuousToContinuous(scaleType)) {\n      return alwaysReturn ? 'gradient' : undefined;\n    }\n  }\n  return alwaysReturn ? 'symbol' : undefined;\n}\n\nexport function direction({\n  legend,\n  legendConfig,\n  timeUnit,\n  channel,\n  scaleType\n}: {\n  legend: Legend;\n  legendConfig: LegendConfig;\n  timeUnit?: TimeUnit;\n  channel: Channel;\n  scaleType: ScaleType;\n}) {\n  const orient = getFirstDefined(legend.orient, legendConfig.orient, 'right');\n\n  const legendType = type({legend, channel, timeUnit, scaleType, alwaysReturn: true});\n  return getFirstDefined(\n    legend.direction,\n    legendConfig[legendType ? 'gradientDirection' : 'symbolDirection'],\n    defaultDirection(orient, legendType)\n  );\n}\n\nfunction defaultDirection(orient: LegendOrient, legendType: LegendType) {\n  switch (orient) {\n    case 'top':\n    case 'bottom':\n      return 'horizontal';\n\n    case 'left':\n    case 'right':\n    case 'none':\n    case undefined: // undefined = \"right\" in Vega\n      return undefined; // vertical is Vega's default\n    default:\n      // top-left / ...\n      // For inner legend, uses compact layout like Tableau\n      return legendType === 'gradient' ? 'horizontal' : undefined;\n  }\n}\n\nexport function defaultGradientLength({\n  legend,\n  legendConfig,\n  model,\n  channel,\n  scaleType\n}: {\n  legend: Legend;\n  legendConfig: LegendConfig;\n  model: Model;\n  channel: Channel;\n  scaleType: ScaleType;\n}) {\n  const {\n    gradientHorizontalMaxLength,\n    gradientHorizontalMinLength,\n    gradientVerticalMaxLength,\n    gradientVerticalMinLength\n  } = legendConfig;\n\n  const dir = direction({legend, legendConfig, channel, scaleType});\n\n  if (dir === 'horizontal') {\n    const orient = getFirstDefined(legend.orient, legendConfig.orient);\n    if (orient === 'top' || orient === 'bottom') {\n      return gradientLengthSignal(model, 'width', gradientHorizontalMinLength, gradientHorizontalMaxLength);\n    } else {\n      return gradientHorizontalMinLength;\n    }\n  } else {\n    // vertical / undefined (Vega uses vertical by default)\n    return gradientLengthSignal(model, 'height', gradientVerticalMinLength, gradientVerticalMaxLength);\n  }\n}\n\nfunction gradientLengthSignal(model: Model, sizeType: 'width' | 'height', min: number, max: number) {\n  const sizeSignal = model.getSizeSignalRef(sizeType).signal;\n  return {signal: `clamp(${sizeSignal}, ${min}, ${max})`};\n}\n\nexport function defaultLabelOverlap(scaleType: ScaleType): LabelOverlap {\n  if (contains(['quantile', 'threshold', 'log'], scaleType)) {\n    return 'greedy';\n  }\n  return undefined;\n}\n","import {SymbolEncodeEntry} from 'vega';\nimport {isArray} from 'vega-util';\nimport {COLOR, NonPositionScaleChannel, OPACITY, SHAPE} from '../../channel';\nimport {\n  Conditional,\n  FieldDefWithCondition,\n  hasConditionalValueDef,\n  isTimeFieldDef,\n  isValueDef,\n  MarkPropFieldDef,\n  TypedFieldDef,\n  Value,\n  ValueDef,\n  ValueDefWithCondition\n} from '../../fielddef';\nimport {AREA, BAR, CIRCLE, FILL_STROKE_CONFIG, GEOSHAPE, LINE, POINT, SQUARE, TEXT, TICK} from '../../mark';\nimport {ScaleType} from '../../scale';\nimport {getFirstDefined, keys} from '../../util';\nimport {applyMarkConfig, timeFormatExpression} from '../common';\nimport * as mixins from '../mark/mixins';\nimport {UnitModel} from '../unit';\nimport {ScaleChannel} from './../../channel';\nimport {LegendComponent} from './component';\nimport {defaultType} from './properties';\n\nfunction type(legendCmp: LegendComponent, model: UnitModel, channel: ScaleChannel) {\n  const scaleType = model.getScaleComponent(channel).get('type');\n  return getFirstDefined(legendCmp.get('type'), defaultType({channel, scaleType, alwaysReturn: true}));\n}\n\nexport function symbols(\n  fieldDef: TypedFieldDef<string>,\n  symbolsSpec: any,\n  model: UnitModel,\n  channel: ScaleChannel,\n  legendCmp: LegendComponent\n): SymbolEncodeEntry {\n  if (type(legendCmp, model, channel) !== 'symbol') {\n    return undefined;\n  }\n\n  let out = {\n    ...applyMarkConfig({}, model, FILL_STROKE_CONFIG),\n    ...mixins.color(model)\n  } as SymbolEncodeEntry; // FIXME: remove this when VgEncodeEntry is compatible with SymbolEncodeEntry\n\n  switch (model.mark) {\n    case BAR:\n    case TICK:\n    case TEXT:\n      out.shape = {value: 'square'};\n      break;\n    case CIRCLE:\n    case SQUARE:\n      out.shape = {value: model.mark};\n      break;\n    case POINT:\n    case LINE:\n    case GEOSHAPE:\n    case AREA:\n      // use default circle\n      break;\n  }\n\n  const {markDef, encoding} = model;\n  const filled = markDef.filled;\n\n  const opacity = getMaxValue(encoding.opacity) || markDef.opacity;\n\n  if (out.fill) {\n    // for fill legend, we don't want any fill in symbol\n    if (channel === 'fill' || (filled && channel === COLOR)) {\n      delete out.fill;\n    } else {\n      if (out.fill['field']) {\n        // For others, set fill to some opaque value (or nothing if a color is already set)\n        if (legendCmp.get('symbolFillColor')) {\n          delete out.fill;\n        } else {\n          out.fill = {value: 'black'};\n          out.fillOpacity = {value: opacity || 1};\n        }\n      } else if (isArray(out.fill)) {\n        const fill =\n          (getFirstConditionValue(encoding.fill || encoding.color) as string) ||\n          markDef.fill ||\n          (filled && markDef.color);\n        if (fill) {\n          out.fill = {value: fill};\n        }\n      }\n    }\n  }\n\n  if (out.stroke) {\n    if (channel === 'stroke' || (!filled && channel === COLOR)) {\n      delete out.stroke;\n    } else {\n      if (out.stroke['field']) {\n        // For others, remove stroke field\n        delete out.stroke;\n      } else if (isArray(out.stroke)) {\n        const stroke = getFirstDefined(\n          getFirstConditionValue(encoding.stroke || encoding.color) as string,\n          markDef.stroke,\n          filled ? markDef.color : undefined\n        );\n        if (stroke) {\n          out.stroke = {value: stroke};\n        }\n      }\n    }\n  }\n\n  if (channel !== SHAPE) {\n    const shape = (getFirstConditionValue(encoding.shape) as string) || markDef.shape;\n    if (shape) {\n      out.shape = {value: shape};\n    }\n  }\n\n  if (channel !== OPACITY) {\n    if (opacity) {\n      // only apply opacity if it is neither zero or undefined\n      out.opacity = {value: opacity};\n    }\n  }\n\n  out = {...out, ...symbolsSpec};\n\n  return keys(out).length > 0 ? out : undefined;\n}\n\nexport function gradient(\n  fieldDef: TypedFieldDef<string>,\n  gradientSpec: any,\n  model: UnitModel,\n  channel: ScaleChannel,\n  legendCmp: LegendComponent\n) {\n  if (type(legendCmp, model, channel) !== 'gradient') {\n    return undefined;\n  }\n\n  let out: SymbolEncodeEntry = {};\n\n  const opacity = getMaxValue(model.encoding.opacity) || model.markDef.opacity;\n  if (opacity) {\n    // only apply opacity if it is neither zero or undefined\n    out.opacity = {value: opacity};\n  }\n\n  out = {...out, ...gradientSpec};\n  return keys(out).length > 0 ? out : undefined;\n}\n\nexport function labels(\n  fieldDef: TypedFieldDef<string>,\n  labelsSpec: any,\n  model: UnitModel,\n  channel: NonPositionScaleChannel,\n  legendCmp: LegendComponent\n) {\n  const legend = model.legend(channel);\n  const config = model.config;\n\n  let out: SymbolEncodeEntry = {};\n\n  if (isTimeFieldDef(fieldDef)) {\n    const isUTCScale = model.getScaleComponent(channel).get('type') === ScaleType.UTC;\n    const expr = timeFormatExpression(\n      'datum.value',\n      fieldDef.timeUnit,\n      legend.format,\n      config.legend.shortTimeLabels,\n      config.timeFormat,\n      isUTCScale\n    );\n    labelsSpec = {\n      ...(expr ? {text: {signal: expr}} : {}),\n      ...labelsSpec\n    };\n  }\n\n  out = {...out, ...labelsSpec};\n\n  return keys(out).length > 0 ? out : undefined;\n}\n\nfunction getMaxValue(\n  channelDef:\n    | FieldDefWithCondition<MarkPropFieldDef<string>, number>\n    | ValueDefWithCondition<MarkPropFieldDef<string>, number>\n) {\n  return getConditionValue<number>(channelDef, (v: number, conditionalDef) => Math.max(v, conditionalDef.value as any));\n}\n\nfunction getFirstConditionValue(\n  channelDef:\n    | FieldDefWithCondition<MarkPropFieldDef<string>, Value>\n    | ValueDefWithCondition<MarkPropFieldDef<string>, Value>\n) {\n  return getConditionValue(channelDef, (v: number, conditionalDef) => {\n    return getFirstDefined(v, conditionalDef.value);\n  });\n}\n\nfunction getConditionValue<V extends Value>(\n  channelDef: FieldDefWithCondition<MarkPropFieldDef<string>, V> | ValueDefWithCondition<MarkPropFieldDef<string>, V>,\n  reducer: (val: V, conditionalDef: Conditional<ValueDef>) => V\n): V {\n  if (hasConditionalValueDef(channelDef)) {\n    return (isArray(channelDef.condition) ? channelDef.condition : [channelDef.condition]).reduce(\n      reducer,\n      channelDef.value as any\n    );\n  } else if (isValueDef(channelDef)) {\n    return channelDef.value as any;\n  }\n  return undefined;\n}\n","import {Legend as VgLegend, LegendEncode, SignalRef} from 'vega';\nimport {\n  COLOR,\n  FILL,\n  FILLOPACITY,\n  NonPositionScaleChannel,\n  OPACITY,\n  SHAPE,\n  SIZE,\n  STROKE,\n  STROKEOPACITY,\n  STROKEWIDTH\n} from '../../channel';\nimport {getTypedFieldDef, isFieldDef, title as fieldDefTitle, TypedFieldDef} from '../../fielddef';\nimport {Legend, LEGEND_PROPERTIES, VG_LEGEND_PROPERTIES} from '../../legend';\nimport {GEOJSON} from '../../type';\nimport {deleteNestedProperty, getFirstDefined, keys} from '../../util';\nimport {mergeTitleComponent, numberFormat} from '../common';\nimport {guideEncodeEntry} from '../guide';\nimport {isUnitModel, Model} from '../model';\nimport {parseGuideResolve} from '../resolve';\nimport {defaultTieBreaker, Explicit, makeImplicit, mergeValuesWithExplicit} from '../split';\nimport {UnitModel} from '../unit';\nimport {LegendComponent, LegendComponentIndex} from './component';\nimport * as encode from './encode';\nimport * as properties from './properties';\nimport {direction, type} from './properties';\n\nexport function parseLegend(model: Model) {\n  if (isUnitModel(model)) {\n    model.component.legends = parseUnitLegend(model);\n  } else {\n    model.component.legends = parseNonUnitLegend(model);\n  }\n}\n\nfunction parseUnitLegend(model: UnitModel): LegendComponentIndex {\n  const {encoding} = model;\n  return [COLOR, FILL, STROKE, STROKEWIDTH, SIZE, SHAPE, OPACITY, FILLOPACITY, STROKEOPACITY].reduce(\n    (legendComponent, channel) => {\n      const def = encoding[channel];\n      if (\n        model.legend(channel) &&\n        model.getScaleComponent(channel) &&\n        !(isFieldDef(def) && (channel === SHAPE && def.type === GEOJSON))\n      ) {\n        legendComponent[channel] = parseLegendForChannel(model, channel);\n      }\n      return legendComponent;\n    },\n    {}\n  );\n}\n\nfunction getLegendDefWithScale(model: UnitModel, channel: NonPositionScaleChannel): VgLegend {\n  const scale = model.scaleName(COLOR);\n  if (channel === 'color') {\n    return model.markDef.filled ? {fill: scale} : {stroke: scale};\n  }\n  return {[channel]: model.scaleName(channel)};\n}\n\nfunction isExplicit<T extends string | number | object | boolean>(\n  value: T,\n  property: keyof VgLegend,\n  legend: Legend,\n  fieldDef: TypedFieldDef<string>\n) {\n  switch (property) {\n    case 'values':\n      // specified legend.values is already respected, but may get transformed.\n      return !!legend.values;\n    case 'title':\n      // title can be explicit if fieldDef.title is set\n      if (property === 'title' && value === fieldDef.title) {\n        return true;\n      }\n  }\n  // Otherwise, things are explicit if the returned value matches the specified property\n  return value === legend[property];\n}\n\nexport function parseLegendForChannel(model: UnitModel, channel: NonPositionScaleChannel): LegendComponent {\n  const fieldDef = model.fieldDef(channel);\n  const legend = model.legend(channel);\n\n  const legendCmpt = new LegendComponent({}, getLegendDefWithScale(model, channel));\n\n  for (const property of LEGEND_PROPERTIES) {\n    const value = getProperty(property, legend, channel, model);\n    if (value !== undefined) {\n      const explicit = isExplicit(value, property, legend, fieldDef);\n      if (explicit || model.config.legend[property] === undefined) {\n        legendCmpt.set(property, value, explicit);\n      }\n    }\n  }\n\n  const legendEncoding = legend.encoding || {};\n  const legendEncode = ['labels', 'legend', 'title', 'symbols', 'gradient'].reduce(\n    (e: LegendEncode, part) => {\n      const legendEncodingPart = guideEncodeEntry(legendEncoding[part] || {}, model);\n      const value = encode[part]\n        ? encode[part](fieldDef, legendEncodingPart, model, channel, legendCmpt) // apply rule\n        : legendEncodingPart; // no rule -- just default values\n      if (value !== undefined && keys(value).length > 0) {\n        e[part] = {update: value};\n      }\n      return e;\n    },\n    {} as LegendEncode\n  );\n\n  if (keys(legendEncode).length > 0) {\n    legendCmpt.set('encode', legendEncode, !!legend.encoding);\n  }\n\n  return legendCmpt;\n}\n\nfunction getProperty<K extends keyof VgLegend>(\n  property: K,\n  legend: Legend,\n  channel: NonPositionScaleChannel,\n  model: UnitModel\n): VgLegend[K] {\n  const {encoding} = model;\n  const fieldDef = getTypedFieldDef(encoding[channel]);\n  const legendConfig = model.config.legend;\n  const {timeUnit} = fieldDef;\n\n  const scaleType = model.getScaleComponent(channel).get('type');\n\n  switch (property) {\n    case 'format':\n      // We don't include temporal field here as we apply format in encode block\n      return numberFormat(fieldDef, legend.format, model.config);\n    case 'title':\n      return fieldDefTitle(fieldDef, model.config, {allowDisabling: true}) || undefined;\n\n    case 'type':\n      return type({legend, channel, timeUnit, scaleType, alwaysReturn: false});\n\n    case 'direction':\n      return direction({legend, legendConfig, timeUnit, channel, scaleType});\n\n    // TODO: enable when https://github.com/vega/vega/issues/1351 is fixed\n    // case 'clipHeight':\n    //   return getFirstDefined(specifiedLegend.clipHeight, properties.clipHeight(properties.type(...)));\n    case 'labelOverlap':\n      return getFirstDefined(legend.labelOverlap, properties.defaultLabelOverlap(scaleType));\n    case 'gradientLength':\n      return getFirstDefined<number | SignalRef>(\n        // do specified gradientLength first\n        legend.gradientLength,\n        legendConfig.gradientLength,\n        // Otherwise, use smart default based on plot height\n        properties.defaultGradientLength({\n          model,\n          legend,\n          legendConfig,\n          channel,\n          scaleType\n        })\n      );\n\n    case 'values':\n      return properties.values(legend, fieldDef);\n  }\n\n  // Otherwise, return specified property.\n  return (legend as VgLegend)[property];\n}\n\nfunction parseNonUnitLegend(model: Model) {\n  const {legends, resolve} = model.component;\n\n  for (const child of model.children) {\n    parseLegend(child);\n\n    keys(child.component.legends).forEach((channel: NonPositionScaleChannel) => {\n      resolve.legend[channel] = parseGuideResolve(model.component.resolve, channel);\n\n      if (resolve.legend[channel] === 'shared') {\n        // If the resolve says shared (and has not been overridden)\n        // We will try to merge and see if there is a conflict\n\n        legends[channel] = mergeLegendComponent(legends[channel], child.component.legends[channel]);\n\n        if (!legends[channel]) {\n          // If merge returns nothing, there is a conflict so we cannot make the legend shared.\n          // Thus, mark legend as independent and remove the legend component.\n          resolve.legend[channel] = 'independent';\n          delete legends[channel];\n        }\n      }\n    });\n  }\n\n  keys(legends).forEach((channel: NonPositionScaleChannel) => {\n    for (const child of model.children) {\n      if (!child.component.legends[channel]) {\n        // skip if the child does not have a particular legend\n        continue;\n      }\n\n      if (resolve.legend[channel] === 'shared') {\n        // After merging shared legend, make sure to remove legend from child\n        delete child.component.legends[channel];\n      }\n    }\n  });\n  return legends;\n}\n\nexport function mergeLegendComponent(mergedLegend: LegendComponent, childLegend: LegendComponent): LegendComponent {\n  if (!mergedLegend) {\n    return childLegend.clone();\n  }\n  const mergedOrient = mergedLegend.getWithExplicit('orient');\n  const childOrient = childLegend.getWithExplicit('orient');\n\n  if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {\n    // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)\n    // Cannot merge due to inconsistent orient\n    return undefined;\n  }\n\n  let typeMerged = false;\n  // Otherwise, let's merge\n  for (const prop of VG_LEGEND_PROPERTIES) {\n    const mergedValueWithExplicit = mergeValuesWithExplicit<VgLegend, any>(\n      mergedLegend.getWithExplicit(prop),\n      childLegend.getWithExplicit(prop),\n      prop,\n      'legend',\n\n      // Tie breaker function\n      (v1: Explicit<any>, v2: Explicit<any>): any => {\n        switch (prop) {\n          case 'title':\n            return mergeTitleComponent(v1, v2);\n          case 'type':\n            // There are only two types. If we have different types, then prefer symbol over gradient.\n            typeMerged = true;\n            return makeImplicit('symbol');\n        }\n        return defaultTieBreaker<VgLegend, any>(v1, v2, prop, 'legend');\n      }\n    );\n    mergedLegend.setWithExplicit(prop, mergedValueWithExplicit);\n  }\n  if (typeMerged) {\n    if (((mergedLegend.implicit || {}).encode || {}).gradient) {\n      deleteNestedProperty(mergedLegend.implicit, ['encode', 'gradient']);\n    }\n    if (((mergedLegend.explicit || {}).encode || {}).gradient) {\n      deleteNestedProperty(mergedLegend.explicit, ['encode', 'gradient']);\n    }\n  }\n\n  return mergedLegend;\n}\n","import {Legend as VgLegend} from 'vega';\nimport {flatten, keys, stringify, vals} from '../../util';\nimport {Model} from '../model';\nimport {LegendComponent} from './component';\nimport {mergeLegendComponent} from './parse';\n\nexport function assembleLegends(model: Model): VgLegend[] {\n  const legendComponentIndex = model.component.legends;\n  const legendByDomain: {[domainHash: string]: LegendComponent[]} = {};\n\n  for (const channel of keys(legendComponentIndex)) {\n    const scaleComponent = model.getScaleComponent(channel);\n    const domainHash = stringify(scaleComponent.domains);\n    if (legendByDomain[domainHash]) {\n      for (const mergedLegendComponent of legendByDomain[domainHash]) {\n        const merged = mergeLegendComponent(mergedLegendComponent, legendComponentIndex[channel]);\n        if (!merged) {\n          // If cannot merge, need to add this legend separately\n          legendByDomain[domainHash].push(legendComponentIndex[channel]);\n        }\n      }\n    } else {\n      legendByDomain[domainHash] = [legendComponentIndex[channel].clone()];\n    }\n  }\n\n  return flatten(vals(legendByDomain)).map((legendCmpt: LegendComponent) => {\n    const legend = legendCmpt.combine();\n    // For non color channel's legend, we need to override symbol stroke config from Vega config\n    if (legend.encode && legend.encode.symbols) {\n      const out = legend.encode.symbols.update;\n      if (out.fill && out.fill['value'] !== 'transparent' && !out.stroke && !legend.stroke) {\n        // For non color channel's legend, we need to override symbol stroke config from Vega config if stroke channel is not used.\n        out.stroke = {value: 'transparent'};\n      }\n    }\n    return legend;\n  });\n}\n","import {SignalRef} from 'vega';\nimport {contains} from '../../util';\nimport {isSignalRef, VgProjection} from '../../vega.schema';\nimport {isConcatModel, isLayerModel, isRepeatModel, Model} from '../model';\n\nexport function assembleProjections(model: Model): VgProjection[] {\n  if (isLayerModel(model) || isConcatModel(model) || isRepeatModel(model)) {\n    return assembleProjectionsForModelAndChildren(model);\n  } else {\n    return assembleProjectionForModel(model);\n  }\n}\n\nexport function assembleProjectionsForModelAndChildren(model: Model): VgProjection[] {\n  return model.children.reduce((projections, child) => {\n    return projections.concat(child.assembleProjections());\n  }, assembleProjectionForModel(model));\n}\n\nexport function assembleProjectionForModel(model: Model): VgProjection[] {\n  const component = model.component.projection;\n  if (!component || component.merged) {\n    return [];\n  }\n\n  const projection = component.combine();\n  const {name, ...rest} = projection; // we need to extract name so that it is always present in the output and pass TS type validation\n\n  const size: SignalRef = {\n    signal: `[${component.size.map(ref => ref.signal).join(', ')}]`\n  };\n\n  const fit: string[] = component.data.reduce((sources, data) => {\n    const source: string = isSignalRef(data) ? data.signal : `data('${model.lookupDataSource(data)}')`;\n    if (!contains(sources, source)) {\n      // build a unique list of sources\n      sources.push(source);\n    }\n    return sources;\n  }, []);\n\n  if (fit.length <= 0) {\n    throw new Error(\"Projection's fit didn't find any data sources\");\n  }\n\n  return [\n    {\n      name,\n      size,\n      fit: {\n        signal: fit.length > 1 ? `[${fit.join(', ')}]` : fit[0]\n      },\n      ...rest\n    }\n  ];\n}\n","import {ProjectionType} from './vega.schema';\n\nexport type ProjectionType = ProjectionType;\n\nexport interface Projection {\n  /**\n   * The cartographic projection to use. This value is case-insensitive, for example `\"albers\"` and `\"Albers\"` indicate the same projection type. You can find all valid projection types [in the documentation](https://vega.github.io/vega-lite/docs/projection.html#projection-types).\n   *\n   * __Default value:__ `mercator`\n   */\n  type?: ProjectionType;\n\n  /**\n   * Sets the projection’s clipping circle radius to the specified angle in degrees. If `null`, switches to [antimeridian](http://bl.ocks.org/mbostock/3788999) cutting rather than small-circle clipping.\n   */\n  clipAngle?: number;\n\n  /**\n   * Sets the projection’s viewport clip extent to the specified bounds in pixels. The extent bounds are specified as an array `[[x0, y0], [x1, y1]]`, where `x0` is the left-side of the viewport, `y0` is the top, `x1` is the right and `y1` is the bottom. If `null`, no viewport clipping is performed.\n   */\n  clipExtent?: number[][];\n\n  /**\n   * Sets the projection’s center to the specified center, a two-element array of longitude and latitude in degrees.\n   *\n   * __Default value:__ `[0, 0]`\n   */\n  center?: number[];\n\n  /**\n   * Sets the projection’s three-axis rotation to the specified angles, which must be a two- or three-element array of numbers [`lambda`, `phi`, `gamma`] specifying the rotation angles in degrees about each spherical axis. (These correspond to yaw, pitch and roll.)\n   *\n   * __Default value:__ `[0, 0, 0]`\n   */\n  rotate?: number[];\n\n  /**\n   * Sets the threshold for the projection’s [adaptive resampling](http://bl.ocks.org/mbostock/3795544) to the specified value in pixels. This value corresponds to the [Douglas–Peucker distance](http://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm). If precision is not specified, returns the projection’s current resampling precision which defaults to `√0.5 ≅ 0.70710…`.\n   */\n  precision?: string;\n\n  /* The following properties are all supported for specific types of projections. Consult the d3-geo-projection library for more information: https://github.com/d3/d3-geo-projection */\n  coefficient?: number;\n  distance?: number;\n  fraction?: number;\n  lobes?: number;\n  parallel?: number;\n  radius?: number;\n  ratio?: number;\n  spacing?: number;\n  tilt?: number;\n}\n\n/**\n * Any property of Projection can be in config\n */\nexport type ProjectionConfig = Projection;\n\nexport const PROJECTION_PROPERTIES: (keyof Projection)[] = [\n  'type',\n  'clipAngle',\n  'clipExtent',\n  'center',\n  'rotate',\n  'precision',\n  'coefficient',\n  'distance',\n  'fraction',\n  'lobes',\n  'parallel',\n  'radius',\n  'ratio',\n  'spacing',\n  'tilt'\n];\n","import {SignalRef} from 'vega';\nimport {Projection} from '../../projection';\nimport {VgProjection} from '../../vega.schema';\nimport {Split} from '../split';\n\nexport class ProjectionComponent extends Split<VgProjection> {\n  public merged = false;\n\n  constructor(\n    name: string,\n    public specifiedProjection: Projection,\n    public size: SignalRef[],\n    public data: (string | SignalRef)[]\n  ) {\n    super(\n      {...specifiedProjection}, // all explicit properties of projection\n      {name} // name as initial implicit property\n    );\n  }\n}\n","import {SignalRef} from 'vega';\nimport {LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2, SHAPE} from '../../channel';\nimport {MAIN} from '../../data';\nimport {PROJECTION_PROPERTIES} from '../../projection';\nimport {GEOJSON} from '../../type';\nimport {duplicate, every, stringify} from '../../util';\nimport {isUnitModel, Model} from '../model';\nimport {UnitModel} from '../unit';\nimport {ProjectionComponent} from './component';\n\nexport function parseProjection(model: Model) {\n  if (isUnitModel(model)) {\n    model.component.projection = parseUnitProjection(model);\n  } else {\n    // because parse happens from leaves up (unit specs before layer spec),\n    // we can be sure that the above if statement has already occurred\n    // and therefore we have access to child.component.projection\n    // for each of model's children\n    model.component.projection = parseNonUnitProjections(model);\n  }\n}\n\nfunction parseUnitProjection(model: UnitModel): ProjectionComponent {\n  const {specifiedProjection, config, hasProjection} = model;\n\n  if (hasProjection) {\n    const data: (SignalRef | string)[] = [];\n\n    [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]].forEach(posssiblePair => {\n      if (model.channelHasField(posssiblePair[0]) || model.channelHasField(posssiblePair[1])) {\n        data.push({\n          signal: model.getName(`geojson_${data.length}`)\n        });\n      }\n    });\n\n    if (model.channelHasField(SHAPE) && model.fieldDef(SHAPE).type === GEOJSON) {\n      data.push({\n        signal: model.getName(`geojson_${data.length}`)\n      });\n    }\n\n    if (data.length === 0) {\n      // main source is geojson, so we can just use that\n      data.push(model.requestDataName(MAIN));\n    }\n\n    return new ProjectionComponent(\n      model.projectionName(true),\n      {\n        ...(config.projection || {}),\n        ...(specifiedProjection || {})\n      },\n      [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')],\n      data\n    );\n  }\n\n  return undefined;\n}\n\nfunction mergeIfNoConflict(first: ProjectionComponent, second: ProjectionComponent): ProjectionComponent {\n  const allPropertiesShared = every(PROJECTION_PROPERTIES, prop => {\n    // neither has the property\n    if (!first.explicit.hasOwnProperty(prop) && !second.explicit.hasOwnProperty(prop)) {\n      return true;\n    }\n    // both have property and an equal value for property\n    if (\n      first.explicit.hasOwnProperty(prop) &&\n      second.explicit.hasOwnProperty(prop) &&\n      // some properties might be signals or objects and require hashing for comparison\n      stringify(first.get(prop)) === stringify(second.get(prop))\n    ) {\n      return true;\n    }\n    return false;\n  });\n\n  const size = stringify(first.size) === stringify(second.size);\n  if (size) {\n    if (allPropertiesShared) {\n      return first;\n    } else if (stringify(first.explicit) === stringify({})) {\n      return second;\n    } else if (stringify(second.explicit) === stringify({})) {\n      return first;\n    }\n  }\n\n  // if all properties don't match, let each unit spec have its own projection\n  return null;\n}\n\nfunction parseNonUnitProjections(model: Model): ProjectionComponent {\n  if (model.children.length === 0) {\n    return undefined;\n  }\n\n  let nonUnitProjection: ProjectionComponent;\n  const mergable = every(model.children, child => {\n    parseProjection(child);\n    const projection = child.component.projection;\n    if (!projection) {\n      // child layer does not use a projection\n      return true;\n    } else if (!nonUnitProjection) {\n      // cached 'projection' is null, cache this one\n      nonUnitProjection = projection;\n      return true;\n    } else {\n      const merge = mergeIfNoConflict(nonUnitProjection, projection);\n      if (merge) {\n        nonUnitProjection = merge;\n      }\n      return !!merge;\n    }\n  });\n\n  // it cached one and all other children share the same projection,\n  if (nonUnitProjection && mergable) {\n    // so we can elevate it to the layer level\n    const name = model.projectionName(true);\n    const modelProjection = new ProjectionComponent(\n      name,\n      nonUnitProjection.specifiedProjection,\n      nonUnitProjection.size,\n      duplicate(nonUnitProjection.data)\n    );\n\n    // rename and assign all others as merged\n    model.children.forEach(child => {\n      if (child.component.projection) {\n        modelProjection.data.push(...child.component.projection.data);\n        child.renameProjection(child.component.projection.get('name'), name);\n        child.component.projection.merged = true;\n      }\n    });\n\n    return modelProjection;\n  }\n\n  return undefined;\n}\n","import {entries, uniqueId} from './../../util';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * Print debug information for dataflow tree.\n */\nexport function debug(node: DataFlowNode) {\n  console.log(\n    `${(node.constructor as any).name}${node.debugName ? `(${node.debugName})` : ''} -> ${node.children.map(c => {\n      return `${(c.constructor as any).name}${c.debugName ? ` (${c.debugName})` : ''}`;\n    })}`\n  );\n  console.log(node);\n  node.children.forEach(debug);\n}\n\n/**\n * Print the dataflow tree as graphviz.\n *\n * Render the output in http://viz-js.com/.\n */\nexport function draw(roots: DataFlowNode[]) {\n  // check the graph before printing it since the logic below assumes a consistent graph\n  checkLinks(roots);\n\n  const nodes: {[key: string]: {id: string | number; label: string; hash: string | number}} = {};\n  const edges: [string, string][] = [];\n\n  function getId(node: DataFlowNode) {\n    let id = node['__uniqueid'];\n    if (id === undefined) {\n      id = uniqueId();\n      node['__uniqueid'] = id;\n    }\n    return id;\n  }\n\n  function getLabel(node: DataFlowNode) {\n    const out = [(node.constructor as any).name.slice(0, -4)];\n\n    if (node.debugName) {\n      out.push(`<i>${node.debugName}</i>`);\n    }\n\n    const dep = node.dependentFields();\n    if (dep.size) {\n      out.push(`<font color=\"grey\" point-size=\"10\">IN:</font> ${[...node.dependentFields()].join(', ')}`);\n    }\n    const prod = node.producedFields();\n    if (prod.size) {\n      out.push(`<font color=\"grey\" point-size=\"10\">OUT:</font> ${[...node.producedFields()].join(', ')}`);\n    }\n    return out.join('<br/>');\n  }\n\n  function collector(node: DataFlowNode) {\n    const id = getId(node);\n    nodes[id] = {\n      id: id,\n      label: getLabel(node),\n      hash: String(node.hash()).replace(/\"/g, '')\n    };\n\n    for (const child of node.children) {\n      edges.push([id, getId(child)]);\n      collector(child);\n    }\n  }\n\n  roots.forEach(n => collector(n));\n\n  const dot = `digraph DataFlow {\n  rankdir = TB;\n  node [shape=record]\n  ${entries(nodes)\n    .map(\n      ({key, value}) => `  \"${key}\" [\n    label = <${value.label}>;\n    tooltip = \"[${value.id}]&#010;${value.hash}\"\n  ]`\n    )\n    .join('\\n')}\n\n  ${edges.map(([source, target]) => `\"${source}\" -> \"${target}\"`).join(' ')}\n}`;\n\n  console.log(dot);\n\n  return dot;\n}\n\n/**\n * Iterates over a dataflow graph and checks whether all links are consistent.\n */\nexport function checkLinks(nodes: DataFlowNode[]): boolean {\n  for (const node of nodes) {\n    for (const child of node.children) {\n      if (child.parent !== node) {\n        console.error('Dataflow graph is inconsistent.', parent, child);\n        return false;\n      }\n    }\n\n    if (!checkLinks(node.children)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import {Data, DataFormatType, isInlineData, isNamedData, isUrlData} from '../../data';\nimport {contains, keys, omit} from '../../util';\nimport {VgData} from '../../vega.schema';\nimport {DataFormat} from './../../data';\nimport {DataFlowNode} from './dataflow';\n\nexport class SourceNode extends DataFlowNode {\n  private _data: Partial<VgData>;\n\n  private _name: string;\n\n  constructor(data: Data) {\n    super(null); // source cannot have parent\n\n    data = data || {name: 'source'};\n    const format = data.format ? {...omit(data.format, ['parse'])} : ({} as DataFormat);\n\n    if (isInlineData(data)) {\n      this._data = {values: data.values};\n    } else if (isUrlData(data)) {\n      this._data = {url: data.url};\n\n      if (!format.type) {\n        // Extract extension from URL using snippet from\n        // http://stackoverflow.com/questions/680929/how-to-extract-extension-from-filename-string-in-javascript\n        let defaultExtension = /(?:\\.([^.]+))?$/.exec(data.url)[1];\n        if (!contains(['json', 'csv', 'tsv', 'dsv', 'topojson'], defaultExtension)) {\n          defaultExtension = 'json';\n        }\n\n        // defaultExtension has type string but we ensure that it is DataFormatType above\n        format.type = defaultExtension as DataFormatType;\n      }\n    } else if (isNamedData(data)) {\n      this._data = {};\n    }\n\n    // any dataset can be named\n    if (data.name) {\n      this._name = data.name;\n    }\n\n    if (format && keys(format).length > 0) {\n      this._data.format = format;\n    }\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  public hasName(): boolean {\n    return !!this._name;\n  }\n\n  get dataName() {\n    return this._name;\n  }\n\n  set dataName(name: string) {\n    this._name = name;\n  }\n\n  set parent(parent: DataFlowNode) {\n    throw new Error('Source nodes have to be roots.');\n  }\n\n  public remove() {\n    throw new Error('Source nodes are roots and cannot be removed.');\n  }\n\n  public hash(): string | number {\n    throw new Error('Cannot hash sources');\n  }\n\n  public assemble(): VgData {\n    return {\n      name: this._name,\n      ...this._data,\n      transform: []\n    };\n  }\n}\n","import {DataFlowNode} from './dataflow';\nimport {OptimizerFlags} from './optimizers';\nimport {SourceNode} from './source';\n\n/**\n * Abstract base class for BottomUpOptimizer and TopDownOptimizer.\n * Contains only mutation handling logic. Subclasses need to implement iteration logic.\n */\nabstract class OptimizerBase {\n  private _mutated: boolean;\n  constructor() {\n    this._mutated = false;\n  }\n  // Once true, _mutated is never set to false\n  public setMutated() {\n    this._mutated = true;\n  }\n\n  get mutatedFlag() {\n    return this._mutated;\n  }\n}\n\n/**\n * Starts from a node and runs the optimization function(the \"run\" method) upwards to the root,\n * depending on the continueFlag and mutatedFlag values returned by the optimization function.\n */\nexport abstract class BottomUpOptimizer extends OptimizerBase {\n  private _continue: boolean;\n\n  constructor() {\n    super();\n    this._continue = false;\n  }\n\n  public setContinue() {\n    this._continue = true;\n  }\n\n  get continueFlag() {\n    return this._continue;\n  }\n\n  get flags(): OptimizerFlags {\n    return {continueFlag: this.continueFlag, mutatedFlag: this.mutatedFlag};\n  }\n\n  set flags({continueFlag, mutatedFlag}: OptimizerFlags) {\n    if (continueFlag) {\n      this.setContinue();\n    }\n    if (mutatedFlag) {\n      this.setMutated();\n    }\n  }\n\n  public abstract run(node: DataFlowNode): OptimizerFlags;\n\n  public optimizeNextFromLeaves(node: DataFlowNode): boolean {\n    if (node instanceof SourceNode) {\n      return false;\n    }\n    const next = node.parent;\n    const {continueFlag} = this.run(node);\n    if (continueFlag) {\n      this.optimizeNextFromLeaves(next);\n    }\n    return this.mutatedFlag;\n  }\n}\n\n/**\n * The optimizer function( the \"run\" method), is invoked on the given node and then continues recursively.\n */\nexport abstract class TopDownOptimizer extends OptimizerBase {\n  public abstract run(node: DataFlowNode): boolean;\n}\n","import {AggregateOp} from 'vega';\nimport {isBinning} from '../../bin';\nimport {Channel, isScaleChannel} from '../../channel';\nimport {binRequiresRange, FieldDef, isTypedFieldDef, vgField} from '../../fielddef';\nimport * as log from '../../log';\nimport {AggregateTransform} from '../../transform';\nimport {Dict, duplicate, hash, keys, replacePathInField, setEqual} from '../../util';\nimport {VgAggregateTransform} from '../../vega.schema';\nimport {UnitModel} from '../unit';\nimport {DataFlowNode} from './dataflow';\n\ntype Measures = Dict<{[key in AggregateOp]?: Set<string>}>;\n\nfunction addDimension(dims: Set<string>, channel: Channel, fieldDef: FieldDef<string>) {\n  if (isTypedFieldDef(fieldDef) && isBinning(fieldDef.bin)) {\n    dims.add(vgField(fieldDef, {}));\n    dims.add(vgField(fieldDef, {binSuffix: 'end'}));\n\n    if (binRequiresRange(fieldDef, channel)) {\n      dims.add(vgField(fieldDef, {binSuffix: 'range'}));\n    }\n  } else {\n    dims.add(vgField(fieldDef));\n  }\n  return dims;\n}\n\nfunction mergeMeasures(parentMeasures: Measures, childMeasures: Measures) {\n  for (const field of keys(childMeasures)) {\n    // when we merge a measure, we either have to add an aggregation operator or even a new field\n    const ops = childMeasures[field];\n    for (const op of keys(ops)) {\n      if (field in parentMeasures) {\n        // add operator to existing measure field\n        parentMeasures[field][op] = new Set([...(parentMeasures[field][op] || []), ...ops[op]]);\n      } else {\n        parentMeasures[field] = {[op]: ops[op]};\n      }\n    }\n  }\n}\n\nexport class AggregateNode extends DataFlowNode {\n  public clone() {\n    return new AggregateNode(null, new Set(this.dimensions), duplicate(this.measures));\n  }\n\n  /**\n   * @param dimensions string set for dimensions\n   * @param measures dictionary mapping field name => dict of aggregation functions and names to use\n   */\n  constructor(parent: DataFlowNode, private dimensions: Set<string>, private measures: Measures) {\n    super(parent);\n  }\n\n  get groupBy() {\n    return this.dimensions;\n  }\n\n  public static makeFromEncoding(parent: DataFlowNode, model: UnitModel): AggregateNode {\n    let isAggregate = false;\n    model.forEachFieldDef(fd => {\n      if (fd.aggregate) {\n        isAggregate = true;\n      }\n    });\n\n    const meas: Measures = {};\n    const dims = new Set<string>();\n\n    if (!isAggregate) {\n      // no need to create this node if the model has no aggregation\n      return null;\n    }\n\n    model.forEachFieldDef((fieldDef, channel) => {\n      const {aggregate, field} = fieldDef;\n      if (aggregate) {\n        if (aggregate === 'count') {\n          meas['*'] = meas['*'] || {};\n          meas['*']['count'] = new Set([vgField(fieldDef, {forAs: true})]);\n        } else {\n          meas[field] = meas[field] || {};\n          meas[field][aggregate] = new Set([vgField(fieldDef, {forAs: true})]);\n\n          // For scale channel with domain === 'unaggregated', add min/max so we can use their union as unaggregated domain\n          if (isScaleChannel(channel) && model.scaleDomain(channel) === 'unaggregated') {\n            meas[field]['min'] = new Set([vgField({field, aggregate: 'min'}, {forAs: true})]);\n            meas[field]['max'] = new Set([vgField({field, aggregate: 'max'}, {forAs: true})]);\n          }\n        }\n      } else {\n        addDimension(dims, channel, fieldDef);\n      }\n    });\n\n    if (dims.size + keys(meas).length === 0) {\n      return null;\n    }\n\n    return new AggregateNode(parent, dims, meas);\n  }\n\n  public static makeFromTransform(parent: DataFlowNode, t: AggregateTransform): AggregateNode {\n    const dims = new Set<string>();\n    const meas: Measures = {};\n\n    for (const s of t.aggregate) {\n      const {op, field, as} = s;\n      if (op) {\n        if (op === 'count') {\n          meas['*'] = meas['*'] || {};\n          meas['*']['count'] = new Set([as ? as : vgField(s, {forAs: true})]);\n        } else {\n          meas[field] = meas[field] || {};\n          meas[field][op] = new Set([as ? as : vgField(s, {forAs: true})]);\n        }\n      }\n    }\n\n    for (const s of t.groupby || []) {\n      dims.add(s);\n    }\n\n    if (dims.size + keys(meas).length === 0) {\n      return null;\n    }\n\n    return new AggregateNode(parent, dims, meas);\n  }\n\n  public merge(other: AggregateNode): boolean {\n    if (setEqual(this.dimensions, other.dimensions)) {\n      mergeMeasures(this.measures, other.measures);\n      return true;\n    } else {\n      log.debug('different dimensions, cannot merge');\n      return false;\n    }\n  }\n\n  public addDimensions(fields: string[]) {\n    fields.forEach(this.dimensions.add, this.dimensions);\n  }\n\n  public dependentFields() {\n    return new Set([...this.dimensions, ...keys(this.measures)]);\n  }\n\n  public producedFields() {\n    const out = new Set<string>();\n\n    for (const field of keys(this.measures)) {\n      for (const op of keys(this.measures[field])) {\n        const m = this.measures[field][op];\n        if (m.size === 0) {\n          out.add(`${op}_${field}`);\n        } else {\n          m.forEach(out.add, out);\n        }\n      }\n    }\n\n    return out;\n  }\n\n  public hash() {\n    return `Aggregate ${hash({dimensions: this.dimensions, measures: this.measures})}`;\n  }\n\n  public assemble(): VgAggregateTransform {\n    const ops: AggregateOp[] = [];\n    const fields: string[] = [];\n    const as: string[] = [];\n\n    for (const field of keys(this.measures)) {\n      for (const op of keys(this.measures[field])) {\n        for (const alias of this.measures[field][op]) {\n          as.push(alias);\n          ops.push(op);\n          fields.push(field === '*' ? null : replacePathInField(field));\n        }\n      }\n    }\n\n    const result: VgAggregateTransform = {\n      type: 'aggregate',\n      groupby: [...this.dimensions],\n      ops,\n      fields,\n      as\n    };\n\n    return result;\n  }\n}\n","import {AggregateOp} from 'vega';\nimport {isArray} from 'vega-util';\nimport {isBinning} from '../../bin';\nimport {COLUMN, ROW, ScaleChannel} from '../../channel';\nimport {vgField} from '../../fielddef';\nimport * as log from '../../log';\nimport {hasDiscreteDomain} from '../../scale';\nimport {DEFAULT_SORT_OP, EncodingSortField, isSortField} from '../../sort';\nimport {hash} from '../../util';\nimport {isVgRangeStep, VgData} from '../../vega.schema';\nimport {FacetModel} from '../facet';\nimport {Model} from '../model';\nimport {assembleDomain, getFieldFromDomain} from '../scale/domain';\nimport {sortArrayIndexField} from './calculate';\nimport {DataFlowNode} from './dataflow';\n\ninterface ChildIndependentFieldsWithStep {\n  x?: string;\n  y?: string;\n}\n\ninterface FacetChannelInfo {\n  name: string;\n  fields: string[];\n  sortField?: EncodingSortField<string>;\n\n  sortIndexField?: string;\n}\n\n/**\n * A node that helps us track what fields we are faceting by.\n */\nexport class FacetNode extends DataFlowNode {\n  private readonly column: FacetChannelInfo;\n\n  private readonly row: FacetChannelInfo;\n\n  private readonly childModel: Model;\n\n  /**\n   * @param model The facet model.\n   * @param name The name that this facet source will have.\n   * @param data The source data for this facet data.\n   */\n  public constructor(\n    parent: DataFlowNode,\n    public readonly model: FacetModel,\n    public readonly name: string,\n    public data: string\n  ) {\n    super(parent);\n\n    for (const channel of [COLUMN, ROW]) {\n      const fieldDef = model.facet[channel];\n      if (fieldDef) {\n        const {bin, sort} = fieldDef;\n        this[channel] = {\n          name: model.getName(`${channel}_domain`),\n          fields: [vgField(fieldDef), ...(isBinning(bin) ? [vgField(fieldDef, {binSuffix: 'end'})] : [])],\n          ...(isSortField(sort)\n            ? {sortField: sort}\n            : isArray(sort)\n            ? {sortIndexField: sortArrayIndexField(fieldDef, channel)}\n            : {})\n        };\n      }\n    }\n    this.childModel = model.child;\n  }\n\n  public hash() {\n    let out = `Facet`;\n\n    if (this.column) {\n      out += ` c:${hash(this.column)}`;\n    }\n\n    if (this.row) {\n      out += ` r:${hash(this.row)}`;\n    }\n\n    return out;\n  }\n\n  get fields() {\n    return [...((this.column && this.column.fields) || []), ...((this.row && this.row.fields) || [])];\n  }\n\n  /**\n   * The name to reference this source is its name.\n   */\n  public getSource() {\n    return this.name;\n  }\n\n  private getChildIndependentFieldsWithStep() {\n    const childIndependentFieldsWithStep: ChildIndependentFieldsWithStep = {};\n\n    for (const channel of ['x', 'y'] as ScaleChannel[]) {\n      const childScaleComponent = this.childModel.component.scales[channel];\n      if (childScaleComponent && !childScaleComponent.merged) {\n        const type = childScaleComponent.get('type');\n        const range = childScaleComponent.get('range');\n\n        if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n          const domain = assembleDomain(this.childModel, channel);\n          const field = getFieldFromDomain(domain);\n          if (field) {\n            childIndependentFieldsWithStep[channel] = field;\n          } else {\n            log.warn('Unknown field for ${channel}.  Cannot calculate view size.');\n          }\n        }\n      }\n    }\n\n    return childIndependentFieldsWithStep;\n  }\n\n  private assembleRowColumnData(\n    channel: 'row' | 'column',\n    crossedDataName: string,\n    childIndependentFieldsWithStep: ChildIndependentFieldsWithStep\n  ): VgData {\n    const childChannel = channel === 'row' ? 'y' : 'x';\n\n    const fields: string[] = [];\n    const ops: AggregateOp[] = [];\n    const as: string[] = [];\n\n    if (childIndependentFieldsWithStep[childChannel]) {\n      if (crossedDataName) {\n        // If there is a crossed data, calculate max\n        fields.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);\n\n        ops.push('max');\n      } else {\n        // If there is no crossed data, just calculate distinct\n        fields.push(childIndependentFieldsWithStep[childChannel]);\n        ops.push('distinct');\n      }\n      // Although it is technically a max, just name it distinct so it's easier to refer to it\n      as.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);\n    }\n\n    const {sortField, sortIndexField} = this[channel];\n    if (sortField) {\n      const {op = DEFAULT_SORT_OP, field} = sortField;\n      fields.push(field);\n      ops.push(op);\n      as.push(vgField(sortField, {forAs: true}));\n    } else if (sortIndexField) {\n      fields.push(sortIndexField);\n      ops.push('max');\n      as.push(sortIndexField);\n    }\n\n    return {\n      name: this[channel].name,\n      // Use data from the crossed one if it exist\n      source: crossedDataName || this.data,\n      transform: [\n        {\n          type: 'aggregate',\n          groupby: this[channel].fields,\n          ...(fields.length\n            ? {\n                fields,\n                ops,\n                as\n              }\n            : {})\n        }\n      ]\n    };\n  }\n\n  public assemble() {\n    const data: VgData[] = [];\n    let crossedDataName = null;\n    const childIndependentFieldsWithStep = this.getChildIndependentFieldsWithStep();\n\n    if (this.column && this.row && (childIndependentFieldsWithStep.x || childIndependentFieldsWithStep.y)) {\n      // Need to create a cross dataset to correctly calculate cardinality\n      crossedDataName = `cross_${this.column.name}_${this.row.name}`;\n\n      const fields: string[] = [].concat(\n        childIndependentFieldsWithStep.x || [],\n        childIndependentFieldsWithStep.y || []\n      );\n      const ops = fields.map((): AggregateOp => 'distinct');\n\n      data.push({\n        name: crossedDataName,\n        source: this.data,\n        transform: [\n          {\n            type: 'aggregate',\n            groupby: [...this.column.fields, ...this.row.fields],\n            fields,\n            ops\n          }\n        ]\n      });\n    }\n\n    for (const channel of [COLUMN, ROW]) {\n      if (this[channel]) {\n        data.push(this.assembleRowColumnData(channel, crossedDataName, childIndependentFieldsWithStep));\n      }\n    }\n\n    return data;\n  }\n}\n","import {isNumber, isString} from 'vega-util';\nimport {AncestorParse} from '.';\nimport {isMinMaxOp} from '../../aggregate';\nimport {getMainRangeChannel, SingleDefChannel} from '../../channel';\nimport {Parse} from '../../data';\nimport {DateTime, isDateTime} from '../../datetime';\nimport {isNumberFieldDef, isScaleFieldDef, isTimeFieldDef, isTypedFieldDef, TypedFieldDef} from '../../fielddef';\nimport * as log from '../../log';\nimport {forEachLeaf} from '../../logical';\nimport {isFieldEqualPredicate, isFieldOneOfPredicate, isFieldPredicate, isFieldRangePredicate} from '../../predicate';\nimport {isSortField} from '../../sort';\nimport {FilterTransform} from '../../transform';\nimport {accessPathDepth, accessPathWithDatum, duplicate, hash, keys, removePathFromField} from '../../util';\nimport {VgFormulaTransform} from '../../vega.schema';\nimport {isFacetModel, isUnitModel, Model} from '../model';\nimport {Split} from '../split';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * @param field The field.\n * @param parse What to parse the field as.\n */\nfunction parseExpression(field: string, parse: string): string {\n  const f = accessPathWithDatum(field);\n  if (parse === 'number') {\n    return `toNumber(${f})`;\n  } else if (parse === 'boolean') {\n    return `toBoolean(${f})`;\n  } else if (parse === 'string') {\n    return `toString(${f})`;\n  } else if (parse === 'date') {\n    return `toDate(${f})`;\n  } else if (parse === 'flatten') {\n    return f;\n  } else if (parse.indexOf('date:') === 0) {\n    const specifier = parse.slice(5, parse.length);\n    return `timeParse(${f},${specifier})`;\n  } else if (parse.indexOf('utc:') === 0) {\n    const specifier = parse.slice(4, parse.length);\n    return `utcParse(${f},${specifier})`;\n  } else {\n    log.warn(log.message.unrecognizedParse(parse));\n    return null;\n  }\n}\n\nexport class ParseNode extends DataFlowNode {\n  private _parse: Parse;\n\n  public clone() {\n    return new ParseNode(null, duplicate(this._parse));\n  }\n\n  constructor(parent: DataFlowNode, parse: Parse) {\n    super(parent);\n\n    this._parse = parse;\n  }\n\n  public hash() {\n    return `Parse ${hash(this._parse)}`;\n  }\n\n  /**\n   * Creates a parse node from a data.format.parse and updates ancestorParse.\n   */\n  public static makeExplicit(parent: DataFlowNode, model: Model, ancestorParse: AncestorParse) {\n    // Custom parse\n    let explicit = {};\n    const data = model.data;\n    if (data && data.format && data.format.parse) {\n      explicit = data.format.parse;\n    }\n\n    return this.makeWithAncestors(parent, explicit, {}, ancestorParse);\n  }\n\n  public static makeImplicitFromFilterTransform(\n    parent: DataFlowNode,\n    transform: FilterTransform,\n    ancestorParse: AncestorParse\n  ) {\n    const parse = {};\n    forEachLeaf(transform.filter, filter => {\n      if (isFieldPredicate(filter)) {\n        // Automatically add a parse node for filters with filter objects\n        let val: string | number | boolean | DateTime = null;\n\n        // For EqualFilter, just use the equal property.\n        // For RangeFilter and OneOfFilter, all array members should have\n        // the same type, so we only use the first one.\n        if (isFieldEqualPredicate(filter)) {\n          val = filter.equal;\n        } else if (isFieldRangePredicate(filter)) {\n          val = filter.range[0];\n        } else if (isFieldOneOfPredicate(filter)) {\n          val = (filter.oneOf || filter['in'])[0];\n        } // else -- for filter expression, we can't infer anything\n        if (val) {\n          if (isDateTime(val)) {\n            parse[filter.field] = 'date';\n          } else if (isNumber(val)) {\n            parse[filter.field] = 'number';\n          } else if (isString(val)) {\n            parse[filter.field] = 'string';\n          }\n        }\n\n        if (filter.timeUnit) {\n          parse[filter.field] = 'date';\n        }\n      }\n    });\n\n    if (keys(parse).length === 0) {\n      return null;\n    }\n\n    return this.makeWithAncestors(parent, {}, parse, ancestorParse);\n  }\n\n  /**\n   * Creates a parse node for implicit parsing from a model and updates ancestorParse.\n   */\n  public static makeImplicitFromEncoding(parent: DataFlowNode, model: Model, ancestorParse: AncestorParse) {\n    const implicit = {};\n\n    function add(fieldDef: TypedFieldDef<string>) {\n      if (isTimeFieldDef(fieldDef)) {\n        implicit[fieldDef.field] = 'date';\n      } else if (isNumberFieldDef(fieldDef) && isMinMaxOp(fieldDef.aggregate)) {\n        implicit[fieldDef.field] = 'number';\n      } else if (accessPathDepth(fieldDef.field) > 1) {\n        // For non-date/non-number (strings and booleans), derive a flattened field for a referenced nested field.\n        // (Parsing numbers / dates already flattens numeric and temporal fields.)\n        if (!(fieldDef.field in implicit)) {\n          implicit[fieldDef.field] = 'flatten';\n        }\n      } else if (isScaleFieldDef(fieldDef) && isSortField(fieldDef.sort) && accessPathDepth(fieldDef.sort.field) > 1) {\n        // Flatten fields that we sort by but that are not otherwise flattened.\n        if (!(fieldDef.sort.field in implicit)) {\n          implicit[fieldDef.sort.field] = 'flatten';\n        }\n      }\n    }\n\n    if (isUnitModel(model) || isFacetModel(model)) {\n      // Parse encoded fields\n      model.forEachFieldDef((fieldDef, channel) => {\n        if (isTypedFieldDef(fieldDef)) {\n          add(fieldDef);\n        } else {\n          const mainChannel = getMainRangeChannel(channel);\n          if (mainChannel !== channel) {\n            const mainFieldDef = model.fieldDef(mainChannel as SingleDefChannel) as TypedFieldDef<string>;\n            add({\n              ...fieldDef,\n              type: mainFieldDef.type\n            });\n          } else {\n            throw new Error(\n              `Non-secondary channel ${channel} must have type in its field definition ${JSON.stringify(fieldDef)}`\n            );\n          }\n        }\n      });\n    }\n    return this.makeWithAncestors(parent, {}, implicit, ancestorParse);\n  }\n\n  /**\n   * Creates a parse node from \"explicit\" parse and \"implicit\" parse and updates ancestorParse.\n   */\n  private static makeWithAncestors(\n    parent: DataFlowNode,\n    explicit: Parse,\n    implicit: Parse,\n    ancestorParse: AncestorParse\n  ) {\n    // We should not parse what has already been parsed in a parent (explicitly or implicitly) or what has been derived (maked as \"derived\"). We also don't need to flatten a field that has already been parsed.\n    for (const field of keys(implicit)) {\n      const parsedAs = ancestorParse.getWithExplicit(field);\n      if (parsedAs.value !== undefined) {\n        // We always ignore derived fields even if they are implicitly defined because we expect users to create the right types.\n        if (\n          parsedAs.explicit ||\n          parsedAs.value === implicit[field] ||\n          parsedAs.value === 'derived' ||\n          implicit[field] === 'flatten'\n        ) {\n          delete implicit[field];\n        } else {\n          log.warn(log.message.differentParse(field, implicit[field], parsedAs.value));\n        }\n      }\n    }\n\n    for (const field of keys(explicit)) {\n      const parsedAs = ancestorParse.get(field);\n      if (parsedAs !== undefined) {\n        // Don't parse a field again if it has been parsed with the same type already.\n        if (parsedAs === explicit[field]) {\n          delete explicit[field];\n        } else {\n          log.warn(log.message.differentParse(field, explicit[field], parsedAs));\n        }\n      }\n    }\n\n    const parse = new Split(explicit, implicit);\n\n    // add the format parse from this model so that children don't parse the same field again\n    ancestorParse.copyAll(parse);\n\n    // copy only non-null parses\n    const p = {};\n    for (const key of keys(parse.combine())) {\n      const val = parse.get(key);\n      if (val !== null) {\n        p[key] = val;\n      }\n    }\n\n    if (keys(p).length === 0 || ancestorParse.parseNothing) {\n      return null;\n    }\n\n    return new ParseNode(parent, p);\n  }\n\n  public get parse() {\n    return this._parse;\n  }\n\n  public merge(other: ParseNode) {\n    this._parse = {...this._parse, ...other.parse};\n    other.remove();\n  }\n\n  /**\n   * Assemble an object for Vega's format.parse property.\n   */\n  public assembleFormatParse() {\n    const formatParse = {};\n    for (const field of keys(this._parse)) {\n      const p = this._parse[field];\n      if (accessPathDepth(field) === 1) {\n        formatParse[field] = p;\n      }\n    }\n    return formatParse;\n  }\n\n  // format parse depends and produces all fields in its parse\n  public producedFields() {\n    return new Set(keys(this._parse));\n  }\n\n  public dependentFields() {\n    return new Set(keys(this._parse));\n  }\n\n  public assembleTransforms(onlyNested = false): VgFormulaTransform[] {\n    return keys(this._parse)\n      .filter(field => (onlyNested ? accessPathDepth(field) > 1 : true))\n      .map(field => {\n        const expr = parseExpression(field, this._parse[field]);\n        if (!expr) {\n          return null;\n        }\n\n        const formula: VgFormulaTransform = {\n          type: 'formula',\n          expr,\n          as: removePathFromField(field) // Vega output is always flattened\n        };\n        return formula;\n      })\n      .filter(t => t !== null);\n  }\n}\n","import {AggregateOp} from 'vega';\nimport {vgField} from '../../fielddef';\nimport {JoinAggregateTransform} from '../../transform';\nimport {duplicate, hash} from '../../util';\nimport {VgJoinAggregateTransform} from '../../vega.schema';\nimport {JoinAggregateFieldDef} from './../../transform';\nimport {unique} from './../../util';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * A class for the join aggregate transform nodes.\n */\nexport class JoinAggregateTransformNode extends DataFlowNode {\n  public clone() {\n    return new JoinAggregateTransformNode(null, duplicate(this.transform));\n  }\n\n  constructor(parent: DataFlowNode, private readonly transform: JoinAggregateTransform) {\n    super(parent);\n  }\n\n  public addDimensions(fields: string[]) {\n    this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n  }\n\n  public dependentFields() {\n    const out = new Set<string>();\n\n    this.transform.groupby.forEach(f => out.add(f));\n    this.transform.joinaggregate\n      .map(w => w.field)\n      .filter(f => f !== undefined)\n      .forEach(f => out.add(f));\n\n    return out;\n  }\n\n  public producedFields() {\n    return new Set(this.transform.joinaggregate.map(this.getDefaultName));\n  }\n\n  private getDefaultName(joinAggregateFieldDef: JoinAggregateFieldDef): string {\n    return joinAggregateFieldDef.as || vgField(joinAggregateFieldDef);\n  }\n\n  public hash() {\n    return `JoinAggregateTransform ${hash(this.transform)}`;\n  }\n\n  public assemble(): VgJoinAggregateTransform {\n    const fields: string[] = [];\n    const ops: AggregateOp[] = [];\n    const as: string[] = [];\n    for (const joinaggregate of this.transform.joinaggregate) {\n      ops.push(joinaggregate.op);\n      as.push(this.getDefaultName(joinaggregate));\n      fields.push(joinaggregate.field === undefined ? null : joinaggregate.field);\n    }\n\n    const groupby = this.transform.groupby;\n\n    return {\n      type: 'joinaggregate',\n      as,\n      ops,\n      fields,\n      ...(groupby !== undefined ? {groupby} : {})\n    };\n  }\n}\n","import {isArray, isString} from 'vega-util';\nimport {getTypedFieldDef, isFieldDef, TypedFieldDef, vgField} from '../../fielddef';\nimport {StackOffset} from '../../stack';\nimport {StackTransform} from '../../transform';\nimport {duplicate, getFirstDefined, hash} from '../../util';\nimport {VgComparatorOrder, VgCompare, VgTransform} from '../../vega.schema';\nimport {sortParams} from '../common';\nimport {UnitModel} from '../unit';\nimport {DataFlowNode} from './dataflow';\n\nfunction getStackByFields(model: UnitModel): string[] {\n  return model.stack.stackBy.reduce(\n    (fields, by) => {\n      const fieldDef = by.fieldDef;\n\n      const _field = vgField(fieldDef);\n      if (_field) {\n        fields.push(_field);\n      }\n      return fields;\n    },\n    [] as string[]\n  );\n}\n\nexport interface StackComponent {\n  /**\n   * Faceted field.\n   */\n  facetby: string[];\n\n  dimensionFieldDef?: TypedFieldDef<string>;\n\n  /**\n   * Stack measure's field. Used in makeFromEncoding.\n   */\n  stackField: string;\n\n  /**\n   * Level of detail fields for each level in the stacked charts such as color or detail.\n   * Used in makeFromEncoding.\n   */\n  stackby?: string[];\n\n  /**\n   * Field that determines order of levels in the stacked charts.\n   * Used in both but optional in transform.\n   */\n  sort: VgCompare;\n\n  /** Mode for stacking marks.\n   */\n  offset: StackOffset;\n\n  /**\n   * Whether to impute the data before stacking. Used only in makeFromEncoding.\n   */\n  impute?: boolean;\n\n  /**\n   * The data fields to group by.\n   */\n  groupby?: string[];\n  /**\n   * Output field names of each stack field.\n   */\n  as: string[];\n}\n\nfunction isValidAsArray(as: string[] | string): as is string[] {\n  return isArray(as) && as.every(s => isString(s)) && as.length > 1;\n}\n\nexport class StackNode extends DataFlowNode {\n  private _stack: StackComponent;\n\n  public clone() {\n    return new StackNode(null, duplicate(this._stack));\n  }\n\n  constructor(parent: DataFlowNode, stack: StackComponent) {\n    super(parent);\n\n    this._stack = stack;\n  }\n\n  public static makeFromTransform(parent: DataFlowNode, stackTransform: StackTransform) {\n    const {stack, groupby, as, offset = 'zero'} = stackTransform;\n\n    const sortFields: string[] = [];\n    const sortOrder: VgComparatorOrder[] = [];\n    if (stackTransform.sort !== undefined) {\n      for (const sortField of stackTransform.sort) {\n        sortFields.push(sortField.field);\n        sortOrder.push(getFirstDefined(sortField.order, 'ascending'));\n      }\n    }\n    const sort: VgCompare = {\n      field: sortFields,\n      order: sortOrder\n    };\n    let normalizedAs: string[];\n    if (isValidAsArray(as)) {\n      normalizedAs = as;\n    } else if (isString(as)) {\n      normalizedAs = [as, as + '_end'];\n    } else {\n      normalizedAs = [stackTransform.stack + '_start', stackTransform.stack + '_end'];\n    }\n\n    return new StackNode(parent, {\n      stackField: stack,\n      groupby,\n      offset,\n      sort,\n      facetby: [],\n      as: normalizedAs\n    });\n  }\n\n  public static makeFromEncoding(parent: DataFlowNode, model: UnitModel) {\n    const stackProperties = model.stack;\n    const {encoding} = model;\n\n    if (!stackProperties) {\n      return null;\n    }\n\n    let dimensionFieldDef: TypedFieldDef<string>;\n    if (stackProperties.groupbyChannel) {\n      const cDef = encoding[stackProperties.groupbyChannel];\n      dimensionFieldDef = getTypedFieldDef(cDef);\n    }\n\n    const stackby = getStackByFields(model);\n    const orderDef = model.encoding.order;\n\n    let sort: VgCompare;\n    if (isArray(orderDef) || isFieldDef(orderDef)) {\n      sort = sortParams(orderDef);\n    } else {\n      // default = descending by stackFields\n      // FIXME is the default here correct for binned fields?\n      sort = stackby.reduce(\n        (s, field) => {\n          s.field.push(field);\n          s.order.push('descending');\n          return s;\n        },\n        {field: [], order: []}\n      );\n    }\n\n    return new StackNode(parent, {\n      dimensionFieldDef,\n      stackField: model.vgField(stackProperties.fieldChannel),\n      facetby: [],\n      stackby,\n      sort,\n      offset: stackProperties.offset,\n      impute: stackProperties.impute,\n      as: [\n        model.vgField(stackProperties.fieldChannel, {suffix: 'start', forAs: true}),\n        model.vgField(stackProperties.fieldChannel, {suffix: 'end', forAs: true})\n      ]\n    });\n  }\n\n  get stack(): StackComponent {\n    return this._stack;\n  }\n\n  public addDimensions(fields: string[]) {\n    this._stack.facetby.push(...fields);\n  }\n\n  public dependentFields() {\n    const out = new Set<string>();\n\n    out.add(this._stack.stackField);\n\n    this.getGroupbyFields().forEach(out.add);\n    this._stack.facetby.forEach(out.add);\n    const field = this._stack.sort.field as string;\n    isArray(field) ? field.forEach(out.add) : out.add(field);\n\n    return out;\n  }\n\n  public producedFields() {\n    return new Set(this._stack.as);\n  }\n\n  public hash() {\n    return `Stack ${hash(this._stack)}`;\n  }\n\n  private getGroupbyFields() {\n    const {dimensionFieldDef, impute, groupby} = this._stack;\n    if (dimensionFieldDef) {\n      if (dimensionFieldDef.bin) {\n        if (impute) {\n          // For binned group by field with impute, we calculate bin_mid\n          // as we cannot impute two fields simultaneously\n          return [vgField(dimensionFieldDef, {binSuffix: 'mid'})];\n        }\n        return [\n          // For binned group by field without impute, we need both bin (start) and bin_end\n          vgField(dimensionFieldDef, {}),\n          vgField(dimensionFieldDef, {binSuffix: 'end'})\n        ];\n      }\n      return [vgField(dimensionFieldDef)];\n    }\n    return groupby || [];\n  }\n\n  public assemble(): VgTransform[] {\n    const transform: VgTransform[] = [];\n    const {facetby, dimensionFieldDef, stackField: field, stackby, sort, offset, impute, as} = this._stack;\n\n    // Impute\n    if (impute && dimensionFieldDef) {\n      if (dimensionFieldDef.bin) {\n        // As we can only impute one field at a time, we need to calculate\n        // mid point for a binned field\n        transform.push({\n          type: 'formula',\n          expr:\n            '(' +\n            vgField(dimensionFieldDef, {expr: 'datum'}) +\n            '+' +\n            vgField(dimensionFieldDef, {expr: 'datum', binSuffix: 'end'}) +\n            ')/2',\n          as: vgField(dimensionFieldDef, {binSuffix: 'mid', forAs: true})\n        });\n      }\n\n      transform.push({\n        type: 'impute',\n        field,\n        groupby: [...stackby, ...facetby],\n        key: vgField(dimensionFieldDef, {binSuffix: 'mid'}),\n        method: 'value',\n        value: 0\n      });\n    }\n\n    // Stack\n    transform.push({\n      type: 'stack',\n      groupby: [...this.getGroupbyFields(), ...facetby],\n      field,\n      sort,\n      as,\n      offset\n    });\n\n    return transform;\n  }\n}\n","import {AggregateOp} from 'vega';\nimport {isAggregateOp} from '../../aggregate';\nimport {vgField} from '../../fielddef';\nimport {WindowFieldDef, WindowOnlyOp, WindowTransform} from '../../transform';\nimport {duplicate, hash} from '../../util';\nimport {VgComparator, VgComparatorOrder, VgJoinAggregateTransform, VgWindowTransform} from '../../vega.schema';\nimport {unique} from './../../util';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * A class for the window transform nodes\n */\nexport class WindowTransformNode extends DataFlowNode {\n  public clone() {\n    return new WindowTransformNode(null, duplicate(this.transform));\n  }\n\n  constructor(parent: DataFlowNode, private readonly transform: WindowTransform) {\n    super(parent);\n  }\n\n  public addDimensions(fields: string[]) {\n    this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n  }\n\n  public dependentFields() {\n    const out = new Set<string>();\n\n    this.transform.groupby.forEach(f => out.add(f));\n    this.transform.sort.forEach(m => out.add(m.field));\n    this.transform.window\n      .map(w => w.field)\n      .filter(f => f !== undefined)\n      .forEach(f => out.add(f));\n\n    return out;\n  }\n\n  public producedFields() {\n    return new Set(this.transform.window.map(this.getDefaultName));\n  }\n\n  private getDefaultName(windowFieldDef: WindowFieldDef): string {\n    return windowFieldDef.as || vgField(windowFieldDef);\n  }\n\n  public hash() {\n    return `WindowTransform ${hash(this.transform)}`;\n  }\n\n  public assemble(): VgWindowTransform | VgJoinAggregateTransform {\n    const fields: string[] = [];\n    const ops: (AggregateOp | WindowOnlyOp)[] = [];\n    const as: string[] = [];\n    const params = [];\n    for (const window of this.transform.window) {\n      ops.push(window.op);\n      as.push(this.getDefaultName(window));\n      params.push(window.param === undefined ? null : window.param);\n      fields.push(window.field === undefined ? null : window.field);\n    }\n\n    const frame = this.transform.frame;\n    const groupby = this.transform.groupby;\n\n    if (frame && frame[0] === null && frame[1] === null && ops.every(o => isAggregateOp(o))) {\n      // when the window does not rely on any particular window ops or frame, switch to a simpler and more efficient joinaggregate\n      return {\n        type: 'joinaggregate',\n        as,\n        ops: ops as AggregateOp[],\n        fields,\n        ...(groupby !== undefined ? {groupby} : {})\n      } as VgJoinAggregateTransform;\n    }\n\n    const sortFields: string[] = [];\n    const sortOrder: VgComparatorOrder[] = [];\n    if (this.transform.sort !== undefined) {\n      for (const sortField of this.transform.sort) {\n        sortFields.push(sortField.field);\n        sortOrder.push(sortField.order || 'ascending');\n      }\n    }\n    const sort: VgComparator = {\n      field: sortFields,\n      order: sortOrder\n    };\n    const ignorePeers = this.transform.ignorePeers;\n\n    return {\n      type: 'window',\n      params,\n      as,\n      ops,\n      fields,\n      sort,\n      ...(ignorePeers !== undefined ? {ignorePeers} : {}),\n      ...(groupby !== undefined ? {groupby} : {}),\n      ...(frame !== undefined ? {frame} : {})\n    } as VgWindowTransform;\n  }\n}\n","import {MAIN} from '../../data';\nimport {Dict, fieldIntersection, flatten, hash, hasIntersection, keys} from '../../util';\nimport {AggregateNode} from './aggregate';\nimport {DataFlowNode, OutputNode} from './dataflow';\nimport {FacetNode} from './facet';\nimport {ParseNode} from './formatparse';\nimport {JoinAggregateTransformNode} from './joinaggregate';\nimport {FACET_SCALE_PREFIX} from './optimize';\nimport {BottomUpOptimizer, TopDownOptimizer} from './optimizer';\nimport * as optimizers from './optimizers';\nimport {SourceNode} from './source';\nimport {StackNode} from './stack';\nimport {TimeUnitNode} from './timeunit';\nimport {WindowTransformNode} from './window';\n\nexport interface OptimizerFlags {\n  /**\n   * If true, iteration continues\n   */\n  continueFlag: boolean;\n  /**\n   * If true, the tree has been mutated by the function\n   */\n  mutatedFlag: boolean;\n}\n\n/**\n * Start optimization path at the leaves. Useful for merging up or removing things.\n *\n * If the callback returns true, the recursion continues.\n */\nexport function iterateFromLeaves(f: (node: DataFlowNode) => OptimizerFlags) {\n  function optimizeNextFromLeaves(node: DataFlowNode): boolean {\n    if (node instanceof SourceNode) {\n      return false;\n    }\n\n    const next = node.parent;\n    const {continueFlag, mutatedFlag} = f(node);\n    let childFlag = false;\n    if (continueFlag) {\n      childFlag = optimizeNextFromLeaves(next);\n    }\n    return mutatedFlag || childFlag;\n  }\n\n  return optimizeNextFromLeaves;\n}\n\n/**\n * Move parse nodes up to forks.\n */\nexport class MoveParseUp extends BottomUpOptimizer {\n  public run(node: DataFlowNode): OptimizerFlags {\n    const parent = node.parent;\n    // move parse up by merging or swapping\n    if (node instanceof ParseNode) {\n      if (parent instanceof SourceNode) {\n        return this.flags;\n      }\n\n      if (parent.numChildren() > 1) {\n        // don't move parse further up but continue with parent.\n        this.setContinue();\n        return this.flags;\n      }\n\n      if (parent instanceof ParseNode) {\n        this.setMutated();\n        parent.merge(node);\n      } else {\n        // don't swap with nodes that produce something that the parse node depends on (e.g. lookup)\n        if (fieldIntersection(parent.producedFields(), node.dependentFields())) {\n          this.setContinue();\n          return this.flags;\n        }\n        this.setMutated();\n        node.swapWithParent();\n      }\n    }\n    this.setContinue();\n    return this.flags;\n  }\n}\n\n/**\n * Merge identical nodes at forks by comparing hashes.\n *\n * Does not need to iterate from leaves so we implement this with recursion as it's a bit simpler.\n */\nexport class MergeIdenticalNodes extends TopDownOptimizer {\n  public mergeNodes(parent: DataFlowNode, nodes: DataFlowNode[]) {\n    const mergedNode = nodes.shift();\n    for (const node of nodes) {\n      parent.removeChild(node);\n      node.parent = mergedNode;\n      node.remove();\n    }\n  }\n\n  public run(node: DataFlowNode): boolean {\n    const hashes = node.children.map(x => x.hash());\n    const buckets: {hash?: DataFlowNode[]} = {};\n\n    for (let i = 0; i < hashes.length; i++) {\n      if (buckets[hashes[i]] === undefined) {\n        buckets[hashes[i]] = [node.children[i]];\n      } else {\n        buckets[hashes[i]].push(node.children[i]);\n      }\n    }\n\n    for (const k of keys(buckets)) {\n      if (buckets[k].length > 1) {\n        this.setMutated();\n        this.mergeNodes(node, buckets[k]);\n      }\n    }\n    for (const child of node.children) {\n      this.run(child);\n    }\n    return this.mutatedFlag;\n  }\n}\n\n/**\n * Repeatedly remove leaf nodes that are not output or facet nodes.\n * The reason is that we don't need subtrees that don't have any output nodes.\n * Facet nodes are needed for the row or column domains.\n */\nexport class RemoveUnusedSubtrees extends BottomUpOptimizer {\n  public run(node: DataFlowNode): OptimizerFlags {\n    if (node instanceof OutputNode || node.numChildren() > 0 || node instanceof FacetNode) {\n      // no need to continue with parent because it is output node or will have children (there was a fork)\n      return this.flags;\n    } else {\n      this.setMutated();\n      node.remove();\n    }\n    return this.flags;\n  }\n}\n\n/**\n * Removes duplicate time unit nodes (as determined by the name of the\n * output field) that may be generated due to selections projected over\n * time units.\n */\n\nexport class RemoveDuplicateTimeUnits extends BottomUpOptimizer {\n  private fields = new Set<string>();\n  public run(node: DataFlowNode): OptimizerFlags {\n    this.setContinue();\n    if (node instanceof TimeUnitNode) {\n      const pfields = node.producedFields();\n      if (hasIntersection(pfields, this.fields)) {\n        this.setMutated();\n        node.remove();\n      } else {\n        this.fields = new Set([...this.fields, ...pfields]);\n      }\n    }\n    return this.flags;\n  }\n}\n\n/**\n * Clones the subtree and ignores output nodes except for the leaves, which are renamed.\n */\nfunction cloneSubtree(facet: FacetNode) {\n  function clone(node: DataFlowNode): DataFlowNode[] {\n    if (!(node instanceof FacetNode)) {\n      const copy = node.clone();\n\n      if (copy instanceof OutputNode) {\n        const newName = FACET_SCALE_PREFIX + copy.getSource();\n        copy.setSource(newName);\n\n        facet.model.component.data.outputNodes[newName] = copy;\n      } else if (\n        copy instanceof AggregateNode ||\n        copy instanceof StackNode ||\n        copy instanceof WindowTransformNode ||\n        copy instanceof JoinAggregateTransformNode\n      ) {\n        copy.addDimensions(facet.fields);\n      }\n      flatten(node.children.map(clone)).forEach((n: DataFlowNode) => (n.parent = copy));\n\n      return [copy];\n    }\n\n    return flatten(node.children.map(clone));\n  }\n  return clone;\n}\n\n/**\n * Move facet nodes down to the next fork or output node. Also pull the main output with the facet node.\n * After moving down the facet node, make a copy of the subtree and make it a child of the main output.\n */\nexport function moveFacetDown(node: DataFlowNode) {\n  if (node instanceof FacetNode) {\n    if (node.numChildren() === 1 && !(node.children[0] instanceof OutputNode)) {\n      // move down until we hit a fork or output node\n      const child = node.children[0];\n\n      if (\n        child instanceof AggregateNode ||\n        child instanceof StackNode ||\n        child instanceof WindowTransformNode ||\n        child instanceof JoinAggregateTransformNode\n      ) {\n        child.addDimensions(node.fields);\n      }\n\n      child.swapWithParent();\n      moveFacetDown(node);\n    } else {\n      // move main to facet\n\n      const facetMain = node.model.component.data.main;\n      moveMainDownToFacet(facetMain);\n\n      // replicate the subtree and place it before the facet's main node\n      const cloner = cloneSubtree(node);\n      const copy: DataFlowNode[] = flatten(node.children.map(cloner));\n      for (const c of copy) {\n        c.parent = facetMain;\n      }\n    }\n  } else {\n    node.children.map(moveFacetDown);\n  }\n}\n\nfunction moveMainDownToFacet(node: DataFlowNode) {\n  if (node instanceof OutputNode && node.type === MAIN) {\n    if (node.numChildren() === 1) {\n      const child = node.children[0];\n      if (!(child instanceof FacetNode)) {\n        child.swapWithParent();\n        moveMainDownToFacet(node);\n      }\n    }\n  }\n}\n\n/**\n * Remove nodes that are not required starting from a root.\n */\nexport class RemoveUnnecessaryNodes extends TopDownOptimizer {\n  public run(node: DataFlowNode): boolean {\n    // remove output nodes that are not required\n    if (node instanceof OutputNode && !node.isRequired()) {\n      this.setMutated();\n      node.remove();\n    }\n    for (const child of node.children) {\n      this.run(child);\n    }\n\n    return this.mutatedFlag;\n  }\n}\n\n/**\n * Inserts an Intermediate ParseNode containing all non-conflicting Parse fields and removes the empty ParseNodes\n */\nexport class MergeParse extends BottomUpOptimizer {\n  public run(node: DataFlowNode): optimizers.OptimizerFlags {\n    const parent = node.parent;\n    const parseChildren = parent.children.filter((x): x is ParseNode => x instanceof ParseNode);\n\n    if (parseChildren.length > 1) {\n      const commonParse = {};\n      for (const parseNode of parseChildren) {\n        const parse = parseNode.parse;\n        for (const k of keys(parse)) {\n          if (commonParse[k] === undefined) {\n            commonParse[k] = parse[k];\n          } else if (commonParse[k] !== parse[k]) {\n            delete commonParse[k];\n          }\n        }\n      }\n      if (keys(commonParse).length !== 0) {\n        this.setMutated();\n        const mergedParseNode = new ParseNode(parent, commonParse);\n        for (const parseNode of parseChildren) {\n          for (const key of keys(commonParse)) {\n            delete parseNode.parse[key];\n          }\n          parent.removeChild(parseNode);\n          parseNode.parent = mergedParseNode;\n          if (keys(parseNode.parse).length === 0) {\n            parseNode.remove();\n          }\n        }\n      }\n    }\n    this.setContinue();\n    return this.flags;\n  }\n}\n\nexport class MergeAggregateNodes extends BottomUpOptimizer {\n  public run(node: DataFlowNode): optimizers.OptimizerFlags {\n    const parent = node.parent;\n    const aggChildren = parent.children.filter((x): x is AggregateNode => x instanceof AggregateNode);\n\n    // Object which we'll use to map the fields which an aggregate is grouped by to\n    // the set of aggregates with that grouping. This is useful as only aggregates\n    // with the same group by can be merged\n    const groupedAggregates: Dict<AggregateNode[]> = {};\n\n    // Build groupedAggregates\n    for (const agg of aggChildren) {\n      const groupBys = hash(keys(agg.groupBy).sort());\n      if (!(groupBys in groupedAggregates)) {\n        groupedAggregates[groupBys] = [];\n      }\n      groupedAggregates[groupBys].push(agg);\n    }\n\n    // Merge aggregateNodes with same key in groupedAggregates\n    for (const group of keys(groupedAggregates)) {\n      const mergeableAggs = groupedAggregates[group];\n      if (mergeableAggs.length > 1) {\n        const mergedAggs = mergeableAggs.pop();\n        for (const agg of mergeableAggs) {\n          if (mergedAggs.merge(agg)) {\n            parent.removeChild(agg);\n            agg.parent = mergedAggs;\n            agg.remove();\n\n            this.setMutated();\n          }\n        }\n      }\n    }\n    this.setContinue();\n    return this.flags;\n  }\n}\n","import * as log from '../../log';\nimport {DataFlowNode} from './dataflow';\nimport {checkLinks} from './debug';\nimport {DataComponent} from './index';\nimport {BottomUpOptimizer, TopDownOptimizer} from './optimizer';\nimport * as optimizers from './optimizers';\n\nexport const FACET_SCALE_PREFIX = 'scale_';\nexport const MAX_OPTIMIZATION_RUNS = 5;\n\n/**\n * Return all leaf nodes.\n */\nfunction getLeaves(roots: DataFlowNode[]) {\n  const leaves: DataFlowNode[] = [];\n  function append(node: DataFlowNode) {\n    if (node.numChildren() === 0) {\n      leaves.push(node);\n    } else {\n      node.children.forEach(append);\n    }\n  }\n\n  roots.forEach(append);\n  return leaves;\n}\n\nexport function isTrue(x: boolean) {\n  return x;\n}\n\n/**\n * Run the specified optimizer on the provided nodes.\n *\n * @param optimizer The optimizer to run.\n * @param nodes A set of nodes to optimize.\n * @param flag Flag that will be or'ed with return valued from optimization calls to the nodes.\n */\nfunction runOptimizer(\n  optimizer: typeof BottomUpOptimizer | typeof TopDownOptimizer,\n  nodes: DataFlowNode[],\n  flag: boolean\n) {\n  const flags = nodes.map(node => {\n    const optimizerInstance = new optimizer();\n    if (optimizerInstance instanceof BottomUpOptimizer) {\n      return optimizerInstance.optimizeNextFromLeaves(node);\n    } else {\n      return optimizerInstance.run(node);\n    }\n  });\n  return flags.some(isTrue) || flag;\n}\n\nfunction optimizationDataflowHelper(dataComponent: DataComponent) {\n  let roots = dataComponent.sources;\n  let mutatedFlag = false;\n\n  // mutatedFlag should always be on the right side otherwise short circuit logic might cause the mutating method to not execute\n  mutatedFlag = runOptimizer(optimizers.RemoveUnnecessaryNodes, roots, mutatedFlag);\n\n  // remove source nodes that don't have any children because they also don't have output nodes\n  roots = roots.filter(r => r.numChildren() > 0);\n\n  mutatedFlag = runOptimizer(optimizers.RemoveUnusedSubtrees, getLeaves(roots), mutatedFlag);\n\n  roots = roots.filter(r => r.numChildren() > 0);\n\n  mutatedFlag = runOptimizer(optimizers.MoveParseUp, getLeaves(roots), mutatedFlag);\n\n  mutatedFlag = runOptimizer(optimizers.RemoveDuplicateTimeUnits, getLeaves(roots), mutatedFlag);\n\n  mutatedFlag = runOptimizer(optimizers.MergeParse, getLeaves(roots), mutatedFlag);\n\n  mutatedFlag = runOptimizer(optimizers.MergeAggregateNodes, getLeaves(roots), mutatedFlag);\n\n  mutatedFlag = runOptimizer(optimizers.MergeIdenticalNodes, roots, mutatedFlag);\n\n  dataComponent.sources = roots;\n\n  return mutatedFlag;\n}\n\n/**\n * Optimizes the dataflow of the passed in data component.\n */\nexport function optimizeDataflow(data: DataComponent) {\n  // check before optimizations\n  checkLinks(data.sources);\n\n  let firstPassCounter = 0;\n  let secondPassCounter = 0;\n\n  for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {\n    if (!optimizationDataflowHelper(data)) {\n      break;\n    }\n    firstPassCounter++;\n  }\n\n  // move facets down and make a copy of the subtree so that we can have scales at the top level\n  data.sources.map(optimizers.moveFacetDown);\n\n  for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {\n    if (!optimizationDataflowHelper(data)) {\n      break;\n    }\n    secondPassCounter++;\n  }\n\n  // check after optimizations\n  checkLinks(data.sources);\n\n  if (Math.max(firstPassCounter, secondPassCounter) === MAX_OPTIMIZATION_RUNS) {\n    log.warn(`Maximum optimization runs(${MAX_OPTIMIZATION_RUNS}) reached.`);\n  }\n}\n","import {AggregateOp} from 'vega';\nimport {isObject, isString} from 'vega-util';\nimport {SHARED_DOMAIN_OP_INDEX} from '../../aggregate';\nimport {isBinning} from '../../bin';\nimport {isScaleChannel, ScaleChannel} from '../../channel';\nimport {MAIN, RAW} from '../../data';\nimport {DateTime} from '../../datetime';\nimport {binRequiresRange, ScaleFieldDef, TypedFieldDef, valueExpr, vgField} from '../../fielddef';\nimport * as log from '../../log';\nimport {Domain, hasDiscreteDomain, isSelectionDomain, ScaleConfig, ScaleType} from '../../scale';\nimport {DEFAULT_SORT_OP, EncodingSortField, isSortArray, isSortByEncoding, isSortField} from '../../sort';\nimport {TimeUnit} from '../../timeunit';\nimport {Type} from '../../type';\nimport * as util from '../../util';\nimport {\n  isDataRefDomain,\n  isDataRefUnionedDomain,\n  isFieldRefUnionDomain,\n  VgDataRef,\n  VgDomain,\n  VgFieldRefUnionDomain,\n  VgNonUnionDomain,\n  VgSortField,\n  VgUnionSortField\n} from '../../vega.schema';\nimport {sortArrayIndexField} from '../data/calculate';\nimport {FACET_SCALE_PREFIX} from '../data/optimize';\nimport {isFacetModel, isUnitModel, Model} from '../model';\nimport {SELECTION_DOMAIN} from '../selection/selection';\nimport {UnitModel} from '../unit';\nimport {ScaleComponentIndex} from './component';\n\nexport function parseScaleDomain(model: Model) {\n  if (isUnitModel(model)) {\n    parseUnitScaleDomain(model);\n  } else {\n    parseNonUnitScaleDomain(model);\n  }\n}\n\nfunction parseUnitScaleDomain(model: UnitModel) {\n  const scales = model.specifiedScales;\n  const localScaleComponents: ScaleComponentIndex = model.component.scales;\n\n  util.keys(localScaleComponents).forEach((channel: ScaleChannel) => {\n    const specifiedScale = scales[channel];\n    const specifiedDomain = specifiedScale ? specifiedScale.domain : undefined;\n\n    const domains = parseDomainForChannel(model, channel);\n    const localScaleCmpt = localScaleComponents[channel];\n    localScaleCmpt.domains = domains;\n\n    if (isSelectionDomain(specifiedDomain)) {\n      // As scale parsing occurs before selection parsing, we use a temporary\n      // signal here and append the scale.domain definition. This is replaced\n      // with the correct domainRaw signal during scale assembly.\n      // For more information, see isRawSelectionDomain in selection.ts.\n\n      // FIXME: replace this with a special property in the scaleComponent\n      localScaleCmpt.set(\n        'domainRaw',\n        {\n          signal: SELECTION_DOMAIN + util.hash(specifiedDomain)\n        },\n        true\n      );\n    }\n\n    if (model.component.data.isFaceted) {\n      // get resolve from closest facet parent as this decides whether we need to refer to cloned subtree or not\n      let facetParent: Model = model;\n      while (!isFacetModel(facetParent) && facetParent.parent) {\n        facetParent = facetParent.parent;\n      }\n\n      const resolve = facetParent.component.resolve.scale[channel];\n\n      if (resolve === 'shared') {\n        for (const domain of domains) {\n          // Replace the scale domain with data output from a cloned subtree after the facet.\n          if (isDataRefDomain(domain)) {\n            // use data from cloned subtree (which is the same as data but with a prefix added once)\n            domain.data = FACET_SCALE_PREFIX + domain.data.replace(FACET_SCALE_PREFIX, '');\n          }\n        }\n      }\n    }\n  });\n}\n\nfunction parseNonUnitScaleDomain(model: Model) {\n  for (const child of model.children) {\n    parseScaleDomain(child);\n  }\n\n  const localScaleComponents: ScaleComponentIndex = model.component.scales;\n\n  util.keys(localScaleComponents).forEach((channel: ScaleChannel) => {\n    let domains: VgNonUnionDomain[];\n    let domainRaw = null;\n\n    for (const child of model.children) {\n      const childComponent = child.component.scales[channel];\n      if (childComponent) {\n        if (domains === undefined) {\n          domains = childComponent.domains;\n        } else {\n          domains = domains.concat(childComponent.domains);\n        }\n\n        const dr = childComponent.get('domainRaw');\n        if (domainRaw && dr && domainRaw.signal !== dr.signal) {\n          log.warn('The same selection must be used to override scale domains in a layered view.');\n        }\n        domainRaw = dr;\n      }\n    }\n\n    localScaleComponents[channel].domains = domains;\n\n    if (domainRaw) {\n      localScaleComponents[channel].set('domainRaw', domainRaw, true);\n    }\n  });\n}\n\n/**\n * Remove unaggregated domain if it is not applicable\n * Add unaggregated domain if domain is not specified and config.scale.useUnaggregatedDomain is true.\n */\nfunction normalizeUnaggregatedDomain(\n  domain: Domain,\n  fieldDef: TypedFieldDef<string>,\n  scaleType: ScaleType,\n  scaleConfig: ScaleConfig\n) {\n  if (domain === 'unaggregated') {\n    const {valid, reason} = canUseUnaggregatedDomain(fieldDef, scaleType);\n    if (!valid) {\n      log.warn(reason);\n      return undefined;\n    }\n  } else if (domain === undefined && scaleConfig.useUnaggregatedDomain) {\n    // Apply config if domain is not specified.\n    const {valid} = canUseUnaggregatedDomain(fieldDef, scaleType);\n    if (valid) {\n      return 'unaggregated';\n    }\n  }\n\n  return domain;\n}\n\nexport function parseDomainForChannel(model: UnitModel, channel: ScaleChannel): VgNonUnionDomain[] {\n  const scaleType = model.getScaleComponent(channel).get('type');\n\n  const domain = normalizeUnaggregatedDomain(\n    model.scaleDomain(channel),\n    model.fieldDef(channel),\n    scaleType,\n    model.config.scale\n  );\n  if (domain !== model.scaleDomain(channel)) {\n    model.specifiedScales[channel] = {\n      ...model.specifiedScales[channel],\n      domain\n    };\n  }\n\n  // If channel is either X or Y then union them with X2 & Y2 if they exist\n  if (channel === 'x' && model.channelHasField('x2')) {\n    if (model.channelHasField('x')) {\n      return parseSingleChannelDomain(scaleType, domain, model, 'x').concat(\n        parseSingleChannelDomain(scaleType, domain, model, 'x2')\n      );\n    } else {\n      return parseSingleChannelDomain(scaleType, domain, model, 'x2');\n    }\n  } else if (channel === 'y' && model.channelHasField('y2')) {\n    if (model.channelHasField('y')) {\n      return parseSingleChannelDomain(scaleType, domain, model, 'y').concat(\n        parseSingleChannelDomain(scaleType, domain, model, 'y2')\n      );\n    } else {\n      return parseSingleChannelDomain(scaleType, domain, model, 'y2');\n    }\n  }\n  return parseSingleChannelDomain(scaleType, domain, model, channel);\n}\n\nfunction mapDomainToDataSignal<T>(domain: T[], type: Type, timeUnit: TimeUnit) {\n  return domain.map(v => {\n    const data = valueExpr(v, {timeUnit, type});\n    return {signal: `{data: ${data}}`};\n  });\n}\n\nfunction parseSingleChannelDomain(\n  scaleType: ScaleType,\n  domain: Domain,\n  model: UnitModel,\n  channel: ScaleChannel | 'x2' | 'y2'\n): VgNonUnionDomain[] {\n  const fieldDef = model.fieldDef(channel);\n\n  if (domain && domain !== 'unaggregated' && !isSelectionDomain(domain)) {\n    // explicit value\n    const {type, timeUnit} = fieldDef;\n    if (type === 'temporal' || timeUnit) {\n      return mapDomainToDataSignal<number | string | boolean | DateTime>(domain, type, timeUnit);\n    }\n\n    return [domain];\n  }\n\n  const stack = model.stack;\n  if (stack && channel === stack.fieldChannel) {\n    if (stack.offset === 'normalize') {\n      return [[0, 1]];\n    }\n\n    const data = model.requestDataName(MAIN);\n    return [\n      {\n        data,\n        field: model.vgField(channel, {suffix: 'start'})\n      },\n      {\n        data,\n        field: model.vgField(channel, {suffix: 'end'})\n      }\n    ];\n  }\n\n  const sort: undefined | true | VgSortField = isScaleChannel(channel)\n    ? domainSort(model, channel, scaleType)\n    : undefined;\n\n  if (domain === 'unaggregated') {\n    const data = model.requestDataName(MAIN);\n    const {field} = fieldDef;\n    return [\n      {\n        data,\n        field: vgField({field, aggregate: 'min'})\n      },\n      {\n        data,\n        field: vgField({field, aggregate: 'max'})\n      }\n    ];\n  } else if (isBinning(fieldDef.bin)) {\n    if (hasDiscreteDomain(scaleType)) {\n      if (scaleType === 'bin-ordinal') {\n        // we can omit the domain as it is inferred from the `bins` property\n        return [];\n      }\n\n      // ordinal bin scale takes domain from bin_range, ordered by bin start\n      // This is useful for both axis-based scale (x/y) and legend-based scale (other channels).\n      return [\n        {\n          // If sort by aggregation of a specified sort field, we need to use RAW table,\n          // so we can aggregate values for the scale independently from the main aggregation.\n          data: util.isBoolean(sort) ? model.requestDataName(MAIN) : model.requestDataName(RAW),\n          // Use range if we added it and the scale does not support computing a range as a signal.\n          field: model.vgField(channel, binRequiresRange(fieldDef, channel) ? {binSuffix: 'range'} : {}),\n          // we have to use a sort object if sort = true to make the sort correct by bin start\n          sort:\n            sort === true || !isObject(sort)\n              ? {\n                  field: model.vgField(channel, {}),\n                  op: 'min' // min or max doesn't matter since we sort by the start of the bin range\n                }\n              : sort\n        }\n      ];\n    } else {\n      // continuous scales\n      if (isBinning(fieldDef.bin)) {\n        const signalName = model.getName(vgField(fieldDef, {suffix: 'bins'}));\n        return [{signal: `[${signalName}.start, ${signalName}.stop]`}];\n      } else {\n        return [\n          {\n            data: model.requestDataName(MAIN),\n            field: model.vgField(channel, {})\n          }\n        ];\n      }\n    }\n  } else if (sort) {\n    return [\n      {\n        // If sort by aggregation of a specified sort field, we need to use RAW table,\n        // so we can aggregate values for the scale independently from the main aggregation.\n        data: util.isBoolean(sort) ? model.requestDataName(MAIN) : model.requestDataName(RAW),\n        field: model.vgField(channel),\n        sort: sort\n      }\n    ];\n  } else {\n    return [\n      {\n        data: model.requestDataName(MAIN),\n        field: model.vgField(channel)\n      }\n    ];\n  }\n}\n\nfunction normalizeSortField(sort: EncodingSortField<string>, isStacked: boolean) {\n  const {op, field, order} = sort;\n  return {\n    // Apply default op\n    op: op || (isStacked ? 'sum' : DEFAULT_SORT_OP),\n    // flatten nested fields\n    ...(field ? {field: util.replacePathInField(field)} : {}),\n\n    ...(order ? {order} : {})\n  };\n}\n\nexport function domainSort(\n  model: UnitModel,\n  channel: ScaleChannel,\n  scaleType: ScaleType\n): undefined | true | VgSortField {\n  if (!hasDiscreteDomain(scaleType)) {\n    return undefined;\n  }\n\n  // save to cast as the only exception is the geojson type for shape, which would not generate a scale\n  const fieldDef = model.fieldDef(channel) as ScaleFieldDef<string>;\n  const sort = fieldDef.sort;\n\n  // if the sort is specified with array, use the derived sort index field\n  if (isSortArray(sort)) {\n    return {\n      op: 'min',\n      field: sortArrayIndexField(fieldDef, channel),\n      order: 'ascending'\n    };\n  }\n\n  const isStacked = model.stack !== null;\n  // Sorted based on an aggregate calculation over a specified sort field (only for ordinal scale)\n  if (isSortField(sort)) {\n    return normalizeSortField(sort, isStacked);\n  } else if (isSortByEncoding(sort)) {\n    const {encoding, order} = sort;\n    const {aggregate, field} = model.fieldDef(encoding);\n    const sortField: EncodingSortField<string> = {\n      op: aggregate as AggregateOp, // Once we decouple aggregate from aggregate op we won't have to cast here\n      field,\n      order\n    };\n    return normalizeSortField(sortField, isStacked);\n  } else if (sort === 'descending') {\n    return {\n      op: 'min',\n      field: model.vgField(channel),\n      order: 'descending'\n    };\n  } else if (util.contains(['ascending', undefined /* default =ascending*/], sort)) {\n    return true;\n  }\n\n  // sort == null\n  return undefined;\n}\n\n/**\n * Determine if a scale can use unaggregated domain.\n * @return {Boolean} Returns true if all of the following conditions apply:\n * 1. `scale.domain` is `unaggregated`\n * 2. Aggregation function is not `count` or `sum`\n * 3. The scale is quantitative or time scale.\n */\nexport function canUseUnaggregatedDomain(\n  fieldDef: TypedFieldDef<string>,\n  scaleType: ScaleType\n): {valid: boolean; reason?: string} {\n  if (!fieldDef.aggregate) {\n    return {\n      valid: false,\n      reason: log.message.unaggregateDomainHasNoEffectForRawField(fieldDef)\n    };\n  }\n\n  if (!SHARED_DOMAIN_OP_INDEX[fieldDef.aggregate]) {\n    return {\n      valid: false,\n      reason: log.message.unaggregateDomainWithNonSharedDomainOp(fieldDef.aggregate)\n    };\n  }\n\n  if (fieldDef.type === 'quantitative') {\n    if (scaleType === 'log') {\n      return {\n        valid: false,\n        reason: log.message.unaggregatedDomainWithLogScale(fieldDef)\n      };\n    }\n  }\n\n  return {valid: true};\n}\n\n/**\n * Converts an array of domains to a single Vega scale domain.\n */\nexport function mergeDomains(domains: VgNonUnionDomain[]): VgDomain {\n  const uniqueDomains = util.unique(\n    domains.map(domain => {\n      // ignore sort property when computing the unique domains\n      if (isDataRefDomain(domain)) {\n        const {sort: _s, ...domainWithoutSort} = domain;\n        return domainWithoutSort;\n      }\n      return domain;\n    }),\n    util.hash\n  );\n\n  const sorts: VgSortField[] = util.unique(\n    domains\n      .map(d => {\n        if (isDataRefDomain(d)) {\n          const s = d.sort;\n          if (s !== undefined && !util.isBoolean(s)) {\n            if (s.op === 'count') {\n              // let's make sure that if op is count, we don't use a field\n              delete s.field;\n            }\n            if (s.order === 'ascending') {\n              // drop order: ascending as it is the default\n              delete s.order;\n            }\n          }\n          return s;\n        }\n        return undefined;\n      })\n      .filter(s => s !== undefined),\n    util.hash\n  );\n\n  if (uniqueDomains.length === 0) {\n    return undefined;\n  } else if (uniqueDomains.length === 1) {\n    const domain = domains[0];\n    if (isDataRefDomain(domain) && sorts.length > 0) {\n      let sort = sorts[0];\n      if (sorts.length > 1) {\n        log.warn(log.message.MORE_THAN_ONE_SORT);\n        sort = true;\n      }\n      return {\n        ...domain,\n        sort\n      };\n    }\n    return domain;\n  }\n\n  // only keep simple sort properties that work with unioned domains\n  const simpleSorts = util.unique(\n    sorts.map(s => {\n      if (util.isBoolean(s)) {\n        return s;\n      }\n      if (s.op === 'count') {\n        return s;\n      }\n      log.warn(log.message.domainSortDropped(s));\n      return true;\n    }),\n    util.hash\n  ) as VgUnionSortField[];\n\n  let sort: VgUnionSortField;\n\n  if (simpleSorts.length === 1) {\n    sort = simpleSorts[0];\n  } else if (simpleSorts.length > 1) {\n    log.warn(log.message.MORE_THAN_ONE_SORT);\n    sort = true;\n  }\n\n  const allData = util.unique(\n    domains.map(d => {\n      if (isDataRefDomain(d)) {\n        return d.data;\n      }\n      return null;\n    }),\n    x => x\n  );\n\n  if (allData.length === 1 && allData[0] !== null) {\n    // create a union domain of different fields with a single data source\n    const domain: VgFieldRefUnionDomain = {\n      data: allData[0],\n      fields: uniqueDomains.map(d => (d as VgDataRef).field),\n      ...(sort ? {sort} : {})\n    };\n\n    return domain;\n  }\n\n  return {fields: uniqueDomains, ...(sort ? {sort} : {})};\n}\n\n/**\n * Return a field if a scale single field.\n * Return `undefined` otherwise.\n *\n */\nexport function getFieldFromDomain(domain: VgDomain): string {\n  if (isDataRefDomain(domain) && isString(domain.field)) {\n    return domain.field;\n  } else if (isDataRefUnionedDomain(domain)) {\n    let field;\n    for (const nonUnionDomain of domain.fields) {\n      if (isDataRefDomain(nonUnionDomain) && isString(nonUnionDomain.field)) {\n        if (!field) {\n          field = nonUnionDomain.field;\n        } else if (field !== nonUnionDomain.field) {\n          log.warn(\n            'Detected faceted independent scales that union domain of multiple fields from different data sources.  We will use the first field.  The result view size may be incorrect.'\n          );\n          return field;\n        }\n      }\n    }\n    log.warn(\n      'Detected faceted independent scales that union domain of identical fields from different source detected.  We will assume that this is the same field from a different fork of the same data source.  However, if this is not case, the result view size maybe incorrect.'\n    );\n    return field;\n  } else if (isFieldRefUnionDomain(domain)) {\n    log.warn(\n      'Detected faceted independent scales that union domain of multiple fields from the same data source.  We will use the first field.  The result view size may be incorrect.'\n    );\n    const field = domain.fields[0];\n    return isString(field) ? field : undefined;\n  }\n\n  return undefined;\n}\n\nexport function assembleDomain(model: Model, channel: ScaleChannel) {\n  const scaleComponent = model.component.scales[channel];\n\n  const domains = scaleComponent.domains.map(domain => {\n    // Correct references to data as the original domain's data was determined\n    // in parseScale, which happens before parseData. Thus the original data\n    // reference can be incorrect.\n\n    if (isDataRefDomain(domain)) {\n      domain.data = model.lookupDataSource(domain.data);\n    }\n    return domain;\n  });\n\n  // domains is an array that has to be merged into a single vega domain\n  return mergeDomains(domains);\n}\n","import {Channel, ScaleChannel} from '../../channel';\nimport {keys} from '../../util';\nimport {isVgRangeStep, VgRange, VgScale} from '../../vega.schema';\nimport {isConcatModel, isLayerModel, isRepeatModel, Model} from '../model';\nimport {isRawSelectionDomain, selectionScaleDomain} from '../selection/selection';\nimport {assembleDomain} from './domain';\n\nexport function assembleScales(model: Model): VgScale[] {\n  if (isLayerModel(model) || isConcatModel(model) || isRepeatModel(model)) {\n    // For concat / layer / repeat, include scales of children too\n    return model.children.reduce((scales, child) => {\n      return scales.concat(assembleScales(child));\n    }, assembleScalesForModel(model));\n  } else {\n    // For facet, child scales would not be included in the parent's scope.\n    // For unit, there is no child.\n    return assembleScalesForModel(model);\n  }\n}\n\nexport function assembleScalesForModel(model: Model): VgScale[] {\n  return keys(model.component.scales).reduce(\n    (scales: VgScale[], channel: ScaleChannel) => {\n      const scaleComponent = model.component.scales[channel];\n      if (scaleComponent.merged) {\n        // Skipped merged scales\n        return scales;\n      }\n\n      const scale = scaleComponent.combine();\n\n      // need to separate const and non const object destruction\n      let {domainRaw} = scale;\n      const {name, type, domainRaw: _d, range: _r, ...otherScaleProps} = scale;\n\n      const range = assembleScaleRange(scale.range, name, channel);\n\n      // As scale parsing occurs before selection parsing, a temporary signal\n      // is used for domainRaw. Here, we detect if this temporary signal\n      // is set, and replace it with the correct domainRaw signal.\n      // For more information, see isRawSelectionDomain in selection.ts.\n      if (domainRaw && isRawSelectionDomain(domainRaw)) {\n        domainRaw = selectionScaleDomain(model, domainRaw);\n      }\n\n      const domain = assembleDomain(model, channel);\n\n      scales.push({\n        name,\n        type,\n        ...(domain ? {domain} : {}),\n        ...(domainRaw ? {domainRaw} : {}),\n        range: range,\n        ...otherScaleProps\n      });\n\n      return scales;\n    },\n    [] as VgScale[]\n  );\n}\n\nexport function assembleScaleRange(scaleRange: VgRange, scaleName: string, channel: Channel): VgRange {\n  // add signals to x/y range\n  if (channel === 'x' || channel === 'y') {\n    if (isVgRangeStep(scaleRange)) {\n      // For x/y range step, use a signal created in layout assemble instead of a constant range step.\n      return {\n        step: {signal: scaleName + '_step'}\n      };\n    }\n  }\n  return scaleRange;\n}\n","import {ScaleChannel} from '../../channel';\nimport {Scale, ScaleType} from '../../scale';\nimport {Omit} from '../../util';\nimport {VgNonUnionDomain, VgScale} from '../../vega.schema';\nimport {Explicit, Split} from '../split';\n\n/**\n * All VgDomain property except domain.\n * (We exclude domain as we have a special \"domains\" array that allow us merge them all at once in assemble.)\n */\n// TODO: also exclude domainRaw and property implement the right scaleComponent for selection domain\n\nexport type ScaleComponentProps = Omit<VgScale, 'domain'>;\n\nexport class ScaleComponent extends Split<ScaleComponentProps> {\n  public merged = false;\n\n  public domains: VgNonUnionDomain[] = [];\n\n  constructor(name: string, typeWithExplicit: Explicit<ScaleType>) {\n    super(\n      {}, // no initial explicit property\n      {name} // name as initial implicit property\n    );\n    this.setWithExplicit('type', typeWithExplicit);\n  }\n}\n\n// Using Mapped Type to declare type (https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types)\nexport type ScaleComponentIndex = {[P in ScaleChannel]?: ScaleComponent};\n\nexport type ScaleIndex = {[P in ScaleChannel]?: Scale};\n","import {SignalRef} from 'vega';\n\nexport type Rename = (oldSignalName: string) => string;\n\n/**\n * A class that behaves like a SignalRef but lazily generates the signal.\n * The provided generator function should use `Model.getSignalName` to use the correct signal name.\n */\nexport class SignalRefWrapper implements SignalRef {\n  constructor(private exprGenerator: () => string) {}\n\n  public get signal() {\n    return this.exprGenerator();\n  }\n\n  public toJSON() {\n    return {signal: this.signal};\n  }\n\n  public static fromName(rename: Rename, signalName: string) {\n    return new SignalRefWrapper(() => rename(signalName));\n  }\n}\n","import {SignalRef} from 'vega';\nimport {isArray, isNumber} from 'vega-util';\nimport {isBinning} from '../../bin';\nimport {\n  Channel,\n  COLOR,\n  FILL,\n  FILLOPACITY,\n  OPACITY,\n  POSITION_SCALE_CHANNELS,\n  SCALE_CHANNELS,\n  ScaleChannel,\n  SHAPE,\n  SIZE,\n  STROKE,\n  STROKEOPACITY,\n  STROKEWIDTH,\n  X,\n  Y\n} from '../../channel';\nimport {Config} from '../../config';\nimport {vgField} from '../../fielddef';\nimport * as log from '../../log';\nimport {Mark} from '../../mark';\nimport {\n  channelScalePropertyIncompatability,\n  Domain,\n  hasContinuousDomain,\n  hasDiscreteDomain,\n  isContinuousToDiscrete,\n  isExtendedScheme,\n  Scale,\n  ScaleConfig,\n  ScaleType,\n  scaleTypeSupportProperty,\n  Scheme\n} from '../../scale';\nimport {Type} from '../../type';\nimport * as util from '../../util';\nimport {isSignalRef, isVgRangeStep, SchemeConfig, VgRange} from '../../vega.schema';\nimport {Rename, SignalRefWrapper} from '../signal';\nimport {Explicit, makeExplicit, makeImplicit} from '../split';\nimport {UnitModel} from '../unit';\nimport {ScaleComponentIndex} from './component';\n\nexport const RANGE_PROPERTIES: (keyof Scale)[] = ['range', 'rangeStep', 'scheme'];\n\nfunction getSizeType(channel: ScaleChannel) {\n  return channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;\n}\n\nexport function parseUnitScaleRange(model: UnitModel) {\n  const localScaleComponents: ScaleComponentIndex = model.component.scales;\n\n  // use SCALE_CHANNELS instead of scales[channel] to ensure that x, y come first!\n  SCALE_CHANNELS.forEach((channel: ScaleChannel) => {\n    const localScaleCmpt = localScaleComponents[channel];\n    if (!localScaleCmpt) {\n      return;\n    }\n    const mergedScaleCmpt = model.getScaleComponent(channel);\n\n    const specifiedScale = model.specifiedScales[channel];\n    const fieldDef = model.fieldDef(channel);\n\n    // Read if there is a specified width/height\n    const sizeType = getSizeType(channel);\n    let sizeSpecified = sizeType ? !!model.component.layoutSize.get(sizeType) : undefined;\n\n    const scaleType = mergedScaleCmpt.get('type');\n\n    // if autosize is fit, size cannot be data driven\n    const rangeStep = util.contains(['point', 'band'], scaleType) || !!specifiedScale.rangeStep;\n    if (sizeType && model.fit && !sizeSpecified && rangeStep) {\n      log.warn(log.message.CANNOT_FIX_RANGE_STEP_WITH_FIT);\n      sizeSpecified = true;\n    }\n\n    const xyRangeSteps = getXYRangeStep(model);\n\n    const rangeWithExplicit = parseRangeForChannel(\n      channel,\n      model.getSignalName.bind(model),\n      scaleType,\n      fieldDef.type,\n      specifiedScale,\n      model.config,\n      localScaleCmpt.get('zero'),\n      model.mark,\n      sizeSpecified,\n      model.getName(sizeType),\n      xyRangeSteps\n    );\n\n    localScaleCmpt.setWithExplicit('range', rangeWithExplicit);\n  });\n}\n\nfunction getRangeStep(model: UnitModel, channel: 'x' | 'y'): number | SignalRef {\n  const scaleCmpt = model.getScaleComponent(channel);\n  if (!scaleCmpt) {\n    return undefined;\n  }\n\n  const scaleType = scaleCmpt.get('type');\n  const fieldDef = model.fieldDef(channel);\n\n  if (hasDiscreteDomain(scaleType)) {\n    const range = scaleCmpt && scaleCmpt.get('range');\n    if (range && isVgRangeStep(range) && isNumber(range.step)) {\n      return range.step;\n    }\n    // TODO: support the case without range step\n  } else if (fieldDef && fieldDef.bin) {\n    if (isBinning(fieldDef.bin)) {\n      const binSignal = model.getName(vgField(fieldDef, {suffix: 'bins'}));\n\n      // TODO: extract this to be range step signal\n      const binCount = `(${binSignal}.stop - ${binSignal}.start) / ${binSignal}.step`;\n      const sizeType = getSizeType(channel);\n      const sizeSignal = model.getName(sizeType);\n      return new SignalRefWrapper(() => `${model.getSignalName(sizeSignal)} / (${model.getSignalName(binCount)})`);\n    }\n    // TODO: handle binned case\n  }\n  return undefined;\n}\n\nfunction getXYRangeStep(model: UnitModel) {\n  const steps: (number | SignalRef)[] = [];\n  for (const channel of POSITION_SCALE_CHANNELS) {\n    const step = getRangeStep(model, channel);\n    if (step !== undefined) {\n      steps.push(step);\n    }\n  }\n  return steps;\n}\n\n/**\n * Return mixins that includes one of the range properties (range, rangeStep, scheme).\n */\nexport function parseRangeForChannel(\n  channel: Channel,\n  getSignalName: Rename,\n  scaleType: ScaleType,\n  type: Type,\n  specifiedScale: Scale,\n  config: Config,\n  zero: boolean,\n  mark: Mark,\n  sizeSpecified: boolean,\n  sizeSignal: string,\n  xyRangeSteps: (number | SignalRef)[]\n): Explicit<VgRange> {\n  const noRangeStep = sizeSpecified || specifiedScale.rangeStep === null;\n\n  // Check if any of the range properties is specified.\n  // If so, check if it is compatible and make sure that we only output one of the properties\n  for (const property of RANGE_PROPERTIES) {\n    if (specifiedScale[property] !== undefined) {\n      const supportedByScaleType = scaleTypeSupportProperty(scaleType, property);\n      const channelIncompatability = channelScalePropertyIncompatability(channel, property);\n      if (!supportedByScaleType) {\n        log.warn(log.message.scalePropertyNotWorkWithScaleType(scaleType, property, channel));\n      } else if (channelIncompatability) {\n        // channel\n        log.warn(channelIncompatability);\n      } else {\n        switch (property) {\n          case 'range':\n            return makeExplicit(specifiedScale[property]);\n          case 'scheme':\n            return makeExplicit(parseScheme(specifiedScale[property]));\n          case 'rangeStep':\n            const rangeStep = specifiedScale[property];\n            if (rangeStep !== null) {\n              if (!sizeSpecified) {\n                return makeExplicit({step: rangeStep});\n              } else {\n                // If top-level size is specified, we ignore specified rangeStep.\n                log.warn(log.message.rangeStepDropped(channel));\n              }\n            }\n        }\n      }\n    }\n  }\n  return makeImplicit(\n    defaultRange(\n      channel,\n      getSignalName,\n      scaleType,\n      type,\n      config,\n      zero,\n      mark,\n      sizeSignal,\n      xyRangeSteps,\n      noRangeStep,\n      specifiedScale.domain\n    )\n  );\n}\n\nfunction parseScheme(scheme: Scheme): SchemeConfig {\n  if (isExtendedScheme(scheme)) {\n    return {\n      scheme: scheme.name,\n      ...util.omit(scheme, ['name'])\n    };\n  }\n  return {scheme: scheme};\n}\n\nfunction defaultRange(\n  channel: Channel,\n  getSignalName: Rename,\n  scaleType: ScaleType,\n  type: Type,\n  config: Config,\n  zero: boolean,\n  mark: Mark,\n  sizeSignal: string,\n  xyRangeSteps: (number | SignalRef)[],\n  noRangeStep: boolean,\n  domain: Domain\n): VgRange {\n  switch (channel) {\n    case X:\n    case Y:\n      if (util.contains(['point', 'band'], scaleType) && !noRangeStep) {\n        if (channel === X && mark === 'text') {\n          if (config.scale.textXRangeStep) {\n            return {step: config.scale.textXRangeStep};\n          }\n        } else {\n          if (config.scale.rangeStep) {\n            return {step: config.scale.rangeStep};\n          }\n        }\n      }\n\n      // If range step is null, use zero to width or height.\n      // Note that these range signals are temporary\n      // as they can be merged and renamed.\n      // (We do not have the right size signal here since parseLayoutSize() happens after parseScale().)\n      // We will later replace these temporary names with\n      // the final name in assembleScaleRange()\n\n      if (channel === Y && hasContinuousDomain(scaleType)) {\n        // For y continuous scale, we have to start from the height as the bottom part has the max value.\n        return [SignalRefWrapper.fromName(getSignalName, sizeSignal), 0];\n      } else {\n        return [0, SignalRefWrapper.fromName(getSignalName, sizeSignal)];\n      }\n    case SIZE:\n      // TODO: support custom rangeMin, rangeMax\n      const rangeMin = sizeRangeMin(mark, zero, config);\n      const rangeMax = sizeRangeMax(mark, xyRangeSteps, config);\n      if (isContinuousToDiscrete(scaleType)) {\n        return interpolateRange(\n          rangeMin,\n          rangeMax,\n          defaultContinuousToDiscreteCount(scaleType, config, domain, channel)\n        );\n      } else {\n        return [rangeMin, rangeMax];\n      }\n    case STROKEWIDTH:\n      // TODO: support custom rangeMin, rangeMax\n      return [config.scale.minStrokeWidth, config.scale.maxStrokeWidth];\n    case SHAPE:\n      return 'symbol';\n    case COLOR:\n    case FILL:\n    case STROKE:\n      if (scaleType === 'ordinal') {\n        // Only nominal data uses ordinal scale by default\n        return type === 'nominal' ? 'category' : 'ordinal';\n      } else {\n        return mark === 'rect' || mark === 'geoshape' ? 'heatmap' : 'ramp';\n      }\n    case OPACITY:\n    case FILLOPACITY:\n    case STROKEOPACITY:\n      // TODO: support custom rangeMin, rangeMax\n      return [config.scale.minOpacity, config.scale.maxOpacity];\n  }\n  /* istanbul ignore next: should never reach here */\n  throw new Error(`Scale range undefined for channel ${channel}`);\n}\n\nexport function defaultContinuousToDiscreteCount(\n  scaleType: 'quantile' | 'quantize' | 'threshold',\n  config: Config,\n  domain: Domain,\n  channel: Channel\n) {\n  switch (scaleType) {\n    case 'quantile':\n      return config.scale.quantileCount;\n    case 'quantize':\n      return config.scale.quantizeCount;\n    case 'threshold':\n      if (domain !== undefined && isArray(domain)) {\n        return domain.length + 1;\n      } else {\n        log.warn(log.message.domainRequiredForThresholdScale(channel));\n        // default threshold boundaries for threshold scale since domain has cardinality of 2\n        return 3;\n      }\n  }\n}\n\n/**\n * Returns the linear interpolation of the range according to the cardinality\n *\n * @param rangeMin start of the range\n * @param rangeMax end of the range\n * @param cardinality number of values in the output range\n */\nexport function interpolateRange(rangeMin: number, rangeMax: number | SignalRef, cardinality: number): SignalRef {\n  // always return a signal since it's better to compute the sequence in Vega later\n  const f = () => {\n    const rMax = isSignalRef(rangeMax) ? rangeMax.signal : rangeMax;\n    const step = `(${rMax} - ${rangeMin}) / (${cardinality} - 1)`;\n    return `sequence(${rangeMin}, ${rangeMax} + ${step}, ${step})`;\n  };\n  if (isSignalRef(rangeMax)) {\n    return new SignalRefWrapper(f);\n  } else {\n    return {signal: f()};\n  }\n}\n\nfunction sizeRangeMin(mark: Mark, zero: boolean, config: Config) {\n  if (zero) {\n    return 0;\n  }\n  switch (mark) {\n    case 'bar':\n    case 'tick':\n      return config.scale.minBandSize;\n    case 'line':\n    case 'trail':\n    case 'rule':\n      return config.scale.minStrokeWidth;\n    case 'text':\n      return config.scale.minFontSize;\n    case 'point':\n    case 'square':\n    case 'circle':\n      return config.scale.minSize;\n  }\n  /* istanbul ignore next: should never reach here */\n  // sizeRangeMin not implemented for the mark\n  throw new Error(log.message.incompatibleChannel('size', mark));\n}\n\nexport const MAX_SIZE_RANGE_STEP_RATIO = 0.95;\n\nfunction sizeRangeMax(mark: Mark, xyRangeSteps: (number | SignalRef)[], config: Config): number | SignalRef {\n  const scaleConfig = config.scale;\n  switch (mark) {\n    case 'bar':\n    case 'tick':\n      if (config.scale.maxBandSize !== undefined) {\n        return config.scale.maxBandSize;\n      }\n      const min = minXYRangeStep(xyRangeSteps, config.scale);\n\n      if (isNumber(min)) {\n        return min - 1;\n      } else {\n        return new SignalRefWrapper(() => `${min.signal} - 1`);\n      }\n\n    case 'line':\n    case 'trail':\n    case 'rule':\n      return config.scale.maxStrokeWidth;\n    case 'text':\n      return config.scale.maxFontSize;\n    case 'point':\n    case 'square':\n    case 'circle':\n      if (config.scale.maxSize) {\n        return config.scale.maxSize;\n      }\n\n      const pointStep = minXYRangeStep(xyRangeSteps, scaleConfig);\n      if (isNumber(pointStep)) {\n        return Math.pow(MAX_SIZE_RANGE_STEP_RATIO * pointStep, 2);\n      } else {\n        return new SignalRefWrapper(() => `pow(${MAX_SIZE_RANGE_STEP_RATIO} * ${pointStep.signal}, 2)`);\n      }\n  }\n  /* istanbul ignore next: should never reach here */\n  // sizeRangeMax not implemented for the mark\n  throw new Error(log.message.incompatibleChannel('size', mark));\n}\n\n/**\n * @returns {number} Range step of x or y or minimum between the two if both are ordinal scale.\n */\nfunction minXYRangeStep(xyRangeSteps: (number | SignalRef)[], scaleConfig: ScaleConfig): number | SignalRef {\n  if (xyRangeSteps.length > 0) {\n    let min = Infinity;\n\n    for (const step of xyRangeSteps) {\n      if (isSignalRef(step)) {\n        min = undefined;\n      } else {\n        if (min !== undefined && step < min) {\n          min = step;\n        }\n      }\n    }\n\n    return min !== undefined\n      ? min\n      : new SignalRefWrapper(() => {\n          const exprs = xyRangeSteps.map(e => (isSignalRef(e) ? e.signal : e));\n          return `min(${exprs.join(', ')})`;\n        });\n  }\n  if (scaleConfig.rangeStep) {\n    return scaleConfig.rangeStep;\n  }\n  return 21; // FIXME: re-evaluate the default value here.\n}\n","import {isBinned, isBinning, isBinParams} from '../../bin';\nimport {Channel, COLOR, FILL, ScaleChannel, STROKE, X, Y} from '../../channel';\nimport {Config} from '../../config';\nimport {ScaleFieldDef, TypedFieldDef, vgField} from '../../fielddef';\nimport * as log from '../../log';\nimport {BarConfig, Mark, MarkDef} from '../../mark';\nimport {\n  channelScalePropertyIncompatability,\n  Domain,\n  hasContinuousDomain,\n  isContinuousToContinuous,\n  isContinuousToDiscrete,\n  NiceTime,\n  Scale,\n  ScaleConfig,\n  ScaleType,\n  scaleTypeSupportProperty\n} from '../../scale';\nimport {Sort} from '../../sort';\nimport {Type} from '../../type';\nimport * as util from '../../util';\nimport {contains, getFirstDefined, keys} from '../../util';\nimport {VgScale} from '../../vega.schema';\nimport {isUnitModel, Model} from '../model';\nimport {Explicit, mergeValuesWithExplicit, tieBreakByComparing} from '../split';\nimport {UnitModel} from '../unit';\nimport {SignalRefWrapper} from './../signal';\nimport {ScaleComponentIndex, ScaleComponentProps} from './component';\nimport {parseUnitScaleRange} from './range';\n\nexport function parseScaleProperty(model: Model, property: keyof (Scale | ScaleComponentProps)) {\n  if (isUnitModel(model)) {\n    parseUnitScaleProperty(model, property);\n  } else {\n    parseNonUnitScaleProperty(model, property);\n  }\n}\n\nfunction parseUnitScaleProperty(model: UnitModel, property: keyof (Scale | ScaleComponentProps)) {\n  const localScaleComponents: ScaleComponentIndex = model.component.scales;\n\n  keys(localScaleComponents).forEach((channel: ScaleChannel) => {\n    const specifiedScale = model.specifiedScales[channel];\n    const localScaleCmpt = localScaleComponents[channel];\n    const mergedScaleCmpt = model.getScaleComponent(channel);\n    const fieldDef = model.fieldDef(channel);\n    const config = model.config;\n\n    const specifiedValue = specifiedScale[property];\n    const sType = mergedScaleCmpt.get('type');\n\n    const supportedByScaleType = scaleTypeSupportProperty(sType, property);\n    const channelIncompatability = channelScalePropertyIncompatability(channel, property);\n\n    if (specifiedValue !== undefined) {\n      // If there is a specified value, check if it is compatible with scale type and channel\n      if (!supportedByScaleType) {\n        log.warn(log.message.scalePropertyNotWorkWithScaleType(sType, property, channel));\n      } else if (channelIncompatability) {\n        // channel\n        log.warn(channelIncompatability);\n      }\n    }\n    if (supportedByScaleType && channelIncompatability === undefined) {\n      if (specifiedValue !== undefined) {\n        // copyKeyFromObject ensures type safety\n        localScaleCmpt.copyKeyFromObject(property, specifiedScale);\n      } else {\n        const value = getDefaultValue(\n          property,\n          model,\n          channel,\n          fieldDef,\n          mergedScaleCmpt.get('type'),\n          mergedScaleCmpt.get('padding'),\n          mergedScaleCmpt.get('paddingInner'),\n          specifiedScale.domain,\n          model.markDef,\n          config\n        );\n        if (value !== undefined) {\n          localScaleCmpt.set(property, value, false);\n        }\n      }\n    }\n  });\n}\n\n// Note: This method is used in Voyager.\nexport function getDefaultValue(\n  property: keyof Scale,\n  model: Model,\n  channel: Channel,\n  fieldDef: ScaleFieldDef<string, Type>,\n  scaleType: ScaleType,\n  scalePadding: number,\n  scalePaddingInner: number,\n  specifiedDomain: Scale['domain'],\n  markDef: MarkDef,\n  config: Config\n) {\n  const scaleConfig = config.scale;\n\n  // If we have default rule-base, determine default value first\n  switch (property) {\n    case 'bins':\n      return bins(model, fieldDef, channel);\n    case 'interpolate':\n      return interpolate(channel);\n    case 'nice':\n      return nice(scaleType, channel, fieldDef);\n    case 'padding':\n      return padding(channel, scaleType, scaleConfig, fieldDef, markDef, config.bar);\n    case 'paddingInner':\n      return paddingInner(scalePadding, channel, markDef.type, scaleConfig);\n    case 'paddingOuter':\n      return paddingOuter(scalePadding, channel, scaleType, markDef.type, scalePaddingInner, scaleConfig);\n    case 'reverse':\n      return reverse(scaleType, fieldDef.sort);\n    case 'zero':\n      return zero(channel, fieldDef, specifiedDomain, markDef, scaleType);\n  }\n  // Otherwise, use scale config\n  return scaleConfig[property];\n}\n\n// This method is here rather than in range.ts to avoid circular dependency.\nexport function parseScaleRange(model: Model) {\n  if (isUnitModel(model)) {\n    parseUnitScaleRange(model);\n  } else {\n    parseNonUnitScaleProperty(model, 'range');\n  }\n}\n\nexport function parseNonUnitScaleProperty(model: Model, property: keyof (Scale | ScaleComponentProps)) {\n  const localScaleComponents: ScaleComponentIndex = model.component.scales;\n\n  for (const child of model.children) {\n    if (property === 'range') {\n      parseScaleRange(child);\n    } else {\n      parseScaleProperty(child, property);\n    }\n  }\n\n  keys(localScaleComponents).forEach((channel: ScaleChannel) => {\n    let valueWithExplicit: Explicit<any>;\n\n    for (const child of model.children) {\n      const childComponent = child.component.scales[channel];\n      if (childComponent) {\n        const childValueWithExplicit = childComponent.getWithExplicit(property);\n        valueWithExplicit = mergeValuesWithExplicit<VgScale, any>(\n          valueWithExplicit,\n          childValueWithExplicit,\n          property,\n          'scale',\n          tieBreakByComparing<VgScale, any>((v1, v2) => {\n            switch (property) {\n              case 'range':\n                // For range step, prefer larger step\n                if (v1.step && v2.step) {\n                  return v1.step - v2.step;\n                }\n                return 0;\n              // TODO: precedence rule for other properties\n            }\n            return 0;\n          })\n        );\n      }\n    }\n    localScaleComponents[channel].setWithExplicit(property, valueWithExplicit);\n  });\n}\n\nexport function bins(model: Model, fieldDef: TypedFieldDef<string>, channel: Channel) {\n  const bin = fieldDef.bin;\n  if (isBinning(bin)) {\n    return new SignalRefWrapper(() => {\n      return model.getName(vgField(fieldDef, {suffix: 'bins'}));\n    });\n  } else if (isBinned(bin) && isBinParams(bin) && bin.step !== undefined) {\n    // start and stop will be determined from the scale domain\n    return {\n      step: bin.step\n    };\n  }\n  return undefined;\n}\n\nexport function interpolate(channel: Channel) {\n  if (contains([COLOR, FILL, STROKE], channel)) {\n    return 'hcl';\n  }\n  return undefined;\n}\n\nexport function nice(scaleType: ScaleType, channel: Channel, fieldDef: TypedFieldDef<string>): boolean | NiceTime {\n  if (fieldDef.bin || util.contains([ScaleType.TIME, ScaleType.UTC], scaleType)) {\n    return undefined;\n  }\n  return util.contains([X, Y], channel) ? true : undefined;\n}\n\nexport function padding(\n  channel: Channel,\n  scaleType: ScaleType,\n  scaleConfig: ScaleConfig,\n  fieldDef: TypedFieldDef<string>,\n  markDef: MarkDef,\n  barConfig: BarConfig\n) {\n  if (util.contains([X, Y], channel)) {\n    if (isContinuousToContinuous(scaleType)) {\n      if (scaleConfig.continuousPadding !== undefined) {\n        return scaleConfig.continuousPadding;\n      }\n\n      const {type, orient} = markDef;\n      if (type === 'bar' && !fieldDef.bin) {\n        if ((orient === 'vertical' && channel === 'x') || (orient === 'horizontal' && channel === 'y')) {\n          return barConfig.continuousBandSize;\n        }\n      }\n    }\n\n    if (scaleType === ScaleType.POINT) {\n      return scaleConfig.pointPadding;\n    }\n  }\n  return undefined;\n}\n\nexport function paddingInner(paddingValue: number, channel: Channel, mark: Mark, scaleConfig: ScaleConfig) {\n  if (paddingValue !== undefined) {\n    // If user has already manually specified \"padding\", no need to add default paddingInner.\n    return undefined;\n  }\n\n  if (util.contains([X, Y], channel)) {\n    // Padding is only set for X and Y by default.\n    // Basically it doesn't make sense to add padding for color and size.\n\n    // paddingOuter would only be called if it's a band scale, just return the default for bandScale.\n\n    const {bandPaddingInner, barBandPaddingInner, rectBandPaddingInner} = scaleConfig;\n\n    return getFirstDefined(bandPaddingInner, mark === 'bar' ? barBandPaddingInner : rectBandPaddingInner);\n  }\n  return undefined;\n}\n\nexport function paddingOuter(\n  paddingValue: number,\n  channel: Channel,\n  scaleType: ScaleType,\n  mark: Mark,\n  paddingInnerValue: number,\n  scaleConfig: ScaleConfig\n) {\n  if (paddingValue !== undefined) {\n    // If user has already manually specified \"padding\", no need to add default paddingOuter.\n    return undefined;\n  }\n\n  if (util.contains([X, Y], channel)) {\n    // Padding is only set for X and Y by default.\n    // Basically it doesn't make sense to add padding for color and size.\n    if (scaleType === ScaleType.BAND) {\n      const {bandPaddingOuter, barBandPaddingOuter, rectBandPaddingOuter} = scaleConfig;\n\n      return getFirstDefined(\n        bandPaddingOuter,\n        mark === 'bar' ? barBandPaddingOuter : rectBandPaddingOuter,\n        /* By default, paddingOuter is paddingInner / 2. The reason is that\n          size (width/height) = step * (cardinality - paddingInner + 2 * paddingOuter).\n          and we want the width/height to be integer by default.\n          Note that step (by default) and cardinality are integers.) */\n        paddingInnerValue / 2\n      );\n    }\n  }\n  return undefined;\n}\n\nexport function reverse(scaleType: ScaleType, sort: Sort<string>) {\n  if (hasContinuousDomain(scaleType) && sort === 'descending') {\n    // For continuous domain scales, Vega does not support domain sort.\n    // Thus, we reverse range instead if sort is descending\n    return true;\n  }\n  return undefined;\n}\n\nexport function zero(\n  channel: Channel,\n  fieldDef: TypedFieldDef<string>,\n  specifiedScale: Domain,\n  markDef: MarkDef,\n  scaleType: ScaleType\n) {\n  // If users explicitly provide a domain range, we should not augment zero as that will be unexpected.\n  const hasCustomDomain = !!specifiedScale && specifiedScale !== 'unaggregated';\n  if (hasCustomDomain) {\n    return false;\n  }\n\n  // If there is no custom domain, return true only for the following cases:\n\n  // 1) using quantitative field with size\n  // While this can be either ratio or interval fields, our assumption is that\n  // ratio are more common. However, if the scaleType is discretizing scale, we want to return\n  // false so that range doesn't start at zero\n  if (channel === 'size' && fieldDef.type === 'quantitative' && !isContinuousToDiscrete(scaleType)) {\n    return true;\n  }\n\n  // 2) non-binned, quantitative x-scale or y-scale\n  // (For binning, we should not include zero by default because binning are calculated without zero.)\n  if (!fieldDef.bin && util.contains([X, Y], channel)) {\n    const {orient, type} = markDef;\n    if (contains(['bar', 'area', 'line', 'trail'], type)) {\n      if ((orient === 'horizontal' && channel === 'y') || (orient === 'vertical' && channel === 'x')) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  return false;\n}\n","import {isBinning} from '../../bin';\nimport {Channel, isColorChannel, isScaleChannel, rangeType} from '../../channel';\nimport {TypedFieldDef} from '../../fielddef';\nimport * as log from '../../log';\nimport {Mark} from '../../mark';\nimport {channelSupportScaleType, Scale, ScaleConfig, ScaleType, scaleTypeSupportDataType} from '../../scale';\nimport * as util from '../../util';\n\nexport type RangeType = 'continuous' | 'discrete' | 'flexible' | undefined;\n\n/**\n * Determine if there is a specified scale type and if it is appropriate,\n * or determine default type if type is unspecified or inappropriate.\n */\n// NOTE: CompassQL uses this method.\nexport function scaleType(\n  specifiedScale: Scale,\n  channel: Channel,\n  fieldDef: TypedFieldDef<string>,\n  mark: Mark,\n  scaleConfig: ScaleConfig\n): ScaleType {\n  const defaultScaleType = defaultType(channel, fieldDef, mark, specifiedScale, scaleConfig);\n  const {type} = specifiedScale;\n\n  if (!isScaleChannel(channel)) {\n    // There is no scale for these channels\n    return null;\n  }\n  if (type !== undefined) {\n    // Check if explicitly specified scale type is supported by the channel\n    if (!channelSupportScaleType(channel, type)) {\n      log.warn(log.message.scaleTypeNotWorkWithChannel(channel, type, defaultScaleType));\n      return defaultScaleType;\n    }\n\n    // Check if explicitly specified scale type is supported by the data type\n    if (!scaleTypeSupportDataType(type, fieldDef.type)) {\n      log.warn(log.message.scaleTypeNotWorkWithFieldDef(type, defaultScaleType));\n      return defaultScaleType;\n    }\n\n    return type;\n  }\n\n  return defaultScaleType;\n}\n\n/**\n * Determine appropriate default scale type.\n */\n// NOTE: Voyager uses this method.\nfunction defaultType(\n  channel: Channel,\n  fieldDef: TypedFieldDef<string>,\n  mark: Mark,\n  specifiedScale: Scale,\n  scaleConfig: ScaleConfig\n): ScaleType {\n  switch (fieldDef.type) {\n    case 'nominal':\n    case 'ordinal':\n      if (isColorChannel(channel) || rangeType(channel) === 'discrete') {\n        if (channel === 'shape' && fieldDef.type === 'ordinal') {\n          log.warn(log.message.discreteChannelCannotEncode(channel, 'ordinal'));\n        }\n        return 'ordinal';\n      }\n\n      if (util.contains(['x', 'y'], channel)) {\n        if (util.contains(['rect', 'bar', 'rule'], mark)) {\n          // The rect/bar mark should fit into a band.\n          // For rule, using band scale to make rule align with axis ticks better https://github.com/vega/vega-lite/issues/3429\n          return 'band';\n        }\n        if (mark === 'bar') {\n          return 'band';\n        }\n      }\n      // Otherwise, use ordinal point scale so we can easily get center positions of the marks.\n      return 'point';\n\n    case 'temporal':\n      if (isColorChannel(channel)) {\n        return 'time';\n      } else if (rangeType(channel) === 'discrete') {\n        log.warn(log.message.discreteChannelCannotEncode(channel, 'temporal'));\n        // TODO: consider using quantize (equivalent to binning) once we have it\n        return 'ordinal';\n      }\n      return 'time';\n\n    case 'quantitative':\n      if (isColorChannel(channel)) {\n        if (isBinning(fieldDef.bin)) {\n          return 'bin-ordinal';\n        }\n\n        return 'linear';\n      } else if (rangeType(channel) === 'discrete') {\n        log.warn(log.message.discreteChannelCannotEncode(channel, 'quantitative'));\n        // TODO: consider using quantize (equivalent to binning) once we have it\n        return 'ordinal';\n      }\n\n      return 'linear';\n\n    case 'geojson':\n      return undefined;\n  }\n\n  /* istanbul ignore next: should never reach this */\n  throw new Error(log.message.invalidFieldType(fieldDef.type));\n}\n","import {SCALE_CHANNELS, ScaleChannel, SHAPE} from '../../channel';\nimport {hasConditionalFieldDef, isFieldDef, TypedFieldDef} from '../../fielddef';\nimport {GEOSHAPE} from '../../mark';\nimport {\n  NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES,\n  Scale,\n  scaleCompatible,\n  ScaleType,\n  scaleTypePrecedence\n} from '../../scale';\nimport {GEOJSON} from '../../type';\nimport {keys} from '../../util';\nimport {VgScale} from '../../vega.schema';\nimport {isUnitModel, Model} from '../model';\nimport {defaultScaleResolve} from '../resolve';\nimport {Explicit, mergeValuesWithExplicit, tieBreakByComparing} from '../split';\nimport {UnitModel} from '../unit';\nimport {ScaleComponent, ScaleComponentIndex} from './component';\nimport {parseScaleDomain} from './domain';\nimport {parseScaleProperty, parseScaleRange} from './properties';\nimport {scaleType} from './type';\n\nexport function parseScale(model: Model) {\n  parseScaleCore(model);\n  parseScaleDomain(model);\n  for (const prop of NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES) {\n    parseScaleProperty(model, prop);\n  }\n  // range depends on zero\n  parseScaleRange(model);\n}\n\nexport function parseScaleCore(model: Model) {\n  if (isUnitModel(model)) {\n    model.component.scales = parseUnitScaleCore(model);\n  } else {\n    model.component.scales = parseNonUnitScaleCore(model);\n  }\n}\n\n/**\n * Parse scales for all channels of a model.\n */\nfunction parseUnitScaleCore(model: UnitModel): ScaleComponentIndex {\n  const {encoding, config, mark} = model;\n\n  return SCALE_CHANNELS.reduce((scaleComponents: ScaleComponentIndex, channel: ScaleChannel) => {\n    let fieldDef: TypedFieldDef<string>;\n    let specifiedScale: Scale | null;\n\n    const channelDef = encoding[channel];\n\n    // Don't generate scale for shape of geoshape\n    if (isFieldDef(channelDef) && mark === GEOSHAPE && channel === SHAPE && channelDef.type === GEOJSON) {\n      return scaleComponents;\n    }\n\n    if (isFieldDef(channelDef)) {\n      fieldDef = channelDef;\n      specifiedScale = channelDef.scale;\n    } else if (hasConditionalFieldDef(channelDef)) {\n      fieldDef = channelDef.condition;\n      specifiedScale = channelDef.condition['scale']; // We use ['scale'] since we know that channel here has scale for sure\n    }\n\n    if (fieldDef && specifiedScale !== null && specifiedScale !== false) {\n      specifiedScale = specifiedScale || {};\n\n      const sType = scaleType(specifiedScale, channel, fieldDef, mark, config.scale);\n      scaleComponents[channel] = new ScaleComponent(model.scaleName(channel + '', true), {\n        value: sType,\n        explicit: specifiedScale.type === sType\n      });\n    }\n\n    return scaleComponents;\n  }, {});\n}\n\nconst scaleTypeTieBreaker = tieBreakByComparing(\n  (st1: ScaleType, st2: ScaleType) => scaleTypePrecedence(st1) - scaleTypePrecedence(st2)\n);\n\nfunction parseNonUnitScaleCore(model: Model) {\n  const scaleComponents: ScaleComponentIndex = (model.component.scales = {});\n\n  const scaleTypeWithExplicitIndex: {\n    // Using Mapped Type to declare type (https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types)\n    [k in ScaleChannel]?: Explicit<ScaleType>\n  } = {};\n  const resolve = model.component.resolve;\n\n  // Parse each child scale and determine if a particular channel can be merged.\n  for (const child of model.children) {\n    parseScaleCore(child);\n\n    // Instead of always merging right away -- check if it is compatible to merge first!\n    keys(child.component.scales).forEach((channel: ScaleChannel) => {\n      // if resolve is undefined, set default first\n      resolve.scale[channel] = resolve.scale[channel] || defaultScaleResolve(channel, model);\n\n      if (resolve.scale[channel] === 'shared') {\n        const explicitScaleType = scaleTypeWithExplicitIndex[channel];\n        const childScaleType = child.component.scales[channel].getWithExplicit('type');\n\n        if (explicitScaleType) {\n          if (scaleCompatible(explicitScaleType.value, childScaleType.value)) {\n            // merge scale component if type are compatible\n            scaleTypeWithExplicitIndex[channel] = mergeValuesWithExplicit<VgScale, ScaleType>(\n              explicitScaleType,\n              childScaleType,\n              'type',\n              'scale',\n              scaleTypeTieBreaker\n            );\n          } else {\n            // Otherwise, update conflicting channel to be independent\n            resolve.scale[channel] = 'independent';\n            // Remove from the index so they don't get merged\n            delete scaleTypeWithExplicitIndex[channel];\n          }\n        } else {\n          scaleTypeWithExplicitIndex[channel] = childScaleType;\n        }\n      }\n    });\n  }\n\n  // Merge each channel listed in the index\n  keys(scaleTypeWithExplicitIndex).forEach((channel: ScaleChannel) => {\n    // Create new merged scale component\n    const name = model.scaleName(channel, true);\n    const typeWithExplicit = scaleTypeWithExplicitIndex[channel];\n    scaleComponents[channel] = new ScaleComponent(name, typeWithExplicit);\n\n    // rename each child and mark them as merged\n    for (const child of model.children) {\n      const childScale = child.component.scales[channel];\n      if (childScale) {\n        child.renameScale(childScale.get('name'), name);\n        childScale.merged = true;\n      }\n    }\n  });\n\n  return scaleComponents;\n}\n","import {AnchorValue, Axis as VgAxis, Legend as VgLegend, NewSignal, SignalRef, Title as VgTitle} from 'vega';\nimport {isNumber, isString} from 'vega-util';\nimport {Channel, isChannel, isScaleChannel, ScaleChannel, SingleDefChannel} from '../channel';\nimport {Config} from '../config';\nimport {Data, DataSourceType} from '../data';\nimport {forEach, reduce} from '../encoding';\nimport {ChannelDef, FieldDef, FieldRefOption, getFieldDef, vgField} from '../fielddef';\nimport * as log from '../log';\nimport {Resolve} from '../resolve';\nimport {hasDiscreteDomain} from '../scale';\nimport {BaseSpec, isFacetSpec, isLayerSpec, isUnitSpec, TopLevelFacetSpec} from '../spec';\nimport {DEFAULT_SPACING, extractCompositionLayout, GenericCompositionLayout, ViewBackground} from '../spec/base';\nimport {extractTitleConfig, TitleParams} from '../title';\nimport {normalizeTransform, Transform} from '../transform';\nimport {contains, Dict, duplicate, keys, varName} from '../util';\nimport {isVgRangeStep, VgData, VgEncodeEntry, VgLayout, VgMarkGroup, VgProjection} from '../vega.schema';\nimport {assembleAxes} from './axis/assemble';\nimport {AxisComponentIndex} from './axis/component';\nimport {ConcatModel} from './concat';\nimport {DataComponent} from './data';\nimport {FacetModel} from './facet';\nimport {assembleHeaderGroups, assembleTitleGroup, HEADER_CHANNELS, LayoutHeaderComponent} from './header/index';\nimport {LayerModel} from './layer';\nimport {sizeExpr} from './layoutsize/assemble';\nimport {LayoutSizeComponent, LayoutSizeIndex} from './layoutsize/component';\nimport {assembleLegends} from './legend/assemble';\nimport {LegendComponentIndex} from './legend/component';\nimport {parseLegend} from './legend/parse';\nimport {assembleProjections} from './projection/assemble';\nimport {ProjectionComponent} from './projection/component';\nimport {parseProjection} from './projection/parse';\nimport {RepeatModel} from './repeat';\nimport {RepeaterValue} from './repeater';\nimport {assembleScales} from './scale/assemble';\nimport {ScaleComponent, ScaleComponentIndex} from './scale/component';\nimport {assembleDomain, getFieldFromDomain} from './scale/domain';\nimport {parseScale} from './scale/parse';\nimport {SelectionComponent} from './selection/selection';\nimport {Split} from './split';\nimport {UnitModel} from './unit';\n\n/**\n * Composable Components that are intermediate results of the parsing phase of the\n * compilations.  The components represents parts of the specification in a form that\n * can be easily merged (during parsing for composite specs).\n * In addition, these components are easily transformed into Vega specifications\n * during the \"assemble\" phase, which is the last phase of the compilation step.\n */\nexport interface Component {\n  data: DataComponent;\n\n  layoutSize: LayoutSizeComponent;\n\n  layoutHeaders: {\n    row?: LayoutHeaderComponent;\n    column?: LayoutHeaderComponent;\n  };\n\n  mark: VgMarkGroup[];\n  scales: ScaleComponentIndex;\n  projection: ProjectionComponent;\n  selection: Dict<SelectionComponent>;\n\n  /** Dictionary mapping channel to VgAxis definition */\n  axes: AxisComponentIndex;\n\n  /** Dictionary mapping channel to VgLegend definition */\n  legends: LegendComponentIndex;\n\n  resolve: Resolve;\n}\n\nexport interface NameMapInterface {\n  rename(oldname: string, newName: string): void;\n  has(name: string): boolean;\n  get(name: string): string;\n}\n\nexport class NameMap implements NameMapInterface {\n  private nameMap: Dict<string>;\n\n  constructor() {\n    this.nameMap = {};\n  }\n\n  public rename(oldName: string, newName: string) {\n    this.nameMap[oldName] = newName;\n  }\n\n  public has(name: string): boolean {\n    return this.nameMap[name] !== undefined;\n  }\n\n  public get(name: string): string {\n    // If the name appears in the _nameMap, we need to read its new name.\n    // We have to loop over the dict just in case the new name also gets renamed.\n    while (this.nameMap[name] && name !== this.nameMap[name]) {\n      name = this.nameMap[name];\n    }\n\n    return name;\n  }\n}\n\n/*\n  We use type guards instead of `instanceof` as `instanceof` makes\n  different parts of the compiler depend on the actual implementation of\n  the model classes, which in turn depend on different parts of the compiler.\n  Thus, `instanceof` leads to circular dependency problems.\n\n  On the other hand, type guards only make different parts of the compiler\n  depend on the type of the model classes, but not the actual implementation.\n*/\n\nexport function isUnitModel(model: Model): model is UnitModel {\n  return model && model.type === 'unit';\n}\n\nexport function isFacetModel(model: Model): model is FacetModel {\n  return model && model.type === 'facet';\n}\n\nexport function isRepeatModel(model: Model): model is RepeatModel {\n  return model && model.type === 'repeat';\n}\n\nexport function isConcatModel(model: Model): model is ConcatModel {\n  return model && model.type === 'concat';\n}\n\nexport function isLayerModel(model: Model): model is LayerModel {\n  return model && model.type === 'layer';\n}\n\nexport abstract class Model {\n  public abstract readonly type: 'unit' | 'facet' | 'layer' | 'concat' | 'repeat';\n  public readonly name: string;\n\n  public readonly title: TitleParams;\n  public readonly description: string;\n\n  public readonly data: Data;\n  public readonly transforms: Transform[];\n  public readonly layout: GenericCompositionLayout;\n\n  /** Name map for scales, which can be renamed by a model's parent. */\n  protected scaleNameMap: NameMapInterface;\n\n  /** Name map for projections, which can be renamed by a model's parent. */\n  protected projectionNameMap: NameMapInterface;\n\n  /** Name map for signals, which can be renamed by a model's parent. */\n  protected signalNameMap: NameMapInterface;\n\n  public readonly component: Component;\n\n  public abstract readonly children: Model[] = [];\n\n  constructor(\n    spec: BaseSpec,\n    public readonly parent: Model,\n    parentGivenName: string,\n    public readonly config: Config,\n    public readonly repeater: RepeaterValue,\n    resolve: Resolve,\n    public readonly view?: ViewBackground\n  ) {\n    this.parent = parent;\n    this.config = config;\n    this.repeater = repeater;\n\n    // If name is not provided, always use parent's givenName to avoid name conflicts.\n    this.name = spec.name || parentGivenName;\n    this.title = isString(spec.title) ? {text: spec.title} : spec.title;\n\n    // Shared name maps\n    this.scaleNameMap = parent ? parent.scaleNameMap : new NameMap();\n    this.projectionNameMap = parent ? parent.projectionNameMap : new NameMap();\n    this.signalNameMap = parent ? parent.signalNameMap : new NameMap();\n\n    this.data = spec.data;\n\n    this.description = spec.description;\n    this.transforms = normalizeTransform(spec.transform || []);\n    this.layout =\n      isUnitSpec(spec) || isLayerSpec(spec) ? undefined : extractCompositionLayout(spec as TopLevelFacetSpec);\n\n    this.component = {\n      data: {\n        sources: parent ? parent.component.data.sources : [],\n        outputNodes: parent ? parent.component.data.outputNodes : {},\n        outputNodeRefCounts: parent ? parent.component.data.outputNodeRefCounts : {},\n        // data is faceted if the spec is a facet spec or the parent has faceted data and no data is defined\n        isFaceted: isFacetSpec(spec) || (parent && parent.component.data.isFaceted && !spec.data)\n      },\n      layoutSize: new Split<LayoutSizeIndex>(),\n      layoutHeaders: {row: {}, column: {}},\n      mark: null,\n      resolve: {\n        scale: {},\n        axis: {},\n        legend: {},\n        ...(resolve ? duplicate(resolve) : {})\n      },\n      selection: null,\n      scales: null,\n      projection: null,\n      axes: {},\n      legends: {}\n    };\n  }\n\n  public get width(): SignalRef {\n    return this.getSizeSignalRef('width');\n  }\n\n  public get height(): SignalRef {\n    return this.getSizeSignalRef('height');\n  }\n\n  protected initSize(size: LayoutSizeIndex) {\n    const {width, height} = size;\n    if (width) {\n      this.component.layoutSize.set('width', width, true);\n    }\n\n    if (height) {\n      this.component.layoutSize.set('height', height, true);\n    }\n  }\n\n  public parse() {\n    this.parseScale();\n\n    this.parseLayoutSize(); // depends on scale\n    this.renameTopLevelLayoutSizeSignal();\n\n    this.parseSelection();\n    this.parseProjection();\n    this.parseData(); // (pathorder) depends on markDef; selection filters depend on parsed selections; depends on projection because some transforms require the finalized projection name.\n    this.parseAxisAndHeader(); // depends on scale and layout size\n    this.parseLegend(); // depends on scale, markDef\n    this.parseMarkGroup(); // depends on data name, scale, layout size, axisGroup, and children's scale, axis, legend and mark.\n  }\n\n  public abstract parseData(): void;\n\n  public abstract parseSelection(): void;\n\n  public parseScale() {\n    parseScale(this);\n  }\n\n  public parseProjection() {\n    parseProjection(this);\n  }\n\n  public abstract parseLayoutSize(): void;\n\n  /**\n   * Rename top-level spec's size to be just width / height, ignoring model name.\n   * This essentially merges the top-level spec's width/height signals with the width/height signals\n   * to help us reduce redundant signals declaration.\n   */\n  private renameTopLevelLayoutSizeSignal() {\n    if (this.getName('width') !== 'width') {\n      this.renameSignal(this.getName('width'), 'width');\n    }\n    if (this.getName('height') !== 'height') {\n      this.renameSignal(this.getName('height'), 'height');\n    }\n  }\n\n  public abstract parseMarkGroup(): void;\n\n  public abstract parseAxisAndHeader(): void;\n\n  public parseLegend() {\n    parseLegend(this);\n  }\n\n  public abstract assembleSelectionTopLevelSignals(signals: NewSignal[]): NewSignal[];\n  public abstract assembleSelectionSignals(): NewSignal[];\n\n  public abstract assembleSelectionData(data: VgData[]): VgData[];\n\n  public assembleGroupStyle(): string {\n    if (this.type === 'unit' || this.type === 'layer') {\n      return (this.view && this.view.style) || 'cell';\n    }\n    return undefined;\n  }\n\n  private assembleEncodeFromView(view: ViewBackground): VgEncodeEntry {\n    // Exclude \"style\"\n    const {style: _, ...baseView} = view;\n\n    const e = {};\n    for (const property in baseView) {\n      if (baseView.hasOwnProperty(property)) {\n        const value = baseView[property];\n        if (value !== undefined) {\n          e[property] = {value};\n        }\n      }\n    }\n    return e;\n  }\n\n  public assembleGroupEncodeEntry(isTopLevel: boolean): VgEncodeEntry {\n    let encodeEntry: VgEncodeEntry = undefined;\n    if (this.view) {\n      encodeEntry = this.assembleEncodeFromView(this.view);\n    }\n    if (!isTopLevel) {\n      // For top-level spec, we can set the global width and height signal to adjust the group size.\n      // For other child specs, we have to manually set width and height in the encode entry.\n      if (this.type === 'unit' || this.type === 'layer') {\n        return {\n          width: this.getSizeSignalRef('width'),\n          height: this.getSizeSignalRef('height'),\n          ...(encodeEntry || {})\n        };\n      }\n    }\n\n    return encodeEntry;\n  }\n\n  public assembleLayout(): VgLayout {\n    if (!this.layout) {\n      return undefined;\n    }\n\n    const {align, bounds, center, spacing = {}} = this.layout;\n\n    return {\n      padding: isNumber(spacing)\n        ? spacing\n        : {\n            row: spacing.row || DEFAULT_SPACING,\n            column: spacing.column || DEFAULT_SPACING\n          },\n      ...this.assembleDefaultLayout(),\n      ...(align ? {align} : {}),\n      ...(bounds ? {bounds} : {}),\n      ...(center ? {center} : {})\n    };\n  }\n\n  protected assembleDefaultLayout(): VgLayout {\n    return {};\n  }\n\n  public abstract assembleLayoutSignals(): NewSignal[];\n\n  public assembleHeaderMarks(): VgMarkGroup[] {\n    const {layoutHeaders} = this.component;\n    let headerMarks = [];\n\n    for (const channel of HEADER_CHANNELS) {\n      if (layoutHeaders[channel].title) {\n        headerMarks.push(assembleTitleGroup(this, channel));\n      }\n    }\n\n    for (const channel of HEADER_CHANNELS) {\n      headerMarks = headerMarks.concat(assembleHeaderGroups(this, channel));\n    }\n    return headerMarks;\n  }\n\n  public abstract assembleMarks(): VgMarkGroup[];\n\n  public assembleAxes(): VgAxis[] {\n    return assembleAxes(this.component.axes, this.config);\n  }\n\n  public assembleLegends(): VgLegend[] {\n    return assembleLegends(this);\n  }\n\n  public assembleProjections(): VgProjection[] {\n    return assembleProjections(this);\n  }\n\n  public assembleTitle(): VgTitle {\n    const {encoding, ...titleNoEncoding} = this.title || ({} as TitleParams);\n\n    const title: VgTitle = {\n      ...extractTitleConfig(this.config.title).nonMark,\n      ...titleNoEncoding,\n      ...(encoding ? {encode: {update: encoding}} : {})\n    };\n\n    if (title.text) {\n      if (!contains(['unit', 'layer'], this.type)) {\n        // As described in https://github.com/vega/vega-lite/issues/2875:\n        // Due to vega/vega#960 (comment), we only support title's anchor for unit and layered spec for now.\n\n        if (title.anchor && title.anchor !== 'start') {\n          log.warn(log.message.cannotSetTitleAnchor(this.type));\n        }\n        title.anchor = 'start';\n      }\n\n      if (contains<AnchorValue>(['middle', undefined], title.anchor) && title.frame === undefined) {\n        title.frame = 'group';\n      }\n\n      return keys(title).length > 0 ? title : undefined;\n    }\n    return undefined;\n  }\n\n  /**\n   * Assemble the mark group for this model.  We accept optional `signals` so that we can include concat top-level signals with the top-level model's local signals.\n   */\n  public assembleGroup(signals: NewSignal[] = []) {\n    const group: VgMarkGroup = {};\n\n    signals = signals.concat(this.assembleSelectionSignals());\n\n    if (signals.length > 0) {\n      group.signals = signals;\n    }\n\n    const layout = this.assembleLayout();\n    if (layout) {\n      group.layout = layout;\n    }\n\n    group.marks = [].concat(this.assembleHeaderMarks(), this.assembleMarks());\n\n    // Only include scales if this spec is top-level or if parent is facet.\n    // (Otherwise, it will be merged with upper-level's scope.)\n    const scales = !this.parent || isFacetModel(this.parent) ? assembleScales(this) : [];\n    if (scales.length > 0) {\n      group.scales = scales;\n    }\n\n    const axes = this.assembleAxes();\n    if (axes.length > 0) {\n      group.axes = axes;\n    }\n\n    const legends = this.assembleLegends();\n    if (legends.length > 0) {\n      group.legends = legends;\n    }\n\n    return group;\n  }\n\n  public hasDescendantWithFieldOnChannel(channel: Channel) {\n    for (const child of this.children) {\n      if (isUnitModel(child)) {\n        if (child.channelHasField(channel)) {\n          return true;\n        }\n      } else {\n        if (child.hasDescendantWithFieldOnChannel(channel)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  public getName(text: string) {\n    return varName((this.name ? this.name + '_' : '') + text);\n  }\n\n  /**\n   * Request a data source name for the given data source type and mark that data source as required. This method should be called in parse, so that all used data source can be correctly instantiated in assembleData().\n   */\n  public requestDataName(name: DataSourceType) {\n    const fullName = this.getName(name);\n\n    // Increase ref count. This is critical because otherwise we won't create a data source.\n    // We also increase the ref counts on OutputNode.getSource() calls.\n    const refCounts = this.component.data.outputNodeRefCounts;\n    refCounts[fullName] = (refCounts[fullName] || 0) + 1;\n\n    return fullName;\n  }\n\n  public getSizeSignalRef(sizeType: 'width' | 'height'): SignalRef {\n    if (isFacetModel(this.parent)) {\n      const channel = sizeType === 'width' ? 'x' : 'y';\n      const scaleComponent = this.component.scales[channel];\n\n      if (scaleComponent && !scaleComponent.merged) {\n        // independent scale\n        const type = scaleComponent.get('type');\n        const range = scaleComponent.get('range');\n\n        if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n          const scaleName = scaleComponent.get('name');\n          const domain = assembleDomain(this, channel);\n          const field = getFieldFromDomain(domain);\n          if (field) {\n            const fieldRef = vgField({aggregate: 'distinct', field}, {expr: 'datum'});\n            return {\n              signal: sizeExpr(scaleName, scaleComponent, fieldRef)\n            };\n          } else {\n            log.warn('Unknown field for ${channel}.  Cannot calculate view size.');\n            return null;\n          }\n        }\n      }\n    }\n\n    return {\n      signal: this.signalNameMap.get(this.getName(sizeType))\n    };\n  }\n\n  /**\n   * Lookup the name of the datasource for an output node. You probably want to call this in assemble.\n   */\n  public lookupDataSource(name: string) {\n    const node = this.component.data.outputNodes[name];\n\n    if (!node) {\n      // Name not found in map so let's just return what we got.\n      // This can happen if we already have the correct name.\n      return name;\n    }\n\n    return node.getSource();\n  }\n\n  public getSignalName(oldSignalName: string): string {\n    return this.signalNameMap.get(oldSignalName);\n  }\n\n  public renameSignal(oldName: string, newName: string) {\n    this.signalNameMap.rename(oldName, newName);\n  }\n\n  public renameScale(oldName: string, newName: string) {\n    this.scaleNameMap.rename(oldName, newName);\n  }\n\n  public renameProjection(oldName: string, newName: string) {\n    this.projectionNameMap.rename(oldName, newName);\n  }\n\n  /**\n   * @return scale name for a given channel after the scale has been parsed and named.\n   */\n  public scaleName(originalScaleName: Channel | string, parse?: boolean): string {\n    if (parse) {\n      // During the parse phase always return a value\n      // No need to refer to rename map because a scale can't be renamed\n      // before it has the original name.\n      return this.getName(originalScaleName);\n    }\n\n    // If there is a scale for the channel, it should either\n    // be in the scale component or exist in the name map\n    if (\n      // If there is a scale for the channel, there should be a local scale component for it\n      (isChannel(originalScaleName) && isScaleChannel(originalScaleName) && this.component.scales[originalScaleName]) ||\n      // in the scale name map (the scale get merged by its parent)\n      this.scaleNameMap.has(this.getName(originalScaleName))\n    ) {\n      return this.scaleNameMap.get(this.getName(originalScaleName));\n    }\n    return undefined;\n  }\n\n  /**\n   * @return projection name after the projection has been parsed and named.\n   */\n  public projectionName(parse?: boolean): string {\n    if (parse) {\n      // During the parse phase always return a value\n      // No need to refer to rename map because a projection can't be renamed\n      // before it has the original name.\n      return this.getName('projection');\n    }\n\n    if (\n      (this.component.projection && !this.component.projection.merged) ||\n      this.projectionNameMap.has(this.getName('projection'))\n    ) {\n      return this.projectionNameMap.get(this.getName('projection'));\n    }\n    return undefined;\n  }\n\n  /**\n   * Corrects the data references in marks after assemble.\n   */\n  public correctDataNames = (mark: VgMarkGroup) => {\n    // TODO: make this correct\n\n    // for normal data references\n    if (mark.from && mark.from.data) {\n      mark.from.data = this.lookupDataSource(mark.from.data);\n    }\n\n    // for access to facet data\n    if (mark.from && mark.from.facet && mark.from.facet.data) {\n      mark.from.facet.data = this.lookupDataSource(mark.from.facet.data);\n    }\n\n    return mark;\n  };\n\n  /**\n   * Traverse a model's hierarchy to get the scale component for a particular channel.\n   */\n  public getScaleComponent(channel: ScaleChannel): ScaleComponent {\n    /* istanbul ignore next: This is warning for debugging test */\n    if (!this.component.scales) {\n      throw new Error(\n        'getScaleComponent cannot be called before parseScale().  Make sure you have called parseScale or use parseUnitModelWithScale().'\n      );\n    }\n\n    const localScaleComponent = this.component.scales[channel];\n    if (localScaleComponent && !localScaleComponent.merged) {\n      return localScaleComponent;\n    }\n    return this.parent ? this.parent.getScaleComponent(channel) : undefined;\n  }\n\n  /**\n   * Traverse a model's hierarchy to get a particular selection component.\n   */\n  public getSelectionComponent(variableName: string, origName: string): SelectionComponent {\n    let sel = this.component.selection[variableName];\n    if (!sel && this.parent) {\n      sel = this.parent.getSelectionComponent(variableName, origName);\n    }\n    if (!sel) {\n      throw new Error(log.message.selectionNotFound(origName));\n    }\n    return sel;\n  }\n}\n\n/** Abstract class for UnitModel and FacetModel.  Both of which can contain fieldDefs as a part of its own specification. */\nexport abstract class ModelWithField extends Model {\n  public abstract fieldDef(channel: SingleDefChannel): FieldDef<any>;\n\n  /** Get \"field\" reference for Vega */\n  public vgField(channel: SingleDefChannel, opt: FieldRefOption = {}) {\n    const fieldDef = this.fieldDef(channel);\n\n    if (!fieldDef) {\n      return undefined;\n    }\n\n    return vgField(fieldDef, opt);\n  }\n\n  protected abstract getMapping(): {[key in Channel]?: any};\n\n  public reduceFieldDef<T, U>(f: (acc: U, fd: FieldDef<string>, c: Channel) => U, init: T, t?: any) {\n    return reduce(\n      this.getMapping(),\n      (acc: U, cd: ChannelDef, c: Channel) => {\n        const fieldDef = getFieldDef(cd);\n        if (fieldDef) {\n          return f(acc, fieldDef, c);\n        }\n        return acc;\n      },\n      init,\n      t\n    );\n  }\n\n  public forEachFieldDef(f: (fd: FieldDef<string>, c: Channel) => void, t?: any) {\n    forEach(\n      this.getMapping(),\n      (cd: ChannelDef, c: Channel) => {\n        const fieldDef = getFieldDef(cd);\n        if (fieldDef) {\n          f(fieldDef, c);\n        }\n      },\n      t\n    );\n  }\n  public abstract channelHasField(channel: Channel): boolean;\n}\n","import {isString} from 'vega-util';\nimport {BinParams, binToString, isBinning} from '../../bin';\nimport {Channel} from '../../channel';\nimport {Config} from '../../config';\nimport {binRequiresRange, isTypedFieldDef, normalizeBin, TypedFieldDef, vgField} from '../../fielddef';\nimport {BinTransform} from '../../transform';\nimport {Dict, duplicate, flatten, hash, keys, vals} from '../../util';\nimport {VgBinTransform, VgTransform} from '../../vega.schema';\nimport {binFormatExpression} from '../common';\nimport {isUnitModel, Model, ModelWithField} from '../model';\nimport {DataFlowNode} from './dataflow';\n\nfunction rangeFormula(model: ModelWithField, fieldDef: TypedFieldDef<string>, channel: Channel, config: Config) {\n  if (binRequiresRange(fieldDef, channel)) {\n    // read format from axis or legend, if there is no format then use config.numberFormat\n\n    const guide = isUnitModel(model) ? model.axis(channel) || model.legend(channel) || {} : {};\n\n    const startField = vgField(fieldDef, {expr: 'datum'});\n    const endField = vgField(fieldDef, {expr: 'datum', binSuffix: 'end'});\n\n    return {\n      formulaAs: vgField(fieldDef, {binSuffix: 'range', forAs: true}),\n      formula: binFormatExpression(startField, endField, guide.format, config)\n    };\n  }\n  return {};\n}\n\nfunction binKey(bin: BinParams, field: string) {\n  return `${binToString(bin)}_${field}`;\n}\n\nfunction getSignalsFromModel(model: Model, key: string) {\n  return {\n    signal: model.getName(`${key}_bins`),\n    extentSignal: model.getName(`${key}_extent`)\n  };\n}\n\nfunction isBinTransform(t: TypedFieldDef<string> | BinTransform): t is BinTransform {\n  return 'as' in t;\n}\n\nfunction createBinComponent(t: TypedFieldDef<string> | BinTransform, bin: boolean | BinParams, model: Model) {\n  let as: [string, string];\n\n  if (isBinTransform(t)) {\n    as = isString(t.as) ? [t.as, `${t.as}_end`] : [t.as[0], t.as[1]];\n  } else {\n    as = [vgField(t, {forAs: true}), vgField(t, {binSuffix: 'end', forAs: true})];\n  }\n\n  const normalizedBin = normalizeBin(bin, undefined) || {};\n  const key = binKey(normalizedBin, t.field);\n  const {signal, extentSignal} = getSignalsFromModel(model, key);\n\n  const binComponent: BinComponent = {\n    bin: normalizedBin,\n    field: t.field,\n    as: as,\n    ...(signal ? {signal} : {}),\n    ...(extentSignal ? {extentSignal} : {})\n  };\n\n  return {key, binComponent};\n}\n\nexport interface BinComponent {\n  bin: BinParams;\n  field: string;\n  extentSignal?: string;\n  signal?: string;\n  as: string[];\n\n  // Range Formula\n\n  formula?: string;\n  formulaAs?: string;\n}\n\nexport class BinNode extends DataFlowNode {\n  public clone() {\n    return new BinNode(null, duplicate(this.bins));\n  }\n\n  constructor(parent: DataFlowNode, private bins: Dict<BinComponent>) {\n    super(parent);\n  }\n\n  public static makeFromEncoding(parent: DataFlowNode, model: ModelWithField) {\n    const bins = model.reduceFieldDef((binComponentIndex: Dict<BinComponent>, fieldDef, channel) => {\n      if (isTypedFieldDef(fieldDef) && isBinning(fieldDef.bin)) {\n        const {key, binComponent} = createBinComponent(fieldDef, fieldDef.bin, model);\n        binComponentIndex[key] = {\n          ...binComponent,\n          ...binComponentIndex[key],\n          ...rangeFormula(model, fieldDef, channel, model.config)\n        };\n      }\n      return binComponentIndex;\n    }, {});\n\n    if (keys(bins).length === 0) {\n      return null;\n    }\n\n    return new BinNode(parent, bins);\n  }\n\n  /**\n   * Creates a bin node from BinTransform.\n   * The optional parameter should provide\n   */\n  public static makeFromTransform(parent: DataFlowNode, t: BinTransform, model: Model) {\n    const {key, binComponent} = createBinComponent(t, t.bin, model);\n    return new BinNode(parent, {\n      [key]: binComponent\n    });\n  }\n\n  public merge(other: BinNode) {\n    this.bins = {...this.bins, ...other.bins};\n    other.remove();\n  }\n\n  public producedFields() {\n    return new Set(flatten(vals(this.bins).map(c => c.as)));\n  }\n\n  public dependentFields() {\n    return new Set(vals(this.bins).map(c => c.field));\n  }\n\n  public hash() {\n    return `Bin ${hash(this.bins)}`;\n  }\n\n  public assemble(): VgTransform[] {\n    return flatten(\n      vals(this.bins).map(bin => {\n        const transform: VgTransform[] = [];\n\n        const binTrans: VgBinTransform = {\n          type: 'bin',\n          field: bin.field,\n          as: bin.as,\n          signal: bin.signal,\n          ...bin.bin\n        };\n\n        if (!bin.bin.extent && bin.extentSignal) {\n          transform.push({\n            type: 'extent',\n            field: bin.field,\n            signal: bin.extentSignal\n          });\n          binTrans.extent = {signal: bin.extentSignal};\n        }\n\n        transform.push(binTrans);\n\n        if (bin.formula) {\n          transform.push({\n            type: 'formula',\n            expr: bin.formula,\n            as: bin.formulaAs\n          });\n        }\n\n        return transform;\n      })\n    );\n  }\n}\n","import {LogicalOperand} from '../../logical';\nimport {Predicate} from '../../predicate';\nimport {duplicate} from '../../util';\nimport {VgFilterTransform} from '../../vega.schema';\nimport {Model} from '../model';\nimport {expression} from '../predicate';\nimport {DataFlowNode} from './dataflow';\nimport {getDependentFields} from './expressions';\n\nexport class FilterNode extends DataFlowNode {\n  private expr: string;\n  private _dependentFields: Set<string>;\n  public clone() {\n    return new FilterNode(null, this.model, duplicate(this.filter));\n  }\n\n  constructor(parent: DataFlowNode, private readonly model: Model, private readonly filter: LogicalOperand<Predicate>) {\n    super(parent);\n\n    // TODO: refactor this to not take a node and\n    // then add a static function makeFromOperand and make the constructor take only an expression\n    this.expr = expression(this.model, this.filter, this);\n\n    this._dependentFields = getDependentFields(this.expr);\n  }\n\n  public dependentFields() {\n    return this._dependentFields;\n  }\n\n  public assemble(): VgFilterTransform {\n    return {\n      type: 'filter',\n      expr: this.expr\n    };\n  }\n\n  public hash() {\n    return `Filter ${this.expr}`;\n  }\n}\n","import {FlattenTransform as VgFlattenTransform} from 'vega';\nimport {FlattenTransform} from '../../transform';\nimport {duplicate, hash} from '../../util';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * A class for flatten transform nodes\n */\nexport class FlattenTransformNode extends DataFlowNode {\n  public clone() {\n    return new FlattenTransformNode(this.parent, duplicate(this.transform));\n  }\n\n  constructor(parent: DataFlowNode, private transform: FlattenTransform) {\n    super(parent);\n    this.transform = duplicate(transform); // duplicate to prevent side effects\n    const {flatten, as = []} = this.transform;\n    this.transform.as = flatten.map((f, i) => as[i] || f);\n  }\n\n  public producedFields() {\n    return new Set(this.transform.as);\n  }\n\n  public hash() {\n    return `FlattenTransform ${hash(this.transform)}`;\n  }\n\n  public assemble(): VgFlattenTransform {\n    const {flatten: fields, as} = this.transform;\n\n    const result: VgFlattenTransform = {\n      type: 'flatten',\n      fields,\n      as\n    };\n    return result;\n  }\n}\n","import {FoldTransform as VgFoldTransform} from 'vega';\nimport {FoldTransform} from '../../transform';\nimport {duplicate, hash} from '../../util';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * A class for flatten transform nodes\n */\nexport class FoldTransformNode extends DataFlowNode {\n  public clone() {\n    return new FoldTransformNode(null, duplicate(this.transform));\n  }\n\n  constructor(parent: DataFlowNode, private transform: FoldTransform) {\n    super(parent);\n    this.transform = duplicate(transform); // duplicate to prevent side effects\n    const specifiedAs = this.transform.as || [undefined, undefined];\n    this.transform.as = [specifiedAs[0] || 'key', specifiedAs[1] || 'value'];\n  }\n\n  public producedFields() {\n    return new Set(this.transform.as);\n  }\n\n  public hash() {\n    return `FoldTransform ${hash(this.transform)}`;\n  }\n\n  public assemble(): VgFoldTransform {\n    const {fold, as} = this.transform;\n    const result: VgFoldTransform = {\n      type: 'fold',\n      fields: fold,\n      as\n    };\n    return result;\n  }\n}\n","import {GeoPositionChannel, LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2, SHAPE} from '../../channel';\nimport {GEOJSON} from '../../type';\nimport {duplicate} from '../../util';\nimport {VgGeoJSONTransform} from '../../vega.schema';\nimport {UnitModel} from '../unit';\nimport {DataFlowNode} from './dataflow';\n\nexport class GeoJSONNode extends DataFlowNode {\n  public clone() {\n    return new GeoJSONNode(null, duplicate(this.fields), this.geojson, this.signal);\n  }\n\n  public static parseAll(parent: DataFlowNode, model: UnitModel): DataFlowNode {\n    let geoJsonCounter = 0;\n\n    [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]].forEach((coordinates: GeoPositionChannel[]) => {\n      const pair = coordinates.map(channel =>\n        model.channelHasField(channel) ? model.fieldDef(channel).field : undefined\n      );\n\n      if (pair[0] || pair[1]) {\n        parent = new GeoJSONNode(parent, pair, null, model.getName(`geojson_${geoJsonCounter++}`));\n      }\n    });\n\n    if (model.channelHasField(SHAPE)) {\n      const fieldDef = model.fieldDef(SHAPE);\n      if (fieldDef.type === GEOJSON) {\n        parent = new GeoJSONNode(parent, null, fieldDef.field, model.getName(`geojson_${geoJsonCounter++}`));\n      }\n    }\n\n    return parent;\n  }\n\n  constructor(parent: DataFlowNode, private fields?: string[], private geojson?: string, private signal?: string) {\n    super(parent);\n  }\n\n  public assemble(): VgGeoJSONTransform {\n    return {\n      type: 'geojson',\n      ...(this.fields ? {fields: this.fields} : {}),\n      ...(this.geojson ? {geojson: this.geojson} : {}),\n      signal: this.signal\n    };\n  }\n}\n","import {GeoPositionChannel, LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2} from '../../channel';\nimport {duplicate} from '../../util';\nimport {VgGeoPointTransform} from '../../vega.schema';\nimport {UnitModel} from '../unit';\nimport {DataFlowNode} from './dataflow';\n\nexport class GeoPointNode extends DataFlowNode {\n  public clone() {\n    return new GeoPointNode(null, this.projection, duplicate(this.fields), duplicate(this.as));\n  }\n\n  constructor(parent: DataFlowNode, private projection: string, private fields: string[], private as: string[]) {\n    super(parent);\n  }\n\n  public static parseAll(parent: DataFlowNode, model: UnitModel): DataFlowNode {\n    if (!model.projectionName()) {\n      return parent;\n    }\n\n    [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]].forEach((coordinates: GeoPositionChannel[]) => {\n      const pair = coordinates.map(channel =>\n        model.channelHasField(channel) ? model.fieldDef(channel).field : undefined\n      );\n\n      const suffix = coordinates[0] === LONGITUDE2 ? '2' : '';\n\n      if (pair[0] || pair[1]) {\n        parent = new GeoPointNode(parent, model.projectionName(), pair, [\n          model.getName('x' + suffix),\n          model.getName('y' + suffix)\n        ]);\n      }\n    });\n\n    return parent;\n  }\n\n  public assemble(): VgGeoPointTransform {\n    return {\n      type: 'geopoint',\n      projection: this.projection,\n      fields: this.fields,\n      as: this.as\n    };\n  }\n}\n","import {SELECTION_ID} from '../../selection';\nimport {VgIdentifierTransform} from '../../vega.schema';\nimport {DataFlowNode} from './dataflow';\n\nexport class IdentifierNode extends DataFlowNode {\n  public clone() {\n    return new IdentifierNode(null);\n  }\n\n  constructor(parent: DataFlowNode) {\n    super(parent);\n  }\n\n  public producedFields() {\n    return new Set([SELECTION_ID]);\n  }\n\n  public assemble(): VgIdentifierTransform {\n    return {type: 'identifier', as: SELECTION_ID};\n  }\n}\n","import {isNumber} from 'vega-util';\nimport {isBinned, isBinning} from '../../bin';\nimport {X, Y} from '../../channel';\nimport {Config} from '../../config';\nimport {isFieldDef} from '../../fielddef';\nimport * as log from '../../log';\nimport {MarkDef} from '../../mark';\nimport {hasDiscreteDomain, ScaleType} from '../../scale';\nimport {getFirstDefined} from '../../util';\nimport {isVgRangeStep, VgEncodeEntry, VgValueRef} from '../../vega.schema';\nimport {getMarkConfig} from '../common';\nimport {ScaleComponent} from '../scale/component';\nimport {UnitModel} from '../unit';\nimport {MarkCompiler} from './base';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\n\nexport const bar: MarkCompiler = {\n  vgMark: 'rect',\n  encodeEntry: (model: UnitModel) => {\n    return {\n      ...mixins.baseEncodeEntry(model, {size: 'ignore', orient: 'ignore'}),\n      ...x(model),\n      ...y(model)\n    };\n  }\n};\n\nfunction x(model: UnitModel): VgEncodeEntry {\n  const {config, encoding, markDef, width} = model;\n  const orient = markDef.orient;\n  const sizeDef = encoding.size;\n\n  const xDef = encoding.x;\n  const x2Def = encoding.x2;\n  const xScaleName = model.scaleName(X);\n  const xScale = model.getScaleComponent(X);\n  // x, x2, and width -- we must specify two of these in all conditions\n  if (isFieldDef(xDef) && isBinned(xDef.bin)) {\n    return mixins.binPosition(\n      xDef,\n      x2Def,\n      X,\n      xScaleName,\n      getFirstDefined(markDef.binSpacing, config.bar.binSpacing),\n      xScale.get('reverse')\n    );\n  } else if (orient === 'horizontal' || x2Def) {\n    return {\n      ...mixins.pointPosition('x', model, 'zeroOrMin'),\n      ...mixins.pointPosition2(model, 'zeroOrMin', 'x2')\n    };\n  } else {\n    // vertical\n    if (isFieldDef(xDef)) {\n      const xScaleType = xScale.get('type');\n      if (isBinning(xDef.bin) && !sizeDef && !hasDiscreteDomain(xScaleType)) {\n        return mixins.binPosition(\n          xDef,\n          undefined,\n          X,\n          model.scaleName('x'),\n          getFirstDefined(markDef.binSpacing, config.bar.binSpacing),\n          xScale.get('reverse')\n        );\n      } else {\n        if (xScaleType === ScaleType.BAND) {\n          return mixins.bandPosition(xDef, 'x', model);\n        }\n      }\n    }\n    // sized bin, normal point-ordinal axis, quantitative x-axis, or no x\n\n    return mixins.centeredBandPosition(\n      'x',\n      model,\n      {...ref.mid(width)},\n      defaultSizeRef(markDef, xScaleName, xScale, config)\n    );\n  }\n}\n\nfunction y(model: UnitModel) {\n  const {config, encoding, height, markDef} = model;\n  const orient = markDef.orient;\n  const sizeDef = encoding.size;\n\n  const yDef = encoding.y;\n  const y2Def = encoding.y2;\n  const yScaleName = model.scaleName(Y);\n  const yScale = model.getScaleComponent(Y);\n\n  // y, y2 & height -- we must specify two of these in all conditions\n  if (isFieldDef(yDef) && isBinned(yDef.bin)) {\n    return mixins.binPosition(\n      yDef,\n      y2Def,\n      Y,\n      yScaleName,\n      getFirstDefined(markDef.binSpacing, config.bar.binSpacing),\n      yScale.get('reverse')\n    );\n  } else if (orient === 'vertical' || y2Def) {\n    return {\n      ...mixins.pointPosition('y', model, 'zeroOrMin'),\n      ...mixins.pointPosition2(model, 'zeroOrMin', 'y2')\n    };\n  } else {\n    if (isFieldDef(yDef)) {\n      const yScaleType = yScale.get('type');\n      if (isBinning(yDef.bin) && !sizeDef && !hasDiscreteDomain(yScaleType)) {\n        return mixins.binPosition(\n          yDef,\n          undefined,\n          Y,\n          model.scaleName('y'),\n          getFirstDefined(markDef.binSpacing, config.bar.binSpacing),\n          yScale.get('reverse')\n        );\n      } else if (yScaleType === ScaleType.BAND) {\n        return mixins.bandPosition(yDef, 'y', model);\n      }\n    }\n    return mixins.centeredBandPosition(\n      'y',\n      model,\n      ref.mid(height),\n      defaultSizeRef(markDef, yScaleName, yScale, config)\n    );\n  }\n}\n\nfunction defaultSizeRef(markDef: MarkDef, scaleName: string, scale: ScaleComponent, config: Config): VgValueRef {\n  if (markDef.size !== undefined) {\n    return {value: markDef.size};\n  }\n  const sizeConfig = getMarkConfig('size', markDef, config, {\n    // config.mark.size shouldn't affect bar size\n    skipGeneralMarkConfig: true\n  });\n\n  if (sizeConfig !== undefined) {\n    return {value: sizeConfig};\n  }\n\n  if (scale) {\n    const scaleType = scale.get('type');\n    if (scaleType === 'point' || scaleType === 'band') {\n      if (config.bar.discreteBandSize !== undefined) {\n        return {value: config.bar.discreteBandSize};\n      }\n      if (scaleType === ScaleType.POINT) {\n        const scaleRange = scale.get('range');\n        if (isVgRangeStep(scaleRange) && isNumber(scaleRange.step)) {\n          return {value: scaleRange.step - 1};\n        }\n        log.warn(log.message.BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL);\n      } else {\n        // BAND\n        return ref.bandRef(scaleName);\n      }\n    } else {\n      // continuous scale\n      return {value: config.bar.continuousBandSize};\n    }\n  }\n  // No Scale\n  const value = getFirstDefined(\n    // No scale is like discrete bar (with one item)\n    config.bar.discreteBandSize,\n    config.scale.rangeStep ? config.scale.rangeStep - 1 : undefined,\n    // If somehow default rangeStep is set to null or undefined, use 20 as back up\n    20\n  );\n  return {value};\n}\n","import {Config} from '../../config';\nimport {VgEncodeEntry} from '../../vega.schema';\nimport {getMarkConfig} from '../common';\nimport {UnitModel} from '../unit';\nimport {MarkCompiler} from './base';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\n\nfunction encodeEntry(model: UnitModel, fixedShape?: 'circle' | 'square') {\n  const {config, markDef, width, height} = model;\n\n  return {\n    ...mixins.baseEncodeEntry(model, {size: 'include', orient: 'ignore'}),\n    ...mixins.pointPosition('x', model, ref.mid(width)),\n    ...mixins.pointPosition('y', model, ref.mid(height)),\n    ...mixins.nonPosition('size', model, {defaultValue: getMarkConfig('size', markDef, config)}),\n    ...shapeMixins(model, config, fixedShape)\n  };\n}\n\nexport function shapeMixins(model: UnitModel, config: Config, fixedShape?: 'circle' | 'square'): VgEncodeEntry {\n  if (fixedShape) {\n    return {shape: {value: fixedShape}};\n  }\n  return mixins.nonPosition('shape', model, {defaultValue: getMarkConfig('shape', model.markDef, config) as string});\n}\n\nexport const point: MarkCompiler = {\n  vgMark: 'symbol',\n  encodeEntry: (model: UnitModel) => {\n    return encodeEntry(model);\n  }\n};\n\nexport const circle: MarkCompiler = {\n  vgMark: 'symbol',\n  encodeEntry: (model: UnitModel) => {\n    return encodeEntry(model, 'circle');\n  }\n};\n\nexport const square: MarkCompiler = {\n  vgMark: 'symbol',\n  encodeEntry: (model: UnitModel) => {\n    return encodeEntry(model, 'square');\n  }\n};\n","import {getFirstDefined} from '../../util';\nimport {isVgRangeStep} from '../../vega.schema';\nimport {UnitModel} from '../unit';\nimport {MarkCompiler} from './base';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\n\nexport const tick: MarkCompiler = {\n  vgMark: 'rect',\n\n  encodeEntry: (model: UnitModel) => {\n    const {config, markDef, width, height} = model;\n    const orient = markDef.orient;\n\n    const vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';\n    const vgThicknessChannel = orient === 'horizontal' ? 'height' : 'width';\n\n    return {\n      ...mixins.baseEncodeEntry(model, {size: 'ignore', orient: 'ignore'}),\n\n      ...mixins.pointPosition('x', model, ref.mid(width), 'xc'),\n      ...mixins.pointPosition('y', model, ref.mid(height), 'yc'),\n\n      // size / thickness => width / height\n      ...mixins.nonPosition('size', model, {\n        defaultValue: defaultSize(model),\n        vgChannel: vgSizeChannel\n      }),\n      [vgThicknessChannel]: {value: getFirstDefined(markDef.thickness, config.tick.thickness)}\n    };\n  }\n};\n\nfunction defaultSize(model: UnitModel): number {\n  const {config, markDef} = model;\n  const orient = markDef.orient;\n  const scale = model.getScaleComponent(orient === 'horizontal' ? 'x' : 'y');\n\n  if (markDef.size !== undefined) {\n    return markDef.size;\n  } else if (config.tick.bandSize !== undefined) {\n    return config.tick.bandSize;\n  } else {\n    const scaleRange = scale ? scale.get('range') : undefined;\n    const rangeStep = scaleRange && isVgRangeStep(scaleRange) ? scaleRange.step : config.scale.rangeStep;\n    if (typeof rangeStep !== 'number') {\n      // FIXME consolidate this log\n      throw new Error('Function does not handle non-numeric rangeStep');\n    }\n    return (rangeStep * 3) / 4;\n  }\n}\n","import {isArray} from 'vega-util';\nimport {MAIN} from '../../data';\nimport {Encoding, isAggregate} from '../../encoding';\nimport {getTypedFieldDef, isFieldDef, isValueDef, vgField} from '../../fielddef';\nimport {AREA, isPathMark, LINE, Mark, TRAIL} from '../../mark';\nimport {isSortField} from '../../sort';\nimport {contains, getFirstDefined, keys} from '../../util';\nimport {VgCompare} from '../../vega.schema';\nimport {getStyles, sortParams} from '../common';\nimport {UnitModel} from '../unit';\nimport {area} from './area';\nimport {bar} from './bar';\nimport {MarkCompiler} from './base';\nimport {geoshape} from './geoshape';\nimport {line, trail} from './line';\nimport {circle, point, square} from './point';\nimport {rect} from './rect';\nimport {rule} from './rule';\nimport {text} from './text';\nimport {tick} from './tick';\n\nconst markCompiler: {[m in Mark]: MarkCompiler} = {\n  area,\n  bar,\n  circle,\n  geoshape,\n  line,\n  point,\n  rect,\n  rule,\n  square,\n  text,\n  tick,\n  trail\n};\n\nexport function parseMarkGroup(model: UnitModel): any[] {\n  if (contains([LINE, AREA, TRAIL], model.mark)) {\n    return parsePathMark(model);\n  } else {\n    return getMarkGroups(model);\n  }\n}\n\nconst FACETED_PATH_PREFIX = 'faceted_path_';\n\nfunction parsePathMark(model: UnitModel) {\n  const details = pathGroupingFields(model.mark, model.encoding);\n\n  const pathMarks = getMarkGroups(model, {\n    // If has subfacet for line/area group, need to use faceted data from below.\n    fromPrefix: details.length > 0 ? FACETED_PATH_PREFIX : ''\n  });\n\n  if (details.length > 0) {\n    // have level of details - need to facet line into subgroups\n    // TODO: for non-stacked plot, map order to zindex. (Maybe rename order for layer to zindex?)\n\n    return [\n      {\n        name: model.getName('pathgroup'),\n        type: 'group',\n        from: {\n          facet: {\n            name: FACETED_PATH_PREFIX + model.requestDataName(MAIN),\n            data: model.requestDataName(MAIN),\n            groupby: details\n          }\n        },\n        encode: {\n          update: {\n            width: {field: {group: 'width'}},\n            height: {field: {group: 'height'}}\n          }\n        },\n        marks: pathMarks\n      }\n    ];\n  } else {\n    return pathMarks;\n  }\n}\n\nexport function getSort(model: UnitModel): VgCompare {\n  const {encoding, stack, mark, markDef} = model;\n  const order = encoding.order;\n  if (!isArray(order) && isValueDef(order)) {\n    return undefined;\n  } else if ((isArray(order) || isFieldDef(order)) && !stack) {\n    // Sort by the order field if it is specified and the field is not stacked. (For stacked field, order specify stack order.)\n    return sortParams(order, {expr: 'datum'});\n  } else if (isPathMark(mark)) {\n    // For both line and area, we sort values based on dimension by default\n    const dimensionChannelDef = encoding[markDef.orient === 'horizontal' ? 'y' : 'x'];\n    if (isFieldDef(dimensionChannelDef)) {\n      const s = dimensionChannelDef.sort;\n      const sortField = isSortField(s)\n        ? vgField(\n            {\n              // FIXME: this op might not already exist?\n              // FIXME: what if dimensionChannel (x or y) contains custom domain?\n              aggregate: isAggregate(model.encoding) ? s.op : undefined,\n              field: s.field\n            },\n            {expr: 'datum'}\n          )\n        : vgField(dimensionChannelDef, {\n            // For stack with imputation, we only have bin_mid\n            binSuffix: model.stack && model.stack.impute ? 'mid' : undefined,\n            expr: 'datum'\n          });\n\n      return {\n        field: sortField,\n        order: 'descending'\n      };\n    }\n    return undefined;\n  }\n  return undefined;\n}\n\nfunction getMarkGroups(\n  model: UnitModel,\n  opt: {\n    fromPrefix: string;\n  } = {fromPrefix: ''}\n) {\n  const mark = model.mark;\n\n  const clip = getFirstDefined(model.markDef.clip, scaleClip(model));\n  const style = getStyles(model.markDef);\n  const key = model.encoding.key;\n  const sort = getSort(model);\n\n  const postEncodingTransform = markCompiler[mark].postEncodingTransform\n    ? markCompiler[mark].postEncodingTransform(model)\n    : null;\n\n  return [\n    {\n      name: model.getName('marks'),\n      type: markCompiler[mark].vgMark,\n      ...(clip ? {clip: true} : {}),\n      ...(style ? {style} : {}),\n      ...(key ? {key: {field: key.field}} : {}),\n      ...(sort ? {sort} : {}),\n      from: {data: opt.fromPrefix + model.requestDataName(MAIN)},\n      encode: {\n        update: markCompiler[mark].encodeEntry(model)\n      },\n      ...(postEncodingTransform\n        ? {\n            transform: postEncodingTransform\n          }\n        : {})\n    }\n  ];\n}\n\n/**\n * Returns list of path grouping fields\n * that the model's spec contains.\n */\nexport function pathGroupingFields(mark: Mark, encoding: Encoding<string>): string[] {\n  return keys(encoding).reduce((details, channel) => {\n    switch (channel) {\n      // x, y, x2, y2, lat, long, lat1, long2, order, tooltip, href, cursor should not cause lines to group\n      case 'x':\n      case 'y':\n      case 'order':\n      case 'href':\n      case 'x2':\n      case 'y2':\n\n      case 'latitude':\n      case 'longitude':\n      case 'latitude2':\n      case 'longitude2':\n      // TODO: case 'cursor':\n\n      // text, shape, shouldn't be a part of line/trail/area\n      case 'text':\n      case 'shape':\n\n      // tooltip fields should not be added to group by\n      case 'tooltip':\n        return details;\n      case 'detail':\n      case 'key':\n        const channelDef = encoding[channel];\n        if (isArray(channelDef) || isFieldDef(channelDef)) {\n          (isArray(channelDef) ? channelDef : [channelDef]).forEach(fieldDef => {\n            if (!fieldDef.aggregate) {\n              details.push(vgField(fieldDef, {}));\n            }\n          });\n        }\n        return details;\n\n      case 'size':\n        if (mark === 'trail') {\n          // For trail, size should not group trail lines.\n          return details;\n        }\n      // For line, it should group lines.\n\n      /* tslint:disable */\n      // intentional fall through\n\n      case 'color':\n      case 'fill':\n      case 'stroke':\n      case 'opacity':\n      case 'fillOpacity':\n      case 'strokeOpacity':\n      case 'strokeWidth':\n        // TODO strokeDashOffset:\n\n        /* tslint:enable */\n        const fieldDef = getTypedFieldDef<string>(encoding[channel]);\n        if (fieldDef && !fieldDef.aggregate) {\n          details.push(vgField(fieldDef, {}));\n        }\n        return details;\n      default:\n        throw new Error(`Bug: Channel ${channel} unimplemented for line mark`);\n    }\n  }, []);\n}\n\n/**\n * If scales are bound to interval selections, we want to automatically clip\n * marks to account for panning/zooming interactions. We identify bound scales\n * by the domainRaw property, which gets added during scale parsing.\n */\nfunction scaleClip(model: UnitModel) {\n  const xScale = model.getScaleComponent('x');\n  const yScale = model.getScaleComponent('y');\n  return (xScale && xScale.get('domainRaw')) || (yScale && yScale.get('domainRaw')) ? true : false;\n}\n","import {UnitModel} from '../unit';\nimport {MarkCompiler} from './base';\nimport * as mixins from './mixins';\n\nexport const area: MarkCompiler = {\n  vgMark: 'area',\n  encodeEntry: (model: UnitModel) => {\n    return {\n      ...mixins.baseEncodeEntry(model, {size: 'ignore', orient: 'include'}),\n      ...mixins.pointPosition('x', model, 'zeroOrMin'),\n      ...mixins.pointPosition('y', model, 'zeroOrMin'),\n      ...mixins.pointPosition2(model, 'zeroOrMin', model.markDef.orient === 'horizontal' ? 'x2' : 'y2'),\n      ...mixins.defined(model)\n    };\n  }\n};\n","import {UnitModel} from '../unit';\nimport * as mixins from './mixins';\n\nimport {isFieldDef, vgField} from '../../fielddef';\nimport {GEOJSON} from '../../type';\nimport {VgGeoShapeTransform, VgPostEncodingTransform} from '../../vega.schema';\nimport {MarkCompiler} from './base';\n\nexport const geoshape: MarkCompiler = {\n  vgMark: 'shape',\n  encodeEntry: (model: UnitModel) => {\n    return {\n      ...mixins.baseEncodeEntry(model, {size: 'ignore', orient: 'ignore'})\n    };\n  },\n  postEncodingTransform: (model: UnitModel): VgPostEncodingTransform[] => {\n    const {encoding} = model;\n    const shapeDef = encoding.shape;\n\n    const transform: VgGeoShapeTransform = {\n      type: 'geoshape',\n      projection: model.projectionName(),\n      // as: 'shape',\n      ...(shapeDef && isFieldDef(shapeDef) && shapeDef.type === GEOJSON\n        ? {field: vgField(shapeDef, {expr: 'datum'})}\n        : {})\n    };\n    return [transform];\n  }\n};\n","import {UnitModel} from '../unit';\nimport {MarkCompiler} from './base';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\n\nexport const line: MarkCompiler = {\n  vgMark: 'line',\n  encodeEntry: (model: UnitModel) => {\n    const {width, height} = model;\n\n    return {\n      ...mixins.baseEncodeEntry(model, {size: 'ignore', orient: 'ignore'}),\n      ...mixins.pointPosition('x', model, ref.mid(width)),\n      ...mixins.pointPosition('y', model, ref.mid(height)),\n      ...mixins.nonPosition('size', model, {\n        vgChannel: 'strokeWidth' // VL's line size is strokeWidth\n      }),\n      ...mixins.defined(model)\n    };\n  }\n};\n\nexport const trail: MarkCompiler = {\n  vgMark: 'trail',\n  encodeEntry: (model: UnitModel) => {\n    const {width, height} = model;\n\n    return {\n      ...mixins.baseEncodeEntry(model, {size: 'include', orient: 'ignore'}),\n      ...mixins.pointPosition('x', model, ref.mid(width)),\n      ...mixins.pointPosition('y', model, ref.mid(height)),\n      ...mixins.nonPosition('size', model),\n      ...mixins.defined(model)\n    };\n  }\n};\n","import {isBinned, isBinning} from '../../bin';\nimport {X, Y} from '../../channel';\nimport {isFieldDef} from '../../fielddef';\nimport * as log from '../../log';\nimport {RECT} from '../../mark';\nimport {hasDiscreteDomain, ScaleType} from '../../scale';\nimport {VgEncodeEntry} from '../../vega.schema';\nimport {UnitModel} from '../unit';\nimport {MarkCompiler} from './base';\nimport * as mixins from './mixins';\n\nexport const rect: MarkCompiler = {\n  vgMark: 'rect',\n  encodeEntry: (model: UnitModel) => {\n    return {\n      ...mixins.baseEncodeEntry(model, {size: 'ignore', orient: 'ignore'}),\n      ...x(model),\n      ...y(model)\n    };\n  }\n};\n\nexport function x(model: UnitModel): VgEncodeEntry {\n  const xDef = model.encoding.x;\n  const x2Def = model.encoding.x2;\n  const xScale = model.getScaleComponent(X);\n  const xScaleType = xScale ? xScale.get('type') : undefined;\n  const xScaleName = model.scaleName(X);\n\n  if (isFieldDef(xDef) && (isBinning(xDef.bin) || isBinned(xDef.bin))) {\n    return mixins.binPosition(xDef, x2Def, X, xScaleName, 0, xScale.get('reverse'));\n  } else if (isFieldDef(xDef) && xScale && hasDiscreteDomain(xScaleType)) {\n    /* istanbul ignore else */\n    if (xScaleType === ScaleType.BAND) {\n      return mixins.bandPosition(xDef, 'x', model);\n    } else {\n      // We don't support rect mark with point/ordinal scale\n      throw new Error(log.message.scaleTypeNotWorkWithMark(RECT, xScaleType));\n    }\n  } else {\n    // continuous scale or no scale\n    return {\n      ...mixins.pointPosition('x', model, 'zeroOrMax'),\n      ...mixins.pointPosition2(model, 'zeroOrMin', 'x2')\n    };\n  }\n}\n\nexport function y(model: UnitModel): VgEncodeEntry {\n  const yDef = model.encoding.y;\n  const y2Def = model.encoding.y2;\n  const yScale = model.getScaleComponent(Y);\n  const yScaleType = yScale ? yScale.get('type') : undefined;\n  const yScaleName = model.scaleName(Y);\n\n  if (isFieldDef(yDef) && (isBinning(yDef.bin) || isBinned(yDef.bin))) {\n    return mixins.binPosition(yDef, y2Def, Y, yScaleName, 0, yScale.get('reverse'));\n  } else if (isFieldDef(yDef) && yScale && hasDiscreteDomain(yScaleType)) {\n    /* istanbul ignore else */\n    if (yScaleType === ScaleType.BAND) {\n      return mixins.bandPosition(yDef, 'y', model);\n    } else {\n      // We don't support rect mark with point/ordinal scale\n      throw new Error(log.message.scaleTypeNotWorkWithMark(RECT, yScaleType));\n    }\n  } else {\n    // continuous scale or no scale\n    return {\n      ...mixins.pointPosition('y', model, 'zeroOrMax'),\n      ...mixins.pointPosition2(model, 'zeroOrMin', 'y2')\n    };\n  }\n}\n","import {UnitModel} from '../unit';\nimport {MarkCompiler} from './base';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\n\nexport const rule: MarkCompiler = {\n  vgMark: 'rule',\n  encodeEntry: (model: UnitModel) => {\n    const {markDef, width, height} = model;\n    const orient = markDef.orient;\n\n    if (!model.encoding.x && !model.encoding.y && !model.encoding.latitude && !model.encoding.longitude) {\n      // Show nothing if we have none of x, y, lat, and long.\n      return {};\n    }\n\n    return {\n      ...mixins.baseEncodeEntry(model, {size: 'ignore', orient: 'ignore'}),\n      ...mixins.pointPosition('x', model, orient === 'horizontal' ? 'zeroOrMin' : ref.mid(width)),\n      ...mixins.pointPosition('y', model, orient === 'vertical' ? 'zeroOrMin' : ref.mid(height)),\n\n      // include x2 for horizontal or line segment rule\n      ...(orient !== 'vertical' ? mixins.pointPosition2(model, 'zeroOrMax', 'x2') : {}),\n\n      // include y2 for vertical or line segment rule\n      ...(orient !== 'horizontal' ? mixins.pointPosition2(model, 'zeroOrMax', 'y2') : {}),\n\n      ...mixins.nonPosition('size', model, {\n        vgChannel: 'strokeWidth', // VL's rule size is strokeWidth\n        defaultValue: markDef.size\n      })\n    };\n  }\n};\n","import {Config} from '../../config';\nimport {Encoding} from '../../encoding';\nimport {MarkDef} from '../../mark';\nimport {getFirstDefined} from '../../util';\nimport {getMarkConfig, getStyleConfig} from '../common';\nimport {UnitModel} from '../unit';\nimport {MarkCompiler} from './base';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\n\nexport const text: MarkCompiler = {\n  vgMark: 'text',\n\n  encodeEntry: (model: UnitModel) => {\n    const {config, encoding, width, height, markDef} = model;\n\n    // We have to support mark property and config for both size and fontSize for text\n    // - size is from original Vega-Lite, which allows users to easily transition from size channel of other marks to text.\n    // - fontSize is from Vega and we need support it to make sure that all Vega configs all work correctly in Vega-Lite.\n    // Precedence: markDef > style config > mark-specific config\n    // For each of them, fontSize is more specific than size, thus has higher precedence\n    const defaultValue = getFirstDefined(\n      markDef.fontSize,\n      markDef.size,\n      getStyleConfig('fontSize', markDef, config.style),\n      getStyleConfig('size', markDef, config.style),\n      config[markDef.type].fontSize,\n      config[markDef.type].size\n      // general mark config shouldn't be used as they are only for point/circle/square\n    );\n\n    return {\n      ...mixins.baseEncodeEntry(model, {size: 'ignore', orient: 'ignore'}),\n      ...mixins.pointPosition('x', model, ref.mid(width)),\n      ...mixins.pointPosition('y', model, ref.mid(height)),\n      ...mixins.text(model),\n      ...mixins.nonPosition('size', model, {\n        defaultValue,\n        vgChannel: 'fontSize' // VL's text size is fontSize\n      }),\n      ...mixins.valueIfDefined('align', align(model.markDef, encoding, config))\n    };\n  }\n};\nfunction align(markDef: MarkDef, encoding: Encoding<string>, config: Config) {\n  const a = markDef.align || getMarkConfig('align', markDef, config);\n  if (a === undefined) {\n    return 'center';\n  }\n  // If there is a config, Vega-parser will process this already.\n  return undefined;\n}\n","import {SignalRef} from 'vega';\nimport {isFieldDef} from '../../fielddef';\nimport {ImputeSequence, ImputeTransform, isImputeSequence} from '../../transform';\nimport {duplicate, hash} from '../../util';\nimport {VgFormulaTransform, VgImputeTransform, VgWindowTransform} from '../../vega.schema';\nimport {pathGroupingFields} from '../mark/mark';\nimport {UnitModel} from '../unit';\nimport {DataFlowNode} from './dataflow';\n\nexport class ImputeNode extends DataFlowNode {\n  public clone() {\n    return new ImputeNode(null, duplicate(this.transform));\n  }\n\n  constructor(parent: DataFlowNode, private readonly transform: ImputeTransform) {\n    super(parent);\n  }\n\n  public producedFields() {\n    return new Set([this.transform.impute]);\n  }\n\n  private processSequence(keyvals: ImputeSequence): SignalRef {\n    const {start = 0, stop, step} = keyvals;\n    const result = [start, stop, ...(step ? [step] : [])].join(',');\n\n    return {signal: `sequence(${result})`};\n  }\n\n  public static makeFromTransform(parent: DataFlowNode, imputeTransform: ImputeTransform): ImputeNode {\n    return new ImputeNode(parent, imputeTransform);\n  }\n\n  public static makeFromEncoding(parent: DataFlowNode, model: UnitModel) {\n    const encoding = model.encoding;\n    const xDef = encoding.x;\n    const yDef = encoding.y;\n\n    if (isFieldDef(xDef) && isFieldDef(yDef)) {\n      const imputedChannel = xDef.impute ? xDef : yDef.impute ? yDef : undefined;\n      if (imputedChannel === undefined) {\n        return undefined;\n      }\n      const keyChannel = xDef.impute ? yDef : yDef.impute ? xDef : undefined;\n      const {method, value, frame, keyvals} = imputedChannel.impute;\n      const groupbyFields = pathGroupingFields(model.mark, encoding);\n\n      return new ImputeNode(parent, {\n        impute: imputedChannel.field,\n        key: keyChannel.field,\n        ...(method ? {method} : {}),\n        ...(value !== undefined ? {value} : {}),\n        ...(frame ? {frame} : {}),\n        ...(keyvals !== undefined ? {keyvals} : {}),\n        ...(groupbyFields.length ? {groupby: groupbyFields} : {})\n      });\n    }\n    return null;\n  }\n\n  public hash() {\n    return `Impute ${hash(this.transform)}`;\n  }\n\n  public assemble() {\n    const {impute, key, keyvals, method, groupby, value, frame = [null, null]} = this.transform;\n\n    const initialImpute: VgImputeTransform = {\n      type: 'impute',\n      field: impute,\n      key,\n      ...(keyvals ? {keyvals: isImputeSequence(keyvals) ? this.processSequence(keyvals) : keyvals} : {}),\n      method: 'value',\n      ...(groupby ? {groupby} : {}),\n      value: null\n    };\n    let setImputedField;\n    if (method && method !== 'value') {\n      const deriveNewField: VgWindowTransform = {\n        type: 'window',\n        as: [`imputed_${impute}_value`],\n        ops: [method],\n        fields: [impute],\n        frame,\n        ignorePeers: false,\n        ...(groupby ? {groupby} : {})\n      };\n      const replaceOriginal: VgFormulaTransform = {\n        type: 'formula',\n        expr: `datum.${impute} === null ? datum.imputed_${impute}_value : datum.${impute}`,\n        as: impute\n      };\n      setImputedField = [deriveNewField, replaceOriginal];\n    } else {\n      const replaceWithValue: VgFormulaTransform = {\n        type: 'formula',\n        expr: `datum.${impute} === null ? ${value} : datum.${impute}`,\n        as: impute\n      };\n      setImputedField = [replaceWithValue];\n    }\n\n    return [initialImpute, ...setImputedField];\n  }\n}\n","import {Parse} from '../../data';\nimport {Dict} from '../../util';\nimport {Split} from '../split';\nimport {OutputNode} from './dataflow';\nimport {FacetNode} from './facet';\nimport {SourceNode} from './source';\n\nexport interface DataComponent {\n  /**\n   * A list of unique sources.\n   */\n  sources: SourceNode[];\n\n  /**\n   * Registry of output nodes.\n   */\n  outputNodes: Dict<OutputNode | FacetNode>;\n\n  /**\n   * How often is an output node used. If it is not used, we don't need to\n   * instantiate it in the assemble step.\n   */\n  outputNodeRefCounts: Dict<number>;\n\n  /**\n   * The output node before aggregation.\n   */\n  raw?: OutputNode;\n\n  /**\n   * The main output node.\n   */\n  main?: OutputNode;\n\n  /**\n   * For facets, we store the reference to the root node.\n   */\n  facetRoot?: FacetNode;\n\n  /**\n   * True if the data for this model is faceted.\n   * A dataset is faceted if a parent model is a facet and no new dataset is\n   * defined (which would make the data unfaceted again).\n   */\n  isFaceted: boolean;\n\n  /**\n   * Parse properties passed down from ancestors. Helps us to keep track of what has been parsed or is derived.\n   */\n  ancestorParse?: AncestorParse;\n}\n\n/**\n * Class to track interesting properties (see https://15721.courses.cs.cmu.edu/spring2016/papers/graefe-ieee1995.pdf)\n * about how fields have been parsed or whether they have been derived in a transform. We use this to not parse the\n * same field again (or differently).\n */\nexport class AncestorParse extends Split<Parse> {\n  constructor(\n    public readonly explicit: Partial<Parse> = {},\n    public readonly implicit: Partial<Parse> = {},\n    public parseNothing = false\n  ) {\n    super(explicit, implicit);\n  }\n\n  public clone(): AncestorParse {\n    const clone = super.clone() as AncestorParse;\n    clone.parseNothing = this.parseNothing;\n    return clone;\n  }\n}\n","import {isString} from 'vega-util';\nimport * as log from '../../log';\nimport {LookupTransform} from '../../transform';\nimport {duplicate, hash} from '../../util';\nimport {VgLookupTransform} from '../../vega.schema';\nimport {Model} from '../model';\nimport {DataFlowNode, OutputNode} from './dataflow';\nimport {findSource} from './parse';\nimport {SourceNode} from './source';\n\nexport class LookupNode extends DataFlowNode {\n  public clone() {\n    return new LookupNode(null, duplicate(this.transform), this.secondary);\n  }\n\n  constructor(parent: DataFlowNode, public readonly transform: LookupTransform, public readonly secondary: string) {\n    super(parent);\n  }\n\n  public static make(parent: DataFlowNode, model: Model, transform: LookupTransform, counter: number) {\n    const sources = model.component.data.sources;\n\n    let fromSource = findSource(transform.from.data, sources);\n\n    if (!fromSource) {\n      fromSource = new SourceNode(transform.from.data);\n      sources.push(fromSource);\n    }\n\n    const fromOutputName = model.getName(`lookup_${counter}`);\n    const fromOutputNode = new OutputNode(\n      fromSource,\n      fromOutputName,\n      'lookup',\n      model.component.data.outputNodeRefCounts\n    );\n\n    model.component.data.outputNodes[fromOutputName] = fromOutputNode;\n\n    return new LookupNode(parent, transform, fromOutputNode.getSource());\n  }\n\n  public producedFields() {\n    return new Set(\n      this.transform.from.fields || (this.transform.as instanceof Array ? this.transform.as : [this.transform.as])\n    );\n  }\n\n  public hash() {\n    return `Lookup ${hash({transform: this.transform, secondary: this.secondary})}`;\n  }\n\n  public assemble(): VgLookupTransform {\n    let foreign: Partial<VgLookupTransform>;\n\n    if (this.transform.from.fields) {\n      // lookup a few fields and add create a flat output\n      foreign = {\n        values: this.transform.from.fields,\n        ...(this.transform.as ? {as: this.transform.as instanceof Array ? this.transform.as : [this.transform.as]} : {})\n      };\n    } else {\n      // lookup full record and nest it\n      let asName = this.transform.as;\n      if (!isString(asName)) {\n        log.warn(log.message.NO_FIELDS_NEEDS_AS);\n        asName = '_lookup';\n      }\n\n      foreign = {\n        as: [asName]\n      };\n    }\n\n    return {\n      type: 'lookup',\n      from: this.secondary,\n      key: this.transform.from.key,\n      fields: [this.transform.lookup],\n      ...foreign,\n      ...(this.transform.default ? {default: this.transform.default} : {})\n    };\n  }\n}\n","import {SampleTransform as VgSampleTransform} from 'vega';\nimport {SampleTransform} from '../../transform';\nimport {duplicate, hash} from '../../util';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * A class for the sample transform nodes\n */\nexport class SampleTransformNode extends DataFlowNode {\n  public clone() {\n    return new SampleTransformNode(null, duplicate(this.transform));\n  }\n\n  constructor(parent: DataFlowNode, private transform: SampleTransform) {\n    super(parent);\n  }\n\n  public hash() {\n    return `SampleTransform ${hash(this.transform)}`;\n  }\n  public assemble(): VgSampleTransform {\n    return {\n      type: 'sample',\n      size: this.transform.sample\n    };\n  }\n}\n","import {InlineDataset, isUrlData} from '../../data';\nimport {Dict} from '../../util';\nimport {VgData} from '../../vega.schema';\nimport {DataComponent} from './';\nimport {AggregateNode} from './aggregate';\nimport {BinNode} from './bin';\nimport {CalculateNode} from './calculate';\nimport {DataFlowNode, OutputNode} from './dataflow';\nimport {FacetNode} from './facet';\nimport {FilterNode} from './filter';\nimport {FlattenTransformNode} from './flatten';\nimport {FoldTransformNode} from './fold';\nimport {ParseNode} from './formatparse';\nimport {GeoJSONNode} from './geojson';\nimport {GeoPointNode} from './geopoint';\nimport {IdentifierNode} from './identifier';\nimport {ImputeNode} from './impute';\nimport {JoinAggregateTransformNode} from './joinaggregate';\nimport {LookupNode} from './lookup';\nimport {SampleTransformNode} from './sample';\nimport {SourceNode} from './source';\nimport {StackNode} from './stack';\nimport {TimeUnitNode} from './timeunit';\nimport {WindowTransformNode} from './window';\n\n// @ts-ignore\nimport {debug, draw} from './debug';\n\nfunction makeWalkTree(data: VgData[]) {\n  // to name datasources\n  let datasetIndex = 0;\n\n  /**\n   * Recursively walk down the tree.\n   */\n  function walkTree(node: DataFlowNode, dataSource: VgData) {\n    if (node instanceof SourceNode) {\n      // If the source is a named data source or a data source with values, we need\n      // to put it in a different data source. Otherwise, Vega may override the data.\n      if (!isUrlData(node.data)) {\n        data.push(dataSource);\n        const newData: VgData = {\n          name: null,\n          source: dataSource.name,\n          transform: []\n        };\n        dataSource = newData;\n      }\n    }\n\n    if (node instanceof ParseNode) {\n      if (node.parent instanceof SourceNode && !dataSource.source) {\n        // If node's parent is a root source and the data source does not refer to another data source, use normal format parse\n        dataSource.format = {\n          ...(dataSource.format || {}),\n          parse: node.assembleFormatParse()\n        };\n\n        // add calculates for all nested fields\n        dataSource.transform.push(...node.assembleTransforms(true));\n      } else {\n        // Otherwise use Vega expression to parse\n        dataSource.transform.push(...node.assembleTransforms());\n      }\n    }\n\n    if (node instanceof FacetNode) {\n      if (!dataSource.name) {\n        dataSource.name = `data_${datasetIndex++}`;\n      }\n\n      if (!dataSource.source || dataSource.transform.length > 0) {\n        data.push(dataSource);\n        node.data = dataSource.name;\n      } else {\n        node.data = dataSource.source;\n      }\n\n      node.assemble().forEach(d => data.push(d));\n\n      // break here because the rest of the tree has to be taken care of by the facet.\n      return;\n    }\n\n    if (\n      node instanceof FilterNode ||\n      node instanceof CalculateNode ||\n      node instanceof GeoPointNode ||\n      node instanceof GeoJSONNode ||\n      node instanceof AggregateNode ||\n      node instanceof LookupNode ||\n      node instanceof WindowTransformNode ||\n      node instanceof JoinAggregateTransformNode ||\n      node instanceof FoldTransformNode ||\n      node instanceof FlattenTransformNode ||\n      node instanceof IdentifierNode ||\n      node instanceof SampleTransformNode\n    ) {\n      dataSource.transform.push(node.assemble());\n    }\n\n    if (\n      node instanceof BinNode ||\n      node instanceof TimeUnitNode ||\n      node instanceof ImputeNode ||\n      node instanceof StackNode\n    ) {\n      dataSource.transform = dataSource.transform.concat(node.assemble());\n    }\n\n    if (node instanceof OutputNode) {\n      if (dataSource.source && dataSource.transform.length === 0) {\n        node.setSource(dataSource.source);\n      } else if (node.parent instanceof OutputNode) {\n        // Note that an output node may be required but we still do not assemble a\n        // separate data source for it.\n        node.setSource(dataSource.name);\n      } else {\n        if (!dataSource.name) {\n          dataSource.name = `data_${datasetIndex++}`;\n        }\n\n        // Here we set the name of the datasource we generated. From now on\n        // other assemblers can use it.\n        node.setSource(dataSource.name);\n\n        // if this node has more than one child, we will add a datasource automatically\n        if (node.numChildren() === 1) {\n          data.push(dataSource);\n          const newData: VgData = {\n            name: null,\n            source: dataSource.name,\n            transform: []\n          };\n          dataSource = newData;\n        }\n      }\n    }\n\n    switch (node.numChildren()) {\n      case 0:\n        // done\n        if (node instanceof OutputNode && (!dataSource.source || dataSource.transform.length > 0)) {\n          // do not push empty datasources that are simply references\n          data.push(dataSource);\n        }\n        break;\n      case 1:\n        walkTree(node.children[0], dataSource);\n        break;\n      default:\n        if (!dataSource.name) {\n          dataSource.name = `data_${datasetIndex++}`;\n        }\n\n        let source = dataSource.name;\n        if (!dataSource.source || dataSource.transform.length > 0) {\n          data.push(dataSource);\n        } else {\n          source = dataSource.source;\n        }\n\n        node.children.forEach(child => {\n          const newData: VgData = {\n            name: null,\n            source: source,\n            transform: []\n          };\n          walkTree(child, newData);\n        });\n        break;\n    }\n  }\n\n  return walkTree;\n}\n\n/**\n * Assemble data sources that are derived from faceted data.\n */\nexport function assembleFacetData(root: FacetNode): VgData[] {\n  const data: VgData[] = [];\n  const walkTree = makeWalkTree(data);\n\n  root.children.forEach(child =>\n    walkTree(child, {\n      source: root.name,\n      name: null,\n      transform: []\n    })\n  );\n\n  return data;\n}\n\n/**\n * Create Vega Data array from a given compiled model and append all of them to the given array\n *\n * @param  model\n * @param  data array\n * @return modified data array\n */\nexport function assembleRootData(dataComponent: DataComponent, datasets: Dict<InlineDataset>): VgData[] {\n  const data: VgData[] = [];\n\n  // roots.forEach(debug);\n  // draw(roots);\n\n  const walkTree = makeWalkTree(data);\n\n  let sourceIndex = 0;\n\n  dataComponent.sources.forEach(root => {\n    // assign a name if the source does not have a name yet\n    if (!root.hasName()) {\n      root.dataName = `source_${sourceIndex++}`;\n    }\n\n    const newData: VgData = root.assemble();\n\n    walkTree(root, newData);\n  });\n\n  // remove empty transform arrays for cleaner output\n  data.forEach(d => {\n    if (d.transform.length === 0) {\n      delete d.transform;\n    }\n  });\n\n  // move sources without transforms (the ones that are potentially used in lookups) to the beginning\n  let whereTo = 0;\n  for (let i = 0; i < data.length; i++) {\n    const d = data[i];\n    if ((d.transform || []).length === 0 && !d.source) {\n      data.splice(whereTo++, 0, data.splice(i, 1)[0]);\n    }\n  }\n\n  // now fix the from references in lookup transforms\n  for (const d of data) {\n    for (const t of d.transform || []) {\n      if (t.type === 'lookup') {\n        t.from = dataComponent.outputNodes[t.from].getSource();\n      }\n    }\n  }\n\n  // inline values for datasets that are in the datastore\n  for (const d of data) {\n    if (d.name in datasets) {\n      d.values = datasets[d.name];\n    }\n  }\n\n  return data;\n}\n","import {defaultScaleConfig, hasDiscreteDomain} from '../../scale';\nimport {isVgRangeStep} from '../../vega.schema';\nimport {ConcatModel} from '../concat';\nimport {Model} from '../model';\nimport {Explicit, mergeValuesWithExplicit} from '../split';\nimport {UnitModel} from '../unit';\nimport {LayoutSize, LayoutSizeIndex} from './component';\n\nexport function parseLayerLayoutSize(model: Model) {\n  parseChildrenLayoutSize(model);\n\n  const layoutSizeCmpt = model.component.layoutSize;\n  layoutSizeCmpt.setWithExplicit('width', parseNonUnitLayoutSizeForChannel(model, 'width'));\n  layoutSizeCmpt.setWithExplicit('height', parseNonUnitLayoutSizeForChannel(model, 'height'));\n}\n\nexport const parseRepeatLayoutSize = parseLayerLayoutSize;\n\nexport function parseConcatLayoutSize(model: ConcatModel) {\n  parseChildrenLayoutSize(model);\n  const layoutSizeCmpt = model.component.layoutSize;\n\n  const sizeTypeToMerge = model.isVConcat ? 'width' : 'height';\n  layoutSizeCmpt.setWithExplicit(sizeTypeToMerge, parseNonUnitLayoutSizeForChannel(model, sizeTypeToMerge));\n}\n\nexport function parseChildrenLayoutSize(model: Model) {\n  for (const child of model.children) {\n    child.parseLayoutSize();\n  }\n}\n\nfunction parseNonUnitLayoutSizeForChannel(model: Model, sizeType: 'width' | 'height'): Explicit<LayoutSize> {\n  const channel = sizeType === 'width' ? 'x' : 'y';\n  const resolve = model.component.resolve;\n\n  let mergedSize: Explicit<LayoutSize>;\n  // Try to merge layout size\n  for (const child of model.children) {\n    const childSize = child.component.layoutSize.getWithExplicit(sizeType);\n    const scaleResolve = resolve.scale[channel];\n    if (scaleResolve === 'independent' && childSize.value === 'range-step') {\n      // Do not merge independent scales with range-step as their size depends\n      // on the scale domains, which can be different between scales.\n      mergedSize = undefined;\n      break;\n    }\n\n    if (mergedSize) {\n      if (scaleResolve === 'independent' && mergedSize.value !== childSize.value) {\n        // For independent scale, only merge if all the sizes are the same.\n        // If the values are different, abandon the merge!\n        mergedSize = undefined;\n        break;\n      }\n      mergedSize = mergeValuesWithExplicit<LayoutSizeIndex, LayoutSize>(mergedSize, childSize, sizeType, '');\n    } else {\n      mergedSize = childSize;\n    }\n  }\n\n  if (mergedSize) {\n    // If merged, rename size and set size of all children.\n    for (const child of model.children) {\n      model.renameSignal(child.getName(sizeType), model.getName(sizeType));\n      child.component.layoutSize.set(sizeType, 'merged', false);\n    }\n    return mergedSize;\n  } else {\n    // Otherwise, there is no merged size.\n    return {\n      explicit: false,\n      value: undefined\n    };\n  }\n}\n\nexport function parseUnitLayoutSize(model: UnitModel) {\n  const layoutSizeComponent = model.component.layoutSize;\n  if (!layoutSizeComponent.explicit.width) {\n    const width = defaultUnitSize(model, 'width');\n    layoutSizeComponent.set('width', width, false);\n  }\n\n  if (!layoutSizeComponent.explicit.height) {\n    const height = defaultUnitSize(model, 'height');\n    layoutSizeComponent.set('height', height, false);\n  }\n}\n\nfunction defaultUnitSize(model: UnitModel, sizeType: 'width' | 'height'): LayoutSize {\n  const channel = sizeType === 'width' ? 'x' : 'y';\n  const config = model.config;\n  const scaleComponent = model.getScaleComponent(channel);\n\n  if (scaleComponent) {\n    const scaleType = scaleComponent.get('type');\n    const range = scaleComponent.get('range');\n\n    if (hasDiscreteDomain(scaleType) && isVgRangeStep(range)) {\n      // For discrete domain with range.step, use dynamic width/height\n      return 'range-step';\n    } else {\n      return config.view[sizeType];\n    }\n  } else if (model.hasProjection) {\n    return config.view[sizeType];\n  } else {\n    // No scale - set default size\n    if (sizeType === 'width' && model.mark === 'text') {\n      // width for text mark without x-field is a bit wider than typical range step\n      return config.scale.textXRangeStep;\n    }\n\n    // Set width/height equal to rangeStep config or if rangeStep is null, use value from default scale config.\n    return config.scale.rangeStep || defaultScaleConfig.rangeStep;\n  }\n}\n","import {isArray} from 'vega-util';\nimport {Encoding} from '../encoding';\nimport {\n  ChannelDef,\n  Field,\n  FieldDef,\n  hasConditionalFieldDef,\n  isConditionalDef,\n  isFieldDef,\n  isRepeatRef,\n  isSortableFieldDef,\n  ScaleFieldDef,\n  ValueDef\n} from '../fielddef';\nimport * as log from '../log';\nimport {isSortField} from '../sort';\nimport {FacetMapping} from '../spec/facet';\n\nexport interface RepeaterValue {\n  row?: string;\n  column?: string;\n}\n\nexport function replaceRepeaterInFacet(facet: FacetMapping<Field>, repeater: RepeaterValue): FacetMapping<string> {\n  return replaceRepeater(facet, repeater) as FacetMapping<string>;\n}\n\nexport function replaceRepeaterInEncoding(encoding: Encoding<Field>, repeater: RepeaterValue): Encoding<string> {\n  return replaceRepeater(encoding, repeater) as Encoding<string>;\n}\n\n/**\n * Replaces repeated value and returns if the repeated value is valid.\n */\nfunction replaceRepeat<T extends {field?: Field}>(o: T, repeater: RepeaterValue): T {\n  if (isRepeatRef(o.field)) {\n    if (o.field.repeat in repeater) {\n      // any needed to calm down ts compiler\n      return {...(o as any), field: repeater[o.field.repeat]};\n    } else {\n      log.warn(log.message.noSuchRepeatedValue(o.field.repeat));\n      return undefined;\n    }\n  }\n  return o;\n}\n\n/**\n * Replace repeater values in a field def with the concrete field name.\n */\nfunction replaceRepeaterInFieldDef(fieldDef: FieldDef<Field>, repeater: RepeaterValue): FieldDef<string> {\n  fieldDef = replaceRepeat(fieldDef, repeater);\n\n  if (fieldDef === undefined) {\n    // the field def should be ignored\n    return undefined;\n  } else if (fieldDef === null) {\n    return null;\n  }\n\n  if (isSortableFieldDef(fieldDef) && isSortField(fieldDef.sort)) {\n    const sort = replaceRepeat(fieldDef.sort, repeater);\n    fieldDef = {\n      ...fieldDef,\n      ...(sort ? {sort} : {})\n    };\n  }\n\n  return fieldDef as ScaleFieldDef<string>;\n}\n\nfunction replaceRepeaterInChannelDef(channelDef: ChannelDef<FieldDef<Field>>, repeater: RepeaterValue): ChannelDef {\n  if (isFieldDef(channelDef)) {\n    const fd = replaceRepeaterInFieldDef(channelDef, repeater);\n    if (fd) {\n      return fd;\n    } else if (isConditionalDef(channelDef)) {\n      return {condition: channelDef.condition};\n    }\n  } else {\n    if (hasConditionalFieldDef(channelDef)) {\n      const fd = replaceRepeaterInFieldDef(channelDef.condition, repeater);\n      if (fd) {\n        return {\n          ...channelDef,\n          condition: fd\n        } as ChannelDef;\n      } else {\n        const {condition, ...channelDefWithoutCondition} = channelDef;\n        return channelDefWithoutCondition as ChannelDef;\n      }\n    }\n    return channelDef as ValueDef;\n  }\n  return undefined;\n}\n\ntype EncodingOrFacet<F extends Field> = Encoding<F> | FacetMapping<F>;\n\nfunction replaceRepeater(mapping: EncodingOrFacet<Field>, repeater: RepeaterValue): EncodingOrFacet<string> {\n  const out: EncodingOrFacet<string> = {};\n  for (const channel in mapping) {\n    if (mapping.hasOwnProperty(channel)) {\n      const channelDef: ChannelDef<FieldDef<Field>> | ChannelDef<FieldDef<Field>>[] = mapping[channel];\n\n      if (isArray(channelDef)) {\n        // array cannot have condition\n        out[channel] = channelDef.map(cd => replaceRepeaterInChannelDef(cd, repeater)).filter(cd => cd);\n      } else {\n        const cd = replaceRepeaterInChannelDef(channelDef, repeater);\n        if (cd !== undefined) {\n          out[channel] = cd;\n        }\n      }\n    }\n  }\n  return out;\n}\n","import {AggregateOp, LayoutAlign, NewSignal} from 'vega';\nimport {isArray} from 'vega-util';\nimport {Channel, COLUMN, ROW, ScaleChannel} from '../channel';\nimport {Config} from '../config';\nimport {reduce} from '../encoding';\nimport {FieldRefOption, normalize, title as fieldDefTitle, TypedFieldDef, vgField} from '../fielddef';\nimport * as log from '../log';\nimport {hasDiscreteDomain} from '../scale';\nimport {DEFAULT_SORT_OP, EncodingSortField, isSortField, SortOrder} from '../sort';\nimport {NormalizedFacetSpec} from '../spec';\nimport {FacetFieldDef, FacetMapping} from '../spec/facet';\nimport {contains} from '../util';\nimport {isVgRangeStep, VgData, VgLayout, VgMarkGroup} from '../vega.schema';\nimport {assembleAxis} from './axis/assemble';\nimport {buildModel} from './buildmodel';\nimport {assembleFacetData} from './data/assemble';\nimport {sortArrayIndexField} from './data/calculate';\nimport {parseData} from './data/parse';\nimport {getHeaderType, HeaderChannel, HeaderComponent} from './header/index';\nimport {parseChildrenLayoutSize} from './layoutsize/parse';\nimport {Model, ModelWithField} from './model';\nimport {RepeaterValue, replaceRepeaterInFacet} from './repeater';\nimport {parseGuideResolve} from './resolve';\nimport {assembleDomain, getFieldFromDomain} from './scale/domain';\nimport {assembleFacetSignals} from './selection/selection';\n\nexport function facetSortFieldName(\n  fieldDef: FacetFieldDef<string>,\n  sort: EncodingSortField<string>,\n  opt?: FieldRefOption\n) {\n  return vgField(sort, {suffix: `by_${vgField(fieldDef)}`, ...(opt || {})});\n}\n\nexport class FacetModel extends ModelWithField {\n  public readonly type: 'facet' = 'facet';\n  public readonly facet: FacetMapping<string>;\n\n  public readonly child: Model;\n\n  public readonly children: Model[];\n\n  constructor(\n    spec: NormalizedFacetSpec,\n    parent: Model,\n    parentGivenName: string,\n    repeater: RepeaterValue,\n    config: Config\n  ) {\n    super(spec, parent, parentGivenName, config, repeater, spec.resolve);\n\n    this.child = buildModel(spec.spec, this, this.getName('child'), undefined, repeater, config, false);\n    this.children = [this.child];\n\n    const facet: FacetMapping<string> = replaceRepeaterInFacet(spec.facet, repeater);\n\n    this.facet = this.initFacet(facet);\n  }\n\n  private initFacet(facet: FacetMapping<string>): FacetMapping<string> {\n    // clone to prevent side effect to the original spec\n    return reduce(\n      facet,\n      (normalizedFacet, fieldDef: TypedFieldDef<string>, channel: Channel) => {\n        if (!contains([ROW, COLUMN], channel)) {\n          // Drop unsupported channel\n          log.warn(log.message.incompatibleChannel(channel, 'facet'));\n          return normalizedFacet;\n        }\n\n        if (fieldDef.field === undefined) {\n          log.warn(log.message.emptyFieldDef(fieldDef, channel));\n          return normalizedFacet;\n        }\n\n        // Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.\n        normalizedFacet[channel] = normalize(fieldDef, channel);\n        return normalizedFacet;\n      },\n      {}\n    );\n  }\n\n  public channelHasField(channel: Channel): boolean {\n    return !!this.facet[channel];\n  }\n\n  public fieldDef(channel: Channel): TypedFieldDef<string> {\n    return this.facet[channel];\n  }\n\n  public parseData() {\n    this.component.data = parseData(this);\n    this.child.parseData();\n  }\n\n  public parseLayoutSize() {\n    parseChildrenLayoutSize(this);\n  }\n\n  public parseSelection() {\n    // As a facet has a single child, the selection components are the same.\n    // The child maintains its selections to assemble signals, which remain\n    // within its unit.\n    this.child.parseSelection();\n    this.component.selection = this.child.component.selection;\n  }\n\n  public parseMarkGroup() {\n    this.child.parseMarkGroup();\n  }\n\n  public parseAxisAndHeader() {\n    this.child.parseAxisAndHeader();\n\n    this.parseHeader('column');\n    this.parseHeader('row');\n\n    this.mergeChildAxis('x');\n    this.mergeChildAxis('y');\n  }\n\n  private parseHeader(channel: HeaderChannel) {\n    if (this.channelHasField(channel)) {\n      const fieldDef = this.facet[channel];\n      let title = fieldDefTitle(fieldDef, this.config, {allowDisabling: true});\n\n      if (this.child.component.layoutHeaders[channel].title) {\n        // merge title with child to produce \"Title / Subtitle / Sub-subtitle\"\n        title += ' / ' + this.child.component.layoutHeaders[channel].title;\n        this.child.component.layoutHeaders[channel].title = null;\n      }\n\n      this.component.layoutHeaders[channel] = {\n        title,\n        facetFieldDef: fieldDef,\n        // TODO: support adding label to footer as well\n        header: [this.makeHeaderComponent(channel, true)]\n      };\n    }\n  }\n\n  private makeHeaderComponent(channel: HeaderChannel, labels: boolean): HeaderComponent {\n    const sizeType = channel === 'row' ? 'height' : 'width';\n\n    return {\n      labels,\n      sizeSignal: this.child.component.layoutSize.get(sizeType) ? this.child.getSizeSignalRef(sizeType) : undefined,\n      axes: []\n    };\n  }\n\n  private mergeChildAxis(channel: 'x' | 'y') {\n    const {child} = this;\n    if (child.component.axes[channel]) {\n      const {layoutHeaders, resolve} = this.component;\n      resolve.axis[channel] = parseGuideResolve(resolve, channel);\n\n      if (resolve.axis[channel] === 'shared') {\n        // For shared axis, move the axes to facet's header or footer\n        const headerChannel = channel === 'x' ? 'column' : 'row';\n\n        const layoutHeader = layoutHeaders[headerChannel];\n        for (const axisComponent of child.component.axes[channel]) {\n          const headerType = getHeaderType(axisComponent.get('orient'));\n          layoutHeader[headerType] = layoutHeader[headerType] || [this.makeHeaderComponent(headerChannel, false)];\n\n          const mainAxis = assembleAxis(axisComponent, 'main', this.config, {header: true});\n          // LayoutHeader no longer keep track of property precedence, thus let's combine.\n          layoutHeader[headerType][0].axes.push(mainAxis);\n          axisComponent.mainExtracted = true;\n        }\n      } else {\n        // Otherwise do nothing for independent axes\n      }\n    }\n  }\n\n  public assembleSelectionTopLevelSignals(signals: NewSignal[]): NewSignal[] {\n    return this.child.assembleSelectionTopLevelSignals(signals);\n  }\n\n  public assembleSelectionSignals(): NewSignal[] {\n    this.child.assembleSelectionSignals();\n    return [];\n  }\n\n  public assembleSelectionData(data: VgData[]): VgData[] {\n    return this.child.assembleSelectionData(data);\n  }\n\n  private getHeaderLayoutMixins(): VgLayout {\n    const layoutMixins: VgLayout = {};\n\n    ['row', 'column'].forEach((channel: 'row' | 'column') => {\n      ['header', 'footer'].forEach((headerType: 'header' | 'footer') => {\n        const layoutHeaderComponent = this.component.layoutHeaders[channel];\n        const headerComponent = layoutHeaderComponent[headerType];\n        if (headerComponent && headerComponent[0]) {\n          // set header/footerBand\n          const sizeType = channel === 'row' ? 'height' : 'width';\n          const bandType = headerType === 'header' ? 'headerBand' : 'footerBand';\n          if (!this.child.component.layoutSize.get(sizeType)) {\n            // If facet child does not have size signal, then apply headerBand\n            layoutMixins[bandType] = layoutMixins[bandType] || {};\n            layoutMixins[bandType][channel] = 0.5;\n          }\n\n          if (layoutHeaderComponent.title) {\n            layoutMixins.offset = layoutMixins.offset || {};\n            layoutMixins.offset[channel === 'row' ? 'rowTitle' : 'columnTitle'] = 10;\n          }\n        }\n      });\n    });\n    return layoutMixins;\n  }\n\n  protected assembleDefaultLayout(): VgLayout {\n    const columns = this.channelHasField('column') ? this.columnDistinctSignal() : 1;\n\n    let align: LayoutAlign = 'all';\n\n    // Do not align the cells if the scale corresponding to the directin is indepent.\n    // We always align when we facet into both row and column.\n    if (!this.channelHasField('row') && this.component.resolve.scale.x === 'independent') {\n      align = 'none';\n    } else if (!this.channelHasField('column') && this.component.resolve.scale.y === 'independent') {\n      align = 'none';\n    }\n\n    return {\n      ...this.getHeaderLayoutMixins(),\n\n      ...(columns ? {columns} : {}),\n      bounds: 'full',\n      align\n    };\n  }\n\n  public assembleLayoutSignals(): NewSignal[] {\n    // FIXME(https://github.com/vega/vega-lite/issues/1193): this can be incorrect if we have independent scales.\n    return this.child.assembleLayoutSignals();\n  }\n\n  private columnDistinctSignal() {\n    if (this.parent && this.parent instanceof FacetModel) {\n      // For nested facet, we will add columns to group mark instead\n      // See discussion in https://github.com/vega/vega/issues/952\n      // and https://github.com/vega/vega-view/releases/tag/v1.2.6\n      return undefined;\n    } else {\n      // In facetNode.assemble(), the name is always this.getName('column') + '_layout'.\n      const facetLayoutDataName = this.getName('column_domain');\n      return {signal: `length(data('${facetLayoutDataName}'))`};\n    }\n  }\n\n  public assembleGroup(signals: NewSignal[]) {\n    if (this.parent && this.parent instanceof FacetModel) {\n      // Provide number of columns for layout.\n      // See discussion in https://github.com/vega/vega/issues/952\n      // and https://github.com/vega/vega-view/releases/tag/v1.2.6\n      return {\n        ...(this.channelHasField('column')\n          ? {\n              encode: {\n                update: {\n                  // TODO(https://github.com/vega/vega-lite/issues/2759):\n                  // Correct the signal for facet of concat of facet_column\n                  columns: {field: vgField(this.facet.column, {prefix: 'distinct'})}\n                }\n              }\n            }\n          : {}),\n        ...super.assembleGroup(signals)\n      };\n    }\n    return super.assembleGroup(signals);\n  }\n\n  /**\n   * Aggregate cardinality for calculating size\n   */\n  private getCardinalityAggregateForChild() {\n    const fields: string[] = [];\n    const ops: AggregateOp[] = [];\n    const as: string[] = [];\n\n    if (this.child instanceof FacetModel) {\n      if (this.child.channelHasField('column')) {\n        const field = vgField(this.child.facet.column);\n        fields.push(field);\n        ops.push('distinct');\n        as.push(`distinct_${field}`);\n      }\n    } else {\n      for (const channel of ['x', 'y'] as ScaleChannel[]) {\n        const childScaleComponent = this.child.component.scales[channel];\n        if (childScaleComponent && !childScaleComponent.merged) {\n          const type = childScaleComponent.get('type');\n          const range = childScaleComponent.get('range');\n\n          if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n            const domain = assembleDomain(this.child, channel);\n            const field = getFieldFromDomain(domain);\n            if (field) {\n              fields.push(field);\n              ops.push('distinct');\n              as.push(`distinct_${field}`);\n            } else {\n              log.warn('Unknown field for ${channel}.  Cannot calculate view size.');\n            }\n          }\n        }\n      }\n    }\n    return {fields, ops, as};\n  }\n\n  private assembleFacet() {\n    const {name, data} = this.component.data.facetRoot;\n    const {row, column} = this.facet;\n    const {fields, ops, as} = this.getCardinalityAggregateForChild();\n    const groupby: string[] = [];\n\n    ['row', 'column'].forEach((channel: 'row' | 'column') => {\n      const fieldDef = this.facet[channel];\n      if (fieldDef) {\n        groupby.push(vgField(fieldDef));\n        const {sort} = fieldDef;\n        if (isSortField(sort)) {\n          const {field, op = DEFAULT_SORT_OP} = sort;\n          const outputName = facetSortFieldName(fieldDef, sort);\n          if (row && column) {\n            // For crossed facet, use pre-calculate field as it requires a different groupby\n            // For each calculated field, apply max and assign them to the same name as\n            // all values of the same group should be the same anyway.\n            fields.push(outputName);\n            ops.push('max');\n            as.push(outputName);\n          } else {\n            fields.push(field);\n            ops.push(op);\n            as.push(outputName);\n          }\n        } else if (isArray(sort)) {\n          const outputName = sortArrayIndexField(fieldDef, channel);\n          fields.push(outputName);\n          ops.push('max');\n          as.push(outputName);\n        }\n      }\n    });\n\n    const cross = !!row && !!column;\n\n    return {\n      name,\n      data,\n      groupby,\n      ...(cross || fields.length\n        ? {\n            aggregate: {\n              ...(cross ? {cross} : {}),\n              ...(fields.length ? {fields, ops, as} : {})\n            }\n          }\n        : {})\n    };\n  }\n\n  private headerSortFields(channel: 'row' | 'column'): string[] {\n    const {facet} = this;\n    const fieldDef = facet[channel];\n\n    if (fieldDef) {\n      if (isSortField(fieldDef.sort)) {\n        return [facetSortFieldName(fieldDef, fieldDef.sort, {expr: 'datum'})];\n      } else if (isArray(fieldDef.sort)) {\n        return [sortArrayIndexField(fieldDef, channel, {expr: 'datum'})];\n      }\n      return [vgField(fieldDef, {expr: 'datum'})];\n    }\n    return [];\n  }\n\n  private headerSortOrder(channel: 'row' | 'column'): SortOrder[] {\n    const {facet} = this;\n    const fieldDef = facet[channel];\n    if (fieldDef) {\n      const {sort} = fieldDef;\n      const order = (isSortField(sort) ? sort.order : !isArray(sort) && sort) || 'ascending';\n      return [order];\n    }\n    return [];\n  }\n\n  public assembleMarks(): VgMarkGroup[] {\n    const {child} = this;\n\n    // If we facet by two dimensions, we need to add a cross operator to the aggregation\n    // so that we create all groups\n    const facetRoot = this.component.data.facetRoot;\n    const data = assembleFacetData(facetRoot);\n\n    const encodeEntry = child.assembleGroupEncodeEntry(false);\n\n    const title = child.assembleTitle();\n    const style = child.assembleGroupStyle();\n\n    const markGroup = {\n      name: this.getName('cell'),\n      type: 'group',\n      ...(title ? {title} : {}),\n      ...(style ? {style} : {}),\n      from: {\n        facet: this.assembleFacet()\n      },\n      // TODO: move this to after data\n      sort: {\n        field: [...this.headerSortFields('row'), ...this.headerSortFields('column')],\n        order: [...this.headerSortOrder('row'), ...this.headerSortOrder('column')]\n      },\n      ...(data.length > 0 ? {data: data} : {}),\n      ...(encodeEntry ? {encode: {update: encodeEntry}} : {}),\n      ...child.assembleGroup(assembleFacetSignals(this, []))\n    };\n\n    return [markGroup];\n  }\n\n  protected getMapping() {\n    return this.facet;\n  }\n}\n","import {Data, isInlineData, isNamedData, isUrlData, MAIN, ParseValue, RAW} from '../../data';\nimport * as log from '../../log';\nimport {\n  isAggregate,\n  isBin,\n  isCalculate,\n  isFilter,\n  isFlatten,\n  isFold,\n  isImpute,\n  isJoinAggregate,\n  isLookup,\n  isSample,\n  isStack,\n  isTimeUnit,\n  isWindow\n} from '../../transform';\nimport {deepEqual, mergeDeep} from '../../util';\nimport {isFacetModel, isLayerModel, isUnitModel, Model} from '../model';\nimport {requiresSelectionId} from '../selection/selection';\nimport {AggregateNode} from './aggregate';\nimport {BinNode} from './bin';\nimport {CalculateNode} from './calculate';\nimport {DataFlowNode, OutputNode} from './dataflow';\nimport {FacetNode} from './facet';\nimport {FilterNode} from './filter';\nimport {FlattenTransformNode} from './flatten';\nimport {FoldTransformNode} from './fold';\nimport {ParseNode} from './formatparse';\nimport {GeoJSONNode} from './geojson';\nimport {GeoPointNode} from './geopoint';\nimport {IdentifierNode} from './identifier';\nimport {ImputeNode} from './impute';\nimport {AncestorParse, DataComponent} from './index';\nimport {JoinAggregateTransformNode} from './joinaggregate';\nimport {makeJoinAggregateFromFacet} from './joinaggregatefacet';\nimport {LookupNode} from './lookup';\nimport {SampleTransformNode} from './sample';\nimport {SourceNode} from './source';\nimport {StackNode} from './stack';\nimport {TimeUnitNode} from './timeunit';\nimport {WindowTransformNode} from './window';\n\nexport function findSource(data: Data, sources: SourceNode[]) {\n  for (const other of sources) {\n    const otherData = other.data;\n    if (isInlineData(data) && isInlineData(otherData)) {\n      const srcVals = data.values;\n      const otherVals = otherData.values;\n      if (deepEqual(srcVals, otherVals)) {\n        return other;\n      }\n    } else if (isUrlData(data) && isUrlData(otherData)) {\n      if (data.url === otherData.url) {\n        return other;\n      }\n    } else if (isNamedData(data)) {\n      if (data.name === other.dataName) {\n        return other;\n      }\n    }\n  }\n  return null;\n}\n\nfunction parseRoot(model: Model, sources: SourceNode[]): DataFlowNode {\n  if (model.data || !model.parent) {\n    // if the model defines a data source or is the root, create a source node\n\n    const existingSource = findSource(model.data, sources);\n\n    if (existingSource) {\n      existingSource.data.format = mergeDeep({}, model.data.format, existingSource.data.format);\n\n      return existingSource;\n    } else {\n      const source = new SourceNode(model.data);\n      sources.push(source);\n      return source;\n    }\n  } else {\n    // If we don't have a source defined (overriding parent's data), use the parent's facet root or main.\n    return model.parent.component.data.facetRoot\n      ? model.parent.component.data.facetRoot\n      : model.parent.component.data.main;\n  }\n}\n\n/**\n * Parses a transforms array into a chain of connected dataflow nodes.\n */\nexport function parseTransformArray(head: DataFlowNode, model: Model, ancestorParse: AncestorParse): DataFlowNode {\n  let lookupCounter = 0;\n\n  for (const t of model.transforms) {\n    let derivedType: ParseValue = undefined;\n    let transformNode: DataFlowNode;\n\n    if (isCalculate(t)) {\n      transformNode = head = new CalculateNode(head, t);\n      derivedType = 'derived';\n    } else if (isFilter(t)) {\n      transformNode = head = ParseNode.makeImplicitFromFilterTransform(head, t, ancestorParse) || head;\n\n      head = new FilterNode(head, model, t.filter);\n    } else if (isBin(t)) {\n      transformNode = head = BinNode.makeFromTransform(head, t, model);\n      derivedType = 'number';\n    } else if (isTimeUnit(t)) {\n      transformNode = head = TimeUnitNode.makeFromTransform(head, t);\n      derivedType = 'date';\n\n      // Create parse node because the input to time unit is always date.\n      const parsedAs = ancestorParse.getWithExplicit(t.field);\n      if (parsedAs.value === undefined) {\n        head = new ParseNode(head, {[t.field]: derivedType});\n        ancestorParse.set(t.field, derivedType, false);\n      }\n    } else if (isAggregate(t)) {\n      transformNode = head = AggregateNode.makeFromTransform(head, t);\n      derivedType = 'number';\n      if (requiresSelectionId(model)) {\n        head = new IdentifierNode(head);\n      }\n    } else if (isLookup(t)) {\n      transformNode = head = LookupNode.make(head, model, t, lookupCounter++);\n      derivedType = 'derived';\n    } else if (isWindow(t)) {\n      transformNode = head = new WindowTransformNode(head, t);\n      derivedType = 'number';\n    } else if (isJoinAggregate(t)) {\n      transformNode = head = new JoinAggregateTransformNode(head, t);\n      derivedType = 'number';\n    } else if (isStack(t)) {\n      transformNode = head = StackNode.makeFromTransform(head, t);\n      derivedType = 'derived';\n    } else if (isFold(t)) {\n      transformNode = head = new FoldTransformNode(head, t);\n      derivedType = 'derived';\n    } else if (isFlatten(t)) {\n      transformNode = head = new FlattenTransformNode(head, t);\n      derivedType = 'derived';\n    } else if (isSample(t)) {\n      head = new SampleTransformNode(head, t);\n    } else if (isImpute(t)) {\n      transformNode = head = ImputeNode.makeFromTransform(head, t);\n      derivedType = 'derived';\n    } else {\n      log.warn(log.message.invalidTransformIgnored(t));\n      continue;\n    }\n\n    if (transformNode && derivedType !== undefined) {\n      for (const field of transformNode.producedFields()) {\n        ancestorParse.set(field, derivedType, false);\n      }\n    }\n  }\n\n  return head;\n}\n\n/*\nDescription of the dataflow (http://asciiflow.com/):\n     +--------+\n     | Source |\n     +---+----+\n         |\n         v\n     FormatParse\n     (explicit)\n         |\n         v\n     Transforms\n(Filter, Calculate, Binning, TimeUnit, Aggregate, Window, ...)\n         |\n         v\n     FormatParse\n     (implicit)\n         |\n         v\n Binning (in `encoding`)\n         |\n         v\n Timeunit (in `encoding`)\n         |\n         v\nFormula From Sort Array\n         |\n         v\n      +--+--+\n      | Raw |\n      +-----+\n         |\n         v\n  Aggregate (in `encoding`)\n         |\n         v\n  Stack (in `encoding`)\n         |\n         v\n  Invalid Filter\n         |\n         v\n   +----------+\n   |   Main   |\n   +----------+\n         |\n         v\n     +-------+\n     | Facet |----> \"column\", \"column-layout\", and \"row\"\n     +-------+\n         |\n         v\n  ...Child data...\n*/\n\nexport function parseData(model: Model): DataComponent {\n  let head = parseRoot(model, model.component.data.sources);\n\n  const {outputNodes, outputNodeRefCounts} = model.component.data;\n  const ancestorParse = model.parent ? model.parent.component.data.ancestorParse.clone() : new AncestorParse();\n\n  // format.parse: null means disable parsing\n  if (model.data && model.data.format && model.data.format.parse === null) {\n    ancestorParse.parseNothing = true;\n  }\n\n  head = ParseNode.makeExplicit(head, model, ancestorParse) || head;\n\n  // Default discrete selections require an identifier transform to\n  // uniquely identify data points as the _id field is volatile. Add\n  // this transform at the head of our pipeline such that the identifier\n  // field is available for all subsequent datasets. Additional identifier\n  // transforms will be necessary when new tuples are constructed\n  // (e.g., post-aggregation).\n  if (requiresSelectionId(model) && (isUnitModel(model) || isLayerModel(model))) {\n    head = new IdentifierNode(head);\n  }\n\n  // HACK: This is equivalent for merging bin extent for union scale.\n  // FIXME(https://github.com/vega/vega-lite/issues/2270): Correctly merge extent / bin node for shared bin scale\n  const parentIsLayer = model.parent && isLayerModel(model.parent);\n  if (isUnitModel(model) || isFacetModel(model)) {\n    if (parentIsLayer) {\n      head = BinNode.makeFromEncoding(head, model) || head;\n    }\n  }\n\n  if (model.transforms.length > 0) {\n    head = parseTransformArray(head, model, ancestorParse);\n  }\n\n  head = ParseNode.makeImplicitFromEncoding(head, model, ancestorParse) || head;\n\n  if (isUnitModel(model)) {\n    head = GeoJSONNode.parseAll(head, model);\n    head = GeoPointNode.parseAll(head, model);\n  }\n\n  if (isUnitModel(model) || isFacetModel(model)) {\n    if (!parentIsLayer) {\n      head = BinNode.makeFromEncoding(head, model) || head;\n    }\n\n    head = TimeUnitNode.makeFromEncoding(head, model) || head;\n    head = CalculateNode.parseAllForSortIndex(head, model);\n  }\n\n  // add an output node pre aggregation\n  const rawName = model.getName(RAW);\n  const raw = new OutputNode(head, rawName, RAW, outputNodeRefCounts);\n  outputNodes[rawName] = raw;\n  head = raw;\n\n  if (isUnitModel(model)) {\n    const agg = AggregateNode.makeFromEncoding(head, model);\n    if (agg) {\n      head = agg;\n\n      if (requiresSelectionId(model)) {\n        head = new IdentifierNode(head);\n      }\n    }\n    head = ImputeNode.makeFromEncoding(head, model) || head;\n    head = StackNode.makeFromEncoding(head, model) || head;\n  }\n\n  // output node for marks\n  const mainName = model.getName(MAIN);\n  const main = new OutputNode(head, mainName, MAIN, outputNodeRefCounts);\n  outputNodes[mainName] = main;\n  head = main;\n\n  // add facet marker\n  let facetRoot = null;\n  if (isFacetModel(model)) {\n    const facetName = model.getName('facet');\n\n    // Derive new sort index field for facet's sort array\n    head = CalculateNode.parseAllForSortIndex(head, model);\n\n    // Derive new aggregate for facet's sort field\n    // augment data source with new fields for crossed facet\n    head = makeJoinAggregateFromFacet(head, model.facet) || head;\n\n    facetRoot = new FacetNode(head, model, facetName, main.getSource());\n    outputNodes[facetName] = facetRoot;\n    head = facetRoot;\n  }\n  return {\n    ...model.component.data,\n    outputNodes,\n    outputNodeRefCounts,\n    raw,\n    main,\n    facetRoot,\n    ancestorParse\n  };\n}\n","import {vgField} from '../../fielddef';\nimport {DEFAULT_SORT_OP, isSortField} from '../../sort';\nimport {FacetMapping} from '../../spec/facet';\nimport {facetSortFieldName} from '../facet';\nimport {DataFlowNode} from './dataflow';\nimport {JoinAggregateTransformNode} from './joinaggregate';\n\nexport function makeJoinAggregateFromFacet(\n  parent: DataFlowNode,\n  facet: FacetMapping<string>\n): JoinAggregateTransformNode {\n  const {row, column} = facet;\n  if (row && column) {\n    let newParent = null;\n    // only need to make one for crossed facet\n    for (const fieldDef of [row, column]) {\n      if (isSortField(fieldDef.sort)) {\n        const {field, op = DEFAULT_SORT_OP} = fieldDef.sort;\n        parent = newParent = new JoinAggregateTransformNode(parent, {\n          joinaggregate: [\n            {\n              op,\n              field,\n              as: facetSortFieldName(fieldDef, fieldDef.sort, {forAs: true})\n            }\n          ],\n          groupby: [vgField(fieldDef)]\n        });\n      }\n    }\n    return newParent;\n  }\n  return null;\n}\n","import {NewSignal} from 'vega';\nimport {Config} from '../config';\nimport {Resolve} from '../resolve';\nimport {BaseSpec} from '../spec';\nimport {keys} from '../util';\nimport {VgData} from '../vega.schema';\nimport {parseData} from './data/parse';\nimport {assembleLayoutSignals} from './layoutsize/assemble';\nimport {Model} from './model';\nimport {RepeaterValue} from './repeater';\n\nexport abstract class BaseConcatModel extends Model {\n  constructor(\n    spec: BaseSpec,\n    parent: Model,\n    parentGivenName: string,\n    config: Config,\n    repeater: RepeaterValue,\n    resolve: Resolve\n  ) {\n    super(spec, parent, parentGivenName, config, repeater, resolve);\n  }\n\n  public parseData() {\n    this.component.data = parseData(this);\n    this.children.forEach(child => {\n      child.parseData();\n    });\n  }\n  public parseSelection() {\n    // Merge selections up the hierarchy so that they may be referenced\n    // across unit specs. Persist their definitions within each child\n    // to assemble signals which remain within output Vega unit groups.\n    this.component.selection = {};\n    for (const child of this.children) {\n      child.parseSelection();\n      keys(child.component.selection).forEach(key => {\n        this.component.selection[key] = child.component.selection[key];\n      });\n    }\n  }\n\n  public parseMarkGroup() {\n    for (const child of this.children) {\n      child.parseMarkGroup();\n    }\n  }\n\n  public parseAxisAndHeader() {\n    for (const child of this.children) {\n      child.parseAxisAndHeader();\n    }\n\n    // TODO(#2415): support shared axes\n  }\n\n  public assembleSelectionTopLevelSignals(signals: NewSignal[]): NewSignal[] {\n    return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);\n  }\n\n  public assembleSelectionSignals(): NewSignal[] {\n    this.children.forEach(child => child.assembleSelectionSignals());\n    return [];\n  }\n\n  public assembleLayoutSignals(): NewSignal[] {\n    return this.children.reduce((signals, child) => {\n      return [...signals, ...child.assembleLayoutSignals()];\n    }, assembleLayoutSignals(this));\n  }\n\n  public assembleSelectionData(data: VgData[]): VgData[] {\n    return this.children.reduce((db, child) => child.assembleSelectionData(db), data);\n  }\n\n  public assembleMarks(): any[] {\n    // only children have marks\n    return this.children.map(child => {\n      const title = child.assembleTitle();\n      const style = child.assembleGroupStyle();\n      const encodeEntry = child.assembleGroupEncodeEntry(false);\n\n      return {\n        type: 'group',\n        name: child.getName('group'),\n        ...(title ? {title} : {}),\n        ...(style ? {style} : {}),\n        ...(encodeEntry ? {encode: {update: encodeEntry}} : {}),\n        ...child.assembleGroup()\n      };\n    });\n  }\n}\n","import {Config} from '../config';\nimport * as log from '../log';\nimport {isVConcatSpec, NormalizedConcatSpec} from '../spec';\nimport {VgLayout} from '../vega.schema';\nimport {BaseConcatModel} from './baseconcat';\nimport {buildModel} from './buildmodel';\nimport {parseConcatLayoutSize} from './layoutsize/parse';\nimport {Model} from './model';\nimport {RepeaterValue} from './repeater';\n\nexport class ConcatModel extends BaseConcatModel {\n  public readonly type: 'concat' = 'concat';\n\n  public readonly children: Model[];\n\n  public readonly isVConcat: boolean;\n\n  constructor(\n    spec: NormalizedConcatSpec,\n    parent: Model,\n    parentGivenName: string,\n    repeater: RepeaterValue,\n    config: Config\n  ) {\n    super(spec, parent, parentGivenName, config, repeater, spec.resolve);\n\n    if (spec.resolve && spec.resolve.axis && (spec.resolve.axis.x === 'shared' || spec.resolve.axis.y === 'shared')) {\n      log.warn(log.message.CONCAT_CANNOT_SHARE_AXIS);\n    }\n\n    this.isVConcat = isVConcatSpec(spec);\n\n    this.children = (isVConcatSpec(spec) ? spec.vconcat : spec.hconcat).map((child, i) => {\n      return buildModel(child, this, this.getName('concat_' + i), undefined, repeater, config, false);\n    });\n  }\n\n  public parseLayoutSize() {\n    parseConcatLayoutSize(this);\n  }\n\n  public parseAxisGroup(): void {\n    return null;\n  }\n\n  protected assembleDefaultLayout(): VgLayout {\n    return {\n      ...(this.isVConcat ? {columns: 1} : {}),\n      bounds: 'full',\n      // Use align each so it can work with multiple plots with different size\n      align: 'each'\n    };\n  }\n}\n","import {Axis as VgAxis} from 'vega';\nimport {Axis, AxisPart} from '../../axis';\nimport {FieldDefBase} from '../../fielddef';\nimport {duplicate, Omit} from '../../util';\nimport {Split} from '../split';\n\nfunction isFalseOrNull(v: any) {\n  return v === false || v === null;\n}\n\nexport interface AxisComponentProps extends Omit<VgAxis, 'title'> {\n  title: string | FieldDefBase<string>[];\n}\n\nexport class AxisComponent extends Split<AxisComponentProps> {\n  constructor(\n    public readonly explicit: Partial<AxisComponentProps> = {},\n    public readonly implicit: Partial<AxisComponentProps> = {},\n    public mainExtracted = false\n  ) {\n    super();\n  }\n\n  public clone() {\n    return new AxisComponent(duplicate(this.explicit), duplicate(this.implicit), this.mainExtracted);\n  }\n\n  public hasAxisPart(part: AxisPart) {\n    // FIXME(https://github.com/vega/vega-lite/issues/2552) this method can be wrong if users use a Vega theme.\n\n    if (part === 'axis') {\n      // always has the axis container part\n      return true;\n    }\n\n    if (part === 'grid' || part === 'title') {\n      return !!this.get(part);\n    }\n    // Other parts are enabled by default, so they should not be false or null.\n    return !isFalseOrNull(this.get(part));\n  }\n}\n\nexport interface AxisComponentIndex {\n  x?: AxisComponent[];\n  y?: AxisComponent[];\n}\n\nexport interface AxisIndex {\n  x?: Axis;\n  y?: Axis;\n}\n","import {PositionScaleChannel} from '../../channel';\nimport {Config} from '../../config';\nimport {ScaleType} from '../../scale';\n\nexport function getAxisConfig(\n  property: string,\n  config: Config,\n  channel: PositionScaleChannel,\n  orient: string = '',\n  scaleType: ScaleType\n) {\n  // configTypes to loop, starting from higher precedence\n  const configTypes = (scaleType === 'band' ? ['axisBand'] : []).concat([\n    channel === 'x' ? 'axisX' : 'axisY',\n    'axis' + orient.substr(0, 1).toUpperCase() + orient.substr(1), // axisTop, axisBottom, ...\n    'axis'\n  ]);\n  for (const configType of configTypes) {\n    if (config[configType] && config[configType][property] !== undefined) {\n      return config[configType][property];\n    }\n  }\n\n  return undefined;\n}\n","import {Align, AxisOrient, SignalRef} from 'vega';\nimport {Axis} from '../../axis';\nimport {isBinning} from '../../bin';\nimport {PositionScaleChannel, X, Y} from '../../channel';\nimport {TypedFieldDef, valueArray} from '../../fielddef';\nimport * as log from '../../log';\nimport {hasDiscreteDomain, ScaleType} from '../../scale';\nimport {NOMINAL, ORDINAL} from '../../type';\nimport {contains} from '../../util';\nimport {UnitModel} from '../unit';\nimport {getAxisConfig} from './config';\n\n// TODO: we need to refactor this method after we take care of config refactoring\n/**\n * Default rules for whether to show a grid should be shown for a channel.\n * If `grid` is unspecified, the default value is `true` for ordinal scales that are not binned\n */\nexport function defaultGrid(scaleType: ScaleType, fieldDef: TypedFieldDef<string>) {\n  return !hasDiscreteDomain(scaleType) && !isBinning(fieldDef.bin);\n}\n\nexport function gridScale(model: UnitModel, channel: PositionScaleChannel) {\n  const gridChannel: PositionScaleChannel = channel === 'x' ? 'y' : 'x';\n  if (model.getScaleComponent(gridChannel)) {\n    return model.scaleName(gridChannel);\n  }\n  return undefined;\n}\n\nexport function labelAngle(\n  model: UnitModel,\n  specifiedAxis: Axis,\n  channel: PositionScaleChannel,\n  fieldDef: TypedFieldDef<string>\n) {\n  // try axis value\n  if (specifiedAxis.labelAngle !== undefined) {\n    // Make angle within [0,360)\n    return ((specifiedAxis.labelAngle % 360) + 360) % 360;\n  } else {\n    // try axis config value\n    const angle = getAxisConfig(\n      'labelAngle',\n      model.config,\n      channel,\n      orient(channel),\n      model.getScaleComponent(channel).get('type')\n    );\n    if (angle !== undefined) {\n      return ((angle % 360) + 360) % 360;\n    } else {\n      // get default value\n      if (channel === X && contains([NOMINAL, ORDINAL], fieldDef.type)) {\n        return 270;\n      }\n      // no default\n      return undefined;\n    }\n  }\n}\n\nexport function defaultLabelBaseline(angle: number, axisOrient: AxisOrient) {\n  if (angle !== undefined) {\n    if (axisOrient === 'top' || axisOrient === 'bottom') {\n      if (angle <= 45 || 315 <= angle) {\n        return axisOrient === 'top' ? 'bottom' : 'top';\n      } else if (135 <= angle && angle <= 225) {\n        return axisOrient === 'top' ? 'top' : 'bottom';\n      } else {\n        return 'middle';\n      }\n    } else {\n      if (angle <= 45 || 315 <= angle || (135 <= angle && angle <= 225)) {\n        return 'middle';\n      } else if (45 <= angle && angle <= 135) {\n        return axisOrient === 'left' ? 'top' : 'bottom';\n      } else {\n        return axisOrient === 'left' ? 'bottom' : 'top';\n      }\n    }\n  }\n  return undefined;\n}\n\nexport function defaultLabelAlign(angle: number, axisOrient: AxisOrient): Align {\n  if (angle !== undefined) {\n    angle = ((angle % 360) + 360) % 360;\n    if (axisOrient === 'top' || axisOrient === 'bottom') {\n      if (angle % 180 === 0) {\n        return 'center';\n      } else if (0 < angle && angle < 180) {\n        return axisOrient === 'top' ? 'right' : 'left';\n      } else {\n        return axisOrient === 'top' ? 'left' : 'right';\n      }\n    } else {\n      if ((angle + 90) % 180 === 0) {\n        return 'center';\n      } else if (90 <= angle && angle < 270) {\n        return axisOrient === 'left' ? 'left' : 'right';\n      } else {\n        return axisOrient === 'left' ? 'right' : 'left';\n      }\n    }\n  }\n  return undefined;\n}\n\nexport function defaultLabelFlush(fieldDef: TypedFieldDef<string>, channel: PositionScaleChannel) {\n  if (channel === 'x' && contains(['quantitative', 'temporal'], fieldDef.type)) {\n    return true;\n  }\n  return undefined;\n}\n\nexport function defaultLabelOverlap(fieldDef: TypedFieldDef<string>, scaleType: ScaleType) {\n  // do not prevent overlap for nominal data because there is no way to infer what the missing labels are\n  if (fieldDef.type !== 'nominal') {\n    if (scaleType === 'log') {\n      return 'greedy';\n    }\n    return true;\n  }\n  return undefined;\n}\n\nexport function orient(channel: PositionScaleChannel) {\n  switch (channel) {\n    case X:\n      return 'bottom';\n    case Y:\n      return 'left';\n  }\n  /* istanbul ignore next: This should never happen. */\n  throw new Error(log.message.INVALID_CHANNEL_FOR_AXIS);\n}\n\nexport function defaultTickCount({\n  fieldDef,\n  scaleType,\n  size,\n  scaleName,\n  specifiedAxis = {}\n}: {\n  fieldDef: TypedFieldDef<string>;\n  scaleType: ScaleType;\n  size?: SignalRef;\n  scaleName?: string;\n  specifiedAxis?: Axis;\n}) {\n  if (\n    !hasDiscreteDomain(scaleType) &&\n    scaleType !== 'log' &&\n    !contains(['month', 'hours', 'day', 'quarter'], fieldDef.timeUnit)\n  ) {\n    if (isBinning(fieldDef.bin)) {\n      // for binned data, we don't want more ticks than maxbins\n      return {signal: `ceil(${size.signal}/10)`};\n    }\n    return {signal: `ceil(${size.signal}/40)`};\n  }\n\n  return undefined;\n}\n\nexport function values(\n  specifiedAxis: Axis,\n  model: UnitModel,\n  fieldDef: TypedFieldDef<string>,\n  channel: PositionScaleChannel\n) {\n  const vals = specifiedAxis.values;\n\n  if (vals) {\n    return valueArray(fieldDef, vals);\n  }\n\n  return undefined;\n}\n","import {Axis as VgAxis, AxisEncode as VgAxisEncode, AxisOrient, SignalRef} from 'vega';\nimport {Axis, AXIS_PARTS, isAxisProperty, VG_AXIS_PROPERTIES} from '../../axis';\nimport {isBinned} from '../../bin';\nimport {POSITION_SCALE_CHANNELS, PositionScaleChannel, X, Y} from '../../channel';\nimport {FieldDefBase, toFieldDefBase} from '../../fielddef';\nimport {getFirstDefined, keys} from '../../util';\nimport {mergeTitle, mergeTitleComponent, mergeTitleFieldDefs, numberFormat} from '../common';\nimport {guideEncodeEntry} from '../guide';\nimport {LayerModel} from '../layer';\nimport {parseGuideResolve} from '../resolve';\nimport {defaultTieBreaker, Explicit, mergeValuesWithExplicit} from '../split';\nimport {UnitModel} from '../unit';\nimport {AxisComponent, AxisComponentIndex, AxisComponentProps} from './component';\nimport {getAxisConfig} from './config';\nimport * as encode from './encode';\nimport * as properties from './properties';\n\nexport function parseUnitAxis(model: UnitModel): AxisComponentIndex {\n  return POSITION_SCALE_CHANNELS.reduce(\n    (axis, channel) => {\n      if (model.component.scales[channel] && model.axis(channel)) {\n        axis[channel] = [parseAxis(channel, model)];\n      }\n      return axis;\n    },\n    {} as AxisComponentIndex\n  );\n}\n\nconst OPPOSITE_ORIENT: {[K in AxisOrient]: AxisOrient} = {\n  bottom: 'top',\n  top: 'bottom',\n  left: 'right',\n  right: 'left'\n};\n\nexport function parseLayerAxis(model: LayerModel) {\n  const {axes, resolve} = model.component;\n  const axisCount: {\n    // Using Mapped Type to declare type (https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types)\n    [k in AxisOrient]: number\n  } = {top: 0, bottom: 0, right: 0, left: 0};\n\n  for (const child of model.children) {\n    child.parseAxisAndHeader();\n\n    for (const channel of keys(child.component.axes)) {\n      resolve.axis[channel] = parseGuideResolve(model.component.resolve, channel);\n      if (resolve.axis[channel] === 'shared') {\n        // If the resolve says shared (and has not been overridden)\n        // We will try to merge and see if there is a conflict\n\n        axes[channel] = mergeAxisComponents(axes[channel], child.component.axes[channel]);\n\n        if (!axes[channel]) {\n          // If merge returns nothing, there is a conflict so we cannot make the axis shared.\n          // Thus, mark axis as independent and remove the axis component.\n          resolve.axis[channel] = 'independent';\n          delete axes[channel];\n        }\n      }\n    }\n  }\n\n  // Move axes to layer's axis component and merge shared axes\n  for (const channel of [X, Y]) {\n    for (const child of model.children) {\n      if (!child.component.axes[channel]) {\n        // skip if the child does not have a particular axis\n        continue;\n      }\n\n      if (resolve.axis[channel] === 'independent') {\n        // If axes are independent, concat the axisComponent array.\n        axes[channel] = (axes[channel] || []).concat(child.component.axes[channel]);\n\n        // Automatically adjust orient\n        for (const axisComponent of child.component.axes[channel]) {\n          const {value: orient, explicit} = axisComponent.getWithExplicit('orient');\n          if (axisCount[orient] > 0 && !explicit) {\n            // Change axis orient if the number do not match\n            const oppositeOrient = OPPOSITE_ORIENT[orient];\n            if (axisCount[orient] > axisCount[oppositeOrient]) {\n              axisComponent.set('orient', oppositeOrient, false);\n            }\n          }\n          axisCount[orient]++;\n\n          // TODO(https://github.com/vega/vega-lite/issues/2634): automatically add extra offset?\n        }\n      }\n\n      // After merging, make sure to remove axes from child\n      delete child.component.axes[channel];\n    }\n  }\n}\n\nfunction mergeAxisComponents(mergedAxisCmpts: AxisComponent[], childAxisCmpts: AxisComponent[]): AxisComponent[] {\n  if (mergedAxisCmpts) {\n    // FIXME: this is a bit wrong once we support multiple axes\n    if (mergedAxisCmpts.length !== childAxisCmpts.length) {\n      return undefined; // Cannot merge axis component with different number of axes.\n    }\n    const length = mergedAxisCmpts.length;\n    for (let i = 0; i < length; i++) {\n      const merged = mergedAxisCmpts[i];\n      const child = childAxisCmpts[i];\n\n      if (!!merged !== !!child) {\n        return undefined;\n      } else if (merged && child) {\n        const mergedOrient = merged.getWithExplicit('orient');\n        const childOrient = child.getWithExplicit('orient');\n\n        if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {\n          // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)\n\n          // Cannot merge due to inconsistent orient\n          return undefined;\n        } else {\n          mergedAxisCmpts[i] = mergeAxisComponent(merged, child);\n        }\n      }\n    }\n  } else {\n    // For first one, return a copy of the child\n    return childAxisCmpts.map(axisComponent => axisComponent.clone());\n  }\n  return mergedAxisCmpts;\n}\n\nfunction mergeAxisComponent(merged: AxisComponent, child: AxisComponent): AxisComponent {\n  for (const prop of VG_AXIS_PROPERTIES) {\n    const mergedValueWithExplicit = mergeValuesWithExplicit<VgAxis, any>(\n      merged.getWithExplicit(prop),\n      child.getWithExplicit(prop),\n      prop,\n      'axis',\n\n      // Tie breaker function\n      (v1: Explicit<any>, v2: Explicit<any>) => {\n        switch (prop) {\n          case 'title':\n            return mergeTitleComponent(v1, v2);\n          case 'gridScale':\n            return {\n              explicit: v1.explicit, // keep the old explicit\n              value: getFirstDefined(v1.value, v2.value)\n            };\n        }\n        return defaultTieBreaker<VgAxis, any>(v1, v2, prop, 'axis');\n      }\n    );\n    merged.setWithExplicit(prop, mergedValueWithExplicit);\n  }\n  return merged;\n}\n\nfunction getFieldDefTitle(model: UnitModel, channel: 'x' | 'y') {\n  const channel2 = channel === 'x' ? 'x2' : 'y2';\n  const fieldDef = model.fieldDef(channel);\n  const fieldDef2 = model.fieldDef(channel2);\n\n  const title1 = fieldDef ? fieldDef.title : undefined;\n  const title2 = fieldDef2 ? fieldDef2.title : undefined;\n\n  if (title1 && title2) {\n    return mergeTitle(title1, title2);\n  } else if (title1) {\n    return title1;\n  } else if (title2) {\n    return title2;\n  } else if (title1 !== undefined) {\n    // falsy value to disable config\n    return title1;\n  } else if (title2 !== undefined) {\n    // falsy value to disable config\n    return title2;\n  }\n\n  return undefined;\n}\n\nfunction isExplicit<T extends string | number | object | boolean>(\n  value: T,\n  property: keyof VgAxis,\n  axis: Axis,\n  model: UnitModel,\n  channel: PositionScaleChannel\n) {\n  switch (property) {\n    case 'values':\n      return !!axis.values;\n    // specified axis.values is already respected, but may get transformed.\n    case 'encode':\n      // both VL axis.encoding and axis.labelAngle affect VG axis.encode\n      return !!axis.encoding || !!axis.labelAngle;\n    case 'title':\n      // title can be explicit if fieldDef.title is set\n      if (value === getFieldDefTitle(model, channel)) {\n        return true;\n      }\n  }\n  // Otherwise, things are explicit if the returned value matches the specified property\n  return value === axis[property];\n}\n\nfunction parseAxis(channel: PositionScaleChannel, model: UnitModel): AxisComponent {\n  const axis = model.axis(channel);\n\n  const axisComponent = new AxisComponent();\n\n  // 1.2. Add properties\n  VG_AXIS_PROPERTIES.forEach(property => {\n    const value = getProperty(property, axis, channel, model);\n    if (value !== undefined) {\n      const explicit = isExplicit(value, property, axis, model, channel);\n\n      const configValue = getAxisConfig(\n        property,\n        model.config,\n        channel,\n        axisComponent.get('orient'),\n        model.getScaleComponent(channel).get('type')\n      );\n\n      // only set property if it is explicitly set or has no config value (otherwise we will accidentally override config)\n      if (explicit || configValue === undefined) {\n        // Do not apply implicit rule if there is a config value\n        axisComponent.set(property, value, explicit);\n      } else if (property === 'grid' && configValue) {\n        // Grid is an exception because we need to set grid = true to generate another grid axis\n        axisComponent.set(property, configValue, false);\n      }\n    }\n  });\n\n  // 2) Add guide encode definition groups\n  const axisEncoding = axis.encoding || {};\n  const axisEncode = AXIS_PARTS.reduce(\n    (e: VgAxisEncode, part) => {\n      if (!axisComponent.hasAxisPart(part)) {\n        // No need to create encode for a disabled part.\n        return e;\n      }\n\n      const axisEncodingPart = guideEncodeEntry(axisEncoding[part] || {}, model);\n\n      const value =\n        part === 'labels'\n          ? encode.labels(model, channel, axisEncodingPart, axisComponent.get('orient'))\n          : axisEncodingPart;\n\n      if (value !== undefined && keys(value).length > 0) {\n        e[part] = {update: value};\n      }\n      return e;\n    },\n    {} as VgAxisEncode\n  );\n\n  // FIXME: By having encode as one property, we won't have fine grained encode merging.\n  if (keys(axisEncode).length > 0) {\n    axisComponent.set('encode', axisEncode, !!axis.encoding || axis.labelAngle !== undefined);\n  }\n\n  return axisComponent;\n}\n\nfunction getProperty<K extends keyof AxisComponentProps>(\n  property: K,\n  specifiedAxis: Axis,\n  channel: PositionScaleChannel,\n  model: UnitModel\n): AxisComponentProps[K] {\n  const fieldDef = model.fieldDef(channel);\n\n  // Some properties depend on labelAngle so we have to declare it here.\n  // Also, we don't use `getFirstDefined` for labelAngle\n  // as we want to normalize specified value to be within [0,360)\n  const labelAngle = properties.labelAngle(model, specifiedAxis, channel, fieldDef);\n\n  switch (property) {\n    case 'scale':\n      return model.scaleName(channel);\n    case 'gridScale':\n      return properties.gridScale(model, channel);\n    case 'format':\n      // We don't include temporal field here as we apply format in encode block\n      return numberFormat(fieldDef, specifiedAxis.format, model.config);\n    case 'grid': {\n      if (isBinned(model.fieldDef(channel).bin)) {\n        return false;\n      } else {\n        const scaleType = model.getScaleComponent(channel).get('type');\n        return getFirstDefined(specifiedAxis.grid, properties.defaultGrid(scaleType, fieldDef));\n      }\n    }\n    case 'labelAlign':\n      return getFirstDefined(\n        specifiedAxis.labelAlign,\n        properties.defaultLabelAlign(labelAngle, properties.orient(channel))\n      );\n    case 'labelAngle':\n      return labelAngle;\n    case 'labelBaseline':\n      return getFirstDefined(\n        specifiedAxis.labelBaseline,\n        properties.defaultLabelBaseline(labelAngle, properties.orient(channel))\n      );\n    case 'labelFlush':\n      return getFirstDefined(specifiedAxis.labelFlush, properties.defaultLabelFlush(fieldDef, channel));\n    case 'labelOverlap': {\n      const scaleType = model.getScaleComponent(channel).get('type');\n      return getFirstDefined(specifiedAxis.labelOverlap, properties.defaultLabelOverlap(fieldDef, scaleType));\n    }\n    case 'orient':\n      return getFirstDefined(specifiedAxis.orient, properties.orient(channel));\n    case 'tickCount': {\n      const scaleType = model.getScaleComponent(channel).get('type');\n      const scaleName = model.scaleName(channel);\n      const sizeType = channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;\n      const size = sizeType ? model.getSizeSignalRef(sizeType) : undefined;\n      return getFirstDefined<number | SignalRef>(\n        specifiedAxis.tickCount,\n        properties.defaultTickCount({fieldDef, scaleType, size, scaleName, specifiedAxis})\n      );\n    }\n    case 'title':\n      const channel2 = channel === 'x' ? 'x2' : 'y2';\n      const fieldDef2 = model.fieldDef(channel2);\n      // Keep undefined so we use default if title is unspecified.\n      // For other falsy value, keep them so we will hide the title.\n      return getFirstDefined<string | FieldDefBase<string>[]>(\n        specifiedAxis.title,\n        getFieldDefTitle(model, channel), // If title not specified, store base parts of fieldDef (and fieldDef2 if exists)\n        mergeTitleFieldDefs([toFieldDefBase(fieldDef)], fieldDef2 ? [toFieldDefBase(fieldDef2)] : [])\n      );\n\n    case 'values':\n      return properties.values(specifiedAxis, model, fieldDef, channel);\n  }\n  // Otherwise, return specified property.\n  return isAxisProperty(property) ? specifiedAxis[property] : undefined;\n}\n","import {AxisOrient} from 'vega';\nimport {PositionScaleChannel} from '../../channel';\nimport {isTimeFieldDef} from '../../fielddef';\nimport {ScaleType} from '../../scale';\nimport {keys} from '../../util';\nimport {timeFormatExpression} from '../common';\nimport {UnitModel} from '../unit';\n\nexport function labels(model: UnitModel, channel: PositionScaleChannel, specifiedLabelsSpec: any, orient: AxisOrient) {\n  const fieldDef =\n    model.fieldDef(channel) ||\n    (channel === 'x' ? model.fieldDef('x2') : channel === 'y' ? model.fieldDef('y2') : undefined);\n  const axis = model.axis(channel);\n  const config = model.config;\n\n  let labelsSpec: any = {};\n\n  // Text\n  if (isTimeFieldDef(fieldDef)) {\n    const isUTCScale = model.getScaleComponent(channel).get('type') === ScaleType.UTC;\n\n    const expr = timeFormatExpression(\n      'datum.value',\n      fieldDef.timeUnit,\n      axis.format,\n      config.axis.shortTimeLabels,\n      null,\n      isUTCScale\n    );\n\n    if (expr) {\n      labelsSpec.text = {signal: expr};\n    }\n  }\n\n  labelsSpec = {\n    ...labelsSpec,\n    ...specifiedLabelsSpec\n  };\n\n  return keys(labelsSpec).length === 0 ? undefined : labelsSpec;\n}\n","import {isBinned, isBinning} from '../../bin';\nimport {Config} from '../../config';\nimport {Encoding, isAggregate} from '../../encoding';\nimport {isContinuous, isFieldDef, TypedFieldDef} from '../../fielddef';\nimport * as log from '../../log';\nimport {AREA, BAR, CIRCLE, isMarkDef, LINE, Mark, MarkDef, POINT, RECT, RULE, SQUARE, TEXT, TICK} from '../../mark';\nimport {QUANTITATIVE, TEMPORAL} from '../../type';\nimport {contains, getFirstDefined} from '../../util';\nimport {Orient} from '../../vega.schema';\nimport {getMarkConfig} from '../common';\n\nexport function normalizeMarkDef(mark: Mark | MarkDef, encoding: Encoding<string>, config: Config) {\n  const markDef: MarkDef = isMarkDef(mark) ? {...mark} : {type: mark};\n\n  // set orient, which can be overridden by rules as sometimes the specified orient is invalid.\n  const specifiedOrient = markDef.orient || getMarkConfig('orient', markDef, config);\n  markDef.orient = orient(markDef.type, encoding, specifiedOrient);\n  if (specifiedOrient !== undefined && specifiedOrient !== markDef.orient) {\n    log.warn(log.message.orientOverridden(markDef.orient, specifiedOrient));\n  }\n\n  // set opacity and filled if not specified in mark config\n  const specifiedOpacity = getFirstDefined(markDef.opacity, getMarkConfig('opacity', markDef, config));\n  if (specifiedOpacity === undefined) {\n    markDef.opacity = opacity(markDef.type, encoding);\n  }\n\n  const specifiedFilled = markDef.filled;\n  if (specifiedFilled === undefined) {\n    markDef.filled = filled(markDef, config);\n  }\n\n  // set cursor, which should be pointer if href channel is present unless otherwise specified\n  const specifiedCursor = markDef.cursor || getMarkConfig('cursor', markDef, config);\n  if (specifiedCursor === undefined) {\n    markDef.cursor = cursor(markDef, encoding, config);\n  }\n\n  return markDef;\n}\n\nfunction cursor(markDef: MarkDef, encoding: Encoding<string>, config: Config) {\n  if (encoding.href || markDef.href || getMarkConfig('href', markDef, config)) {\n    return 'pointer';\n  }\n  return markDef.cursor;\n}\n\nfunction opacity(mark: Mark, encoding: Encoding<string>) {\n  if (contains([POINT, TICK, CIRCLE, SQUARE], mark)) {\n    // point-based marks\n    if (!isAggregate(encoding)) {\n      return 0.7;\n    }\n  }\n  return undefined;\n}\n\nfunction filled(markDef: MarkDef, config: Config) {\n  const filledConfig = getMarkConfig('filled', markDef, config);\n  const mark = markDef.type;\n  return getFirstDefined(filledConfig, mark !== POINT && mark !== LINE && mark !== RULE);\n}\n\nfunction orient(mark: Mark, encoding: Encoding<string>, specifiedOrient: Orient): Orient {\n  switch (mark) {\n    case POINT:\n    case CIRCLE:\n    case SQUARE:\n    case TEXT:\n    case RECT:\n      // orient is meaningless for these marks.\n      return undefined;\n  }\n\n  const {x, y, x2, y2} = encoding;\n\n  switch (mark) {\n    case BAR:\n      if (isFieldDef(x) && isBinned(x.bin)) {\n        return 'vertical';\n      }\n      if (isFieldDef(y) && isBinned(y.bin)) {\n        return 'horizontal';\n      }\n      if (y2 || x2) {\n        // Ranged bar does not always have clear orientation, so we allow overriding\n        if (specifiedOrient) {\n          return specifiedOrient;\n        }\n\n        // If y is range and x is non-range, non-bin Q, y is likely a prebinned field\n        if (!x2 && isFieldDef(x) && x.type === QUANTITATIVE && !isBinning(x.bin)) {\n          return 'horizontal';\n        }\n\n        // If x is range and y is non-range, non-bin Q, x is likely a prebinned field\n        if (!y2 && isFieldDef(y) && y.type === QUANTITATIVE && !isBinning(y.bin)) {\n          return 'vertical';\n        }\n      }\n    /* tslint:disable */\n    case RULE: // intentionally fall through\n      // return undefined for line segment rule and bar with both axis ranged\n      if (x2 && y2) {\n        return undefined;\n      }\n\n    case AREA: // intentionally fall through\n      // If there are range for both x and y, y (vertical) has higher precedence.\n      if (y2) {\n        if (isFieldDef(y) && isBinned(y.bin)) {\n          return 'horizontal';\n        } else {\n          return 'vertical';\n        }\n      } else if (x2) {\n        if (isFieldDef(x) && isBinned(x.bin)) {\n          return 'vertical';\n        } else {\n          return 'horizontal';\n        }\n      } else if (mark === RULE) {\n        if (encoding.x && !encoding.y) {\n          return 'vertical';\n        } else if (encoding.y && !encoding.x) {\n          return 'horizontal';\n        }\n      }\n\n    case LINE: // intentional fall through\n    case TICK: // Tick is opposite to bar, line, area and never have ranged mark.\n      /* tslint:enable */\n      const xIsContinuous = isFieldDef(encoding.x) && isContinuous(encoding.x);\n      const yIsContinuous = isFieldDef(encoding.y) && isContinuous(encoding.y);\n      if (xIsContinuous && !yIsContinuous) {\n        return mark !== 'tick' ? 'horizontal' : 'vertical';\n      } else if (!xIsContinuous && yIsContinuous) {\n        return mark !== 'tick' ? 'vertical' : 'horizontal';\n      } else if (xIsContinuous && yIsContinuous) {\n        const xDef = encoding.x as TypedFieldDef<string>; // we can cast here since they are surely fieldDef\n        const yDef = encoding.y as TypedFieldDef<string>;\n\n        const xIsTemporal = xDef.type === TEMPORAL;\n        const yIsTemporal = yDef.type === TEMPORAL;\n\n        // temporal without timeUnit is considered continuous, but better serves as dimension\n        if (xIsTemporal && !yIsTemporal) {\n          return mark !== 'tick' ? 'vertical' : 'horizontal';\n        } else if (!xIsTemporal && yIsTemporal) {\n          return mark !== 'tick' ? 'horizontal' : 'vertical';\n        }\n\n        if (!xDef.aggregate && yDef.aggregate) {\n          return mark !== 'tick' ? 'vertical' : 'horizontal';\n        } else if (xDef.aggregate && !yDef.aggregate) {\n          return mark !== 'tick' ? 'horizontal' : 'vertical';\n        }\n\n        if (specifiedOrient) {\n          // When ambiguous, use user specified one.\n          return specifiedOrient;\n        }\n\n        return 'vertical';\n      } else {\n        // Discrete x Discrete case\n        if (specifiedOrient) {\n          // When ambiguous, use user specified one.\n          return specifiedOrient;\n        }\n\n        return undefined;\n      }\n  }\n  return 'vertical';\n}\n","import {NewSignal} from 'vega';\nimport {Axis} from '../axis';\nimport {\n  Channel,\n  GEOPOSITION_CHANNELS,\n  NONPOSITION_SCALE_CHANNELS,\n  SCALE_CHANNELS,\n  ScaleChannel,\n  SingleDefChannel,\n  supportLegend,\n  X,\n  Y\n} from '../channel';\nimport {Config} from '../config';\nimport {Encoding, normalizeEncoding} from '../encoding';\nimport * as vlEncoding from '../encoding';\nimport {getTypedFieldDef, hasConditionalFieldDef, isFieldDef, TypedFieldDef} from '../fielddef';\nimport {Legend} from '../legend';\nimport {GEOSHAPE, isMarkDef, Mark, MarkDef} from '../mark';\nimport {Projection} from '../projection';\nimport {Domain, Scale} from '../scale';\nimport {SelectionDef} from '../selection';\nimport {LayoutSizeMixins, NormalizedUnitSpec} from '../spec';\nimport {stack, StackProperties} from '../stack';\nimport {Dict, duplicate} from '../util';\nimport {VgData, VgLayout} from '../vega.schema';\nimport {AxisIndex} from './axis/component';\nimport {parseUnitAxis} from './axis/parse';\nimport {parseData} from './data/parse';\nimport {assembleLayoutSignals} from './layoutsize/assemble';\nimport {parseUnitLayoutSize} from './layoutsize/parse';\nimport {LegendIndex} from './legend/component';\nimport {normalizeMarkDef} from './mark/init';\nimport {parseMarkGroup} from './mark/mark';\nimport {isLayerModel, Model, ModelWithField} from './model';\nimport {RepeaterValue, replaceRepeaterInEncoding} from './repeater';\nimport {ScaleIndex} from './scale/component';\nimport {\n  assembleTopLevelSignals,\n  assembleUnitSelectionData,\n  assembleUnitSelectionMarks,\n  assembleUnitSelectionSignals,\n  parseUnitSelection\n} from './selection/selection';\n\n/**\n * Internal model of Vega-Lite specification for the compiler.\n */\nexport class UnitModel extends ModelWithField {\n  public readonly type: 'unit' = 'unit';\n  public readonly markDef: MarkDef;\n  public readonly encoding: Encoding<string>;\n\n  public readonly specifiedScales: ScaleIndex = {};\n\n  public readonly stack: StackProperties;\n\n  protected specifiedAxes: AxisIndex = {};\n\n  protected specifiedLegends: LegendIndex = {};\n\n  public specifiedProjection: Projection = {};\n\n  public readonly selection: Dict<SelectionDef> = {};\n  public children: Model[] = [];\n\n  constructor(\n    spec: NormalizedUnitSpec,\n    parent: Model,\n    parentGivenName: string,\n    parentGivenSize: LayoutSizeMixins = {},\n    repeater: RepeaterValue,\n    config: Config,\n    public fit: boolean\n  ) {\n    super(spec, parent, parentGivenName, config, repeater, undefined, spec.view);\n\n    this.initSize({\n      ...parentGivenSize,\n      ...(spec.width ? {width: spec.width} : {}),\n      ...(spec.height ? {height: spec.height} : {})\n    });\n    const mark = isMarkDef(spec.mark) ? spec.mark.type : spec.mark;\n\n    const encoding = (this.encoding = normalizeEncoding(\n      replaceRepeaterInEncoding(spec.encoding || {}, repeater),\n      mark\n    ));\n\n    this.markDef = normalizeMarkDef(spec.mark, encoding, config);\n\n    // calculate stack properties\n    this.stack = stack(mark, encoding, this.config.stack);\n    this.specifiedScales = this.initScales(mark, encoding);\n\n    this.specifiedAxes = this.initAxes(encoding);\n    this.specifiedLegends = this.initLegend(encoding);\n    this.specifiedProjection = spec.projection;\n\n    // Selections will be initialized upon parse.\n    this.selection = spec.selection;\n  }\n\n  public get hasProjection(): boolean {\n    const {encoding} = this;\n    const isGeoShapeMark = this.mark === GEOSHAPE;\n    const hasGeoPosition = encoding && GEOPOSITION_CHANNELS.some(channel => isFieldDef(encoding[channel]));\n    return isGeoShapeMark || hasGeoPosition;\n  }\n\n  /**\n   * Return specified Vega-lite scale domain for a particular channel\n   * @param channel\n   */\n  public scaleDomain(channel: ScaleChannel): Domain {\n    const scale = this.specifiedScales[channel];\n    return scale ? scale.domain : undefined;\n  }\n\n  public axis(channel: Channel): Axis {\n    return this.specifiedAxes[channel];\n  }\n\n  public legend(channel: Channel): Legend {\n    return this.specifiedLegends[channel];\n  }\n\n  private initScales(mark: Mark, encoding: Encoding<string>): ScaleIndex {\n    return SCALE_CHANNELS.reduce(\n      (scales, channel) => {\n        let fieldDef: TypedFieldDef<string>;\n        let specifiedScale: Scale;\n\n        const channelDef = encoding[channel];\n\n        if (isFieldDef(channelDef)) {\n          fieldDef = channelDef;\n          specifiedScale = channelDef.scale;\n        } else if (hasConditionalFieldDef(channelDef)) {\n          fieldDef = channelDef.condition;\n          specifiedScale = channelDef.condition['scale'];\n        }\n\n        if (fieldDef) {\n          scales[channel] = specifiedScale || {};\n        }\n        return scales;\n      },\n      {} as ScaleIndex\n    );\n  }\n\n  private initAxes(encoding: Encoding<string>): AxisIndex {\n    return [X, Y].reduce((_axis, channel) => {\n      // Position Axis\n\n      // TODO: handle ConditionFieldDef\n      const channelDef = encoding[channel];\n      if (\n        isFieldDef(channelDef) ||\n        (channel === X && isFieldDef(encoding.x2)) ||\n        (channel === Y && isFieldDef(encoding.y2))\n      ) {\n        const axisSpec = isFieldDef(channelDef) ? channelDef.axis : null;\n\n        if (axisSpec !== null) {\n          _axis[channel] = {\n            ...axisSpec\n          };\n        }\n      }\n      return _axis;\n    }, {});\n  }\n\n  private initLegend(encoding: Encoding<string>): LegendIndex {\n    return NONPOSITION_SCALE_CHANNELS.reduce((_legend, channel) => {\n      const channelDef = encoding[channel];\n      if (channelDef) {\n        const legend = isFieldDef(channelDef)\n          ? channelDef.legend\n          : hasConditionalFieldDef(channelDef)\n          ? channelDef.condition['legend']\n          : null;\n\n        if (legend !== null && legend !== false && supportLegend(channel)) {\n          _legend[channel] = {...legend};\n        }\n      }\n\n      return _legend;\n    }, {});\n  }\n\n  public parseData() {\n    this.component.data = parseData(this);\n  }\n\n  public parseLayoutSize() {\n    parseUnitLayoutSize(this);\n  }\n\n  public parseSelection() {\n    this.component.selection = parseUnitSelection(this, this.selection);\n  }\n\n  public parseMarkGroup() {\n    this.component.mark = parseMarkGroup(this);\n  }\n\n  public parseAxisAndHeader() {\n    this.component.axes = parseUnitAxis(this);\n  }\n\n  public assembleSelectionTopLevelSignals(signals: any[]): NewSignal[] {\n    return assembleTopLevelSignals(this, signals);\n  }\n\n  public assembleSelectionSignals(): NewSignal[] {\n    return assembleUnitSelectionSignals(this, []);\n  }\n\n  public assembleSelectionData(data: VgData[]): VgData[] {\n    return assembleUnitSelectionData(this, data);\n  }\n\n  public assembleLayout(): VgLayout {\n    return null;\n  }\n\n  public assembleLayoutSignals(): NewSignal[] {\n    return assembleLayoutSignals(this);\n  }\n\n  public assembleMarks() {\n    let marks = this.component.mark || [];\n\n    // If this unit is part of a layer, selections should augment\n    // all in concert rather than each unit individually. This\n    // ensures correct interleaving of clipping and brushed marks.\n    if (!this.parent || !isLayerModel(this.parent)) {\n      marks = assembleUnitSelectionMarks(this, marks);\n    }\n\n    return marks.map(this.correctDataNames);\n  }\n\n  protected getMapping() {\n    return this.encoding;\n  }\n\n  public toSpec(excludeConfig?: any, excludeData?: any) {\n    const encoding = duplicate(this.encoding);\n    let spec: any;\n\n    spec = {\n      mark: this.markDef,\n      encoding: encoding\n    };\n\n    if (!excludeConfig) {\n      spec.config = duplicate(this.config);\n    }\n\n    if (!excludeData) {\n      spec.data = duplicate(this.data);\n    }\n\n    // remove defaults\n    return spec;\n  }\n\n  public get mark(): Mark {\n    return this.markDef.type;\n  }\n\n  public channelHasField(channel: Channel) {\n    return vlEncoding.channelHasField(this.encoding, channel);\n  }\n\n  public fieldDef(channel: SingleDefChannel) {\n    const channelDef = this.encoding[channel];\n    return getTypedFieldDef<string>(channelDef);\n  }\n}\n","import {Legend as VgLegend, NewSignal, Title as VgTitle} from 'vega';\nimport {Config} from '../config';\nimport * as log from '../log';\nimport {isLayerSpec, isUnitSpec, LayoutSizeMixins, NormalizedLayerSpec} from '../spec';\nimport {flatten, keys} from '../util';\nimport {VgData, VgLayout} from '../vega.schema';\nimport {parseLayerAxis} from './axis/parse';\nimport {parseData} from './data/parse';\nimport {assembleLayoutSignals} from './layoutsize/assemble';\nimport {parseLayerLayoutSize} from './layoutsize/parse';\nimport {assembleLegends} from './legend/assemble';\nimport {Model} from './model';\nimport {RepeaterValue} from './repeater';\nimport {assembleLayerSelectionMarks} from './selection/selection';\nimport {UnitModel} from './unit';\n\nexport class LayerModel extends Model {\n  public readonly type: 'layer' = 'layer';\n\n  // HACK: This should be (LayerModel | UnitModel)[], but setting the correct type leads to weird error.\n  // So I'm just putting generic Model for now.\n  public readonly children: Model[];\n\n  constructor(\n    spec: NormalizedLayerSpec,\n    parent: Model,\n    parentGivenName: string,\n    parentGivenSize: LayoutSizeMixins,\n    repeater: RepeaterValue,\n    config: Config,\n    fit: boolean\n  ) {\n    super(spec, parent, parentGivenName, config, repeater, spec.resolve, spec.view);\n\n    const layoutSize = {\n      ...parentGivenSize,\n      ...(spec.width ? {width: spec.width} : {}),\n      ...(spec.height ? {height: spec.height} : {})\n    };\n\n    this.initSize(layoutSize);\n\n    this.children = spec.layer.map((layer, i) => {\n      if (isLayerSpec(layer)) {\n        return new LayerModel(layer, this, this.getName('layer_' + i), layoutSize, repeater, config, fit);\n      }\n\n      if (isUnitSpec(layer)) {\n        return new UnitModel(layer, this, this.getName('layer_' + i), layoutSize, repeater, config, fit);\n      }\n\n      throw new Error(log.message.INVALID_SPEC);\n    });\n  }\n\n  public parseData() {\n    this.component.data = parseData(this);\n    for (const child of this.children) {\n      child.parseData();\n    }\n  }\n\n  public parseLayoutSize() {\n    parseLayerLayoutSize(this);\n  }\n\n  public parseSelection() {\n    // Merge selections up the hierarchy so that they may be referenced\n    // across unit specs. Persist their definitions within each child\n    // to assemble signals which remain within output Vega unit groups.\n    this.component.selection = {};\n    for (const child of this.children) {\n      child.parseSelection();\n      keys(child.component.selection).forEach(key => {\n        this.component.selection[key] = child.component.selection[key];\n      });\n    }\n  }\n\n  public parseMarkGroup() {\n    for (const child of this.children) {\n      child.parseMarkGroup();\n    }\n  }\n\n  public parseAxisAndHeader() {\n    parseLayerAxis(this);\n  }\n\n  public assembleSelectionTopLevelSignals(signals: NewSignal[]): NewSignal[] {\n    return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);\n  }\n\n  // TODO: Support same named selections across children.\n  public assembleSelectionSignals(): NewSignal[] {\n    return this.children.reduce((signals, child) => {\n      return signals.concat(child.assembleSelectionSignals());\n    }, []);\n  }\n\n  public assembleLayoutSignals(): NewSignal[] {\n    return this.children.reduce((signals, child) => {\n      return signals.concat(child.assembleLayoutSignals());\n    }, assembleLayoutSignals(this));\n  }\n\n  public assembleSelectionData(data: VgData[]): VgData[] {\n    return this.children.reduce((db, child) => child.assembleSelectionData(db), data);\n  }\n\n  public assembleTitle(): VgTitle {\n    let title = super.assembleTitle();\n    if (title) {\n      return title;\n    }\n    // If title does not provide layer, look into children\n    for (const child of this.children) {\n      title = child.assembleTitle();\n      if (title) {\n        return title;\n      }\n    }\n    return undefined;\n  }\n\n  public assembleLayout(): VgLayout {\n    return null;\n  }\n\n  public assembleMarks(): any[] {\n    return assembleLayerSelectionMarks(\n      this,\n      flatten(\n        this.children.map(child => {\n          return child.assembleMarks();\n        })\n      )\n    );\n  }\n\n  public assembleLegends(): VgLegend[] {\n    return this.children.reduce((legends, child) => {\n      return legends.concat(child.assembleLegends());\n    }, assembleLegends(this));\n  }\n}\n","import {Config} from '../config';\nimport * as log from '../log';\nimport {NormalizedRepeatSpec} from '../spec';\nimport {Repeat} from '../spec/repeat';\nimport {VgLayout} from '../vega.schema';\nimport {BaseConcatModel} from './baseconcat';\nimport {buildModel} from './buildmodel';\nimport {parseRepeatLayoutSize} from './layoutsize/parse';\nimport {Model} from './model';\nimport {RepeaterValue} from './repeater';\n\nexport class RepeatModel extends BaseConcatModel {\n  public readonly type: 'repeat' = 'repeat';\n  public readonly repeat: Repeat;\n\n  public readonly children: Model[];\n\n  constructor(\n    spec: NormalizedRepeatSpec,\n    parent: Model,\n    parentGivenName: string,\n    repeatValues: RepeaterValue,\n    config: Config\n  ) {\n    super(spec, parent, parentGivenName, config, repeatValues, spec.resolve);\n\n    if (spec.resolve && spec.resolve.axis && (spec.resolve.axis.x === 'shared' || spec.resolve.axis.y === 'shared')) {\n      log.warn(log.message.REPEAT_CANNOT_SHARE_AXIS);\n    }\n\n    this.repeat = spec.repeat;\n    this.children = this._initChildren(spec, this.repeat, repeatValues, config);\n  }\n\n  private _initChildren(spec: NormalizedRepeatSpec, repeat: Repeat, repeater: RepeaterValue, config: Config): Model[] {\n    const children: Model[] = [];\n    const row = repeat.row || [repeater ? repeater.row : null];\n    const column = repeat.column || [repeater ? repeater.column : null];\n\n    // cross product\n    for (const rowField of row) {\n      for (const columnField of column) {\n        const name =\n          (rowField ? `__repeat_row_${rowField}` : '') + (columnField ? `__repeat_column_${columnField}` : '');\n\n        const childRepeat = {\n          row: rowField,\n          column: columnField\n        };\n\n        children.push(buildModel(spec.spec, this, this.getName('child' + name), undefined, childRepeat, config, false));\n      }\n    }\n\n    return children;\n  }\n\n  public parseLayoutSize() {\n    parseRepeatLayoutSize(this);\n  }\n\n  protected assembleDefaultLayout(): VgLayout {\n    return {\n      columns: this.repeat && this.repeat.column ? this.repeat.column.length : 1,\n      bounds: 'full',\n      align: 'all'\n    };\n  }\n}\n","import {Config} from '../config';\nimport * as log from '../log';\nimport {\n  isConcatSpec,\n  isFacetSpec,\n  isLayerSpec,\n  isRepeatSpec,\n  isUnitSpec,\n  LayoutSizeMixins,\n  NormalizedSpec\n} from '../spec';\nimport {ConcatModel} from './concat';\nimport {FacetModel} from './facet';\nimport {LayerModel} from './layer';\nimport {Model} from './model';\nimport {RepeatModel} from './repeat';\nimport {RepeaterValue} from './repeater';\nimport {UnitModel} from './unit';\n\nexport function buildModel(\n  spec: NormalizedSpec,\n  parent: Model,\n  parentGivenName: string,\n  unitSize: LayoutSizeMixins,\n  repeater: RepeaterValue,\n  config: Config,\n  fit: boolean\n): Model {\n  if (isFacetSpec(spec)) {\n    return new FacetModel(spec, parent, parentGivenName, repeater, config);\n  }\n\n  if (isLayerSpec(spec)) {\n    return new LayerModel(spec, parent, parentGivenName, unitSize, repeater, config, fit);\n  }\n\n  if (isUnitSpec(spec)) {\n    return new UnitModel(spec, parent, parentGivenName, unitSize, repeater, config, fit);\n  }\n\n  if (isRepeatSpec(spec)) {\n    return new RepeatModel(spec, parent, parentGivenName, repeater, config);\n  }\n\n  if (isConcatSpec(spec)) {\n    return new ConcatModel(spec, parent, parentGivenName, repeater, config);\n  }\n\n  throw new Error(log.message.INVALID_SPEC);\n}\n","import {Config} from './config';\nimport {extractTransformsFromEncoding} from './encoding';\nimport {NormalizedSpec} from './spec';\nimport {SpecMapper} from './spec/map';\nimport {GenericUnitSpec} from './spec/unit';\n\nclass TransformExtractMapper extends SpecMapper<{config: Config}, GenericUnitSpec<any, any>> {\n  public mapUnit(spec: GenericUnitSpec<any, any>, {config}: {config: Config}) {\n    if (spec.encoding) {\n      const {encoding: oldEncoding, transform: oldTransforms} = spec;\n      const {bins, timeUnits, aggregate, groupby, encoding} = extractTransformsFromEncoding(oldEncoding, config);\n\n      const transform = [\n        ...(oldTransforms ? oldTransforms : []),\n        ...bins,\n        ...timeUnits,\n        ...(!aggregate.length ? [] : [{aggregate, groupby}])\n      ];\n\n      return {\n        ...spec,\n        ...(transform.length > 0 ? {transform} : {}),\n        encoding\n      };\n    } else {\n      return spec;\n    }\n  }\n}\n\nconst extractor = new TransformExtractMapper();\n\n/**\n * Modifies spec extracting transformations from encoding and moving them to the transforms array\n */\nexport function extractTransforms(spec: NormalizedSpec, config: Config): NormalizedSpec {\n  return extractor.map(spec, {config});\n}\n","import pkg from '../package.json';\nimport * as aggregate from './aggregate';\nimport * as axis from './axis';\nimport * as bin from './bin';\nimport * as channel from './channel';\nimport * as compositeMark from './compositemark';\nimport * as config from './config';\nimport * as data from './data';\nimport * as datetime from './datetime';\nimport * as encoding from './encoding';\nimport * as fieldDef from './fielddef';\nimport * as header from './header';\nimport * as legend from './legend';\nimport * as mark from './mark';\nimport {normalize} from './normalize';\nimport * as scale from './scale';\nimport * as sort from './sort';\nimport * as spec from './spec';\nimport * as stack from './stack';\nimport * as timeUnit from './timeunit';\nimport * as transform from './transform';\nimport * as type from './type';\nimport * as util from './util';\nimport * as validate from './validate';\nexport {compile} from './compile/compile';\nexport {Config} from './config';\nexport {TopLevelSpec} from './spec';\nexport {extractTransforms} from './transformextract';\nexport {\n  aggregate,\n  axis,\n  bin,\n  channel,\n  compositeMark,\n  config,\n  data,\n  datetime,\n  encoding,\n  fieldDef,\n  header,\n  legend,\n  mark,\n  normalize,\n  scale,\n  sort,\n  spec,\n  stack,\n  timeUnit,\n  transform,\n  type,\n  util,\n  validate,\n  version\n};\n\nconst version = pkg.version;\n","import {Spec as VgSpec} from 'vega';\nimport {Config, initConfig, stripAndRedirectConfig} from '../config';\nimport * as vlFieldDef from '../fielddef';\nimport * as log from '../log';\nimport {normalize} from '../normalize/index';\nimport {isLayerSpec, isUnitSpec, LayoutSizeMixins, TopLevel, TopLevelSpec} from '../spec';\nimport {\n  AutoSizeParams,\n  Datasets,\n  extractTopLevelProperties,\n  normalizeAutoSize,\n  TopLevelProperties\n} from '../spec/toplevel';\nimport {keys, mergeDeep} from '../util';\nimport {buildModel} from './buildmodel';\nimport {assembleRootData} from './data/assemble';\nimport {optimizeDataflow} from './data/optimize';\nimport {Model} from './model';\n\nexport interface CompileOptions {\n  config?: Config;\n  logger?: log.LoggerInterface;\n\n  fieldTitle?: vlFieldDef.FieldTitleFormatter;\n}\n\n/**\n * Vega-Lite's main function, for compiling Vega-lite spec into Vega spec.\n *\n * At a high-level, we make the following transformations in different phases:\n *\n * Input spec\n *     |\n *     |  (Normalization)\n *     v\n * Normalized Spec (Row/Column channels in single-view specs becomes faceted specs, composite marks becomes layered specs.)\n *     |\n *     |  (Build Model)\n *     v\n * A model tree of the spec\n *     |\n *     |  (Parse)\n *     v\n * A model tree with parsed components (intermediate structure of visualization primitives in a format that can be easily merged)\n *     |\n *     | (Optimize)\n *     v\n * A model tree with parsed components with the data component optimized\n *     |\n *     | (Assemble)\n *     v\n * Vega spec\n */\nexport function compile(inputSpec: TopLevelSpec, opt: CompileOptions = {}) {\n  // 0. Augment opt with default opts\n  if (opt.logger) {\n    // set the singleton logger to the provided logger\n    log.set(opt.logger);\n  }\n\n  if (opt.fieldTitle) {\n    // set the singleton field title formatter\n    vlFieldDef.setTitleFormatter(opt.fieldTitle);\n  }\n\n  try {\n    // 1. Initialize config by deep merging default config with the config provided via option and the input spec.\n    const config = initConfig(mergeDeep({}, opt.config, inputSpec.config));\n\n    // 2. Normalize: Convert input spec -> normalized spec\n\n    // - Decompose all extended unit specs into composition of unit spec.  For example, a box plot get expanded into multiple layers of bars, ticks, and rules. The shorthand row/column channel is also expanded to a facet spec.\n    const spec = normalize(inputSpec, config);\n    // - Normalize autosize to be a autosize properties object.\n    const autosize = normalizeAutoSize(inputSpec.autosize, config.autosize, isLayerSpec(spec) || isUnitSpec(spec));\n\n    // 3. Build Model: normalized spec -> Model (a tree structure)\n\n    // This phases instantiates the models with default config by doing a top-down traversal. This allows us to pass properties that child models derive from their parents via their constructors.\n    // See the abstract `Model` class and its children (UnitModel, LayerModel, FacetModel, RepeatModel, ConcatModel) for different types of models.\n    const model: Model = buildModel(spec, null, '', undefined, undefined, config, autosize.type === 'fit');\n\n    // 4 Parse: Model --> Model with components\n\n    // Note that components = intermediate representations that are equivalent to Vega specs.\n    // We need these intermediate representation because we need to merge many visualization \"components\" like projections, scales, axes, and legends.\n    // We will later convert these components into actual Vega specs in the assemble phase.\n\n    // In this phase, we do a bottom-up traversal over the whole tree to\n    // parse for each type of components once (e.g., data, layout, mark, scale).\n    // By doing bottom-up traversal, we start parsing components of unit specs and\n    // then merge child components of parent composite specs.\n    //\n    // Please see inside model.parse() for order of different components parsed.\n    model.parse();\n\n    // 5. Optimize the dataflow.  This will modify the data component of the model.\n    optimizeDataflow(model.component.data);\n\n    // 6. Assemble: convert model components --> Vega Spec.\n    return assembleTopLevelModel(\n      model,\n      getTopLevelProperties(inputSpec, config, autosize),\n      inputSpec.datasets,\n      inputSpec.usermeta\n    );\n  } finally {\n    // Reset the singleton logger if a logger is provided\n    if (opt.logger) {\n      log.reset();\n    }\n    // Reset the singleton field title formatter if provided\n    if (opt.fieldTitle) {\n      vlFieldDef.resetTitleFormatter();\n    }\n  }\n}\n\nfunction getTopLevelProperties(topLevelSpec: TopLevel<any>, config: Config, autosize: AutoSizeParams) {\n  return {\n    autosize: keys(autosize).length === 1 && autosize.type ? autosize.type : autosize,\n    ...extractTopLevelProperties(config),\n    ...extractTopLevelProperties(topLevelSpec)\n  };\n}\n\n/*\n * Assemble the top-level model.\n *\n * Note: this couldn't be `model.assemble()` since the top-level model\n * needs some special treatment to generate top-level properties.\n */\nfunction assembleTopLevelModel(\n  model: Model,\n  topLevelProperties: TopLevelProperties & LayoutSizeMixins,\n  datasets: Datasets = {},\n  usermeta: object\n) {\n  // TODO: change type to become VgSpec\n\n  // Config with Vega-Lite only config removed.\n  const vgConfig = model.config ? stripAndRedirectConfig(model.config) : undefined;\n\n  const data = [].concat(\n    model.assembleSelectionData([]),\n    // only assemble data in the root\n    assembleRootData(model.component.data, datasets)\n  );\n\n  const projections = model.assembleProjections();\n  const title = model.assembleTitle();\n  const style = model.assembleGroupStyle();\n  const encodeEntry = model.assembleGroupEncodeEntry(true);\n\n  let layoutSignals = model.assembleLayoutSignals();\n\n  // move width and height signals with values to top level\n  layoutSignals = layoutSignals.filter(signal => {\n    if ((signal.name === 'width' || signal.name === 'height') && signal.value !== undefined) {\n      topLevelProperties[signal.name] = +signal.value;\n      return false;\n    }\n    return true;\n  });\n\n  const output: VgSpec = {\n    $schema: 'https://vega.github.io/schema/vega/v5.json',\n    ...(model.description ? {description: model.description} : {}),\n    ...topLevelProperties,\n    ...(title ? {title} : {}),\n    ...(style ? {style} : {}),\n    ...(encodeEntry ? {encode: {update: encodeEntry}} : {}),\n    data,\n    ...(projections.length > 0 ? {projections: projections} : {}),\n    ...model.assembleGroup([...layoutSignals, ...model.assembleSelectionTopLevelSignals([])]),\n    ...(vgConfig ? {config: vgConfig} : {}),\n    ...(usermeta ? {usermeta} : {})\n  };\n\n  return {\n    spec: output\n    // TODO: add warning / errors here\n  };\n}\n"]}