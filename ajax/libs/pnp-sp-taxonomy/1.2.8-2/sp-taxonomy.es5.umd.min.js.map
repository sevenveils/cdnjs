{"version":3,"file":"sp-taxonomy.es5.umd.min.js","sources":["../../../../node_modules/tslib/tslib.es6.js","../../../../packages/sp-taxonomy/src/types.ts","../../../../packages/sp-taxonomy/src/labels.ts","../../../../packages/sp-taxonomy/src/terms.ts","../../../../packages/sp-taxonomy/src/termsets.ts","../../../../packages/sp-taxonomy/src/termgroup.ts","../../../../packages/sp-taxonomy/src/termstores.ts","../../../../packages/sp-taxonomy/src/session.ts","../../../../packages/sp-taxonomy/src/taxonomy.ts","../../../../packages/sp-taxonomy/src/utilities.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum StringMatchOption {\n    StartsWith = 0,\n    ExactMatch = 1,\n}\n\nexport interface TimeSpan {\n    Days: number;\n    Hours: number;\n    Milliseconds: number;\n    Minutes: number;\n    Seconds: number;\n    Ticks: number;\n    TotalDays: number;\n    TotalHours: number;\n    TotalMilliseconds: number;\n    TotalMinutes: number;\n    TotalSeconds: number;\n}\n\nexport interface ILabelMatchInfo {\n    DefaultLabelOnly?: boolean;\n    ExcludeKeyword?: boolean;\n    Lcid?: number;\n    ResultCollectionSize?: number;\n    StringMatchOption?: StringMatchOption;\n    TermLabel: string;\n    TrimDeprecated?: boolean;\n    TrimUnavailable?: boolean;\n}\n\nexport enum ChangedItemType {\n    Unknown,\n    Term,\n    TermSet,\n    Group,\n    TermStore,\n    Site,\n}\n\nexport enum ChangedOperationType {\n    Unknown,\n    Add,\n    Edit,\n    DeleteObject,\n    Move,\n    Copy,\n    PathChange,\n    Merge,\n    ImportObject,\n    Restore,\n}\n\nexport interface ChangedItem {\n    ChangedBy: string;\n    ChangedTime: string;\n    Id: string;\n    ItemType: ChangedItemType;\n    Operation: ChangedOperationType;\n\n    // Changed Site\n    SiteId?: string;\n    TermId?: string;\n\n    // Changed Term\n    ChangedCustomProperties?: string[];\n    ChangedLocalCustomProperties?: string[];\n    LcidsForChangedDescriptions?: number[];\n    LcidsForChangedLabels?: number[];\n\n    // Changed Term & Site\n    TermSetId?: string;\n\n    // Changed Termset\n    FromGroupId?: string;\n\n    // Changed Termset and Term\n    GroupId?: string;\n\n    // Changed TermStore\n    ChangedLanguage?: number;\n    IsDefaultLanguageChanged?: boolean;\n    IsFullFarmRestore?: boolean;\n}\n\nexport interface ChangeInformation {\n    ItemType?: ChangedItemType;\n    OperationType?: ChangedOperationType;\n    StartTime?: string;\n    WithinTimeSpan?: TimeSpan;\n}\n","import {\n    ClientSvcQueryable,\n    IClientSvcQueryable,\n    MethodParams,\n    ObjectPathQueue,\n    property,\n} from \"@pnp/sp-clientsvc\";\nimport { stringIsNullOrEmpty } from \"@pnp/common\";\n\n/**\n * Represents a collection of labels\n */\nexport interface ILabels extends IClientSvcQueryable {\n    /**\n     * Gets a label from the collection by its value\n     * \n     * @param value The value to retrieve\n     */\n    getByValue(value: string): ILabel;\n    /**\n     * Loads the data and merges with with the ILabel instances\n     */\n    get(): Promise<(ILabel & ILabelData)[]>;\n}\n\n/**\n * Represents a collection of labels\n */\nexport class Labels extends ClientSvcQueryable implements ILabels {\n\n    constructor(parent: ClientSvcQueryable | string = \"\", _objectPaths: ObjectPathQueue | null = null) {\n        super(parent, _objectPaths);\n\n        this._objectPaths.add(property(\"Labels\"));\n    }\n\n    /**\n     * Gets a label from the collection by its value\n     * \n     * @param value The value to retrieve\n     */\n    public getByValue(value: string): ILabel {\n\n        const params = MethodParams.build().string(value);\n        return this.getChild(Label, \"GetByValue\", params);\n    }\n\n    /**\n     * Loads the data and merges with with the ILabel instances\n     */\n    public get(): Promise<(ILabel & ILabelData)[]> {\n        return this.sendGetCollection<ILabelData, ILabel>((d: ILabelData) => {\n\n            if (!stringIsNullOrEmpty(d.Value)) {\n                return this.getByValue(d.Value);\n            }\n            throw Error(\"Could not find Value in Labels.get(). You must include at least one of these in your select fields.\");\n        });\n    }\n}\n\n/**\n * Represents the data contained in a label\n */\nexport interface ILabelData {\n    /**\n     * Is this the default label for this language\n     */\n    IsDefaultForLanguage?: boolean;\n    /**\n     * LCID language id\n     */\n    Language?: number;\n    /**\n     * Label value\n     */\n    Value?: string;\n}\n\n/**\n * Represents a label instance\n */\nexport interface ILabel extends IClientSvcQueryable {\n    /**\n     * Gets the data for this Label\n     */\n    get(): Promise<ILabelData & ILabel>;\n    /**\n     * Sets this label as the default\n     */\n    setAsDefaultForLanguage(): Promise<void>;\n    /**\n     * Deletes this label\n     */\n    delete(): Promise<void>;\n}\n\n/**\n * Represents a label instance\n */\nexport class Label extends ClientSvcQueryable implements ILabel {\n    /**\n     * Gets the data for this Label\n     */\n    public get(): Promise<ILabelData & ILabel> {\n        return this.sendGet<ILabelData, ILabel>(Label);\n    }\n\n    /**\n     * Sets this label as the default\n     */\n    public setAsDefaultForLanguage(): Promise<void> {\n        return this.invokeNonQuery(\"SetAsDefaultForLanguage\");\n    }\n\n    /**\n     * Deletes this label\n     */\n    public delete(): Promise<void> {\n        return this.invokeNonQuery(\"DeleteObject\");\n    }\n}\n","import { extend, sanitizeGuid, stringIsNullOrEmpty, getGUID } from \"@pnp/common\";\nimport {\n    ClientSvcQueryable,\n    IClientSvcQueryable,\n    MethodParams,\n    setProperty,\n} from \"@pnp/sp-clientsvc\";\nimport { ILabelData, ILabel, ILabels, Labels } from \"./labels\";\nimport { ITermSet, TermSet, ITermSets, TermSets } from \"./termsets\";\n\nexport interface ITerms extends IClientSvcQueryable {\n    get(): Promise<(ITermData & ITerm)[]>;\n    getById(id: string): ITerm;\n    getByName(name: string): ITerm;\n}\n\nexport interface ITermData {\n    CustomProperties?: any;\n    CustomSortOrder?: any | null;\n    Description?: string;\n    Id?: string;\n    IsAvailableForTagging?: boolean;\n    IsDeprecated?: boolean;\n    IsKeyword?: boolean;\n    IsPinned?: boolean;\n    IsPinnedRoot?: boolean;\n    IsReused?: boolean;\n    IsRoot?: boolean;\n    IsSourceTerm?: boolean;\n    LastModifiedDate?: string;\n    LocalCustomProperties?: any;\n    MergedTermIds?: any[];\n    Name?: string;\n    Owner?: string;\n    PathOfTerm?: string;\n    TermsCount?: number;\n}\n\nexport interface ITerm extends IClientSvcQueryable {\n    readonly labels: ILabels;\n    readonly parent: ITerm;\n    readonly pinSourceTermSet: ITermSet;\n    readonly reusedTerms: ITerms;\n    readonly sourceTerm: ITerm;\n    readonly terms: ITerms;\n    readonly termSet: ITermSet;\n    readonly termSets: ITermSets;\n    createLabel(name: string, lcid: number, isDefault?: boolean): Promise<ILabelData & ILabel>;\n    deprecate(doDeprecate: boolean): Promise<void>;\n    get(): Promise<(ITermData & ITerm)>;\n    addTerm(name: string, lcid: number, isAvailableForTagging?: boolean, id?: string): Promise<ITerm & ITermData>;\n    getDescription(lcid: number): Promise<string>;\n    setDescription(description: string, lcid: number): Promise<void>;\n    setLocalCustomProperty(name: string, value: string): Promise<void>;\n    update(properties: { Name: string }): Promise<ITermData & ITerm>;\n}\n\nexport class Terms extends ClientSvcQueryable implements ITerms {\n\n    /**\n     * Gets the terms in this collection\n     */\n    public get(): Promise<(ITermData & ITerm)[]> {\n        return this.sendGetCollection<ITermData, ITerm>((d: ITermData) => {\n\n            if (!stringIsNullOrEmpty(d.Name)) {\n                return this.getByName(d.Name);\n            } else if (!stringIsNullOrEmpty(d.Id)) {\n                return this.getById(d.Id);\n            }\n            throw Error(\"Could not find Name or Id in Terms.get(). You must include at least one of these in your select fields.\");\n        });\n    }\n\n    /**\n     * Gets a term by id\n     * \n     * @param id The id of the term\n     */\n    public getById(id: string): ITerm {\n        const params = MethodParams.build()\n            .string(sanitizeGuid(id));\n\n        return this.getChild(Term, \"GetById\", params);\n    }\n\n    /**\n     * Gets a term by name\n     * \n     * @param name Term name\n     */\n    public getByName(name: string): ITerm {\n\n        const params = MethodParams.build()\n            .string(name);\n\n        return this.getChild(Term, \"GetByName\", params);\n    }\n}\n\n/**\n * Represents the operations available on a given term\n */\nexport class Term extends ClientSvcQueryable implements ITerm {\n\n    public addTerm(name: string, lcid: number, isAvailableForTagging = true, id = getGUID()): Promise<ITerm & ITermData> {\n\n        const params = MethodParams.build()\n            .string(name)\n            .number(lcid)\n            .string(sanitizeGuid(id));\n\n        this._useCaching = false;\n        return this.invokeMethod<ITermData>(\"CreateTerm\", params,\n            setProperty(\"IsAvailableForTagging\", \"Boolean\", `${isAvailableForTagging}`))\n            .then(r => extend(this.termSet.getTermById(r.Id), r));\n    }\n\n    public get terms(): ITerms {\n        return this.getChildProperty(Terms, \"Terms\");\n    }\n\n    public get labels(): ILabels {\n        return new Labels(this);\n    }\n\n    public get parent(): ITerm {\n        return this.getChildProperty(Term, \"Parent\");\n    }\n\n    public get pinSourceTermSet(): ITermSet {\n        return this.getChildProperty(TermSet, \"PinSourceTermSet\");\n    }\n\n    public get reusedTerms(): ITerms {\n        return this.getChildProperty(Terms, \"ReusedTerms\");\n    }\n\n    public get sourceTerm(): ITerm {\n        return this.getChildProperty(Term, \"SourceTerm\");\n    }\n\n    public get termSet(): ITermSet {\n        return this.getChildProperty(TermSet, \"TermSet\");\n    }\n\n    public get termSets(): ITermSets {\n        return this.getChildProperty(TermSets, \"TermSets\");\n    }\n\n    /**\n     * Creates a new label for this Term\n     * \n     * @param name label value\n     * @param lcid language code\n     * @param isDefault Is the default label\n     */\n    public createLabel(name: string, lcid: number, isDefault = false): Promise<ILabelData & ILabel> {\n\n        const params = MethodParams.build()\n            .string(name)\n            .number(lcid)\n            .boolean(isDefault);\n\n        this._useCaching = false;\n        return this.invokeMethod<ILabelData>(\"CreateLabel\", params)\n            .then(r => extend(this.labels.getByValue(name), r));\n    }\n\n    /**\n     * Sets the deprecation flag on a term\n     * \n     * @param doDeprecate New value for the deprecation flag\n     */\n    public deprecate(doDeprecate: boolean): Promise<void> {\n\n        const params = MethodParams.build().boolean(doDeprecate);\n        return this.invokeNonQuery(\"Deprecate\", params);\n    }\n\n    /**\n     * Loads the term data\n     */\n    public get(): Promise<(ITermData & ITerm)> {\n        return this.sendGet<ITermData, ITerm>(Term);\n    }\n\n    /**\n     * Gets the appropriate description for a term\n     * \n     * @param lcid Language code\n     */\n    public getDescription(lcid: number): Promise<string> {\n\n        const params = MethodParams.build().number(lcid);\n        return this.invokeMethodAction<string>(\"GetDescription\", params);\n    }\n\n    /**\n     * Sets the description\n     * \n     * @param description Term description\n     * @param lcid Language code\n     */\n    public setDescription(description: string, lcid: number): Promise<void> {\n\n        const params = MethodParams.build().string(description).number(lcid);\n        return this.invokeNonQuery(\"SetDescription\", params);\n    }\n\n    /**\n     * Sets a custom property on this term\n     * \n     * @param name Property name\n     * @param value Property value\n     */\n    public setLocalCustomProperty(name: string, value: string): Promise<void> {\n\n        const params = MethodParams.build().string(name).string(value);\n        return this.invokeNonQuery(\"SetLocalCustomProperty\", params);\n    }\n\n    /**\n     * Updates the specified properties of this term, not all properties can be updated\n     * \n     * @param properties Plain object representing the properties and new values to update\n     */\n    public update(properties: { Name: string }): Promise<ITermData & ITerm> {\n        return this.invokeUpdate<ITermData, ITerm>(properties, Term);\n    }\n}\n","import { extend, getGUID, sanitizeGuid, stringIsNullOrEmpty } from \"@pnp/common\";\nimport { ClientSvcQueryable, IClientSvcQueryable, MethodParams, setProperty } from \"@pnp/sp-clientsvc\";\nimport { ITermGroup, TermGroup } from \"./termgroup\";\nimport { ITerm, ITermData, ITerms, Term, Terms } from \"./terms\";\n\nexport interface ITermSets extends IClientSvcQueryable {\n    getById(id: string): ITermSet;\n    getByName(name: string): ITermSet;\n    get(): Promise<(ITermSetData & ITermSet)[]>;\n}\n\nexport interface ITermSetData {\n    Contact?: string;\n    CreatedDate?: string;\n    CustomProperties?: any;\n    CustomSortOrder?: any | null;\n    Description?: string;\n    Id?: string;\n    IsAvailableForTagging?: boolean;\n    IsOpenForTermCreation?: boolean;\n    LastModifiedDate?: string;\n    Name?: string;\n    Names?: { [key: number]: string };\n    Owner?: string;\n    Stakeholders?: string[];\n}\n\nexport class TermSets extends ClientSvcQueryable implements ITermSets {\n\n    /**\n     * Gets the termsets in this collection\n     */\n    public get(): Promise<(ITermSetData & ITermSet)[]> {\n        return this.sendGetCollection<ITermSetData, ITermSet>((d: ITermSetData) => {\n            if (!stringIsNullOrEmpty(d.Name)) {\n                return this.getByName(d.Name);\n            } else if (!stringIsNullOrEmpty(d.Id)) {\n                return this.getById(d.Id);\n            }\n            throw Error(\"Could not find Value in Labels.get(). You must include at least one of these in your select fields.\");\n        });\n    }\n\n    /**\n     * Gets a TermSet from this collection by id\n     * \n     * @param id TermSet id\n     */\n    public getById(id: string): ITermSet {\n\n        const params = MethodParams.build()\n            .string(sanitizeGuid(id));\n\n        return this.getChild(TermSet, \"GetById\", params);\n    }\n\n    /**\n     * Gets a TermSet from this collection by name\n     * \n     * @param name TermSet name\n     */\n    public getByName(name: string): ITermSet {\n\n        const params = MethodParams.build()\n            .string(name);\n\n        return this.getChild(TermSet, \"GetByName\", params);\n    }\n}\n\nexport interface ITermSet extends IClientSvcQueryable {\n    readonly terms: ITerms;\n    readonly group: ITermGroup;\n    copy(): Promise<ITermSetData>;\n    get(): Promise<(ITermSetData & ITermSet)>;\n    getTermById(id: string): ITerm;\n    addTerm(name: string, lcid: number, isAvailableForTagging?: boolean, id?: string): Promise<ITerm & ITermData>;\n    update(properties: TermSetUpdateProps): Promise<ITermSetData & ITermSet>;\n}\n\nexport type TermSetUpdateProps = {\n    Contact?: string,\n    Description?: string,\n    IsOpenForTermCreation?: boolean,\n};\n\nexport class TermSet extends ClientSvcQueryable implements ITermSet {\n\n    /**\n     * Gets the group containing this Term set\n     */\n    public get group(): ITermGroup {\n        return this.getChildProperty(TermGroup, \"Group\");\n    }\n\n    /**\n     * Access all the terms in this termset\n     */\n    public get terms(): ITerms {\n        return this.getChild(Terms, \"GetAllTerms\", null);\n    }\n\n    /**\n     * Adds a stakeholder to the TermSet\n     * \n     * @param stakeholderName The login name of the user to be added as a stakeholder\n     */\n    public addStakeholder(stakeholderName: string): Promise<void> {\n        const params = MethodParams.build()\n            .string(stakeholderName);\n\n        return this.invokeNonQuery(\"DeleteStakeholder\", params);\n    }\n\n    /**\n     * Deletes a stakeholder to the TermSet\n     * \n     * @param stakeholderName The login name of the user to be added as a stakeholder\n     */\n    public deleteStakeholder(stakeholderName: string): Promise<void> {\n        const params = MethodParams.build()\n            .string(stakeholderName);\n\n        return this.invokeNonQuery(\"AddStakeholder\", params);\n    }\n\n    /**\n     * Gets the data for this TermSet\n     */\n    public get(): Promise<ITermSetData & ITermSet> {\n        return this.sendGet<ITermSetData, ITermSet>(TermSet);\n    }\n\n    /**\n     * Get a term by id\n     * \n     * @param id Term id\n     */\n    public getTermById(id: string): ITerm {\n\n        const params = MethodParams.build()\n            .string(sanitizeGuid(id));\n\n        return this.getChild(Term, \"GetTerm\", params);\n    }\n\n    /**\n     * Adds a term to this term set\n     * \n     * @param name Name for the term\n     * @param lcid Language code\n     * @param isAvailableForTagging set tagging availability (default: true)\n     * @param id GUID id for the term (optional)\n     */\n    public addTerm(name: string, lcid: number, isAvailableForTagging = true, id = getGUID()): Promise<ITerm & ITermData> {\n\n        const params = MethodParams.build()\n            .string(name)\n            .number(lcid)\n            .string(sanitizeGuid(id));\n\n        this._useCaching = false;\n        return this.invokeMethod<ITermData>(\"CreateTerm\", params,\n            setProperty(\"IsAvailableForTagging\", \"Boolean\", `${isAvailableForTagging}`))\n            .then(r => extend(this.getTermById(r.Id), r));\n    }\n\n    /**\n     * Copies this term set immediately\n     */\n    public copy(): Promise<ITermSetData> {\n        return this.invokeMethod(\"Copy\", null);\n    }\n\n    /**\n     * Updates the specified properties of this term set, not all properties can be updated\n     * \n     * @param properties Plain object representing the properties and new values to update\n     */\n    public update(properties: TermSetUpdateProps): Promise<ITermSetData & ITermSet> {\n        return this.invokeUpdate<ITermSetData, ITermSet>(properties, TermSet);\n    }\n}\n","import { extend, getGUID, sanitizeGuid, stringIsNullOrEmpty } from \"@pnp/common\";\nimport { ClientSvcQueryable, IClientSvcQueryable, MethodParams, ObjectPathQueue } from \"@pnp/sp-clientsvc\";\nimport { ITermSet, ITermSetData, ITermSets, TermSets } from \"./termsets\";\nimport { ITermStore, TermStore } from \"./termstores\";\n\nexport interface ITermGroups extends IClientSvcQueryable {\n    get(): Promise<(ITermGroupData & ITermGroup)[]>;\n    getById(id: string): ITermGroup;\n    getByName(name: string): ITermGroup;\n}\n\nexport interface ITermGroupData {\n    CreatedDate?: string;\n    Description?: string;\n    Id?: string;\n    IsSiteCollectionGroup?: boolean;\n    IsSystemGroup?: boolean;\n    LastModifiedDate?: string;\n    Name?: string;\n}\n\nexport interface ITermGroup extends IClientSvcQueryable {\n\n    /**\n     * ITermStore containing this TermGroup\n     */\n    readonly store: ITermStore | null;\n\n    /**\n     * Gets the collection of term sets in this group\n     */\n    readonly termSets: ITermSets;\n\n    /**\n     * Adds a contributor to the Group\n     * \n     * @param principalName The login name of the user to be added as a contributor\n     */\n    addContributor(principalName: string): Promise<void>;\n    /**\n     * Adds a group manager to the Group\n     * \n     * @param principalName The login name of the user to be added as a group manager\n     */\n    addGroupManager(principalName: string): Promise<void>;\n    /**\n     * Creates a new TermSet in this Group using the provided language and unique identifier\n     * \n     * @param name The name of the new TermSet being created\n     * @param lcid The language that the new TermSet name is in\n     * @param id The unique identifier of the new TermSet being created (optional)\n     */\n    createTermSet(name: string, lcid: number, id?: string): Promise<ITermSet & ITermSetData>;\n    /**\n     * Gets this term store's data\n     */\n    get(): Promise<(ITermGroupData & ITermGroup)>;\n    /**\n     * Updates the specified properties of this term set, not all properties can be updated\n     * \n     * @param properties Plain object representing the properties and new values to update\n     */\n    update(properties: TermGroupUpdateProps): Promise<ITermGroupData & ITermGroup>;\n}\n\nexport type TermGroupUpdateProps = {\n    Description?: string,\n};\n\n/**\n * Term Groups collection in Term Store\n */\nexport class TermGroups extends ClientSvcQueryable implements ITermGroups {\n    /**\n     * Gets the groups in this collection\n     */\n    public get(): Promise<(ITermGroupData & ITermGroup)[]> {\n        return this.sendGetCollection<ITermGroupData, ITermGroup>((d: ITermGroupData) => {\n            if (!stringIsNullOrEmpty(d.Name)) {\n                return this.getByName(d.Name);\n            } else if (!stringIsNullOrEmpty(d.Id)) {\n                return this.getById(d.Id);\n            }\n            throw Error(\"Could not find Name or Id in TermGroups.get(). You must include at least one of these in your select fields.\");\n        });\n    }\n\n    /**\n     * Gets a TermGroup from this collection by id\n     * \n     * @param id TermGroup id\n     */\n    public getById(id: string): ITermGroup {\n\n        const params = MethodParams.build()\n            .string(sanitizeGuid(id));\n\n        return this.getChild(TermGroup, \"GetById\", params);\n    }\n\n    /**\n     * Gets a TermGroup from this collection by name\n     * \n     * @param name TErmGroup name\n     */\n    public getByName(name: string): ITermGroup {\n\n        const params = MethodParams.build()\n            .string(name);\n\n        return this.getChild(TermGroup, \"GetByName\", params);\n    }\n}\n\n/**\n * Represents a group in the taxonomy heirarchy\n */\nexport class TermGroup extends ClientSvcQueryable implements ITermGroup {\n\n    /**\n     * ITermStore containing this TermGroup\n     */\n    public readonly store: ITermStore | null;\n\n    constructor(parent: ClientSvcQueryable | string = \"\", _objectPaths?: ObjectPathQueue) {\n        super(parent, _objectPaths);\n\n        // this should mostly be true\n        this.store = parent instanceof TermStore ? parent : null;\n    }\n\n    /**\n     * Gets the collection of term sets in this group\n     */\n    public get termSets(): ITermSets {\n        return this.getChildProperty(TermSets, \"TermSets\");\n    }\n\n    /**\n     * Adds a contributor to the Group\n     * \n     * @param principalName The login name of the user to be added as a contributor\n     */\n    public addContributor(principalName: string): Promise<void> {\n\n        const params = MethodParams.build().string(principalName);\n        return this.invokeNonQuery(\"AddContributor\", params);\n    }\n\n    /**\n     * Adds a group manager to the Group\n     * \n     * @param principalName The login name of the user to be added as a group manager\n     */\n    public addGroupManager(principalName: string): Promise<void> {\n\n        const params = MethodParams.build().string(principalName);\n        return this.invokeNonQuery(\"AddGroupManager\", params);\n    }\n\n    /**\n     * Creates a new TermSet in this Group using the provided language and unique identifier\n     * \n     * @param name The name of the new TermSet being created\n     * @param lcid The language that the new TermSet name is in\n     * @param id The unique identifier of the new TermSet being created (optional)\n     */\n    public createTermSet(name: string, lcid: number, id = getGUID()): Promise<ITermSet & ITermSetData> {\n\n        const params = MethodParams.build()\n            .string(name)\n            .string(sanitizeGuid(id))\n            .number(lcid);\n\n        this._useCaching = false;\n        return this.invokeMethod<ITermSetData>(\"CreateTermSet\", params)\n            .then(r => extend(this.store.getTermSetById(r.Id), r));\n    }\n\n    /**\n     * Gets this term store's data\n     */\n    public get(): Promise<ITermGroupData & ITermGroup> {\n        return this.sendGet<ITermGroupData, ITermGroup>(TermGroup);\n    }\n\n    /**\n     * Updates the specified properties of this term set, not all properties can be updated\n     * \n     * @param properties Plain object representing the properties and new values to update\n     */\n    public update(properties: TermGroupUpdateProps): Promise<ITermGroupData & ITermGroup> {\n        return this.invokeUpdate<ITermGroupData, ITermGroup>(properties, TermGroup);\n    }\n}\n","import { extend, getGUID, sanitizeGuid, stringIsNullOrEmpty } from \"@pnp/common\";\nimport { ClientSvcQueryable, IClientSvcQueryable, MethodParams, ObjectPathQueue, method, objConstructor, objectPath, objectProperties, opQuery, property } from \"@pnp/sp-clientsvc\";\nimport { ITermGroup, ITermGroupData, TermGroup, ITermGroups, TermGroups } from \"./termgroup\";\nimport { ITerm, ITerms, Term, Terms } from \"./terms\";\nimport { ITermSet, ITermSets, TermSet, TermSets } from \"./termsets\";\nimport { ChangeInformation, ChangedItem, ILabelMatchInfo } from \"./types\";\n\n/**\n * Defines the visible members of the term store \n */\nexport interface ITermStores extends IClientSvcQueryable {\n    get(): Promise<(ITermStoreData & ITermStore)[]>;\n    getByName(name: string): ITermStore;\n    getById(id: string): ITermStore;\n}\n\n/**\n * Represents the set of available term stores and the collection methods\n */\nexport class TermStores extends ClientSvcQueryable implements ITermStores {\n\n    constructor(parent: ClientSvcQueryable | string = \"\") {\n        super(parent);\n\n        this._objectPaths.add(property(\"TermStores\",\n            // actions\n            objectPath()));\n    }\n\n    /**\n     * Gets the term stores\n     */\n    public get(): Promise<(ITermStoreData & ITermStore)[]> {\n        return this.sendGetCollection<ITermStoreData, ITermStore>((d: ITermStoreData): ITermStore => {\n\n            if (!stringIsNullOrEmpty(d.Name)) {\n                return this.getByName(d.Name);\n            } else if (!stringIsNullOrEmpty(d.Id)) {\n                return this.getById(d.Id);\n            }\n            throw Error(\"Could not find Name or Id in TermStores.get(). You must include at least one of these in your select fields.\");\n        });\n    }\n\n    /**\n     * Returns the TermStore specified by its index name\n     *\n     * @param name The index name of the TermStore to be returned\n     */\n    public getByName(name: string): ITermStore {\n        return this.getChild(TermStore, \"GetByName\", MethodParams.build().string(name));\n    }\n\n    /**\n     * Returns the TermStore specified by its GUID index\n     *\n     * @param id The GUID index of the TermStore to be returned\n     */\n    public getById(id: string): ITermStore {\n        return this.getChild(TermStore, \"GetById\", MethodParams.build().string(sanitizeGuid(id)));\n    }\n}\n\n/**\n * Defines the term store object\n */\nexport interface ITermStore extends IClientSvcQueryable {\n    readonly hashTagsTermSet: ITermSet;\n    readonly keywordsTermSet: ITermSet;\n    readonly orphanedTermsTermSet: ITermSet;\n    readonly systemGroup: ITermGroup;\n    readonly groups: ITermGroups;\n    addGroup(name: string, id?: string): Promise<ITermGroup & ITermGroupData>;\n    addLanguage(lcid: number): Promise<void>;\n    commitAll(): Promise<void>;\n    deleteLanguage(lcid: number): Promise<void>;\n    get(): Promise<(ITermStoreData & ITermStore)>;\n    getChanges(info: ChangeInformation): Promise<ChangedItem[]>;\n    getSiteCollectionGroup(createIfMissing?: boolean): ITermGroup;\n    getTermById(id: string): ITerm;\n    getTermInTermSet(termId: string, termSetId: string): ITerm;\n    getTermGroupById(id: string): ITermGroup;\n    getTerms(info: ILabelMatchInfo): ITerms;\n    getTermsById(...ids: string[]): any;\n    getTermSetById(id: string): ITermSet;\n    getTermSetsByName(name: string, lcid: number): ITermSets;\n    rollbackAll(): Promise<void>;\n    update(properties: TermStoreUpdateProps): Promise<ITermStoreData & ITermStore>;\n    updateCache(): Promise<void>;\n    updateUsedTermsOnSite(): Promise<void>;\n}\n\n/**\n * Defines the term store object\n */\nexport interface ITermStoreData {\n    DefaultLanguage?: number;\n    Id?: string;\n    IsOnline?: boolean;\n    Languages?: string[];\n    Name?: string;\n    WorkingLanguage?: number;\n}\n\nexport type TermStoreUpdateProps = {\n    DefaultLanguage?: number,\n    WorkingLanguage?: number,\n};\n\nexport class TermStore extends ClientSvcQueryable implements ITermStore {\n\n    constructor(parent: ClientSvcQueryable | string = \"\", _objectPaths: ObjectPathQueue | null = null) {\n        super(parent, _objectPaths);\n    }\n\n    public get hashTagsTermSet(): ITermSet {\n        return this.getChildProperty(TermSet, \"HashTagsTermSet\");\n    }\n\n    public get keywordsTermSet(): ITermSet {\n        return this.getChildProperty(TermSet, \"KeywordsTermSet\");\n    }\n\n    public get orphanedTermsTermSet(): ITermSet {\n        return this.getChildProperty(TermSet, \"OrphanedTermsTermSet\");\n    }\n\n    public get systemGroup(): ITermGroup {\n        return this.getChildProperty(TermGroup, \"SystemGroup\");\n    }\n\n    public get groups(): ITermGroups {\n        return this.getChildProperty(TermGroups, \"Groups\");\n    }\n\n    /**\n     * Gets the term store data\n     */\n    public get(): Promise<(ITermStoreData & ITermStore)> {\n        return this.sendGet<ITermStoreData, ITermStore>(TermStore);\n    }\n\n    /**\n     * Gets term sets\n     * \n     * @param name \n     * @param lcid \n     */\n    public getTermSetsByName(name: string, lcid: number): ITermSets {\n\n        const params = MethodParams.build()\n            .string(name)\n            .number(lcid);\n\n        return this.getChild(TermSets, \"GetTermSetsByName\", params);\n    }\n\n    /**\n     * Provides access to an ITermSet by id\n     * \n     * @param id \n     */\n    public getTermSetById(id: string): ITermSet {\n\n        const params = MethodParams.build().string(sanitizeGuid(id));\n        return this.getChild(TermSet, \"GetTermSet\", params);\n    }\n\n    /**\n     * Provides access to an ITermSet by id\n     * \n     * @param id \n     */\n    public getTermById(id: string): ITerm {\n\n        const params = MethodParams.build().string(sanitizeGuid(id));\n        return this.getChild(Term, \"GetTerm\", params);\n    }\n\n    /**\n     * Provides access to an ITermSet by id\n     * \n     * @param id \n     */\n    public getTermsById(...ids: string[]): ITerms {\n\n        const params = MethodParams.build().strArray(ids.map(id => sanitizeGuid(id)));\n        return this.getChild(Terms, \"GetTermsById\", params);\n    }\n\n    /**\n     * Gets a term from a term set based on the supplied ids\n     * \n     * @param termId Term Id\n     * @param termSetId Termset Id\n     */\n    public getTermInTermSet(termId: string, termSetId: string): ITerm {\n\n        const params = MethodParams.build().string(sanitizeGuid(termId)).string(sanitizeGuid(termSetId));\n        return this.getChild(Term, \"GetTermInTermSet\", params);\n    }\n\n    /**\n     * This method provides access to a ITermGroup by id\n     * \n     * @param id The group id\n     */\n    public getTermGroupById(id: string): ITermGroup {\n\n        const params = MethodParams.build()\n            .string(sanitizeGuid(id));\n\n        return this.getChild(TermGroup, \"GetGroup\", params);\n    }\n\n    /**\n     * Gets the terms by the supplied information (see: https://msdn.microsoft.com/en-us/library/hh626704%28v=office.12%29.aspx)\n     * \n     * @param info \n     */\n    public getTerms(info: ILabelMatchInfo): ITerms {\n\n        const objectPaths = this._objectPaths.copy();\n\n        // this will be the parent of the GetTerms call, but we need to create the input param first\n        const parentIndex = objectPaths.lastIndex;\n\n        // this is our input object\n        const input = objConstructor(\"{61a1d689-2744-4ea3-a88b-c95bee9803aa}\",\n            // actions\n            objectPath(),\n            ...objectProperties(info),\n        );\n\n        // add the input object path\n        const inputIndex = objectPaths.add(input);\n\n        // this sets up the GetTerms call\n        const params = MethodParams.build().objectPath(inputIndex);\n\n        // call the method\n        const methodIndex = objectPaths.add(method(\"GetTerms\", params,\n            // actions\n            objectPath()));\n\n        // setup the parent relationship even though they are seperated in the collection\n        objectPaths.addChildRelationship(parentIndex, methodIndex);\n\n        return new Terms(this, objectPaths);\n    }\n\n    /**\n     * Gets the site collection group associated with the current site\n     * \n     * @param createIfMissing If true the group will be created, otherwise null (default: false)\n     */\n    public getSiteCollectionGroup(createIfMissing = false): ITermGroup {\n\n        const objectPaths = this._objectPaths.copy();\n        const methodParent = objectPaths.lastIndex;\n        const siteIndex = objectPaths.siteIndex;\n\n        const params = MethodParams.build().objectPath(siteIndex).boolean(createIfMissing);\n\n        const methodIndex = objectPaths.add(method(\"GetSiteCollectionGroup\", params,\n            // actions\n            objectPath(),\n        ));\n\n        // the parent of this method call is this instance, not the current/site\n        objectPaths.addChildRelationship(methodParent, methodIndex);\n\n        return new TermGroup(this, objectPaths);\n    }\n\n    /**\n     * Adds a working language to the TermStore\n     * \n     * @param lcid The locale identifier of the working language to add\n     */\n    public addLanguage(lcid: number): Promise<void> {\n\n        const params = MethodParams.build().number(lcid);\n        return this.invokeNonQuery(\"AddLanguage\", params);\n    }\n\n    /**\n     * Creates a new Group in this TermStore\n     * \n     * @param name The name of the new Group being created\n     * @param id The ID (Guid) that the new group should have\n     */\n    public addGroup(name: string, id = getGUID()): Promise<ITermGroup & ITermGroupData> {\n\n        const params = MethodParams.build()\n            .string(name)\n            .string(sanitizeGuid(id));\n\n        this._useCaching = false;\n        return this.invokeMethod<ITermGroupData>(\"CreateGroup\", params)\n            .then(r => extend(this.getTermGroupById(r.Id), r));\n    }\n\n    /**\n     * Commits all updates to the database that have occurred since the last commit or rollback\n     */\n    public commitAll(): Promise<void> {\n        return this.invokeNonQuery(\"CommitAll\");\n    }\n\n    /**\n     * Delete a working language from the TermStore\n     * \n     * @param lcid locale ID for the language to be deleted\n     */\n    public deleteLanguage(lcid: number): Promise<void> {\n\n        const params = MethodParams.build().number(lcid);\n        return this.invokeNonQuery(\"DeleteLanguage\", params);\n    }\n\n    /**\n     * Discards all updates that have occurred since the last commit or rollback\n     */\n    public rollbackAll(): Promise<void> {\n        return this.invokeNonQuery(\"RollbackAll\");\n    }\n\n    /**\n     * Updates the cache\n     */\n    public updateCache(): Promise<void> {\n        return this.invokeNonQuery(\"UpdateCache\");\n    }\n\n    /**\n     * Updates the specified properties of this term set, not all properties can be updated\n     * \n     * @param properties Plain object representing the properties and new values to update\n     */\n    public update(properties: TermStoreUpdateProps): Promise<ITermStoreData & ITermStore> {\n        return this.invokeUpdate<ITermStoreData, ITermStore>(properties, TermStore);\n    }\n\n    /**\n     * This method makes sure that this instance is aware of all child terms that are used in the current site collection\n     */\n    public updateUsedTermsOnSite(): Promise<void> {\n\n        const objectPaths = this._objectPaths.copy();\n        const methodParent = objectPaths.lastIndex;\n        const siteIndex = objectPaths.siteIndex;\n\n        const params = MethodParams.build().objectPath(siteIndex);\n\n        const methodIndex = objectPaths.add(method(\"UpdateUsedTermsOnSite\", params));\n\n        // the parent of this method call is this instance, not the current context/site\n        objectPaths.addChildRelationship(methodParent, methodIndex);\n\n        return this.send<void>(objectPaths);\n    }\n\n    /**\n     * Gets a list of changes\n     * \n     * @param info Lookup information\n     */\n    public getChanges(info: ChangeInformation): Promise<ChangedItem[]> {\n\n        const objectPaths = this._objectPaths.copy();\n        const methodParent = objectPaths.lastIndex;\n\n        const inputIndex = objectPaths.add(objConstructor(\"{1f849fb0-4fcb-4a54-9b01-9152b9e482d3}\",\n            // actions\n            objectPath(),\n            ...objectProperties(info),\n        ));\n\n        const params = MethodParams.build().objectPath(inputIndex);\n\n        const methodIndex = objectPaths.add(method(\"GetChanges\", params,\n            // actions\n            objectPath(),\n            opQuery([], this.getSelects()),\n        ));\n\n        objectPaths.addChildRelationship(methodParent, methodIndex);\n\n        return this.send<ChangedItem[]>(objectPaths);\n    }\n}\n","import { SPConfiguration, sp } from \"@pnp/sp\";\nimport { ClientSvcQueryable, IObjectPathBatch, ObjectPathBatch, objectPath, staticMethod } from \"@pnp/sp-clientsvc\";\nimport { ITermStore, ITermStores, TermStore, TermStores } from \"./termstores\";\n\n/**\n * Defines the publicly visible members of Taxonomy\n */\nexport interface ITaxonomySession {\n\n    /**\n     * The collection of term stores\n     */\n    termStores: ITermStores;\n\n    /**\n     * Provides access to sp.setup from @pnp/sp\n     * \n     * @param config Configuration\n     */\n    setup(config: SPConfiguration): void;\n\n    /**\n     * Creates a new batch\n     */\n    createBatch(): IObjectPathBatch;\n\n    /**\n     * Gets the default keyword termstore for this session\n     */\n    getDefaultKeywordTermStore(): ITermStore;\n\n    /**\n     * Gets the default site collection termstore for this session\n     */\n    getDefaultSiteCollectionTermStore(): ITermStore;\n}\n\n/**\n * The root taxonomy object\n */\nexport class Session extends ClientSvcQueryable implements ITaxonomySession {\n\n    constructor(webUrl = \"\") {\n        super(webUrl);\n\n        // everything starts with the session\n        this._objectPaths.add(staticMethod(\"GetTaxonomySession\", \"{981cbc68-9edc-4f8d-872f-71146fcbb84f}\",\n            // actions\n            objectPath()));\n    }\n\n    /**\n     * The collection of term stores\n     */\n    public get termStores(): ITermStores {\n        return new TermStores(this);\n    }\n\n    /**\n     * Provides access to sp.setup from @pnp/sp\n     * \n     * @param config Configuration\n     */\n    public setup(config: SPConfiguration): void {\n        sp.setup(config);\n    }\n\n    /**\n     * Creates a new batch\n     */\n    public createBatch(): IObjectPathBatch {\n        return new ObjectPathBatch(this.toUrl());\n    }\n\n    /**\n     * Gets the default keyword termstore for this session\n     */\n    public getDefaultKeywordTermStore(): ITermStore {\n        return this.getChild(TermStore, \"GetDefaultKeywordsTermStore\", null);\n    }\n\n    /**\n     * Gets the default site collection termstore for this session\n     */\n    public getDefaultSiteCollectionTermStore(): ITermStore {\n        return this.getChild(TermStore, \"GetDefaultSiteCollectionTermStore\", null);\n    }\n}\n","import { Session, ITaxonomySession } from \"./session\";\n\n// export an existing session instance\nexport const taxonomy: ITaxonomySession = new Session();\n\nexport * from \"./labels\";\nexport * from \"./session\";\nexport * from \"./termgroup\";\nexport * from \"./terms\";\nexport * from \"./termsets\";\nexport * from \"./termstores\";\nexport * from \"./types\";\nexport * from \"./utilities\";\n","import { sanitizeGuid, TypedHash, objectDefinedNotNull } from \"@pnp/common\";\nimport { Item, ItemUpdateResult } from \"@pnp/sp\";\nimport { ITermData } from \"./terms\";\n\nexport function setItemMetaDataField(item: Item, fieldName: string, term: ITermData): Promise<ItemUpdateResult> {\n\n    if (!objectDefinedNotNull(term)) {\n        return Promise.resolve(null);\n    }\n\n    const postData: TypedHash<any> = {};\n    postData[fieldName] = {\n        \"Label\": term.Name,\n        \"TermGuid\": sanitizeGuid(term.Id),\n        \"WssId\": \"-1\",\n        \"__metadata\": { \"type\": \"SP.Taxonomy.TaxonomyFieldValue\" },\n    };\n\n    return item.update(postData);\n}\n\nexport function setItemMetaDataMultiField(item: Item, fieldName: string, ...terms: ITermData[]): Promise<ItemUpdateResult> {\n\n    if (terms.length < 1) {\n        return Promise.resolve(null);\n    }\n\n    return item.list.fields.getByTitle(`${fieldName}_0`).select(\"InternalName\").get<{ InternalName: string}>().then(i => {\n\n        const postData: TypedHash<string> = {};\n        postData[i.InternalName] = terms.map(term => `-1;#${term.Name}|${sanitizeGuid(term.Id)};#`).join(\"\");\n\n        return item.update(postData);\n    });\n}\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","StringMatchOption","ChangedItemType","ChangedOperationType","parent","_objectPaths","_super","_this","add","property","tslib_1.__extends","Labels","value","params","MethodParams","build","string","getChild","Label","sendGetCollection","stringIsNullOrEmpty","Value","getByValue","Error","ClientSvcQueryable","sendGet","invokeNonQuery","Terms","Name","getByName","Id","getById","id","sanitizeGuid","Term","name","lcid","isAvailableForTagging","getGUID","number","_useCaching","invokeMethod","setProperty","then","r","extend","termSet","getTermById","getChildProperty","TermSet","TermSets","isDefault","boolean","labels","doDeprecate","invokeMethodAction","description","properties","invokeUpdate","TermGroup","stakeholderName","TermGroups","store","TermStore","principalName","getTermSetById","objectPath","TermStores","_i","ids","strArray","map","termId","termSetId","info","objectPaths","copy","parentIndex","lastIndex","input","objConstructor","objectProperties","inputIndex","methodIndex","method","addChildRelationship","createIfMissing","methodParent","siteIndex","getTermGroupById","send","opQuery","getSelects","webUrl","staticMethod","Session","config","sp","setup","ObjectPathBatch","toUrl","taxonomy","item","fieldName","term","objectDefinedNotNull","Promise","resolve","postData","TermGuid","WssId","__metadata","type","update","terms","length","list","fields","getByTitle","select","get","i","InternalName","join"],"mappings":"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"}